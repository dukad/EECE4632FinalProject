

================================================================
== Vitis HLS Report for 'equalizer'
================================================================
* Date:           Tue Apr 23 13:25:01 2024

* Version:        2022.1 (Build 3526262 on Mon Apr 18 15:48:16 MDT 2022)
* Project:        equalizer
* Solution:       solution1 (Vivado IP Flow Target)
* Product family: zynq
* Target device:  xc7z020-clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  7.300 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |        ?|        ?|         ?|         ?|    ?|    ?|       no|
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                   |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |     Loop Name     |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- Running_Loop     |        ?|        ?|   2 ~ 260|          -|          -|     ?|        no|
        | + Coef_Read_Loop  |      256|      256|         8|          -|          -|    32|        no|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 56
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 46 48 47 
3 --> 4 
4 --> 5 
5 --> 6 
6 --> 7 
7 --> 8 
8 --> 9 
9 --> 10 
10 --> 11 
11 --> 12 
12 --> 13 
13 --> 14 
14 --> 15 
15 --> 16 
16 --> 17 
17 --> 18 
18 --> 19 
19 --> 20 
20 --> 21 
21 --> 22 
22 --> 23 
23 --> 24 
24 --> 25 
25 --> 26 
26 --> 27 
27 --> 28 
28 --> 29 
29 --> 30 
30 --> 31 
31 --> 32 
32 --> 33 
33 --> 34 
34 --> 35 
35 --> 36 
36 --> 37 
37 --> 38 
38 --> 39 
39 --> 40 
40 --> 41 
41 --> 42 
42 --> 43 
43 --> 44 
44 --> 45 
45 --> 46 
46 --> 47 56 
47 --> 2 
48 --> 49 46 
49 --> 50 
50 --> 51 
51 --> 52 
52 --> 53 
53 --> 54 
54 --> 55 
55 --> 48 
56 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.58>
ST_1 : Operation 57 [1/1] (0.00ns)   --->   "%tmp_out_data_V = alloca i32 1"   --->   Operation 57 'alloca' 'tmp_out_data_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 58 [1/1] (0.00ns)   --->   "%tmp_out_keep_V = alloca i32 1"   --->   Operation 58 'alloca' 'tmp_out_keep_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 59 [1/1] (0.00ns)   --->   "%tmp_out_strb_V = alloca i32 1"   --->   Operation 59 'alloca' 'tmp_out_strb_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 60 [1/1] (0.00ns)   --->   "%tmp_out_user_V = alloca i32 1"   --->   Operation 60 'alloca' 'tmp_out_user_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 61 [1/1] (0.00ns)   --->   "%tmp_out_id_V = alloca i32 1"   --->   Operation 61 'alloca' 'tmp_out_id_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 62 [1/1] (0.00ns)   --->   "%tmp_out_dest_V = alloca i32 1"   --->   Operation 62 'alloca' 'tmp_out_dest_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 63 [1/1] (0.00ns)   --->   "%state = alloca i32 1"   --->   Operation 63 'alloca' 'state' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 64 [1/1] (0.00ns)   --->   "%spectopmodule_ln3 = spectopmodule void @_ssdm_op_SpecTopModule, void @empty_3" [equalizer.cpp:3]   --->   Operation 64 'spectopmodule' 'spectopmodule_ln3' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 65 [1/1] (0.00ns)   --->   "%specinterface_ln3 = specinterface void @_ssdm_op_SpecInterface, i32 0, void @empty_4, i32 0, i32 0, void @empty_8, i32 0, i32 0, void @empty_8, void @empty_8, void @empty_8, i32 0, i32 0, i32 0, i32 0, void @empty_8, void @empty_8, i32 4294967295, i32 0" [equalizer.cpp:3]   --->   Operation 65 'specinterface' 'specinterface_ln3' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 66 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i32 %gmem, void @empty_7, i32 0, i32 0, void @empty_8, i32 0, i32 99, void @empty_9, void @empty_11, void @empty_8, i32 16, i32 16, i32 16, i32 16, void @empty_8, void @empty_8, i32 4294967295, i32 0"   --->   Operation 66 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 67 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i32 %gmem"   --->   Operation 67 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 68 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i32 %output_r_V_data_V, i4 %output_r_V_keep_V, i4 %output_r_V_strb_V, i1 %output_r_V_user_V, i1 %output_r_V_last_V, i1 %output_r_V_id_V, i1 %output_r_V_dest_V, void @empty_12, i32 1, i32 1, void @empty_13, i32 0, i32 0, void @empty_8, void @empty_8, void @empty_8, i32 0, i32 0, i32 0, i32 0, void @empty_8, void @empty_8, i32 4294967295, i32 0"   --->   Operation 68 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 69 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i32 %output_r_V_data_V"   --->   Operation 69 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 70 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i4 %output_r_V_keep_V"   --->   Operation 70 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 71 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i4 %output_r_V_strb_V"   --->   Operation 71 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 72 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %output_r_V_user_V"   --->   Operation 72 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 73 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %output_r_V_last_V"   --->   Operation 73 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 74 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %output_r_V_id_V"   --->   Operation 74 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 75 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %output_r_V_dest_V"   --->   Operation 75 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 76 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i64 %coefs, void @empty, i32 0, i32 0, void @empty_8, i32 0, i32 0, void @empty_0, void @empty_1, void @empty_8, i32 0, i32 0, i32 0, i32 0, void @empty_8, void @empty_10, i32 4294967295, i32 0"   --->   Operation 76 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 77 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i64 %coefs, void @empty_2, i32 0, i32 0, void @empty_8, i32 0, i32 0, void @empty_8, void @empty_8, void @empty_8, i32 0, i32 0, i32 0, i32 0, void @empty_8, void @empty_10, i32 4294967295, i32 0"   --->   Operation 77 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 78 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V, void @empty_12, i32 1, i32 1, void @empty_13, i32 0, i32 0, void @empty_8, void @empty_8, void @empty_8, i32 0, i32 0, i32 0, i32 0, void @empty_8, void @empty_8, i32 4294967295, i32 0"   --->   Operation 78 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 79 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i32 %input_r_V_data_V"   --->   Operation 79 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 80 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i4 %input_r_V_keep_V"   --->   Operation 80 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 81 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i4 %input_r_V_strb_V"   --->   Operation 81 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 82 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %input_r_V_user_V"   --->   Operation 82 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 83 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %input_r_V_last_V"   --->   Operation 83 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 84 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %input_r_V_id_V"   --->   Operation 84 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 85 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %input_r_V_dest_V"   --->   Operation 85 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 86 [1/1] (1.00ns)   --->   "%coefs_read = read i64 @_ssdm_op_Read.s_axilite.i64, i64 %coefs"   --->   Operation 86 'read' 'coefs_read' <Predicate = true> <Delay = 1.00> <CoreInst = "s_axilite">   --->   Core 114 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_1 : Operation 87 [1/1] (0.00ns)   --->   "%trunc_ln = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %coefs_read, i32 2, i32 63" [equalizer.cpp:67]   --->   Operation 87 'partselect' 'trunc_ln' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 88 [1/1] (0.00ns)   --->   "%sext_ln67 = sext i62 %trunc_ln" [equalizer.cpp:67]   --->   Operation 88 'sext' 'sext_ln67' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 89 [1/1] (0.00ns)   --->   "%gmem_addr = getelementptr i32 %gmem, i64 %sext_ln67" [equalizer.cpp:67]   --->   Operation 89 'getelementptr' 'gmem_addr' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 90 [1/1] (1.58ns)   --->   "%store_ln26 = store i32 0, i32 %state" [equalizer.cpp:26]   --->   Operation 90 'store' 'store_ln26' <Predicate = true> <Delay = 1.58>
ST_1 : Operation 91 [1/1] (0.00ns)   --->   "%br_ln26 = br void %while.body" [equalizer.cpp:26]   --->   Operation 91 'br' 'br_ln26' <Predicate = true> <Delay = 0.00>

State 2 <SV = 1> <Delay = 7.30>
ST_2 : Operation 92 [1/1] (0.00ns)   --->   "%tmp_out_data_V_1 = load i32 %tmp_out_data_V"   --->   Operation 92 'load' 'tmp_out_data_V_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 93 [1/1] (0.00ns)   --->   "%tmp_out_keep_V_1 = load i4 %tmp_out_keep_V"   --->   Operation 93 'load' 'tmp_out_keep_V_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 94 [1/1] (0.00ns)   --->   "%tmp_out_strb_V_1 = load i4 %tmp_out_strb_V"   --->   Operation 94 'load' 'tmp_out_strb_V_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 95 [1/1] (0.00ns)   --->   "%tmp_out_user_V_1 = load i1 %tmp_out_user_V"   --->   Operation 95 'load' 'tmp_out_user_V_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 96 [1/1] (0.00ns)   --->   "%tmp_out_id_V_1 = load i1 %tmp_out_id_V"   --->   Operation 96 'load' 'tmp_out_id_V_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 97 [1/1] (0.00ns)   --->   "%tmp_out_dest_V_1 = load i1 %tmp_out_dest_V"   --->   Operation 97 'load' 'tmp_out_dest_V_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 98 [1/1] (0.00ns)   --->   "%state_2 = load i32 %state"   --->   Operation 98 'load' 'state_2' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 99 [1/1] (0.00ns)   --->   "%specloopname_ln18 = specloopname void @_ssdm_op_SpecLoopName, void @empty_6" [equalizer.cpp:18]   --->   Operation 99 'specloopname' 'specloopname_ln18' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 100 [1/1] (0.00ns)   --->   "%empty = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 100 'read' 'empty' <Predicate = true> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_2 : Operation 101 [1/1] (0.00ns)   --->   "%tmp_data_V = extractvalue i44 %empty"   --->   Operation 101 'extractvalue' 'tmp_data_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 102 [1/1] (0.00ns)   --->   "%tmp_keep_V = extractvalue i44 %empty"   --->   Operation 102 'extractvalue' 'tmp_keep_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 103 [1/1] (0.00ns)   --->   "%tmp_strb_V = extractvalue i44 %empty"   --->   Operation 103 'extractvalue' 'tmp_strb_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 104 [1/1] (0.00ns)   --->   "%tmp_user_V = extractvalue i44 %empty"   --->   Operation 104 'extractvalue' 'tmp_user_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 105 [1/1] (0.00ns)   --->   "%tmp_last_V_2 = extractvalue i44 %empty"   --->   Operation 105 'extractvalue' 'tmp_last_V_2' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 106 [1/1] (0.00ns)   --->   "%tmp_id_V = extractvalue i44 %empty"   --->   Operation 106 'extractvalue' 'tmp_id_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 107 [1/1] (0.00ns)   --->   "%tmp_dest_V = extractvalue i44 %empty"   --->   Operation 107 'extractvalue' 'tmp_dest_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 108 [1/1] (1.70ns)   --->   "%switch_ln29 = switch i32 %state_2, void %sw.epilog, i32 0, void %sw.bb, i32 17, void %for.inc.preheader, i32 4096, void %for.inc16" [equalizer.cpp:29]   --->   Operation 108 'switch' 'switch_ln29' <Predicate = true> <Delay = 1.70>
ST_2 : Operation 109 [7/7] (7.30ns)   --->   "%empty_21 = readreq i1 @_ssdm_op_ReadReq.m_axi.p1i32, i32 %gmem_addr, i32 33" [equalizer.cpp:67]   --->   Operation 109 'readreq' 'empty_21' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_2 : Operation 110 [1/1] (1.58ns)   --->   "%br_ln39 = br void %for.inc" [equalizer.cpp:39]   --->   Operation 110 'br' 'br_ln39' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_2 : Operation 111 [1/1] (1.70ns)   --->   "%br_ln92 = br i1 %tmp_last_V_2, void %if.end40, void %while.end" [equalizer.cpp:92]   --->   Operation 111 'br' 'br_ln92' <Predicate = (state_2 == 0)> <Delay = 1.70>

State 3 <SV = 2> <Delay = 7.30>
ST_3 : Operation 112 [6/7] (7.30ns)   --->   "%empty_21 = readreq i1 @_ssdm_op_ReadReq.m_axi.p1i32, i32 %gmem_addr, i32 33" [equalizer.cpp:67]   --->   Operation 112 'readreq' 'empty_21' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 4 <SV = 3> <Delay = 7.30>
ST_4 : Operation 113 [5/7] (7.30ns)   --->   "%empty_21 = readreq i1 @_ssdm_op_ReadReq.m_axi.p1i32, i32 %gmem_addr, i32 33" [equalizer.cpp:67]   --->   Operation 113 'readreq' 'empty_21' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 5 <SV = 4> <Delay = 7.30>
ST_5 : Operation 114 [4/7] (7.30ns)   --->   "%empty_21 = readreq i1 @_ssdm_op_ReadReq.m_axi.p1i32, i32 %gmem_addr, i32 33" [equalizer.cpp:67]   --->   Operation 114 'readreq' 'empty_21' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 6 <SV = 5> <Delay = 7.30>
ST_6 : Operation 115 [3/7] (7.30ns)   --->   "%empty_21 = readreq i1 @_ssdm_op_ReadReq.m_axi.p1i32, i32 %gmem_addr, i32 33" [equalizer.cpp:67]   --->   Operation 115 'readreq' 'empty_21' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 7 <SV = 6> <Delay = 7.30>
ST_7 : Operation 116 [2/7] (7.30ns)   --->   "%empty_21 = readreq i1 @_ssdm_op_ReadReq.m_axi.p1i32, i32 %gmem_addr, i32 33" [equalizer.cpp:67]   --->   Operation 116 'readreq' 'empty_21' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 8 <SV = 7> <Delay = 7.30>
ST_8 : Operation 117 [1/7] (7.30ns)   --->   "%empty_21 = readreq i1 @_ssdm_op_ReadReq.m_axi.p1i32, i32 %gmem_addr, i32 33" [equalizer.cpp:67]   --->   Operation 117 'readreq' 'empty_21' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 9 <SV = 8> <Delay = 7.30>
ST_9 : Operation 118 [1/1] (7.30ns)   --->   "%gmem_addr_read = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 118 'read' 'gmem_addr_read' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 10 <SV = 9> <Delay = 7.30>
ST_10 : Operation 119 [1/1] (7.30ns)   --->   "%gmem_addr_read_1 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 119 'read' 'gmem_addr_read_1' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_10 : Operation 120 [2/2] (6.91ns)   --->   "%mul_ln70 = mul i32 %tmp_data_V, i32 %gmem_addr_read" [equalizer.cpp:70]   --->   Operation 120 'mul' 'mul_ln70' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>

State 11 <SV = 10> <Delay = 7.30>
ST_11 : Operation 121 [1/1] (7.30ns)   --->   "%gmem_addr_read_2 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 121 'read' 'gmem_addr_read_2' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_11 : Operation 122 [1/2] (6.91ns)   --->   "%mul_ln70 = mul i32 %tmp_data_V, i32 %gmem_addr_read" [equalizer.cpp:70]   --->   Operation 122 'mul' 'mul_ln70' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>

State 12 <SV = 11> <Delay = 7.30>
ST_12 : Operation 123 [1/1] (7.30ns)   --->   "%gmem_addr_read_3 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 123 'read' 'gmem_addr_read_3' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 13 <SV = 12> <Delay = 7.30>
ST_13 : Operation 124 [1/1] (7.30ns)   --->   "%gmem_addr_read_4 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 124 'read' 'gmem_addr_read_4' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_13 : Operation 125 [1/1] (0.00ns)   --->   "%signal_shift_reg_3_load = load i32 %signal_shift_reg_3" [equalizer.cpp:66]   --->   Operation 125 'load' 'signal_shift_reg_3_load' <Predicate = true> <Delay = 0.00>
ST_13 : Operation 126 [1/1] (0.00ns)   --->   "%signal_shift_reg_2_load = load i32 %signal_shift_reg_2" [equalizer.cpp:66]   --->   Operation 126 'load' 'signal_shift_reg_2_load' <Predicate = true> <Delay = 0.00>
ST_13 : Operation 127 [1/1] (0.00ns)   --->   "%store_ln66 = store i32 %signal_shift_reg_2_load, i32 %signal_shift_reg_3" [equalizer.cpp:66]   --->   Operation 127 'store' 'store_ln66' <Predicate = true> <Delay = 0.00>
ST_13 : Operation 128 [2/2] (6.91ns)   --->   "%mul_ln67_28 = mul i32 %signal_shift_reg_2_load, i32 %gmem_addr_read_3" [equalizer.cpp:67]   --->   Operation 128 'mul' 'mul_ln67_28' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_13 : Operation 129 [1/1] (0.00ns)   --->   "%signal_shift_reg_1_load = load i32 %signal_shift_reg_1" [equalizer.cpp:66]   --->   Operation 129 'load' 'signal_shift_reg_1_load' <Predicate = true> <Delay = 0.00>
ST_13 : Operation 130 [1/1] (0.00ns)   --->   "%store_ln66 = store i32 %signal_shift_reg_1_load, i32 %signal_shift_reg_2" [equalizer.cpp:66]   --->   Operation 130 'store' 'store_ln66' <Predicate = true> <Delay = 0.00>
ST_13 : Operation 131 [2/2] (6.91ns)   --->   "%mul_ln67_29 = mul i32 %signal_shift_reg_1_load, i32 %gmem_addr_read_2" [equalizer.cpp:67]   --->   Operation 131 'mul' 'mul_ln67_29' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_13 : Operation 132 [1/1] (0.00ns)   --->   "%signal_shift_reg_0_load = load i32 %signal_shift_reg_0" [equalizer.cpp:66]   --->   Operation 132 'load' 'signal_shift_reg_0_load' <Predicate = true> <Delay = 0.00>
ST_13 : Operation 133 [1/1] (0.00ns)   --->   "%store_ln66 = store i32 %signal_shift_reg_0_load, i32 %signal_shift_reg_1" [equalizer.cpp:66]   --->   Operation 133 'store' 'store_ln66' <Predicate = true> <Delay = 0.00>
ST_13 : Operation 134 [2/2] (6.91ns)   --->   "%mul_ln67_30 = mul i32 %signal_shift_reg_0_load, i32 %gmem_addr_read_1" [equalizer.cpp:67]   --->   Operation 134 'mul' 'mul_ln67_30' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_13 : Operation 135 [1/1] (0.00ns)   --->   "%store_ln71 = store i32 %tmp_data_V, i32 %signal_shift_reg_0" [equalizer.cpp:71]   --->   Operation 135 'store' 'store_ln71' <Predicate = true> <Delay = 0.00>

State 14 <SV = 13> <Delay = 7.30>
ST_14 : Operation 136 [1/1] (7.30ns)   --->   "%gmem_addr_read_5 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 136 'read' 'gmem_addr_read_5' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_14 : Operation 137 [1/1] (0.00ns)   --->   "%signal_shift_reg_4_load = load i32 %signal_shift_reg_4" [equalizer.cpp:66]   --->   Operation 137 'load' 'signal_shift_reg_4_load' <Predicate = true> <Delay = 0.00>
ST_14 : Operation 138 [1/1] (0.00ns)   --->   "%store_ln66 = store i32 %signal_shift_reg_3_load, i32 %signal_shift_reg_4" [equalizer.cpp:66]   --->   Operation 138 'store' 'store_ln66' <Predicate = true> <Delay = 0.00>
ST_14 : Operation 139 [2/2] (6.91ns)   --->   "%mul_ln67_27 = mul i32 %signal_shift_reg_3_load, i32 %gmem_addr_read_4" [equalizer.cpp:67]   --->   Operation 139 'mul' 'mul_ln67_27' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_14 : Operation 140 [1/2] (6.91ns)   --->   "%mul_ln67_28 = mul i32 %signal_shift_reg_2_load, i32 %gmem_addr_read_3" [equalizer.cpp:67]   --->   Operation 140 'mul' 'mul_ln67_28' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_14 : Operation 141 [1/2] (6.91ns)   --->   "%mul_ln67_29 = mul i32 %signal_shift_reg_1_load, i32 %gmem_addr_read_2" [equalizer.cpp:67]   --->   Operation 141 'mul' 'mul_ln67_29' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_14 : Operation 142 [1/2] (6.91ns)   --->   "%mul_ln67_30 = mul i32 %signal_shift_reg_0_load, i32 %gmem_addr_read_1" [equalizer.cpp:67]   --->   Operation 142 'mul' 'mul_ln67_30' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>

State 15 <SV = 14> <Delay = 7.30>
ST_15 : Operation 143 [1/1] (7.30ns)   --->   "%gmem_addr_read_6 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 143 'read' 'gmem_addr_read_6' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_15 : Operation 144 [1/1] (0.00ns)   --->   "%signal_shift_reg_5_load = load i32 %signal_shift_reg_5" [equalizer.cpp:66]   --->   Operation 144 'load' 'signal_shift_reg_5_load' <Predicate = true> <Delay = 0.00>
ST_15 : Operation 145 [1/1] (0.00ns)   --->   "%store_ln66 = store i32 %signal_shift_reg_4_load, i32 %signal_shift_reg_5" [equalizer.cpp:66]   --->   Operation 145 'store' 'store_ln66' <Predicate = true> <Delay = 0.00>
ST_15 : Operation 146 [2/2] (6.91ns)   --->   "%mul_ln67_26 = mul i32 %signal_shift_reg_4_load, i32 %gmem_addr_read_5" [equalizer.cpp:67]   --->   Operation 146 'mul' 'mul_ln67_26' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_15 : Operation 147 [1/2] (6.91ns)   --->   "%mul_ln67_27 = mul i32 %signal_shift_reg_3_load, i32 %gmem_addr_read_4" [equalizer.cpp:67]   --->   Operation 147 'mul' 'mul_ln67_27' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_15 : Operation 148 [1/1] (2.55ns)   --->   "%add_ln70 = add i32 %mul_ln67_28, i32 %mul_ln67_29" [equalizer.cpp:70]   --->   Operation 148 'add' 'add_ln70' <Predicate = true> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 16 <SV = 15> <Delay = 7.30>
ST_16 : Operation 149 [1/1] (7.30ns)   --->   "%gmem_addr_read_7 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 149 'read' 'gmem_addr_read_7' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_16 : Operation 150 [1/1] (0.00ns)   --->   "%signal_shift_reg_6_load = load i32 %signal_shift_reg_6" [equalizer.cpp:66]   --->   Operation 150 'load' 'signal_shift_reg_6_load' <Predicate = true> <Delay = 0.00>
ST_16 : Operation 151 [1/1] (0.00ns)   --->   "%store_ln66 = store i32 %signal_shift_reg_5_load, i32 %signal_shift_reg_6" [equalizer.cpp:66]   --->   Operation 151 'store' 'store_ln66' <Predicate = true> <Delay = 0.00>
ST_16 : Operation 152 [2/2] (6.91ns)   --->   "%mul_ln67_25 = mul i32 %signal_shift_reg_5_load, i32 %gmem_addr_read_6" [equalizer.cpp:67]   --->   Operation 152 'mul' 'mul_ln67_25' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_16 : Operation 153 [1/2] (6.91ns)   --->   "%mul_ln67_26 = mul i32 %signal_shift_reg_4_load, i32 %gmem_addr_read_5" [equalizer.cpp:67]   --->   Operation 153 'mul' 'mul_ln67_26' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>

State 17 <SV = 16> <Delay = 7.30>
ST_17 : Operation 154 [1/1] (7.30ns)   --->   "%gmem_addr_read_8 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 154 'read' 'gmem_addr_read_8' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_17 : Operation 155 [1/1] (0.00ns)   --->   "%signal_shift_reg_7_load = load i32 %signal_shift_reg_7" [equalizer.cpp:66]   --->   Operation 155 'load' 'signal_shift_reg_7_load' <Predicate = true> <Delay = 0.00>
ST_17 : Operation 156 [1/1] (0.00ns)   --->   "%store_ln66 = store i32 %signal_shift_reg_6_load, i32 %signal_shift_reg_7" [equalizer.cpp:66]   --->   Operation 156 'store' 'store_ln66' <Predicate = true> <Delay = 0.00>
ST_17 : Operation 157 [2/2] (6.91ns)   --->   "%mul_ln67_24 = mul i32 %signal_shift_reg_6_load, i32 %gmem_addr_read_7" [equalizer.cpp:67]   --->   Operation 157 'mul' 'mul_ln67_24' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_17 : Operation 158 [1/2] (6.91ns)   --->   "%mul_ln67_25 = mul i32 %signal_shift_reg_5_load, i32 %gmem_addr_read_6" [equalizer.cpp:67]   --->   Operation 158 'mul' 'mul_ln67_25' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_17 : Operation 159 [1/1] (2.55ns)   --->   "%add_ln70_1 = add i32 %mul_ln67_27, i32 %mul_ln67_26" [equalizer.cpp:70]   --->   Operation 159 'add' 'add_ln70_1' <Predicate = true> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 18 <SV = 17> <Delay = 7.30>
ST_18 : Operation 160 [1/1] (7.30ns)   --->   "%gmem_addr_read_9 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 160 'read' 'gmem_addr_read_9' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_18 : Operation 161 [1/2] (6.91ns)   --->   "%mul_ln67_24 = mul i32 %signal_shift_reg_6_load, i32 %gmem_addr_read_7" [equalizer.cpp:67]   --->   Operation 161 'mul' 'mul_ln67_24' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>

State 19 <SV = 18> <Delay = 7.30>
ST_19 : Operation 162 [1/1] (7.30ns)   --->   "%gmem_addr_read_10 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 162 'read' 'gmem_addr_read_10' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_19 : Operation 163 [1/1] (0.00ns)   --->   "%signal_shift_reg_9_load = load i32 %signal_shift_reg_9" [equalizer.cpp:66]   --->   Operation 163 'load' 'signal_shift_reg_9_load' <Predicate = true> <Delay = 0.00>
ST_19 : Operation 164 [1/1] (0.00ns)   --->   "%signal_shift_reg_8_load = load i32 %signal_shift_reg_8" [equalizer.cpp:66]   --->   Operation 164 'load' 'signal_shift_reg_8_load' <Predicate = true> <Delay = 0.00>
ST_19 : Operation 165 [1/1] (0.00ns)   --->   "%store_ln66 = store i32 %signal_shift_reg_8_load, i32 %signal_shift_reg_9" [equalizer.cpp:66]   --->   Operation 165 'store' 'store_ln66' <Predicate = true> <Delay = 0.00>
ST_19 : Operation 166 [2/2] (6.91ns)   --->   "%mul_ln67_22 = mul i32 %signal_shift_reg_8_load, i32 %gmem_addr_read_9" [equalizer.cpp:67]   --->   Operation 166 'mul' 'mul_ln67_22' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_19 : Operation 167 [1/1] (0.00ns)   --->   "%store_ln66 = store i32 %signal_shift_reg_7_load, i32 %signal_shift_reg_8" [equalizer.cpp:66]   --->   Operation 167 'store' 'store_ln66' <Predicate = true> <Delay = 0.00>
ST_19 : Operation 168 [2/2] (6.91ns)   --->   "%mul_ln67_23 = mul i32 %signal_shift_reg_7_load, i32 %gmem_addr_read_8" [equalizer.cpp:67]   --->   Operation 168 'mul' 'mul_ln67_23' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_19 : Operation 169 [1/1] (2.55ns)   --->   "%add_ln70_4 = add i32 %mul_ln67_25, i32 %mul_ln67_24" [equalizer.cpp:70]   --->   Operation 169 'add' 'add_ln70_4' <Predicate = true> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 20 <SV = 19> <Delay = 7.30>
ST_20 : Operation 170 [1/1] (7.30ns)   --->   "%gmem_addr_read_11 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 170 'read' 'gmem_addr_read_11' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_20 : Operation 171 [1/2] (6.91ns)   --->   "%mul_ln67_22 = mul i32 %signal_shift_reg_8_load, i32 %gmem_addr_read_9" [equalizer.cpp:67]   --->   Operation 171 'mul' 'mul_ln67_22' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_20 : Operation 172 [1/2] (6.91ns)   --->   "%mul_ln67_23 = mul i32 %signal_shift_reg_7_load, i32 %gmem_addr_read_8" [equalizer.cpp:67]   --->   Operation 172 'mul' 'mul_ln67_23' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>

State 21 <SV = 20> <Delay = 7.30>
ST_21 : Operation 173 [1/1] (7.30ns)   --->   "%gmem_addr_read_12 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 173 'read' 'gmem_addr_read_12' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_21 : Operation 174 [1/1] (0.00ns)   --->   "%signal_shift_reg_11_load = load i32 %signal_shift_reg_11" [equalizer.cpp:66]   --->   Operation 174 'load' 'signal_shift_reg_11_load' <Predicate = true> <Delay = 0.00>
ST_21 : Operation 175 [1/1] (0.00ns)   --->   "%signal_shift_reg_10_load = load i32 %signal_shift_reg_10" [equalizer.cpp:66]   --->   Operation 175 'load' 'signal_shift_reg_10_load' <Predicate = true> <Delay = 0.00>
ST_21 : Operation 176 [1/1] (0.00ns)   --->   "%store_ln66 = store i32 %signal_shift_reg_10_load, i32 %signal_shift_reg_11" [equalizer.cpp:66]   --->   Operation 176 'store' 'store_ln66' <Predicate = true> <Delay = 0.00>
ST_21 : Operation 177 [2/2] (6.91ns)   --->   "%mul_ln67_20 = mul i32 %signal_shift_reg_10_load, i32 %gmem_addr_read_11" [equalizer.cpp:67]   --->   Operation 177 'mul' 'mul_ln67_20' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_21 : Operation 178 [1/1] (0.00ns)   --->   "%store_ln66 = store i32 %signal_shift_reg_9_load, i32 %signal_shift_reg_10" [equalizer.cpp:66]   --->   Operation 178 'store' 'store_ln66' <Predicate = true> <Delay = 0.00>
ST_21 : Operation 179 [2/2] (6.91ns)   --->   "%mul_ln67_21 = mul i32 %signal_shift_reg_9_load, i32 %gmem_addr_read_10" [equalizer.cpp:67]   --->   Operation 179 'mul' 'mul_ln67_21' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_21 : Operation 180 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln70_3 = add i32 %mul_ln67_23, i32 %mul_ln67_22" [equalizer.cpp:70]   --->   Operation 180 'add' 'add_ln70_3' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_21 : Operation 181 [1/1] (4.37ns) (root node of TernaryAdder)   --->   "%add_ln70_5 = add i32 %add_ln70_4, i32 %add_ln70_3" [equalizer.cpp:70]   --->   Operation 181 'add' 'add_ln70_5' <Predicate = true> <Delay = 4.37> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>

State 22 <SV = 21> <Delay = 7.30>
ST_22 : Operation 182 [1/1] (7.30ns)   --->   "%gmem_addr_read_13 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 182 'read' 'gmem_addr_read_13' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_22 : Operation 183 [1/2] (6.91ns)   --->   "%mul_ln67_20 = mul i32 %signal_shift_reg_10_load, i32 %gmem_addr_read_11" [equalizer.cpp:67]   --->   Operation 183 'mul' 'mul_ln67_20' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_22 : Operation 184 [1/2] (6.91ns)   --->   "%mul_ln67_21 = mul i32 %signal_shift_reg_9_load, i32 %gmem_addr_read_10" [equalizer.cpp:67]   --->   Operation 184 'mul' 'mul_ln67_21' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_22 : Operation 185 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln70_2 = add i32 %add_ln70_1, i32 %add_ln70" [equalizer.cpp:70]   --->   Operation 185 'add' 'add_ln70_2' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_22 : Operation 186 [1/1] (4.37ns) (root node of TernaryAdder)   --->   "%add_ln70_6 = add i32 %add_ln70_5, i32 %add_ln70_2" [equalizer.cpp:70]   --->   Operation 186 'add' 'add_ln70_6' <Predicate = true> <Delay = 4.37> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>

State 23 <SV = 22> <Delay = 7.30>
ST_23 : Operation 187 [1/1] (7.30ns)   --->   "%gmem_addr_read_14 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 187 'read' 'gmem_addr_read_14' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_23 : Operation 188 [1/1] (0.00ns)   --->   "%signal_shift_reg_13_load = load i32 %signal_shift_reg_13" [equalizer.cpp:66]   --->   Operation 188 'load' 'signal_shift_reg_13_load' <Predicate = true> <Delay = 0.00>
ST_23 : Operation 189 [1/1] (0.00ns)   --->   "%signal_shift_reg_12_load = load i32 %signal_shift_reg_12" [equalizer.cpp:66]   --->   Operation 189 'load' 'signal_shift_reg_12_load' <Predicate = true> <Delay = 0.00>
ST_23 : Operation 190 [1/1] (0.00ns)   --->   "%store_ln66 = store i32 %signal_shift_reg_12_load, i32 %signal_shift_reg_13" [equalizer.cpp:66]   --->   Operation 190 'store' 'store_ln66' <Predicate = true> <Delay = 0.00>
ST_23 : Operation 191 [2/2] (6.91ns)   --->   "%mul_ln67_18 = mul i32 %signal_shift_reg_12_load, i32 %gmem_addr_read_13" [equalizer.cpp:67]   --->   Operation 191 'mul' 'mul_ln67_18' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_23 : Operation 192 [1/1] (0.00ns)   --->   "%store_ln66 = store i32 %signal_shift_reg_11_load, i32 %signal_shift_reg_12" [equalizer.cpp:66]   --->   Operation 192 'store' 'store_ln66' <Predicate = true> <Delay = 0.00>
ST_23 : Operation 193 [2/2] (6.91ns)   --->   "%mul_ln67_19 = mul i32 %signal_shift_reg_11_load, i32 %gmem_addr_read_12" [equalizer.cpp:67]   --->   Operation 193 'mul' 'mul_ln67_19' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_23 : Operation 194 [1/1] (2.55ns)   --->   "%add_ln70_11 = add i32 %mul_ln67_21, i32 %mul_ln67_20" [equalizer.cpp:70]   --->   Operation 194 'add' 'add_ln70_11' <Predicate = true> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 24 <SV = 23> <Delay = 7.30>
ST_24 : Operation 195 [1/1] (7.30ns)   --->   "%gmem_addr_read_15 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 195 'read' 'gmem_addr_read_15' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_24 : Operation 196 [1/2] (6.91ns)   --->   "%mul_ln67_18 = mul i32 %signal_shift_reg_12_load, i32 %gmem_addr_read_13" [equalizer.cpp:67]   --->   Operation 196 'mul' 'mul_ln67_18' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_24 : Operation 197 [1/2] (6.91ns)   --->   "%mul_ln67_19 = mul i32 %signal_shift_reg_11_load, i32 %gmem_addr_read_12" [equalizer.cpp:67]   --->   Operation 197 'mul' 'mul_ln67_19' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>

State 25 <SV = 24> <Delay = 7.30>
ST_25 : Operation 198 [1/1] (7.30ns)   --->   "%gmem_addr_read_16 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 198 'read' 'gmem_addr_read_16' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_25 : Operation 199 [1/1] (0.00ns)   --->   "%signal_shift_reg_15_load = load i32 %signal_shift_reg_15" [equalizer.cpp:66]   --->   Operation 199 'load' 'signal_shift_reg_15_load' <Predicate = true> <Delay = 0.00>
ST_25 : Operation 200 [1/1] (0.00ns)   --->   "%signal_shift_reg_14_load = load i32 %signal_shift_reg_14" [equalizer.cpp:66]   --->   Operation 200 'load' 'signal_shift_reg_14_load' <Predicate = true> <Delay = 0.00>
ST_25 : Operation 201 [1/1] (0.00ns)   --->   "%store_ln66 = store i32 %signal_shift_reg_14_load, i32 %signal_shift_reg_15" [equalizer.cpp:66]   --->   Operation 201 'store' 'store_ln66' <Predicate = true> <Delay = 0.00>
ST_25 : Operation 202 [2/2] (6.91ns)   --->   "%mul_ln67_16 = mul i32 %signal_shift_reg_14_load, i32 %gmem_addr_read_15" [equalizer.cpp:67]   --->   Operation 202 'mul' 'mul_ln67_16' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_25 : Operation 203 [1/1] (0.00ns)   --->   "%store_ln66 = store i32 %signal_shift_reg_13_load, i32 %signal_shift_reg_14" [equalizer.cpp:66]   --->   Operation 203 'store' 'store_ln66' <Predicate = true> <Delay = 0.00>
ST_25 : Operation 204 [2/2] (6.91ns)   --->   "%mul_ln67_17 = mul i32 %signal_shift_reg_13_load, i32 %gmem_addr_read_14" [equalizer.cpp:67]   --->   Operation 204 'mul' 'mul_ln67_17' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_25 : Operation 205 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln70_10 = add i32 %mul_ln67_19, i32 %mul_ln67_18" [equalizer.cpp:70]   --->   Operation 205 'add' 'add_ln70_10' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_25 : Operation 206 [1/1] (4.37ns) (root node of TernaryAdder)   --->   "%add_ln70_12 = add i32 %add_ln70_11, i32 %add_ln70_10" [equalizer.cpp:70]   --->   Operation 206 'add' 'add_ln70_12' <Predicate = true> <Delay = 4.37> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>

State 26 <SV = 25> <Delay = 7.30>
ST_26 : Operation 207 [1/1] (7.30ns)   --->   "%gmem_addr_read_17 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 207 'read' 'gmem_addr_read_17' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_26 : Operation 208 [2/2] (6.91ns)   --->   "%mul_ln67_15 = mul i32 %signal_shift_reg_15_load, i32 %gmem_addr_read_16" [equalizer.cpp:67]   --->   Operation 208 'mul' 'mul_ln67_15' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_26 : Operation 209 [1/2] (6.91ns)   --->   "%mul_ln67_16 = mul i32 %signal_shift_reg_14_load, i32 %gmem_addr_read_15" [equalizer.cpp:67]   --->   Operation 209 'mul' 'mul_ln67_16' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_26 : Operation 210 [1/2] (6.91ns)   --->   "%mul_ln67_17 = mul i32 %signal_shift_reg_13_load, i32 %gmem_addr_read_14" [equalizer.cpp:67]   --->   Operation 210 'mul' 'mul_ln67_17' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>

State 27 <SV = 26> <Delay = 7.30>
ST_27 : Operation 211 [1/1] (7.30ns)   --->   "%gmem_addr_read_18 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 211 'read' 'gmem_addr_read_18' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_27 : Operation 212 [1/1] (0.00ns)   --->   "%signal_shift_reg_17_load = load i32 %signal_shift_reg_17" [equalizer.cpp:66]   --->   Operation 212 'load' 'signal_shift_reg_17_load' <Predicate = true> <Delay = 0.00>
ST_27 : Operation 213 [1/1] (0.00ns)   --->   "%signal_shift_reg_16_load = load i32 %signal_shift_reg_16" [equalizer.cpp:66]   --->   Operation 213 'load' 'signal_shift_reg_16_load' <Predicate = true> <Delay = 0.00>
ST_27 : Operation 214 [1/1] (0.00ns)   --->   "%store_ln66 = store i32 %signal_shift_reg_16_load, i32 %signal_shift_reg_17" [equalizer.cpp:66]   --->   Operation 214 'store' 'store_ln66' <Predicate = true> <Delay = 0.00>
ST_27 : Operation 215 [2/2] (6.91ns)   --->   "%mul_ln67_14 = mul i32 %signal_shift_reg_16_load, i32 %gmem_addr_read_17" [equalizer.cpp:67]   --->   Operation 215 'mul' 'mul_ln67_14' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_27 : Operation 216 [1/1] (0.00ns)   --->   "%store_ln66 = store i32 %signal_shift_reg_15_load, i32 %signal_shift_reg_16" [equalizer.cpp:66]   --->   Operation 216 'store' 'store_ln66' <Predicate = true> <Delay = 0.00>
ST_27 : Operation 217 [1/2] (6.91ns)   --->   "%mul_ln67_15 = mul i32 %signal_shift_reg_15_load, i32 %gmem_addr_read_16" [equalizer.cpp:67]   --->   Operation 217 'mul' 'mul_ln67_15' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_27 : Operation 218 [1/1] (2.55ns)   --->   "%add_ln70_8 = add i32 %mul_ln67_17, i32 %mul_ln67_16" [equalizer.cpp:70]   --->   Operation 218 'add' 'add_ln70_8' <Predicate = true> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 28 <SV = 27> <Delay = 7.30>
ST_28 : Operation 219 [1/1] (7.30ns)   --->   "%gmem_addr_read_19 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 219 'read' 'gmem_addr_read_19' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_28 : Operation 220 [1/1] (0.00ns)   --->   "%signal_shift_reg_18_load = load i32 %signal_shift_reg_18" [equalizer.cpp:66]   --->   Operation 220 'load' 'signal_shift_reg_18_load' <Predicate = true> <Delay = 0.00>
ST_28 : Operation 221 [1/1] (0.00ns)   --->   "%store_ln66 = store i32 %signal_shift_reg_17_load, i32 %signal_shift_reg_18" [equalizer.cpp:66]   --->   Operation 221 'store' 'store_ln66' <Predicate = true> <Delay = 0.00>
ST_28 : Operation 222 [2/2] (6.91ns)   --->   "%mul_ln67_13 = mul i32 %signal_shift_reg_17_load, i32 %gmem_addr_read_18" [equalizer.cpp:67]   --->   Operation 222 'mul' 'mul_ln67_13' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_28 : Operation 223 [1/2] (6.91ns)   --->   "%mul_ln67_14 = mul i32 %signal_shift_reg_16_load, i32 %gmem_addr_read_17" [equalizer.cpp:67]   --->   Operation 223 'mul' 'mul_ln67_14' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>

State 29 <SV = 28> <Delay = 7.30>
ST_29 : Operation 224 [1/1] (7.30ns)   --->   "%gmem_addr_read_20 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 224 'read' 'gmem_addr_read_20' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_29 : Operation 225 [1/1] (0.00ns)   --->   "%signal_shift_reg_19_load = load i32 %signal_shift_reg_19" [equalizer.cpp:66]   --->   Operation 225 'load' 'signal_shift_reg_19_load' <Predicate = true> <Delay = 0.00>
ST_29 : Operation 226 [1/1] (0.00ns)   --->   "%store_ln66 = store i32 %signal_shift_reg_18_load, i32 %signal_shift_reg_19" [equalizer.cpp:66]   --->   Operation 226 'store' 'store_ln66' <Predicate = true> <Delay = 0.00>
ST_29 : Operation 227 [2/2] (6.91ns)   --->   "%mul_ln67_12 = mul i32 %signal_shift_reg_18_load, i32 %gmem_addr_read_19" [equalizer.cpp:67]   --->   Operation 227 'mul' 'mul_ln67_12' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_29 : Operation 228 [1/2] (6.91ns)   --->   "%mul_ln67_13 = mul i32 %signal_shift_reg_17_load, i32 %gmem_addr_read_18" [equalizer.cpp:67]   --->   Operation 228 'mul' 'mul_ln67_13' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_29 : Operation 229 [1/1] (2.55ns)   --->   "%add_ln70_7 = add i32 %mul_ln67_15, i32 %mul_ln67_14" [equalizer.cpp:70]   --->   Operation 229 'add' 'add_ln70_7' <Predicate = true> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_29 : Operation 230 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln70_9 = add i32 %add_ln70_8, i32 %add_ln70_7" [equalizer.cpp:70]   --->   Operation 230 'add' 'add_ln70_9' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_29 : Operation 231 [1/1] (4.37ns) (root node of TernaryAdder)   --->   "%add_ln70_13 = add i32 %add_ln70_12, i32 %add_ln70_9" [equalizer.cpp:70]   --->   Operation 231 'add' 'add_ln70_13' <Predicate = true> <Delay = 4.37> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>

State 30 <SV = 29> <Delay = 7.30>
ST_30 : Operation 232 [1/1] (7.30ns)   --->   "%gmem_addr_read_21 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 232 'read' 'gmem_addr_read_21' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_30 : Operation 233 [1/1] (0.00ns)   --->   "%signal_shift_reg_20_load = load i32 %signal_shift_reg_20" [equalizer.cpp:66]   --->   Operation 233 'load' 'signal_shift_reg_20_load' <Predicate = true> <Delay = 0.00>
ST_30 : Operation 234 [1/1] (0.00ns)   --->   "%store_ln66 = store i32 %signal_shift_reg_19_load, i32 %signal_shift_reg_20" [equalizer.cpp:66]   --->   Operation 234 'store' 'store_ln66' <Predicate = true> <Delay = 0.00>
ST_30 : Operation 235 [2/2] (6.91ns)   --->   "%mul_ln67_11 = mul i32 %signal_shift_reg_19_load, i32 %gmem_addr_read_20" [equalizer.cpp:67]   --->   Operation 235 'mul' 'mul_ln67_11' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_30 : Operation 236 [1/2] (6.91ns)   --->   "%mul_ln67_12 = mul i32 %signal_shift_reg_18_load, i32 %gmem_addr_read_19" [equalizer.cpp:67]   --->   Operation 236 'mul' 'mul_ln67_12' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>

State 31 <SV = 30> <Delay = 7.30>
ST_31 : Operation 237 [1/1] (7.30ns)   --->   "%gmem_addr_read_22 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 237 'read' 'gmem_addr_read_22' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_31 : Operation 238 [1/1] (0.00ns)   --->   "%signal_shift_reg_21_load = load i32 %signal_shift_reg_21" [equalizer.cpp:66]   --->   Operation 238 'load' 'signal_shift_reg_21_load' <Predicate = true> <Delay = 0.00>
ST_31 : Operation 239 [1/1] (0.00ns)   --->   "%store_ln66 = store i32 %signal_shift_reg_20_load, i32 %signal_shift_reg_21" [equalizer.cpp:66]   --->   Operation 239 'store' 'store_ln66' <Predicate = true> <Delay = 0.00>
ST_31 : Operation 240 [2/2] (6.91ns)   --->   "%mul_ln67_10 = mul i32 %signal_shift_reg_20_load, i32 %gmem_addr_read_21" [equalizer.cpp:67]   --->   Operation 240 'mul' 'mul_ln67_10' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_31 : Operation 241 [1/2] (6.91ns)   --->   "%mul_ln67_11 = mul i32 %signal_shift_reg_19_load, i32 %gmem_addr_read_20" [equalizer.cpp:67]   --->   Operation 241 'mul' 'mul_ln67_11' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_31 : Operation 242 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln70_26 = add i32 %mul_ln67_12, i32 %mul_ln67_30" [equalizer.cpp:70]   --->   Operation 242 'add' 'add_ln70_26' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_31 : Operation 243 [1/1] (4.37ns) (root node of TernaryAdder)   --->   "%add_ln70_27 = add i32 %add_ln70_26, i32 %mul_ln67_13" [equalizer.cpp:70]   --->   Operation 243 'add' 'add_ln70_27' <Predicate = true> <Delay = 4.37> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>

State 32 <SV = 31> <Delay = 7.30>
ST_32 : Operation 244 [1/1] (7.30ns)   --->   "%gmem_addr_read_23 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 244 'read' 'gmem_addr_read_23' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_32 : Operation 245 [2/2] (6.91ns)   --->   "%mul_ln67_9 = mul i32 %signal_shift_reg_21_load, i32 %gmem_addr_read_22" [equalizer.cpp:67]   --->   Operation 245 'mul' 'mul_ln67_9' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_32 : Operation 246 [1/2] (6.91ns)   --->   "%mul_ln67_10 = mul i32 %signal_shift_reg_20_load, i32 %gmem_addr_read_21" [equalizer.cpp:67]   --->   Operation 246 'mul' 'mul_ln67_10' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>

State 33 <SV = 32> <Delay = 7.30>
ST_33 : Operation 247 [1/1] (7.30ns)   --->   "%gmem_addr_read_24 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 247 'read' 'gmem_addr_read_24' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_33 : Operation 248 [1/1] (0.00ns)   --->   "%signal_shift_reg_23_load = load i32 %signal_shift_reg_23" [equalizer.cpp:66]   --->   Operation 248 'load' 'signal_shift_reg_23_load' <Predicate = true> <Delay = 0.00>
ST_33 : Operation 249 [1/1] (0.00ns)   --->   "%signal_shift_reg_22_load = load i32 %signal_shift_reg_22" [equalizer.cpp:66]   --->   Operation 249 'load' 'signal_shift_reg_22_load' <Predicate = true> <Delay = 0.00>
ST_33 : Operation 250 [1/1] (0.00ns)   --->   "%store_ln66 = store i32 %signal_shift_reg_22_load, i32 %signal_shift_reg_23" [equalizer.cpp:66]   --->   Operation 250 'store' 'store_ln66' <Predicate = true> <Delay = 0.00>
ST_33 : Operation 251 [2/2] (6.91ns)   --->   "%mul_ln67_8 = mul i32 %signal_shift_reg_22_load, i32 %gmem_addr_read_23" [equalizer.cpp:67]   --->   Operation 251 'mul' 'mul_ln67_8' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_33 : Operation 252 [1/1] (0.00ns)   --->   "%store_ln66 = store i32 %signal_shift_reg_21_load, i32 %signal_shift_reg_22" [equalizer.cpp:66]   --->   Operation 252 'store' 'store_ln66' <Predicate = true> <Delay = 0.00>
ST_33 : Operation 253 [1/2] (6.91ns)   --->   "%mul_ln67_9 = mul i32 %signal_shift_reg_21_load, i32 %gmem_addr_read_22" [equalizer.cpp:67]   --->   Operation 253 'mul' 'mul_ln67_9' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_33 : Operation 254 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln70_25 = add i32 %mul_ln67_11, i32 %mul_ln67_10" [equalizer.cpp:70]   --->   Operation 254 'add' 'add_ln70_25' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_33 : Operation 255 [1/1] (4.37ns) (root node of TernaryAdder)   --->   "%add_ln70_28 = add i32 %add_ln70_27, i32 %add_ln70_25" [equalizer.cpp:70]   --->   Operation 255 'add' 'add_ln70_28' <Predicate = true> <Delay = 4.37> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>

State 34 <SV = 33> <Delay = 7.30>
ST_34 : Operation 256 [1/1] (7.30ns)   --->   "%gmem_addr_read_25 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 256 'read' 'gmem_addr_read_25' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_34 : Operation 257 [1/1] (0.00ns)   --->   "%signal_shift_reg_24_load = load i32 %signal_shift_reg_24" [equalizer.cpp:66]   --->   Operation 257 'load' 'signal_shift_reg_24_load' <Predicate = true> <Delay = 0.00>
ST_34 : Operation 258 [1/1] (0.00ns)   --->   "%store_ln66 = store i32 %signal_shift_reg_23_load, i32 %signal_shift_reg_24" [equalizer.cpp:66]   --->   Operation 258 'store' 'store_ln66' <Predicate = true> <Delay = 0.00>
ST_34 : Operation 259 [2/2] (6.91ns)   --->   "%mul_ln67_7 = mul i32 %signal_shift_reg_23_load, i32 %gmem_addr_read_24" [equalizer.cpp:67]   --->   Operation 259 'mul' 'mul_ln67_7' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_34 : Operation 260 [1/2] (6.91ns)   --->   "%mul_ln67_8 = mul i32 %signal_shift_reg_22_load, i32 %gmem_addr_read_23" [equalizer.cpp:67]   --->   Operation 260 'mul' 'mul_ln67_8' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>

State 35 <SV = 34> <Delay = 7.30>
ST_35 : Operation 261 [1/1] (7.30ns)   --->   "%gmem_addr_read_26 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 261 'read' 'gmem_addr_read_26' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_35 : Operation 262 [2/2] (6.91ns)   --->   "%mul_ln67_6 = mul i32 %signal_shift_reg_24_load, i32 %gmem_addr_read_25" [equalizer.cpp:67]   --->   Operation 262 'mul' 'mul_ln67_6' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_35 : Operation 263 [1/2] (6.91ns)   --->   "%mul_ln67_7 = mul i32 %signal_shift_reg_23_load, i32 %gmem_addr_read_24" [equalizer.cpp:67]   --->   Operation 263 'mul' 'mul_ln67_7' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_35 : Operation 264 [1/1] (2.55ns)   --->   "%add_ln70_23 = add i32 %mul_ln67_9, i32 %mul_ln67_8" [equalizer.cpp:70]   --->   Operation 264 'add' 'add_ln70_23' <Predicate = true> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 36 <SV = 35> <Delay = 7.30>
ST_36 : Operation 265 [1/1] (7.30ns)   --->   "%gmem_addr_read_27 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 265 'read' 'gmem_addr_read_27' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_36 : Operation 266 [1/2] (6.91ns)   --->   "%mul_ln67_6 = mul i32 %signal_shift_reg_24_load, i32 %gmem_addr_read_25" [equalizer.cpp:67]   --->   Operation 266 'mul' 'mul_ln67_6' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>

State 37 <SV = 36> <Delay = 7.30>
ST_37 : Operation 267 [1/1] (7.30ns)   --->   "%gmem_addr_read_28 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 267 'read' 'gmem_addr_read_28' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_37 : Operation 268 [1/1] (0.00ns)   --->   "%signal_shift_reg_27_load = load i32 %signal_shift_reg_27" [equalizer.cpp:66]   --->   Operation 268 'load' 'signal_shift_reg_27_load' <Predicate = true> <Delay = 0.00>
ST_37 : Operation 269 [1/1] (0.00ns)   --->   "%signal_shift_reg_26_load = load i32 %signal_shift_reg_26" [equalizer.cpp:66]   --->   Operation 269 'load' 'signal_shift_reg_26_load' <Predicate = true> <Delay = 0.00>
ST_37 : Operation 270 [1/1] (0.00ns)   --->   "%store_ln66 = store i32 %signal_shift_reg_26_load, i32 %signal_shift_reg_27" [equalizer.cpp:66]   --->   Operation 270 'store' 'store_ln66' <Predicate = true> <Delay = 0.00>
ST_37 : Operation 271 [2/2] (6.91ns)   --->   "%mul_ln67_4 = mul i32 %signal_shift_reg_26_load, i32 %gmem_addr_read_27" [equalizer.cpp:67]   --->   Operation 271 'mul' 'mul_ln67_4' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_37 : Operation 272 [1/1] (0.00ns)   --->   "%signal_shift_reg_25_load = load i32 %signal_shift_reg_25" [equalizer.cpp:66]   --->   Operation 272 'load' 'signal_shift_reg_25_load' <Predicate = true> <Delay = 0.00>
ST_37 : Operation 273 [1/1] (0.00ns)   --->   "%store_ln66 = store i32 %signal_shift_reg_25_load, i32 %signal_shift_reg_26" [equalizer.cpp:66]   --->   Operation 273 'store' 'store_ln66' <Predicate = true> <Delay = 0.00>
ST_37 : Operation 274 [2/2] (6.91ns)   --->   "%mul_ln67_5 = mul i32 %signal_shift_reg_25_load, i32 %gmem_addr_read_26" [equalizer.cpp:67]   --->   Operation 274 'mul' 'mul_ln67_5' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_37 : Operation 275 [1/1] (0.00ns)   --->   "%store_ln66 = store i32 %signal_shift_reg_24_load, i32 %signal_shift_reg_25" [equalizer.cpp:66]   --->   Operation 275 'store' 'store_ln66' <Predicate = true> <Delay = 0.00>
ST_37 : Operation 276 [1/1] (2.55ns)   --->   "%add_ln70_22 = add i32 %mul_ln67_7, i32 %mul_ln67_6" [equalizer.cpp:70]   --->   Operation 276 'add' 'add_ln70_22' <Predicate = true> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_37 : Operation 277 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln70_24 = add i32 %add_ln70_23, i32 %add_ln70_22" [equalizer.cpp:70]   --->   Operation 277 'add' 'add_ln70_24' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_37 : Operation 278 [1/1] (4.37ns) (root node of TernaryAdder)   --->   "%add_ln70_29 = add i32 %add_ln70_28, i32 %add_ln70_24" [equalizer.cpp:70]   --->   Operation 278 'add' 'add_ln70_29' <Predicate = true> <Delay = 4.37> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>

State 38 <SV = 37> <Delay = 7.30>
ST_38 : Operation 279 [1/1] (7.30ns)   --->   "%gmem_addr_read_29 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 279 'read' 'gmem_addr_read_29' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_38 : Operation 280 [1/1] (0.00ns)   --->   "%signal_shift_reg_28_load = load i32 %signal_shift_reg_28" [equalizer.cpp:66]   --->   Operation 280 'load' 'signal_shift_reg_28_load' <Predicate = true> <Delay = 0.00>
ST_38 : Operation 281 [1/1] (0.00ns)   --->   "%store_ln66 = store i32 %signal_shift_reg_27_load, i32 %signal_shift_reg_28" [equalizer.cpp:66]   --->   Operation 281 'store' 'store_ln66' <Predicate = true> <Delay = 0.00>
ST_38 : Operation 282 [2/2] (6.91ns)   --->   "%mul_ln67_3 = mul i32 %signal_shift_reg_27_load, i32 %gmem_addr_read_28" [equalizer.cpp:67]   --->   Operation 282 'mul' 'mul_ln67_3' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_38 : Operation 283 [1/2] (6.91ns)   --->   "%mul_ln67_4 = mul i32 %signal_shift_reg_26_load, i32 %gmem_addr_read_27" [equalizer.cpp:67]   --->   Operation 283 'mul' 'mul_ln67_4' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_38 : Operation 284 [1/2] (6.91ns)   --->   "%mul_ln67_5 = mul i32 %signal_shift_reg_25_load, i32 %gmem_addr_read_26" [equalizer.cpp:67]   --->   Operation 284 'mul' 'mul_ln67_5' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>

State 39 <SV = 38> <Delay = 7.30>
ST_39 : Operation 285 [1/1] (7.30ns)   --->   "%gmem_addr_read_30 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 285 'read' 'gmem_addr_read_30' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_39 : Operation 286 [2/2] (6.91ns)   --->   "%mul_ln67_2 = mul i32 %signal_shift_reg_28_load, i32 %gmem_addr_read_29" [equalizer.cpp:67]   --->   Operation 286 'mul' 'mul_ln67_2' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_39 : Operation 287 [1/2] (6.91ns)   --->   "%mul_ln67_3 = mul i32 %signal_shift_reg_27_load, i32 %gmem_addr_read_28" [equalizer.cpp:67]   --->   Operation 287 'mul' 'mul_ln67_3' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_39 : Operation 288 [1/1] (2.55ns)   --->   "%add_ln70_19 = add i32 %mul_ln67_5, i32 %mul_ln67_4" [equalizer.cpp:70]   --->   Operation 288 'add' 'add_ln70_19' <Predicate = true> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 40 <SV = 39> <Delay = 7.30>
ST_40 : Operation 289 [1/1] (7.30ns)   --->   "%gmem_addr_read_31 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 289 'read' 'gmem_addr_read_31' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_40 : Operation 290 [1/1] (0.00ns)   --->   "%signal_shift_reg_30_load = load i32 %signal_shift_reg_30" [equalizer.cpp:66]   --->   Operation 290 'load' 'signal_shift_reg_30_load' <Predicate = true> <Delay = 0.00>
ST_40 : Operation 291 [1/1] (0.00ns)   --->   "%signal_shift_reg_29_load = load i32 %signal_shift_reg_29" [equalizer.cpp:66]   --->   Operation 291 'load' 'signal_shift_reg_29_load' <Predicate = true> <Delay = 0.00>
ST_40 : Operation 292 [1/1] (0.00ns)   --->   "%store_ln66 = store i32 %signal_shift_reg_29_load, i32 %signal_shift_reg_30" [equalizer.cpp:66]   --->   Operation 292 'store' 'store_ln66' <Predicate = true> <Delay = 0.00>
ST_40 : Operation 293 [2/2] (6.91ns)   --->   "%mul_ln67_1 = mul i32 %signal_shift_reg_29_load, i32 %gmem_addr_read_30" [equalizer.cpp:67]   --->   Operation 293 'mul' 'mul_ln67_1' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_40 : Operation 294 [1/1] (0.00ns)   --->   "%store_ln66 = store i32 %signal_shift_reg_28_load, i32 %signal_shift_reg_29" [equalizer.cpp:66]   --->   Operation 294 'store' 'store_ln66' <Predicate = true> <Delay = 0.00>
ST_40 : Operation 295 [1/2] (6.91ns)   --->   "%mul_ln67_2 = mul i32 %signal_shift_reg_28_load, i32 %gmem_addr_read_29" [equalizer.cpp:67]   --->   Operation 295 'mul' 'mul_ln67_2' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>

State 41 <SV = 40> <Delay = 7.30>
ST_41 : Operation 296 [1/1] (7.30ns)   --->   "%gmem_addr_read_32 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:67]   --->   Operation 296 'read' 'gmem_addr_read_32' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_41 : Operation 297 [2/2] (6.91ns)   --->   "%mul_ln67 = mul i32 %signal_shift_reg_30_load, i32 %gmem_addr_read_31" [equalizer.cpp:67]   --->   Operation 297 'mul' 'mul_ln67' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_41 : Operation 298 [1/2] (6.91ns)   --->   "%mul_ln67_1 = mul i32 %signal_shift_reg_29_load, i32 %gmem_addr_read_30" [equalizer.cpp:67]   --->   Operation 298 'mul' 'mul_ln67_1' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_41 : Operation 299 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln70_18 = add i32 %mul_ln67_3, i32 %mul_ln67_2" [equalizer.cpp:70]   --->   Operation 299 'add' 'add_ln70_18' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_41 : Operation 300 [1/1] (4.37ns) (root node of TernaryAdder)   --->   "%add_ln70_20 = add i32 %add_ln70_19, i32 %add_ln70_18" [equalizer.cpp:70]   --->   Operation 300 'add' 'add_ln70_20' <Predicate = true> <Delay = 4.37> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>

State 42 <SV = 41> <Delay = 6.91>
ST_42 : Operation 301 [1/1] (0.00ns)   --->   "%signal_shift_reg_31_load = load i32 %signal_shift_reg_31" [equalizer.cpp:66]   --->   Operation 301 'load' 'signal_shift_reg_31_load' <Predicate = true> <Delay = 0.00>
ST_42 : Operation 302 [2/2] (6.91ns)   --->   "%accumulate = mul i32 %signal_shift_reg_31_load, i32 %gmem_addr_read_32" [equalizer.cpp:67]   --->   Operation 302 'mul' 'accumulate' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_42 : Operation 303 [1/1] (0.00ns)   --->   "%store_ln66 = store i32 %signal_shift_reg_30_load, i32 %signal_shift_reg_31" [equalizer.cpp:66]   --->   Operation 303 'store' 'store_ln66' <Predicate = true> <Delay = 0.00>
ST_42 : Operation 304 [1/2] (6.91ns)   --->   "%mul_ln67 = mul i32 %signal_shift_reg_30_load, i32 %gmem_addr_read_31" [equalizer.cpp:67]   --->   Operation 304 'mul' 'mul_ln67' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>

State 43 <SV = 42> <Delay = 6.91>
ST_43 : Operation 305 [1/2] (6.91ns)   --->   "%accumulate = mul i32 %signal_shift_reg_31_load, i32 %gmem_addr_read_32" [equalizer.cpp:67]   --->   Operation 305 'mul' 'accumulate' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_43 : Operation 306 [1/1] (2.55ns)   --->   "%add_ln70_16 = add i32 %mul_ln67_1, i32 %mul_ln67" [equalizer.cpp:70]   --->   Operation 306 'add' 'add_ln70_16' <Predicate = true> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 44 <SV = 43> <Delay = 4.37>
ST_44 : Operation 307 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln70_15 = add i32 %mul_ln70, i32 %accumulate" [equalizer.cpp:70]   --->   Operation 307 'add' 'add_ln70_15' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_44 : Operation 308 [1/1] (4.37ns) (root node of TernaryAdder)   --->   "%add_ln70_17 = add i32 %add_ln70_16, i32 %add_ln70_15" [equalizer.cpp:70]   --->   Operation 308 'add' 'add_ln70_17' <Predicate = true> <Delay = 4.37> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>

State 45 <SV = 44> <Delay = 4.37>
ST_45 : Operation 309 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln70_21 = add i32 %add_ln70_20, i32 %add_ln70_17" [equalizer.cpp:70]   --->   Operation 309 'add' 'add_ln70_21' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_45 : Operation 310 [1/1] (4.37ns) (root node of TernaryAdder)   --->   "%add_ln70_30 = add i32 %add_ln70_29, i32 %add_ln70_21" [equalizer.cpp:70]   --->   Operation 310 'add' 'add_ln70_30' <Predicate = true> <Delay = 4.37> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>

State 46 <SV = 45> <Delay = 4.37>
ST_46 : Operation 311 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln70_14 = add i32 %add_ln70_13, i32 %add_ln70_6" [equalizer.cpp:70]   --->   Operation 311 'add' 'add_ln70_14' <Predicate = (state_2 == 4096)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_46 : Operation 312 [1/1] (4.37ns) (root node of TernaryAdder)   --->   "%accumulate_2 = add i32 %add_ln70_30, i32 %add_ln70_14" [equalizer.cpp:70]   --->   Operation 312 'add' 'accumulate_2' <Predicate = (state_2 == 4096)> <Delay = 4.37> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_46 : Operation 313 [1/1] (0.00ns)   --->   "%br_ln81 = br i1 %tmp_last_V_2, void %if.end, void %for.inc16.sw.epilog_crit_edge" [equalizer.cpp:81]   --->   Operation 313 'br' 'br_ln81' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_46 : Operation 314 [2/2] (0.00ns)   --->   "%write_ln304 = write void @_ssdm_op_Write.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %output_r_V_data_V, i4 %output_r_V_keep_V, i4 %output_r_V_strb_V, i1 %output_r_V_user_V, i1 %output_r_V_last_V, i1 %output_r_V_id_V, i1 %output_r_V_dest_V, i32 %accumulate_2, i4 %tmp_keep_V, i4 %tmp_strb_V, i1 %tmp_user_V, i1 0, i1 %tmp_id_V, i1 %tmp_dest_V"   --->   Operation 314 'write' 'write_ln304' <Predicate = (state_2 == 4096 & !tmp_last_V_2)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_46 : Operation 315 [1/1] (0.00ns)   --->   "%store_ln92 = store i1 %tmp_dest_V, i1 %tmp_out_dest_V" [equalizer.cpp:92]   --->   Operation 315 'store' 'store_ln92' <Predicate = (state_2 == 4096 & !tmp_last_V_2)> <Delay = 0.00>
ST_46 : Operation 316 [1/1] (0.00ns)   --->   "%store_ln92 = store i1 %tmp_id_V, i1 %tmp_out_id_V" [equalizer.cpp:92]   --->   Operation 316 'store' 'store_ln92' <Predicate = (state_2 == 4096 & !tmp_last_V_2)> <Delay = 0.00>
ST_46 : Operation 317 [1/1] (0.00ns)   --->   "%store_ln92 = store i1 %tmp_user_V, i1 %tmp_out_user_V" [equalizer.cpp:92]   --->   Operation 317 'store' 'store_ln92' <Predicate = (state_2 == 4096 & !tmp_last_V_2)> <Delay = 0.00>
ST_46 : Operation 318 [1/1] (0.00ns)   --->   "%store_ln92 = store i4 %tmp_strb_V, i4 %tmp_out_strb_V" [equalizer.cpp:92]   --->   Operation 318 'store' 'store_ln92' <Predicate = (state_2 == 4096 & !tmp_last_V_2)> <Delay = 0.00>
ST_46 : Operation 319 [1/1] (0.00ns)   --->   "%store_ln92 = store i4 %tmp_keep_V, i4 %tmp_out_keep_V" [equalizer.cpp:92]   --->   Operation 319 'store' 'store_ln92' <Predicate = (state_2 == 4096 & !tmp_last_V_2)> <Delay = 0.00>
ST_46 : Operation 320 [1/1] (0.00ns)   --->   "%store_ln92 = store i32 %accumulate_2, i32 %tmp_out_data_V" [equalizer.cpp:92]   --->   Operation 320 'store' 'store_ln92' <Predicate = (state_2 == 4096 & !tmp_last_V_2)> <Delay = 0.00>
ST_46 : Operation 321 [1/1] (0.00ns)   --->   "%store_ln81 = store i1 %tmp_dest_V, i1 %tmp_out_dest_V" [equalizer.cpp:81]   --->   Operation 321 'store' 'store_ln81' <Predicate = (state_2 == 4096 & tmp_last_V_2)> <Delay = 0.00>
ST_46 : Operation 322 [1/1] (0.00ns)   --->   "%store_ln81 = store i1 %tmp_id_V, i1 %tmp_out_id_V" [equalizer.cpp:81]   --->   Operation 322 'store' 'store_ln81' <Predicate = (state_2 == 4096 & tmp_last_V_2)> <Delay = 0.00>
ST_46 : Operation 323 [1/1] (0.00ns)   --->   "%store_ln81 = store i1 %tmp_user_V, i1 %tmp_out_user_V" [equalizer.cpp:81]   --->   Operation 323 'store' 'store_ln81' <Predicate = (state_2 == 4096 & tmp_last_V_2)> <Delay = 0.00>
ST_46 : Operation 324 [1/1] (0.00ns)   --->   "%store_ln81 = store i4 %tmp_strb_V, i4 %tmp_out_strb_V" [equalizer.cpp:81]   --->   Operation 324 'store' 'store_ln81' <Predicate = (state_2 == 4096 & tmp_last_V_2)> <Delay = 0.00>
ST_46 : Operation 325 [1/1] (0.00ns)   --->   "%store_ln81 = store i4 %tmp_keep_V, i4 %tmp_out_keep_V" [equalizer.cpp:81]   --->   Operation 325 'store' 'store_ln81' <Predicate = (state_2 == 4096 & tmp_last_V_2)> <Delay = 0.00>
ST_46 : Operation 326 [1/1] (0.00ns)   --->   "%store_ln81 = store i32 %accumulate_2, i32 %tmp_out_data_V" [equalizer.cpp:81]   --->   Operation 326 'store' 'store_ln81' <Predicate = (state_2 == 4096 & tmp_last_V_2)> <Delay = 0.00>
ST_46 : Operation 327 [1/1] (1.70ns)   --->   "%br_ln81 = br void %sw.epilog" [equalizer.cpp:81]   --->   Operation 327 'br' 'br_ln81' <Predicate = (state_2 == 4096 & tmp_last_V_2)> <Delay = 1.70>
ST_46 : Operation 328 [1/1] (0.00ns)   --->   "%tmp_last_V_1 = phi i1 %tmp_last_V_2, void %while.body, i1 1, void %for.inc16.sw.epilog_crit_edge, i1 %p_4_0_0_0108_phi, void %sw.epilog.loopexit"   --->   Operation 328 'phi' 'tmp_last_V_1' <Predicate = (state_2 == 4096 & tmp_last_V_2) | (state_2 != 0 & state_2 != 4096)> <Delay = 0.00>
ST_46 : Operation 329 [1/1] (0.00ns)   --->   "%state_1 = phi i32 %state_2, void %while.body, i32 4096, void %for.inc16.sw.epilog_crit_edge, i32 4096, void %sw.epilog.loopexit"   --->   Operation 329 'phi' 'state_1' <Predicate = (state_2 == 4096 & tmp_last_V_2) | (state_2 != 0 & state_2 != 4096)> <Delay = 0.00>
ST_46 : Operation 330 [1/1] (0.00ns)   --->   "%tmp_out_data_V_4 = load i32 %tmp_out_data_V"   --->   Operation 330 'load' 'tmp_out_data_V_4' <Predicate = (state_2 == 4096 & tmp_last_V_2) | (state_2 != 0 & state_2 != 4096)> <Delay = 0.00>
ST_46 : Operation 331 [1/1] (0.00ns)   --->   "%tmp_out_keep_V_4 = load i4 %tmp_out_keep_V"   --->   Operation 331 'load' 'tmp_out_keep_V_4' <Predicate = (state_2 == 4096 & tmp_last_V_2) | (state_2 != 0 & state_2 != 4096)> <Delay = 0.00>
ST_46 : Operation 332 [1/1] (0.00ns)   --->   "%tmp_out_strb_V_4 = load i4 %tmp_out_strb_V"   --->   Operation 332 'load' 'tmp_out_strb_V_4' <Predicate = (state_2 == 4096 & tmp_last_V_2) | (state_2 != 0 & state_2 != 4096)> <Delay = 0.00>
ST_46 : Operation 333 [1/1] (0.00ns)   --->   "%tmp_out_user_V_4 = load i1 %tmp_out_user_V"   --->   Operation 333 'load' 'tmp_out_user_V_4' <Predicate = (state_2 == 4096 & tmp_last_V_2) | (state_2 != 0 & state_2 != 4096)> <Delay = 0.00>
ST_46 : Operation 334 [1/1] (0.00ns)   --->   "%tmp_out_id_V_4 = load i1 %tmp_out_id_V"   --->   Operation 334 'load' 'tmp_out_id_V_4' <Predicate = (state_2 == 4096 & tmp_last_V_2) | (state_2 != 0 & state_2 != 4096)> <Delay = 0.00>
ST_46 : Operation 335 [1/1] (0.00ns)   --->   "%tmp_out_dest_V_4 = load i1 %tmp_out_dest_V"   --->   Operation 335 'load' 'tmp_out_dest_V_4' <Predicate = (state_2 == 4096 & tmp_last_V_2) | (state_2 != 0 & state_2 != 4096)> <Delay = 0.00>
ST_46 : Operation 336 [1/1] (1.70ns)   --->   "%br_ln92 = br i1 %tmp_last_V_1, void %if.end40, void %while.end" [equalizer.cpp:92]   --->   Operation 336 'br' 'br_ln92' <Predicate = (state_2 == 4096 & tmp_last_V_2) | (state_2 != 0 & state_2 != 4096)> <Delay = 1.70>
ST_46 : Operation 337 [1/1] (0.00ns)   --->   "%tmp_dest_V_1 = phi i1 %tmp_out_dest_V_1, void %sw.bb, i1 %tmp_out_dest_V_4, void %sw.epilog"   --->   Operation 337 'phi' 'tmp_dest_V_1' <Predicate = (tmp_last_V_2 & tmp_last_V_1) | (state_2 != 0 & state_2 != 4096 & tmp_last_V_1) | (state_2 == 0 & tmp_last_V_2)> <Delay = 0.00>
ST_46 : Operation 338 [1/1] (0.00ns)   --->   "%tmp_id_V_1 = phi i1 %tmp_out_id_V_1, void %sw.bb, i1 %tmp_out_id_V_4, void %sw.epilog"   --->   Operation 338 'phi' 'tmp_id_V_1' <Predicate = (tmp_last_V_2 & tmp_last_V_1) | (state_2 != 0 & state_2 != 4096 & tmp_last_V_1) | (state_2 == 0 & tmp_last_V_2)> <Delay = 0.00>
ST_46 : Operation 339 [1/1] (0.00ns)   --->   "%tmp_user_V_1 = phi i1 %tmp_out_user_V_1, void %sw.bb, i1 %tmp_out_user_V_4, void %sw.epilog"   --->   Operation 339 'phi' 'tmp_user_V_1' <Predicate = (tmp_last_V_2 & tmp_last_V_1) | (state_2 != 0 & state_2 != 4096 & tmp_last_V_1) | (state_2 == 0 & tmp_last_V_2)> <Delay = 0.00>
ST_46 : Operation 340 [1/1] (0.00ns)   --->   "%tmp_strb_V_1 = phi i4 %tmp_out_strb_V_1, void %sw.bb, i4 %tmp_out_strb_V_4, void %sw.epilog"   --->   Operation 340 'phi' 'tmp_strb_V_1' <Predicate = (tmp_last_V_2 & tmp_last_V_1) | (state_2 != 0 & state_2 != 4096 & tmp_last_V_1) | (state_2 == 0 & tmp_last_V_2)> <Delay = 0.00>
ST_46 : Operation 341 [1/1] (0.00ns)   --->   "%tmp_keep_V_1 = phi i4 %tmp_out_keep_V_1, void %sw.bb, i4 %tmp_out_keep_V_4, void %sw.epilog"   --->   Operation 341 'phi' 'tmp_keep_V_1' <Predicate = (tmp_last_V_2 & tmp_last_V_1) | (state_2 != 0 & state_2 != 4096 & tmp_last_V_1) | (state_2 == 0 & tmp_last_V_2)> <Delay = 0.00>
ST_46 : Operation 342 [1/1] (0.00ns)   --->   "%tmp_data_V_4 = phi i32 %tmp_out_data_V_1, void %sw.bb, i32 %tmp_out_data_V_4, void %sw.epilog"   --->   Operation 342 'phi' 'tmp_data_V_4' <Predicate = (tmp_last_V_2 & tmp_last_V_1) | (state_2 != 0 & state_2 != 4096 & tmp_last_V_1) | (state_2 == 0 & tmp_last_V_2)> <Delay = 0.00>
ST_46 : Operation 343 [2/2] (0.00ns)   --->   "%write_ln304 = write void @_ssdm_op_Write.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %output_r_V_data_V, i4 %output_r_V_keep_V, i4 %output_r_V_strb_V, i1 %output_r_V_user_V, i1 %output_r_V_last_V, i1 %output_r_V_id_V, i1 %output_r_V_dest_V, i32 %tmp_data_V_4, i4 %tmp_keep_V_1, i4 %tmp_strb_V_1, i1 %tmp_user_V_1, i1 1, i1 %tmp_id_V_1, i1 %tmp_dest_V_1"   --->   Operation 343 'write' 'write_ln304' <Predicate = (tmp_last_V_2 & tmp_last_V_1) | (state_2 != 0 & state_2 != 4096 & tmp_last_V_1) | (state_2 == 0 & tmp_last_V_2)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >

State 47 <SV = 46> <Delay = 3.29>
ST_47 : Operation 344 [1/2] (0.00ns)   --->   "%write_ln304 = write void @_ssdm_op_Write.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %output_r_V_data_V, i4 %output_r_V_keep_V, i4 %output_r_V_strb_V, i1 %output_r_V_user_V, i1 %output_r_V_last_V, i1 %output_r_V_id_V, i1 %output_r_V_dest_V, i32 %accumulate_2, i4 %tmp_keep_V, i4 %tmp_strb_V, i1 %tmp_user_V, i1 0, i1 %tmp_id_V, i1 %tmp_dest_V"   --->   Operation 344 'write' 'write_ln304' <Predicate = (state_2 == 4096 & !tmp_last_V_2)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_47 : Operation 345 [1/1] (1.70ns)   --->   "%br_ln92 = br void %if.end40" [equalizer.cpp:92]   --->   Operation 345 'br' 'br_ln92' <Predicate = (state_2 == 4096 & !tmp_last_V_2)> <Delay = 1.70>
ST_47 : Operation 346 [1/1] (0.00ns)   --->   "%state_1233 = phi i32 4096, void %if.end, i32 17, void %sw.bb, i32 %state_1, void %sw.epilog"   --->   Operation 346 'phi' 'state_1233' <Predicate = (state_2 == 4096 & !tmp_last_V_2) | (state_2 != 0 & !tmp_last_V_1) | (state_2 == 0 & !tmp_last_V_2)> <Delay = 0.00>
ST_47 : Operation 347 [1/1] (1.58ns)   --->   "%store_ln26 = store i32 %state_1233, i32 %state" [equalizer.cpp:26]   --->   Operation 347 'store' 'store_ln26' <Predicate = (state_2 == 4096 & !tmp_last_V_2) | (state_2 != 0 & !tmp_last_V_1) | (state_2 == 0 & !tmp_last_V_2)> <Delay = 1.58>
ST_47 : Operation 348 [1/1] (0.00ns)   --->   "%br_ln26 = br void %while.body" [equalizer.cpp:26]   --->   Operation 348 'br' 'br_ln26' <Predicate = (state_2 == 4096 & !tmp_last_V_2) | (state_2 != 0 & !tmp_last_V_1) | (state_2 == 0 & !tmp_last_V_2)> <Delay = 0.00>

State 48 <SV = 2> <Delay = 3.52>
ST_48 : Operation 349 [1/1] (0.00ns)   --->   "%j = phi i6 %add_ln39, void %for.inc.split, i6 32, void %for.inc.preheader" [equalizer.cpp:39]   --->   Operation 349 'phi' 'j' <Predicate = true> <Delay = 0.00>
ST_48 : Operation 350 [1/1] (0.00ns)   --->   "%tmp_data_V_1 = phi i32 %tmp_data_V_3, void %for.inc.split, i32 %tmp_data_V, void %for.inc.preheader"   --->   Operation 350 'phi' 'tmp_data_V_1' <Predicate = true> <Delay = 0.00>
ST_48 : Operation 351 [1/1] (0.00ns)   --->   "%p_4_0_0_0108_phi = phi i1 %tmp_last_V, void %for.inc.split, i1 0, void %for.inc.preheader"   --->   Operation 351 'phi' 'p_4_0_0_0108_phi' <Predicate = true> <Delay = 0.00>
ST_48 : Operation 352 [1/1] (1.42ns)   --->   "%icmp_ln39 = icmp_eq  i6 %j, i6 0" [equalizer.cpp:39]   --->   Operation 352 'icmp' 'icmp_ln39' <Predicate = true> <Delay = 1.42> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.42> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_48 : Operation 353 [1/1] (0.00ns)   --->   "%empty_19 = speclooptripcount i32 @_ssdm_op_SpecLoopTripCount, i64 32, i64 32, i64 32"   --->   Operation 353 'speclooptripcount' 'empty_19' <Predicate = true> <Delay = 0.00>
ST_48 : Operation 354 [1/1] (0.00ns)   --->   "%br_ln39 = br i1 %icmp_ln39, void %for.inc.split, void %sw.epilog.loopexit" [equalizer.cpp:39]   --->   Operation 354 'br' 'br_ln39' <Predicate = true> <Delay = 0.00>
ST_48 : Operation 355 [1/1] (0.00ns)   --->   "%shl_ln = bitconcatenate i8 @_ssdm_op_BitConcatenate.i8.i6.i2, i6 %j, i2 0" [equalizer.cpp:40]   --->   Operation 355 'bitconcatenate' 'shl_ln' <Predicate = (!icmp_ln39)> <Delay = 0.00>
ST_48 : Operation 356 [1/1] (0.00ns)   --->   "%zext_ln40 = zext i8 %shl_ln" [equalizer.cpp:40]   --->   Operation 356 'zext' 'zext_ln40' <Predicate = (!icmp_ln39)> <Delay = 0.00>
ST_48 : Operation 357 [1/1] (3.52ns)   --->   "%add_ln40 = add i64 %zext_ln40, i64 %coefs_read" [equalizer.cpp:40]   --->   Operation 357 'add' 'add_ln40' <Predicate = (!icmp_ln39)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_48 : Operation 358 [1/1] (0.00ns)   --->   "%trunc_ln1 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln40, i32 2, i32 63" [equalizer.cpp:40]   --->   Operation 358 'partselect' 'trunc_ln1' <Predicate = (!icmp_ln39)> <Delay = 0.00>
ST_48 : Operation 359 [1/1] (0.00ns)   --->   "%sext_ln40 = sext i62 %trunc_ln1" [equalizer.cpp:40]   --->   Operation 359 'sext' 'sext_ln40' <Predicate = (!icmp_ln39)> <Delay = 0.00>
ST_48 : Operation 360 [1/1] (0.00ns)   --->   "%gmem_addr_1 = getelementptr i32 %gmem, i64 %sext_ln40" [equalizer.cpp:40]   --->   Operation 360 'getelementptr' 'gmem_addr_1' <Predicate = (!icmp_ln39)> <Delay = 0.00>
ST_48 : Operation 361 [1/1] (1.82ns)   --->   "%add_ln39 = add i6 %j, i6 63" [equalizer.cpp:39]   --->   Operation 361 'add' 'add_ln39' <Predicate = (!icmp_ln39)> <Delay = 1.82> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_48 : Operation 362 [1/1] (1.70ns)   --->   "%br_ln0 = br void %sw.epilog"   --->   Operation 362 'br' 'br_ln0' <Predicate = (icmp_ln39)> <Delay = 1.70>

State 49 <SV = 3> <Delay = 7.30>
ST_49 : Operation 363 [1/1] (7.30ns)   --->   "%gmem_addr_1_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_1, i32 1" [equalizer.cpp:40]   --->   Operation 363 'writereq' 'gmem_addr_1_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 50 <SV = 4> <Delay = 7.30>
ST_50 : Operation 364 [1/1] (7.30ns)   --->   "%write_ln40 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_1, i32 %tmp_data_V_1, i4 15" [equalizer.cpp:40]   --->   Operation 364 'write' 'write_ln40' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 51 <SV = 5> <Delay = 7.30>
ST_51 : Operation 365 [5/5] (7.30ns)   --->   "%gmem_addr_1_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_1" [equalizer.cpp:40]   --->   Operation 365 'writeresp' 'gmem_addr_1_resp' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 52 <SV = 6> <Delay = 7.30>
ST_52 : Operation 366 [4/5] (7.30ns)   --->   "%gmem_addr_1_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_1" [equalizer.cpp:40]   --->   Operation 366 'writeresp' 'gmem_addr_1_resp' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 53 <SV = 7> <Delay = 7.30>
ST_53 : Operation 367 [3/5] (7.30ns)   --->   "%gmem_addr_1_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_1" [equalizer.cpp:40]   --->   Operation 367 'writeresp' 'gmem_addr_1_resp' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 54 <SV = 8> <Delay = 7.30>
ST_54 : Operation 368 [2/5] (7.30ns)   --->   "%gmem_addr_1_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_1" [equalizer.cpp:40]   --->   Operation 368 'writeresp' 'gmem_addr_1_resp' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 55 <SV = 9> <Delay = 7.30>
ST_55 : Operation 369 [1/1] (0.00ns)   --->   "%specloopname_ln17 = specloopname void @_ssdm_op_SpecLoopName, void @empty_5" [equalizer.cpp:17]   --->   Operation 369 'specloopname' 'specloopname_ln17' <Predicate = true> <Delay = 0.00>
ST_55 : Operation 370 [1/5] (7.30ns)   --->   "%gmem_addr_1_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_1" [equalizer.cpp:40]   --->   Operation 370 'writeresp' 'gmem_addr_1_resp' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_55 : Operation 371 [1/1] (0.00ns)   --->   "%empty_20 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 371 'read' 'empty_20' <Predicate = true> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_55 : Operation 372 [1/1] (0.00ns)   --->   "%tmp_data_V_3 = extractvalue i44 %empty_20"   --->   Operation 372 'extractvalue' 'tmp_data_V_3' <Predicate = true> <Delay = 0.00>
ST_55 : Operation 373 [1/1] (0.00ns)   --->   "%tmp_last_V = extractvalue i44 %empty_20"   --->   Operation 373 'extractvalue' 'tmp_last_V' <Predicate = true> <Delay = 0.00>
ST_55 : Operation 374 [1/1] (0.00ns)   --->   "%br_ln39 = br void %for.inc" [equalizer.cpp:39]   --->   Operation 374 'br' 'br_ln39' <Predicate = true> <Delay = 0.00>

State 56 <SV = 46> <Delay = 0.00>
ST_56 : Operation 375 [1/2] (0.00ns)   --->   "%write_ln304 = write void @_ssdm_op_Write.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %output_r_V_data_V, i4 %output_r_V_keep_V, i4 %output_r_V_strb_V, i1 %output_r_V_user_V, i1 %output_r_V_last_V, i1 %output_r_V_id_V, i1 %output_r_V_dest_V, i32 %tmp_data_V_4, i4 %tmp_keep_V_1, i4 %tmp_strb_V_1, i1 %tmp_user_V_1, i1 1, i1 %tmp_id_V_1, i1 %tmp_dest_V_1"   --->   Operation 375 'write' 'write_ln304' <Predicate = true> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_56 : Operation 376 [1/1] (0.00ns)   --->   "%ret_ln98 = ret" [equalizer.cpp:98]   --->   Operation 376 'ret' 'ret_ln98' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 2.7ns.

 <State 1>: 1.59ns
The critical path consists of the following:
	'alloca' operation ('state') [55]  (0 ns)
	'store' operation ('store_ln26', equalizer.cpp:26) of constant 0 on local variable 'state' [82]  (1.59 ns)

 <State 2>: 7.3ns
The critical path consists of the following:
	bus request operation ('empty_21', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [104]  (7.3 ns)

 <State 3>: 7.3ns
The critical path consists of the following:
	bus request operation ('empty_21', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [104]  (7.3 ns)

 <State 4>: 7.3ns
The critical path consists of the following:
	bus request operation ('empty_21', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [104]  (7.3 ns)

 <State 5>: 7.3ns
The critical path consists of the following:
	bus request operation ('empty_21', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [104]  (7.3 ns)

 <State 6>: 7.3ns
The critical path consists of the following:
	bus request operation ('empty_21', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [104]  (7.3 ns)

 <State 7>: 7.3ns
The critical path consists of the following:
	bus request operation ('empty_21', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [104]  (7.3 ns)

 <State 8>: 7.3ns
The critical path consists of the following:
	bus request operation ('empty_21', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [104]  (7.3 ns)

 <State 9>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [105]  (7.3 ns)

 <State 10>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_1', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [106]  (7.3 ns)

 <State 11>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_2', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [107]  (7.3 ns)

 <State 12>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_3', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [108]  (7.3 ns)

 <State 13>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_4', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [109]  (7.3 ns)

 <State 14>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_5', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [110]  (7.3 ns)

 <State 15>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_6', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [111]  (7.3 ns)

 <State 16>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_7', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [112]  (7.3 ns)

 <State 17>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_8', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [113]  (7.3 ns)

 <State 18>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_9', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [114]  (7.3 ns)

 <State 19>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_10', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [115]  (7.3 ns)

 <State 20>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_11', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [116]  (7.3 ns)

 <State 21>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_12', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [117]  (7.3 ns)

 <State 22>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_13', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [118]  (7.3 ns)

 <State 23>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_14', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [119]  (7.3 ns)

 <State 24>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_15', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [120]  (7.3 ns)

 <State 25>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_16', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [121]  (7.3 ns)

 <State 26>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_17', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [122]  (7.3 ns)

 <State 27>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_18', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [123]  (7.3 ns)

 <State 28>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_19', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [124]  (7.3 ns)

 <State 29>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_20', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [125]  (7.3 ns)

 <State 30>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_21', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [126]  (7.3 ns)

 <State 31>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_22', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [127]  (7.3 ns)

 <State 32>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_23', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [128]  (7.3 ns)

 <State 33>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_24', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [129]  (7.3 ns)

 <State 34>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_25', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [130]  (7.3 ns)

 <State 35>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_26', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [131]  (7.3 ns)

 <State 36>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_27', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [132]  (7.3 ns)

 <State 37>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_28', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [133]  (7.3 ns)

 <State 38>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_29', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [134]  (7.3 ns)

 <State 39>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_30', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [135]  (7.3 ns)

 <State 40>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_31', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [136]  (7.3 ns)

 <State 41>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_32', equalizer.cpp:67) on port 'gmem' (equalizer.cpp:67) [137]  (7.3 ns)

 <State 42>: 6.91ns
The critical path consists of the following:
	'load' operation ('signal_shift_reg_31_load', equalizer.cpp:66) on static variable 'signal_shift_reg_31' [103]  (0 ns)
	'mul' operation ('accumulate', equalizer.cpp:67) [138]  (6.91 ns)

 <State 43>: 6.91ns
The critical path consists of the following:
	'mul' operation ('accumulate', equalizer.cpp:67) [138]  (6.91 ns)

 <State 44>: 4.37ns
The critical path consists of the following:
	'add' operation ('add_ln70_15', equalizer.cpp:70) [248]  (0 ns)
	'add' operation ('add_ln70_17', equalizer.cpp:70) [250]  (4.37 ns)

 <State 45>: 4.37ns
The critical path consists of the following:
	'add' operation ('add_ln70_21', equalizer.cpp:70) [254]  (0 ns)
	'add' operation ('add_ln70_30', equalizer.cpp:70) [263]  (4.37 ns)

 <State 46>: 4.37ns
The critical path consists of the following:
	'add' operation ('add_ln70_14', equalizer.cpp:70) [247]  (0 ns)
	'add' operation ('accumulate', equalizer.cpp:70) [264]  (4.37 ns)
	axis write operation ('write_ln304') on port 'output_r_V_data_V' [268]  (0 ns)

 <State 47>: 3.3ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('state') with incoming values : ('state') [324]  (1.71 ns)
	'phi' operation ('state') with incoming values : ('state') [324]  (0 ns)
	'store' operation ('store_ln26', equalizer.cpp:26) of variable 'state' on local variable 'state' [325]  (1.59 ns)

 <State 48>: 3.52ns
The critical path consists of the following:
	'phi' operation ('j', equalizer.cpp:39) with incoming values : ('add_ln39', equalizer.cpp:39) [287]  (0 ns)
	'add' operation ('add_ln40', equalizer.cpp:40) [297]  (3.52 ns)

 <State 49>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_addr_1_req', equalizer.cpp:40) on port 'gmem' (equalizer.cpp:40) [301]  (7.3 ns)

 <State 50>: 7.3ns
The critical path consists of the following:
	bus write operation ('write_ln40', equalizer.cpp:40) on port 'gmem' (equalizer.cpp:40) [302]  (7.3 ns)

 <State 51>: 7.3ns
The critical path consists of the following:
	bus response operation ('gmem_addr_1_resp', equalizer.cpp:40) on port 'gmem' (equalizer.cpp:40) [303]  (7.3 ns)

 <State 52>: 7.3ns
The critical path consists of the following:
	bus response operation ('gmem_addr_1_resp', equalizer.cpp:40) on port 'gmem' (equalizer.cpp:40) [303]  (7.3 ns)

 <State 53>: 7.3ns
The critical path consists of the following:
	bus response operation ('gmem_addr_1_resp', equalizer.cpp:40) on port 'gmem' (equalizer.cpp:40) [303]  (7.3 ns)

 <State 54>: 7.3ns
The critical path consists of the following:
	bus response operation ('gmem_addr_1_resp', equalizer.cpp:40) on port 'gmem' (equalizer.cpp:40) [303]  (7.3 ns)

 <State 55>: 7.3ns
The critical path consists of the following:
	bus response operation ('gmem_addr_1_resp', equalizer.cpp:40) on port 'gmem' (equalizer.cpp:40) [303]  (7.3 ns)

 <State 56>: 0ns
The critical path consists of the following:


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
	State 38
	State 39
	State 40
	State 41
	State 42
	State 43
	State 44
	State 45
	State 46
	State 47
	State 48
	State 49
	State 50
	State 51
	State 52
	State 53
	State 54
	State 55
	State 56


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
