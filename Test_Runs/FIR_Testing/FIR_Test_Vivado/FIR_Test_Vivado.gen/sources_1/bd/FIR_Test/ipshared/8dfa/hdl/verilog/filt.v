// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="filt_filt,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1637,HLS_SYN_LUT=1874,HLS_VERSION=2023_2}" *)

module filt (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        y_TDATA,
        y_TVALID,
        y_TREADY,
        y_TKEEP,
        y_TSTRB,
        y_TUSER,
        y_TLAST,
        y_TID,
        y_TDEST,
        x_TDATA,
        x_TVALID,
        x_TREADY,
        x_TKEEP,
        x_TSTRB,
        x_TUSER,
        x_TLAST,
        x_TID,
        x_TDEST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
output  [31:0] y_TDATA;
output   y_TVALID;
input   y_TREADY;
output  [3:0] y_TKEEP;
output  [3:0] y_TSTRB;
output  [0:0] y_TUSER;
output  [0:0] y_TLAST;
output  [0:0] y_TID;
output  [0:0] y_TDEST;
input  [31:0] x_TDATA;
input   x_TVALID;
output   x_TREADY;
input  [3:0] x_TKEEP;
input  [3:0] x_TSTRB;
input  [0:0] x_TUSER;
input  [0:0] x_TLAST;
input  [0:0] x_TID;
input  [0:0] x_TDEST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
wire   [63:0] c;
reg    gmem_blk_n_AR;
(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state6;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state14;
reg    y_TDATA_blk_n;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
reg   [0:0] output_signal_reg_191;
reg   [0:0] targetBlock_reg_517;
reg    x_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state5;
reg   [31:0] grp_load_fu_356_p1;
reg   [31:0] reg_360;
wire    ap_CS_fsm_state3;
reg    ap_block_state5;
reg   [63:0] c_read_reg_474;
wire    ap_CS_fsm_state1;
reg   [31:0] tmp_data_reg_480;
reg   [3:0] tmp_keep_reg_487;
reg   [3:0] tmp_strb_reg_492;
reg   [0:0] tmp_user_reg_497;
reg   [0:0] tmp_last_reg_502;
reg   [0:0] tmp_id_reg_507;
reg   [0:0] tmp_dest_reg_512;
wire   [0:0] grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_return;
wire    ap_CS_fsm_state4;
wire   [0:0] read_coefs_2_fu_381_p2;
reg   [63:0] gmem_addr_reg_561;
wire   [0:0] icmp_ln60_fu_436_p2;
reg   [0:0] icmp_ln60_reg_567;
reg   [31:0] output_data_reg_573;
wire   [31:0] select_ln60_fu_442_p3;
reg   [31:0] select_ln60_reg_578;
wire    grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_start;
wire    grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_done;
wire    grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_idle;
wire    grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_ready;
wire    grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWVALID;
wire   [63:0] grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWADDR;
wire   [0:0] grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWID;
wire   [31:0] grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWLEN;
wire   [2:0] grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWSIZE;
wire   [1:0] grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWBURST;
wire   [1:0] grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWLOCK;
wire   [3:0] grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWCACHE;
wire   [2:0] grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWPROT;
wire   [3:0] grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWQOS;
wire   [3:0] grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWREGION;
wire   [0:0] grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWUSER;
wire    grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_WVALID;
wire   [31:0] grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_WDATA;
wire   [3:0] grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_WSTRB;
wire    grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_WLAST;
wire   [0:0] grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_WID;
wire   [0:0] grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_WUSER;
wire    grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARVALID;
wire   [63:0] grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARADDR;
wire   [0:0] grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARID;
wire   [31:0] grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARLEN;
wire   [2:0] grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARSIZE;
wire   [1:0] grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARBURST;
wire   [1:0] grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARLOCK;
wire   [3:0] grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARCACHE;
wire   [2:0] grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARPROT;
wire   [3:0] grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARQOS;
wire   [3:0] grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARREGION;
wire   [0:0] grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARUSER;
wire    grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_RREADY;
wire    grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_BREADY;
wire    grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_x_TREADY;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire   [8:0] gmem_RFIFONUM;
wire    gmem_BVALID;
reg    gmem_BREADY;
reg   [0:0] read_coefs_reg_179;
reg   [0:0] ap_phi_mux_spec_select323359_phi_fu_282_p4;
reg    ap_predicate_op106_write_state16;
wire    regslice_both_y_V_data_V_U_apdone_blk;
reg    ap_block_state16;
reg    ap_block_state16_io;
reg   [0:0] tmp_last_1342_reg_245;
wire   [0:0] ap_phi_mux_output_signal_phi_fu_195_p4;
reg   [0:0] ap_phi_mux_output_signal_1351358_phi_fu_294_p4;
reg   [31:0] tmp_data_1348_reg_203;
reg   [3:0] tmp_keep_1346_reg_212;
reg   [3:0] tmp_strb_1345_reg_223;
reg   [0:0] tmp_user_1344_reg_234;
reg   [0:0] tmp_id_1341_reg_256;
reg   [0:0] tmp_dest_1340_reg_267;
reg   [0:0] spec_select323359_reg_278;
reg   [0:0] output_signal_1351358_reg_289;
reg    grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_start_reg;
wire  signed [63:0] sext_ln50_1_fu_426_p1;
reg   [31:0] i_fu_114;
wire   [31:0] i_4_fu_453_p2;
wire   [31:0] i_3_fu_386_p3;
reg   [31:0] ap_sig_allocacmp_i_load_1;
reg   [31:0] ap_sig_allocacmp_i_load;
wire   [31:0] grp_fu_365_p2;
wire   [33:0] shl_ln1_fu_399_p3;
wire  signed [63:0] sext_ln50_fu_407_p1;
wire   [63:0] add_ln50_fu_411_p2;
wire   [61:0] trunc_ln1_fu_416_p4;
reg   [15:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
reg    y_TVALID_int_regslice;
wire    y_TREADY_int_regslice;
wire    regslice_both_y_V_data_V_U_vld_out;
wire    regslice_both_y_V_keep_V_U_apdone_blk;
wire    regslice_both_y_V_keep_V_U_ack_in_dummy;
wire    regslice_both_y_V_keep_V_U_vld_out;
wire    regslice_both_y_V_strb_V_U_apdone_blk;
wire    regslice_both_y_V_strb_V_U_ack_in_dummy;
wire    regslice_both_y_V_strb_V_U_vld_out;
wire    regslice_both_y_V_user_V_U_apdone_blk;
wire    regslice_both_y_V_user_V_U_ack_in_dummy;
wire    regslice_both_y_V_user_V_U_vld_out;
wire    regslice_both_y_V_last_V_U_apdone_blk;
wire    regslice_both_y_V_last_V_U_ack_in_dummy;
wire    regslice_both_y_V_last_V_U_vld_out;
wire    regslice_both_y_V_id_V_U_apdone_blk;
wire    regslice_both_y_V_id_V_U_ack_in_dummy;
wire    regslice_both_y_V_id_V_U_vld_out;
wire    regslice_both_y_V_dest_V_U_apdone_blk;
wire    regslice_both_y_V_dest_V_U_ack_in_dummy;
wire    regslice_both_y_V_dest_V_U_vld_out;
wire    regslice_both_x_V_data_V_U_apdone_blk;
wire   [31:0] x_TDATA_int_regslice;
wire    x_TVALID_int_regslice;
reg    x_TREADY_int_regslice;
wire    regslice_both_x_V_data_V_U_ack_in;
wire    regslice_both_x_V_keep_V_U_apdone_blk;
wire   [3:0] x_TKEEP_int_regslice;
wire    regslice_both_x_V_keep_V_U_vld_out;
wire    regslice_both_x_V_keep_V_U_ack_in;
wire    regslice_both_x_V_strb_V_U_apdone_blk;
wire   [3:0] x_TSTRB_int_regslice;
wire    regslice_both_x_V_strb_V_U_vld_out;
wire    regslice_both_x_V_strb_V_U_ack_in;
wire    regslice_both_x_V_user_V_U_apdone_blk;
wire   [0:0] x_TUSER_int_regslice;
wire    regslice_both_x_V_user_V_U_vld_out;
wire    regslice_both_x_V_user_V_U_ack_in;
wire    regslice_both_x_V_last_V_U_apdone_blk;
wire   [0:0] x_TLAST_int_regslice;
wire    regslice_both_x_V_last_V_U_vld_out;
wire    regslice_both_x_V_last_V_U_ack_in;
wire    regslice_both_x_V_id_V_U_apdone_blk;
wire   [0:0] x_TID_int_regslice;
wire    regslice_both_x_V_id_V_U_vld_out;
wire    regslice_both_x_V_id_V_U_ack_in;
wire    regslice_both_x_V_dest_V_U_apdone_blk;
wire   [0:0] x_TDEST_int_regslice;
wire    regslice_both_x_V_dest_V_U_vld_out;
wire    regslice_both_x_V_dest_V_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_start_reg = 1'b0;
#0 i_fu_114 = 32'd0;
end

filt_filt_Pipeline_VITIS_LOOP_30_2 grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_start),
    .ap_done(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_done),
    .ap_idle(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_idle),
    .ap_ready(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_ready),
    .x_TVALID(x_TVALID_int_regslice),
    .m_axi_gmem_AWVALID(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWVALID),
    .m_axi_gmem_AWREADY(gmem_AWREADY),
    .m_axi_gmem_AWADDR(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWADDR),
    .m_axi_gmem_AWID(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWID),
    .m_axi_gmem_AWLEN(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWLEN),
    .m_axi_gmem_AWSIZE(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWSIZE),
    .m_axi_gmem_AWBURST(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWBURST),
    .m_axi_gmem_AWLOCK(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWLOCK),
    .m_axi_gmem_AWCACHE(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWCACHE),
    .m_axi_gmem_AWPROT(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWPROT),
    .m_axi_gmem_AWQOS(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWQOS),
    .m_axi_gmem_AWREGION(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWREGION),
    .m_axi_gmem_AWUSER(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWUSER),
    .m_axi_gmem_WVALID(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_WVALID),
    .m_axi_gmem_WREADY(gmem_WREADY),
    .m_axi_gmem_WDATA(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_WDATA),
    .m_axi_gmem_WSTRB(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_WSTRB),
    .m_axi_gmem_WLAST(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_WLAST),
    .m_axi_gmem_WID(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_WID),
    .m_axi_gmem_WUSER(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_WUSER),
    .m_axi_gmem_ARVALID(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARVALID),
    .m_axi_gmem_ARREADY(1'b0),
    .m_axi_gmem_ARADDR(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARADDR),
    .m_axi_gmem_ARID(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARID),
    .m_axi_gmem_ARLEN(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARLEN),
    .m_axi_gmem_ARSIZE(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARSIZE),
    .m_axi_gmem_ARBURST(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARBURST),
    .m_axi_gmem_ARLOCK(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARLOCK),
    .m_axi_gmem_ARCACHE(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARCACHE),
    .m_axi_gmem_ARPROT(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARPROT),
    .m_axi_gmem_ARQOS(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARQOS),
    .m_axi_gmem_ARREGION(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARREGION),
    .m_axi_gmem_ARUSER(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARUSER),
    .m_axi_gmem_RVALID(1'b0),
    .m_axi_gmem_RREADY(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_RREADY),
    .m_axi_gmem_RDATA(32'd0),
    .m_axi_gmem_RLAST(1'b0),
    .m_axi_gmem_RID(1'd0),
    .m_axi_gmem_RFIFONUM(9'd0),
    .m_axi_gmem_RUSER(1'd0),
    .m_axi_gmem_RRESP(2'd0),
    .m_axi_gmem_BVALID(gmem_BVALID),
    .m_axi_gmem_BREADY(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_BREADY),
    .m_axi_gmem_BRESP(2'd0),
    .m_axi_gmem_BID(1'd0),
    .m_axi_gmem_BUSER(1'd0),
    .sext_ln30(reg_360),
    .tmp_data(tmp_data_reg_480),
    .read_coefs(read_coefs_reg_179),
    .c(c_read_reg_474),
    .x_TDATA(x_TDATA_int_regslice),
    .x_TREADY(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_x_TREADY),
    .x_TKEEP(x_TKEEP_int_regslice),
    .x_TSTRB(x_TSTRB_int_regslice),
    .x_TUSER(x_TUSER_int_regslice),
    .x_TLAST(x_TLAST_int_regslice),
    .x_TID(x_TID_int_regslice),
    .x_TDEST(x_TDEST_int_regslice),
    .ap_return(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_return)
);

filt_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .c(c)
);

filt_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 7 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_addr_reg_561),
    .I_ARLEN(32'd1),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RFIFONUM(gmem_RFIFONUM),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWADDR),
    .I_AWLEN(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWLEN),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_WDATA),
    .I_WSTRB(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_WSTRB),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY)
);

filt_regslice_both #(
    .DataWidth( 32 ))
regslice_both_y_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_data_reg_573),
    .vld_in(y_TVALID_int_regslice),
    .ack_in(y_TREADY_int_regslice),
    .data_out(y_TDATA),
    .vld_out(regslice_both_y_V_data_V_U_vld_out),
    .ack_out(y_TREADY),
    .apdone_blk(regslice_both_y_V_data_V_U_apdone_blk)
);

filt_regslice_both #(
    .DataWidth( 4 ))
regslice_both_y_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_keep_1346_reg_212),
    .vld_in(y_TVALID_int_regslice),
    .ack_in(regslice_both_y_V_keep_V_U_ack_in_dummy),
    .data_out(y_TKEEP),
    .vld_out(regslice_both_y_V_keep_V_U_vld_out),
    .ack_out(y_TREADY),
    .apdone_blk(regslice_both_y_V_keep_V_U_apdone_blk)
);

filt_regslice_both #(
    .DataWidth( 4 ))
regslice_both_y_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_strb_1345_reg_223),
    .vld_in(y_TVALID_int_regslice),
    .ack_in(regslice_both_y_V_strb_V_U_ack_in_dummy),
    .data_out(y_TSTRB),
    .vld_out(regslice_both_y_V_strb_V_U_vld_out),
    .ack_out(y_TREADY),
    .apdone_blk(regslice_both_y_V_strb_V_U_apdone_blk)
);

filt_regslice_both #(
    .DataWidth( 1 ))
regslice_both_y_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_user_1344_reg_234),
    .vld_in(y_TVALID_int_regslice),
    .ack_in(regslice_both_y_V_user_V_U_ack_in_dummy),
    .data_out(y_TUSER),
    .vld_out(regslice_both_y_V_user_V_U_vld_out),
    .ack_out(y_TREADY),
    .apdone_blk(regslice_both_y_V_user_V_U_apdone_blk)
);

filt_regslice_both #(
    .DataWidth( 1 ))
regslice_both_y_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_last_1342_reg_245),
    .vld_in(y_TVALID_int_regslice),
    .ack_in(regslice_both_y_V_last_V_U_ack_in_dummy),
    .data_out(y_TLAST),
    .vld_out(regslice_both_y_V_last_V_U_vld_out),
    .ack_out(y_TREADY),
    .apdone_blk(regslice_both_y_V_last_V_U_apdone_blk)
);

filt_regslice_both #(
    .DataWidth( 1 ))
regslice_both_y_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_id_1341_reg_256),
    .vld_in(y_TVALID_int_regslice),
    .ack_in(regslice_both_y_V_id_V_U_ack_in_dummy),
    .data_out(y_TID),
    .vld_out(regslice_both_y_V_id_V_U_vld_out),
    .ack_out(y_TREADY),
    .apdone_blk(regslice_both_y_V_id_V_U_apdone_blk)
);

filt_regslice_both #(
    .DataWidth( 1 ))
regslice_both_y_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_dest_1340_reg_267),
    .vld_in(y_TVALID_int_regslice),
    .ack_in(regslice_both_y_V_dest_V_U_ack_in_dummy),
    .data_out(y_TDEST),
    .vld_out(regslice_both_y_V_dest_V_U_vld_out),
    .ack_out(y_TREADY),
    .apdone_blk(regslice_both_y_V_dest_V_U_apdone_blk)
);

filt_regslice_both #(
    .DataWidth( 32 ))
regslice_both_x_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(x_TDATA),
    .vld_in(x_TVALID),
    .ack_in(regslice_both_x_V_data_V_U_ack_in),
    .data_out(x_TDATA_int_regslice),
    .vld_out(x_TVALID_int_regslice),
    .ack_out(x_TREADY_int_regslice),
    .apdone_blk(regslice_both_x_V_data_V_U_apdone_blk)
);

filt_regslice_both #(
    .DataWidth( 4 ))
regslice_both_x_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(x_TKEEP),
    .vld_in(x_TVALID),
    .ack_in(regslice_both_x_V_keep_V_U_ack_in),
    .data_out(x_TKEEP_int_regslice),
    .vld_out(regslice_both_x_V_keep_V_U_vld_out),
    .ack_out(x_TREADY_int_regslice),
    .apdone_blk(regslice_both_x_V_keep_V_U_apdone_blk)
);

filt_regslice_both #(
    .DataWidth( 4 ))
regslice_both_x_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(x_TSTRB),
    .vld_in(x_TVALID),
    .ack_in(regslice_both_x_V_strb_V_U_ack_in),
    .data_out(x_TSTRB_int_regslice),
    .vld_out(regslice_both_x_V_strb_V_U_vld_out),
    .ack_out(x_TREADY_int_regslice),
    .apdone_blk(regslice_both_x_V_strb_V_U_apdone_blk)
);

filt_regslice_both #(
    .DataWidth( 1 ))
regslice_both_x_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(x_TUSER),
    .vld_in(x_TVALID),
    .ack_in(regslice_both_x_V_user_V_U_ack_in),
    .data_out(x_TUSER_int_regslice),
    .vld_out(regslice_both_x_V_user_V_U_vld_out),
    .ack_out(x_TREADY_int_regslice),
    .apdone_blk(regslice_both_x_V_user_V_U_apdone_blk)
);

filt_regslice_both #(
    .DataWidth( 1 ))
regslice_both_x_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(x_TLAST),
    .vld_in(x_TVALID),
    .ack_in(regslice_both_x_V_last_V_U_ack_in),
    .data_out(x_TLAST_int_regslice),
    .vld_out(regslice_both_x_V_last_V_U_vld_out),
    .ack_out(x_TREADY_int_regslice),
    .apdone_blk(regslice_both_x_V_last_V_U_apdone_blk)
);

filt_regslice_both #(
    .DataWidth( 1 ))
regslice_both_x_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(x_TID),
    .vld_in(x_TVALID),
    .ack_in(regslice_both_x_V_id_V_U_ack_in),
    .data_out(x_TID_int_regslice),
    .vld_out(regslice_both_x_V_id_V_U_vld_out),
    .ack_out(x_TREADY_int_regslice),
    .apdone_blk(regslice_both_x_V_id_V_U_apdone_blk)
);

filt_regslice_both #(
    .DataWidth( 1 ))
regslice_both_x_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(x_TDEST),
    .vld_in(x_TVALID),
    .ack_in(regslice_both_x_V_dest_V_U_ack_in),
    .data_out(x_TDEST_int_regslice),
    .vld_out(regslice_both_x_V_dest_V_U_vld_out),
    .ack_out(x_TREADY_int_regslice),
    .apdone_blk(regslice_both_x_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_start_reg <= 1'b1;
        end else if ((grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_ready == 1'b1)) begin
            grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_output_signal_phi_fu_195_p4 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (tmp_last_reg_502 == 1'd0) & (1'b0 == ap_block_state5) & (targetBlock_reg_517 == 1'd1))) begin
        i_fu_114 <= i_3_fu_386_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) | ((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5) & (targetBlock_reg_517 == 1'd0)))) begin
        i_fu_114 <= 32'd0;
    end else if ((~((1'b1 == ap_block_state16_io) | (1'b1 == ap_block_state16)) & (1'b1 == ap_CS_fsm_state16) & ((((tmp_last_reg_502 == 1'd0) & (targetBlock_reg_517 == 1'd1) & (output_signal_reg_191 == 1'd0)) | ((tmp_last_1342_reg_245 == 1'd0) & (output_signal_reg_191 == 1'd1))) | ((tmp_last_1342_reg_245 == 1'd0) & (targetBlock_reg_517 == 1'd0))))) begin
        i_fu_114 <= i_4_fu_453_p2;
    end else if ((~((1'b1 == ap_block_state16_io) | (1'b1 == ap_block_state16)) & (1'b1 == ap_CS_fsm_state16) & (((tmp_last_1342_reg_245 == 1'd0) & (targetBlock_reg_517 == 1'd0)) | ((tmp_last_1342_reg_245 == 1'd0) & (output_signal_reg_191 == 1'd1))))) begin
        i_fu_114 <= select_ln60_reg_578;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_output_signal_phi_fu_195_p4 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (tmp_last_reg_502 == 1'd0) & (1'b0 == ap_block_state5) & (targetBlock_reg_517 == 1'd1))) begin
        output_signal_1351358_reg_289 <= 1'd0;
    end else if ((~((1'b1 == ap_block_state16_io) | (1'b1 == ap_block_state16)) & (1'b1 == ap_CS_fsm_state16) & (((tmp_last_1342_reg_245 == 1'd0) & (targetBlock_reg_517 == 1'd0)) | ((tmp_last_1342_reg_245 == 1'd0) & (output_signal_reg_191 == 1'd1))))) begin
        output_signal_1351358_reg_289 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state16_io) | (1'b1 == ap_block_state16)) & (1'b1 == ap_CS_fsm_state16) & ((((tmp_last_reg_502 == 1'd0) & (targetBlock_reg_517 == 1'd1) & (output_signal_reg_191 == 1'd0)) | ((tmp_last_1342_reg_245 == 1'd0) & (output_signal_reg_191 == 1'd1))) | ((tmp_last_1342_reg_245 == 1'd0) & (targetBlock_reg_517 == 1'd0))))) begin
        output_signal_reg_191 <= ap_phi_mux_output_signal_1351358_phi_fu_294_p4;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        output_signal_reg_191 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state16_io) | (1'b1 == ap_block_state16)) & (1'b1 == ap_CS_fsm_state16) & ((((tmp_last_reg_502 == 1'd0) & (targetBlock_reg_517 == 1'd1) & (output_signal_reg_191 == 1'd0)) | ((tmp_last_1342_reg_245 == 1'd0) & (output_signal_reg_191 == 1'd1))) | ((tmp_last_1342_reg_245 == 1'd0) & (targetBlock_reg_517 == 1'd0))))) begin
        read_coefs_reg_179 <= ap_phi_mux_spec_select323359_phi_fu_282_p4;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        read_coefs_reg_179 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_output_signal_phi_fu_195_p4 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (tmp_last_reg_502 == 1'd0) & (1'b0 == ap_block_state5) & (targetBlock_reg_517 == 1'd1))) begin
        spec_select323359_reg_278 <= read_coefs_2_fu_381_p2;
    end else if ((~((1'b1 == ap_block_state16_io) | (1'b1 == ap_block_state16)) & (1'b1 == ap_CS_fsm_state16) & (((tmp_last_1342_reg_245 == 1'd0) & (targetBlock_reg_517 == 1'd0)) | ((tmp_last_1342_reg_245 == 1'd0) & (output_signal_reg_191 == 1'd1))))) begin
        spec_select323359_reg_278 <= icmp_ln60_reg_567;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5))) begin
        if (((ap_phi_mux_output_signal_phi_fu_195_p4 == 1'd1) & (targetBlock_reg_517 == 1'd1))) begin
            tmp_data_1348_reg_203 <= tmp_data_reg_480;
        end else if ((targetBlock_reg_517 == 1'd0)) begin
            tmp_data_1348_reg_203 <= x_TDATA_int_regslice;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5))) begin
        if (((ap_phi_mux_output_signal_phi_fu_195_p4 == 1'd1) & (targetBlock_reg_517 == 1'd1))) begin
            tmp_dest_1340_reg_267 <= tmp_dest_reg_512;
        end else if ((targetBlock_reg_517 == 1'd0)) begin
            tmp_dest_1340_reg_267 <= x_TDEST_int_regslice;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5))) begin
        if (((ap_phi_mux_output_signal_phi_fu_195_p4 == 1'd1) & (targetBlock_reg_517 == 1'd1))) begin
            tmp_id_1341_reg_256 <= tmp_id_reg_507;
        end else if ((targetBlock_reg_517 == 1'd0)) begin
            tmp_id_1341_reg_256 <= x_TID_int_regslice;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5))) begin
        if (((ap_phi_mux_output_signal_phi_fu_195_p4 == 1'd1) & (targetBlock_reg_517 == 1'd1))) begin
            tmp_keep_1346_reg_212 <= tmp_keep_reg_487;
        end else if ((targetBlock_reg_517 == 1'd0)) begin
            tmp_keep_1346_reg_212 <= x_TKEEP_int_regslice;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5))) begin
        if (((ap_phi_mux_output_signal_phi_fu_195_p4 == 1'd1) & (targetBlock_reg_517 == 1'd1))) begin
            tmp_last_1342_reg_245 <= tmp_last_reg_502;
        end else if ((targetBlock_reg_517 == 1'd0)) begin
            tmp_last_1342_reg_245 <= x_TLAST_int_regslice;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5))) begin
        if (((ap_phi_mux_output_signal_phi_fu_195_p4 == 1'd1) & (targetBlock_reg_517 == 1'd1))) begin
            tmp_strb_1345_reg_223 <= tmp_strb_reg_492;
        end else if ((targetBlock_reg_517 == 1'd0)) begin
            tmp_strb_1345_reg_223 <= x_TSTRB_int_regslice;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5))) begin
        if (((ap_phi_mux_output_signal_phi_fu_195_p4 == 1'd1) & (targetBlock_reg_517 == 1'd1))) begin
            tmp_user_1344_reg_234 <= tmp_user_reg_497;
        end else if ((targetBlock_reg_517 == 1'd0)) begin
            tmp_user_1344_reg_234 <= x_TUSER_int_regslice;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        c_read_reg_474 <= c;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        gmem_addr_reg_561 <= sext_ln50_1_fu_426_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        icmp_ln60_reg_567 <= icmp_ln60_fu_436_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        output_data_reg_573 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5)))) begin
        reg_360 <= grp_load_fu_356_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        select_ln60_reg_578 <= select_ln60_fu_442_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        targetBlock_reg_517 <= grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_data_reg_480 <= x_TDATA_int_regslice;
        tmp_dest_reg_512 <= x_TDEST_int_regslice;
        tmp_id_reg_507 <= x_TID_int_regslice;
        tmp_keep_reg_487 <= x_TKEEP_int_regslice;
        tmp_last_reg_502 <= x_TLAST_int_regslice;
        tmp_strb_reg_492 <= x_TSTRB_int_regslice;
        tmp_user_reg_497 <= x_TUSER_int_regslice;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

always @ (*) begin
    if ((y_TREADY_int_regslice == 1'b0)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state16_io) | (1'b1 == ap_block_state16))) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

assign ap_ST_fsm_state1_blk = 1'b0;

always @ (*) begin
    if ((x_TVALID_int_regslice == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state5)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & (((tmp_last_1342_reg_245 == 1'd0) & (targetBlock_reg_517 == 1'd0)) | ((tmp_last_1342_reg_245 == 1'd0) & (output_signal_reg_191 == 1'd1))))) begin
        ap_phi_mux_output_signal_1351358_phi_fu_294_p4 = 1'd1;
    end else begin
        ap_phi_mux_output_signal_1351358_phi_fu_294_p4 = output_signal_1351358_reg_289;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & (((tmp_last_1342_reg_245 == 1'd0) & (targetBlock_reg_517 == 1'd0)) | ((tmp_last_1342_reg_245 == 1'd0) & (output_signal_reg_191 == 1'd1))))) begin
        ap_phi_mux_spec_select323359_phi_fu_282_p4 = icmp_ln60_reg_567;
    end else begin
        ap_phi_mux_spec_select323359_phi_fu_282_p4 = spec_select323359_reg_278;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (targetBlock_reg_517 == 1'd0))) begin
        ap_sig_allocacmp_i_load = 32'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_114;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & (((tmp_last_1342_reg_245 == 1'd0) & (targetBlock_reg_517 == 1'd0)) | ((tmp_last_1342_reg_245 == 1'd0) & (output_signal_reg_191 == 1'd1))))) begin
        ap_sig_allocacmp_i_load_1 = select_ln60_reg_578;
    end else begin
        ap_sig_allocacmp_i_load_1 = i_fu_114;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        gmem_AWVALID = grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWVALID;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        gmem_BREADY = grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_BREADY;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        gmem_WVALID = grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_WVALID;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & ((((tmp_last_reg_502 == 1'd0) & (targetBlock_reg_517 == 1'd1) & (output_signal_reg_191 == 1'd0)) | ((tmp_last_1342_reg_245 == 1'd0) & (output_signal_reg_191 == 1'd1))) | ((tmp_last_1342_reg_245 == 1'd0) & (targetBlock_reg_517 == 1'd0))))) begin
        grp_load_fu_356_p1 = ap_sig_allocacmp_i_load_1;
    end else if (((1'b1 == ap_CS_fsm_state5) & ((ap_phi_mux_output_signal_phi_fu_195_p4 == 1'd1) | (targetBlock_reg_517 == 1'd0)))) begin
        grp_load_fu_356_p1 = ap_sig_allocacmp_i_load;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_load_fu_356_p1 = i_fu_114;
    end else begin
        grp_load_fu_356_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state5) & (targetBlock_reg_517 == 1'd0)))) begin
        x_TDATA_blk_n = x_TVALID_int_regslice;
    end else begin
        x_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((x_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5) & (targetBlock_reg_517 == 1'd0)))) begin
        x_TREADY_int_regslice = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        x_TREADY_int_regslice = grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_x_TREADY;
    end else begin
        x_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | ((1'b1 == ap_CS_fsm_state16) & ((targetBlock_reg_517 == 1'd0) | (output_signal_reg_191 == 1'd1))))) begin
        y_TDATA_blk_n = y_TREADY_int_regslice;
    end else begin
        y_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((y_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        y_TVALID_int_regslice = 1'b1;
    end else begin
        y_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((x_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((ap_phi_mux_output_signal_phi_fu_195_p4 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5) & (targetBlock_reg_517 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5) & ((ap_phi_mux_output_signal_phi_fu_195_p4 == 1'd1) | (targetBlock_reg_517 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((y_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if ((~((1'b1 == ap_block_state16_io) | (1'b1 == ap_block_state16)) & (1'b1 == ap_CS_fsm_state16) & ((((tmp_last_reg_502 == 1'd1) & (targetBlock_reg_517 == 1'd1) & (output_signal_reg_191 == 1'd0)) | ((tmp_last_1342_reg_245 == 1'd1) & (output_signal_reg_191 == 1'd1))) | ((tmp_last_1342_reg_245 == 1'd1) & (targetBlock_reg_517 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((1'b1 == ap_block_state16_io) | (1'b1 == ap_block_state16)) & (1'b1 == ap_CS_fsm_state16) & ((((tmp_last_reg_502 == 1'd0) & (targetBlock_reg_517 == 1'd1) & (output_signal_reg_191 == 1'd0)) | ((tmp_last_1342_reg_245 == 1'd0) & (output_signal_reg_191 == 1'd1))) | ((tmp_last_1342_reg_245 == 1'd0) & (targetBlock_reg_517 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln50_fu_411_p2 = ($signed(sext_ln50_fu_407_p1) + $signed(c_read_reg_474));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state16 = ((regslice_both_y_V_data_V_U_apdone_blk == 1'b1) | ((y_TREADY_int_regslice == 1'b0) & (ap_predicate_op106_write_state16 == 1'b1)));
end

always @ (*) begin
    ap_block_state16_io = ((y_TREADY_int_regslice == 1'b0) & (ap_predicate_op106_write_state16 == 1'b1));
end

always @ (*) begin
    ap_block_state5 = ((x_TVALID_int_regslice == 1'b0) & (targetBlock_reg_517 == 1'd0));
end

assign ap_phi_mux_output_signal_phi_fu_195_p4 = output_signal_reg_191;

always @ (*) begin
    ap_predicate_op106_write_state16 = ((targetBlock_reg_517 == 1'd0) | (output_signal_reg_191 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_start = grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_start_reg;

assign grp_fu_365_p2 = ($signed(reg_360) + $signed(32'd4294967295));

assign i_3_fu_386_p3 = ((read_coefs_2_fu_381_p2[0:0] == 1'b1) ? grp_fu_365_p2 : reg_360);

assign i_4_fu_453_p2 = (grp_load_fu_356_p1 + 32'd1);

assign icmp_ln60_fu_436_p2 = ((tmp_data_1348_reg_203 == 32'd48879) ? 1'b1 : 1'b0);

assign read_coefs_2_fu_381_p2 = ((tmp_data_reg_480 == 32'd48879) ? 1'b1 : 1'b0);

assign select_ln60_fu_442_p3 = ((icmp_ln60_reg_567[0:0] == 1'b1) ? grp_fu_365_p2 : reg_360);

assign sext_ln50_1_fu_426_p1 = $signed(trunc_ln1_fu_416_p4);

assign sext_ln50_fu_407_p1 = $signed(shl_ln1_fu_399_p3);

assign shl_ln1_fu_399_p3 = {{grp_load_fu_356_p1}, {2'd0}};

assign trunc_ln1_fu_416_p4 = {{add_ln50_fu_411_p2[63:2]}};

assign x_TREADY = regslice_both_x_V_data_V_U_ack_in;

assign y_TVALID = regslice_both_y_V_data_V_U_vld_out;


reg find_kernel_block = 0;
// synthesis translate_off
`include "filt_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //filt

