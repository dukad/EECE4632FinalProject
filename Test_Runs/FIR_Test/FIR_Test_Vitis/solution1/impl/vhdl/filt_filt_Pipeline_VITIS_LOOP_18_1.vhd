-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity filt_filt_Pipeline_VITIS_LOOP_18_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_TVALID : IN STD_LOGIC;
    y_TREADY : IN STD_LOGIC;
    x_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    x_TREADY : OUT STD_LOGIC;
    x_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    x_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    x_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    x_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    x_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    x_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    gmem_addr_read_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    gmem_addr_read : IN STD_LOGIC_VECTOR (15 downto 0);
    gmem_addr_read_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    gmem_addr_read_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    gmem_addr_read_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    gmem_addr_read_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    gmem_addr_read_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    gmem_addr_read_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    gmem_addr_read_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    gmem_addr_read_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    gmem_addr_read_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    y_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    y_TVALID : OUT STD_LOGIC;
    y_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
    y_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    y_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    y_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    y_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    y_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of filt_filt_Pipeline_VITIS_LOOP_18_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_last_fu_225_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal filt_stream_short_stream_axis_0_lowfreq_shift_reg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal filt_stream_short_stream_axis_0_lowfreq_shift_reg_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal filt_stream_short_stream_axis_0_lowfreq_shift_reg_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal filt_stream_short_stream_axis_0_lowfreq_shift_reg_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal filt_stream_short_stream_axis_0_lowfreq_shift_reg_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal filt_stream_short_stream_axis_0_lowfreq_shift_reg_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal filt_stream_short_stream_axis_0_lowfreq_shift_reg_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal filt_stream_short_stream_axis_0_lowfreq_shift_reg_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal filt_stream_short_stream_axis_0_lowfreq_shift_reg_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal filt_stream_short_stream_axis_0_lowfreq_shift_reg_9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal x_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal y_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_keep_reg_470 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_keep_reg_470_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_keep_reg_470_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_keep_reg_470_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_keep_reg_470_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_strb_reg_475 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_strb_reg_475_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_strb_reg_475_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_strb_reg_475_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_strb_reg_475_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_reg_480 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_reg_480_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_reg_480_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_reg_480_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_reg_480_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_reg_485 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_reg_485_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_reg_485_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_reg_485_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_reg_485_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_reg_490 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_reg_490_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_reg_490_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_reg_490_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_reg_490_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_reg_495 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_reg_495_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_reg_495_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_reg_495_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_reg_495_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal filt_stream_short_stream_axis_0_lowfreq_shift_reg_2_load_reg_500 : STD_LOGIC_VECTOR (15 downto 0);
    signal filt_stream_short_stream_axis_0_lowfreq_shift_reg_4_load_reg_511 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln39_4_fu_253_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln39_4_reg_516 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln39_4_reg_516_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal filt_stream_short_stream_axis_0_lowfreq_shift_reg_7_load_reg_526 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln39_7_fu_271_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln39_7_reg_531 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln39_7_reg_531_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal lowfreq_accumulate_fu_333_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal lowfreq_accumulate_reg_541 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln39_1_fu_342_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln39_1_reg_551 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_371_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln42_reg_556 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln42_reg_556_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_378_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_385_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_392_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_399_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln42_2_reg_576 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln42_8_fu_357_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln42_8_fu_357_p2 : signal is "no";
    signal add_ln42_8_reg_581 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln42_8_fu_357_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_413_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln42_8_fu_357_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_406_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln42_3_fu_361_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln42_3_fu_361_p2 : signal is "no";
    signal grp_fu_371_ce : STD_LOGIC;
    signal grp_fu_378_ce : STD_LOGIC;
    signal grp_fu_385_ce : STD_LOGIC;
    signal grp_fu_392_ce : STD_LOGIC;
    signal grp_fu_399_ce : STD_LOGIC;
    signal grp_fu_406_ce : STD_LOGIC;
    signal grp_fu_413_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_loop_init : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component filt_mul_16s_16s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component filt_mac_muladd_16s_16s_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component filt_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_16s_16s_16_1_1_U1 : component filt_mul_16s_16s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => filt_stream_short_stream_axis_0_lowfreq_shift_reg_5,
        din1 => gmem_addr_read_5,
        dout => mul_ln39_4_fu_253_p2);

    mul_16s_16s_16_1_1_U2 : component filt_mul_16s_16s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => filt_stream_short_stream_axis_0_lowfreq_shift_reg_8,
        din1 => gmem_addr_read_2,
        dout => mul_ln39_7_fu_271_p2);

    mul_16s_16s_16_1_1_U3 : component filt_mul_16s_16s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => filt_stream_short_stream_axis_0_lowfreq_shift_reg,
        din1 => gmem_addr_read_10,
        dout => lowfreq_accumulate_fu_333_p2);

    mul_16s_16s_16_1_1_U4 : component filt_mul_16s_16s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => filt_stream_short_stream_axis_0_lowfreq_shift_reg_2_load_reg_500,
        din1 => gmem_addr_read_8,
        dout => mul_ln39_1_fu_342_p2);

    mac_muladd_16s_16s_16ns_16_4_1_U5 : component filt_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x_TDATA,
        din1 => gmem_addr_read,
        din2 => lowfreq_accumulate_reg_541,
        ce => grp_fu_371_ce,
        dout => grp_fu_371_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U6 : component filt_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => filt_stream_short_stream_axis_0_lowfreq_shift_reg_3,
        din1 => gmem_addr_read_7,
        din2 => mul_ln39_1_reg_551,
        ce => grp_fu_378_ce,
        dout => grp_fu_378_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U7 : component filt_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => filt_stream_short_stream_axis_0_lowfreq_shift_reg_6,
        din1 => gmem_addr_read_4,
        din2 => mul_ln39_4_reg_516_pp0_iter1_reg,
        ce => grp_fu_385_ce,
        dout => grp_fu_385_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U8 : component filt_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => filt_stream_short_stream_axis_0_lowfreq_shift_reg_9,
        din1 => gmem_addr_read_1,
        din2 => mul_ln39_7_reg_531_pp0_iter1_reg,
        ce => grp_fu_392_ce,
        dout => grp_fu_392_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U9 : component filt_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => filt_stream_short_stream_axis_0_lowfreq_shift_reg_1,
        din1 => gmem_addr_read_9,
        din2 => grp_fu_378_p3,
        ce => grp_fu_399_ce,
        dout => grp_fu_399_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U10 : component filt_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => filt_stream_short_stream_axis_0_lowfreq_shift_reg_4_load_reg_511,
        din1 => gmem_addr_read_6,
        din2 => grp_fu_385_p3,
        ce => grp_fu_406_ce,
        dout => grp_fu_406_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U11 : component filt_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => filt_stream_short_stream_axis_0_lowfreq_shift_reg_7_load_reg_526,
        din1 => gmem_addr_read_3,
        din2 => grp_fu_392_p3,
        ce => grp_fu_413_ce,
        dout => grp_fu_413_p3);

    flow_control_loop_pipe_sequential_init_U : component filt_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_0))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                add_ln42_2_reg_576 <= grp_fu_399_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln42_8_reg_581 <= add_ln42_8_fu_357_p2;
                add_ln42_reg_556_pp0_iter4_reg <= add_ln42_reg_556;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                tmp_dest_reg_495_pp0_iter2_reg <= tmp_dest_reg_495_pp0_iter1_reg;
                tmp_dest_reg_495_pp0_iter3_reg <= tmp_dest_reg_495_pp0_iter2_reg;
                tmp_dest_reg_495_pp0_iter4_reg <= tmp_dest_reg_495_pp0_iter3_reg;
                tmp_id_reg_490_pp0_iter2_reg <= tmp_id_reg_490_pp0_iter1_reg;
                tmp_id_reg_490_pp0_iter3_reg <= tmp_id_reg_490_pp0_iter2_reg;
                tmp_id_reg_490_pp0_iter4_reg <= tmp_id_reg_490_pp0_iter3_reg;
                tmp_keep_reg_470_pp0_iter2_reg <= tmp_keep_reg_470_pp0_iter1_reg;
                tmp_keep_reg_470_pp0_iter3_reg <= tmp_keep_reg_470_pp0_iter2_reg;
                tmp_keep_reg_470_pp0_iter4_reg <= tmp_keep_reg_470_pp0_iter3_reg;
                tmp_last_reg_485_pp0_iter2_reg <= tmp_last_reg_485_pp0_iter1_reg;
                tmp_last_reg_485_pp0_iter3_reg <= tmp_last_reg_485_pp0_iter2_reg;
                tmp_last_reg_485_pp0_iter4_reg <= tmp_last_reg_485_pp0_iter3_reg;
                tmp_strb_reg_475_pp0_iter2_reg <= tmp_strb_reg_475_pp0_iter1_reg;
                tmp_strb_reg_475_pp0_iter3_reg <= tmp_strb_reg_475_pp0_iter2_reg;
                tmp_strb_reg_475_pp0_iter4_reg <= tmp_strb_reg_475_pp0_iter3_reg;
                tmp_user_reg_480_pp0_iter2_reg <= tmp_user_reg_480_pp0_iter1_reg;
                tmp_user_reg_480_pp0_iter3_reg <= tmp_user_reg_480_pp0_iter2_reg;
                tmp_user_reg_480_pp0_iter4_reg <= tmp_user_reg_480_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                add_ln42_reg_556 <= grp_fu_371_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                filt_stream_short_stream_axis_0_lowfreq_shift_reg_2_load_reg_500 <= filt_stream_short_stream_axis_0_lowfreq_shift_reg_2;
                filt_stream_short_stream_axis_0_lowfreq_shift_reg_4_load_reg_511 <= filt_stream_short_stream_axis_0_lowfreq_shift_reg_4;
                filt_stream_short_stream_axis_0_lowfreq_shift_reg_7_load_reg_526 <= filt_stream_short_stream_axis_0_lowfreq_shift_reg_7;
                lowfreq_accumulate_reg_541 <= lowfreq_accumulate_fu_333_p2;
                mul_ln39_1_reg_551 <= mul_ln39_1_fu_342_p2;
                mul_ln39_4_reg_516 <= mul_ln39_4_fu_253_p2;
                mul_ln39_4_reg_516_pp0_iter1_reg <= mul_ln39_4_reg_516;
                mul_ln39_7_reg_531 <= mul_ln39_7_fu_271_p2;
                mul_ln39_7_reg_531_pp0_iter1_reg <= mul_ln39_7_reg_531;
                tmp_dest_reg_495 <= x_TDEST;
                tmp_dest_reg_495_pp0_iter1_reg <= tmp_dest_reg_495;
                tmp_id_reg_490 <= x_TID;
                tmp_id_reg_490_pp0_iter1_reg <= tmp_id_reg_490;
                tmp_keep_reg_470 <= x_TKEEP;
                tmp_keep_reg_470_pp0_iter1_reg <= tmp_keep_reg_470;
                tmp_last_reg_485 <= x_TLAST;
                tmp_last_reg_485_pp0_iter1_reg <= tmp_last_reg_485;
                tmp_strb_reg_475 <= x_TSTRB;
                tmp_strb_reg_475_pp0_iter1_reg <= tmp_strb_reg_475;
                tmp_user_reg_480 <= x_TUSER;
                tmp_user_reg_480_pp0_iter1_reg <= tmp_user_reg_480;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                filt_stream_short_stream_axis_0_lowfreq_shift_reg <= filt_stream_short_stream_axis_0_lowfreq_shift_reg_1;
                filt_stream_short_stream_axis_0_lowfreq_shift_reg_1 <= filt_stream_short_stream_axis_0_lowfreq_shift_reg_2_load_reg_500;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                filt_stream_short_stream_axis_0_lowfreq_shift_reg_2 <= filt_stream_short_stream_axis_0_lowfreq_shift_reg_3;
                filt_stream_short_stream_axis_0_lowfreq_shift_reg_3 <= filt_stream_short_stream_axis_0_lowfreq_shift_reg_4;
                filt_stream_short_stream_axis_0_lowfreq_shift_reg_4 <= filt_stream_short_stream_axis_0_lowfreq_shift_reg_5;
                filt_stream_short_stream_axis_0_lowfreq_shift_reg_5 <= filt_stream_short_stream_axis_0_lowfreq_shift_reg_6;
                filt_stream_short_stream_axis_0_lowfreq_shift_reg_6 <= filt_stream_short_stream_axis_0_lowfreq_shift_reg_7;
                filt_stream_short_stream_axis_0_lowfreq_shift_reg_7 <= filt_stream_short_stream_axis_0_lowfreq_shift_reg_8;
                filt_stream_short_stream_axis_0_lowfreq_shift_reg_8 <= filt_stream_short_stream_axis_0_lowfreq_shift_reg_9;
                filt_stream_short_stream_axis_0_lowfreq_shift_reg_9 <= x_TDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln42_3_fu_361_p2 <= std_logic_vector(signed(add_ln42_2_reg_576) + signed(add_ln42_reg_556_pp0_iter4_reg));
    add_ln42_8_fu_357_p0 <= grp_fu_413_p3;
    add_ln42_8_fu_357_p1 <= grp_fu_406_p3;
    add_ln42_8_fu_357_p2 <= std_logic_vector(signed(add_ln42_8_fu_357_p0) + signed(add_ln42_8_fu_357_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_state1_pp0_stage0_iter0, ap_block_state6_pp0_stage0_iter5, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_pp0_stage0_iter5)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_state1_pp0_stage0_iter0, y_TREADY, ap_block_state6_pp0_stage0_iter5, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and ((y_TREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state6_pp0_stage0_iter5))) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_state1_pp0_stage0_iter0, y_TREADY, ap_block_state6_pp0_stage0_iter5, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and ((y_TREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state6_pp0_stage0_iter5))) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(x_TVALID)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (x_TVALID = ap_const_logic_0);
    end process;


    ap_block_state6_pp0_stage0_iter5_assign_proc : process(y_TREADY)
    begin
                ap_block_state6_pp0_stage0_iter5 <= (y_TREADY = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, tmp_last_fu_225_p1, ap_start_int)
    begin
        if (((tmp_last_fu_225_p1 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_371_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_371_ce <= ap_const_logic_1;
        else 
            grp_fu_371_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_378_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_378_ce <= ap_const_logic_1;
        else 
            grp_fu_378_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_385_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_385_ce <= ap_const_logic_1;
        else 
            grp_fu_385_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_392_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_392_ce <= ap_const_logic_1;
        else 
            grp_fu_392_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_399_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_399_ce <= ap_const_logic_1;
        else 
            grp_fu_399_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_406_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_406_ce <= ap_const_logic_1;
        else 
            grp_fu_406_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_413_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_413_ce <= ap_const_logic_1;
        else 
            grp_fu_413_ce <= ap_const_logic_0;
        end if; 
    end process;

    tmp_last_fu_225_p1 <= x_TLAST;

    x_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, x_TVALID, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_TDATA_blk_n <= x_TVALID;
        else 
            x_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_TREADY <= ap_const_logic_1;
        else 
            x_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    y_TDATA <= std_logic_vector(unsigned(add_ln42_8_reg_581) + unsigned(add_ln42_3_fu_361_p2));

    y_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter5, y_TREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            y_TDATA_blk_n <= y_TREADY;
        else 
            y_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    y_TDEST <= tmp_dest_reg_495_pp0_iter4_reg;
    y_TID <= tmp_id_reg_490_pp0_iter4_reg;
    y_TKEEP <= tmp_keep_reg_470_pp0_iter4_reg;
    y_TLAST <= tmp_last_reg_485_pp0_iter4_reg;
    y_TSTRB <= tmp_strb_reg_475_pp0_iter4_reg;
    y_TUSER <= tmp_user_reg_480_pp0_iter4_reg;

    y_TVALID_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            y_TVALID <= ap_const_logic_1;
        else 
            y_TVALID <= ap_const_logic_0;
        end if; 
    end process;

end behav;
