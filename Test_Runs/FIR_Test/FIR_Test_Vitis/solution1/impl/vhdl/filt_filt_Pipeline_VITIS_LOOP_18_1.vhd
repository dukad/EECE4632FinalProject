-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity filt_filt_Pipeline_VITIS_LOOP_18_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_TVALID : IN STD_LOGIC;
    y_TREADY : IN STD_LOGIC;
    x_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    x_TREADY : OUT STD_LOGIC;
    x_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    x_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    x_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    x_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    x_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    x_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    gmem_addr_read : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_10 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_9 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_8 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_TVALID : OUT STD_LOGIC;
    y_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    y_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    y_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    y_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    y_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    y_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of filt_filt_Pipeline_VITIS_LOOP_18_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp1_last_fu_272_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal filt_stream_int_stream_axis_0_shift_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal filt_stream_int_stream_axis_0_shift_reg_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal filt_stream_int_stream_axis_0_shift_reg_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal filt_stream_int_stream_axis_0_shift_reg_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal filt_stream_int_stream_axis_0_shift_reg_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal filt_stream_int_stream_axis_0_shift_reg_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal filt_stream_int_stream_axis_0_shift_reg_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal filt_stream_int_stream_axis_0_shift_reg_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal filt_stream_int_stream_axis_0_shift_reg_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal filt_stream_int_stream_axis_0_shift_reg_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal x_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal y_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp1_data_reg_493 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_keep_reg_498 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_keep_reg_498_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_keep_reg_498_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_keep_reg_498_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_strb_reg_503 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_strb_reg_503_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_strb_reg_503_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_strb_reg_503_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_user_reg_508 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_user_reg_508_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_user_reg_508_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_user_reg_508_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_last_reg_513 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_last_reg_513_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_last_reg_513_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_last_reg_513_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_id_reg_518 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_id_reg_518_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_id_reg_518_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_id_reg_518_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_dest_reg_523 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_dest_reg_523_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_dest_reg_523_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_dest_reg_523_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal filt_stream_int_stream_axis_0_shift_reg_6_load_reg_528 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_209_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln34_1_reg_579 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_214_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln34_2_reg_584 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln34_10_reg_589 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_224_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln34_reg_594 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_228_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln34_3_reg_599 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_232_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln34_4_reg_604 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_236_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln34_5_reg_609 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_240_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln34_6_reg_614 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_244_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln34_7_reg_619 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_248_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln34_8_reg_624 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_252_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln34_9_reg_629 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln34_7_fu_396_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln34_7_reg_634 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln34_fu_401_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln34_reg_639 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln34_2_fu_409_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln34_2_reg_644 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln34_8_fu_423_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln34_8_reg_649 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln34_6_fu_392_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln34_1_fu_405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln34_4_fu_414_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln34_5_fu_418_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln34_3_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_209_ce : STD_LOGIC;
    signal grp_fu_214_ce : STD_LOGIC;
    signal grp_fu_219_ce : STD_LOGIC;
    signal grp_fu_224_ce : STD_LOGIC;
    signal grp_fu_228_ce : STD_LOGIC;
    signal grp_fu_232_ce : STD_LOGIC;
    signal grp_fu_236_ce : STD_LOGIC;
    signal grp_fu_240_ce : STD_LOGIC;
    signal grp_fu_244_ce : STD_LOGIC;
    signal grp_fu_248_ce : STD_LOGIC;
    signal grp_fu_252_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_loop_init : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component filt_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component filt_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_32_2_1_U1 : component filt_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => filt_stream_int_stream_axis_0_shift_reg_7,
        din1 => gmem_addr_read_3,
        ce => grp_fu_209_ce,
        dout => grp_fu_209_p2);

    mul_32s_32s_32_2_1_U2 : component filt_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => filt_stream_int_stream_axis_0_shift_reg_9,
        din1 => gmem_addr_read_1,
        ce => grp_fu_214_ce,
        dout => grp_fu_214_p2);

    mul_32s_32s_32_2_1_U3 : component filt_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => filt_stream_int_stream_axis_0_shift_reg_8,
        din1 => gmem_addr_read_2,
        ce => grp_fu_219_ce,
        dout => grp_fu_219_p2);

    mul_32s_32s_32_2_1_U4 : component filt_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp1_data_reg_493,
        din1 => gmem_addr_read,
        ce => grp_fu_224_ce,
        dout => grp_fu_224_p2);

    mul_32s_32s_32_2_1_U5 : component filt_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => filt_stream_int_stream_axis_0_shift_reg,
        din1 => gmem_addr_read_10,
        ce => grp_fu_228_ce,
        dout => grp_fu_228_p2);

    mul_32s_32s_32_2_1_U6 : component filt_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => filt_stream_int_stream_axis_0_shift_reg_6_load_reg_528,
        din1 => gmem_addr_read_4,
        ce => grp_fu_232_ce,
        dout => grp_fu_232_p2);

    mul_32s_32s_32_2_1_U7 : component filt_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => filt_stream_int_stream_axis_0_shift_reg_3,
        din1 => gmem_addr_read_7,
        ce => grp_fu_236_ce,
        dout => grp_fu_236_p2);

    mul_32s_32s_32_2_1_U8 : component filt_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => filt_stream_int_stream_axis_0_shift_reg_4,
        din1 => gmem_addr_read_6,
        ce => grp_fu_240_ce,
        dout => grp_fu_240_p2);

    mul_32s_32s_32_2_1_U9 : component filt_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => filt_stream_int_stream_axis_0_shift_reg_5,
        din1 => gmem_addr_read_5,
        ce => grp_fu_244_ce,
        dout => grp_fu_244_p2);

    mul_32s_32s_32_2_1_U10 : component filt_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => filt_stream_int_stream_axis_0_shift_reg_1,
        din1 => gmem_addr_read_9,
        ce => grp_fu_248_ce,
        dout => grp_fu_248_p2);

    mul_32s_32s_32_2_1_U11 : component filt_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => filt_stream_int_stream_axis_0_shift_reg_2,
        din1 => gmem_addr_read_8,
        ce => grp_fu_252_ce,
        dout => grp_fu_252_p2);

    flow_control_loop_pipe_sequential_init_U : component filt_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_0))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln34_2_reg_644 <= add_ln34_2_fu_409_p2;
                add_ln34_7_reg_634 <= add_ln34_7_fu_396_p2;
                add_ln34_8_reg_649 <= add_ln34_8_fu_423_p2;
                add_ln34_reg_639 <= add_ln34_fu_401_p2;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                mul_ln34_3_reg_599 <= grp_fu_228_p2;
                mul_ln34_4_reg_604 <= grp_fu_232_p2;
                mul_ln34_5_reg_609 <= grp_fu_236_p2;
                mul_ln34_6_reg_614 <= grp_fu_240_p2;
                mul_ln34_7_reg_619 <= grp_fu_244_p2;
                mul_ln34_8_reg_624 <= grp_fu_248_p2;
                mul_ln34_9_reg_629 <= grp_fu_252_p2;
                mul_ln34_reg_594 <= grp_fu_224_p2;
                tmp1_dest_reg_523_pp0_iter2_reg <= tmp1_dest_reg_523_pp0_iter1_reg;
                tmp1_dest_reg_523_pp0_iter3_reg <= tmp1_dest_reg_523_pp0_iter2_reg;
                tmp1_id_reg_518_pp0_iter2_reg <= tmp1_id_reg_518_pp0_iter1_reg;
                tmp1_id_reg_518_pp0_iter3_reg <= tmp1_id_reg_518_pp0_iter2_reg;
                tmp1_keep_reg_498_pp0_iter2_reg <= tmp1_keep_reg_498_pp0_iter1_reg;
                tmp1_keep_reg_498_pp0_iter3_reg <= tmp1_keep_reg_498_pp0_iter2_reg;
                tmp1_last_reg_513_pp0_iter2_reg <= tmp1_last_reg_513_pp0_iter1_reg;
                tmp1_last_reg_513_pp0_iter3_reg <= tmp1_last_reg_513_pp0_iter2_reg;
                tmp1_strb_reg_503_pp0_iter2_reg <= tmp1_strb_reg_503_pp0_iter1_reg;
                tmp1_strb_reg_503_pp0_iter3_reg <= tmp1_strb_reg_503_pp0_iter2_reg;
                tmp1_user_reg_508_pp0_iter2_reg <= tmp1_user_reg_508_pp0_iter1_reg;
                tmp1_user_reg_508_pp0_iter3_reg <= tmp1_user_reg_508_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                filt_stream_int_stream_axis_0_shift_reg_6_load_reg_528 <= filt_stream_int_stream_axis_0_shift_reg_6;
                mul_ln34_10_reg_589 <= grp_fu_219_p2;
                mul_ln34_1_reg_579 <= grp_fu_209_p2;
                mul_ln34_2_reg_584 <= grp_fu_214_p2;
                tmp1_data_reg_493 <= x_TDATA;
                tmp1_dest_reg_523 <= x_TDEST;
                tmp1_dest_reg_523_pp0_iter1_reg <= tmp1_dest_reg_523;
                tmp1_id_reg_518 <= x_TID;
                tmp1_id_reg_518_pp0_iter1_reg <= tmp1_id_reg_518;
                tmp1_keep_reg_498 <= x_TKEEP;
                tmp1_keep_reg_498_pp0_iter1_reg <= tmp1_keep_reg_498;
                tmp1_last_reg_513 <= x_TLAST;
                tmp1_last_reg_513_pp0_iter1_reg <= tmp1_last_reg_513;
                tmp1_strb_reg_503 <= x_TSTRB;
                tmp1_strb_reg_503_pp0_iter1_reg <= tmp1_strb_reg_503;
                tmp1_user_reg_508 <= x_TUSER;
                tmp1_user_reg_508_pp0_iter1_reg <= tmp1_user_reg_508;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                filt_stream_int_stream_axis_0_shift_reg <= filt_stream_int_stream_axis_0_shift_reg_1;
                filt_stream_int_stream_axis_0_shift_reg_1 <= filt_stream_int_stream_axis_0_shift_reg_2;
                filt_stream_int_stream_axis_0_shift_reg_2 <= filt_stream_int_stream_axis_0_shift_reg_3;
                filt_stream_int_stream_axis_0_shift_reg_3 <= filt_stream_int_stream_axis_0_shift_reg_4;
                filt_stream_int_stream_axis_0_shift_reg_4 <= filt_stream_int_stream_axis_0_shift_reg_5;
                filt_stream_int_stream_axis_0_shift_reg_5 <= filt_stream_int_stream_axis_0_shift_reg_6_load_reg_528;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                filt_stream_int_stream_axis_0_shift_reg_6 <= filt_stream_int_stream_axis_0_shift_reg_7;
                filt_stream_int_stream_axis_0_shift_reg_7 <= filt_stream_int_stream_axis_0_shift_reg_8;
                filt_stream_int_stream_axis_0_shift_reg_8 <= filt_stream_int_stream_axis_0_shift_reg_9;
                filt_stream_int_stream_axis_0_shift_reg_9 <= x_TDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln34_1_fu_405_p2 <= std_logic_vector(unsigned(mul_ln34_9_reg_629) + unsigned(mul_ln34_5_reg_609));
    add_ln34_2_fu_409_p2 <= std_logic_vector(unsigned(add_ln34_1_fu_405_p2) + unsigned(mul_ln34_8_reg_624));
    add_ln34_3_fu_428_p2 <= std_logic_vector(unsigned(add_ln34_2_reg_644) + unsigned(add_ln34_reg_639));
    add_ln34_4_fu_414_p2 <= std_logic_vector(unsigned(mul_ln34_7_reg_619) + unsigned(mul_ln34_4_reg_604));
    add_ln34_5_fu_418_p2 <= std_logic_vector(unsigned(add_ln34_4_fu_414_p2) + unsigned(mul_ln34_6_reg_614));
    add_ln34_6_fu_392_p2 <= std_logic_vector(unsigned(mul_ln34_10_reg_589) + unsigned(mul_ln34_2_reg_584));
    add_ln34_7_fu_396_p2 <= std_logic_vector(unsigned(add_ln34_6_fu_392_p2) + unsigned(mul_ln34_1_reg_579));
    add_ln34_8_fu_423_p2 <= std_logic_vector(unsigned(add_ln34_7_reg_634) + unsigned(add_ln34_5_fu_418_p2));
    add_ln34_fu_401_p2 <= std_logic_vector(unsigned(mul_ln34_3_reg_599) + unsigned(mul_ln34_reg_594));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_state1_pp0_stage0_iter0, ap_block_state5_pp0_stage0_iter4, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_state1_pp0_stage0_iter0, y_TREADY, ap_block_state5_pp0_stage0_iter4, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and ((y_TREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4))) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_state1_pp0_stage0_iter0, y_TREADY, ap_block_state5_pp0_stage0_iter4, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and ((y_TREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4))) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(x_TVALID)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (x_TVALID = ap_const_logic_0);
    end process;


    ap_block_state5_pp0_stage0_iter4_assign_proc : process(y_TREADY)
    begin
                ap_block_state5_pp0_stage0_iter4 <= (y_TREADY = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, tmp1_last_fu_272_p1, ap_start_int)
    begin
        if (((tmp1_last_fu_272_p1 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_209_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_209_ce <= ap_const_logic_1;
        else 
            grp_fu_209_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_214_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_214_ce <= ap_const_logic_1;
        else 
            grp_fu_214_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_219_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_219_ce <= ap_const_logic_1;
        else 
            grp_fu_219_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_224_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_224_ce <= ap_const_logic_1;
        else 
            grp_fu_224_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_228_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_228_ce <= ap_const_logic_1;
        else 
            grp_fu_228_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_232_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_232_ce <= ap_const_logic_1;
        else 
            grp_fu_232_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_236_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_236_ce <= ap_const_logic_1;
        else 
            grp_fu_236_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_240_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_240_ce <= ap_const_logic_1;
        else 
            grp_fu_240_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_244_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_244_ce <= ap_const_logic_1;
        else 
            grp_fu_244_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_248_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_248_ce <= ap_const_logic_1;
        else 
            grp_fu_248_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_252_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_252_ce <= ap_const_logic_1;
        else 
            grp_fu_252_ce <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_last_fu_272_p1 <= x_TLAST;

    x_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, x_TVALID, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_TDATA_blk_n <= x_TVALID;
        else 
            x_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_TREADY <= ap_const_logic_1;
        else 
            x_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    y_TDATA <= std_logic_vector(unsigned(add_ln34_8_reg_649) + unsigned(add_ln34_3_fu_428_p2));

    y_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, y_TREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            y_TDATA_blk_n <= y_TREADY;
        else 
            y_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    y_TDEST <= tmp1_dest_reg_523_pp0_iter3_reg;
    y_TID <= tmp1_id_reg_518_pp0_iter3_reg;
    y_TKEEP <= tmp1_keep_reg_498_pp0_iter3_reg;
    y_TLAST <= tmp1_last_reg_513_pp0_iter3_reg;
    y_TSTRB <= tmp1_strb_reg_503_pp0_iter3_reg;
    y_TUSER <= tmp1_user_reg_508_pp0_iter3_reg;

    y_TVALID_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            y_TVALID <= ap_const_logic_1;
        else 
            y_TVALID <= ap_const_logic_0;
        end if; 
    end process;

end behav;
