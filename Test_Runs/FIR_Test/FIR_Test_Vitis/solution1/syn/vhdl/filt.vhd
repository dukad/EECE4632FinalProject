-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity filt is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    y_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_TVALID : OUT STD_LOGIC;
    y_TREADY : IN STD_LOGIC;
    y_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    y_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    y_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    y_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    y_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    y_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    x_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    x_TVALID : IN STD_LOGIC;
    x_TREADY : OUT STD_LOGIC;
    x_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    x_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    x_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    x_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    x_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    x_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of filt is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "filt_filt,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1637,HLS_SYN_LUT=1874,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant C_M_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_BEEF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001011111011101111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal c : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal y_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal output_signal_reg_191 : STD_LOGIC_VECTOR (0 downto 0);
    signal targetBlock_reg_517 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_load_fu_356_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_360 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state5 : BOOLEAN;
    signal c_read_reg_474 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_data_reg_480 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_keep_reg_487 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_strb_reg_492 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_user_reg_497 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_reg_502 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_reg_507 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_reg_512 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal read_coefs_2_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_reg_561 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln60_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_567 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_reg_573 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln60_fu_442_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln60_reg_578 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_start : STD_LOGIC;
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_done : STD_LOGIC;
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_idle : STD_LOGIC;
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_ready : STD_LOGIC;
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_x_TREADY : STD_LOGIC;
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal read_coefs_reg_179 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_spec_select323359_phi_fu_282_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op106_write_state16 : BOOLEAN;
    signal regslice_both_y_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state16 : BOOLEAN;
    signal ap_block_state16_io : BOOLEAN;
    signal tmp_last_1342_reg_245 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_output_signal_phi_fu_195_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_output_signal_1351358_phi_fu_294_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_1348_reg_203 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_keep_1346_reg_212 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_strb_1345_reg_223 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_user_1344_reg_234 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_1341_reg_256 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_1340_reg_267 : STD_LOGIC_VECTOR (0 downto 0);
    signal spec_select323359_reg_278 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_signal_1351358_reg_289 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_start_reg : STD_LOGIC := '0';
    signal sext_ln50_1_fu_426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_114 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal i_4_fu_453_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_fu_386_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_i_load_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_365_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1_fu_399_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln50_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln50_fu_411_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_416_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal y_TVALID_int_regslice : STD_LOGIC;
    signal y_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_y_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_y_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_y_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_y_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_y_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_y_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_y_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_y_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_y_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_y_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_y_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_y_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_y_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_y_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_y_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_y_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_y_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_y_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_y_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_x_V_data_V_U_apdone_blk : STD_LOGIC;
    signal x_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal x_TVALID_int_regslice : STD_LOGIC;
    signal x_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_x_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_x_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal x_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_x_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_x_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_x_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal x_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_x_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_x_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_x_V_user_V_U_apdone_blk : STD_LOGIC;
    signal x_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_x_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_x_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_x_V_last_V_U_apdone_blk : STD_LOGIC;
    signal x_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_x_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_x_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_x_V_id_V_U_apdone_blk : STD_LOGIC;
    signal x_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_x_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_x_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_x_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal x_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_x_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_x_V_dest_V_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component filt_filt_Pipeline_VITIS_LOOP_30_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_TVALID : IN STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln30 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_data : IN STD_LOGIC_VECTOR (31 downto 0);
        read_coefs : IN STD_LOGIC_VECTOR (0 downto 0);
        c : IN STD_LOGIC_VECTOR (63 downto 0);
        x_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        x_TREADY : OUT STD_LOGIC;
        x_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        x_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        x_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        x_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        x_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        x_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component filt_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        c : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component filt_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component filt_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303 : component filt_filt_Pipeline_VITIS_LOOP_30_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_start,
        ap_done => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_done,
        ap_idle => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_idle,
        ap_ready => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_ready,
        x_TVALID => x_TVALID_int_regslice,
        m_axi_gmem_AWVALID => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => gmem_AWREADY,
        m_axi_gmem_AWADDR => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => gmem_WREADY,
        m_axi_gmem_WDATA => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => ap_const_logic_0,
        m_axi_gmem_ARADDR => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => ap_const_logic_0,
        m_axi_gmem_RREADY => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => ap_const_lv32_0,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => ap_const_lv9_0,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => gmem_BVALID,
        m_axi_gmem_BREADY => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        sext_ln30 => reg_360,
        tmp_data => tmp_data_reg_480,
        read_coefs => read_coefs_reg_179,
        c => c_read_reg_474,
        x_TDATA => x_TDATA_int_regslice,
        x_TREADY => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_x_TREADY,
        x_TKEEP => x_TKEEP_int_regslice,
        x_TSTRB => x_TSTRB_int_regslice,
        x_TUSER => x_TUSER_int_regslice,
        x_TLAST => x_TLAST_int_regslice,
        x_TID => x_TID_int_regslice,
        x_TDEST => x_TDEST_int_regslice,
        ap_return => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_return);

    control_s_axi_U : component filt_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        c => c);

    gmem_m_axi_U : component filt_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_addr_reg_561,
        I_ARLEN => ap_const_lv32_1,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWADDR,
        I_AWLEN => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWLEN,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_WDATA,
        I_WSTRB => grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY);

    regslice_both_y_V_data_V_U : component filt_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_data_reg_573,
        vld_in => y_TVALID_int_regslice,
        ack_in => y_TREADY_int_regslice,
        data_out => y_TDATA,
        vld_out => regslice_both_y_V_data_V_U_vld_out,
        ack_out => y_TREADY,
        apdone_blk => regslice_both_y_V_data_V_U_apdone_blk);

    regslice_both_y_V_keep_V_U : component filt_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_keep_1346_reg_212,
        vld_in => y_TVALID_int_regslice,
        ack_in => regslice_both_y_V_keep_V_U_ack_in_dummy,
        data_out => y_TKEEP,
        vld_out => regslice_both_y_V_keep_V_U_vld_out,
        ack_out => y_TREADY,
        apdone_blk => regslice_both_y_V_keep_V_U_apdone_blk);

    regslice_both_y_V_strb_V_U : component filt_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_strb_1345_reg_223,
        vld_in => y_TVALID_int_regslice,
        ack_in => regslice_both_y_V_strb_V_U_ack_in_dummy,
        data_out => y_TSTRB,
        vld_out => regslice_both_y_V_strb_V_U_vld_out,
        ack_out => y_TREADY,
        apdone_blk => regslice_both_y_V_strb_V_U_apdone_blk);

    regslice_both_y_V_user_V_U : component filt_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_user_1344_reg_234,
        vld_in => y_TVALID_int_regslice,
        ack_in => regslice_both_y_V_user_V_U_ack_in_dummy,
        data_out => y_TUSER,
        vld_out => regslice_both_y_V_user_V_U_vld_out,
        ack_out => y_TREADY,
        apdone_blk => regslice_both_y_V_user_V_U_apdone_blk);

    regslice_both_y_V_last_V_U : component filt_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_last_1342_reg_245,
        vld_in => y_TVALID_int_regslice,
        ack_in => regslice_both_y_V_last_V_U_ack_in_dummy,
        data_out => y_TLAST,
        vld_out => regslice_both_y_V_last_V_U_vld_out,
        ack_out => y_TREADY,
        apdone_blk => regslice_both_y_V_last_V_U_apdone_blk);

    regslice_both_y_V_id_V_U : component filt_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_id_1341_reg_256,
        vld_in => y_TVALID_int_regslice,
        ack_in => regslice_both_y_V_id_V_U_ack_in_dummy,
        data_out => y_TID,
        vld_out => regslice_both_y_V_id_V_U_vld_out,
        ack_out => y_TREADY,
        apdone_blk => regslice_both_y_V_id_V_U_apdone_blk);

    regslice_both_y_V_dest_V_U : component filt_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_dest_1340_reg_267,
        vld_in => y_TVALID_int_regslice,
        ack_in => regslice_both_y_V_dest_V_U_ack_in_dummy,
        data_out => y_TDEST,
        vld_out => regslice_both_y_V_dest_V_U_vld_out,
        ack_out => y_TREADY,
        apdone_blk => regslice_both_y_V_dest_V_U_apdone_blk);

    regslice_both_x_V_data_V_U : component filt_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => x_TDATA,
        vld_in => x_TVALID,
        ack_in => regslice_both_x_V_data_V_U_ack_in,
        data_out => x_TDATA_int_regslice,
        vld_out => x_TVALID_int_regslice,
        ack_out => x_TREADY_int_regslice,
        apdone_blk => regslice_both_x_V_data_V_U_apdone_blk);

    regslice_both_x_V_keep_V_U : component filt_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => x_TKEEP,
        vld_in => x_TVALID,
        ack_in => regslice_both_x_V_keep_V_U_ack_in,
        data_out => x_TKEEP_int_regslice,
        vld_out => regslice_both_x_V_keep_V_U_vld_out,
        ack_out => x_TREADY_int_regslice,
        apdone_blk => regslice_both_x_V_keep_V_U_apdone_blk);

    regslice_both_x_V_strb_V_U : component filt_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => x_TSTRB,
        vld_in => x_TVALID,
        ack_in => regslice_both_x_V_strb_V_U_ack_in,
        data_out => x_TSTRB_int_regslice,
        vld_out => regslice_both_x_V_strb_V_U_vld_out,
        ack_out => x_TREADY_int_regslice,
        apdone_blk => regslice_both_x_V_strb_V_U_apdone_blk);

    regslice_both_x_V_user_V_U : component filt_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => x_TUSER,
        vld_in => x_TVALID,
        ack_in => regslice_both_x_V_user_V_U_ack_in,
        data_out => x_TUSER_int_regslice,
        vld_out => regslice_both_x_V_user_V_U_vld_out,
        ack_out => x_TREADY_int_regslice,
        apdone_blk => regslice_both_x_V_user_V_U_apdone_blk);

    regslice_both_x_V_last_V_U : component filt_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => x_TLAST,
        vld_in => x_TVALID,
        ack_in => regslice_both_x_V_last_V_U_ack_in,
        data_out => x_TLAST_int_regslice,
        vld_out => regslice_both_x_V_last_V_U_vld_out,
        ack_out => x_TREADY_int_regslice,
        apdone_blk => regslice_both_x_V_last_V_U_apdone_blk);

    regslice_both_x_V_id_V_U : component filt_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => x_TID,
        vld_in => x_TVALID,
        ack_in => regslice_both_x_V_id_V_U_ack_in,
        data_out => x_TID_int_regslice,
        vld_out => regslice_both_x_V_id_V_U_vld_out,
        ack_out => x_TREADY_int_regslice,
        apdone_blk => regslice_both_x_V_id_V_U_apdone_blk);

    regslice_both_x_V_dest_V_U : component filt_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => x_TDEST,
        vld_in => x_TVALID,
        ack_in => regslice_both_x_V_dest_V_U_ack_in,
        data_out => x_TDEST_int_regslice,
        vld_out => regslice_both_x_V_dest_V_U_vld_out,
        ack_out => x_TREADY_int_regslice,
        apdone_blk => regslice_both_x_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_ready = ap_const_logic_1)) then 
                    grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_output_signal_phi_fu_195_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_last_reg_502 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state5) and (targetBlock_reg_517 = ap_const_lv1_1))) then 
                i_fu_114 <= i_3_fu_386_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5) and (targetBlock_reg_517 = ap_const_lv1_0)))) then 
                i_fu_114 <= ap_const_lv32_0;
            elsif ((not(((ap_const_boolean_1 = ap_block_state16_io) or (ap_const_boolean_1 = ap_block_state16))) and (ap_const_logic_1 = ap_CS_fsm_state16) and ((((tmp_last_reg_502 = ap_const_lv1_0) and (targetBlock_reg_517 = ap_const_lv1_1) and (output_signal_reg_191 = ap_const_lv1_0)) or ((tmp_last_1342_reg_245 = ap_const_lv1_0) and (output_signal_reg_191 = ap_const_lv1_1))) or ((tmp_last_1342_reg_245 = ap_const_lv1_0) and (targetBlock_reg_517 = ap_const_lv1_0))))) then 
                i_fu_114 <= i_4_fu_453_p2;
            elsif ((not(((ap_const_boolean_1 = ap_block_state16_io) or (ap_const_boolean_1 = ap_block_state16))) and (ap_const_logic_1 = ap_CS_fsm_state16) and (((tmp_last_1342_reg_245 = ap_const_lv1_0) and (targetBlock_reg_517 = ap_const_lv1_0)) or ((tmp_last_1342_reg_245 = ap_const_lv1_0) and (output_signal_reg_191 = ap_const_lv1_1))))) then 
                i_fu_114 <= select_ln60_reg_578;
            end if; 
        end if;
    end process;

    output_signal_1351358_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_output_signal_phi_fu_195_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_last_reg_502 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state5) and (targetBlock_reg_517 = ap_const_lv1_1))) then 
                output_signal_1351358_reg_289 <= ap_const_lv1_0;
            elsif ((not(((ap_const_boolean_1 = ap_block_state16_io) or (ap_const_boolean_1 = ap_block_state16))) and (ap_const_logic_1 = ap_CS_fsm_state16) and (((tmp_last_1342_reg_245 = ap_const_lv1_0) and (targetBlock_reg_517 = ap_const_lv1_0)) or ((tmp_last_1342_reg_245 = ap_const_lv1_0) and (output_signal_reg_191 = ap_const_lv1_1))))) then 
                output_signal_1351358_reg_289 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    output_signal_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state16_io) or (ap_const_boolean_1 = ap_block_state16))) and (ap_const_logic_1 = ap_CS_fsm_state16) and ((((tmp_last_reg_502 = ap_const_lv1_0) and (targetBlock_reg_517 = ap_const_lv1_1) and (output_signal_reg_191 = ap_const_lv1_0)) or ((tmp_last_1342_reg_245 = ap_const_lv1_0) and (output_signal_reg_191 = ap_const_lv1_1))) or ((tmp_last_1342_reg_245 = ap_const_lv1_0) and (targetBlock_reg_517 = ap_const_lv1_0))))) then 
                output_signal_reg_191 <= ap_phi_mux_output_signal_1351358_phi_fu_294_p4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                output_signal_reg_191 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    read_coefs_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state16_io) or (ap_const_boolean_1 = ap_block_state16))) and (ap_const_logic_1 = ap_CS_fsm_state16) and ((((tmp_last_reg_502 = ap_const_lv1_0) and (targetBlock_reg_517 = ap_const_lv1_1) and (output_signal_reg_191 = ap_const_lv1_0)) or ((tmp_last_1342_reg_245 = ap_const_lv1_0) and (output_signal_reg_191 = ap_const_lv1_1))) or ((tmp_last_1342_reg_245 = ap_const_lv1_0) and (targetBlock_reg_517 = ap_const_lv1_0))))) then 
                read_coefs_reg_179 <= ap_phi_mux_spec_select323359_phi_fu_282_p4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                read_coefs_reg_179 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    spec_select323359_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_output_signal_phi_fu_195_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_last_reg_502 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state5) and (targetBlock_reg_517 = ap_const_lv1_1))) then 
                spec_select323359_reg_278 <= read_coefs_2_fu_381_p2;
            elsif ((not(((ap_const_boolean_1 = ap_block_state16_io) or (ap_const_boolean_1 = ap_block_state16))) and (ap_const_logic_1 = ap_CS_fsm_state16) and (((tmp_last_1342_reg_245 = ap_const_lv1_0) and (targetBlock_reg_517 = ap_const_lv1_0)) or ((tmp_last_1342_reg_245 = ap_const_lv1_0) and (output_signal_reg_191 = ap_const_lv1_1))))) then 
                spec_select323359_reg_278 <= icmp_ln60_reg_567;
            end if; 
        end if;
    end process;

    tmp_data_1348_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5))) then
                if (((ap_phi_mux_output_signal_phi_fu_195_p4 = ap_const_lv1_1) and (targetBlock_reg_517 = ap_const_lv1_1))) then 
                    tmp_data_1348_reg_203 <= tmp_data_reg_480;
                elsif ((targetBlock_reg_517 = ap_const_lv1_0)) then 
                    tmp_data_1348_reg_203 <= x_TDATA_int_regslice;
                end if;
            end if; 
        end if;
    end process;

    tmp_dest_1340_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5))) then
                if (((ap_phi_mux_output_signal_phi_fu_195_p4 = ap_const_lv1_1) and (targetBlock_reg_517 = ap_const_lv1_1))) then 
                    tmp_dest_1340_reg_267 <= tmp_dest_reg_512;
                elsif ((targetBlock_reg_517 = ap_const_lv1_0)) then 
                    tmp_dest_1340_reg_267 <= x_TDEST_int_regslice;
                end if;
            end if; 
        end if;
    end process;

    tmp_id_1341_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5))) then
                if (((ap_phi_mux_output_signal_phi_fu_195_p4 = ap_const_lv1_1) and (targetBlock_reg_517 = ap_const_lv1_1))) then 
                    tmp_id_1341_reg_256 <= tmp_id_reg_507;
                elsif ((targetBlock_reg_517 = ap_const_lv1_0)) then 
                    tmp_id_1341_reg_256 <= x_TID_int_regslice;
                end if;
            end if; 
        end if;
    end process;

    tmp_keep_1346_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5))) then
                if (((ap_phi_mux_output_signal_phi_fu_195_p4 = ap_const_lv1_1) and (targetBlock_reg_517 = ap_const_lv1_1))) then 
                    tmp_keep_1346_reg_212 <= tmp_keep_reg_487;
                elsif ((targetBlock_reg_517 = ap_const_lv1_0)) then 
                    tmp_keep_1346_reg_212 <= x_TKEEP_int_regslice;
                end if;
            end if; 
        end if;
    end process;

    tmp_last_1342_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5))) then
                if (((ap_phi_mux_output_signal_phi_fu_195_p4 = ap_const_lv1_1) and (targetBlock_reg_517 = ap_const_lv1_1))) then 
                    tmp_last_1342_reg_245 <= tmp_last_reg_502;
                elsif ((targetBlock_reg_517 = ap_const_lv1_0)) then 
                    tmp_last_1342_reg_245 <= x_TLAST_int_regslice;
                end if;
            end if; 
        end if;
    end process;

    tmp_strb_1345_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5))) then
                if (((ap_phi_mux_output_signal_phi_fu_195_p4 = ap_const_lv1_1) and (targetBlock_reg_517 = ap_const_lv1_1))) then 
                    tmp_strb_1345_reg_223 <= tmp_strb_reg_492;
                elsif ((targetBlock_reg_517 = ap_const_lv1_0)) then 
                    tmp_strb_1345_reg_223 <= x_TSTRB_int_regslice;
                end if;
            end if; 
        end if;
    end process;

    tmp_user_1344_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5))) then
                if (((ap_phi_mux_output_signal_phi_fu_195_p4 = ap_const_lv1_1) and (targetBlock_reg_517 = ap_const_lv1_1))) then 
                    tmp_user_1344_reg_234 <= tmp_user_reg_497;
                elsif ((targetBlock_reg_517 = ap_const_lv1_0)) then 
                    tmp_user_1344_reg_234 <= x_TUSER_int_regslice;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                c_read_reg_474 <= c;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                gmem_addr_reg_561 <= sext_ln50_1_fu_426_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                icmp_ln60_reg_567 <= icmp_ln60_fu_436_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                output_data_reg_573 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5)))) then
                reg_360 <= grp_load_fu_356_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                select_ln60_reg_578 <= select_ln60_fu_442_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                targetBlock_reg_517 <= grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_data_reg_480 <= x_TDATA_int_regslice;
                tmp_dest_reg_512 <= x_TDEST_int_regslice;
                tmp_id_reg_507 <= x_TID_int_regslice;
                tmp_keep_reg_487 <= x_TKEEP_int_regslice;
                tmp_last_reg_502 <= x_TLAST_int_regslice;
                tmp_strb_reg_492 <= x_TSTRB_int_regslice;
                tmp_user_reg_497 <= x_TUSER_int_regslice;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state6, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, output_signal_reg_191, targetBlock_reg_517, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_block_state5, tmp_last_reg_502, ap_CS_fsm_state4, grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_done, gmem_ARREADY, gmem_RVALID, ap_block_state16, ap_block_state16_io, tmp_last_1342_reg_245, ap_phi_mux_output_signal_phi_fu_195_p4, y_TREADY_int_regslice, x_TVALID_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((x_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_phi_mux_output_signal_phi_fu_195_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5) and (targetBlock_reg_517 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5) and ((ap_phi_mux_output_signal_phi_fu_195_p4 = ap_const_lv1_1) or (targetBlock_reg_517 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((y_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if ((not(((ap_const_boolean_1 = ap_block_state16_io) or (ap_const_boolean_1 = ap_block_state16))) and (ap_const_logic_1 = ap_CS_fsm_state16) and ((((tmp_last_reg_502 = ap_const_lv1_1) and (targetBlock_reg_517 = ap_const_lv1_1) and (output_signal_reg_191 = ap_const_lv1_0)) or ((tmp_last_1342_reg_245 = ap_const_lv1_1) and (output_signal_reg_191 = ap_const_lv1_1))) or ((tmp_last_1342_reg_245 = ap_const_lv1_1) and (targetBlock_reg_517 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((ap_const_boolean_1 = ap_block_state16_io) or (ap_const_boolean_1 = ap_block_state16))) and (ap_const_logic_1 = ap_CS_fsm_state16) and ((((tmp_last_reg_502 = ap_const_lv1_0) and (targetBlock_reg_517 = ap_const_lv1_1) and (output_signal_reg_191 = ap_const_lv1_0)) or ((tmp_last_1342_reg_245 = ap_const_lv1_0) and (output_signal_reg_191 = ap_const_lv1_1))) or ((tmp_last_1342_reg_245 = ap_const_lv1_0) and (targetBlock_reg_517 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln50_fu_411_p2 <= std_logic_vector(signed(sext_ln50_fu_407_p1) + signed(c_read_reg_474));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state14_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state15_blk_assign_proc : process(y_TREADY_int_regslice)
    begin
        if ((y_TREADY_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state16_blk_assign_proc : process(ap_block_state16, ap_block_state16_io)
    begin
        if (((ap_const_boolean_1 = ap_block_state16_io) or (ap_const_boolean_1 = ap_block_state16))) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state1_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(x_TVALID_int_regslice)
    begin
        if ((x_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_done)
    begin
        if ((grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(ap_block_state5)
    begin
        if ((ap_const_boolean_1 = ap_block_state5)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state16_assign_proc : process(ap_predicate_op106_write_state16, regslice_both_y_V_data_V_U_apdone_blk, y_TREADY_int_regslice)
    begin
                ap_block_state16 <= ((regslice_both_y_V_data_V_U_apdone_blk = ap_const_logic_1) or ((y_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op106_write_state16 = ap_const_boolean_1)));
    end process;


    ap_block_state16_io_assign_proc : process(ap_predicate_op106_write_state16, y_TREADY_int_regslice)
    begin
                ap_block_state16_io <= ((y_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op106_write_state16 = ap_const_boolean_1));
    end process;


    ap_block_state5_assign_proc : process(targetBlock_reg_517, x_TVALID_int_regslice)
    begin
                ap_block_state5 <= ((x_TVALID_int_regslice = ap_const_logic_0) and (targetBlock_reg_517 = ap_const_lv1_0));
    end process;


    ap_phi_mux_output_signal_1351358_phi_fu_294_p4_assign_proc : process(ap_CS_fsm_state16, output_signal_reg_191, targetBlock_reg_517, tmp_last_1342_reg_245, output_signal_1351358_reg_289)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (((tmp_last_1342_reg_245 = ap_const_lv1_0) and (targetBlock_reg_517 = ap_const_lv1_0)) or ((tmp_last_1342_reg_245 = ap_const_lv1_0) and (output_signal_reg_191 = ap_const_lv1_1))))) then 
            ap_phi_mux_output_signal_1351358_phi_fu_294_p4 <= ap_const_lv1_1;
        else 
            ap_phi_mux_output_signal_1351358_phi_fu_294_p4 <= output_signal_1351358_reg_289;
        end if; 
    end process;

    ap_phi_mux_output_signal_phi_fu_195_p4 <= output_signal_reg_191;

    ap_phi_mux_spec_select323359_phi_fu_282_p4_assign_proc : process(ap_CS_fsm_state16, output_signal_reg_191, targetBlock_reg_517, icmp_ln60_reg_567, tmp_last_1342_reg_245, spec_select323359_reg_278)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (((tmp_last_1342_reg_245 = ap_const_lv1_0) and (targetBlock_reg_517 = ap_const_lv1_0)) or ((tmp_last_1342_reg_245 = ap_const_lv1_0) and (output_signal_reg_191 = ap_const_lv1_1))))) then 
            ap_phi_mux_spec_select323359_phi_fu_282_p4 <= icmp_ln60_reg_567;
        else 
            ap_phi_mux_spec_select323359_phi_fu_282_p4 <= spec_select323359_reg_278;
        end if; 
    end process;


    ap_predicate_op106_write_state16_assign_proc : process(output_signal_reg_191, targetBlock_reg_517)
    begin
                ap_predicate_op106_write_state16 <= ((targetBlock_reg_517 = ap_const_lv1_0) or (output_signal_reg_191 = ap_const_lv1_1));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(targetBlock_reg_517, ap_CS_fsm_state5, i_fu_114)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (targetBlock_reg_517 = ap_const_lv1_0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv32_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_114;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_1_assign_proc : process(ap_CS_fsm_state16, output_signal_reg_191, targetBlock_reg_517, select_ln60_reg_578, tmp_last_1342_reg_245, i_fu_114)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (((tmp_last_1342_reg_245 = ap_const_lv1_0) and (targetBlock_reg_517 = ap_const_lv1_0)) or ((tmp_last_1342_reg_245 = ap_const_lv1_0) and (output_signal_reg_191 = ap_const_lv1_1))))) then 
            ap_sig_allocacmp_i_load_1 <= select_ln60_reg_578;
        else 
            ap_sig_allocacmp_i_load_1 <= i_fu_114;
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state6, gmem_ARREADY)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem_AWVALID <= grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_AWVALID;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_BREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem_BREADY <= grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_BREADY;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state14, gmem_RVALID)
    begin
        if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_WVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem_WVALID <= grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_m_axi_gmem_WVALID;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_start <= grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_ap_start_reg;
    grp_fu_365_p2 <= std_logic_vector(unsigned(reg_360) + unsigned(ap_const_lv32_FFFFFFFF));

    grp_load_fu_356_p1_assign_proc : process(ap_CS_fsm_state16, output_signal_reg_191, targetBlock_reg_517, ap_CS_fsm_state5, ap_CS_fsm_state3, tmp_last_reg_502, tmp_last_1342_reg_245, ap_phi_mux_output_signal_phi_fu_195_p4, i_fu_114, ap_sig_allocacmp_i_load_1, ap_sig_allocacmp_i_load)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and ((((tmp_last_reg_502 = ap_const_lv1_0) and (targetBlock_reg_517 = ap_const_lv1_1) and (output_signal_reg_191 = ap_const_lv1_0)) or ((tmp_last_1342_reg_245 = ap_const_lv1_0) and (output_signal_reg_191 = ap_const_lv1_1))) or ((tmp_last_1342_reg_245 = ap_const_lv1_0) and (targetBlock_reg_517 = ap_const_lv1_0))))) then 
            grp_load_fu_356_p1 <= ap_sig_allocacmp_i_load_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and ((ap_phi_mux_output_signal_phi_fu_195_p4 = ap_const_lv1_1) or (targetBlock_reg_517 = ap_const_lv1_0)))) then 
            grp_load_fu_356_p1 <= ap_sig_allocacmp_i_load;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_load_fu_356_p1 <= i_fu_114;
        else 
            grp_load_fu_356_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_3_fu_386_p3 <= 
        grp_fu_365_p2 when (read_coefs_2_fu_381_p2(0) = '1') else 
        reg_360;
    i_4_fu_453_p2 <= std_logic_vector(unsigned(grp_load_fu_356_p1) + unsigned(ap_const_lv32_1));
    icmp_ln60_fu_436_p2 <= "1" when (tmp_data_1348_reg_203 = ap_const_lv32_BEEF) else "0";
    read_coefs_2_fu_381_p2 <= "1" when (tmp_data_reg_480 = ap_const_lv32_BEEF) else "0";
    select_ln60_fu_442_p3 <= 
        grp_fu_365_p2 when (icmp_ln60_reg_567(0) = '1') else 
        reg_360;
        sext_ln50_1_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_416_p4),64));

        sext_ln50_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1_fu_399_p3),64));

    shl_ln1_fu_399_p3 <= (grp_load_fu_356_p1 & ap_const_lv2_0);
    trunc_ln1_fu_416_p4 <= add_ln50_fu_411_p2(63 downto 2);

    x_TDATA_blk_n_assign_proc : process(targetBlock_reg_517, ap_CS_fsm_state2, ap_CS_fsm_state5, x_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (targetBlock_reg_517 = ap_const_lv1_0)))) then 
            x_TDATA_blk_n <= x_TVALID_int_regslice;
        else 
            x_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    x_TREADY <= regslice_both_x_V_data_V_U_ack_in;

    x_TREADY_int_regslice_assign_proc : process(targetBlock_reg_517, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_block_state5, ap_CS_fsm_state4, grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_x_TREADY, x_TVALID_int_regslice)
    begin
        if ((((x_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5) and (targetBlock_reg_517 = ap_const_lv1_0)))) then 
            x_TREADY_int_regslice <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_TREADY_int_regslice <= grp_filt_Pipeline_VITIS_LOOP_30_2_fu_303_x_TREADY;
        else 
            x_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    y_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, output_signal_reg_191, targetBlock_reg_517, y_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_const_logic_1 = ap_CS_fsm_state16) and ((targetBlock_reg_517 = ap_const_lv1_0) or (output_signal_reg_191 = ap_const_lv1_1))))) then 
            y_TDATA_blk_n <= y_TREADY_int_regslice;
        else 
            y_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    y_TVALID <= regslice_both_y_V_data_V_U_vld_out;

    y_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state15, y_TREADY_int_regslice)
    begin
        if (((y_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            y_TVALID_int_regslice <= ap_const_logic_1;
        else 
            y_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

end behav;
