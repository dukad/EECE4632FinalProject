// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module filt_filt_Pipeline_VITIS_LOOP_18_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_TVALID,
        y_TREADY,
        x_TDATA,
        x_TREADY,
        x_TKEEP,
        x_TSTRB,
        x_TUSER,
        x_TLAST,
        x_TID,
        x_TDEST,
        gmem_addr_read,
        gmem_addr_read_3,
        gmem_addr_read_1,
        gmem_addr_read_10,
        gmem_addr_read_4,
        gmem_addr_read_7,
        gmem_addr_read_6,
        gmem_addr_read_5,
        gmem_addr_read_9,
        gmem_addr_read_8,
        gmem_addr_read_2,
        y_TDATA,
        y_TVALID,
        y_TKEEP,
        y_TSTRB,
        y_TUSER,
        y_TLAST,
        y_TID,
        y_TDEST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   x_TVALID;
input   y_TREADY;
input  [31:0] x_TDATA;
output   x_TREADY;
input  [3:0] x_TKEEP;
input  [3:0] x_TSTRB;
input  [0:0] x_TUSER;
input  [0:0] x_TLAST;
input  [0:0] x_TID;
input  [0:0] x_TDEST;
input  [31:0] gmem_addr_read;
input  [31:0] gmem_addr_read_3;
input  [31:0] gmem_addr_read_1;
input  [31:0] gmem_addr_read_10;
input  [31:0] gmem_addr_read_4;
input  [31:0] gmem_addr_read_7;
input  [31:0] gmem_addr_read_6;
input  [31:0] gmem_addr_read_5;
input  [31:0] gmem_addr_read_9;
input  [31:0] gmem_addr_read_8;
input  [31:0] gmem_addr_read_2;
output  [31:0] y_TDATA;
output   y_TVALID;
output  [3:0] y_TKEEP;
output  [3:0] y_TSTRB;
output  [0:0] y_TUSER;
output  [0:0] y_TLAST;
output  [0:0] y_TID;
output  [0:0] y_TDEST;

reg ap_idle;
reg x_TREADY;
reg y_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] tmp1_last_fu_272_p1;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg  signed [31:0] filt_stream_int_stream_axis_0_shift_reg;
reg  signed [31:0] filt_stream_int_stream_axis_0_shift_reg_1;
reg  signed [31:0] filt_stream_int_stream_axis_0_shift_reg_2;
reg  signed [31:0] filt_stream_int_stream_axis_0_shift_reg_3;
reg  signed [31:0] filt_stream_int_stream_axis_0_shift_reg_4;
reg  signed [31:0] filt_stream_int_stream_axis_0_shift_reg_5;
reg   [31:0] filt_stream_int_stream_axis_0_shift_reg_6;
reg  signed [31:0] filt_stream_int_stream_axis_0_shift_reg_7;
reg  signed [31:0] filt_stream_int_stream_axis_0_shift_reg_8;
reg  signed [31:0] filt_stream_int_stream_axis_0_shift_reg_9;
reg    x_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    y_TDATA_blk_n;
reg    ap_block_pp0_stage0_11001;
reg  signed [31:0] tmp1_data_reg_493;
reg   [3:0] tmp1_keep_reg_498;
reg   [3:0] tmp1_keep_reg_498_pp0_iter1_reg;
reg   [3:0] tmp1_keep_reg_498_pp0_iter2_reg;
reg   [3:0] tmp1_keep_reg_498_pp0_iter3_reg;
reg   [3:0] tmp1_strb_reg_503;
reg   [3:0] tmp1_strb_reg_503_pp0_iter1_reg;
reg   [3:0] tmp1_strb_reg_503_pp0_iter2_reg;
reg   [3:0] tmp1_strb_reg_503_pp0_iter3_reg;
reg   [0:0] tmp1_user_reg_508;
reg   [0:0] tmp1_user_reg_508_pp0_iter1_reg;
reg   [0:0] tmp1_user_reg_508_pp0_iter2_reg;
reg   [0:0] tmp1_user_reg_508_pp0_iter3_reg;
reg   [0:0] tmp1_last_reg_513;
reg   [0:0] tmp1_last_reg_513_pp0_iter1_reg;
reg   [0:0] tmp1_last_reg_513_pp0_iter2_reg;
reg   [0:0] tmp1_last_reg_513_pp0_iter3_reg;
reg   [0:0] tmp1_id_reg_518;
reg   [0:0] tmp1_id_reg_518_pp0_iter1_reg;
reg   [0:0] tmp1_id_reg_518_pp0_iter2_reg;
reg   [0:0] tmp1_id_reg_518_pp0_iter3_reg;
reg   [0:0] tmp1_dest_reg_523;
reg   [0:0] tmp1_dest_reg_523_pp0_iter1_reg;
reg   [0:0] tmp1_dest_reg_523_pp0_iter2_reg;
reg   [0:0] tmp1_dest_reg_523_pp0_iter3_reg;
reg  signed [31:0] filt_stream_int_stream_axis_0_shift_reg_6_load_reg_528;
wire   [31:0] grp_fu_209_p2;
reg   [31:0] mul_ln34_1_reg_579;
wire   [31:0] grp_fu_214_p2;
reg   [31:0] mul_ln34_2_reg_584;
wire   [31:0] grp_fu_219_p2;
reg   [31:0] mul_ln34_10_reg_589;
wire   [31:0] grp_fu_224_p2;
reg   [31:0] mul_ln34_reg_594;
wire   [31:0] grp_fu_228_p2;
reg   [31:0] mul_ln34_3_reg_599;
wire   [31:0] grp_fu_232_p2;
reg   [31:0] mul_ln34_4_reg_604;
wire   [31:0] grp_fu_236_p2;
reg   [31:0] mul_ln34_5_reg_609;
wire   [31:0] grp_fu_240_p2;
reg   [31:0] mul_ln34_6_reg_614;
wire   [31:0] grp_fu_244_p2;
reg   [31:0] mul_ln34_7_reg_619;
wire   [31:0] grp_fu_248_p2;
reg   [31:0] mul_ln34_8_reg_624;
wire   [31:0] grp_fu_252_p2;
reg   [31:0] mul_ln34_9_reg_629;
wire   [31:0] add_ln34_7_fu_396_p2;
reg   [31:0] add_ln34_7_reg_634;
wire   [31:0] add_ln34_fu_401_p2;
reg   [31:0] add_ln34_reg_639;
wire   [31:0] add_ln34_2_fu_409_p2;
reg   [31:0] add_ln34_2_reg_644;
wire   [31:0] add_ln34_8_fu_423_p2;
reg   [31:0] add_ln34_8_reg_649;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] add_ln34_6_fu_392_p2;
wire   [31:0] add_ln34_1_fu_405_p2;
wire   [31:0] add_ln34_4_fu_414_p2;
wire   [31:0] add_ln34_5_fu_418_p2;
wire   [31:0] add_ln34_3_fu_428_p2;
reg    grp_fu_209_ce;
reg    grp_fu_214_ce;
reg    grp_fu_219_ce;
reg    grp_fu_224_ce;
reg    grp_fu_228_ce;
reg    grp_fu_232_ce;
reg    grp_fu_236_ce;
reg    grp_fu_240_ce;
reg    grp_fu_244_ce;
reg    grp_fu_248_ce;
reg    grp_fu_252_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_loop_init;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 filt_stream_int_stream_axis_0_shift_reg = 32'd0;
#0 filt_stream_int_stream_axis_0_shift_reg_1 = 32'd0;
#0 filt_stream_int_stream_axis_0_shift_reg_2 = 32'd0;
#0 filt_stream_int_stream_axis_0_shift_reg_3 = 32'd0;
#0 filt_stream_int_stream_axis_0_shift_reg_4 = 32'd0;
#0 filt_stream_int_stream_axis_0_shift_reg_5 = 32'd0;
#0 filt_stream_int_stream_axis_0_shift_reg_6 = 32'd0;
#0 filt_stream_int_stream_axis_0_shift_reg_7 = 32'd0;
#0 filt_stream_int_stream_axis_0_shift_reg_8 = 32'd0;
#0 filt_stream_int_stream_axis_0_shift_reg_9 = 32'd0;
#0 ap_done_reg = 1'b0;
end

filt_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(filt_stream_int_stream_axis_0_shift_reg_7),
    .din1(gmem_addr_read_3),
    .ce(grp_fu_209_ce),
    .dout(grp_fu_209_p2)
);

filt_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(filt_stream_int_stream_axis_0_shift_reg_9),
    .din1(gmem_addr_read_1),
    .ce(grp_fu_214_ce),
    .dout(grp_fu_214_p2)
);

filt_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(filt_stream_int_stream_axis_0_shift_reg_8),
    .din1(gmem_addr_read_2),
    .ce(grp_fu_219_ce),
    .dout(grp_fu_219_p2)
);

filt_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp1_data_reg_493),
    .din1(gmem_addr_read),
    .ce(grp_fu_224_ce),
    .dout(grp_fu_224_p2)
);

filt_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(filt_stream_int_stream_axis_0_shift_reg),
    .din1(gmem_addr_read_10),
    .ce(grp_fu_228_ce),
    .dout(grp_fu_228_p2)
);

filt_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(filt_stream_int_stream_axis_0_shift_reg_6_load_reg_528),
    .din1(gmem_addr_read_4),
    .ce(grp_fu_232_ce),
    .dout(grp_fu_232_p2)
);

filt_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(filt_stream_int_stream_axis_0_shift_reg_3),
    .din1(gmem_addr_read_7),
    .ce(grp_fu_236_ce),
    .dout(grp_fu_236_p2)
);

filt_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(filt_stream_int_stream_axis_0_shift_reg_4),
    .din1(gmem_addr_read_6),
    .ce(grp_fu_240_ce),
    .dout(grp_fu_240_p2)
);

filt_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(filt_stream_int_stream_axis_0_shift_reg_5),
    .din1(gmem_addr_read_5),
    .ce(grp_fu_244_ce),
    .dout(grp_fu_244_p2)
);

filt_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(filt_stream_int_stream_axis_0_shift_reg_1),
    .din1(gmem_addr_read_9),
    .ce(grp_fu_248_ce),
    .dout(grp_fu_248_p2)
);

filt_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(filt_stream_int_stream_axis_0_shift_reg_2),
    .din1(gmem_addr_read_8),
    .ce(grp_fu_252_ce),
    .dout(grp_fu_252_p2)
);

filt_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln34_2_reg_644 <= add_ln34_2_fu_409_p2;
        add_ln34_7_reg_634 <= add_ln34_7_fu_396_p2;
        add_ln34_8_reg_649 <= add_ln34_8_fu_423_p2;
        add_ln34_reg_639 <= add_ln34_fu_401_p2;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        mul_ln34_3_reg_599 <= grp_fu_228_p2;
        mul_ln34_4_reg_604 <= grp_fu_232_p2;
        mul_ln34_5_reg_609 <= grp_fu_236_p2;
        mul_ln34_6_reg_614 <= grp_fu_240_p2;
        mul_ln34_7_reg_619 <= grp_fu_244_p2;
        mul_ln34_8_reg_624 <= grp_fu_248_p2;
        mul_ln34_9_reg_629 <= grp_fu_252_p2;
        mul_ln34_reg_594 <= grp_fu_224_p2;
        tmp1_dest_reg_523_pp0_iter2_reg <= tmp1_dest_reg_523_pp0_iter1_reg;
        tmp1_dest_reg_523_pp0_iter3_reg <= tmp1_dest_reg_523_pp0_iter2_reg;
        tmp1_id_reg_518_pp0_iter2_reg <= tmp1_id_reg_518_pp0_iter1_reg;
        tmp1_id_reg_518_pp0_iter3_reg <= tmp1_id_reg_518_pp0_iter2_reg;
        tmp1_keep_reg_498_pp0_iter2_reg <= tmp1_keep_reg_498_pp0_iter1_reg;
        tmp1_keep_reg_498_pp0_iter3_reg <= tmp1_keep_reg_498_pp0_iter2_reg;
        tmp1_last_reg_513_pp0_iter2_reg <= tmp1_last_reg_513_pp0_iter1_reg;
        tmp1_last_reg_513_pp0_iter3_reg <= tmp1_last_reg_513_pp0_iter2_reg;
        tmp1_strb_reg_503_pp0_iter2_reg <= tmp1_strb_reg_503_pp0_iter1_reg;
        tmp1_strb_reg_503_pp0_iter3_reg <= tmp1_strb_reg_503_pp0_iter2_reg;
        tmp1_user_reg_508_pp0_iter2_reg <= tmp1_user_reg_508_pp0_iter1_reg;
        tmp1_user_reg_508_pp0_iter3_reg <= tmp1_user_reg_508_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        filt_stream_int_stream_axis_0_shift_reg_6_load_reg_528 <= filt_stream_int_stream_axis_0_shift_reg_6;
        mul_ln34_10_reg_589 <= grp_fu_219_p2;
        mul_ln34_1_reg_579 <= grp_fu_209_p2;
        mul_ln34_2_reg_584 <= grp_fu_214_p2;
        tmp1_data_reg_493 <= x_TDATA;
        tmp1_dest_reg_523 <= x_TDEST;
        tmp1_dest_reg_523_pp0_iter1_reg <= tmp1_dest_reg_523;
        tmp1_id_reg_518 <= x_TID;
        tmp1_id_reg_518_pp0_iter1_reg <= tmp1_id_reg_518;
        tmp1_keep_reg_498 <= x_TKEEP;
        tmp1_keep_reg_498_pp0_iter1_reg <= tmp1_keep_reg_498;
        tmp1_last_reg_513 <= x_TLAST;
        tmp1_last_reg_513_pp0_iter1_reg <= tmp1_last_reg_513;
        tmp1_strb_reg_503 <= x_TSTRB;
        tmp1_strb_reg_503_pp0_iter1_reg <= tmp1_strb_reg_503;
        tmp1_user_reg_508 <= x_TUSER;
        tmp1_user_reg_508_pp0_iter1_reg <= tmp1_user_reg_508;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filt_stream_int_stream_axis_0_shift_reg <= filt_stream_int_stream_axis_0_shift_reg_1;
        filt_stream_int_stream_axis_0_shift_reg_1 <= filt_stream_int_stream_axis_0_shift_reg_2;
        filt_stream_int_stream_axis_0_shift_reg_2 <= filt_stream_int_stream_axis_0_shift_reg_3;
        filt_stream_int_stream_axis_0_shift_reg_3 <= filt_stream_int_stream_axis_0_shift_reg_4;
        filt_stream_int_stream_axis_0_shift_reg_4 <= filt_stream_int_stream_axis_0_shift_reg_5;
        filt_stream_int_stream_axis_0_shift_reg_5 <= filt_stream_int_stream_axis_0_shift_reg_6_load_reg_528;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filt_stream_int_stream_axis_0_shift_reg_6 <= filt_stream_int_stream_axis_0_shift_reg_7;
        filt_stream_int_stream_axis_0_shift_reg_7 <= filt_stream_int_stream_axis_0_shift_reg_8;
        filt_stream_int_stream_axis_0_shift_reg_8 <= filt_stream_int_stream_axis_0_shift_reg_9;
        filt_stream_int_stream_axis_0_shift_reg_9 <= x_TDATA;
    end
end

always @ (*) begin
    if (((tmp1_last_fu_272_p1 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_209_ce = 1'b1;
    end else begin
        grp_fu_209_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_214_ce = 1'b1;
    end else begin
        grp_fu_214_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_219_ce = 1'b1;
    end else begin
        grp_fu_219_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_224_ce = 1'b1;
    end else begin
        grp_fu_224_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_228_ce = 1'b1;
    end else begin
        grp_fu_228_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_232_ce = 1'b1;
    end else begin
        grp_fu_232_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_236_ce = 1'b1;
    end else begin
        grp_fu_236_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_240_ce = 1'b1;
    end else begin
        grp_fu_240_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_244_ce = 1'b1;
    end else begin
        grp_fu_244_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_248_ce = 1'b1;
    end else begin
        grp_fu_248_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_252_ce = 1'b1;
    end else begin
        grp_fu_252_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_TDATA_blk_n = x_TVALID;
    end else begin
        x_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_TREADY = 1'b1;
    end else begin
        x_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        y_TDATA_blk_n = y_TREADY;
    end else begin
        y_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        y_TVALID = 1'b1;
    end else begin
        y_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln34_1_fu_405_p2 = (mul_ln34_9_reg_629 + mul_ln34_5_reg_609);

assign add_ln34_2_fu_409_p2 = (add_ln34_1_fu_405_p2 + mul_ln34_8_reg_624);

assign add_ln34_3_fu_428_p2 = (add_ln34_2_reg_644 + add_ln34_reg_639);

assign add_ln34_4_fu_414_p2 = (mul_ln34_7_reg_619 + mul_ln34_4_reg_604);

assign add_ln34_5_fu_418_p2 = (add_ln34_4_fu_414_p2 + mul_ln34_6_reg_614);

assign add_ln34_6_fu_392_p2 = (mul_ln34_10_reg_589 + mul_ln34_2_reg_584);

assign add_ln34_7_fu_396_p2 = (add_ln34_6_fu_392_p2 + mul_ln34_1_reg_579);

assign add_ln34_8_fu_423_p2 = (add_ln34_7_reg_634 + add_ln34_5_fu_418_p2);

assign add_ln34_fu_401_p2 = (mul_ln34_3_reg_599 + mul_ln34_reg_594);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & ((y_TREADY == 1'b0) | (1'b1 == ap_block_state5_pp0_stage0_iter4))) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter4 == 1'b1) & ((y_TREADY == 1'b0) | (1'b1 == ap_block_state5_pp0_stage0_iter4))) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (x_TVALID == 1'b0);
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = (y_TREADY == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign tmp1_last_fu_272_p1 = x_TLAST;

assign y_TDATA = (add_ln34_8_reg_649 + add_ln34_3_fu_428_p2);

assign y_TDEST = tmp1_dest_reg_523_pp0_iter3_reg;

assign y_TID = tmp1_id_reg_518_pp0_iter3_reg;

assign y_TKEEP = tmp1_keep_reg_498_pp0_iter3_reg;

assign y_TLAST = tmp1_last_reg_513_pp0_iter3_reg;

assign y_TSTRB = tmp1_strb_reg_503_pp0_iter3_reg;

assign y_TUSER = tmp1_user_reg_508_pp0_iter3_reg;

endmodule //filt_filt_Pipeline_VITIS_LOOP_18_1
