

================================================================
== Vitis HLS Report for 'equalizer'
================================================================
* Date:           Tue Apr 23 13:40:34 2024

* Version:        2022.1 (Build 3526262 on Mon Apr 18 15:48:16 MDT 2022)
* Project:        equalizer
* Solution:       solution5 (Vivado IP Flow Target)
* Product family: zynq
* Target device:  xc7z020-clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  7.300 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |        ?|        ?|         ?|         ?|    ?|    ?|       no|
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------------+---------+---------+----------+-----------+-----------+------+----------+
        |                |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |    Loop Name   |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +----------------+---------+---------+----------+-----------+-----------+------+----------+
        |- Running_Loop  |        ?|        ?|    3 ~ 58|          -|          -|     ?|        no|
        +----------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 29
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 14 16 27 
3 --> 4 
4 --> 5 
5 --> 6 
6 --> 7 
7 --> 8 
8 --> 9 
9 --> 10 
10 --> 11 
11 --> 12 
12 --> 13 
13 --> 14 
14 --> 15 29 
15 --> 2 
16 --> 17 
17 --> 18 
18 --> 19 
19 --> 20 
20 --> 21 
21 --> 22 
22 --> 23 
23 --> 24 
24 --> 25 
25 --> 26 
26 --> 14 15 
27 --> 28 
28 --> 14 15 
29 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.58>
ST_1 : Operation 30 [1/1] (0.00ns)   --->   "%tmp_out_data_V = alloca i32 1"   --->   Operation 30 'alloca' 'tmp_out_data_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "%tmp_out_keep_V = alloca i32 1"   --->   Operation 31 'alloca' 'tmp_out_keep_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 32 [1/1] (0.00ns)   --->   "%tmp_out_strb_V = alloca i32 1"   --->   Operation 32 'alloca' 'tmp_out_strb_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "%tmp_out_user_V = alloca i32 1"   --->   Operation 33 'alloca' 'tmp_out_user_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "%tmp_out_id_V = alloca i32 1"   --->   Operation 34 'alloca' 'tmp_out_id_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (0.00ns)   --->   "%tmp_out_dest_V = alloca i32 1"   --->   Operation 35 'alloca' 'tmp_out_dest_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 36 [1/1] (0.00ns)   --->   "%state = alloca i32 1"   --->   Operation 36 'alloca' 'state' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 37 [1/1] (1.00ns)   --->   "%coefs_read = read i64 @_ssdm_op_Read.s_axilite.i64, i64 %coefs"   --->   Operation 37 'read' 'coefs_read' <Predicate = true> <Delay = 1.00> <CoreInst = "s_axilite">   --->   Core 114 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_1 : Operation 38 [1/1] (0.00ns)   --->   "%accumulate_loc = alloca i64 1"   --->   Operation 38 'alloca' 'accumulate_loc' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 39 [1/1] (0.00ns)   --->   "%p_4_0_0_0112_phi_loc = alloca i64 1"   --->   Operation 39 'alloca' 'p_4_0_0_0112_phi_loc' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 40 [1/1] (0.00ns)   --->   "%tmp_data_V_1_loc = alloca i64 1"   --->   Operation 40 'alloca' 'tmp_data_V_1_loc' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 41 [1/1] (0.00ns)   --->   "%spectopmodule_ln3 = spectopmodule void @_ssdm_op_SpecTopModule, void @empty_10" [equalizer.cpp:3]   --->   Operation 41 'spectopmodule' 'spectopmodule_ln3' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 42 [1/1] (0.00ns)   --->   "%specinterface_ln3 = specinterface void @_ssdm_op_SpecInterface, i32 0, void @empty_11, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0, i32 4294967295, i32 0" [equalizer.cpp:3]   --->   Operation 42 'specinterface' 'specinterface_ln3' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 43 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i32 %gmem, void @empty, i32 0, i32 0, void @empty_0, i32 0, i32 99, void @empty_1, void @empty_2, void @empty_0, i32 16, i32 16, i32 16, i32 16, void @empty_0, void @empty_0, i32 4294967295, i32 0"   --->   Operation 43 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 44 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i32 %gmem"   --->   Operation 44 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 45 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i32 %output_r_V_data_V, i4 %output_r_V_keep_V, i4 %output_r_V_strb_V, i1 %output_r_V_user_V, i1 %output_r_V_last_V, i1 %output_r_V_id_V, i1 %output_r_V_dest_V, void @empty_3, i32 1, i32 1, void @empty_4, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0, i32 4294967295, i32 0"   --->   Operation 45 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 46 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i32 %output_r_V_data_V"   --->   Operation 46 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 47 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i4 %output_r_V_keep_V"   --->   Operation 47 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 48 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i4 %output_r_V_strb_V"   --->   Operation 48 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 49 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %output_r_V_user_V"   --->   Operation 49 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 50 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %output_r_V_last_V"   --->   Operation 50 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 51 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %output_r_V_id_V"   --->   Operation 51 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 52 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %output_r_V_dest_V"   --->   Operation 52 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 53 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i64 %coefs, void @empty_5, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_6, void @empty_7, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_8, i32 4294967295, i32 0"   --->   Operation 53 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 54 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i64 %coefs, void @empty_9, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_8, i32 4294967295, i32 0"   --->   Operation 54 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 55 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V, void @empty_3, i32 1, i32 1, void @empty_4, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0, i32 4294967295, i32 0"   --->   Operation 55 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 56 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i32 %input_r_V_data_V"   --->   Operation 56 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 57 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i4 %input_r_V_keep_V"   --->   Operation 57 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 58 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i4 %input_r_V_strb_V"   --->   Operation 58 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 59 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %input_r_V_user_V"   --->   Operation 59 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 60 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %input_r_V_last_V"   --->   Operation 60 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 61 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %input_r_V_id_V"   --->   Operation 61 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 62 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %input_r_V_dest_V"   --->   Operation 62 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 63 [1/1] (0.00ns)   --->   "%trunc_ln = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %coefs_read, i32 2, i32 63" [equalizer.cpp:61]   --->   Operation 63 'partselect' 'trunc_ln' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 64 [1/1] (0.00ns)   --->   "%sext_ln61 = sext i62 %trunc_ln" [equalizer.cpp:61]   --->   Operation 64 'sext' 'sext_ln61' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 65 [1/1] (0.00ns)   --->   "%gmem_addr = getelementptr i32 %gmem, i64 %sext_ln61" [equalizer.cpp:61]   --->   Operation 65 'getelementptr' 'gmem_addr' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 66 [1/1] (1.58ns)   --->   "%store_ln26 = store i32 0, i32 %state" [equalizer.cpp:26]   --->   Operation 66 'store' 'store_ln26' <Predicate = true> <Delay = 1.58>
ST_1 : Operation 67 [1/1] (0.00ns)   --->   "%br_ln26 = br void %while.body" [equalizer.cpp:26]   --->   Operation 67 'br' 'br_ln26' <Predicate = true> <Delay = 0.00>

State 2 <SV = 1> <Delay = 3.52>
ST_2 : Operation 68 [1/1] (0.00ns)   --->   "%tmp_out_data_V_1 = load i32 %tmp_out_data_V"   --->   Operation 68 'load' 'tmp_out_data_V_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 69 [1/1] (0.00ns)   --->   "%tmp_out_keep_V_1 = load i4 %tmp_out_keep_V"   --->   Operation 69 'load' 'tmp_out_keep_V_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 70 [1/1] (0.00ns)   --->   "%tmp_out_strb_V_1 = load i4 %tmp_out_strb_V"   --->   Operation 70 'load' 'tmp_out_strb_V_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 71 [1/1] (0.00ns)   --->   "%tmp_out_user_V_1 = load i1 %tmp_out_user_V"   --->   Operation 71 'load' 'tmp_out_user_V_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 72 [1/1] (0.00ns)   --->   "%tmp_out_id_V_1 = load i1 %tmp_out_id_V"   --->   Operation 72 'load' 'tmp_out_id_V_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 73 [1/1] (0.00ns)   --->   "%tmp_out_dest_V_1 = load i1 %tmp_out_dest_V"   --->   Operation 73 'load' 'tmp_out_dest_V_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 74 [1/1] (0.00ns)   --->   "%state_2 = load i32 %state"   --->   Operation 74 'load' 'state_2' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 75 [1/1] (0.00ns)   --->   "%specloopname_ln18 = specloopname void @_ssdm_op_SpecLoopName, void @empty_14" [equalizer.cpp:18]   --->   Operation 75 'specloopname' 'specloopname_ln18' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 76 [1/1] (0.00ns)   --->   "%empty = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 76 'read' 'empty' <Predicate = true> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_2 : Operation 77 [1/1] (0.00ns)   --->   "%tmp_data_V = extractvalue i44 %empty"   --->   Operation 77 'extractvalue' 'tmp_data_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 78 [1/1] (0.00ns)   --->   "%tmp_keep_V = extractvalue i44 %empty"   --->   Operation 78 'extractvalue' 'tmp_keep_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 79 [1/1] (0.00ns)   --->   "%tmp_strb_V = extractvalue i44 %empty"   --->   Operation 79 'extractvalue' 'tmp_strb_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 80 [1/1] (0.00ns)   --->   "%tmp_user_V = extractvalue i44 %empty"   --->   Operation 80 'extractvalue' 'tmp_user_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 81 [1/1] (0.00ns)   --->   "%tmp_last_V = extractvalue i44 %empty"   --->   Operation 81 'extractvalue' 'tmp_last_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 82 [1/1] (0.00ns)   --->   "%tmp_id_V = extractvalue i44 %empty"   --->   Operation 82 'extractvalue' 'tmp_id_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 83 [1/1] (0.00ns)   --->   "%tmp_dest_V = extractvalue i44 %empty"   --->   Operation 83 'extractvalue' 'tmp_dest_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 84 [1/1] (1.58ns)   --->   "%switch_ln29 = switch i32 %state_2, void %sw.epilog, i32 0, void %sw.bb, i32 17, void %for.inc.preheader, i32 4096, void %for.inc24.preheader" [equalizer.cpp:29]   --->   Operation 84 'switch' 'switch_ln29' <Predicate = true> <Delay = 1.58>
ST_2 : Operation 85 [2/2] (3.52ns)   --->   "%call_ln0 = call void @equalizer_Pipeline_Shift_Accumulate_Loop, i32 %gmem, i64 %coefs_read, i32 %accumulate_loc, i32 %signal_shift_reg"   --->   Operation 85 'call' 'call_ln0' <Predicate = (state_2 == 4096)> <Delay = 3.52> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_2 : Operation 86 [1/1] (0.00ns)   --->   "%empty_21 = wait i32 @_ssdm_op_Wait"   --->   Operation 86 'wait' 'empty_21' <Predicate = (state_2 == 17)> <Delay = 0.00>

State 3 <SV = 2> <Delay = 0.00>
ST_3 : Operation 87 [1/2] (0.00ns)   --->   "%call_ln0 = call void @equalizer_Pipeline_Shift_Accumulate_Loop, i32 %gmem, i64 %coefs_read, i32 %accumulate_loc, i32 %signal_shift_reg"   --->   Operation 87 'call' 'call_ln0' <Predicate = true> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 4 <SV = 3> <Delay = 7.30>
ST_4 : Operation 88 [7/7] (7.30ns)   --->   "%gmem_load_1_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i32P1A, i32 %gmem_addr, i32 1" [equalizer.cpp:61]   --->   Operation 88 'readreq' 'gmem_load_1_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_4 : Operation 89 [1/1] (3.25ns)   --->   "%store_ln62 = store i32 %tmp_data_V, i32 0" [equalizer.cpp:62]   --->   Operation 89 'store' 'store_ln62' <Predicate = true> <Delay = 3.25> <CoreInst = "RAM">   --->   Core 82 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 33> <RAM>

State 5 <SV = 4> <Delay = 7.30>
ST_5 : Operation 90 [6/7] (7.30ns)   --->   "%gmem_load_1_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i32P1A, i32 %gmem_addr, i32 1" [equalizer.cpp:61]   --->   Operation 90 'readreq' 'gmem_load_1_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 6 <SV = 5> <Delay = 7.30>
ST_6 : Operation 91 [5/7] (7.30ns)   --->   "%gmem_load_1_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i32P1A, i32 %gmem_addr, i32 1" [equalizer.cpp:61]   --->   Operation 91 'readreq' 'gmem_load_1_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 7 <SV = 6> <Delay = 7.30>
ST_7 : Operation 92 [4/7] (7.30ns)   --->   "%gmem_load_1_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i32P1A, i32 %gmem_addr, i32 1" [equalizer.cpp:61]   --->   Operation 92 'readreq' 'gmem_load_1_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 8 <SV = 7> <Delay = 7.30>
ST_8 : Operation 93 [3/7] (7.30ns)   --->   "%gmem_load_1_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i32P1A, i32 %gmem_addr, i32 1" [equalizer.cpp:61]   --->   Operation 93 'readreq' 'gmem_load_1_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 9 <SV = 8> <Delay = 7.30>
ST_9 : Operation 94 [2/7] (7.30ns)   --->   "%gmem_load_1_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i32P1A, i32 %gmem_addr, i32 1" [equalizer.cpp:61]   --->   Operation 94 'readreq' 'gmem_load_1_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 10 <SV = 9> <Delay = 7.30>
ST_10 : Operation 95 [1/7] (7.30ns)   --->   "%gmem_load_1_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i32P1A, i32 %gmem_addr, i32 1" [equalizer.cpp:61]   --->   Operation 95 'readreq' 'gmem_load_1_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 11 <SV = 10> <Delay = 7.30>
ST_11 : Operation 96 [1/1] (7.30ns)   --->   "%gmem_addr_read = read i32 @_ssdm_op_Read.m_axi.i32P1A, i32 %gmem_addr" [equalizer.cpp:61]   --->   Operation 96 'read' 'gmem_addr_read' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 12 <SV = 11> <Delay = 6.91>
ST_12 : Operation 97 [2/2] (6.91ns)   --->   "%mul_ln61 = mul i32 %gmem_addr_read, i32 %tmp_data_V" [equalizer.cpp:61]   --->   Operation 97 'mul' 'mul_ln61' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>

State 13 <SV = 12> <Delay = 6.91>
ST_13 : Operation 98 [1/2] (6.91ns)   --->   "%mul_ln61 = mul i32 %gmem_addr_read, i32 %tmp_data_V" [equalizer.cpp:61]   --->   Operation 98 'mul' 'mul_ln61' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>

State 14 <SV = 13> <Delay = 3.41>
ST_14 : Operation 99 [1/1] (0.00ns)   --->   "%accumulate_loc_load = load i32 %accumulate_loc"   --->   Operation 99 'load' 'accumulate_loc_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_14 : Operation 100 [1/1] (2.55ns)   --->   "%accumulate = add i32 %mul_ln61, i32 %accumulate_loc_load" [equalizer.cpp:61]   --->   Operation 100 'add' 'accumulate' <Predicate = (state_2 == 4096)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_14 : Operation 101 [1/1] (0.00ns)   --->   "%br_ln72 = br i1 %tmp_last_V, void %if.end44, void %for.inc24.preheader.sw.epilog_crit_edge" [equalizer.cpp:72]   --->   Operation 101 'br' 'br_ln72' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_14 : Operation 102 [2/2] (0.00ns)   --->   "%write_ln304 = write void @_ssdm_op_Write.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %output_r_V_data_V, i4 %output_r_V_keep_V, i4 %output_r_V_strb_V, i1 %output_r_V_user_V, i1 %output_r_V_last_V, i1 %output_r_V_id_V, i1 %output_r_V_dest_V, i32 %accumulate, i4 %tmp_keep_V, i4 %tmp_strb_V, i1 %tmp_user_V, i1 0, i1 %tmp_id_V, i1 %tmp_dest_V"   --->   Operation 102 'write' 'write_ln304' <Predicate = (state_2 == 4096 & !tmp_last_V)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_14 : Operation 103 [1/1] (0.00ns)   --->   "%store_ln83 = store i1 %tmp_dest_V, i1 %tmp_out_dest_V" [equalizer.cpp:83]   --->   Operation 103 'store' 'store_ln83' <Predicate = (state_2 == 4096 & !tmp_last_V)> <Delay = 0.00>
ST_14 : Operation 104 [1/1] (0.00ns)   --->   "%store_ln83 = store i1 %tmp_id_V, i1 %tmp_out_id_V" [equalizer.cpp:83]   --->   Operation 104 'store' 'store_ln83' <Predicate = (state_2 == 4096 & !tmp_last_V)> <Delay = 0.00>
ST_14 : Operation 105 [1/1] (0.00ns)   --->   "%store_ln83 = store i1 %tmp_user_V, i1 %tmp_out_user_V" [equalizer.cpp:83]   --->   Operation 105 'store' 'store_ln83' <Predicate = (state_2 == 4096 & !tmp_last_V)> <Delay = 0.00>
ST_14 : Operation 106 [1/1] (0.00ns)   --->   "%store_ln83 = store i4 %tmp_strb_V, i4 %tmp_out_strb_V" [equalizer.cpp:83]   --->   Operation 106 'store' 'store_ln83' <Predicate = (state_2 == 4096 & !tmp_last_V)> <Delay = 0.00>
ST_14 : Operation 107 [1/1] (0.00ns)   --->   "%store_ln83 = store i4 %tmp_keep_V, i4 %tmp_out_keep_V" [equalizer.cpp:83]   --->   Operation 107 'store' 'store_ln83' <Predicate = (state_2 == 4096 & !tmp_last_V)> <Delay = 0.00>
ST_14 : Operation 108 [1/1] (0.00ns)   --->   "%store_ln83 = store i32 %accumulate, i32 %tmp_out_data_V" [equalizer.cpp:83]   --->   Operation 108 'store' 'store_ln83' <Predicate = (state_2 == 4096 & !tmp_last_V)> <Delay = 0.00>
ST_14 : Operation 109 [1/1] (0.00ns)   --->   "%store_ln72 = store i1 %tmp_dest_V, i1 %tmp_out_dest_V" [equalizer.cpp:72]   --->   Operation 109 'store' 'store_ln72' <Predicate = (state_2 == 4096 & tmp_last_V)> <Delay = 0.00>
ST_14 : Operation 110 [1/1] (0.00ns)   --->   "%store_ln72 = store i1 %tmp_id_V, i1 %tmp_out_id_V" [equalizer.cpp:72]   --->   Operation 110 'store' 'store_ln72' <Predicate = (state_2 == 4096 & tmp_last_V)> <Delay = 0.00>
ST_14 : Operation 111 [1/1] (0.00ns)   --->   "%store_ln72 = store i1 %tmp_user_V, i1 %tmp_out_user_V" [equalizer.cpp:72]   --->   Operation 111 'store' 'store_ln72' <Predicate = (state_2 == 4096 & tmp_last_V)> <Delay = 0.00>
ST_14 : Operation 112 [1/1] (0.00ns)   --->   "%store_ln72 = store i4 %tmp_strb_V, i4 %tmp_out_strb_V" [equalizer.cpp:72]   --->   Operation 112 'store' 'store_ln72' <Predicate = (state_2 == 4096 & tmp_last_V)> <Delay = 0.00>
ST_14 : Operation 113 [1/1] (0.00ns)   --->   "%store_ln72 = store i4 %tmp_keep_V, i4 %tmp_out_keep_V" [equalizer.cpp:72]   --->   Operation 113 'store' 'store_ln72' <Predicate = (state_2 == 4096 & tmp_last_V)> <Delay = 0.00>
ST_14 : Operation 114 [1/1] (0.00ns)   --->   "%store_ln72 = store i32 %accumulate, i32 %tmp_out_data_V" [equalizer.cpp:72]   --->   Operation 114 'store' 'store_ln72' <Predicate = (state_2 == 4096 & tmp_last_V)> <Delay = 0.00>
ST_14 : Operation 115 [1/1] (1.58ns)   --->   "%br_ln72 = br void %sw.epilog" [equalizer.cpp:72]   --->   Operation 115 'br' 'br_ln72' <Predicate = (state_2 == 4096 & tmp_last_V)> <Delay = 1.58>
ST_14 : Operation 116 [1/1] (0.00ns)   --->   "%tmp_last_V_1 = phi i1 %tmp_last_V, void %while.body, i1 1, void %for.inc24.preheader.sw.epilog_crit_edge"   --->   Operation 116 'phi' 'tmp_last_V_1' <Predicate = (state_2 == 4096 & tmp_last_V) | (state_2 != 0 & state_2 != 17 & state_2 != 4096)> <Delay = 0.00>
ST_14 : Operation 117 [1/1] (0.00ns)   --->   "%state_1 = phi i32 %state_2, void %while.body, i32 4096, void %for.inc24.preheader.sw.epilog_crit_edge"   --->   Operation 117 'phi' 'state_1' <Predicate = (state_2 == 4096 & tmp_last_V) | (state_2 != 0 & state_2 != 17 & state_2 != 4096)> <Delay = 0.00>
ST_14 : Operation 118 [1/1] (0.00ns)   --->   "%tmp_out_data_V_4 = load i32 %tmp_out_data_V"   --->   Operation 118 'load' 'tmp_out_data_V_4' <Predicate = (state_2 == 4096 & tmp_last_V) | (state_2 != 0 & state_2 != 17 & state_2 != 4096)> <Delay = 0.00>
ST_14 : Operation 119 [1/1] (0.00ns)   --->   "%tmp_out_keep_V_4 = load i4 %tmp_out_keep_V"   --->   Operation 119 'load' 'tmp_out_keep_V_4' <Predicate = (state_2 == 4096 & tmp_last_V) | (state_2 != 0 & state_2 != 17 & state_2 != 4096)> <Delay = 0.00>
ST_14 : Operation 120 [1/1] (0.00ns)   --->   "%tmp_out_strb_V_4 = load i4 %tmp_out_strb_V"   --->   Operation 120 'load' 'tmp_out_strb_V_4' <Predicate = (state_2 == 4096 & tmp_last_V) | (state_2 != 0 & state_2 != 17 & state_2 != 4096)> <Delay = 0.00>
ST_14 : Operation 121 [1/1] (0.00ns)   --->   "%tmp_out_user_V_4 = load i1 %tmp_out_user_V"   --->   Operation 121 'load' 'tmp_out_user_V_4' <Predicate = (state_2 == 4096 & tmp_last_V) | (state_2 != 0 & state_2 != 17 & state_2 != 4096)> <Delay = 0.00>
ST_14 : Operation 122 [1/1] (0.00ns)   --->   "%tmp_out_id_V_4 = load i1 %tmp_out_id_V"   --->   Operation 122 'load' 'tmp_out_id_V_4' <Predicate = (state_2 == 4096 & tmp_last_V) | (state_2 != 0 & state_2 != 17 & state_2 != 4096)> <Delay = 0.00>
ST_14 : Operation 123 [1/1] (0.00ns)   --->   "%tmp_out_dest_V_4 = load i1 %tmp_out_dest_V"   --->   Operation 123 'load' 'tmp_out_dest_V_4' <Predicate = (state_2 == 4096 & tmp_last_V) | (state_2 != 0 & state_2 != 17 & state_2 != 4096)> <Delay = 0.00>
ST_14 : Operation 124 [1/1] (1.82ns)   --->   "%br_ln83 = br i1 %tmp_last_V_1, void %if.end50, void %while.end" [equalizer.cpp:83]   --->   Operation 124 'br' 'br_ln83' <Predicate = (state_2 == 4096 & tmp_last_V) | (state_2 != 0 & state_2 != 17 & state_2 != 4096)> <Delay = 1.82>
ST_14 : Operation 125 [1/1] (0.00ns)   --->   "%tmp_dest_V_1 = phi i1 %tmp_out_dest_V_1, void %sw.bb, i1 %tmp_out_dest_V_1, void %for.inc.preheader, i1 %tmp_out_dest_V_4, void %sw.epilog"   --->   Operation 125 'phi' 'tmp_dest_V_1' <Predicate = (state_2 == 4096 & tmp_last_V & tmp_last_V_1) | (state_2 == 17 & p_4_0_0_0112_phi_loc_load) | (state_2 != 0 & state_2 != 17 & state_2 != 4096 & tmp_last_V_1) | (state_2 == 0 & tmp_last_V)> <Delay = 0.00>
ST_14 : Operation 126 [1/1] (0.00ns)   --->   "%tmp_id_V_1 = phi i1 %tmp_out_id_V_1, void %sw.bb, i1 %tmp_out_id_V_1, void %for.inc.preheader, i1 %tmp_out_id_V_4, void %sw.epilog"   --->   Operation 126 'phi' 'tmp_id_V_1' <Predicate = (state_2 == 4096 & tmp_last_V & tmp_last_V_1) | (state_2 == 17 & p_4_0_0_0112_phi_loc_load) | (state_2 != 0 & state_2 != 17 & state_2 != 4096 & tmp_last_V_1) | (state_2 == 0 & tmp_last_V)> <Delay = 0.00>
ST_14 : Operation 127 [1/1] (0.00ns)   --->   "%tmp_user_V_1 = phi i1 %tmp_out_user_V_1, void %sw.bb, i1 %tmp_out_user_V_1, void %for.inc.preheader, i1 %tmp_out_user_V_4, void %sw.epilog"   --->   Operation 127 'phi' 'tmp_user_V_1' <Predicate = (state_2 == 4096 & tmp_last_V & tmp_last_V_1) | (state_2 == 17 & p_4_0_0_0112_phi_loc_load) | (state_2 != 0 & state_2 != 17 & state_2 != 4096 & tmp_last_V_1) | (state_2 == 0 & tmp_last_V)> <Delay = 0.00>
ST_14 : Operation 128 [1/1] (0.00ns)   --->   "%tmp_strb_V_1 = phi i4 %tmp_out_strb_V_1, void %sw.bb, i4 %tmp_out_strb_V_1, void %for.inc.preheader, i4 %tmp_out_strb_V_4, void %sw.epilog"   --->   Operation 128 'phi' 'tmp_strb_V_1' <Predicate = (state_2 == 4096 & tmp_last_V & tmp_last_V_1) | (state_2 == 17 & p_4_0_0_0112_phi_loc_load) | (state_2 != 0 & state_2 != 17 & state_2 != 4096 & tmp_last_V_1) | (state_2 == 0 & tmp_last_V)> <Delay = 0.00>
ST_14 : Operation 129 [1/1] (0.00ns)   --->   "%tmp_keep_V_1 = phi i4 %tmp_out_keep_V_1, void %sw.bb, i4 %tmp_out_keep_V_1, void %for.inc.preheader, i4 %tmp_out_keep_V_4, void %sw.epilog"   --->   Operation 129 'phi' 'tmp_keep_V_1' <Predicate = (state_2 == 4096 & tmp_last_V & tmp_last_V_1) | (state_2 == 17 & p_4_0_0_0112_phi_loc_load) | (state_2 != 0 & state_2 != 17 & state_2 != 4096 & tmp_last_V_1) | (state_2 == 0 & tmp_last_V)> <Delay = 0.00>
ST_14 : Operation 130 [1/1] (0.00ns)   --->   "%tmp_data_V_4 = phi i32 %tmp_out_data_V_1, void %sw.bb, i32 %tmp_out_data_V_1, void %for.inc.preheader, i32 %tmp_out_data_V_4, void %sw.epilog"   --->   Operation 130 'phi' 'tmp_data_V_4' <Predicate = (state_2 == 4096 & tmp_last_V & tmp_last_V_1) | (state_2 == 17 & p_4_0_0_0112_phi_loc_load) | (state_2 != 0 & state_2 != 17 & state_2 != 4096 & tmp_last_V_1) | (state_2 == 0 & tmp_last_V)> <Delay = 0.00>
ST_14 : Operation 131 [2/2] (0.00ns)   --->   "%write_ln304 = write void @_ssdm_op_Write.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %output_r_V_data_V, i4 %output_r_V_keep_V, i4 %output_r_V_strb_V, i1 %output_r_V_user_V, i1 %output_r_V_last_V, i1 %output_r_V_id_V, i1 %output_r_V_dest_V, i32 %tmp_data_V_4, i4 %tmp_keep_V_1, i4 %tmp_strb_V_1, i1 %tmp_user_V_1, i1 1, i1 %tmp_id_V_1, i1 %tmp_dest_V_1"   --->   Operation 131 'write' 'write_ln304' <Predicate = (state_2 == 4096 & tmp_last_V & tmp_last_V_1) | (state_2 == 17 & p_4_0_0_0112_phi_loc_load) | (state_2 != 0 & state_2 != 17 & state_2 != 4096 & tmp_last_V_1) | (state_2 == 0 & tmp_last_V)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >

State 15 <SV = 14> <Delay = 3.41>
ST_15 : Operation 132 [1/2] (0.00ns)   --->   "%write_ln304 = write void @_ssdm_op_Write.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %output_r_V_data_V, i4 %output_r_V_keep_V, i4 %output_r_V_strb_V, i1 %output_r_V_user_V, i1 %output_r_V_last_V, i1 %output_r_V_id_V, i1 %output_r_V_dest_V, i32 %accumulate, i4 %tmp_keep_V, i4 %tmp_strb_V, i1 %tmp_user_V, i1 0, i1 %tmp_id_V, i1 %tmp_dest_V"   --->   Operation 132 'write' 'write_ln304' <Predicate = (state_2 == 4096 & !tmp_last_V)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_15 : Operation 133 [1/1] (1.82ns)   --->   "%br_ln83 = br void %if.end50" [equalizer.cpp:83]   --->   Operation 133 'br' 'br_ln83' <Predicate = (state_2 == 4096 & !tmp_last_V)> <Delay = 1.82>
ST_15 : Operation 134 [1/1] (0.00ns)   --->   "%state_3241 = phi i32 4096, void %if.end44, i32 %select_ln17, void %sw.bb, i32 %select_ln17_1, void %for.inc.preheader, i32 %state_1, void %sw.epilog"   --->   Operation 134 'phi' 'state_3241' <Predicate = (state_2 == 4096 & !tmp_last_V) | (state_2 == 17 & !p_4_0_0_0112_phi_loc_load) | (state_2 != 0 & state_2 != 17 & !tmp_last_V_1) | (state_2 == 0 & !tmp_last_V)> <Delay = 0.00>
ST_15 : Operation 135 [1/1] (1.58ns)   --->   "%store_ln26 = store i32 %state_3241, i32 %state" [equalizer.cpp:26]   --->   Operation 135 'store' 'store_ln26' <Predicate = (state_2 == 4096 & !tmp_last_V) | (state_2 == 17 & !p_4_0_0_0112_phi_loc_load) | (state_2 != 0 & state_2 != 17 & !tmp_last_V_1) | (state_2 == 0 & !tmp_last_V)> <Delay = 1.58>
ST_15 : Operation 136 [1/1] (0.00ns)   --->   "%br_ln26 = br void %while.body" [equalizer.cpp:26]   --->   Operation 136 'br' 'br_ln26' <Predicate = (state_2 == 4096 & !tmp_last_V) | (state_2 == 17 & !p_4_0_0_0112_phi_loc_load) | (state_2 != 0 & state_2 != 17 & !tmp_last_V_1) | (state_2 == 0 & !tmp_last_V)> <Delay = 0.00>

State 16 <SV = 2> <Delay = 1.58>
ST_16 : Operation 137 [2/2] (1.58ns)   --->   "%call_ln283 = call void @equalizer_Pipeline_Coef_Read_Loop, i32 %tmp_data_V, i32 %gmem, i64 %coefs_read, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V, i32 %tmp_data_V_1_loc, i1 %p_4_0_0_0112_phi_loc"   --->   Operation 137 'call' 'call_ln283' <Predicate = true> <Delay = 1.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 17 <SV = 3> <Delay = 0.00>
ST_17 : Operation 138 [1/2] (0.00ns)   --->   "%call_ln283 = call void @equalizer_Pipeline_Coef_Read_Loop, i32 %tmp_data_V, i32 %gmem, i64 %coefs_read, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V, i32 %tmp_data_V_1_loc, i1 %p_4_0_0_0112_phi_loc"   --->   Operation 138 'call' 'call_ln283' <Predicate = true> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 18 <SV = 4> <Delay = 0.00>
ST_18 : Operation 139 [1/1] (0.00ns)   --->   "%empty_22 = wait i32 @_ssdm_op_Wait"   --->   Operation 139 'wait' 'empty_22' <Predicate = true> <Delay = 0.00>

State 19 <SV = 5> <Delay = 0.00>

State 20 <SV = 6> <Delay = 0.00>

State 21 <SV = 7> <Delay = 0.00>

State 22 <SV = 8> <Delay = 0.00>

State 23 <SV = 9> <Delay = 0.00>

State 24 <SV = 10> <Delay = 0.00>

State 25 <SV = 11> <Delay = 0.00>

State 26 <SV = 12> <Delay = 3.17>
ST_26 : Operation 140 [1/1] (0.00ns)   --->   "%tmp_data_V_1_loc_load = load i32 %tmp_data_V_1_loc"   --->   Operation 140 'load' 'tmp_data_V_1_loc_load' <Predicate = true> <Delay = 0.00>
ST_26 : Operation 141 [1/1] (0.00ns)   --->   "%p_4_0_0_0112_phi_loc_load = load i1 %p_4_0_0_0112_phi_loc"   --->   Operation 141 'load' 'p_4_0_0_0112_phi_loc_load' <Predicate = true> <Delay = 0.00>
ST_26 : Operation 142 [1/1] (2.47ns)   --->   "%icmp_ln46 = icmp_eq  i32 %tmp_data_V_1_loc_load, i32 43962" [equalizer.cpp:46]   --->   Operation 142 'icmp' 'icmp_ln46' <Predicate = true> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_26 : Operation 143 [1/1] (0.70ns)   --->   "%select_ln17_1 = select i1 %icmp_ln46, i32 4096, i32 17" [equalizer.cpp:17]   --->   Operation 143 'select' 'select_ln17_1' <Predicate = true> <Delay = 0.70> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.70> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_26 : Operation 144 [1/1] (1.82ns)   --->   "%br_ln83 = br i1 %p_4_0_0_0112_phi_loc_load, void %if.end50, void %while.end" [equalizer.cpp:83]   --->   Operation 144 'br' 'br_ln83' <Predicate = true> <Delay = 1.82>

State 27 <SV = 11> <Delay = 2.47>
ST_27 : Operation 145 [1/1] (2.47ns)   --->   "%icmp_ln31 = icmp_eq  i32 %tmp_data_V, i32 48879" [equalizer.cpp:31]   --->   Operation 145 'icmp' 'icmp_ln31' <Predicate = true> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>

State 28 <SV = 12> <Delay = 1.82>
ST_28 : Operation 146 [1/1] (1.18ns)   --->   "%select_ln17 = select i1 %icmp_ln31, i32 17, i32 0" [equalizer.cpp:17]   --->   Operation 146 'select' 'select_ln17' <Predicate = true> <Delay = 1.18> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 1.18> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_28 : Operation 147 [1/1] (1.82ns)   --->   "%br_ln83 = br i1 %tmp_last_V, void %if.end50, void %while.end" [equalizer.cpp:83]   --->   Operation 147 'br' 'br_ln83' <Predicate = true> <Delay = 1.82>

State 29 <SV = 14> <Delay = 0.00>
ST_29 : Operation 148 [1/2] (0.00ns)   --->   "%write_ln304 = write void @_ssdm_op_Write.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %output_r_V_data_V, i4 %output_r_V_keep_V, i4 %output_r_V_strb_V, i1 %output_r_V_user_V, i1 %output_r_V_last_V, i1 %output_r_V_id_V, i1 %output_r_V_dest_V, i32 %tmp_data_V_4, i4 %tmp_keep_V_1, i4 %tmp_strb_V_1, i1 %tmp_user_V_1, i1 1, i1 %tmp_id_V_1, i1 %tmp_dest_V_1"   --->   Operation 148 'write' 'write_ln304' <Predicate = true> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_29 : Operation 149 [1/1] (0.00ns)   --->   "%ret_ln89 = ret" [equalizer.cpp:89]   --->   Operation 149 'ret' 'ret_ln89' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 2.7ns.

 <State 1>: 1.59ns
The critical path consists of the following:
	'alloca' operation ('state') [24]  (0 ns)
	'store' operation ('store_ln26', equalizer.cpp:26) of constant 0 on local variable 'state' [54]  (1.59 ns)

 <State 2>: 3.52ns
The critical path consists of the following:
	'call' operation ('call_ln0') to 'equalizer_Pipeline_Shift_Accumulate_Loop' [75]  (3.52 ns)

 <State 3>: 0ns
The critical path consists of the following:

 <State 4>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_load_1_req', equalizer.cpp:61) on port 'gmem' (equalizer.cpp:61) [77]  (7.3 ns)

 <State 5>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_load_1_req', equalizer.cpp:61) on port 'gmem' (equalizer.cpp:61) [77]  (7.3 ns)

 <State 6>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_load_1_req', equalizer.cpp:61) on port 'gmem' (equalizer.cpp:61) [77]  (7.3 ns)

 <State 7>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_load_1_req', equalizer.cpp:61) on port 'gmem' (equalizer.cpp:61) [77]  (7.3 ns)

 <State 8>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_load_1_req', equalizer.cpp:61) on port 'gmem' (equalizer.cpp:61) [77]  (7.3 ns)

 <State 9>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_load_1_req', equalizer.cpp:61) on port 'gmem' (equalizer.cpp:61) [77]  (7.3 ns)

 <State 10>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_load_1_req', equalizer.cpp:61) on port 'gmem' (equalizer.cpp:61) [77]  (7.3 ns)

 <State 11>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read', equalizer.cpp:61) on port 'gmem' (equalizer.cpp:61) [78]  (7.3 ns)

 <State 12>: 6.91ns
The critical path consists of the following:
	'mul' operation ('mul_ln61', equalizer.cpp:61) [79]  (6.91 ns)

 <State 13>: 6.91ns
The critical path consists of the following:
	'mul' operation ('mul_ln61', equalizer.cpp:61) [79]  (6.91 ns)

 <State 14>: 3.41ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('tmp.last.V') with incoming values : ('tmp.last.V') [114]  (1.59 ns)
	'phi' operation ('tmp.last.V') with incoming values : ('tmp.last.V') [114]  (0 ns)
	multiplexor before 'phi' operation ('tmp_out.dest.V') with incoming values : ('tmp_out.dest.V') [128]  (1.83 ns)
	'phi' operation ('tmp_out.dest.V') with incoming values : ('tmp_out.dest.V') [128]  (0 ns)

 <State 15>: 3.41ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('state') with incoming values : ('state') ('select_ln17_1', equalizer.cpp:17) ('select_ln17', equalizer.cpp:17) [124]  (1.83 ns)
	'phi' operation ('state') with incoming values : ('state') ('select_ln17_1', equalizer.cpp:17) ('select_ln17', equalizer.cpp:17) [124]  (0 ns)
	'store' operation ('store_ln26', equalizer.cpp:26) of variable 'state' on local variable 'state' [125]  (1.59 ns)

 <State 16>: 1.59ns
The critical path consists of the following:
	'call' operation ('call_ln283') to 'equalizer_Pipeline_Coef_Read_Loop' [102]  (1.59 ns)

 <State 17>: 0ns
The critical path consists of the following:

 <State 18>: 0ns
The critical path consists of the following:

 <State 19>: 0ns
The critical path consists of the following:

 <State 20>: 0ns
The critical path consists of the following:

 <State 21>: 0ns
The critical path consists of the following:

 <State 22>: 0ns
The critical path consists of the following:

 <State 23>: 0ns
The critical path consists of the following:

 <State 24>: 0ns
The critical path consists of the following:

 <State 25>: 0ns
The critical path consists of the following:

 <State 26>: 3.17ns
The critical path consists of the following:
	'load' operation ('tmp_data_V_1_loc_load') on local variable 'tmp_data_V_1_loc' [103]  (0 ns)
	'icmp' operation ('icmp_ln46', equalizer.cpp:46) [106]  (2.47 ns)
	'select' operation ('select_ln17_1', equalizer.cpp:17) [107]  (0.702 ns)

 <State 27>: 2.47ns
The critical path consists of the following:
	'icmp' operation ('icmp_ln31', equalizer.cpp:31) [110]  (2.47 ns)

 <State 28>: 1.83ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('tmp_out.dest.V') with incoming values : ('tmp_out.dest.V') [128]  (1.83 ns)

 <State 29>: 0ns
The critical path consists of the following:


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
