// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="equalizer_equalizer,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=2114,HLS_SYN_LUT=2902,HLS_VERSION=2022_1}" *)

module equalizer (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        output_r_TDATA,
        output_r_TVALID,
        output_r_TREADY,
        output_r_TKEEP,
        output_r_TSTRB,
        output_r_TUSER,
        output_r_TLAST,
        output_r_TID,
        output_r_TDEST,
        input_r_TDATA,
        input_r_TVALID,
        input_r_TREADY,
        input_r_TKEEP,
        input_r_TSTRB,
        input_r_TUSER,
        input_r_TLAST,
        input_r_TID,
        input_r_TDEST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 29'd1;
parameter    ap_ST_fsm_state2 = 29'd2;
parameter    ap_ST_fsm_state3 = 29'd4;
parameter    ap_ST_fsm_state4 = 29'd8;
parameter    ap_ST_fsm_state5 = 29'd16;
parameter    ap_ST_fsm_state6 = 29'd32;
parameter    ap_ST_fsm_state7 = 29'd64;
parameter    ap_ST_fsm_state8 = 29'd128;
parameter    ap_ST_fsm_state9 = 29'd256;
parameter    ap_ST_fsm_state10 = 29'd512;
parameter    ap_ST_fsm_state11 = 29'd1024;
parameter    ap_ST_fsm_state12 = 29'd2048;
parameter    ap_ST_fsm_state13 = 29'd4096;
parameter    ap_ST_fsm_state14 = 29'd8192;
parameter    ap_ST_fsm_state15 = 29'd16384;
parameter    ap_ST_fsm_state16 = 29'd32768;
parameter    ap_ST_fsm_state17 = 29'd65536;
parameter    ap_ST_fsm_state18 = 29'd131072;
parameter    ap_ST_fsm_state19 = 29'd262144;
parameter    ap_ST_fsm_state20 = 29'd524288;
parameter    ap_ST_fsm_state21 = 29'd1048576;
parameter    ap_ST_fsm_state22 = 29'd2097152;
parameter    ap_ST_fsm_state23 = 29'd4194304;
parameter    ap_ST_fsm_state24 = 29'd8388608;
parameter    ap_ST_fsm_state25 = 29'd16777216;
parameter    ap_ST_fsm_state26 = 29'd33554432;
parameter    ap_ST_fsm_state27 = 29'd67108864;
parameter    ap_ST_fsm_state28 = 29'd134217728;
parameter    ap_ST_fsm_state29 = 29'd268435456;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
output  [31:0] output_r_TDATA;
output   output_r_TVALID;
input   output_r_TREADY;
output  [3:0] output_r_TKEEP;
output  [3:0] output_r_TSTRB;
output  [0:0] output_r_TUSER;
output  [0:0] output_r_TLAST;
output  [0:0] output_r_TID;
output  [0:0] output_r_TDEST;
input  [31:0] input_r_TDATA;
input   input_r_TVALID;
output   input_r_TREADY;
input  [3:0] input_r_TKEEP;
input  [3:0] input_r_TSTRB;
input  [0:0] input_r_TUSER;
input  [0:0] input_r_TLAST;
input  [0:0] input_r_TID;
input  [0:0] input_r_TDEST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
wire   [63:0] coefs;
reg   [5:0] signal_shift_reg_address0;
reg    signal_shift_reg_ce0;
reg    signal_shift_reg_we0;
reg   [31:0] signal_shift_reg_d0;
wire   [31:0] signal_shift_reg_q1;
reg    gmem_blk_n_AR;
(* fsm_encoding = "none" *) reg   [28:0] ap_CS_fsm;
wire    ap_CS_fsm_state4;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state11;
reg    output_r_TDATA_blk_n;
wire    ap_CS_fsm_state14;
reg   [31:0] state_2_reg_677;
reg   [0:0] tmp_last_V_reg_710;
wire    ap_CS_fsm_state15;
reg   [0:0] ap_phi_mux_tmp_last_V_1_phi_fu_230_p4;
reg   [0:0] p_4_0_0_0112_phi_loc_load_reg_744;
wire    ap_CS_fsm_state29;
reg    input_r_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg   [63:0] coefs_read_reg_611;
wire    ap_CS_fsm_state1;
reg   [63:0] gmem_addr_reg_635;
reg   [31:0] grp_load_fu_382_p1;
reg   [31:0] tmp_out_data_V_1_reg_641;
reg   [3:0] grp_load_fu_386_p1;
reg   [3:0] tmp_out_keep_V_1_reg_647;
reg   [3:0] grp_load_fu_390_p1;
reg   [3:0] tmp_out_strb_V_1_reg_653;
reg   [0:0] grp_load_fu_394_p1;
reg   [0:0] tmp_out_user_V_1_reg_659;
reg   [0:0] grp_load_fu_398_p1;
reg   [0:0] tmp_out_id_V_1_reg_665;
reg   [0:0] grp_load_fu_402_p1;
reg   [0:0] tmp_out_dest_V_1_reg_671;
wire   [31:0] state_2_load_fu_431_p1;
reg   [31:0] tmp_data_V_reg_681;
reg   [3:0] tmp_keep_V_reg_689;
reg   [3:0] tmp_strb_V_reg_696;
reg   [0:0] tmp_user_V_reg_703;
reg   [0:0] tmp_id_V_reg_715;
reg   [0:0] tmp_dest_V_reg_722;
reg  signed [31:0] gmem_addr_read_reg_729;
wire   [31:0] grp_fu_462_p2;
reg   [31:0] mul_ln61_reg_734;
wire    ap_CS_fsm_state13;
wire   [31:0] accumulate_fu_469_p2;
wire   [0:0] p_4_0_0_0112_phi_loc_load_load_fu_533_p1;
wire    ap_CS_fsm_state26;
wire   [31:0] select_ln17_1_fu_542_p3;
wire   [0:0] icmp_ln31_fu_550_p2;
reg   [0:0] icmp_ln31_reg_753;
wire    ap_CS_fsm_state27;
wire   [31:0] select_ln17_fu_555_p3;
wire    ap_CS_fsm_state28;
wire    grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_ap_start;
wire    grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_ap_done;
wire    grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_ap_idle;
wire    grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_ap_ready;
wire    grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_AWVALID;
wire   [63:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_AWADDR;
wire   [0:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_AWID;
wire   [31:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_AWLEN;
wire   [2:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_AWSIZE;
wire   [1:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_AWBURST;
wire   [1:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_AWLOCK;
wire   [3:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_AWCACHE;
wire   [2:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_AWPROT;
wire   [3:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_AWQOS;
wire   [3:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_AWREGION;
wire   [0:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_AWUSER;
wire    grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_WVALID;
wire   [31:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_WDATA;
wire   [3:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_WSTRB;
wire    grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_WLAST;
wire   [0:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_WID;
wire   [0:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_WUSER;
wire    grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_ARVALID;
wire   [63:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_ARADDR;
wire   [0:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_ARID;
wire   [31:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_ARLEN;
wire   [2:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_ARSIZE;
wire   [1:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_ARBURST;
wire   [1:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_ARLOCK;
wire   [3:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_ARCACHE;
wire   [2:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_ARPROT;
wire   [3:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_ARQOS;
wire   [3:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_ARREGION;
wire   [0:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_ARUSER;
wire    grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_RREADY;
wire    grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_BREADY;
wire   [31:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_accumulate_out;
wire    grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_accumulate_out_ap_vld;
wire   [5:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_signal_shift_reg_address0;
wire    grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_signal_shift_reg_ce0;
wire    grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_signal_shift_reg_we0;
wire   [31:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_signal_shift_reg_d0;
wire   [5:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_signal_shift_reg_address1;
wire    grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_signal_shift_reg_ce1;
wire  signed [31:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_grp_fu_462_p_din0;
wire  signed [31:0] grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_grp_fu_462_p_din1;
wire    grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_grp_fu_462_p_ce;
wire    grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_ap_start;
wire    grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_ap_done;
wire    grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_ap_idle;
wire    grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_ap_ready;
wire    grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_AWVALID;
wire   [63:0] grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_AWADDR;
wire   [0:0] grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_AWID;
wire   [31:0] grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_AWLEN;
wire   [2:0] grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_AWSIZE;
wire   [1:0] grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_AWBURST;
wire   [1:0] grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_AWLOCK;
wire   [3:0] grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_AWCACHE;
wire   [2:0] grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_AWPROT;
wire   [3:0] grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_AWQOS;
wire   [3:0] grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_AWREGION;
wire   [0:0] grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_AWUSER;
wire    grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_WVALID;
wire   [31:0] grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_WDATA;
wire   [3:0] grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_WSTRB;
wire    grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_WLAST;
wire   [0:0] grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_WID;
wire   [0:0] grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_WUSER;
wire    grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_ARVALID;
wire   [63:0] grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_ARADDR;
wire   [0:0] grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_ARID;
wire   [31:0] grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_ARLEN;
wire   [2:0] grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_ARSIZE;
wire   [1:0] grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_ARBURST;
wire   [1:0] grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_ARLOCK;
wire   [3:0] grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_ARCACHE;
wire   [2:0] grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_ARPROT;
wire   [3:0] grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_ARQOS;
wire   [3:0] grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_ARREGION;
wire   [0:0] grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_ARUSER;
wire    grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_RREADY;
wire    grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_BREADY;
wire    grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_input_r_TREADY;
wire   [31:0] grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_tmp_data_V_1_out;
wire    grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_tmp_data_V_1_out_ap_vld;
wire   [0:0] grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_p_4_0_0_0112_phi_out;
wire    grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_p_4_0_0_0112_phi_out_ap_vld;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire   [8:0] gmem_RFIFONUM;
wire    gmem_BVALID;
reg    gmem_BREADY;
reg   [0:0] tmp_last_V_1_reg_227;
reg    ap_predicate_op102_write_state14;
reg    ap_predicate_op131_write_state14;
reg    ap_block_state14;
reg    ap_block_state14_io;
reg   [31:0] ap_phi_mux_state_1_phi_fu_241_p4;
reg   [31:0] state_1_reg_238;
reg   [0:0] ap_phi_mux_tmp_dest_V_1_phi_fu_253_p6;
reg   [0:0] tmp_dest_V_1_reg_249;
reg   [0:0] ap_phi_mux_tmp_id_V_1_phi_fu_267_p6;
reg   [0:0] tmp_id_V_1_reg_263;
reg   [0:0] ap_phi_mux_tmp_user_V_1_phi_fu_281_p6;
reg   [0:0] tmp_user_V_1_reg_277;
reg   [3:0] ap_phi_mux_tmp_strb_V_1_phi_fu_295_p6;
reg   [3:0] tmp_strb_V_1_reg_291;
reg   [3:0] ap_phi_mux_tmp_keep_V_1_phi_fu_309_p6;
reg   [3:0] tmp_keep_V_1_reg_305;
reg   [31:0] ap_phi_mux_tmp_data_V_4_phi_fu_323_p6;
reg   [31:0] tmp_data_V_4_reg_319;
reg   [31:0] ap_phi_mux_state_3241_phi_fu_336_p8;
reg   [31:0] state_3241_reg_333;
reg    ap_predicate_op132_write_state15;
reg    ap_block_state15;
reg    ap_block_state15_io;
reg    grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_ap_start_reg;
wire    ap_CS_fsm_state3;
reg    grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_ap_start_reg;
reg   [28:0] ap_NS_fsm;
wire    ap_NS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state16;
wire  signed [63:0] sext_ln61_fu_416_p1;
reg   [31:0] tmp_out_data_V_fu_118;
reg   [31:0] ap_sig_allocacmp_tmp_out_data_V_4;
reg   [3:0] tmp_out_keep_V_fu_122;
reg   [3:0] ap_sig_allocacmp_tmp_out_keep_V_4;
reg   [3:0] tmp_out_strb_V_fu_126;
reg   [3:0] ap_sig_allocacmp_tmp_out_strb_V_4;
reg   [0:0] tmp_out_user_V_fu_130;
reg   [0:0] ap_sig_allocacmp_tmp_out_user_V_4;
reg   [0:0] tmp_out_id_V_fu_134;
reg   [0:0] ap_sig_allocacmp_tmp_out_id_V_4;
reg   [0:0] tmp_out_dest_V_fu_138;
reg   [0:0] ap_sig_allocacmp_tmp_out_dest_V_4;
reg   [31:0] state_fu_142;
wire   [61:0] trunc_ln_fu_406_p4;
reg  signed [31:0] grp_fu_462_p0;
reg  signed [31:0] grp_fu_462_p1;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln46_fu_536_p2;
reg    grp_fu_462_ce;
wire    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
reg    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
reg    ap_ST_fsm_state29_blk;
wire    regslice_both_output_r_V_data_V_U_apdone_blk;
reg    ap_block_state29;
reg   [31:0] output_r_TDATA_int_regslice;
reg    output_r_TVALID_int_regslice;
wire    output_r_TREADY_int_regslice;
wire    regslice_both_output_r_V_data_V_U_vld_out;
wire    regslice_both_output_r_V_keep_V_U_apdone_blk;
reg   [3:0] output_r_TKEEP_int_regslice;
wire    regslice_both_output_r_V_keep_V_U_ack_in_dummy;
wire    regslice_both_output_r_V_keep_V_U_vld_out;
wire    regslice_both_output_r_V_strb_V_U_apdone_blk;
reg   [3:0] output_r_TSTRB_int_regslice;
wire    regslice_both_output_r_V_strb_V_U_ack_in_dummy;
wire    regslice_both_output_r_V_strb_V_U_vld_out;
wire    regslice_both_output_r_V_user_V_U_apdone_blk;
reg   [0:0] output_r_TUSER_int_regslice;
wire    regslice_both_output_r_V_user_V_U_ack_in_dummy;
wire    regslice_both_output_r_V_user_V_U_vld_out;
wire    regslice_both_output_r_V_last_V_U_apdone_blk;
reg   [0:0] output_r_TLAST_int_regslice;
wire    regslice_both_output_r_V_last_V_U_ack_in_dummy;
wire    regslice_both_output_r_V_last_V_U_vld_out;
wire    regslice_both_output_r_V_id_V_U_apdone_blk;
reg   [0:0] output_r_TID_int_regslice;
wire    regslice_both_output_r_V_id_V_U_ack_in_dummy;
wire    regslice_both_output_r_V_id_V_U_vld_out;
wire    regslice_both_output_r_V_dest_V_U_apdone_blk;
reg   [0:0] output_r_TDEST_int_regslice;
wire    regslice_both_output_r_V_dest_V_U_ack_in_dummy;
wire    regslice_both_output_r_V_dest_V_U_vld_out;
wire    regslice_both_input_r_V_data_V_U_apdone_blk;
wire   [31:0] input_r_TDATA_int_regslice;
wire    input_r_TVALID_int_regslice;
reg    input_r_TREADY_int_regslice;
wire    regslice_both_input_r_V_data_V_U_ack_in;
wire    regslice_both_input_r_V_keep_V_U_apdone_blk;
wire   [3:0] input_r_TKEEP_int_regslice;
wire    regslice_both_input_r_V_keep_V_U_vld_out;
wire    regslice_both_input_r_V_keep_V_U_ack_in;
wire    regslice_both_input_r_V_strb_V_U_apdone_blk;
wire   [3:0] input_r_TSTRB_int_regslice;
wire    regslice_both_input_r_V_strb_V_U_vld_out;
wire    regslice_both_input_r_V_strb_V_U_ack_in;
wire    regslice_both_input_r_V_user_V_U_apdone_blk;
wire   [0:0] input_r_TUSER_int_regslice;
wire    regslice_both_input_r_V_user_V_U_vld_out;
wire    regslice_both_input_r_V_user_V_U_ack_in;
wire    regslice_both_input_r_V_last_V_U_apdone_blk;
wire   [0:0] input_r_TLAST_int_regslice;
wire    regslice_both_input_r_V_last_V_U_vld_out;
wire    regslice_both_input_r_V_last_V_U_ack_in;
wire    regslice_both_input_r_V_id_V_U_apdone_blk;
wire   [0:0] input_r_TID_int_regslice;
wire    regslice_both_input_r_V_id_V_U_vld_out;
wire    regslice_both_input_r_V_id_V_U_ack_in;
wire    regslice_both_input_r_V_dest_V_U_apdone_blk;
wire   [0:0] input_r_TDEST_int_regslice;
wire    regslice_both_input_r_V_dest_V_U_vld_out;
wire    regslice_both_input_r_V_dest_V_U_ack_in;
reg    ap_condition_1056;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 29'd1;
#0 grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_ap_start_reg = 1'b0;
#0 grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_ap_start_reg = 1'b0;
end

equalizer_signal_shift_reg_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 33 ),
    .AddressWidth( 6 ))
signal_shift_reg_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(signal_shift_reg_address0),
    .ce0(signal_shift_reg_ce0),
    .we0(signal_shift_reg_we0),
    .d0(signal_shift_reg_d0),
    .address1(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_signal_shift_reg_address1),
    .ce1(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_signal_shift_reg_ce1),
    .q1(signal_shift_reg_q1)
);

equalizer_equalizer_Pipeline_Shift_Accumulate_Loop grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_ap_start),
    .ap_done(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_ap_done),
    .ap_idle(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_ap_idle),
    .ap_ready(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_ap_ready),
    .m_axi_gmem_AWVALID(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_AWVALID),
    .m_axi_gmem_AWREADY(1'b0),
    .m_axi_gmem_AWADDR(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_AWADDR),
    .m_axi_gmem_AWID(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_AWID),
    .m_axi_gmem_AWLEN(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_AWLEN),
    .m_axi_gmem_AWSIZE(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_AWSIZE),
    .m_axi_gmem_AWBURST(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_AWBURST),
    .m_axi_gmem_AWLOCK(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_AWLOCK),
    .m_axi_gmem_AWCACHE(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_AWCACHE),
    .m_axi_gmem_AWPROT(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_AWPROT),
    .m_axi_gmem_AWQOS(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_AWQOS),
    .m_axi_gmem_AWREGION(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_AWREGION),
    .m_axi_gmem_AWUSER(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_AWUSER),
    .m_axi_gmem_WVALID(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_WVALID),
    .m_axi_gmem_WREADY(1'b0),
    .m_axi_gmem_WDATA(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_WDATA),
    .m_axi_gmem_WSTRB(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_WSTRB),
    .m_axi_gmem_WLAST(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_WLAST),
    .m_axi_gmem_WID(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_WID),
    .m_axi_gmem_WUSER(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_WUSER),
    .m_axi_gmem_ARVALID(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_ARVALID),
    .m_axi_gmem_ARREADY(gmem_ARREADY),
    .m_axi_gmem_ARADDR(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_ARADDR),
    .m_axi_gmem_ARID(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_ARID),
    .m_axi_gmem_ARLEN(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_ARLEN),
    .m_axi_gmem_ARSIZE(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_ARSIZE),
    .m_axi_gmem_ARBURST(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_ARBURST),
    .m_axi_gmem_ARLOCK(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_ARLOCK),
    .m_axi_gmem_ARCACHE(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_ARCACHE),
    .m_axi_gmem_ARPROT(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_ARPROT),
    .m_axi_gmem_ARQOS(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_ARQOS),
    .m_axi_gmem_ARREGION(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_ARREGION),
    .m_axi_gmem_ARUSER(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_ARUSER),
    .m_axi_gmem_RVALID(gmem_RVALID),
    .m_axi_gmem_RREADY(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_RREADY),
    .m_axi_gmem_RDATA(gmem_RDATA),
    .m_axi_gmem_RLAST(1'b0),
    .m_axi_gmem_RID(1'd0),
    .m_axi_gmem_RFIFONUM(gmem_RFIFONUM),
    .m_axi_gmem_RUSER(1'd0),
    .m_axi_gmem_RRESP(2'd0),
    .m_axi_gmem_BVALID(1'b0),
    .m_axi_gmem_BREADY(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_BREADY),
    .m_axi_gmem_BRESP(2'd0),
    .m_axi_gmem_BID(1'd0),
    .m_axi_gmem_BUSER(1'd0),
    .coefs(coefs_read_reg_611),
    .accumulate_out(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_accumulate_out),
    .accumulate_out_ap_vld(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_accumulate_out_ap_vld),
    .signal_shift_reg_address0(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_signal_shift_reg_address0),
    .signal_shift_reg_ce0(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_signal_shift_reg_ce0),
    .signal_shift_reg_we0(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_signal_shift_reg_we0),
    .signal_shift_reg_d0(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_signal_shift_reg_d0),
    .signal_shift_reg_address1(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_signal_shift_reg_address1),
    .signal_shift_reg_ce1(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_signal_shift_reg_ce1),
    .signal_shift_reg_q1(signal_shift_reg_q1),
    .grp_fu_462_p_din0(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_grp_fu_462_p_din0),
    .grp_fu_462_p_din1(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_grp_fu_462_p_din1),
    .grp_fu_462_p_dout0(grp_fu_462_p2),
    .grp_fu_462_p_ce(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_grp_fu_462_p_ce)
);

equalizer_equalizer_Pipeline_Coef_Read_Loop grp_equalizer_Pipeline_Coef_Read_Loop_fu_358(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_ap_start),
    .ap_done(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_ap_done),
    .ap_idle(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_ap_idle),
    .ap_ready(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_ap_ready),
    .input_r_TVALID(input_r_TVALID_int_regslice),
    .m_axi_gmem_AWVALID(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_AWVALID),
    .m_axi_gmem_AWREADY(gmem_AWREADY),
    .m_axi_gmem_AWADDR(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_AWADDR),
    .m_axi_gmem_AWID(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_AWID),
    .m_axi_gmem_AWLEN(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_AWLEN),
    .m_axi_gmem_AWSIZE(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_AWSIZE),
    .m_axi_gmem_AWBURST(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_AWBURST),
    .m_axi_gmem_AWLOCK(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_AWLOCK),
    .m_axi_gmem_AWCACHE(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_AWCACHE),
    .m_axi_gmem_AWPROT(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_AWPROT),
    .m_axi_gmem_AWQOS(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_AWQOS),
    .m_axi_gmem_AWREGION(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_AWREGION),
    .m_axi_gmem_AWUSER(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_AWUSER),
    .m_axi_gmem_WVALID(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_WVALID),
    .m_axi_gmem_WREADY(gmem_WREADY),
    .m_axi_gmem_WDATA(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_WDATA),
    .m_axi_gmem_WSTRB(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_WSTRB),
    .m_axi_gmem_WLAST(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_WLAST),
    .m_axi_gmem_WID(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_WID),
    .m_axi_gmem_WUSER(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_WUSER),
    .m_axi_gmem_ARVALID(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_ARVALID),
    .m_axi_gmem_ARREADY(1'b0),
    .m_axi_gmem_ARADDR(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_ARADDR),
    .m_axi_gmem_ARID(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_ARID),
    .m_axi_gmem_ARLEN(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_ARLEN),
    .m_axi_gmem_ARSIZE(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_ARSIZE),
    .m_axi_gmem_ARBURST(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_ARBURST),
    .m_axi_gmem_ARLOCK(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_ARLOCK),
    .m_axi_gmem_ARCACHE(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_ARCACHE),
    .m_axi_gmem_ARPROT(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_ARPROT),
    .m_axi_gmem_ARQOS(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_ARQOS),
    .m_axi_gmem_ARREGION(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_ARREGION),
    .m_axi_gmem_ARUSER(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_ARUSER),
    .m_axi_gmem_RVALID(1'b0),
    .m_axi_gmem_RREADY(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_RREADY),
    .m_axi_gmem_RDATA(32'd0),
    .m_axi_gmem_RLAST(1'b0),
    .m_axi_gmem_RID(1'd0),
    .m_axi_gmem_RFIFONUM(9'd0),
    .m_axi_gmem_RUSER(1'd0),
    .m_axi_gmem_RRESP(2'd0),
    .m_axi_gmem_BVALID(gmem_BVALID),
    .m_axi_gmem_BREADY(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_BREADY),
    .m_axi_gmem_BRESP(2'd0),
    .m_axi_gmem_BID(1'd0),
    .m_axi_gmem_BUSER(1'd0),
    .tmp_data_V(tmp_data_V_reg_681),
    .coefs(coefs_read_reg_611),
    .input_r_TDATA(input_r_TDATA_int_regslice),
    .input_r_TREADY(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_input_r_TREADY),
    .input_r_TKEEP(input_r_TKEEP_int_regslice),
    .input_r_TSTRB(input_r_TSTRB_int_regslice),
    .input_r_TUSER(input_r_TUSER_int_regslice),
    .input_r_TLAST(input_r_TLAST_int_regslice),
    .input_r_TID(input_r_TID_int_regslice),
    .input_r_TDEST(input_r_TDEST_int_regslice),
    .tmp_data_V_1_out(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_tmp_data_V_1_out),
    .tmp_data_V_1_out_ap_vld(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_tmp_data_V_1_out_ap_vld),
    .p_4_0_0_0112_phi_out(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_p_4_0_0_0112_phi_out),
    .p_4_0_0_0112_phi_out_ap_vld(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_p_4_0_0_0112_phi_out_ap_vld)
);

equalizer_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .coefs(coefs)
);

equalizer_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .USER_DW( 32 ),
    .USER_AW( 64 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARLEN(gmem_ARLEN),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RFIFONUM(gmem_RFIFONUM),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_AWADDR),
    .I_AWLEN(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_AWLEN),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_WDATA),
    .I_WSTRB(grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_WSTRB),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U18(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_462_p0),
    .din1(grp_fu_462_p1),
    .ce(grp_fu_462_ce),
    .dout(grp_fu_462_p2)
);

equalizer_regslice_both #(
    .DataWidth( 32 ))
regslice_both_output_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TDATA_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(output_r_TREADY_int_regslice),
    .data_out(output_r_TDATA),
    .vld_out(regslice_both_output_r_V_data_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_data_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 4 ))
regslice_both_output_r_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TKEEP_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_r_V_keep_V_U_ack_in_dummy),
    .data_out(output_r_TKEEP),
    .vld_out(regslice_both_output_r_V_keep_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_keep_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 4 ))
regslice_both_output_r_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TSTRB_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_r_V_strb_V_U_ack_in_dummy),
    .data_out(output_r_TSTRB),
    .vld_out(regslice_both_output_r_V_strb_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_strb_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_r_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TUSER_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_r_V_user_V_U_ack_in_dummy),
    .data_out(output_r_TUSER),
    .vld_out(regslice_both_output_r_V_user_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_user_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_r_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TLAST_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_r_V_last_V_U_ack_in_dummy),
    .data_out(output_r_TLAST),
    .vld_out(regslice_both_output_r_V_last_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_last_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_r_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TID_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_r_V_id_V_U_ack_in_dummy),
    .data_out(output_r_TID),
    .vld_out(regslice_both_output_r_V_id_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_id_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_r_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TDEST_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_r_V_dest_V_U_ack_in_dummy),
    .data_out(output_r_TDEST),
    .vld_out(regslice_both_output_r_V_dest_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_dest_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 32 ))
regslice_both_input_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TDATA),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_data_V_U_ack_in),
    .data_out(input_r_TDATA_int_regslice),
    .vld_out(input_r_TVALID_int_regslice),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_data_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 4 ))
regslice_both_input_r_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TKEEP),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_keep_V_U_ack_in),
    .data_out(input_r_TKEEP_int_regslice),
    .vld_out(regslice_both_input_r_V_keep_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_keep_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 4 ))
regslice_both_input_r_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TSTRB),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_strb_V_U_ack_in),
    .data_out(input_r_TSTRB_int_regslice),
    .vld_out(regslice_both_input_r_V_strb_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_strb_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_r_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TUSER),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_user_V_U_ack_in),
    .data_out(input_r_TUSER_int_regslice),
    .vld_out(regslice_both_input_r_V_user_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_user_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_r_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TLAST),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_last_V_U_ack_in),
    .data_out(input_r_TLAST_int_regslice),
    .vld_out(regslice_both_input_r_V_last_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_last_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_r_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TID),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_id_V_U_ack_in),
    .data_out(input_r_TID_int_regslice),
    .vld_out(regslice_both_input_r_V_id_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_id_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_r_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TDEST),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_dest_V_U_ack_in),
    .data_out(input_r_TDEST_int_regslice),
    .vld_out(regslice_both_input_r_V_dest_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state16) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_ap_start_reg <= 1'b1;
        end else if ((grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_ap_ready == 1'b1)) begin
            grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_ap_start_reg <= 1'b0;
    end else begin
        if (((state_2_load_fu_431_p1 == 32'd4096) & (1'b1 == ap_CS_fsm_state2) & (input_r_TVALID_int_regslice == 1'b1))) begin
            grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_ap_start_reg <= 1'b1;
        end else if ((grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_ap_ready == 1'b1)) begin
            grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state14_io) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op131_write_state14 == 1'b1)) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op102_write_state14 == 1'b1))) & (1'b1 == ap_CS_fsm_state14) & (tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096))) begin
        state_1_reg_238 <= 32'd4096;
    end else if ((~(state_2_load_fu_431_p1 == 32'd4096) & ~(state_2_load_fu_431_p1 == 32'd17) & ~(state_2_load_fu_431_p1 == 32'd0) & (1'b1 == ap_CS_fsm_state2) & (input_r_TVALID_int_regslice == 1'b1))) begin
        state_1_reg_238 <= state_fu_142;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state14_io) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op131_write_state14 == 1'b1)) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op102_write_state14 == 1'b1))) & (1'b1 == ap_CS_fsm_state14) & (((ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd0) & (tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096)) | (~(state_2_reg_677 == 32'd0) & ~(state_2_reg_677 == 32'd17) & ~(state_2_reg_677 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd0))))) begin
        state_3241_reg_333 <= ap_phi_mux_state_1_phi_fu_241_p4;
    end else if (((p_4_0_0_0112_phi_loc_load_load_fu_533_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        state_3241_reg_333 <= select_ln17_1_fu_542_p3;
    end else if (((1'b1 == ap_CS_fsm_state28) & (tmp_last_V_reg_710 == 1'd0))) begin
        state_3241_reg_333 <= select_ln17_fu_555_p3;
    end else if ((~((1'b1 == ap_block_state15_io) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op132_write_state15 == 1'b1))) & (1'b1 == ap_CS_fsm_state15) & (tmp_last_V_reg_710 == 1'd0) & (state_2_reg_677 == 32'd4096))) begin
        state_3241_reg_333 <= 32'd4096;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        state_fu_142 <= 32'd0;
    end else if ((~((1'b1 == ap_block_state15_io) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op132_write_state15 == 1'b1))) & (1'b1 == ap_CS_fsm_state15) & (((((p_4_0_0_0112_phi_loc_load_reg_744 == 1'd0) & (state_2_reg_677 == 32'd17)) | ((tmp_last_V_reg_710 == 1'd0) & (state_2_reg_677 == 32'd4096))) | (~(state_2_reg_677 == 32'd0) & ~(state_2_reg_677 == 32'd17) & (tmp_last_V_1_reg_227 == 1'd0))) | ((tmp_last_V_reg_710 == 1'd0) & (state_2_reg_677 == 32'd0))))) begin
        state_fu_142 <= ap_phi_mux_state_3241_phi_fu_336_p8;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state14_io) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op131_write_state14 == 1'b1)) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op102_write_state14 == 1'b1))) & (1'b1 == ap_CS_fsm_state14) & ((~(state_2_reg_677 == 32'd0) & ~(state_2_reg_677 == 32'd17) & ~(state_2_reg_677 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd1) & (tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096))))) begin
        tmp_data_V_4_reg_319 <= grp_load_fu_382_p1;
    end else if ((((p_4_0_0_0112_phi_loc_load_load_fu_533_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state26)) | ((1'b1 == ap_CS_fsm_state28) & (tmp_last_V_reg_710 == 1'd1)))) begin
        tmp_data_V_4_reg_319 <= tmp_out_data_V_1_reg_641;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state14_io) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op131_write_state14 == 1'b1)) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op102_write_state14 == 1'b1))) & (1'b1 == ap_CS_fsm_state14) & ((~(state_2_reg_677 == 32'd0) & ~(state_2_reg_677 == 32'd17) & ~(state_2_reg_677 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd1) & (tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096))))) begin
        tmp_dest_V_1_reg_249 <= grp_load_fu_402_p1;
    end else if ((((p_4_0_0_0112_phi_loc_load_load_fu_533_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state26)) | ((1'b1 == ap_CS_fsm_state28) & (tmp_last_V_reg_710 == 1'd1)))) begin
        tmp_dest_V_1_reg_249 <= tmp_out_dest_V_1_reg_671;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state14_io) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op131_write_state14 == 1'b1)) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op102_write_state14 == 1'b1))) & (1'b1 == ap_CS_fsm_state14) & ((~(state_2_reg_677 == 32'd0) & ~(state_2_reg_677 == 32'd17) & ~(state_2_reg_677 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd1) & (tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096))))) begin
        tmp_id_V_1_reg_263 <= grp_load_fu_398_p1;
    end else if ((((p_4_0_0_0112_phi_loc_load_load_fu_533_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state26)) | ((1'b1 == ap_CS_fsm_state28) & (tmp_last_V_reg_710 == 1'd1)))) begin
        tmp_id_V_1_reg_263 <= tmp_out_id_V_1_reg_665;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state14_io) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op131_write_state14 == 1'b1)) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op102_write_state14 == 1'b1))) & (1'b1 == ap_CS_fsm_state14) & ((~(state_2_reg_677 == 32'd0) & ~(state_2_reg_677 == 32'd17) & ~(state_2_reg_677 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd1) & (tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096))))) begin
        tmp_keep_V_1_reg_305 <= grp_load_fu_386_p1;
    end else if ((((p_4_0_0_0112_phi_loc_load_load_fu_533_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state26)) | ((1'b1 == ap_CS_fsm_state28) & (tmp_last_V_reg_710 == 1'd1)))) begin
        tmp_keep_V_1_reg_305 <= tmp_out_keep_V_1_reg_647;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state14_io) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op131_write_state14 == 1'b1)) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op102_write_state14 == 1'b1))) & (1'b1 == ap_CS_fsm_state14) & (tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096))) begin
        tmp_last_V_1_reg_227 <= 1'd1;
    end else if ((~(state_2_load_fu_431_p1 == 32'd4096) & ~(state_2_load_fu_431_p1 == 32'd17) & ~(state_2_load_fu_431_p1 == 32'd0) & (1'b1 == ap_CS_fsm_state2) & (input_r_TVALID_int_regslice == 1'b1))) begin
        tmp_last_V_1_reg_227 <= input_r_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state14_io) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op131_write_state14 == 1'b1)) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op102_write_state14 == 1'b1))) & (1'b1 == ap_CS_fsm_state14) & ((~(state_2_reg_677 == 32'd0) & ~(state_2_reg_677 == 32'd17) & ~(state_2_reg_677 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd1) & (tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096))))) begin
        tmp_strb_V_1_reg_291 <= grp_load_fu_390_p1;
    end else if ((((p_4_0_0_0112_phi_loc_load_load_fu_533_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state26)) | ((1'b1 == ap_CS_fsm_state28) & (tmp_last_V_reg_710 == 1'd1)))) begin
        tmp_strb_V_1_reg_291 <= tmp_out_strb_V_1_reg_653;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state14_io) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op131_write_state14 == 1'b1)) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op102_write_state14 == 1'b1))) & (1'b1 == ap_CS_fsm_state14) & ((~(state_2_reg_677 == 32'd0) & ~(state_2_reg_677 == 32'd17) & ~(state_2_reg_677 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd1) & (tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096))))) begin
        tmp_user_V_1_reg_277 <= grp_load_fu_394_p1;
    end else if ((((p_4_0_0_0112_phi_loc_load_load_fu_533_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state26)) | ((1'b1 == ap_CS_fsm_state28) & (tmp_last_V_reg_710 == 1'd1)))) begin
        tmp_user_V_1_reg_277 <= tmp_out_user_V_1_reg_659;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        coefs_read_reg_611 <= coefs;
        gmem_addr_reg_635 <= sext_ln61_fu_416_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        gmem_addr_read_reg_729 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        icmp_ln31_reg_753 <= icmp_ln31_fu_550_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        mul_ln61_reg_734 <= grp_fu_462_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        p_4_0_0_0112_phi_loc_load_reg_744 <= grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_p_4_0_0_0112_phi_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        state_2_reg_677 <= state_fu_142;
        tmp_data_V_reg_681 <= input_r_TDATA_int_regslice;
        tmp_dest_V_reg_722 <= input_r_TDEST_int_regslice;
        tmp_id_V_reg_715 <= input_r_TID_int_regslice;
        tmp_keep_V_reg_689 <= input_r_TKEEP_int_regslice;
        tmp_last_V_reg_710 <= input_r_TLAST_int_regslice;
        tmp_out_data_V_1_reg_641 <= grp_load_fu_382_p1;
        tmp_out_dest_V_1_reg_671 <= grp_load_fu_402_p1;
        tmp_out_id_V_1_reg_665 <= grp_load_fu_398_p1;
        tmp_out_keep_V_1_reg_647 <= grp_load_fu_386_p1;
        tmp_out_strb_V_1_reg_653 <= grp_load_fu_390_p1;
        tmp_out_user_V_1_reg_659 <= grp_load_fu_394_p1;
        tmp_strb_V_reg_696 <= input_r_TSTRB_int_regslice;
        tmp_user_V_reg_703 <= input_r_TUSER_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b1 == ap_block_state14_io) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op131_write_state14 == 1'b1)) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op102_write_state14 == 1'b1))) & (1'b1 == ap_CS_fsm_state14) & (tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096)) | (~((1'b1 == ap_block_state14_io) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op131_write_state14 == 1'b1)) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op102_write_state14 == 1'b1))) & (1'b1 == ap_CS_fsm_state14) & (tmp_last_V_reg_710 == 1'd0) & (state_2_reg_677 == 32'd4096)))) begin
        tmp_out_data_V_fu_118 <= accumulate_fu_469_p2;
        tmp_out_dest_V_fu_138 <= tmp_dest_V_reg_722;
        tmp_out_id_V_fu_134 <= tmp_id_V_reg_715;
        tmp_out_keep_V_fu_122 <= tmp_keep_V_reg_689;
        tmp_out_strb_V_fu_126 <= tmp_strb_V_reg_696;
        tmp_out_user_V_fu_130 <= tmp_user_V_reg_703;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_block_state14_io) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op131_write_state14 == 1'b1)) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op102_write_state14 == 1'b1)))) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state15_io) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op132_write_state15 == 1'b1)))) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

assign ap_ST_fsm_state16_blk = 1'b0;

always @ (*) begin
    if ((grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_ap_done == 1'b0)) begin
        ap_ST_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_fsm_state17_blk = 1'b0;
    end
end

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

assign ap_ST_fsm_state1_blk = 1'b0;

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

always @ (*) begin
    if (((output_r_TREADY_int_regslice == 1'b0) | (regslice_both_output_r_V_data_V_U_apdone_blk == 1'b1))) begin
        ap_ST_fsm_state29_blk = 1'b1;
    end else begin
        ap_ST_fsm_state29_blk = 1'b0;
    end
end

always @ (*) begin
    if ((input_r_TVALID_int_regslice == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096))) begin
        ap_phi_mux_state_1_phi_fu_241_p4 = 32'd4096;
    end else begin
        ap_phi_mux_state_1_phi_fu_241_p4 = state_1_reg_238;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (tmp_last_V_reg_710 == 1'd0) & (state_2_reg_677 == 32'd4096))) begin
        ap_phi_mux_state_3241_phi_fu_336_p8 = 32'd4096;
    end else begin
        ap_phi_mux_state_3241_phi_fu_336_p8 = state_3241_reg_333;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & ((~(state_2_reg_677 == 32'd0) & ~(state_2_reg_677 == 32'd17) & ~(state_2_reg_677 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd1) & (tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096))))) begin
        ap_phi_mux_tmp_data_V_4_phi_fu_323_p6 = grp_load_fu_382_p1;
    end else begin
        ap_phi_mux_tmp_data_V_4_phi_fu_323_p6 = tmp_data_V_4_reg_319;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & ((~(state_2_reg_677 == 32'd0) & ~(state_2_reg_677 == 32'd17) & ~(state_2_reg_677 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd1) & (tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096))))) begin
        ap_phi_mux_tmp_dest_V_1_phi_fu_253_p6 = grp_load_fu_402_p1;
    end else begin
        ap_phi_mux_tmp_dest_V_1_phi_fu_253_p6 = tmp_dest_V_1_reg_249;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & ((~(state_2_reg_677 == 32'd0) & ~(state_2_reg_677 == 32'd17) & ~(state_2_reg_677 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd1) & (tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096))))) begin
        ap_phi_mux_tmp_id_V_1_phi_fu_267_p6 = grp_load_fu_398_p1;
    end else begin
        ap_phi_mux_tmp_id_V_1_phi_fu_267_p6 = tmp_id_V_1_reg_263;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & ((~(state_2_reg_677 == 32'd0) & ~(state_2_reg_677 == 32'd17) & ~(state_2_reg_677 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd1) & (tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096))))) begin
        ap_phi_mux_tmp_keep_V_1_phi_fu_309_p6 = grp_load_fu_386_p1;
    end else begin
        ap_phi_mux_tmp_keep_V_1_phi_fu_309_p6 = tmp_keep_V_1_reg_305;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096))) begin
        ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 = 1'd1;
    end else begin
        ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 = tmp_last_V_1_reg_227;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & ((~(state_2_reg_677 == 32'd0) & ~(state_2_reg_677 == 32'd17) & ~(state_2_reg_677 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd1) & (tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096))))) begin
        ap_phi_mux_tmp_strb_V_1_phi_fu_295_p6 = grp_load_fu_390_p1;
    end else begin
        ap_phi_mux_tmp_strb_V_1_phi_fu_295_p6 = tmp_strb_V_1_reg_291;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & ((~(state_2_reg_677 == 32'd0) & ~(state_2_reg_677 == 32'd17) & ~(state_2_reg_677 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd1) & (tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096))))) begin
        ap_phi_mux_tmp_user_V_1_phi_fu_281_p6 = grp_load_fu_394_p1;
    end else begin
        ap_phi_mux_tmp_user_V_1_phi_fu_281_p6 = tmp_user_V_1_reg_277;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096))) begin
        ap_sig_allocacmp_tmp_out_data_V_4 = accumulate_fu_469_p2;
    end else begin
        ap_sig_allocacmp_tmp_out_data_V_4 = tmp_out_data_V_fu_118;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096))) begin
        ap_sig_allocacmp_tmp_out_dest_V_4 = tmp_dest_V_reg_722;
    end else begin
        ap_sig_allocacmp_tmp_out_dest_V_4 = tmp_out_dest_V_fu_138;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096))) begin
        ap_sig_allocacmp_tmp_out_id_V_4 = tmp_id_V_reg_715;
    end else begin
        ap_sig_allocacmp_tmp_out_id_V_4 = tmp_out_id_V_fu_134;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096))) begin
        ap_sig_allocacmp_tmp_out_keep_V_4 = tmp_keep_V_reg_689;
    end else begin
        ap_sig_allocacmp_tmp_out_keep_V_4 = tmp_out_keep_V_fu_122;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096))) begin
        ap_sig_allocacmp_tmp_out_strb_V_4 = tmp_strb_V_reg_696;
    end else begin
        ap_sig_allocacmp_tmp_out_strb_V_4 = tmp_out_strb_V_fu_126;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096))) begin
        ap_sig_allocacmp_tmp_out_user_V_4 = tmp_user_V_reg_703;
    end else begin
        ap_sig_allocacmp_tmp_out_user_V_4 = tmp_out_user_V_fu_130;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        gmem_ARADDR = gmem_addr_reg_635;
    end else if (((1'b1 == ap_CS_fsm_state3) | ((state_2_load_fu_431_p1 == 32'd4096) & (1'b1 == ap_CS_fsm_state2)))) begin
        gmem_ARADDR = grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_ARADDR;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        gmem_ARLEN = 32'd1;
    end else if (((1'b1 == ap_CS_fsm_state3) | ((state_2_load_fu_431_p1 == 32'd4096) & (1'b1 == ap_CS_fsm_state2)))) begin
        gmem_ARLEN = grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_ARLEN;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        gmem_ARVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state3) | ((state_2_load_fu_431_p1 == 32'd4096) & (1'b1 == ap_CS_fsm_state2)))) begin
        gmem_ARVALID = grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_ARVALID;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17))) begin
        gmem_AWVALID = grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_AWVALID;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17))) begin
        gmem_BREADY = grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_BREADY;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        gmem_RREADY = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state3) | ((state_2_load_fu_431_p1 == 32'd4096) & (1'b1 == ap_CS_fsm_state2)))) begin
        gmem_RREADY = grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_m_axi_gmem_RREADY;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17))) begin
        gmem_WVALID = grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_m_axi_gmem_WVALID;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_462_ce = grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_grp_fu_462_p_ce;
    end else begin
        grp_fu_462_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_462_p0 = grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_grp_fu_462_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_462_p0 = gmem_addr_read_reg_729;
    end else begin
        grp_fu_462_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_462_p1 = grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_grp_fu_462_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_462_p1 = tmp_data_V_reg_681;
    end else begin
        grp_fu_462_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & ((~(state_2_reg_677 == 32'd0) & ~(state_2_reg_677 == 32'd17) & ~(state_2_reg_677 == 32'd4096)) | ((tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096))))) begin
        grp_load_fu_382_p1 = ap_sig_allocacmp_tmp_out_data_V_4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_load_fu_382_p1 = tmp_out_data_V_fu_118;
    end else begin
        grp_load_fu_382_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & ((~(state_2_reg_677 == 32'd0) & ~(state_2_reg_677 == 32'd17) & ~(state_2_reg_677 == 32'd4096)) | ((tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096))))) begin
        grp_load_fu_386_p1 = ap_sig_allocacmp_tmp_out_keep_V_4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_load_fu_386_p1 = tmp_out_keep_V_fu_122;
    end else begin
        grp_load_fu_386_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & ((~(state_2_reg_677 == 32'd0) & ~(state_2_reg_677 == 32'd17) & ~(state_2_reg_677 == 32'd4096)) | ((tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096))))) begin
        grp_load_fu_390_p1 = ap_sig_allocacmp_tmp_out_strb_V_4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_load_fu_390_p1 = tmp_out_strb_V_fu_126;
    end else begin
        grp_load_fu_390_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & ((~(state_2_reg_677 == 32'd0) & ~(state_2_reg_677 == 32'd17) & ~(state_2_reg_677 == 32'd4096)) | ((tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096))))) begin
        grp_load_fu_394_p1 = ap_sig_allocacmp_tmp_out_user_V_4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_load_fu_394_p1 = tmp_out_user_V_fu_130;
    end else begin
        grp_load_fu_394_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & ((~(state_2_reg_677 == 32'd0) & ~(state_2_reg_677 == 32'd17) & ~(state_2_reg_677 == 32'd4096)) | ((tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096))))) begin
        grp_load_fu_398_p1 = ap_sig_allocacmp_tmp_out_id_V_4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_load_fu_398_p1 = tmp_out_id_V_fu_134;
    end else begin
        grp_load_fu_398_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & ((~(state_2_reg_677 == 32'd0) & ~(state_2_reg_677 == 32'd17) & ~(state_2_reg_677 == 32'd4096)) | ((tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096))))) begin
        grp_load_fu_402_p1 = ap_sig_allocacmp_tmp_out_dest_V_4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_load_fu_402_p1 = tmp_out_dest_V_fu_138;
    end else begin
        grp_load_fu_402_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        input_r_TDATA_blk_n = input_r_TVALID_int_regslice;
    end else begin
        input_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (input_r_TVALID_int_regslice == 1'b1))) begin
        input_r_TREADY_int_regslice = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        input_r_TREADY_int_regslice = grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_input_r_TREADY;
    end else begin
        input_r_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state15) & (tmp_last_V_reg_710 == 1'd0) & (state_2_reg_677 == 32'd4096)) | ((1'b1 == ap_CS_fsm_state14) & (((((p_4_0_0_0112_phi_loc_load_reg_744 == 1'd1) & (state_2_reg_677 == 32'd17)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd1) & (tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096))) | (~(state_2_reg_677 == 32'd0) & ~(state_2_reg_677 == 32'd17) & ~(state_2_reg_677 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd1))) | ((tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd0)))) | ((1'b1 == ap_CS_fsm_state14) & (tmp_last_V_reg_710 == 1'd0) & (state_2_reg_677 == 32'd4096)))) begin
        output_r_TDATA_blk_n = output_r_TREADY_int_regslice;
    end else begin
        output_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1056)) begin
        if ((ap_predicate_op131_write_state14 == 1'b1)) begin
            output_r_TDATA_int_regslice = ap_phi_mux_tmp_data_V_4_phi_fu_323_p6;
        end else if ((ap_predicate_op102_write_state14 == 1'b1)) begin
            output_r_TDATA_int_regslice = accumulate_fu_469_p2;
        end else begin
            output_r_TDATA_int_regslice = 'bx;
        end
    end else begin
        output_r_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1056)) begin
        if ((ap_predicate_op131_write_state14 == 1'b1)) begin
            output_r_TDEST_int_regslice = ap_phi_mux_tmp_dest_V_1_phi_fu_253_p6;
        end else if ((ap_predicate_op102_write_state14 == 1'b1)) begin
            output_r_TDEST_int_regslice = tmp_dest_V_reg_722;
        end else begin
            output_r_TDEST_int_regslice = 'bx;
        end
    end else begin
        output_r_TDEST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1056)) begin
        if ((ap_predicate_op131_write_state14 == 1'b1)) begin
            output_r_TID_int_regslice = ap_phi_mux_tmp_id_V_1_phi_fu_267_p6;
        end else if ((ap_predicate_op102_write_state14 == 1'b1)) begin
            output_r_TID_int_regslice = tmp_id_V_reg_715;
        end else begin
            output_r_TID_int_regslice = 'bx;
        end
    end else begin
        output_r_TID_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1056)) begin
        if ((ap_predicate_op131_write_state14 == 1'b1)) begin
            output_r_TKEEP_int_regslice = ap_phi_mux_tmp_keep_V_1_phi_fu_309_p6;
        end else if ((ap_predicate_op102_write_state14 == 1'b1)) begin
            output_r_TKEEP_int_regslice = tmp_keep_V_reg_689;
        end else begin
            output_r_TKEEP_int_regslice = 'bx;
        end
    end else begin
        output_r_TKEEP_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1056)) begin
        if ((ap_predicate_op131_write_state14 == 1'b1)) begin
            output_r_TLAST_int_regslice = 1'd1;
        end else if ((ap_predicate_op102_write_state14 == 1'b1)) begin
            output_r_TLAST_int_regslice = 1'd0;
        end else begin
            output_r_TLAST_int_regslice = 'bx;
        end
    end else begin
        output_r_TLAST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1056)) begin
        if ((ap_predicate_op131_write_state14 == 1'b1)) begin
            output_r_TSTRB_int_regslice = ap_phi_mux_tmp_strb_V_1_phi_fu_295_p6;
        end else if ((ap_predicate_op102_write_state14 == 1'b1)) begin
            output_r_TSTRB_int_regslice = tmp_strb_V_reg_696;
        end else begin
            output_r_TSTRB_int_regslice = 'bx;
        end
    end else begin
        output_r_TSTRB_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1056)) begin
        if ((ap_predicate_op131_write_state14 == 1'b1)) begin
            output_r_TUSER_int_regslice = ap_phi_mux_tmp_user_V_1_phi_fu_281_p6;
        end else if ((ap_predicate_op102_write_state14 == 1'b1)) begin
            output_r_TUSER_int_regslice = tmp_user_V_reg_703;
        end else begin
            output_r_TUSER_int_regslice = 'bx;
        end
    end else begin
        output_r_TUSER_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state14_io) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op131_write_state14 == 1'b1)) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op102_write_state14 == 1'b1))) & (ap_predicate_op131_write_state14 == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | (~((1'b1 == ap_block_state14_io) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op131_write_state14 == 1'b1)) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op102_write_state14 == 1'b1))) & (ap_predicate_op102_write_state14 == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        output_r_TVALID_int_regslice = 1'b1;
    end else begin
        output_r_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        signal_shift_reg_address0 = 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        signal_shift_reg_address0 = grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_signal_shift_reg_address0;
    end else begin
        signal_shift_reg_address0 = 'bx;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        signal_shift_reg_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        signal_shift_reg_ce0 = grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_signal_shift_reg_ce0;
    end else begin
        signal_shift_reg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        signal_shift_reg_d0 = tmp_data_V_reg_681;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        signal_shift_reg_d0 = grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_signal_shift_reg_d0;
    end else begin
        signal_shift_reg_d0 = 'bx;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        signal_shift_reg_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        signal_shift_reg_we0 = grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_signal_shift_reg_we0;
    end else begin
        signal_shift_reg_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((state_2_load_fu_431_p1 == 32'd0) & (1'b1 == ap_CS_fsm_state2) & (input_r_TVALID_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else if (((state_2_load_fu_431_p1 == 32'd17) & (1'b1 == ap_CS_fsm_state2) & (input_r_TVALID_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else if ((~(state_2_load_fu_431_p1 == 32'd4096) & ~(state_2_load_fu_431_p1 == 32'd17) & ~(state_2_load_fu_431_p1 == 32'd0) & (1'b1 == ap_CS_fsm_state2) & (input_r_TVALID_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else if (((state_2_load_fu_431_p1 == 32'd4096) & (1'b1 == ap_CS_fsm_state2) & (input_r_TVALID_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if ((~((1'b1 == ap_block_state14_io) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op131_write_state14 == 1'b1)) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op102_write_state14 == 1'b1))) & (1'b1 == ap_CS_fsm_state14) & (((((p_4_0_0_0112_phi_loc_load_reg_744 == 1'd1) & (state_2_reg_677 == 32'd17)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd1) & (tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096))) | (~(state_2_reg_677 == 32'd0) & ~(state_2_reg_677 == 32'd17) & ~(state_2_reg_677 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd1))) | ((tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else if ((~((1'b1 == ap_block_state14_io) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op131_write_state14 == 1'b1)) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op102_write_state14 == 1'b1))) & (1'b1 == ap_CS_fsm_state14) & ((~(state_2_reg_677 == 32'd0) & ~(state_2_reg_677 == 32'd17) & (ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd0)) | ((tmp_last_V_reg_710 == 1'd0) & (state_2_reg_677 == 32'd4096))))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if ((~((1'b1 == ap_block_state15_io) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op132_write_state15 == 1'b1))) & (1'b1 == ap_CS_fsm_state15) & (((((p_4_0_0_0112_phi_loc_load_reg_744 == 1'd0) & (state_2_reg_677 == 32'd17)) | ((tmp_last_V_reg_710 == 1'd0) & (state_2_reg_677 == 32'd4096))) | (~(state_2_reg_677 == 32'd0) & ~(state_2_reg_677 == 32'd17) & (tmp_last_V_1_reg_227 == 1'd0))) | ((tmp_last_V_reg_710 == 1'd0) & (state_2_reg_677 == 32'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((p_4_0_0_0112_phi_loc_load_load_fu_533_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (tmp_last_V_reg_710 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state29 : begin
            if ((~((output_r_TREADY_int_regslice == 1'b0) | (regslice_both_output_r_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign accumulate_fu_469_p2 = (mul_ln61_reg_734 + grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_accumulate_out);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_NS_fsm_state16 = ap_NS_fsm[32'd15];

always @ (*) begin
    ap_block_state14 = (((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op131_write_state14 == 1'b1)) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op102_write_state14 == 1'b1)));
end

always @ (*) begin
    ap_block_state14_io = (((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op131_write_state14 == 1'b1)) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op102_write_state14 == 1'b1)));
end

always @ (*) begin
    ap_block_state15 = ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op132_write_state15 == 1'b1));
end

always @ (*) begin
    ap_block_state15_io = ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op132_write_state15 == 1'b1));
end

always @ (*) begin
    ap_block_state29 = ((output_r_TREADY_int_regslice == 1'b0) | (regslice_both_output_r_V_data_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_condition_1056 = (~(((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op131_write_state14 == 1'b1)) | ((output_r_TREADY_int_regslice == 1'b0) & (ap_predicate_op102_write_state14 == 1'b1))) & (1'b1 == ap_CS_fsm_state14));
end

always @ (*) begin
    ap_predicate_op102_write_state14 = ((tmp_last_V_reg_710 == 1'd0) & (state_2_reg_677 == 32'd4096));
end

always @ (*) begin
    ap_predicate_op131_write_state14 = (((((p_4_0_0_0112_phi_loc_load_reg_744 == 1'd1) & (state_2_reg_677 == 32'd17)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd1) & (tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd4096))) | (~(state_2_reg_677 == 32'd0) & ~(state_2_reg_677 == 32'd17) & ~(state_2_reg_677 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_230_p4 == 1'd1))) | ((tmp_last_V_reg_710 == 1'd1) & (state_2_reg_677 == 32'd0)));
end

always @ (*) begin
    ap_predicate_op132_write_state15 = ((tmp_last_V_reg_710 == 1'd0) & (state_2_reg_677 == 32'd4096));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_ap_start = grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_ap_start_reg;

assign grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_ap_start = grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_348_ap_start_reg;

assign icmp_ln31_fu_550_p2 = ((tmp_data_V_reg_681 == 32'd48879) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_536_p2 = ((grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_tmp_data_V_1_out == 32'd43962) ? 1'b1 : 1'b0);

assign input_r_TREADY = regslice_both_input_r_V_data_V_U_ack_in;

assign output_r_TVALID = regslice_both_output_r_V_data_V_U_vld_out;

assign p_4_0_0_0112_phi_loc_load_load_fu_533_p1 = grp_equalizer_Pipeline_Coef_Read_Loop_fu_358_p_4_0_0_0112_phi_out;

assign select_ln17_1_fu_542_p3 = ((icmp_ln46_fu_536_p2[0:0] == 1'b1) ? 32'd4096 : 32'd17);

assign select_ln17_fu_555_p3 = ((icmp_ln31_reg_753[0:0] == 1'b1) ? 32'd17 : 32'd0);

assign sext_ln61_fu_416_p1 = $signed(trunc_ln_fu_406_p4);

assign state_2_load_fu_431_p1 = state_fu_142;

assign trunc_ln_fu_406_p4 = {{coefs[63:2]}};

endmodule //equalizer
