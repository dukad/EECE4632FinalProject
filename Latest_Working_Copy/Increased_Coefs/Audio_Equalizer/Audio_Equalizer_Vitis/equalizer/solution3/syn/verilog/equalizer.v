// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="equalizer_equalizer,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=2009,HLS_SYN_LUT=2683,HLS_VERSION=2022_1}" *)

module equalizer (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        output_r_TDATA,
        output_r_TVALID,
        output_r_TREADY,
        output_r_TKEEP,
        output_r_TSTRB,
        output_r_TUSER,
        output_r_TLAST,
        output_r_TID,
        output_r_TDEST,
        input_r_TDATA,
        input_r_TVALID,
        input_r_TREADY,
        input_r_TKEEP,
        input_r_TSTRB,
        input_r_TUSER,
        input_r_TLAST,
        input_r_TID,
        input_r_TDEST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 46'd1;
parameter    ap_ST_fsm_state2 = 46'd2;
parameter    ap_ST_fsm_state3 = 46'd4;
parameter    ap_ST_fsm_state4 = 46'd8;
parameter    ap_ST_fsm_state5 = 46'd16;
parameter    ap_ST_fsm_state6 = 46'd32;
parameter    ap_ST_fsm_state7 = 46'd64;
parameter    ap_ST_fsm_state8 = 46'd128;
parameter    ap_ST_fsm_state9 = 46'd256;
parameter    ap_ST_fsm_state10 = 46'd512;
parameter    ap_ST_fsm_state11 = 46'd1024;
parameter    ap_ST_fsm_state12 = 46'd2048;
parameter    ap_ST_fsm_state13 = 46'd4096;
parameter    ap_ST_fsm_state14 = 46'd8192;
parameter    ap_ST_fsm_state15 = 46'd16384;
parameter    ap_ST_fsm_state16 = 46'd32768;
parameter    ap_ST_fsm_state17 = 46'd65536;
parameter    ap_ST_fsm_state18 = 46'd131072;
parameter    ap_ST_fsm_state19 = 46'd262144;
parameter    ap_ST_fsm_state20 = 46'd524288;
parameter    ap_ST_fsm_state21 = 46'd1048576;
parameter    ap_ST_fsm_state22 = 46'd2097152;
parameter    ap_ST_fsm_state23 = 46'd4194304;
parameter    ap_ST_fsm_state24 = 46'd8388608;
parameter    ap_ST_fsm_state25 = 46'd16777216;
parameter    ap_ST_fsm_state26 = 46'd33554432;
parameter    ap_ST_fsm_state27 = 46'd67108864;
parameter    ap_ST_fsm_state28 = 46'd134217728;
parameter    ap_ST_fsm_state29 = 46'd268435456;
parameter    ap_ST_fsm_state30 = 46'd536870912;
parameter    ap_ST_fsm_state31 = 46'd1073741824;
parameter    ap_ST_fsm_state32 = 46'd2147483648;
parameter    ap_ST_fsm_state33 = 46'd4294967296;
parameter    ap_ST_fsm_state34 = 46'd8589934592;
parameter    ap_ST_fsm_state35 = 46'd17179869184;
parameter    ap_ST_fsm_state36 = 46'd34359738368;
parameter    ap_ST_fsm_state37 = 46'd68719476736;
parameter    ap_ST_fsm_state38 = 46'd137438953472;
parameter    ap_ST_fsm_state39 = 46'd274877906944;
parameter    ap_ST_fsm_state40 = 46'd549755813888;
parameter    ap_ST_fsm_state41 = 46'd1099511627776;
parameter    ap_ST_fsm_state42 = 46'd2199023255552;
parameter    ap_ST_fsm_state43 = 46'd4398046511104;
parameter    ap_ST_fsm_state44 = 46'd8796093022208;
parameter    ap_ST_fsm_state45 = 46'd17592186044416;
parameter    ap_ST_fsm_state46 = 46'd35184372088832;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
output  [31:0] output_r_TDATA;
output   output_r_TVALID;
input   output_r_TREADY;
output  [3:0] output_r_TKEEP;
output  [3:0] output_r_TSTRB;
output  [0:0] output_r_TUSER;
output  [0:0] output_r_TLAST;
output  [0:0] output_r_TID;
output  [0:0] output_r_TDEST;
input  [31:0] input_r_TDATA;
input   input_r_TVALID;
output   input_r_TREADY;
input  [3:0] input_r_TKEEP;
input  [3:0] input_r_TSTRB;
input  [0:0] input_r_TUSER;
input  [0:0] input_r_TLAST;
input  [0:0] input_r_TID;
input  [0:0] input_r_TDEST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
wire   [63:0] coefs;
reg   [5:0] signal_shift_reg_address0;
reg    signal_shift_reg_ce0;
reg    signal_shift_reg_we0;
reg   [31:0] signal_shift_reg_d0;
wire   [31:0] signal_shift_reg_q0;
reg    gmem_blk_n_AR;
(* fsm_encoding = "none" *) reg   [45:0] ap_CS_fsm;
wire    ap_CS_fsm_state15;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state22;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state28;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state29;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state11;
reg    output_r_TDATA_blk_n;
wire    ap_CS_fsm_state25;
reg   [31:0] state_2_reg_843;
reg   [0:0] tmp_last_V_reg_876;
wire    ap_CS_fsm_state26;
reg   [0:0] ap_phi_mux_tmp_last_V_1_phi_fu_308_p4;
reg   [0:0] p_4_0_0_0112_phi_reg_448;
wire    ap_CS_fsm_state46;
reg    input_r_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg   [63:0] coefs_read_reg_795;
wire    ap_CS_fsm_state1;
reg   [63:0] gmem_addr_reg_801;
reg   [31:0] grp_load_fu_460_p1;
reg   [31:0] tmp_out_data_V_1_reg_807;
reg   [3:0] grp_load_fu_464_p1;
reg   [3:0] tmp_out_keep_V_1_reg_813;
reg   [3:0] grp_load_fu_468_p1;
reg   [3:0] tmp_out_strb_V_1_reg_819;
reg   [0:0] grp_load_fu_472_p1;
reg   [0:0] tmp_out_user_V_1_reg_825;
reg   [0:0] grp_load_fu_476_p1;
reg   [0:0] tmp_out_id_V_1_reg_831;
reg   [0:0] grp_load_fu_480_p1;
reg   [0:0] tmp_out_dest_V_1_reg_837;
wire   [31:0] state_2_load_fu_517_p1;
reg  signed [31:0] tmp_data_V_reg_847;
reg   [3:0] tmp_keep_V_reg_855;
reg   [3:0] tmp_strb_V_reg_862;
reg   [0:0] tmp_user_V_reg_869;
reg   [0:0] tmp_id_V_reg_881;
reg   [0:0] tmp_dest_V_reg_888;
wire   [63:0] zext_ln66_fu_540_p1;
reg   [63:0] zext_ln66_reg_895;
wire    ap_CS_fsm_state3;
wire   [5:0] add_ln66_fu_550_p2;
reg   [5:0] add_ln66_reg_903;
wire   [0:0] icmp_ln66_fu_544_p2;
reg   [63:0] gmem_addr_2_reg_913;
reg  signed [31:0] signal_shift_reg_load_reg_919;
reg  signed [31:0] gmem_addr_2_read_reg_924;
wire   [31:0] grp_fu_598_p2;
reg   [31:0] mul_ln69_reg_929;
wire    ap_CS_fsm_state13;
wire   [31:0] accumulate_2_fu_602_p2;
wire    ap_CS_fsm_state14;
reg  signed [31:0] gmem_addr_read_reg_939;
wire   [31:0] grp_fu_607_p2;
reg   [31:0] mul_ln72_reg_944;
wire    ap_CS_fsm_state24;
wire   [31:0] accumulate_3_fu_611_p2;
reg   [63:0] gmem_addr_1_reg_957;
wire    ap_CS_fsm_state27;
wire   [0:0] icmp_ln39_fu_672_p2;
wire   [5:0] add_ln39_fu_715_p2;
reg   [5:0] add_ln39_reg_963;
wire   [0:0] icmp_ln45_fu_721_p2;
reg   [0:0] icmp_ln45_reg_978;
wire    ap_CS_fsm_state35;
wire   [31:0] select_ln17_1_fu_727_p3;
wire    ap_CS_fsm_state43;
wire   [0:0] icmp_ln31_fu_734_p2;
reg   [0:0] icmp_ln31_reg_988;
wire    ap_CS_fsm_state44;
wire   [31:0] select_ln17_fu_739_p3;
wire    ap_CS_fsm_state45;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire   [8:0] gmem_RFIFONUM;
wire    gmem_BVALID;
reg    gmem_BREADY;
reg   [5:0] i_reg_282;
reg   [31:0] accumulate_reg_293;
reg   [0:0] tmp_last_V_1_reg_305;
reg    ap_predicate_op146_write_state25;
reg    ap_predicate_op175_write_state25;
reg    ap_block_state25;
reg    ap_block_state25_io;
reg   [31:0] ap_phi_mux_state_1_phi_fu_319_p4;
reg   [31:0] state_1_reg_316;
reg   [0:0] ap_phi_mux_tmp_dest_V_1_phi_fu_331_p6;
reg   [0:0] tmp_dest_V_1_reg_327;
reg   [0:0] ap_phi_mux_tmp_id_V_1_phi_fu_345_p6;
reg   [0:0] tmp_id_V_1_reg_341;
reg   [0:0] ap_phi_mux_tmp_user_V_1_phi_fu_359_p6;
reg   [0:0] tmp_user_V_1_reg_355;
reg   [3:0] ap_phi_mux_tmp_strb_V_1_phi_fu_373_p6;
reg   [3:0] tmp_strb_V_1_reg_369;
reg   [3:0] ap_phi_mux_tmp_keep_V_1_phi_fu_387_p6;
reg   [3:0] tmp_keep_V_1_reg_383;
reg   [31:0] ap_phi_mux_tmp_data_V_4_phi_fu_401_p6;
reg   [31:0] tmp_data_V_4_reg_397;
reg   [31:0] ap_phi_mux_state_3241_phi_fu_414_p8;
reg   [31:0] state_3241_reg_411;
reg    ap_predicate_op176_write_state26;
reg    ap_block_state26;
reg    ap_block_state26_io;
reg   [5:0] j_reg_426;
reg    ap_block_state34;
reg   [31:0] tmp_data_V_1_reg_437;
wire   [63:0] zext_ln68_fu_556_p1;
wire  signed [63:0] sext_ln72_fu_502_p1;
wire  signed [63:0] sext_ln69_fu_588_p1;
wire  signed [63:0] sext_ln40_fu_705_p1;
reg   [31:0] tmp_out_data_V_fu_140;
reg   [31:0] ap_sig_allocacmp_tmp_out_data_V_4;
reg   [3:0] tmp_out_keep_V_fu_144;
reg   [3:0] ap_sig_allocacmp_tmp_out_keep_V_4;
reg   [3:0] tmp_out_strb_V_fu_148;
reg   [3:0] ap_sig_allocacmp_tmp_out_strb_V_4;
reg   [0:0] tmp_out_user_V_fu_152;
reg   [0:0] ap_sig_allocacmp_tmp_out_user_V_4;
reg   [0:0] tmp_out_id_V_fu_156;
reg   [0:0] ap_sig_allocacmp_tmp_out_id_V_4;
reg   [0:0] tmp_out_dest_V_fu_160;
reg   [0:0] ap_sig_allocacmp_tmp_out_dest_V_4;
reg   [31:0] state_fu_164;
wire   [61:0] trunc_ln_fu_492_p4;
wire   [7:0] shl_ln1_fu_561_p3;
wire   [63:0] zext_ln69_fu_569_p1;
wire   [63:0] add_ln69_fu_573_p2;
wire   [61:0] trunc_ln2_fu_578_p4;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state23;
wire   [7:0] shl_ln_fu_678_p3;
wire   [63:0] zext_ln40_fu_686_p1;
wire   [63:0] add_ln40_fu_690_p2;
wire   [61:0] trunc_ln1_fu_695_p4;
reg   [45:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
reg    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
reg    ap_ST_fsm_state25_blk;
reg    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
reg    ap_ST_fsm_state28_blk;
reg    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
reg    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
reg    ap_ST_fsm_state46_blk;
wire    regslice_both_output_r_V_data_V_U_apdone_blk;
reg    ap_block_state46;
reg   [31:0] output_r_TDATA_int_regslice;
reg    output_r_TVALID_int_regslice;
wire    output_r_TREADY_int_regslice;
wire    regslice_both_output_r_V_data_V_U_vld_out;
wire    regslice_both_output_r_V_keep_V_U_apdone_blk;
reg   [3:0] output_r_TKEEP_int_regslice;
wire    regslice_both_output_r_V_keep_V_U_ack_in_dummy;
wire    regslice_both_output_r_V_keep_V_U_vld_out;
wire    regslice_both_output_r_V_strb_V_U_apdone_blk;
reg   [3:0] output_r_TSTRB_int_regslice;
wire    regslice_both_output_r_V_strb_V_U_ack_in_dummy;
wire    regslice_both_output_r_V_strb_V_U_vld_out;
wire    regslice_both_output_r_V_user_V_U_apdone_blk;
reg   [0:0] output_r_TUSER_int_regslice;
wire    regslice_both_output_r_V_user_V_U_ack_in_dummy;
wire    regslice_both_output_r_V_user_V_U_vld_out;
wire    regslice_both_output_r_V_last_V_U_apdone_blk;
reg   [0:0] output_r_TLAST_int_regslice;
wire    regslice_both_output_r_V_last_V_U_ack_in_dummy;
wire    regslice_both_output_r_V_last_V_U_vld_out;
wire    regslice_both_output_r_V_id_V_U_apdone_blk;
reg   [0:0] output_r_TID_int_regslice;
wire    regslice_both_output_r_V_id_V_U_ack_in_dummy;
wire    regslice_both_output_r_V_id_V_U_vld_out;
wire    regslice_both_output_r_V_dest_V_U_apdone_blk;
reg   [0:0] output_r_TDEST_int_regslice;
wire    regslice_both_output_r_V_dest_V_U_ack_in_dummy;
wire    regslice_both_output_r_V_dest_V_U_vld_out;
wire    regslice_both_input_r_V_data_V_U_apdone_blk;
wire   [31:0] input_r_TDATA_int_regslice;
wire    input_r_TVALID_int_regslice;
reg    input_r_TREADY_int_regslice;
wire    regslice_both_input_r_V_data_V_U_ack_in;
wire    regslice_both_input_r_V_keep_V_U_apdone_blk;
wire   [3:0] input_r_TKEEP_int_regslice;
wire    regslice_both_input_r_V_keep_V_U_vld_out;
wire    regslice_both_input_r_V_keep_V_U_ack_in;
wire    regslice_both_input_r_V_strb_V_U_apdone_blk;
wire   [3:0] input_r_TSTRB_int_regslice;
wire    regslice_both_input_r_V_strb_V_U_vld_out;
wire    regslice_both_input_r_V_strb_V_U_ack_in;
wire    regslice_both_input_r_V_user_V_U_apdone_blk;
wire   [0:0] input_r_TUSER_int_regslice;
wire    regslice_both_input_r_V_user_V_U_vld_out;
wire    regslice_both_input_r_V_user_V_U_ack_in;
wire    regslice_both_input_r_V_last_V_U_apdone_blk;
wire   [0:0] input_r_TLAST_int_regslice;
wire    regslice_both_input_r_V_last_V_U_vld_out;
wire    regslice_both_input_r_V_last_V_U_ack_in;
wire    regslice_both_input_r_V_id_V_U_apdone_blk;
wire   [0:0] input_r_TID_int_regslice;
wire    regslice_both_input_r_V_id_V_U_vld_out;
wire    regslice_both_input_r_V_id_V_U_ack_in;
wire    regslice_both_input_r_V_dest_V_U_apdone_blk;
wire   [0:0] input_r_TDEST_int_regslice;
wire    regslice_both_input_r_V_dest_V_U_vld_out;
wire    regslice_both_input_r_V_dest_V_U_ack_in;
reg    ap_condition_1155;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 46'd1;
end

equalizer_signal_shift_reg_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 33 ),
    .AddressWidth( 6 ))
signal_shift_reg_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(signal_shift_reg_address0),
    .ce0(signal_shift_reg_ce0),
    .we0(signal_shift_reg_we0),
    .d0(signal_shift_reg_d0),
    .q0(signal_shift_reg_q0)
);

equalizer_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .coefs(coefs)
);

equalizer_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .USER_DW( 32 ),
    .USER_AW( 64 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARLEN(32'd1),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RFIFONUM(gmem_RFIFONUM),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_1_reg_957),
    .I_AWLEN(32'd1),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(tmp_data_V_1_reg_437),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(gmem_addr_2_read_reg_924),
    .din1(signal_shift_reg_load_reg_919),
    .ce(1'b1),
    .dout(grp_fu_598_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(gmem_addr_read_reg_939),
    .din1(tmp_data_V_reg_847),
    .ce(1'b1),
    .dout(grp_fu_607_p2)
);

equalizer_regslice_both #(
    .DataWidth( 32 ))
regslice_both_output_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TDATA_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(output_r_TREADY_int_regslice),
    .data_out(output_r_TDATA),
    .vld_out(regslice_both_output_r_V_data_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_data_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 4 ))
regslice_both_output_r_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TKEEP_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_r_V_keep_V_U_ack_in_dummy),
    .data_out(output_r_TKEEP),
    .vld_out(regslice_both_output_r_V_keep_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_keep_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 4 ))
regslice_both_output_r_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TSTRB_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_r_V_strb_V_U_ack_in_dummy),
    .data_out(output_r_TSTRB),
    .vld_out(regslice_both_output_r_V_strb_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_strb_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_r_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TUSER_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_r_V_user_V_U_ack_in_dummy),
    .data_out(output_r_TUSER),
    .vld_out(regslice_both_output_r_V_user_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_user_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_r_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TLAST_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_r_V_last_V_U_ack_in_dummy),
    .data_out(output_r_TLAST),
    .vld_out(regslice_both_output_r_V_last_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_last_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_r_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TID_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_r_V_id_V_U_ack_in_dummy),
    .data_out(output_r_TID),
    .vld_out(regslice_both_output_r_V_id_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_id_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_r_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TDEST_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_r_V_dest_V_U_ack_in_dummy),
    .data_out(output_r_TDEST),
    .vld_out(regslice_both_output_r_V_dest_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_dest_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 32 ))
regslice_both_input_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TDATA),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_data_V_U_ack_in),
    .data_out(input_r_TDATA_int_regslice),
    .vld_out(input_r_TVALID_int_regslice),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_data_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 4 ))
regslice_both_input_r_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TKEEP),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_keep_V_U_ack_in),
    .data_out(input_r_TKEEP_int_regslice),
    .vld_out(regslice_both_input_r_V_keep_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_keep_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 4 ))
regslice_both_input_r_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TSTRB),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_strb_V_U_ack_in),
    .data_out(input_r_TSTRB_int_regslice),
    .vld_out(regslice_both_input_r_V_strb_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_strb_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_r_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TUSER),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_user_V_U_ack_in),
    .data_out(input_r_TUSER_int_regslice),
    .vld_out(regslice_both_input_r_V_user_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_user_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_r_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TLAST),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_last_V_U_ack_in),
    .data_out(input_r_TLAST_int_regslice),
    .vld_out(regslice_both_input_r_V_last_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_last_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_r_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TID),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_id_V_U_ack_in),
    .data_out(input_r_TID_int_regslice),
    .vld_out(regslice_both_input_r_V_id_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_id_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_r_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TDEST),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_dest_V_U_ack_in),
    .data_out(input_r_TDEST_int_regslice),
    .vld_out(regslice_both_input_r_V_dest_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((state_2_load_fu_517_p1 == 32'd4096) & (1'b1 == ap_CS_fsm_state2) & (input_r_TVALID_int_regslice == 1'b1))) begin
        accumulate_reg_293 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        accumulate_reg_293 <= accumulate_2_fu_602_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((state_2_load_fu_517_p1 == 32'd4096) & (1'b1 == ap_CS_fsm_state2) & (input_r_TVALID_int_regslice == 1'b1))) begin
        i_reg_282 <= 6'd32;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        i_reg_282 <= add_ln66_reg_903;
    end
end

always @ (posedge ap_clk) begin
    if (((state_2_load_fu_517_p1 == 32'd17) & (1'b1 == ap_CS_fsm_state2) & (input_r_TVALID_int_regslice == 1'b1))) begin
        j_reg_426 <= 6'd32;
    end else if ((~((gmem_BVALID == 1'b0) | (input_r_TVALID_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state34))) begin
        j_reg_426 <= add_ln39_reg_963;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state25_io) | ((ap_predicate_op175_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op146_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state25) & (tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096))) begin
        state_1_reg_316 <= 32'd4096;
    end else if ((~(state_2_load_fu_517_p1 == 32'd17) & ~(state_2_load_fu_517_p1 == 32'd0) & ~(state_2_load_fu_517_p1 == 32'd4096) & (1'b1 == ap_CS_fsm_state2) & (input_r_TVALID_int_regslice == 1'b1))) begin
        state_1_reg_316 <= state_fu_164;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state25_io) | ((ap_predicate_op175_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op146_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state25) & (((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd0) & (tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096)) | (~(state_2_reg_843 == 32'd0) & ~(state_2_reg_843 == 32'd17) & ~(state_2_reg_843 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd0))))) begin
        state_3241_reg_411 <= ap_phi_mux_state_1_phi_fu_319_p4;
    end else if (((p_4_0_0_0112_phi_reg_448 == 1'd0) & (1'b1 == ap_CS_fsm_state43))) begin
        state_3241_reg_411 <= select_ln17_1_fu_727_p3;
    end else if (((1'b1 == ap_CS_fsm_state45) & (tmp_last_V_reg_876 == 1'd0))) begin
        state_3241_reg_411 <= select_ln17_fu_739_p3;
    end else if ((~((1'b1 == ap_block_state26_io) | ((ap_predicate_op176_write_state26 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state26) & (tmp_last_V_reg_876 == 1'd0) & (state_2_reg_843 == 32'd4096))) begin
        state_3241_reg_411 <= 32'd4096;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        state_fu_164 <= 32'd0;
    end else if ((~((1'b1 == ap_block_state26_io) | ((ap_predicate_op176_write_state26 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state26) & (((((p_4_0_0_0112_phi_reg_448 == 1'd0) & (state_2_reg_843 == 32'd17)) | ((tmp_last_V_reg_876 == 1'd0) & (state_2_reg_843 == 32'd4096))) | (~(state_2_reg_843 == 32'd0) & ~(state_2_reg_843 == 32'd17) & (tmp_last_V_1_reg_305 == 1'd0))) | ((tmp_last_V_reg_876 == 1'd0) & (state_2_reg_843 == 32'd0))))) begin
        state_fu_164 <= ap_phi_mux_state_3241_phi_fu_414_p8;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state25_io) | ((ap_predicate_op175_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op146_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state25) & ((~(state_2_reg_843 == 32'd0) & ~(state_2_reg_843 == 32'd17) & ~(state_2_reg_843 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd1) & (tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096))))) begin
        tmp_data_V_4_reg_397 <= grp_load_fu_460_p1;
    end else if ((((1'b1 == ap_CS_fsm_state45) & (tmp_last_V_reg_876 == 1'd1)) | ((p_4_0_0_0112_phi_reg_448 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        tmp_data_V_4_reg_397 <= tmp_out_data_V_1_reg_807;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state25_io) | ((ap_predicate_op175_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op146_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state25) & ((~(state_2_reg_843 == 32'd0) & ~(state_2_reg_843 == 32'd17) & ~(state_2_reg_843 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd1) & (tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096))))) begin
        tmp_dest_V_1_reg_327 <= grp_load_fu_480_p1;
    end else if ((((1'b1 == ap_CS_fsm_state45) & (tmp_last_V_reg_876 == 1'd1)) | ((p_4_0_0_0112_phi_reg_448 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        tmp_dest_V_1_reg_327 <= tmp_out_dest_V_1_reg_837;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state25_io) | ((ap_predicate_op175_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op146_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state25) & ((~(state_2_reg_843 == 32'd0) & ~(state_2_reg_843 == 32'd17) & ~(state_2_reg_843 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd1) & (tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096))))) begin
        tmp_id_V_1_reg_341 <= grp_load_fu_476_p1;
    end else if ((((1'b1 == ap_CS_fsm_state45) & (tmp_last_V_reg_876 == 1'd1)) | ((p_4_0_0_0112_phi_reg_448 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        tmp_id_V_1_reg_341 <= tmp_out_id_V_1_reg_831;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state25_io) | ((ap_predicate_op175_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op146_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state25) & ((~(state_2_reg_843 == 32'd0) & ~(state_2_reg_843 == 32'd17) & ~(state_2_reg_843 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd1) & (tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096))))) begin
        tmp_keep_V_1_reg_383 <= grp_load_fu_464_p1;
    end else if ((((1'b1 == ap_CS_fsm_state45) & (tmp_last_V_reg_876 == 1'd1)) | ((p_4_0_0_0112_phi_reg_448 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        tmp_keep_V_1_reg_383 <= tmp_out_keep_V_1_reg_813;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state25_io) | ((ap_predicate_op175_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op146_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state25) & (tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096))) begin
        tmp_last_V_1_reg_305 <= 1'd1;
    end else if ((~(state_2_load_fu_517_p1 == 32'd17) & ~(state_2_load_fu_517_p1 == 32'd0) & ~(state_2_load_fu_517_p1 == 32'd4096) & (1'b1 == ap_CS_fsm_state2) & (input_r_TVALID_int_regslice == 1'b1))) begin
        tmp_last_V_1_reg_305 <= input_r_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state25_io) | ((ap_predicate_op175_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op146_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state25) & ((~(state_2_reg_843 == 32'd0) & ~(state_2_reg_843 == 32'd17) & ~(state_2_reg_843 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd1) & (tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096))))) begin
        tmp_strb_V_1_reg_369 <= grp_load_fu_468_p1;
    end else if ((((1'b1 == ap_CS_fsm_state45) & (tmp_last_V_reg_876 == 1'd1)) | ((p_4_0_0_0112_phi_reg_448 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        tmp_strb_V_1_reg_369 <= tmp_out_strb_V_1_reg_819;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state25_io) | ((ap_predicate_op175_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op146_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state25) & ((~(state_2_reg_843 == 32'd0) & ~(state_2_reg_843 == 32'd17) & ~(state_2_reg_843 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd1) & (tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096))))) begin
        tmp_user_V_1_reg_355 <= grp_load_fu_472_p1;
    end else if ((((1'b1 == ap_CS_fsm_state45) & (tmp_last_V_reg_876 == 1'd1)) | ((p_4_0_0_0112_phi_reg_448 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        tmp_user_V_1_reg_355 <= tmp_out_user_V_1_reg_825;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_672_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state27))) begin
        add_ln39_reg_963 <= add_ln39_fu_715_p2;
        gmem_addr_1_reg_957 <= sext_ln40_fu_705_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_544_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln66_reg_903 <= add_ln66_fu_550_p2;
        gmem_addr_2_reg_913 <= sext_ln69_fu_588_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        coefs_read_reg_795 <= coefs;
        gmem_addr_reg_801 <= sext_ln72_fu_502_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        gmem_addr_2_read_reg_924 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        gmem_addr_read_reg_939 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        icmp_ln31_reg_988 <= icmp_ln31_fu_734_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        icmp_ln45_reg_978 <= icmp_ln45_fu_721_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        mul_ln69_reg_929 <= grp_fu_598_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        mul_ln72_reg_944 <= grp_fu_607_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((gmem_BVALID == 1'b0) | (input_r_TVALID_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state34))) begin
        p_4_0_0_0112_phi_reg_448 <= input_r_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        signal_shift_reg_load_reg_919 <= signal_shift_reg_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        state_2_reg_843 <= state_fu_164;
        tmp_data_V_reg_847 <= input_r_TDATA_int_regslice;
        tmp_dest_V_reg_888 <= input_r_TDEST_int_regslice;
        tmp_id_V_reg_881 <= input_r_TID_int_regslice;
        tmp_keep_V_reg_855 <= input_r_TKEEP_int_regslice;
        tmp_last_V_reg_876 <= input_r_TLAST_int_regslice;
        tmp_out_data_V_1_reg_807 <= grp_load_fu_460_p1;
        tmp_out_dest_V_1_reg_837 <= grp_load_fu_480_p1;
        tmp_out_id_V_1_reg_831 <= grp_load_fu_476_p1;
        tmp_out_keep_V_1_reg_813 <= grp_load_fu_464_p1;
        tmp_out_strb_V_1_reg_819 <= grp_load_fu_468_p1;
        tmp_out_user_V_1_reg_825 <= grp_load_fu_472_p1;
        tmp_strb_V_reg_862 <= input_r_TSTRB_int_regslice;
        tmp_user_V_reg_869 <= input_r_TUSER_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((((state_2_load_fu_517_p1 == 32'd17) & (1'b1 == ap_CS_fsm_state2) & (input_r_TVALID_int_regslice == 1'b1)) | (~((gmem_BVALID == 1'b0) | (input_r_TVALID_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state34)))) begin
        tmp_data_V_1_reg_437 <= input_r_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b1 == ap_block_state25_io) | ((ap_predicate_op175_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op146_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state25) & (tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096)) | (~((1'b1 == ap_block_state25_io) | ((ap_predicate_op175_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op146_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state25) & (tmp_last_V_reg_876 == 1'd0) & (state_2_reg_843 == 32'd4096)))) begin
        tmp_out_data_V_fu_140 <= accumulate_3_fu_611_p2;
        tmp_out_dest_V_fu_160 <= tmp_dest_V_reg_888;
        tmp_out_id_V_fu_156 <= tmp_id_V_reg_881;
        tmp_out_keep_V_fu_144 <= tmp_keep_V_reg_855;
        tmp_out_strb_V_fu_148 <= tmp_strb_V_reg_862;
        tmp_out_user_V_fu_152 <= tmp_user_V_reg_869;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        zext_ln66_reg_895[5 : 0] <= zext_ln66_fu_540_p1[5 : 0];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

assign ap_ST_fsm_state1_blk = 1'b0;

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state22_blk = 1'b1;
    end else begin
        ap_ST_fsm_state22_blk = 1'b0;
    end
end

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_block_state25_io) | ((ap_predicate_op175_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op146_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)))) begin
        ap_ST_fsm_state25_blk = 1'b1;
    end else begin
        ap_ST_fsm_state25_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state26_io) | ((ap_predicate_op176_write_state26 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)))) begin
        ap_ST_fsm_state26_blk = 1'b1;
    end else begin
        ap_ST_fsm_state26_blk = 1'b0;
    end
end

assign ap_ST_fsm_state27_blk = 1'b0;

always @ (*) begin
    if ((gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state28_blk = 1'b1;
    end else begin
        ap_ST_fsm_state28_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state29_blk = 1'b1;
    end else begin
        ap_ST_fsm_state29_blk = 1'b0;
    end
end

always @ (*) begin
    if ((input_r_TVALID_int_regslice == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

always @ (*) begin
    if (((gmem_BVALID == 1'b0) | (input_r_TVALID_int_regslice == 1'b0))) begin
        ap_ST_fsm_state34_blk = 1'b1;
    end else begin
        ap_ST_fsm_state34_blk = 1'b0;
    end
end

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

always @ (*) begin
    if (((output_r_TREADY_int_regslice == 1'b0) | (regslice_both_output_r_V_data_V_U_apdone_blk == 1'b1))) begin
        ap_ST_fsm_state46_blk = 1'b1;
    end else begin
        ap_ST_fsm_state46_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & (tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096))) begin
        ap_phi_mux_state_1_phi_fu_319_p4 = 32'd4096;
    end else begin
        ap_phi_mux_state_1_phi_fu_319_p4 = state_1_reg_316;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) & (tmp_last_V_reg_876 == 1'd0) & (state_2_reg_843 == 32'd4096))) begin
        ap_phi_mux_state_3241_phi_fu_414_p8 = 32'd4096;
    end else begin
        ap_phi_mux_state_3241_phi_fu_414_p8 = state_3241_reg_411;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & ((~(state_2_reg_843 == 32'd0) & ~(state_2_reg_843 == 32'd17) & ~(state_2_reg_843 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd1) & (tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096))))) begin
        ap_phi_mux_tmp_data_V_4_phi_fu_401_p6 = grp_load_fu_460_p1;
    end else begin
        ap_phi_mux_tmp_data_V_4_phi_fu_401_p6 = tmp_data_V_4_reg_397;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & ((~(state_2_reg_843 == 32'd0) & ~(state_2_reg_843 == 32'd17) & ~(state_2_reg_843 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd1) & (tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096))))) begin
        ap_phi_mux_tmp_dest_V_1_phi_fu_331_p6 = grp_load_fu_480_p1;
    end else begin
        ap_phi_mux_tmp_dest_V_1_phi_fu_331_p6 = tmp_dest_V_1_reg_327;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & ((~(state_2_reg_843 == 32'd0) & ~(state_2_reg_843 == 32'd17) & ~(state_2_reg_843 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd1) & (tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096))))) begin
        ap_phi_mux_tmp_id_V_1_phi_fu_345_p6 = grp_load_fu_476_p1;
    end else begin
        ap_phi_mux_tmp_id_V_1_phi_fu_345_p6 = tmp_id_V_1_reg_341;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & ((~(state_2_reg_843 == 32'd0) & ~(state_2_reg_843 == 32'd17) & ~(state_2_reg_843 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd1) & (tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096))))) begin
        ap_phi_mux_tmp_keep_V_1_phi_fu_387_p6 = grp_load_fu_464_p1;
    end else begin
        ap_phi_mux_tmp_keep_V_1_phi_fu_387_p6 = tmp_keep_V_1_reg_383;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & (tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096))) begin
        ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = 1'd1;
    end else begin
        ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = tmp_last_V_1_reg_305;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & ((~(state_2_reg_843 == 32'd0) & ~(state_2_reg_843 == 32'd17) & ~(state_2_reg_843 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd1) & (tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096))))) begin
        ap_phi_mux_tmp_strb_V_1_phi_fu_373_p6 = grp_load_fu_468_p1;
    end else begin
        ap_phi_mux_tmp_strb_V_1_phi_fu_373_p6 = tmp_strb_V_1_reg_369;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & ((~(state_2_reg_843 == 32'd0) & ~(state_2_reg_843 == 32'd17) & ~(state_2_reg_843 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd1) & (tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096))))) begin
        ap_phi_mux_tmp_user_V_1_phi_fu_359_p6 = grp_load_fu_472_p1;
    end else begin
        ap_phi_mux_tmp_user_V_1_phi_fu_359_p6 = tmp_user_V_1_reg_355;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & (tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096))) begin
        ap_sig_allocacmp_tmp_out_data_V_4 = accumulate_3_fu_611_p2;
    end else begin
        ap_sig_allocacmp_tmp_out_data_V_4 = tmp_out_data_V_fu_140;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & (tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096))) begin
        ap_sig_allocacmp_tmp_out_dest_V_4 = tmp_dest_V_reg_888;
    end else begin
        ap_sig_allocacmp_tmp_out_dest_V_4 = tmp_out_dest_V_fu_160;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & (tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096))) begin
        ap_sig_allocacmp_tmp_out_id_V_4 = tmp_id_V_reg_881;
    end else begin
        ap_sig_allocacmp_tmp_out_id_V_4 = tmp_out_id_V_fu_156;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & (tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096))) begin
        ap_sig_allocacmp_tmp_out_keep_V_4 = tmp_keep_V_reg_855;
    end else begin
        ap_sig_allocacmp_tmp_out_keep_V_4 = tmp_out_keep_V_fu_144;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & (tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096))) begin
        ap_sig_allocacmp_tmp_out_strb_V_4 = tmp_strb_V_reg_862;
    end else begin
        ap_sig_allocacmp_tmp_out_strb_V_4 = tmp_out_strb_V_fu_148;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & (tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096))) begin
        ap_sig_allocacmp_tmp_out_user_V_4 = tmp_user_V_reg_869;
    end else begin
        ap_sig_allocacmp_tmp_out_user_V_4 = tmp_out_user_V_fu_152;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state15)) begin
            gmem_ARADDR = gmem_addr_reg_801;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            gmem_ARADDR = gmem_addr_2_reg_913;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) | (input_r_TVALID_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state34))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state15))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state22))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & ((~(state_2_reg_843 == 32'd0) & ~(state_2_reg_843 == 32'd17) & ~(state_2_reg_843 == 32'd4096)) | ((tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096))))) begin
        grp_load_fu_460_p1 = ap_sig_allocacmp_tmp_out_data_V_4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_load_fu_460_p1 = tmp_out_data_V_fu_140;
    end else begin
        grp_load_fu_460_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & ((~(state_2_reg_843 == 32'd0) & ~(state_2_reg_843 == 32'd17) & ~(state_2_reg_843 == 32'd4096)) | ((tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096))))) begin
        grp_load_fu_464_p1 = ap_sig_allocacmp_tmp_out_keep_V_4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_load_fu_464_p1 = tmp_out_keep_V_fu_144;
    end else begin
        grp_load_fu_464_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & ((~(state_2_reg_843 == 32'd0) & ~(state_2_reg_843 == 32'd17) & ~(state_2_reg_843 == 32'd4096)) | ((tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096))))) begin
        grp_load_fu_468_p1 = ap_sig_allocacmp_tmp_out_strb_V_4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_load_fu_468_p1 = tmp_out_strb_V_fu_148;
    end else begin
        grp_load_fu_468_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & ((~(state_2_reg_843 == 32'd0) & ~(state_2_reg_843 == 32'd17) & ~(state_2_reg_843 == 32'd4096)) | ((tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096))))) begin
        grp_load_fu_472_p1 = ap_sig_allocacmp_tmp_out_user_V_4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_load_fu_472_p1 = tmp_out_user_V_fu_152;
    end else begin
        grp_load_fu_472_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & ((~(state_2_reg_843 == 32'd0) & ~(state_2_reg_843 == 32'd17) & ~(state_2_reg_843 == 32'd4096)) | ((tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096))))) begin
        grp_load_fu_476_p1 = ap_sig_allocacmp_tmp_out_id_V_4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_load_fu_476_p1 = tmp_out_id_V_fu_156;
    end else begin
        grp_load_fu_476_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & ((~(state_2_reg_843 == 32'd0) & ~(state_2_reg_843 == 32'd17) & ~(state_2_reg_843 == 32'd4096)) | ((tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096))))) begin
        grp_load_fu_480_p1 = ap_sig_allocacmp_tmp_out_dest_V_4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_load_fu_480_p1 = tmp_out_dest_V_fu_160;
    end else begin
        grp_load_fu_480_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state34))) begin
        input_r_TDATA_blk_n = input_r_TVALID_int_regslice;
    end else begin
        input_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (input_r_TVALID_int_regslice == 1'b1)) | (~((gmem_BVALID == 1'b0) | (input_r_TVALID_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state34)))) begin
        input_r_TREADY_int_regslice = 1'b1;
    end else begin
        input_r_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | ((1'b1 == ap_CS_fsm_state26) & (tmp_last_V_reg_876 == 1'd0) & (state_2_reg_843 == 32'd4096)) | ((1'b1 == ap_CS_fsm_state25) & (((((p_4_0_0_0112_phi_reg_448 == 1'd1) & (state_2_reg_843 == 32'd17)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd1) & (tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096))) | (~(state_2_reg_843 == 32'd0) & ~(state_2_reg_843 == 32'd17) & ~(state_2_reg_843 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd1))) | ((tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd0)))) | ((1'b1 == ap_CS_fsm_state25) & (tmp_last_V_reg_876 == 1'd0) & (state_2_reg_843 == 32'd4096)))) begin
        output_r_TDATA_blk_n = output_r_TREADY_int_regslice;
    end else begin
        output_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1155)) begin
        if ((ap_predicate_op175_write_state25 == 1'b1)) begin
            output_r_TDATA_int_regslice = ap_phi_mux_tmp_data_V_4_phi_fu_401_p6;
        end else if ((ap_predicate_op146_write_state25 == 1'b1)) begin
            output_r_TDATA_int_regslice = accumulate_3_fu_611_p2;
        end else begin
            output_r_TDATA_int_regslice = 'bx;
        end
    end else begin
        output_r_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1155)) begin
        if ((ap_predicate_op175_write_state25 == 1'b1)) begin
            output_r_TDEST_int_regslice = ap_phi_mux_tmp_dest_V_1_phi_fu_331_p6;
        end else if ((ap_predicate_op146_write_state25 == 1'b1)) begin
            output_r_TDEST_int_regslice = tmp_dest_V_reg_888;
        end else begin
            output_r_TDEST_int_regslice = 'bx;
        end
    end else begin
        output_r_TDEST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1155)) begin
        if ((ap_predicate_op175_write_state25 == 1'b1)) begin
            output_r_TID_int_regslice = ap_phi_mux_tmp_id_V_1_phi_fu_345_p6;
        end else if ((ap_predicate_op146_write_state25 == 1'b1)) begin
            output_r_TID_int_regslice = tmp_id_V_reg_881;
        end else begin
            output_r_TID_int_regslice = 'bx;
        end
    end else begin
        output_r_TID_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1155)) begin
        if ((ap_predicate_op175_write_state25 == 1'b1)) begin
            output_r_TKEEP_int_regslice = ap_phi_mux_tmp_keep_V_1_phi_fu_387_p6;
        end else if ((ap_predicate_op146_write_state25 == 1'b1)) begin
            output_r_TKEEP_int_regslice = tmp_keep_V_reg_855;
        end else begin
            output_r_TKEEP_int_regslice = 'bx;
        end
    end else begin
        output_r_TKEEP_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1155)) begin
        if ((ap_predicate_op175_write_state25 == 1'b1)) begin
            output_r_TLAST_int_regslice = 1'd1;
        end else if ((ap_predicate_op146_write_state25 == 1'b1)) begin
            output_r_TLAST_int_regslice = 1'd0;
        end else begin
            output_r_TLAST_int_regslice = 'bx;
        end
    end else begin
        output_r_TLAST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1155)) begin
        if ((ap_predicate_op175_write_state25 == 1'b1)) begin
            output_r_TSTRB_int_regslice = ap_phi_mux_tmp_strb_V_1_phi_fu_373_p6;
        end else if ((ap_predicate_op146_write_state25 == 1'b1)) begin
            output_r_TSTRB_int_regslice = tmp_strb_V_reg_862;
        end else begin
            output_r_TSTRB_int_regslice = 'bx;
        end
    end else begin
        output_r_TSTRB_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1155)) begin
        if ((ap_predicate_op175_write_state25 == 1'b1)) begin
            output_r_TUSER_int_regslice = ap_phi_mux_tmp_user_V_1_phi_fu_359_p6;
        end else if ((ap_predicate_op146_write_state25 == 1'b1)) begin
            output_r_TUSER_int_regslice = tmp_user_V_reg_869;
        end else begin
            output_r_TUSER_int_regslice = 'bx;
        end
    end else begin
        output_r_TUSER_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state25_io) | ((ap_predicate_op175_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op146_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (ap_predicate_op175_write_state25 == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | (~((1'b1 == ap_block_state25_io) | ((ap_predicate_op175_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op146_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (ap_predicate_op146_write_state25 == 1'b1) & (1'b1 == ap_CS_fsm_state25)))) begin
        output_r_TVALID_int_regslice = 1'b1;
    end else begin
        output_r_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        signal_shift_reg_address0 = 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        signal_shift_reg_address0 = zext_ln66_reg_895;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        signal_shift_reg_address0 = zext_ln68_fu_556_p1;
    end else begin
        signal_shift_reg_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15)))) begin
        signal_shift_reg_ce0 = 1'b1;
    end else begin
        signal_shift_reg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        signal_shift_reg_d0 = tmp_data_V_reg_847;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        signal_shift_reg_d0 = signal_shift_reg_q0;
    end else begin
        signal_shift_reg_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15)))) begin
        signal_shift_reg_we0 = 1'b1;
    end else begin
        signal_shift_reg_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((state_2_load_fu_517_p1 == 32'd17) & (1'b1 == ap_CS_fsm_state2) & (input_r_TVALID_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else if (((state_2_load_fu_517_p1 == 32'd4096) & (1'b1 == ap_CS_fsm_state2) & (input_r_TVALID_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((state_2_load_fu_517_p1 == 32'd0) & (1'b1 == ap_CS_fsm_state2) & (input_r_TVALID_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else if ((~(state_2_load_fu_517_p1 == 32'd17) & ~(state_2_load_fu_517_p1 == 32'd0) & ~(state_2_load_fu_517_p1 == 32'd4096) & (1'b1 == ap_CS_fsm_state2) & (input_r_TVALID_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln66_fu_544_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state15 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if ((~((1'b1 == ap_block_state25_io) | ((ap_predicate_op175_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op146_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state25) & (((((p_4_0_0_0112_phi_reg_448 == 1'd1) & (state_2_reg_843 == 32'd17)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd1) & (tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096))) | (~(state_2_reg_843 == 32'd0) & ~(state_2_reg_843 == 32'd17) & ~(state_2_reg_843 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd1))) | ((tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else if ((~((1'b1 == ap_block_state25_io) | ((ap_predicate_op175_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op146_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state25) & ((~(state_2_reg_843 == 32'd0) & ~(state_2_reg_843 == 32'd17) & (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd0)) | ((tmp_last_V_reg_876 == 1'd0) & (state_2_reg_843 == 32'd4096))))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if ((~((1'b1 == ap_block_state26_io) | ((ap_predicate_op176_write_state26 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state26) & (((((p_4_0_0_0112_phi_reg_448 == 1'd0) & (state_2_reg_843 == 32'd17)) | ((tmp_last_V_reg_876 == 1'd0) & (state_2_reg_843 == 32'd4096))) | (~(state_2_reg_843 == 32'd0) & ~(state_2_reg_843 == 32'd17) & (tmp_last_V_1_reg_305 == 1'd0))) | ((tmp_last_V_reg_876 == 1'd0) & (state_2_reg_843 == 32'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((icmp_ln39_fu_672_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            if ((~((gmem_BVALID == 1'b0) | (input_r_TVALID_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((p_4_0_0_0112_phi_reg_448 == 1'd0) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            if (((1'b1 == ap_CS_fsm_state45) & (tmp_last_V_reg_876 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state46 : begin
            if ((~((output_r_TREADY_int_regslice == 1'b0) | (regslice_both_output_r_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign accumulate_2_fu_602_p2 = (mul_ln69_reg_929 + accumulate_reg_293);

assign accumulate_3_fu_611_p2 = (mul_ln72_reg_944 + accumulate_reg_293);

assign add_ln39_fu_715_p2 = ($signed(j_reg_426) + $signed(6'd63));

assign add_ln40_fu_690_p2 = (zext_ln40_fu_686_p1 + coefs_read_reg_795);

assign add_ln66_fu_550_p2 = ($signed(i_reg_282) + $signed(6'd63));

assign add_ln69_fu_573_p2 = (zext_ln69_fu_569_p1 + coefs_read_reg_795);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

always @ (*) begin
    ap_block_state25 = (((ap_predicate_op175_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op146_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state25_io = (((ap_predicate_op175_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op146_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state26 = ((ap_predicate_op176_write_state26 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state26_io = ((ap_predicate_op176_write_state26 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state34 = ((gmem_BVALID == 1'b0) | (input_r_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state46 = ((output_r_TREADY_int_regslice == 1'b0) | (regslice_both_output_r_V_data_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_condition_1155 = (~(((ap_predicate_op175_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op146_write_state25 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state25));
end

always @ (*) begin
    ap_predicate_op146_write_state25 = ((tmp_last_V_reg_876 == 1'd0) & (state_2_reg_843 == 32'd4096));
end

always @ (*) begin
    ap_predicate_op175_write_state25 = (((((p_4_0_0_0112_phi_reg_448 == 1'd1) & (state_2_reg_843 == 32'd17)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd1) & (tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd4096))) | (~(state_2_reg_843 == 32'd0) & ~(state_2_reg_843 == 32'd17) & ~(state_2_reg_843 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 == 1'd1))) | ((tmp_last_V_reg_876 == 1'd1) & (state_2_reg_843 == 32'd0)));
end

always @ (*) begin
    ap_predicate_op176_write_state26 = ((tmp_last_V_reg_876 == 1'd0) & (state_2_reg_843 == 32'd4096));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_ln31_fu_734_p2 = ((tmp_data_V_reg_847 == 32'd48879) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_672_p2 = ((j_reg_426 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_721_p2 = ((tmp_data_V_1_reg_437 == 32'd43962) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_544_p2 = ((i_reg_282 == 6'd0) ? 1'b1 : 1'b0);

assign input_r_TREADY = regslice_both_input_r_V_data_V_U_ack_in;

assign output_r_TVALID = regslice_both_output_r_V_data_V_U_vld_out;

assign select_ln17_1_fu_727_p3 = ((icmp_ln45_reg_978[0:0] == 1'b1) ? 32'd4096 : 32'd17);

assign select_ln17_fu_739_p3 = ((icmp_ln31_reg_988[0:0] == 1'b1) ? 32'd17 : 32'd0);

assign sext_ln40_fu_705_p1 = $signed(trunc_ln1_fu_695_p4);

assign sext_ln69_fu_588_p1 = $signed(trunc_ln2_fu_578_p4);

assign sext_ln72_fu_502_p1 = $signed(trunc_ln_fu_492_p4);

assign shl_ln1_fu_561_p3 = {{i_reg_282}, {2'd0}};

assign shl_ln_fu_678_p3 = {{j_reg_426}, {2'd0}};

assign state_2_load_fu_517_p1 = state_fu_164;

assign trunc_ln1_fu_695_p4 = {{add_ln40_fu_690_p2[63:2]}};

assign trunc_ln2_fu_578_p4 = {{add_ln69_fu_573_p2[63:2]}};

assign trunc_ln_fu_492_p4 = {{coefs[63:2]}};

assign zext_ln40_fu_686_p1 = shl_ln_fu_678_p3;

assign zext_ln66_fu_540_p1 = i_reg_282;

assign zext_ln68_fu_556_p1 = add_ln66_fu_550_p2;

assign zext_ln69_fu_569_p1 = shl_ln1_fu_561_p3;

always @ (posedge ap_clk) begin
    zext_ln66_reg_895[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //equalizer
