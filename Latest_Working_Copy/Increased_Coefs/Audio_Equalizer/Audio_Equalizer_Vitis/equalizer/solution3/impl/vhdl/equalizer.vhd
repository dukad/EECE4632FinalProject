-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity equalizer is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    output_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_TVALID : OUT STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC;
    output_r_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_TVALID : IN STD_LOGIC;
    input_r_TREADY : OUT STD_LOGIC;
    input_r_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    input_r_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    input_r_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of equalizer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "equalizer_equalizer,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=2009,HLS_SYN_LUT=2683,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (45 downto 0) := "0000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (45 downto 0) := "0000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (45 downto 0) := "0000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (45 downto 0) := "0000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (45 downto 0) := "0000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (45 downto 0) := "0000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (45 downto 0) := "0001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (45 downto 0) := "0010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (45 downto 0) := "0100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (45 downto 0) := "1000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_ABBA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001010101110111010";
    constant ap_const_lv32_BEEF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001011111011101111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal coefs : STD_LOGIC_VECTOR (63 downto 0);
    signal signal_shift_reg_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal signal_shift_reg_ce0 : STD_LOGIC;
    signal signal_shift_reg_we0 : STD_LOGIC;
    signal signal_shift_reg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal signal_shift_reg_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal output_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal state_2_reg_843 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_last_V_reg_876 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_4_0_0_0112_phi_reg_448 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal input_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal coefs_read_reg_795 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem_addr_reg_801 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_load_fu_460_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_out_data_V_1_reg_807 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_fu_464_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_out_keep_V_1_reg_813 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_fu_468_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_out_strb_V_1_reg_819 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_fu_472_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_out_user_V_1_reg_825 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_fu_476_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_out_id_V_1_reg_831 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_fu_480_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_out_dest_V_1_reg_837 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_2_load_fu_517_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_847 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_keep_V_reg_855 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_strb_V_reg_862 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_user_V_reg_869 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_V_reg_881 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_V_reg_888 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln66_fu_540_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_reg_895 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln66_fu_550_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln66_reg_903 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln66_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_2_reg_913 : STD_LOGIC_VECTOR (63 downto 0);
    signal signal_shift_reg_load_reg_919 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_2_read_reg_924 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_598_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln69_reg_929 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal accumulate_2_fu_602_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal gmem_addr_read_reg_939 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_607_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln72_reg_944 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal accumulate_3_fu_611_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_1_reg_957 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal icmp_ln39_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln39_fu_715_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln39_reg_963 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln45_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_978 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal select_ln17_1_fu_727_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal icmp_ln31_fu_734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_988 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal select_ln17_fu_739_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal i_reg_282 : STD_LOGIC_VECTOR (5 downto 0);
    signal accumulate_reg_293 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_last_V_1_reg_305 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op146_write_state25 : BOOLEAN;
    signal ap_predicate_op175_write_state25 : BOOLEAN;
    signal ap_block_state25 : BOOLEAN;
    signal ap_block_state25_io : BOOLEAN;
    signal ap_phi_mux_state_1_phi_fu_319_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_1_reg_316 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_tmp_dest_V_1_phi_fu_331_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_V_1_reg_327 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_tmp_id_V_1_phi_fu_345_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_V_1_reg_341 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_tmp_user_V_1_phi_fu_359_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_1_reg_355 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_tmp_strb_V_1_phi_fu_373_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_strb_V_1_reg_369 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_tmp_keep_V_1_phi_fu_387_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_keep_V_1_reg_383 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_tmp_data_V_4_phi_fu_401_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_4_reg_397 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_state_3241_phi_fu_414_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_3241_reg_411 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op176_write_state26 : BOOLEAN;
    signal ap_block_state26 : BOOLEAN;
    signal ap_block_state26_io : BOOLEAN;
    signal j_reg_426 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state34 : BOOLEAN;
    signal tmp_data_V_1_reg_437 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_fu_556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln72_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln69_fu_588_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln40_fu_705_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_out_data_V_fu_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_tmp_out_data_V_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_out_keep_V_fu_144 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_tmp_out_keep_V_4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_out_strb_V_fu_148 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_tmp_out_strb_V_4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_out_user_V_fu_152 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_allocacmp_tmp_out_user_V_4 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_out_id_V_fu_156 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_allocacmp_tmp_out_id_V_4 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_out_dest_V_fu_160 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_allocacmp_tmp_out_dest_V_4 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_fu_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_fu_492_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal shl_ln1_fu_561_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln69_fu_569_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln69_fu_573_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln2_fu_578_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal shl_ln_fu_678_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln40_fu_686_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln40_fu_690_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_695_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (45 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal regslice_both_output_r_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state46 : BOOLEAN;
    signal output_r_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r_TVALID_int_regslice : STD_LOGIC;
    signal output_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_output_r_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_r_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal output_r_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_output_r_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_r_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_r_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal output_r_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_output_r_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_r_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_r_V_user_V_U_apdone_blk : STD_LOGIC;
    signal output_r_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_output_r_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_r_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_r_V_last_V_U_apdone_blk : STD_LOGIC;
    signal output_r_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_output_r_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_r_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_r_V_id_V_U_apdone_blk : STD_LOGIC;
    signal output_r_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_output_r_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_r_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_r_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal output_r_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_output_r_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_r_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_data_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal input_r_TVALID_int_regslice : STD_LOGIC;
    signal input_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_input_r_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_r_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_input_r_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_r_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_input_r_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_r_V_user_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_r_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_r_V_last_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_r_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_r_V_id_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_r_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_r_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_r_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_dest_V_U_ack_in : STD_LOGIC;
    signal ap_condition_1155 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component equalizer_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component equalizer_signal_shift_reg_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component equalizer_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        coefs : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component equalizer_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component equalizer_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    signal_shift_reg_U : component equalizer_signal_shift_reg_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => signal_shift_reg_address0,
        ce0 => signal_shift_reg_ce0,
        we0 => signal_shift_reg_we0,
        d0 => signal_shift_reg_d0,
        q0 => signal_shift_reg_q0);

    control_s_axi_U : component equalizer_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        coefs => coefs);

    gmem_m_axi_U : component equalizer_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 9,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        USER_DW => 32,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARLEN => ap_const_lv32_1,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_addr_1_reg_957,
        I_AWLEN => ap_const_lv32_1,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => tmp_data_V_1_reg_437,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY);

    mul_32s_32s_32_2_1_U1 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gmem_addr_2_read_reg_924,
        din1 => signal_shift_reg_load_reg_919,
        ce => ap_const_logic_1,
        dout => grp_fu_598_p2);

    mul_32s_32s_32_2_1_U2 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gmem_addr_read_reg_939,
        din1 => tmp_data_V_reg_847,
        ce => ap_const_logic_1,
        dout => grp_fu_607_p2);

    regslice_both_output_r_V_data_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TDATA_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => output_r_TREADY_int_regslice,
        data_out => output_r_TDATA,
        vld_out => regslice_both_output_r_V_data_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_data_V_U_apdone_blk);

    regslice_both_output_r_V_keep_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TKEEP_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_r_V_keep_V_U_ack_in_dummy,
        data_out => output_r_TKEEP,
        vld_out => regslice_both_output_r_V_keep_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_keep_V_U_apdone_blk);

    regslice_both_output_r_V_strb_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TSTRB_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_r_V_strb_V_U_ack_in_dummy,
        data_out => output_r_TSTRB,
        vld_out => regslice_both_output_r_V_strb_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_strb_V_U_apdone_blk);

    regslice_both_output_r_V_user_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TUSER_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_r_V_user_V_U_ack_in_dummy,
        data_out => output_r_TUSER,
        vld_out => regslice_both_output_r_V_user_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_user_V_U_apdone_blk);

    regslice_both_output_r_V_last_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TLAST_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_r_V_last_V_U_ack_in_dummy,
        data_out => output_r_TLAST,
        vld_out => regslice_both_output_r_V_last_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_last_V_U_apdone_blk);

    regslice_both_output_r_V_id_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TID_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_r_V_id_V_U_ack_in_dummy,
        data_out => output_r_TID,
        vld_out => regslice_both_output_r_V_id_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_id_V_U_apdone_blk);

    regslice_both_output_r_V_dest_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TDEST_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_r_V_dest_V_U_ack_in_dummy,
        data_out => output_r_TDEST,
        vld_out => regslice_both_output_r_V_dest_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_dest_V_U_apdone_blk);

    regslice_both_input_r_V_data_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TDATA,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_data_V_U_ack_in,
        data_out => input_r_TDATA_int_regslice,
        vld_out => input_r_TVALID_int_regslice,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_data_V_U_apdone_blk);

    regslice_both_input_r_V_keep_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TKEEP,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_keep_V_U_ack_in,
        data_out => input_r_TKEEP_int_regslice,
        vld_out => regslice_both_input_r_V_keep_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_keep_V_U_apdone_blk);

    regslice_both_input_r_V_strb_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TSTRB,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_strb_V_U_ack_in,
        data_out => input_r_TSTRB_int_regslice,
        vld_out => regslice_both_input_r_V_strb_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_strb_V_U_apdone_blk);

    regslice_both_input_r_V_user_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TUSER,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_user_V_U_ack_in,
        data_out => input_r_TUSER_int_regslice,
        vld_out => regslice_both_input_r_V_user_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_user_V_U_apdone_blk);

    regslice_both_input_r_V_last_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TLAST,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_last_V_U_ack_in,
        data_out => input_r_TLAST_int_regslice,
        vld_out => regslice_both_input_r_V_last_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_last_V_U_apdone_blk);

    regslice_both_input_r_V_id_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TID,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_id_V_U_ack_in,
        data_out => input_r_TID_int_regslice,
        vld_out => regslice_both_input_r_V_id_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_id_V_U_apdone_blk);

    regslice_both_input_r_V_dest_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TDEST,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_dest_V_U_ack_in,
        data_out => input_r_TDEST_int_regslice,
        vld_out => regslice_both_input_r_V_dest_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    accumulate_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((state_2_load_fu_517_p1 = ap_const_lv32_1000) and (ap_const_logic_1 = ap_CS_fsm_state2) and (input_r_TVALID_int_regslice = ap_const_logic_1))) then 
                accumulate_reg_293 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                accumulate_reg_293 <= accumulate_2_fu_602_p2;
            end if; 
        end if;
    end process;

    i_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((state_2_load_fu_517_p1 = ap_const_lv32_1000) and (ap_const_logic_1 = ap_CS_fsm_state2) and (input_r_TVALID_int_regslice = ap_const_logic_1))) then 
                i_reg_282 <= ap_const_lv6_20;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_reg_282 <= add_ln66_reg_903;
            end if; 
        end if;
    end process;

    j_reg_426_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((state_2_load_fu_517_p1 = ap_const_lv32_11) and (ap_const_logic_1 = ap_CS_fsm_state2) and (input_r_TVALID_int_regslice = ap_const_logic_1))) then 
                j_reg_426 <= ap_const_lv6_20;
            elsif ((not(((gmem_BVALID = ap_const_logic_0) or (input_r_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                j_reg_426 <= add_ln39_reg_963;
            end if; 
        end if;
    end process;

    state_1_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state25_io) or ((ap_predicate_op175_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op146_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000))) then 
                state_1_reg_316 <= ap_const_lv32_1000;
            elsif ((not((state_2_load_fu_517_p1 = ap_const_lv32_11)) and not((state_2_load_fu_517_p1 = ap_const_lv32_0)) and not((state_2_load_fu_517_p1 = ap_const_lv32_1000)) and (ap_const_logic_1 = ap_CS_fsm_state2) and (input_r_TVALID_int_regslice = ap_const_logic_1))) then 
                state_1_reg_316 <= state_fu_164;
            end if; 
        end if;
    end process;

    state_3241_reg_411_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state25_io) or ((ap_predicate_op175_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op146_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state25) and (((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_0) and (tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000)) or (not((state_2_reg_843 = ap_const_lv32_0)) and not((state_2_reg_843 = ap_const_lv32_11)) and not((state_2_reg_843 = ap_const_lv32_1000)) and (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_0))))) then 
                state_3241_reg_411 <= ap_phi_mux_state_1_phi_fu_319_p4;
            elsif (((p_4_0_0_0112_phi_reg_448 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                state_3241_reg_411 <= select_ln17_1_fu_727_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state45) and (tmp_last_V_reg_876 = ap_const_lv1_0))) then 
                state_3241_reg_411 <= select_ln17_fu_739_p3;
            elsif ((not(((ap_const_boolean_1 = ap_block_state26_io) or ((ap_predicate_op176_write_state26 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_last_V_reg_876 = ap_const_lv1_0) and (state_2_reg_843 = ap_const_lv32_1000))) then 
                state_3241_reg_411 <= ap_const_lv32_1000;
            end if; 
        end if;
    end process;

    state_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                state_fu_164 <= ap_const_lv32_0;
            elsif ((not(((ap_const_boolean_1 = ap_block_state26_io) or ((ap_predicate_op176_write_state26 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state26) and (((((p_4_0_0_0112_phi_reg_448 = ap_const_lv1_0) and (state_2_reg_843 = ap_const_lv32_11)) or ((tmp_last_V_reg_876 = ap_const_lv1_0) and (state_2_reg_843 = ap_const_lv32_1000))) or (not((state_2_reg_843 = ap_const_lv32_0)) and not((state_2_reg_843 = ap_const_lv32_11)) and (tmp_last_V_1_reg_305 = ap_const_lv1_0))) or ((tmp_last_V_reg_876 = ap_const_lv1_0) and (state_2_reg_843 = ap_const_lv32_0))))) then 
                state_fu_164 <= ap_phi_mux_state_3241_phi_fu_414_p8;
            end if; 
        end if;
    end process;

    tmp_data_V_4_reg_397_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state25_io) or ((ap_predicate_op175_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op146_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state25) and ((not((state_2_reg_843 = ap_const_lv32_0)) and not((state_2_reg_843 = ap_const_lv32_11)) and not((state_2_reg_843 = ap_const_lv32_1000)) and (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_1)) or ((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_1) and (tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000))))) then 
                tmp_data_V_4_reg_397 <= grp_load_fu_460_p1;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state45) and (tmp_last_V_reg_876 = ap_const_lv1_1)) or ((p_4_0_0_0112_phi_reg_448 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43)))) then 
                tmp_data_V_4_reg_397 <= tmp_out_data_V_1_reg_807;
            end if; 
        end if;
    end process;

    tmp_dest_V_1_reg_327_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state25_io) or ((ap_predicate_op175_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op146_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state25) and ((not((state_2_reg_843 = ap_const_lv32_0)) and not((state_2_reg_843 = ap_const_lv32_11)) and not((state_2_reg_843 = ap_const_lv32_1000)) and (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_1)) or ((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_1) and (tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000))))) then 
                tmp_dest_V_1_reg_327 <= grp_load_fu_480_p1;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state45) and (tmp_last_V_reg_876 = ap_const_lv1_1)) or ((p_4_0_0_0112_phi_reg_448 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43)))) then 
                tmp_dest_V_1_reg_327 <= tmp_out_dest_V_1_reg_837;
            end if; 
        end if;
    end process;

    tmp_id_V_1_reg_341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state25_io) or ((ap_predicate_op175_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op146_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state25) and ((not((state_2_reg_843 = ap_const_lv32_0)) and not((state_2_reg_843 = ap_const_lv32_11)) and not((state_2_reg_843 = ap_const_lv32_1000)) and (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_1)) or ((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_1) and (tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000))))) then 
                tmp_id_V_1_reg_341 <= grp_load_fu_476_p1;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state45) and (tmp_last_V_reg_876 = ap_const_lv1_1)) or ((p_4_0_0_0112_phi_reg_448 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43)))) then 
                tmp_id_V_1_reg_341 <= tmp_out_id_V_1_reg_831;
            end if; 
        end if;
    end process;

    tmp_keep_V_1_reg_383_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state25_io) or ((ap_predicate_op175_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op146_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state25) and ((not((state_2_reg_843 = ap_const_lv32_0)) and not((state_2_reg_843 = ap_const_lv32_11)) and not((state_2_reg_843 = ap_const_lv32_1000)) and (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_1)) or ((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_1) and (tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000))))) then 
                tmp_keep_V_1_reg_383 <= grp_load_fu_464_p1;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state45) and (tmp_last_V_reg_876 = ap_const_lv1_1)) or ((p_4_0_0_0112_phi_reg_448 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43)))) then 
                tmp_keep_V_1_reg_383 <= tmp_out_keep_V_1_reg_813;
            end if; 
        end if;
    end process;

    tmp_last_V_1_reg_305_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state25_io) or ((ap_predicate_op175_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op146_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000))) then 
                tmp_last_V_1_reg_305 <= ap_const_lv1_1;
            elsif ((not((state_2_load_fu_517_p1 = ap_const_lv32_11)) and not((state_2_load_fu_517_p1 = ap_const_lv32_0)) and not((state_2_load_fu_517_p1 = ap_const_lv32_1000)) and (ap_const_logic_1 = ap_CS_fsm_state2) and (input_r_TVALID_int_regslice = ap_const_logic_1))) then 
                tmp_last_V_1_reg_305 <= input_r_TLAST_int_regslice;
            end if; 
        end if;
    end process;

    tmp_strb_V_1_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state25_io) or ((ap_predicate_op175_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op146_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state25) and ((not((state_2_reg_843 = ap_const_lv32_0)) and not((state_2_reg_843 = ap_const_lv32_11)) and not((state_2_reg_843 = ap_const_lv32_1000)) and (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_1)) or ((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_1) and (tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000))))) then 
                tmp_strb_V_1_reg_369 <= grp_load_fu_468_p1;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state45) and (tmp_last_V_reg_876 = ap_const_lv1_1)) or ((p_4_0_0_0112_phi_reg_448 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43)))) then 
                tmp_strb_V_1_reg_369 <= tmp_out_strb_V_1_reg_819;
            end if; 
        end if;
    end process;

    tmp_user_V_1_reg_355_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state25_io) or ((ap_predicate_op175_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op146_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state25) and ((not((state_2_reg_843 = ap_const_lv32_0)) and not((state_2_reg_843 = ap_const_lv32_11)) and not((state_2_reg_843 = ap_const_lv32_1000)) and (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_1)) or ((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_1) and (tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000))))) then 
                tmp_user_V_1_reg_355 <= grp_load_fu_472_p1;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state45) and (tmp_last_V_reg_876 = ap_const_lv1_1)) or ((p_4_0_0_0112_phi_reg_448 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43)))) then 
                tmp_user_V_1_reg_355 <= tmp_out_user_V_1_reg_825;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_672_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                add_ln39_reg_963 <= add_ln39_fu_715_p2;
                gmem_addr_1_reg_957 <= sext_ln40_fu_705_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_544_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln66_reg_903 <= add_ln66_fu_550_p2;
                gmem_addr_2_reg_913 <= sext_ln69_fu_588_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                coefs_read_reg_795 <= coefs;
                gmem_addr_reg_801 <= sext_ln72_fu_502_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                gmem_addr_2_read_reg_924 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                gmem_addr_read_reg_939 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                icmp_ln31_reg_988 <= icmp_ln31_fu_734_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                icmp_ln45_reg_978 <= icmp_ln45_fu_721_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                mul_ln69_reg_929 <= grp_fu_598_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                mul_ln72_reg_944 <= grp_fu_607_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((gmem_BVALID = ap_const_logic_0) or (input_r_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                p_4_0_0_0112_phi_reg_448 <= input_r_TLAST_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                signal_shift_reg_load_reg_919 <= signal_shift_reg_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                state_2_reg_843 <= state_fu_164;
                tmp_data_V_reg_847 <= input_r_TDATA_int_regslice;
                tmp_dest_V_reg_888 <= input_r_TDEST_int_regslice;
                tmp_id_V_reg_881 <= input_r_TID_int_regslice;
                tmp_keep_V_reg_855 <= input_r_TKEEP_int_regslice;
                tmp_last_V_reg_876 <= input_r_TLAST_int_regslice;
                tmp_out_data_V_1_reg_807 <= grp_load_fu_460_p1;
                tmp_out_dest_V_1_reg_837 <= grp_load_fu_480_p1;
                tmp_out_id_V_1_reg_831 <= grp_load_fu_476_p1;
                tmp_out_keep_V_1_reg_813 <= grp_load_fu_464_p1;
                tmp_out_strb_V_1_reg_819 <= grp_load_fu_468_p1;
                tmp_out_user_V_1_reg_825 <= grp_load_fu_472_p1;
                tmp_strb_V_reg_862 <= input_r_TSTRB_int_regslice;
                tmp_user_V_reg_869 <= input_r_TUSER_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((state_2_load_fu_517_p1 = ap_const_lv32_11) and (ap_const_logic_1 = ap_CS_fsm_state2) and (input_r_TVALID_int_regslice = ap_const_logic_1)) or (not(((gmem_BVALID = ap_const_logic_0) or (input_r_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state34)))) then
                tmp_data_V_1_reg_437 <= input_r_TDATA_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_boolean_1 = ap_block_state25_io) or ((ap_predicate_op175_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op146_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000)) or (not(((ap_const_boolean_1 = ap_block_state25_io) or ((ap_predicate_op175_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op146_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_last_V_reg_876 = ap_const_lv1_0) and (state_2_reg_843 = ap_const_lv32_1000)))) then
                tmp_out_data_V_fu_140 <= accumulate_3_fu_611_p2;
                tmp_out_dest_V_fu_160 <= tmp_dest_V_reg_888;
                tmp_out_id_V_fu_156 <= tmp_id_V_reg_881;
                tmp_out_keep_V_fu_144 <= tmp_keep_V_reg_855;
                tmp_out_strb_V_fu_148 <= tmp_strb_V_reg_862;
                tmp_out_user_V_fu_152 <= tmp_user_V_reg_869;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    zext_ln66_reg_895(5 downto 0) <= zext_ln66_fu_540_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln66_reg_895(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state15, ap_CS_fsm_state22, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state34, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state25, state_2_reg_843, tmp_last_V_reg_876, ap_CS_fsm_state26, ap_phi_mux_tmp_last_V_1_phi_fu_308_p4, p_4_0_0_0112_phi_reg_448, ap_CS_fsm_state46, ap_CS_fsm_state2, state_2_load_fu_517_p1, ap_CS_fsm_state3, icmp_ln66_fu_544_p2, ap_CS_fsm_state27, icmp_ln39_fu_672_p2, ap_CS_fsm_state43, ap_CS_fsm_state45, gmem_AWREADY, gmem_WREADY, gmem_ARREADY, gmem_RVALID, gmem_BVALID, tmp_last_V_1_reg_305, ap_predicate_op146_write_state25, ap_predicate_op175_write_state25, ap_block_state25_io, ap_predicate_op176_write_state26, ap_block_state26_io, regslice_both_output_r_V_data_V_U_apdone_blk, output_r_TREADY_int_regslice, input_r_TVALID_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((state_2_load_fu_517_p1 = ap_const_lv32_11) and (ap_const_logic_1 = ap_CS_fsm_state2) and (input_r_TVALID_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                elsif (((state_2_load_fu_517_p1 = ap_const_lv32_1000) and (ap_const_logic_1 = ap_CS_fsm_state2) and (input_r_TVALID_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((state_2_load_fu_517_p1 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (input_r_TVALID_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                elsif ((not((state_2_load_fu_517_p1 = ap_const_lv32_11)) and not((state_2_load_fu_517_p1 = ap_const_lv32_0)) and not((state_2_load_fu_517_p1 = ap_const_lv32_1000)) and (ap_const_logic_1 = ap_CS_fsm_state2) and (input_r_TVALID_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln66_fu_544_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state15 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if ((not(((ap_const_boolean_1 = ap_block_state25_io) or ((ap_predicate_op175_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op146_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state25) and (((((p_4_0_0_0112_phi_reg_448 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_11)) or ((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_1) and (tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000))) or (not((state_2_reg_843 = ap_const_lv32_0)) and not((state_2_reg_843 = ap_const_lv32_11)) and not((state_2_reg_843 = ap_const_lv32_1000)) and (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_1))) or ((tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                elsif ((not(((ap_const_boolean_1 = ap_block_state25_io) or ((ap_predicate_op175_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op146_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state25) and ((not((state_2_reg_843 = ap_const_lv32_0)) and not((state_2_reg_843 = ap_const_lv32_11)) and (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_0)) or ((tmp_last_V_reg_876 = ap_const_lv1_0) and (state_2_reg_843 = ap_const_lv32_1000))))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if ((not(((ap_const_boolean_1 = ap_block_state26_io) or ((ap_predicate_op176_write_state26 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state26) and (((((p_4_0_0_0112_phi_reg_448 = ap_const_lv1_0) and (state_2_reg_843 = ap_const_lv32_11)) or ((tmp_last_V_reg_876 = ap_const_lv1_0) and (state_2_reg_843 = ap_const_lv32_1000))) or (not((state_2_reg_843 = ap_const_lv32_0)) and not((state_2_reg_843 = ap_const_lv32_11)) and (tmp_last_V_1_reg_305 = ap_const_lv1_0))) or ((tmp_last_V_reg_876 = ap_const_lv1_0) and (state_2_reg_843 = ap_const_lv32_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if (((icmp_ln39_fu_672_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if ((not(((gmem_BVALID = ap_const_logic_0) or (input_r_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (((p_4_0_0_0112_phi_reg_448 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and (tmp_last_V_reg_876 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state46 => 
                if ((not(((output_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_output_r_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    accumulate_2_fu_602_p2 <= std_logic_vector(unsigned(mul_ln69_reg_929) + unsigned(accumulate_reg_293));
    accumulate_3_fu_611_p2 <= std_logic_vector(unsigned(mul_ln72_reg_944) + unsigned(accumulate_reg_293));
    add_ln39_fu_715_p2 <= std_logic_vector(unsigned(j_reg_426) + unsigned(ap_const_lv6_3F));
    add_ln40_fu_690_p2 <= std_logic_vector(unsigned(zext_ln40_fu_686_p1) + unsigned(coefs_read_reg_795));
    add_ln66_fu_550_p2 <= std_logic_vector(unsigned(i_reg_282) + unsigned(ap_const_lv6_3F));
    add_ln69_fu_573_p2 <= std_logic_vector(unsigned(zext_ln69_fu_569_p1) + unsigned(coefs_read_reg_795));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state11_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;

    ap_ST_fsm_state15_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;
    ap_ST_fsm_state1_blk <= ap_const_logic_0;
    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;

    ap_ST_fsm_state22_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state22_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state22_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;

    ap_ST_fsm_state25_blk_assign_proc : process(ap_predicate_op146_write_state25, ap_predicate_op175_write_state25, ap_block_state25_io, output_r_TREADY_int_regslice)
    begin
        if (((ap_const_boolean_1 = ap_block_state25_io) or ((ap_predicate_op175_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op146_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) then 
            ap_ST_fsm_state25_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state25_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state26_blk_assign_proc : process(ap_predicate_op176_write_state26, ap_block_state26_io, output_r_TREADY_int_regslice)
    begin
        if (((ap_const_boolean_1 = ap_block_state26_io) or ((ap_predicate_op176_write_state26 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) then 
            ap_ST_fsm_state26_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state26_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state27_blk <= ap_const_logic_0;

    ap_ST_fsm_state28_blk_assign_proc : process(gmem_AWREADY)
    begin
        if ((gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state28_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state28_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state29_blk_assign_proc : process(gmem_WREADY)
    begin
        if ((gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state29_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state29_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(input_r_TVALID_int_regslice)
    begin
        if ((input_r_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;

    ap_ST_fsm_state34_blk_assign_proc : process(gmem_BVALID, input_r_TVALID_int_regslice)
    begin
        if (((gmem_BVALID = ap_const_logic_0) or (input_r_TVALID_int_regslice = ap_const_logic_0))) then 
            ap_ST_fsm_state34_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state34_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;

    ap_ST_fsm_state46_blk_assign_proc : process(regslice_both_output_r_V_data_V_U_apdone_blk, output_r_TREADY_int_regslice)
    begin
        if (((output_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_output_r_V_data_V_U_apdone_blk = ap_const_logic_1))) then 
            ap_ST_fsm_state46_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state46_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state25_assign_proc : process(ap_predicate_op146_write_state25, ap_predicate_op175_write_state25, output_r_TREADY_int_regslice)
    begin
                ap_block_state25 <= (((ap_predicate_op175_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op146_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state25_io_assign_proc : process(ap_predicate_op146_write_state25, ap_predicate_op175_write_state25, output_r_TREADY_int_regslice)
    begin
                ap_block_state25_io <= (((ap_predicate_op175_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op146_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state26_assign_proc : process(ap_predicate_op176_write_state26, output_r_TREADY_int_regslice)
    begin
                ap_block_state26 <= ((ap_predicate_op176_write_state26 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state26_io_assign_proc : process(ap_predicate_op176_write_state26, output_r_TREADY_int_regslice)
    begin
                ap_block_state26_io <= ((ap_predicate_op176_write_state26 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state34_assign_proc : process(gmem_BVALID, input_r_TVALID_int_regslice)
    begin
                ap_block_state34 <= ((gmem_BVALID = ap_const_logic_0) or (input_r_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state46_assign_proc : process(regslice_both_output_r_V_data_V_U_apdone_blk, output_r_TREADY_int_regslice)
    begin
                ap_block_state46 <= ((output_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_output_r_V_data_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_condition_1155_assign_proc : process(ap_CS_fsm_state25, ap_predicate_op146_write_state25, ap_predicate_op175_write_state25, output_r_TREADY_int_regslice)
    begin
                ap_condition_1155 <= (not((((ap_predicate_op175_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op146_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state25));
    end process;


    ap_phi_mux_state_1_phi_fu_319_p4_assign_proc : process(ap_CS_fsm_state25, state_2_reg_843, tmp_last_V_reg_876, state_1_reg_316)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000))) then 
            ap_phi_mux_state_1_phi_fu_319_p4 <= ap_const_lv32_1000;
        else 
            ap_phi_mux_state_1_phi_fu_319_p4 <= state_1_reg_316;
        end if; 
    end process;


    ap_phi_mux_state_3241_phi_fu_414_p8_assign_proc : process(state_2_reg_843, tmp_last_V_reg_876, ap_CS_fsm_state26, state_3241_reg_411)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_last_V_reg_876 = ap_const_lv1_0) and (state_2_reg_843 = ap_const_lv32_1000))) then 
            ap_phi_mux_state_3241_phi_fu_414_p8 <= ap_const_lv32_1000;
        else 
            ap_phi_mux_state_3241_phi_fu_414_p8 <= state_3241_reg_411;
        end if; 
    end process;


    ap_phi_mux_tmp_data_V_4_phi_fu_401_p6_assign_proc : process(ap_CS_fsm_state25, state_2_reg_843, tmp_last_V_reg_876, ap_phi_mux_tmp_last_V_1_phi_fu_308_p4, grp_load_fu_460_p1, tmp_data_V_4_reg_397)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and ((not((state_2_reg_843 = ap_const_lv32_0)) and not((state_2_reg_843 = ap_const_lv32_11)) and not((state_2_reg_843 = ap_const_lv32_1000)) and (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_1)) or ((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_1) and (tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000))))) then 
            ap_phi_mux_tmp_data_V_4_phi_fu_401_p6 <= grp_load_fu_460_p1;
        else 
            ap_phi_mux_tmp_data_V_4_phi_fu_401_p6 <= tmp_data_V_4_reg_397;
        end if; 
    end process;


    ap_phi_mux_tmp_dest_V_1_phi_fu_331_p6_assign_proc : process(ap_CS_fsm_state25, state_2_reg_843, tmp_last_V_reg_876, ap_phi_mux_tmp_last_V_1_phi_fu_308_p4, grp_load_fu_480_p1, tmp_dest_V_1_reg_327)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and ((not((state_2_reg_843 = ap_const_lv32_0)) and not((state_2_reg_843 = ap_const_lv32_11)) and not((state_2_reg_843 = ap_const_lv32_1000)) and (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_1)) or ((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_1) and (tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000))))) then 
            ap_phi_mux_tmp_dest_V_1_phi_fu_331_p6 <= grp_load_fu_480_p1;
        else 
            ap_phi_mux_tmp_dest_V_1_phi_fu_331_p6 <= tmp_dest_V_1_reg_327;
        end if; 
    end process;


    ap_phi_mux_tmp_id_V_1_phi_fu_345_p6_assign_proc : process(ap_CS_fsm_state25, state_2_reg_843, tmp_last_V_reg_876, ap_phi_mux_tmp_last_V_1_phi_fu_308_p4, grp_load_fu_476_p1, tmp_id_V_1_reg_341)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and ((not((state_2_reg_843 = ap_const_lv32_0)) and not((state_2_reg_843 = ap_const_lv32_11)) and not((state_2_reg_843 = ap_const_lv32_1000)) and (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_1)) or ((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_1) and (tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000))))) then 
            ap_phi_mux_tmp_id_V_1_phi_fu_345_p6 <= grp_load_fu_476_p1;
        else 
            ap_phi_mux_tmp_id_V_1_phi_fu_345_p6 <= tmp_id_V_1_reg_341;
        end if; 
    end process;


    ap_phi_mux_tmp_keep_V_1_phi_fu_387_p6_assign_proc : process(ap_CS_fsm_state25, state_2_reg_843, tmp_last_V_reg_876, ap_phi_mux_tmp_last_V_1_phi_fu_308_p4, grp_load_fu_464_p1, tmp_keep_V_1_reg_383)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and ((not((state_2_reg_843 = ap_const_lv32_0)) and not((state_2_reg_843 = ap_const_lv32_11)) and not((state_2_reg_843 = ap_const_lv32_1000)) and (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_1)) or ((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_1) and (tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000))))) then 
            ap_phi_mux_tmp_keep_V_1_phi_fu_387_p6 <= grp_load_fu_464_p1;
        else 
            ap_phi_mux_tmp_keep_V_1_phi_fu_387_p6 <= tmp_keep_V_1_reg_383;
        end if; 
    end process;


    ap_phi_mux_tmp_last_V_1_phi_fu_308_p4_assign_proc : process(ap_CS_fsm_state25, state_2_reg_843, tmp_last_V_reg_876, tmp_last_V_1_reg_305)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000))) then 
            ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 <= ap_const_lv1_1;
        else 
            ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 <= tmp_last_V_1_reg_305;
        end if; 
    end process;


    ap_phi_mux_tmp_strb_V_1_phi_fu_373_p6_assign_proc : process(ap_CS_fsm_state25, state_2_reg_843, tmp_last_V_reg_876, ap_phi_mux_tmp_last_V_1_phi_fu_308_p4, grp_load_fu_468_p1, tmp_strb_V_1_reg_369)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and ((not((state_2_reg_843 = ap_const_lv32_0)) and not((state_2_reg_843 = ap_const_lv32_11)) and not((state_2_reg_843 = ap_const_lv32_1000)) and (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_1)) or ((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_1) and (tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000))))) then 
            ap_phi_mux_tmp_strb_V_1_phi_fu_373_p6 <= grp_load_fu_468_p1;
        else 
            ap_phi_mux_tmp_strb_V_1_phi_fu_373_p6 <= tmp_strb_V_1_reg_369;
        end if; 
    end process;


    ap_phi_mux_tmp_user_V_1_phi_fu_359_p6_assign_proc : process(ap_CS_fsm_state25, state_2_reg_843, tmp_last_V_reg_876, ap_phi_mux_tmp_last_V_1_phi_fu_308_p4, grp_load_fu_472_p1, tmp_user_V_1_reg_355)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and ((not((state_2_reg_843 = ap_const_lv32_0)) and not((state_2_reg_843 = ap_const_lv32_11)) and not((state_2_reg_843 = ap_const_lv32_1000)) and (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_1)) or ((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_1) and (tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000))))) then 
            ap_phi_mux_tmp_user_V_1_phi_fu_359_p6 <= grp_load_fu_472_p1;
        else 
            ap_phi_mux_tmp_user_V_1_phi_fu_359_p6 <= tmp_user_V_1_reg_355;
        end if; 
    end process;


    ap_predicate_op146_write_state25_assign_proc : process(state_2_reg_843, tmp_last_V_reg_876)
    begin
                ap_predicate_op146_write_state25 <= ((tmp_last_V_reg_876 = ap_const_lv1_0) and (state_2_reg_843 = ap_const_lv32_1000));
    end process;


    ap_predicate_op175_write_state25_assign_proc : process(state_2_reg_843, tmp_last_V_reg_876, ap_phi_mux_tmp_last_V_1_phi_fu_308_p4, p_4_0_0_0112_phi_reg_448)
    begin
                ap_predicate_op175_write_state25 <= (((((p_4_0_0_0112_phi_reg_448 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_11)) or ((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_1) and (tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000))) or (not((state_2_reg_843 = ap_const_lv32_0)) and not((state_2_reg_843 = ap_const_lv32_11)) and not((state_2_reg_843 = ap_const_lv32_1000)) and (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_1))) or ((tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_0)));
    end process;


    ap_predicate_op176_write_state26_assign_proc : process(state_2_reg_843, tmp_last_V_reg_876)
    begin
                ap_predicate_op176_write_state26 <= ((tmp_last_V_reg_876 = ap_const_lv1_0) and (state_2_reg_843 = ap_const_lv32_1000));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_allocacmp_tmp_out_data_V_4_assign_proc : process(ap_CS_fsm_state25, state_2_reg_843, tmp_last_V_reg_876, accumulate_3_fu_611_p2, tmp_out_data_V_fu_140)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000))) then 
            ap_sig_allocacmp_tmp_out_data_V_4 <= accumulate_3_fu_611_p2;
        else 
            ap_sig_allocacmp_tmp_out_data_V_4 <= tmp_out_data_V_fu_140;
        end if; 
    end process;


    ap_sig_allocacmp_tmp_out_dest_V_4_assign_proc : process(ap_CS_fsm_state25, state_2_reg_843, tmp_last_V_reg_876, tmp_dest_V_reg_888, tmp_out_dest_V_fu_160)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000))) then 
            ap_sig_allocacmp_tmp_out_dest_V_4 <= tmp_dest_V_reg_888;
        else 
            ap_sig_allocacmp_tmp_out_dest_V_4 <= tmp_out_dest_V_fu_160;
        end if; 
    end process;


    ap_sig_allocacmp_tmp_out_id_V_4_assign_proc : process(ap_CS_fsm_state25, state_2_reg_843, tmp_last_V_reg_876, tmp_id_V_reg_881, tmp_out_id_V_fu_156)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000))) then 
            ap_sig_allocacmp_tmp_out_id_V_4 <= tmp_id_V_reg_881;
        else 
            ap_sig_allocacmp_tmp_out_id_V_4 <= tmp_out_id_V_fu_156;
        end if; 
    end process;


    ap_sig_allocacmp_tmp_out_keep_V_4_assign_proc : process(ap_CS_fsm_state25, state_2_reg_843, tmp_last_V_reg_876, tmp_keep_V_reg_855, tmp_out_keep_V_fu_144)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000))) then 
            ap_sig_allocacmp_tmp_out_keep_V_4 <= tmp_keep_V_reg_855;
        else 
            ap_sig_allocacmp_tmp_out_keep_V_4 <= tmp_out_keep_V_fu_144;
        end if; 
    end process;


    ap_sig_allocacmp_tmp_out_strb_V_4_assign_proc : process(ap_CS_fsm_state25, state_2_reg_843, tmp_last_V_reg_876, tmp_strb_V_reg_862, tmp_out_strb_V_fu_148)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000))) then 
            ap_sig_allocacmp_tmp_out_strb_V_4 <= tmp_strb_V_reg_862;
        else 
            ap_sig_allocacmp_tmp_out_strb_V_4 <= tmp_out_strb_V_fu_148;
        end if; 
    end process;


    ap_sig_allocacmp_tmp_out_user_V_4_assign_proc : process(ap_CS_fsm_state25, state_2_reg_843, tmp_last_V_reg_876, tmp_user_V_reg_869, tmp_out_user_V_fu_152)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000))) then 
            ap_sig_allocacmp_tmp_out_user_V_4 <= tmp_user_V_reg_869;
        else 
            ap_sig_allocacmp_tmp_out_user_V_4 <= tmp_out_user_V_fu_152;
        end if; 
    end process;


    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state4, gmem_addr_reg_801, gmem_addr_2_reg_913, gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                gmem_ARADDR <= gmem_addr_reg_801;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                gmem_ARADDR <= gmem_addr_2_reg_913;
            else 
                gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state4, gmem_ARREADY)
    begin
        if ((((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state28, gmem_AWREADY)
    begin
        if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state34, gmem_BVALID, input_r_TVALID_int_regslice)
    begin
        if ((not(((gmem_BVALID = ap_const_logic_0) or (input_r_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state11, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state29, gmem_WREADY)
    begin
        if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state15, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state22, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_load_fu_460_p1_assign_proc : process(ap_CS_fsm_state25, state_2_reg_843, tmp_last_V_reg_876, ap_CS_fsm_state2, tmp_out_data_V_fu_140, ap_sig_allocacmp_tmp_out_data_V_4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and ((not((state_2_reg_843 = ap_const_lv32_0)) and not((state_2_reg_843 = ap_const_lv32_11)) and not((state_2_reg_843 = ap_const_lv32_1000))) or ((tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000))))) then 
            grp_load_fu_460_p1 <= ap_sig_allocacmp_tmp_out_data_V_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_load_fu_460_p1 <= tmp_out_data_V_fu_140;
        else 
            grp_load_fu_460_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_load_fu_464_p1_assign_proc : process(ap_CS_fsm_state25, state_2_reg_843, tmp_last_V_reg_876, ap_CS_fsm_state2, tmp_out_keep_V_fu_144, ap_sig_allocacmp_tmp_out_keep_V_4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and ((not((state_2_reg_843 = ap_const_lv32_0)) and not((state_2_reg_843 = ap_const_lv32_11)) and not((state_2_reg_843 = ap_const_lv32_1000))) or ((tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000))))) then 
            grp_load_fu_464_p1 <= ap_sig_allocacmp_tmp_out_keep_V_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_load_fu_464_p1 <= tmp_out_keep_V_fu_144;
        else 
            grp_load_fu_464_p1 <= "XXXX";
        end if; 
    end process;


    grp_load_fu_468_p1_assign_proc : process(ap_CS_fsm_state25, state_2_reg_843, tmp_last_V_reg_876, ap_CS_fsm_state2, tmp_out_strb_V_fu_148, ap_sig_allocacmp_tmp_out_strb_V_4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and ((not((state_2_reg_843 = ap_const_lv32_0)) and not((state_2_reg_843 = ap_const_lv32_11)) and not((state_2_reg_843 = ap_const_lv32_1000))) or ((tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000))))) then 
            grp_load_fu_468_p1 <= ap_sig_allocacmp_tmp_out_strb_V_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_load_fu_468_p1 <= tmp_out_strb_V_fu_148;
        else 
            grp_load_fu_468_p1 <= "XXXX";
        end if; 
    end process;


    grp_load_fu_472_p1_assign_proc : process(ap_CS_fsm_state25, state_2_reg_843, tmp_last_V_reg_876, ap_CS_fsm_state2, tmp_out_user_V_fu_152, ap_sig_allocacmp_tmp_out_user_V_4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and ((not((state_2_reg_843 = ap_const_lv32_0)) and not((state_2_reg_843 = ap_const_lv32_11)) and not((state_2_reg_843 = ap_const_lv32_1000))) or ((tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000))))) then 
            grp_load_fu_472_p1 <= ap_sig_allocacmp_tmp_out_user_V_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_load_fu_472_p1 <= tmp_out_user_V_fu_152;
        else 
            grp_load_fu_472_p1 <= "X";
        end if; 
    end process;


    grp_load_fu_476_p1_assign_proc : process(ap_CS_fsm_state25, state_2_reg_843, tmp_last_V_reg_876, ap_CS_fsm_state2, tmp_out_id_V_fu_156, ap_sig_allocacmp_tmp_out_id_V_4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and ((not((state_2_reg_843 = ap_const_lv32_0)) and not((state_2_reg_843 = ap_const_lv32_11)) and not((state_2_reg_843 = ap_const_lv32_1000))) or ((tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000))))) then 
            grp_load_fu_476_p1 <= ap_sig_allocacmp_tmp_out_id_V_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_load_fu_476_p1 <= tmp_out_id_V_fu_156;
        else 
            grp_load_fu_476_p1 <= "X";
        end if; 
    end process;


    grp_load_fu_480_p1_assign_proc : process(ap_CS_fsm_state25, state_2_reg_843, tmp_last_V_reg_876, ap_CS_fsm_state2, tmp_out_dest_V_fu_160, ap_sig_allocacmp_tmp_out_dest_V_4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and ((not((state_2_reg_843 = ap_const_lv32_0)) and not((state_2_reg_843 = ap_const_lv32_11)) and not((state_2_reg_843 = ap_const_lv32_1000))) or ((tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000))))) then 
            grp_load_fu_480_p1 <= ap_sig_allocacmp_tmp_out_dest_V_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_load_fu_480_p1 <= tmp_out_dest_V_fu_160;
        else 
            grp_load_fu_480_p1 <= "X";
        end if; 
    end process;

    icmp_ln31_fu_734_p2 <= "1" when (tmp_data_V_reg_847 = ap_const_lv32_BEEF) else "0";
    icmp_ln39_fu_672_p2 <= "1" when (j_reg_426 = ap_const_lv6_0) else "0";
    icmp_ln45_fu_721_p2 <= "1" when (tmp_data_V_1_reg_437 = ap_const_lv32_ABBA) else "0";
    icmp_ln66_fu_544_p2 <= "1" when (i_reg_282 = ap_const_lv6_0) else "0";

    input_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state34, ap_CS_fsm_state2, input_r_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            input_r_TDATA_blk_n <= input_r_TVALID_int_regslice;
        else 
            input_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input_r_TREADY <= regslice_both_input_r_V_data_V_U_ack_in;

    input_r_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state34, ap_CS_fsm_state2, gmem_BVALID, input_r_TVALID_int_regslice)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (input_r_TVALID_int_regslice = ap_const_logic_1)) or (not(((gmem_BVALID = ap_const_logic_0) or (input_r_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state34)))) then 
            input_r_TREADY_int_regslice <= ap_const_logic_1;
        else 
            input_r_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    output_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state25, state_2_reg_843, tmp_last_V_reg_876, ap_CS_fsm_state26, ap_phi_mux_tmp_last_V_1_phi_fu_308_p4, p_4_0_0_0112_phi_reg_448, ap_CS_fsm_state46, output_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_last_V_reg_876 = ap_const_lv1_0) and (state_2_reg_843 = ap_const_lv32_1000)) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (((((p_4_0_0_0112_phi_reg_448 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_11)) or ((ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_1) and (tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_1000))) or (not((state_2_reg_843 = ap_const_lv32_0)) and not((state_2_reg_843 = ap_const_lv32_11)) and not((state_2_reg_843 = ap_const_lv32_1000)) and (ap_phi_mux_tmp_last_V_1_phi_fu_308_p4 = ap_const_lv1_1))) or ((tmp_last_V_reg_876 = ap_const_lv1_1) and (state_2_reg_843 = ap_const_lv32_0)))) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_last_V_reg_876 = ap_const_lv1_0) and (state_2_reg_843 = ap_const_lv32_1000)))) then 
            output_r_TDATA_blk_n <= output_r_TREADY_int_regslice;
        else 
            output_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    output_r_TDATA_int_regslice_assign_proc : process(accumulate_3_fu_611_p2, ap_predicate_op146_write_state25, ap_predicate_op175_write_state25, ap_phi_mux_tmp_data_V_4_phi_fu_401_p6, ap_condition_1155)
    begin
        if ((ap_const_boolean_1 = ap_condition_1155)) then
            if ((ap_predicate_op175_write_state25 = ap_const_boolean_1)) then 
                output_r_TDATA_int_regslice <= ap_phi_mux_tmp_data_V_4_phi_fu_401_p6;
            elsif ((ap_predicate_op146_write_state25 = ap_const_boolean_1)) then 
                output_r_TDATA_int_regslice <= accumulate_3_fu_611_p2;
            else 
                output_r_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            output_r_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_TDEST_int_regslice_assign_proc : process(tmp_dest_V_reg_888, ap_predicate_op146_write_state25, ap_predicate_op175_write_state25, ap_phi_mux_tmp_dest_V_1_phi_fu_331_p6, ap_condition_1155)
    begin
        if ((ap_const_boolean_1 = ap_condition_1155)) then
            if ((ap_predicate_op175_write_state25 = ap_const_boolean_1)) then 
                output_r_TDEST_int_regslice <= ap_phi_mux_tmp_dest_V_1_phi_fu_331_p6;
            elsif ((ap_predicate_op146_write_state25 = ap_const_boolean_1)) then 
                output_r_TDEST_int_regslice <= tmp_dest_V_reg_888;
            else 
                output_r_TDEST_int_regslice <= "X";
            end if;
        else 
            output_r_TDEST_int_regslice <= "X";
        end if; 
    end process;


    output_r_TID_int_regslice_assign_proc : process(tmp_id_V_reg_881, ap_predicate_op146_write_state25, ap_predicate_op175_write_state25, ap_phi_mux_tmp_id_V_1_phi_fu_345_p6, ap_condition_1155)
    begin
        if ((ap_const_boolean_1 = ap_condition_1155)) then
            if ((ap_predicate_op175_write_state25 = ap_const_boolean_1)) then 
                output_r_TID_int_regslice <= ap_phi_mux_tmp_id_V_1_phi_fu_345_p6;
            elsif ((ap_predicate_op146_write_state25 = ap_const_boolean_1)) then 
                output_r_TID_int_regslice <= tmp_id_V_reg_881;
            else 
                output_r_TID_int_regslice <= "X";
            end if;
        else 
            output_r_TID_int_regslice <= "X";
        end if; 
    end process;


    output_r_TKEEP_int_regslice_assign_proc : process(tmp_keep_V_reg_855, ap_predicate_op146_write_state25, ap_predicate_op175_write_state25, ap_phi_mux_tmp_keep_V_1_phi_fu_387_p6, ap_condition_1155)
    begin
        if ((ap_const_boolean_1 = ap_condition_1155)) then
            if ((ap_predicate_op175_write_state25 = ap_const_boolean_1)) then 
                output_r_TKEEP_int_regslice <= ap_phi_mux_tmp_keep_V_1_phi_fu_387_p6;
            elsif ((ap_predicate_op146_write_state25 = ap_const_boolean_1)) then 
                output_r_TKEEP_int_regslice <= tmp_keep_V_reg_855;
            else 
                output_r_TKEEP_int_regslice <= "XXXX";
            end if;
        else 
            output_r_TKEEP_int_regslice <= "XXXX";
        end if; 
    end process;


    output_r_TLAST_int_regslice_assign_proc : process(ap_predicate_op146_write_state25, ap_predicate_op175_write_state25, ap_condition_1155)
    begin
        if ((ap_const_boolean_1 = ap_condition_1155)) then
            if ((ap_predicate_op175_write_state25 = ap_const_boolean_1)) then 
                output_r_TLAST_int_regslice <= ap_const_lv1_1;
            elsif ((ap_predicate_op146_write_state25 = ap_const_boolean_1)) then 
                output_r_TLAST_int_regslice <= ap_const_lv1_0;
            else 
                output_r_TLAST_int_regslice <= "X";
            end if;
        else 
            output_r_TLAST_int_regslice <= "X";
        end if; 
    end process;


    output_r_TSTRB_int_regslice_assign_proc : process(tmp_strb_V_reg_862, ap_predicate_op146_write_state25, ap_predicate_op175_write_state25, ap_phi_mux_tmp_strb_V_1_phi_fu_373_p6, ap_condition_1155)
    begin
        if ((ap_const_boolean_1 = ap_condition_1155)) then
            if ((ap_predicate_op175_write_state25 = ap_const_boolean_1)) then 
                output_r_TSTRB_int_regslice <= ap_phi_mux_tmp_strb_V_1_phi_fu_373_p6;
            elsif ((ap_predicate_op146_write_state25 = ap_const_boolean_1)) then 
                output_r_TSTRB_int_regslice <= tmp_strb_V_reg_862;
            else 
                output_r_TSTRB_int_regslice <= "XXXX";
            end if;
        else 
            output_r_TSTRB_int_regslice <= "XXXX";
        end if; 
    end process;


    output_r_TUSER_int_regslice_assign_proc : process(tmp_user_V_reg_869, ap_predicate_op146_write_state25, ap_predicate_op175_write_state25, ap_phi_mux_tmp_user_V_1_phi_fu_359_p6, ap_condition_1155)
    begin
        if ((ap_const_boolean_1 = ap_condition_1155)) then
            if ((ap_predicate_op175_write_state25 = ap_const_boolean_1)) then 
                output_r_TUSER_int_regslice <= ap_phi_mux_tmp_user_V_1_phi_fu_359_p6;
            elsif ((ap_predicate_op146_write_state25 = ap_const_boolean_1)) then 
                output_r_TUSER_int_regslice <= tmp_user_V_reg_869;
            else 
                output_r_TUSER_int_regslice <= "X";
            end if;
        else 
            output_r_TUSER_int_regslice <= "X";
        end if; 
    end process;

    output_r_TVALID <= regslice_both_output_r_V_data_V_U_vld_out;

    output_r_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state25, ap_predicate_op146_write_state25, ap_predicate_op175_write_state25, ap_block_state25_io, output_r_TREADY_int_regslice)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state25_io) or ((ap_predicate_op175_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op146_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_predicate_op175_write_state25 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or (not(((ap_const_boolean_1 = ap_block_state25_io) or ((ap_predicate_op175_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op146_write_state25 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_predicate_op146_write_state25 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state25)))) then 
            output_r_TVALID_int_regslice <= ap_const_logic_1;
        else 
            output_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    select_ln17_1_fu_727_p3 <= 
        ap_const_lv32_1000 when (icmp_ln45_reg_978(0) = '1') else 
        ap_const_lv32_11;
    select_ln17_fu_739_p3 <= 
        ap_const_lv32_11 when (icmp_ln31_reg_988(0) = '1') else 
        ap_const_lv32_0;
        sext_ln40_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_695_p4),64));

        sext_ln69_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_fu_578_p4),64));

        sext_ln72_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_492_p4),64));

    shl_ln1_fu_561_p3 <= (i_reg_282 & ap_const_lv2_0);
    shl_ln_fu_678_p3 <= (j_reg_426 & ap_const_lv2_0);

    signal_shift_reg_address0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state4, zext_ln66_reg_895, ap_CS_fsm_state3, zext_ln68_fu_556_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            signal_shift_reg_address0 <= ap_const_lv6_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            signal_shift_reg_address0 <= zext_ln66_reg_895(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            signal_shift_reg_address0 <= zext_ln68_fu_556_p1(6 - 1 downto 0);
        else 
            signal_shift_reg_address0 <= "XXXXXX";
        end if; 
    end process;


    signal_shift_reg_ce0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state4, ap_CS_fsm_state3, gmem_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            signal_shift_reg_ce0 <= ap_const_logic_1;
        else 
            signal_shift_reg_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    signal_shift_reg_d0_assign_proc : process(signal_shift_reg_q0, ap_CS_fsm_state15, ap_CS_fsm_state4, tmp_data_V_reg_847)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            signal_shift_reg_d0 <= tmp_data_V_reg_847;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            signal_shift_reg_d0 <= signal_shift_reg_q0;
        else 
            signal_shift_reg_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    signal_shift_reg_we0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state4, gmem_ARREADY)
    begin
        if ((((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            signal_shift_reg_we0 <= ap_const_logic_1;
        else 
            signal_shift_reg_we0 <= ap_const_logic_0;
        end if; 
    end process;

    state_2_load_fu_517_p1 <= state_fu_164;
    trunc_ln1_fu_695_p4 <= add_ln40_fu_690_p2(63 downto 2);
    trunc_ln2_fu_578_p4 <= add_ln69_fu_573_p2(63 downto 2);
    trunc_ln_fu_492_p4 <= coefs(63 downto 2);
    zext_ln40_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_678_p3),64));
    zext_ln66_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_282),64));
    zext_ln68_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln66_fu_550_p2),64));
    zext_ln69_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_561_p3),64));
end behav;
