// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="equalizer_equalizer,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=14.600000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=4175,HLS_SYN_LUT=4279,HLS_VERSION=2022_1}" *)

module equalizer (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        output_r_TDATA,
        output_r_TVALID,
        output_r_TREADY,
        output_r_TKEEP,
        output_r_TSTRB,
        output_r_TUSER,
        output_r_TLAST,
        output_r_TID,
        output_r_TDEST,
        input_r_TDATA,
        input_r_TVALID,
        input_r_TREADY,
        input_r_TKEEP,
        input_r_TSTRB,
        input_r_TUSER,
        input_r_TLAST,
        input_r_TID,
        input_r_TDEST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 85'd1;
parameter    ap_ST_fsm_state2 = 85'd2;
parameter    ap_ST_fsm_state3 = 85'd4;
parameter    ap_ST_fsm_state4 = 85'd8;
parameter    ap_ST_fsm_state5 = 85'd16;
parameter    ap_ST_fsm_state6 = 85'd32;
parameter    ap_ST_fsm_state7 = 85'd64;
parameter    ap_ST_fsm_state8 = 85'd128;
parameter    ap_ST_fsm_state9 = 85'd256;
parameter    ap_ST_fsm_state10 = 85'd512;
parameter    ap_ST_fsm_state11 = 85'd1024;
parameter    ap_ST_fsm_state12 = 85'd2048;
parameter    ap_ST_fsm_state13 = 85'd4096;
parameter    ap_ST_fsm_state14 = 85'd8192;
parameter    ap_ST_fsm_state15 = 85'd16384;
parameter    ap_ST_fsm_state16 = 85'd32768;
parameter    ap_ST_fsm_state17 = 85'd65536;
parameter    ap_ST_fsm_state18 = 85'd131072;
parameter    ap_ST_fsm_state19 = 85'd262144;
parameter    ap_ST_fsm_state20 = 85'd524288;
parameter    ap_ST_fsm_state21 = 85'd1048576;
parameter    ap_ST_fsm_state22 = 85'd2097152;
parameter    ap_ST_fsm_state23 = 85'd4194304;
parameter    ap_ST_fsm_state24 = 85'd8388608;
parameter    ap_ST_fsm_state25 = 85'd16777216;
parameter    ap_ST_fsm_state26 = 85'd33554432;
parameter    ap_ST_fsm_state27 = 85'd67108864;
parameter    ap_ST_fsm_state28 = 85'd134217728;
parameter    ap_ST_fsm_state29 = 85'd268435456;
parameter    ap_ST_fsm_state30 = 85'd536870912;
parameter    ap_ST_fsm_state31 = 85'd1073741824;
parameter    ap_ST_fsm_state32 = 85'd2147483648;
parameter    ap_ST_fsm_state33 = 85'd4294967296;
parameter    ap_ST_fsm_state34 = 85'd8589934592;
parameter    ap_ST_fsm_state35 = 85'd17179869184;
parameter    ap_ST_fsm_state36 = 85'd34359738368;
parameter    ap_ST_fsm_state37 = 85'd68719476736;
parameter    ap_ST_fsm_state38 = 85'd137438953472;
parameter    ap_ST_fsm_state39 = 85'd274877906944;
parameter    ap_ST_fsm_state40 = 85'd549755813888;
parameter    ap_ST_fsm_state41 = 85'd1099511627776;
parameter    ap_ST_fsm_state42 = 85'd2199023255552;
parameter    ap_ST_fsm_state43 = 85'd4398046511104;
parameter    ap_ST_fsm_state44 = 85'd8796093022208;
parameter    ap_ST_fsm_state45 = 85'd17592186044416;
parameter    ap_ST_fsm_state46 = 85'd35184372088832;
parameter    ap_ST_fsm_state47 = 85'd70368744177664;
parameter    ap_ST_fsm_state48 = 85'd140737488355328;
parameter    ap_ST_fsm_state49 = 85'd281474976710656;
parameter    ap_ST_fsm_state50 = 85'd562949953421312;
parameter    ap_ST_fsm_state51 = 85'd1125899906842624;
parameter    ap_ST_fsm_state52 = 85'd2251799813685248;
parameter    ap_ST_fsm_state53 = 85'd4503599627370496;
parameter    ap_ST_fsm_state54 = 85'd9007199254740992;
parameter    ap_ST_fsm_state55 = 85'd18014398509481984;
parameter    ap_ST_fsm_state56 = 85'd36028797018963968;
parameter    ap_ST_fsm_state57 = 85'd72057594037927936;
parameter    ap_ST_fsm_state58 = 85'd144115188075855872;
parameter    ap_ST_fsm_state59 = 85'd288230376151711744;
parameter    ap_ST_fsm_state60 = 85'd576460752303423488;
parameter    ap_ST_fsm_state61 = 85'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 85'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 85'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 85'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 85'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 85'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 85'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 85'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 85'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 85'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 85'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 85'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 85'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 85'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 85'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 85'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 85'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 85'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 85'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 85'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 85'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 85'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 85'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 85'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 85'd19342813113834066795298816;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
output  [31:0] output_r_TDATA;
output   output_r_TVALID;
input   output_r_TREADY;
output  [3:0] output_r_TKEEP;
output  [3:0] output_r_TSTRB;
output  [0:0] output_r_TUSER;
output  [0:0] output_r_TLAST;
output  [0:0] output_r_TID;
output  [0:0] output_r_TDEST;
input  [31:0] input_r_TDATA;
input   input_r_TVALID;
output   input_r_TREADY;
input  [3:0] input_r_TKEEP;
input  [3:0] input_r_TSTRB;
input  [0:0] input_r_TUSER;
input  [0:0] input_r_TLAST;
input  [0:0] input_r_TID;
input  [0:0] input_r_TDEST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
wire   [63:0] coefs;
reg  signed [31:0] signal_shift_reg_31;
reg   [31:0] signal_shift_reg_30;
reg   [31:0] signal_shift_reg_29;
reg  signed [31:0] signal_shift_reg_28;
reg   [31:0] signal_shift_reg_27;
reg   [31:0] signal_shift_reg_26;
reg   [31:0] signal_shift_reg_25;
reg  signed [31:0] signal_shift_reg_24;
reg   [31:0] signal_shift_reg_23;
reg   [31:0] signal_shift_reg_22;
reg   [31:0] signal_shift_reg_21;
reg  signed [31:0] signal_shift_reg_20;
reg   [31:0] signal_shift_reg_19;
reg   [31:0] signal_shift_reg_18;
reg   [31:0] signal_shift_reg_17;
reg  signed [31:0] signal_shift_reg_16;
reg   [31:0] signal_shift_reg_15;
reg   [31:0] signal_shift_reg_14;
reg   [31:0] signal_shift_reg_13;
reg  signed [31:0] signal_shift_reg_12;
reg   [31:0] signal_shift_reg_11;
reg  signed [31:0] signal_shift_reg_10;
reg   [31:0] signal_shift_reg_9;
reg   [31:0] signal_shift_reg_8;
reg   [31:0] signal_shift_reg_7;
reg  signed [31:0] signal_shift_reg_6;
reg  signed [31:0] signal_shift_reg_5;
reg   [31:0] signal_shift_reg_4;
reg   [31:0] signal_shift_reg_3;
reg  signed [31:0] signal_shift_reg_2;
reg  signed [31:0] signal_shift_reg_1;
reg  signed [31:0] signal_shift_reg_0;
reg    gmem_blk_n_AR;
(* fsm_encoding = "none" *) reg   [84:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire   [31:0] state_load_load_fu_325_p1;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
reg    output_r_TDATA_blk_n;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
reg   [31:0] state_load_reg_1104;
reg    input_r_TDATA_blk_n;
reg  signed [31:0] reg_287;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire   [8:0] gmem_RFIFONUM;
wire    gmem_BVALID;
reg    gmem_BREADY;
reg  signed [31:0] reg_291;
reg   [63:0] coefs_read_reg_1087;
wire    ap_CS_fsm_state1;
reg   [63:0] gmem_addr_reg_1098;
reg   [31:0] tmp_data_V_reg_1108;
reg   [3:0] tmp_keep_V_reg_1115;
reg   [3:0] tmp_strb_V_reg_1120;
reg   [0:0] tmp_user_V_reg_1125;
reg   [0:0] tmp_last_V_reg_1130;
reg   [0:0] tmp_id_V_reg_1139;
reg   [0:0] tmp_dest_V_reg_1144;
wire   [31:0] mul_ln82_fu_399_p2;
reg   [31:0] mul_ln82_reg_1149;
reg  signed [31:0] gmem_addr_read_3_reg_1154;
reg  signed [31:0] signal_shift_reg_3_load_reg_1159;
wire   [31:0] add_ln82_27_fu_461_p2;
reg   [31:0] add_ln82_27_reg_1165;
reg  signed [31:0] signal_shift_reg_4_load_reg_1170;
wire   [31:0] mul_ln79_27_fu_481_p2;
reg   [31:0] mul_ln79_27_reg_1176;
wire   [31:0] add_ln82_28_fu_496_p2;
reg   [31:0] add_ln82_28_reg_1181;
reg  signed [31:0] signal_shift_reg_7_load_reg_1186;
wire   [31:0] add_ln82_23_fu_542_p2;
reg   [31:0] add_ln82_23_reg_1192;
reg  signed [31:0] signal_shift_reg_8_load_reg_1197;
wire   [31:0] mul_ln79_23_fu_557_p2;
reg   [31:0] mul_ln79_23_reg_1203;
reg  signed [31:0] signal_shift_reg_9_load_reg_1208;
wire   [31:0] add_ln82_22_fu_576_p2;
reg   [31:0] add_ln82_22_reg_1214;
wire   [31:0] add_ln82_29_fu_585_p2;
reg   [31:0] add_ln82_29_reg_1219;
reg  signed [31:0] signal_shift_reg_11_load_reg_1224;
wire   [31:0] add_ln82_19_fu_620_p2;
reg   [31:0] add_ln82_19_reg_1230;
reg  signed [31:0] signal_shift_reg_13_load_reg_1235;
wire   [31:0] add_ln82_20_fu_662_p2;
reg   [31:0] add_ln82_20_reg_1241;
reg  signed [31:0] signal_shift_reg_14_load_reg_1246;
wire   [31:0] mul_ln79_17_fu_676_p2;
reg   [31:0] mul_ln79_17_reg_1252;
reg  signed [31:0] signal_shift_reg_15_load_reg_1257;
wire   [31:0] add_ln82_16_fu_695_p2;
reg   [31:0] add_ln82_16_reg_1263;
reg  signed [31:0] signal_shift_reg_17_load_reg_1268;
wire   [31:0] add_ln82_17_fu_736_p2;
reg   [31:0] add_ln82_17_reg_1274;
reg  signed [31:0] signal_shift_reg_18_load_reg_1279;
wire   [31:0] mul_ln79_13_fu_750_p2;
reg   [31:0] mul_ln79_13_reg_1285;
wire   [31:0] add_ln82_30_fu_759_p2;
reg   [31:0] add_ln82_30_reg_1290;
reg  signed [31:0] signal_shift_reg_19_load_reg_1295;
wire   [31:0] add_ln82_11_fu_778_p2;
reg   [31:0] add_ln82_11_reg_1301;
reg  signed [31:0] signal_shift_reg_21_load_reg_1306;
wire   [31:0] add_ln82_12_fu_819_p2;
reg   [31:0] add_ln82_12_reg_1312;
reg  signed [31:0] signal_shift_reg_22_load_reg_1317;
wire   [31:0] mul_ln79_9_fu_833_p2;
reg   [31:0] mul_ln79_9_reg_1323;
reg  signed [31:0] signal_shift_reg_23_load_reg_1328;
wire   [31:0] add_ln82_8_fu_852_p2;
reg   [31:0] add_ln82_8_reg_1334;
wire   [31:0] mul_ln79_7_fu_857_p2;
reg   [31:0] mul_ln79_7_reg_1339;
reg  signed [31:0] signal_shift_reg_25_load_reg_1344;
wire   [31:0] add_ln82_7_fu_887_p2;
reg   [31:0] add_ln82_7_reg_1350;
reg  signed [31:0] signal_shift_reg_26_load_reg_1355;
wire   [31:0] mul_ln79_5_fu_901_p2;
reg   [31:0] mul_ln79_5_reg_1361;
wire   [31:0] add_ln82_13_fu_910_p2;
reg   [31:0] add_ln82_13_reg_1366;
reg  signed [31:0] signal_shift_reg_27_load_reg_1371;
wire   [31:0] add_ln82_4_fu_929_p2;
reg   [31:0] add_ln82_4_reg_1377;
reg  signed [31:0] signal_shift_reg_29_load_reg_1382;
wire   [31:0] add_ln82_5_fu_970_p2;
reg   [31:0] add_ln82_5_reg_1388;
reg  signed [31:0] signal_shift_reg_30_load_reg_1393;
wire   [31:0] mul_ln79_1_fu_984_p2;
reg   [31:0] mul_ln79_1_reg_1399;
wire   [31:0] add_ln82_1_fu_994_p2;
reg   [31:0] add_ln82_1_reg_1404;
wire   [31:0] add_ln82_fu_1014_p2;
reg   [31:0] add_ln82_reg_1409;
wire    ap_CS_fsm_state42;
reg   [31:0] i_load_1_reg_1419;
wire    ap_CS_fsm_state45;
wire    grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_ap_start;
wire    grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_ap_done;
wire    grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_ap_idle;
wire    grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_ap_ready;
wire    grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_AWVALID;
wire   [63:0] grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_AWADDR;
wire   [0:0] grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_AWID;
wire   [31:0] grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_AWLEN;
wire   [2:0] grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_AWSIZE;
wire   [1:0] grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_AWBURST;
wire   [1:0] grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_AWLOCK;
wire   [3:0] grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_AWCACHE;
wire   [2:0] grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_AWPROT;
wire   [3:0] grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_AWQOS;
wire   [3:0] grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_AWREGION;
wire   [0:0] grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_AWUSER;
wire    grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_WVALID;
wire   [31:0] grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_WDATA;
wire   [3:0] grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_WSTRB;
wire    grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_WLAST;
wire   [0:0] grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_WID;
wire   [0:0] grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_WUSER;
wire    grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_ARVALID;
wire   [63:0] grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_ARADDR;
wire   [0:0] grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_ARID;
wire   [31:0] grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_ARLEN;
wire   [2:0] grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_ARSIZE;
wire   [1:0] grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_ARBURST;
wire   [1:0] grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_ARLOCK;
wire   [3:0] grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_ARCACHE;
wire   [2:0] grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_ARPROT;
wire   [3:0] grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_ARQOS;
wire   [3:0] grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_ARREGION;
wire   [0:0] grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_ARUSER;
wire    grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_RREADY;
wire    grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_BREADY;
wire    grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_input_r_TREADY;
wire   [0:0] grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_tmp_last_V_1_out;
wire    grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_tmp_last_V_1_out_ap_vld;
reg   [0:0] ap_phi_mux_tmp_last_V_3_phi_fu_248_p8;
reg   [0:0] tmp_last_V_3_reg_245;
wire    regslice_both_output_r_V_data_V_U_apdone_blk;
reg    ap_block_state44;
reg    ap_block_state44_io;
reg    ap_block_state2_io;
wire    ap_CS_fsm_state85;
reg    grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_ap_start_reg;
wire    ap_CS_fsm_state46;
reg   [0:0] tmp_last_V_1_loc_fu_180;
wire  signed [63:0] sext_ln79_fu_305_p1;
reg   [31:0] state_fu_172;
wire   [31:0] select_ln9_fu_381_p3;
reg   [31:0] i_fu_176;
wire   [31:0] i_3_fu_1044_p2;
wire   [31:0] i_1_fu_373_p3;
wire   [61:0] trunc_ln_fu_295_p4;
wire  signed [31:0] icmp_ln30_fu_361_p0;
wire   [0:0] icmp_ln30_fu_361_p2;
wire   [31:0] add_ln33_fu_367_p2;
wire   [31:0] mul_ln79_29_fu_433_p2;
wire   [31:0] mul_ln79_30_fu_449_p2;
wire   [31:0] add_ln82_26_fu_455_p2;
wire   [31:0] mul_ln79_28_fu_418_p2;
wire   [31:0] mul_ln79_26_fu_486_p2;
wire   [31:0] add_ln82_25_fu_491_p2;
wire   [31:0] mul_ln79_24_fu_515_p2;
wire   [31:0] mul_ln79_25_fu_531_p2;
wire   [31:0] mul_ln79_22_fu_571_p2;
wire   [31:0] add_ln82_24_fu_581_p2;
wire   [31:0] mul_ln79_20_fu_604_p2;
wire   [31:0] mul_ln79_21_fu_615_p2;
wire   [31:0] mul_ln79_18_fu_640_p2;
wire   [31:0] mul_ln79_19_fu_651_p2;
wire   [31:0] add_ln82_18_fu_656_p2;
wire   [31:0] mul_ln79_16_fu_690_p2;
wire   [31:0] mul_ln79_14_fu_714_p2;
wire   [31:0] mul_ln79_15_fu_725_p2;
wire   [31:0] add_ln82_15_fu_730_p2;
wire   [31:0] add_ln82_21_fu_755_p2;
wire   [31:0] mul_ln79_12_fu_773_p2;
wire   [31:0] mul_ln79_10_fu_797_p2;
wire   [31:0] mul_ln79_11_fu_808_p2;
wire   [31:0] add_ln82_10_fu_813_p2;
wire   [31:0] mul_ln79_8_fu_847_p2;
wire   [31:0] mul_ln79_6_fu_876_p2;
wire   [31:0] add_ln82_9_fu_906_p2;
wire   [31:0] mul_ln79_4_fu_924_p2;
wire   [31:0] mul_ln79_2_fu_948_p2;
wire   [31:0] mul_ln79_3_fu_959_p2;
wire   [31:0] add_ln82_3_fu_964_p2;
wire   [31:0] mul_ln79_fu_989_p2;
wire   [31:0] accumulate_fu_1003_p2;
wire   [31:0] add_ln82_2_fu_1019_p2;
wire   [31:0] add_ln82_6_fu_1023_p2;
wire   [31:0] add_ln82_14_fu_1028_p2;
reg   [84:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
reg    ap_ST_fsm_state17_blk;
reg    ap_ST_fsm_state18_blk;
reg    ap_ST_fsm_state19_blk;
reg    ap_ST_fsm_state20_blk;
reg    ap_ST_fsm_state21_blk;
reg    ap_ST_fsm_state22_blk;
reg    ap_ST_fsm_state23_blk;
reg    ap_ST_fsm_state24_blk;
reg    ap_ST_fsm_state25_blk;
reg    ap_ST_fsm_state26_blk;
reg    ap_ST_fsm_state27_blk;
reg    ap_ST_fsm_state28_blk;
reg    ap_ST_fsm_state29_blk;
reg    ap_ST_fsm_state30_blk;
reg    ap_ST_fsm_state31_blk;
reg    ap_ST_fsm_state32_blk;
reg    ap_ST_fsm_state33_blk;
reg    ap_ST_fsm_state34_blk;
reg    ap_ST_fsm_state35_blk;
reg    ap_ST_fsm_state36_blk;
reg    ap_ST_fsm_state37_blk;
reg    ap_ST_fsm_state38_blk;
reg    ap_ST_fsm_state39_blk;
reg    ap_ST_fsm_state40_blk;
reg    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
reg    ap_ST_fsm_state43_blk;
reg    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
reg    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
wire    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
wire    ap_ST_fsm_state80_blk;
wire    ap_ST_fsm_state81_blk;
wire    ap_ST_fsm_state82_blk;
wire    ap_ST_fsm_state83_blk;
wire    ap_ST_fsm_state84_blk;
wire    ap_ST_fsm_state85_blk;
wire   [31:0] output_r_TDATA_int_regslice;
reg    output_r_TVALID_int_regslice;
wire    output_r_TREADY_int_regslice;
wire    regslice_both_output_r_V_data_V_U_vld_out;
wire    regslice_both_output_r_V_keep_V_U_apdone_blk;
wire    regslice_both_output_r_V_keep_V_U_ack_in_dummy;
wire    regslice_both_output_r_V_keep_V_U_vld_out;
wire    regslice_both_output_r_V_strb_V_U_apdone_blk;
wire    regslice_both_output_r_V_strb_V_U_ack_in_dummy;
wire    regslice_both_output_r_V_strb_V_U_vld_out;
wire    regslice_both_output_r_V_user_V_U_apdone_blk;
wire    regslice_both_output_r_V_user_V_U_ack_in_dummy;
wire    regslice_both_output_r_V_user_V_U_vld_out;
wire    regslice_both_output_r_V_last_V_U_apdone_blk;
wire    regslice_both_output_r_V_last_V_U_ack_in_dummy;
wire    regslice_both_output_r_V_last_V_U_vld_out;
wire    regslice_both_output_r_V_id_V_U_apdone_blk;
wire    regslice_both_output_r_V_id_V_U_ack_in_dummy;
wire    regslice_both_output_r_V_id_V_U_vld_out;
wire    regslice_both_output_r_V_dest_V_U_apdone_blk;
wire    regslice_both_output_r_V_dest_V_U_ack_in_dummy;
wire    regslice_both_output_r_V_dest_V_U_vld_out;
wire    regslice_both_input_r_V_data_V_U_apdone_blk;
wire   [31:0] input_r_TDATA_int_regslice;
wire    input_r_TVALID_int_regslice;
reg    input_r_TREADY_int_regslice;
wire    regslice_both_input_r_V_data_V_U_ack_in;
wire    regslice_both_input_r_V_keep_V_U_apdone_blk;
wire   [3:0] input_r_TKEEP_int_regslice;
wire    regslice_both_input_r_V_keep_V_U_vld_out;
wire    regslice_both_input_r_V_keep_V_U_ack_in;
wire    regslice_both_input_r_V_strb_V_U_apdone_blk;
wire   [3:0] input_r_TSTRB_int_regslice;
wire    regslice_both_input_r_V_strb_V_U_vld_out;
wire    regslice_both_input_r_V_strb_V_U_ack_in;
wire    regslice_both_input_r_V_user_V_U_apdone_blk;
wire   [0:0] input_r_TUSER_int_regslice;
wire    regslice_both_input_r_V_user_V_U_vld_out;
wire    regslice_both_input_r_V_user_V_U_ack_in;
wire    regslice_both_input_r_V_last_V_U_apdone_blk;
wire   [0:0] input_r_TLAST_int_regslice;
wire    regslice_both_input_r_V_last_V_U_vld_out;
wire    regslice_both_input_r_V_last_V_U_ack_in;
wire    regslice_both_input_r_V_id_V_U_apdone_blk;
wire   [0:0] input_r_TID_int_regslice;
wire    regslice_both_input_r_V_id_V_U_vld_out;
wire    regslice_both_input_r_V_id_V_U_ack_in;
wire    regslice_both_input_r_V_dest_V_U_apdone_blk;
wire   [0:0] input_r_TDEST_int_regslice;
wire    regslice_both_input_r_V_dest_V_U_vld_out;
wire    regslice_both_input_r_V_dest_V_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 signal_shift_reg_31 = 32'd0;
#0 signal_shift_reg_30 = 32'd0;
#0 signal_shift_reg_29 = 32'd0;
#0 signal_shift_reg_28 = 32'd0;
#0 signal_shift_reg_27 = 32'd0;
#0 signal_shift_reg_26 = 32'd0;
#0 signal_shift_reg_25 = 32'd0;
#0 signal_shift_reg_24 = 32'd0;
#0 signal_shift_reg_23 = 32'd0;
#0 signal_shift_reg_22 = 32'd0;
#0 signal_shift_reg_21 = 32'd0;
#0 signal_shift_reg_20 = 32'd0;
#0 signal_shift_reg_19 = 32'd0;
#0 signal_shift_reg_18 = 32'd0;
#0 signal_shift_reg_17 = 32'd0;
#0 signal_shift_reg_16 = 32'd0;
#0 signal_shift_reg_15 = 32'd0;
#0 signal_shift_reg_14 = 32'd0;
#0 signal_shift_reg_13 = 32'd0;
#0 signal_shift_reg_12 = 32'd0;
#0 signal_shift_reg_11 = 32'd0;
#0 signal_shift_reg_10 = 32'd0;
#0 signal_shift_reg_9 = 32'd0;
#0 signal_shift_reg_8 = 32'd0;
#0 signal_shift_reg_7 = 32'd0;
#0 signal_shift_reg_6 = 32'd0;
#0 signal_shift_reg_5 = 32'd0;
#0 signal_shift_reg_4 = 32'd0;
#0 signal_shift_reg_3 = 32'd0;
#0 signal_shift_reg_2 = 32'd0;
#0 signal_shift_reg_1 = 32'd0;
#0 signal_shift_reg_0 = 32'd0;
#0 ap_CS_fsm = 85'd1;
#0 grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_ap_start_reg = 1'b0;
end

equalizer_equalizer_Pipeline_VITIS_LOOP_56_2 grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_ap_start),
    .ap_done(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_ap_done),
    .ap_idle(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_ap_idle),
    .ap_ready(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_ap_ready),
    .input_r_TVALID(input_r_TVALID_int_regslice),
    .m_axi_gmem_AWVALID(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_AWVALID),
    .m_axi_gmem_AWREADY(gmem_AWREADY),
    .m_axi_gmem_AWADDR(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_AWADDR),
    .m_axi_gmem_AWID(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_AWID),
    .m_axi_gmem_AWLEN(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_AWLEN),
    .m_axi_gmem_AWSIZE(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_AWSIZE),
    .m_axi_gmem_AWBURST(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_AWBURST),
    .m_axi_gmem_AWLOCK(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_AWLOCK),
    .m_axi_gmem_AWCACHE(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_AWCACHE),
    .m_axi_gmem_AWPROT(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_AWPROT),
    .m_axi_gmem_AWQOS(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_AWQOS),
    .m_axi_gmem_AWREGION(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_AWREGION),
    .m_axi_gmem_AWUSER(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_AWUSER),
    .m_axi_gmem_WVALID(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_WVALID),
    .m_axi_gmem_WREADY(gmem_WREADY),
    .m_axi_gmem_WDATA(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_WDATA),
    .m_axi_gmem_WSTRB(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_WSTRB),
    .m_axi_gmem_WLAST(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_WLAST),
    .m_axi_gmem_WID(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_WID),
    .m_axi_gmem_WUSER(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_WUSER),
    .m_axi_gmem_ARVALID(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_ARVALID),
    .m_axi_gmem_ARREADY(1'b0),
    .m_axi_gmem_ARADDR(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_ARADDR),
    .m_axi_gmem_ARID(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_ARID),
    .m_axi_gmem_ARLEN(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_ARLEN),
    .m_axi_gmem_ARSIZE(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_ARSIZE),
    .m_axi_gmem_ARBURST(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_ARBURST),
    .m_axi_gmem_ARLOCK(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_ARLOCK),
    .m_axi_gmem_ARCACHE(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_ARCACHE),
    .m_axi_gmem_ARPROT(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_ARPROT),
    .m_axi_gmem_ARQOS(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_ARQOS),
    .m_axi_gmem_ARREGION(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_ARREGION),
    .m_axi_gmem_ARUSER(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_ARUSER),
    .m_axi_gmem_RVALID(1'b0),
    .m_axi_gmem_RREADY(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_RREADY),
    .m_axi_gmem_RDATA(32'd0),
    .m_axi_gmem_RLAST(1'b0),
    .m_axi_gmem_RID(1'd0),
    .m_axi_gmem_RFIFONUM(9'd0),
    .m_axi_gmem_RUSER(1'd0),
    .m_axi_gmem_RRESP(2'd0),
    .m_axi_gmem_BVALID(gmem_BVALID),
    .m_axi_gmem_BREADY(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_BREADY),
    .m_axi_gmem_BRESP(2'd0),
    .m_axi_gmem_BID(1'd0),
    .m_axi_gmem_BUSER(1'd0),
    .sext_ln56(i_load_1_reg_1419),
    .tmp_last_V(tmp_last_V_reg_1130),
    .tmp_data_V(tmp_data_V_reg_1108),
    .coefs(coefs_read_reg_1087),
    .input_r_TDATA(input_r_TDATA_int_regslice),
    .input_r_TREADY(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_input_r_TREADY),
    .input_r_TKEEP(input_r_TKEEP_int_regslice),
    .input_r_TSTRB(input_r_TSTRB_int_regslice),
    .input_r_TUSER(input_r_TUSER_int_regslice),
    .input_r_TLAST(input_r_TLAST_int_regslice),
    .input_r_TID(input_r_TID_int_regslice),
    .input_r_TDEST(input_r_TDEST_int_regslice),
    .tmp_last_V_1_out(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_tmp_last_V_1_out),
    .tmp_last_V_1_out_ap_vld(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_tmp_last_V_1_out_ap_vld)
);

equalizer_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .coefs(coefs)
);

equalizer_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .USER_DW( 32 ),
    .USER_AW( 64 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_addr_reg_1098),
    .I_ARLEN(32'd33),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RFIFONUM(gmem_RFIFONUM),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_AWADDR),
    .I_AWLEN(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_AWLEN),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_WDATA),
    .I_WSTRB(grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_WSTRB),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U14(
    .din0(tmp_data_V_reg_1108),
    .din1(reg_287),
    .dout(mul_ln82_fu_399_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U15(
    .din0(signal_shift_reg_2),
    .din1(gmem_addr_read_3_reg_1154),
    .dout(mul_ln79_28_fu_418_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U16(
    .din0(signal_shift_reg_1),
    .din1(reg_291),
    .dout(mul_ln79_29_fu_433_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U17(
    .din0(signal_shift_reg_0),
    .din1(reg_287),
    .dout(mul_ln79_30_fu_449_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U18(
    .din0(signal_shift_reg_3_load_reg_1159),
    .din1(reg_287),
    .dout(mul_ln79_27_fu_481_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U19(
    .din0(signal_shift_reg_4_load_reg_1170),
    .din1(reg_287),
    .dout(mul_ln79_26_fu_486_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U20(
    .din0(signal_shift_reg_6),
    .din1(reg_291),
    .dout(mul_ln79_24_fu_515_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U21(
    .din0(signal_shift_reg_5),
    .din1(reg_287),
    .dout(mul_ln79_25_fu_531_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U22(
    .din0(signal_shift_reg_7_load_reg_1186),
    .din1(reg_287),
    .dout(mul_ln79_23_fu_557_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U23(
    .din0(signal_shift_reg_8_load_reg_1197),
    .din1(reg_287),
    .dout(mul_ln79_22_fu_571_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U24(
    .din0(signal_shift_reg_10),
    .din1(reg_291),
    .dout(mul_ln79_20_fu_604_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U25(
    .din0(signal_shift_reg_9_load_reg_1208),
    .din1(reg_287),
    .dout(mul_ln79_21_fu_615_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U26(
    .din0(signal_shift_reg_12),
    .din1(reg_291),
    .dout(mul_ln79_18_fu_640_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U27(
    .din0(signal_shift_reg_11_load_reg_1224),
    .din1(reg_287),
    .dout(mul_ln79_19_fu_651_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U28(
    .din0(signal_shift_reg_13_load_reg_1235),
    .din1(reg_287),
    .dout(mul_ln79_17_fu_676_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U29(
    .din0(signal_shift_reg_14_load_reg_1246),
    .din1(reg_287),
    .dout(mul_ln79_16_fu_690_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U30(
    .din0(signal_shift_reg_16),
    .din1(reg_291),
    .dout(mul_ln79_14_fu_714_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U31(
    .din0(signal_shift_reg_15_load_reg_1257),
    .din1(reg_287),
    .dout(mul_ln79_15_fu_725_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U32(
    .din0(signal_shift_reg_17_load_reg_1268),
    .din1(reg_287),
    .dout(mul_ln79_13_fu_750_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U33(
    .din0(signal_shift_reg_18_load_reg_1279),
    .din1(reg_287),
    .dout(mul_ln79_12_fu_773_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U34(
    .din0(signal_shift_reg_20),
    .din1(reg_291),
    .dout(mul_ln79_10_fu_797_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U35(
    .din0(signal_shift_reg_19_load_reg_1295),
    .din1(reg_287),
    .dout(mul_ln79_11_fu_808_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U36(
    .din0(signal_shift_reg_21_load_reg_1306),
    .din1(reg_287),
    .dout(mul_ln79_9_fu_833_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U37(
    .din0(signal_shift_reg_22_load_reg_1317),
    .din1(reg_287),
    .dout(mul_ln79_8_fu_847_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U38(
    .din0(signal_shift_reg_23_load_reg_1328),
    .din1(reg_287),
    .dout(mul_ln79_7_fu_857_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U39(
    .din0(signal_shift_reg_24),
    .din1(reg_287),
    .dout(mul_ln79_6_fu_876_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U40(
    .din0(signal_shift_reg_25_load_reg_1344),
    .din1(reg_287),
    .dout(mul_ln79_5_fu_901_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U41(
    .din0(signal_shift_reg_26_load_reg_1355),
    .din1(reg_287),
    .dout(mul_ln79_4_fu_924_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U42(
    .din0(signal_shift_reg_28),
    .din1(reg_291),
    .dout(mul_ln79_2_fu_948_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U43(
    .din0(signal_shift_reg_27_load_reg_1371),
    .din1(reg_287),
    .dout(mul_ln79_3_fu_959_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U44(
    .din0(signal_shift_reg_29_load_reg_1382),
    .din1(reg_287),
    .dout(mul_ln79_1_fu_984_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U45(
    .din0(signal_shift_reg_30_load_reg_1393),
    .din1(reg_287),
    .dout(mul_ln79_fu_989_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U46(
    .din0(signal_shift_reg_31),
    .din1(reg_287),
    .dout(accumulate_fu_1003_p2)
);

equalizer_regslice_both #(
    .DataWidth( 32 ))
regslice_both_output_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TDATA_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(output_r_TREADY_int_regslice),
    .data_out(output_r_TDATA),
    .vld_out(regslice_both_output_r_V_data_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_data_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 4 ))
regslice_both_output_r_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_keep_V_reg_1115),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_r_V_keep_V_U_ack_in_dummy),
    .data_out(output_r_TKEEP),
    .vld_out(regslice_both_output_r_V_keep_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_keep_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 4 ))
regslice_both_output_r_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_strb_V_reg_1120),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_r_V_strb_V_U_ack_in_dummy),
    .data_out(output_r_TSTRB),
    .vld_out(regslice_both_output_r_V_strb_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_strb_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_r_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_user_V_reg_1125),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_r_V_user_V_U_ack_in_dummy),
    .data_out(output_r_TUSER),
    .vld_out(regslice_both_output_r_V_user_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_user_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_r_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_last_V_reg_1130),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_r_V_last_V_U_ack_in_dummy),
    .data_out(output_r_TLAST),
    .vld_out(regslice_both_output_r_V_last_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_last_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_r_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_id_V_reg_1139),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_r_V_id_V_U_ack_in_dummy),
    .data_out(output_r_TID),
    .vld_out(regslice_both_output_r_V_id_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_id_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_r_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_dest_V_reg_1144),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_r_V_dest_V_U_ack_in_dummy),
    .data_out(output_r_TDEST),
    .vld_out(regslice_both_output_r_V_dest_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_dest_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 32 ))
regslice_both_input_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TDATA),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_data_V_U_ack_in),
    .data_out(input_r_TDATA_int_regslice),
    .vld_out(input_r_TVALID_int_regslice),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_data_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 4 ))
regslice_both_input_r_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TKEEP),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_keep_V_U_ack_in),
    .data_out(input_r_TKEEP_int_regslice),
    .vld_out(regslice_both_input_r_V_keep_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_keep_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 4 ))
regslice_both_input_r_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TSTRB),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_strb_V_U_ack_in),
    .data_out(input_r_TSTRB_int_regslice),
    .vld_out(regslice_both_input_r_V_strb_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_strb_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_r_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TUSER),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_user_V_U_ack_in),
    .data_out(input_r_TUSER_int_regslice),
    .vld_out(regslice_both_input_r_V_user_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_user_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_r_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TLAST),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_last_V_U_ack_in),
    .data_out(input_r_TLAST_int_regslice),
    .vld_out(regslice_both_input_r_V_last_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_last_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_r_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TID),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_id_V_U_ack_in),
    .data_out(input_r_TID_int_regslice),
    .vld_out(regslice_both_input_r_V_id_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_id_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_r_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TDEST),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_dest_V_U_ack_in),
    .data_out(input_r_TDEST_int_regslice),
    .vld_out(regslice_both_input_r_V_dest_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state45)) begin
            grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_ap_start_reg <= 1'b1;
        end else if ((grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_ap_ready == 1'b1)) begin
            grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_io) | (input_r_TVALID_int_regslice == 1'b0)) & (state_load_load_fu_325_p1 == 32'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_176 <= i_1_fu_373_p3;
    end else if ((~((regslice_both_output_r_V_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state44_io) | ((state_load_reg_1104 == 32'd4096) & (output_r_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state44))) begin
        i_fu_176 <= i_3_fu_1044_p2;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state1) | (~((1'b1 == ap_block_state2_io) | (input_r_TVALID_int_regslice == 1'b0)) & (state_fu_172 == 32'd4096) & (1'b1 == ap_CS_fsm_state2)))) begin
        i_fu_176 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
                state_fu_172[0] <= 1'b0;
        state_fu_172[4] <= 1'b0;
        state_fu_172[12] <= 1'b0;
    end else if ((~((1'b1 == ap_block_state2_io) | (input_r_TVALID_int_regslice == 1'b0)) & (state_load_load_fu_325_p1 == 32'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                state_fu_172[0] <= select_ln9_fu_381_p3[0];
        state_fu_172[4] <= select_ln9_fu_381_p3[4];
        state_fu_172[12] <= select_ln9_fu_381_p3[12];
    end else if (((1'b1 == ap_CS_fsm_state85) | (~((regslice_both_output_r_V_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state44_io) | ((state_load_reg_1104 == 32'd4096) & (output_r_TREADY_int_regslice == 1'b0))) & (state_load_reg_1104 == 32'd4096) & (1'b1 == ap_CS_fsm_state44)))) begin
                state_fu_172[0] <= 1'b0;
        state_fu_172[4] <= 1'b0;
        state_fu_172[12] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        tmp_last_V_3_reg_245 <= tmp_last_V_1_loc_fu_180;
    end else if (((~(state_load_load_fu_325_p1 == 32'd17) & ~(state_load_load_fu_325_p1 == 32'd0) & ~(state_fu_172 == 32'd4096) & ~((1'b1 == ap_block_state2_io) | (input_r_TVALID_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state2)) | (~((1'b1 == ap_block_state2_io) | (input_r_TVALID_int_regslice == 1'b0)) & (state_load_load_fu_325_p1 == 32'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        tmp_last_V_3_reg_245 <= input_r_TLAST_int_regslice;
    end else if ((~((regslice_both_output_r_V_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state44_io) | ((state_load_reg_1104 == 32'd4096) & (output_r_TREADY_int_regslice == 1'b0))) & (state_load_reg_1104 == 32'd4096) & (1'b1 == ap_CS_fsm_state44))) begin
        tmp_last_V_3_reg_245 <= tmp_last_V_reg_1130;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        add_ln82_11_reg_1301 <= add_ln82_11_fu_778_p2;
        signal_shift_reg_19_load_reg_1295 <= signal_shift_reg_19;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        add_ln82_12_reg_1312 <= add_ln82_12_fu_819_p2;
        signal_shift_reg_21_load_reg_1306 <= signal_shift_reg_21;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        add_ln82_13_reg_1366 <= add_ln82_13_fu_910_p2;
        mul_ln79_5_reg_1361 <= mul_ln79_5_fu_901_p2;
        signal_shift_reg_26_load_reg_1355 <= signal_shift_reg_26;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        add_ln82_16_reg_1263 <= add_ln82_16_fu_695_p2;
        signal_shift_reg_15_load_reg_1257 <= signal_shift_reg_15;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        add_ln82_17_reg_1274 <= add_ln82_17_fu_736_p2;
        signal_shift_reg_17_load_reg_1268 <= signal_shift_reg_17;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        add_ln82_19_reg_1230 <= add_ln82_19_fu_620_p2;
        signal_shift_reg_11_load_reg_1224 <= signal_shift_reg_11;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        add_ln82_1_reg_1404 <= add_ln82_1_fu_994_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        add_ln82_20_reg_1241 <= add_ln82_20_fu_662_p2;
        signal_shift_reg_13_load_reg_1235 <= signal_shift_reg_13;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        add_ln82_22_reg_1214 <= add_ln82_22_fu_576_p2;
        signal_shift_reg_9_load_reg_1208 <= signal_shift_reg_9;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        add_ln82_23_reg_1192 <= add_ln82_23_fu_542_p2;
        signal_shift_reg_7_load_reg_1186 <= signal_shift_reg_7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        add_ln82_27_reg_1165 <= add_ln82_27_fu_461_p2;
        signal_shift_reg_3_load_reg_1159 <= signal_shift_reg_3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        add_ln82_28_reg_1181 <= add_ln82_28_fu_496_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        add_ln82_29_reg_1219 <= add_ln82_29_fu_585_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        add_ln82_30_reg_1290 <= add_ln82_30_fu_759_p2;
        mul_ln79_13_reg_1285 <= mul_ln79_13_fu_750_p2;
        signal_shift_reg_18_load_reg_1279 <= signal_shift_reg_18;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        add_ln82_4_reg_1377 <= add_ln82_4_fu_929_p2;
        signal_shift_reg_27_load_reg_1371 <= signal_shift_reg_27;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        add_ln82_5_reg_1388 <= add_ln82_5_fu_970_p2;
        signal_shift_reg_29_load_reg_1382 <= signal_shift_reg_29;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        add_ln82_7_reg_1350 <= add_ln82_7_fu_887_p2;
        signal_shift_reg_25_load_reg_1344 <= signal_shift_reg_25;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        add_ln82_8_reg_1334 <= add_ln82_8_fu_852_p2;
        signal_shift_reg_23_load_reg_1328 <= signal_shift_reg_23;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        add_ln82_reg_1409 <= add_ln82_fu_1014_p2;
        signal_shift_reg_31 <= signal_shift_reg_30_load_reg_1393;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        coefs_read_reg_1087 <= coefs;
        gmem_addr_reg_1098 <= sext_ln79_fu_305_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        gmem_addr_read_3_reg_1154 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        i_load_1_reg_1419 <= i_fu_176;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        mul_ln79_17_reg_1252 <= mul_ln79_17_fu_676_p2;
        signal_shift_reg_14_load_reg_1246 <= signal_shift_reg_14;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        mul_ln79_1_reg_1399 <= mul_ln79_1_fu_984_p2;
        signal_shift_reg_30_load_reg_1393 <= signal_shift_reg_30;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        mul_ln79_23_reg_1203 <= mul_ln79_23_fu_557_p2;
        signal_shift_reg_8_load_reg_1197 <= signal_shift_reg_8;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        mul_ln79_27_reg_1176 <= mul_ln79_27_fu_481_p2;
        signal_shift_reg_4_load_reg_1170 <= signal_shift_reg_4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        mul_ln79_7_reg_1339 <= mul_ln79_7_fu_857_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        mul_ln79_9_reg_1323 <= mul_ln79_9_fu_833_p2;
        signal_shift_reg_22_load_reg_1317 <= signal_shift_reg_22;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        mul_ln82_reg_1149 <= mul_ln82_fu_399_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state41)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state40)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state36)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9)))) begin
        reg_287 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_291 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        signal_shift_reg_0 <= tmp_data_V_reg_1108;
        signal_shift_reg_1 <= signal_shift_reg_0;
        signal_shift_reg_2 <= signal_shift_reg_1;
        signal_shift_reg_3 <= signal_shift_reg_2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        signal_shift_reg_10 <= signal_shift_reg_9_load_reg_1208;
        signal_shift_reg_11 <= signal_shift_reg_10;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        signal_shift_reg_12 <= signal_shift_reg_11_load_reg_1224;
        signal_shift_reg_13 <= signal_shift_reg_12;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        signal_shift_reg_14 <= signal_shift_reg_13_load_reg_1235;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
        signal_shift_reg_15 <= signal_shift_reg_14_load_reg_1246;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        signal_shift_reg_16 <= signal_shift_reg_15_load_reg_1257;
        signal_shift_reg_17 <= signal_shift_reg_16;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        signal_shift_reg_18 <= signal_shift_reg_17_load_reg_1268;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
        signal_shift_reg_19 <= signal_shift_reg_18_load_reg_1279;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
        signal_shift_reg_20 <= signal_shift_reg_19_load_reg_1295;
        signal_shift_reg_21 <= signal_shift_reg_20;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
        signal_shift_reg_22 <= signal_shift_reg_21_load_reg_1306;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
        signal_shift_reg_23 <= signal_shift_reg_22_load_reg_1317;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
        signal_shift_reg_24 <= signal_shift_reg_23_load_reg_1328;
        signal_shift_reg_25 <= signal_shift_reg_24;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state36))) begin
        signal_shift_reg_26 <= signal_shift_reg_25_load_reg_1344;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
        signal_shift_reg_27 <= signal_shift_reg_26_load_reg_1355;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
        signal_shift_reg_28 <= signal_shift_reg_27_load_reg_1371;
        signal_shift_reg_29 <= signal_shift_reg_28;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state40))) begin
        signal_shift_reg_30 <= signal_shift_reg_29_load_reg_1382;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        signal_shift_reg_4 <= signal_shift_reg_3_load_reg_1159;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        signal_shift_reg_5 <= signal_shift_reg_4_load_reg_1170;
        signal_shift_reg_6 <= signal_shift_reg_5;
        signal_shift_reg_7 <= signal_shift_reg_6;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        signal_shift_reg_8 <= signal_shift_reg_7_load_reg_1186;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
        signal_shift_reg_9 <= signal_shift_reg_8_load_reg_1197;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        state_load_reg_1104[0] <= state_fu_172[0];
state_load_reg_1104[4] <= state_fu_172[4];
state_load_reg_1104[12] <= state_fu_172[12];
        tmp_data_V_reg_1108 <= input_r_TDATA_int_regslice;
        tmp_dest_V_reg_1144 <= input_r_TDEST_int_regslice;
        tmp_id_V_reg_1139 <= input_r_TID_int_regslice;
        tmp_keep_V_reg_1115 <= input_r_TKEEP_int_regslice;
        tmp_last_V_reg_1130 <= input_r_TLAST_int_regslice;
        tmp_strb_V_reg_1120 <= input_r_TSTRB_int_regslice;
        tmp_user_V_reg_1125 <= input_r_TUSER_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_tmp_last_V_1_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
        tmp_last_V_1_loc_fu_180 <= grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_tmp_last_V_1_out;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_fsm_state17_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state18_blk = 1'b1;
    end else begin
        ap_ST_fsm_state18_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state19_blk = 1'b1;
    end else begin
        ap_ST_fsm_state19_blk = 1'b0;
    end
end

assign ap_ST_fsm_state1_blk = 1'b0;

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state20_blk = 1'b1;
    end else begin
        ap_ST_fsm_state20_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state21_blk = 1'b1;
    end else begin
        ap_ST_fsm_state21_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state22_blk = 1'b1;
    end else begin
        ap_ST_fsm_state22_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state23_blk = 1'b1;
    end else begin
        ap_ST_fsm_state23_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state24_blk = 1'b1;
    end else begin
        ap_ST_fsm_state24_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state25_blk = 1'b1;
    end else begin
        ap_ST_fsm_state25_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state26_blk = 1'b1;
    end else begin
        ap_ST_fsm_state26_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state27_blk = 1'b1;
    end else begin
        ap_ST_fsm_state27_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state28_blk = 1'b1;
    end else begin
        ap_ST_fsm_state28_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state29_blk = 1'b1;
    end else begin
        ap_ST_fsm_state29_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state2_io) | (input_r_TVALID_int_regslice == 1'b0))) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state30_blk = 1'b1;
    end else begin
        ap_ST_fsm_state30_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state31_blk = 1'b1;
    end else begin
        ap_ST_fsm_state31_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state32_blk = 1'b1;
    end else begin
        ap_ST_fsm_state32_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state33_blk = 1'b1;
    end else begin
        ap_ST_fsm_state33_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state34_blk = 1'b1;
    end else begin
        ap_ST_fsm_state34_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state35_blk = 1'b1;
    end else begin
        ap_ST_fsm_state35_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state36_blk = 1'b1;
    end else begin
        ap_ST_fsm_state36_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state37_blk = 1'b1;
    end else begin
        ap_ST_fsm_state37_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state38_blk = 1'b1;
    end else begin
        ap_ST_fsm_state38_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state39_blk = 1'b1;
    end else begin
        ap_ST_fsm_state39_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state40_blk = 1'b1;
    end else begin
        ap_ST_fsm_state40_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state41_blk = 1'b1;
    end else begin
        ap_ST_fsm_state41_blk = 1'b0;
    end
end

assign ap_ST_fsm_state42_blk = 1'b0;

always @ (*) begin
    if ((output_r_TREADY_int_regslice == 1'b0)) begin
        ap_ST_fsm_state43_blk = 1'b1;
    end else begin
        ap_ST_fsm_state43_blk = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_output_r_V_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state44_io) | ((state_load_reg_1104 == 32'd4096) & (output_r_TREADY_int_regslice == 1'b0)))) begin
        ap_ST_fsm_state44_blk = 1'b1;
    end else begin
        ap_ST_fsm_state44_blk = 1'b0;
    end
end

assign ap_ST_fsm_state45_blk = 1'b0;

always @ (*) begin
    if ((grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_ap_done == 1'b0)) begin
        ap_ST_fsm_state46_blk = 1'b1;
    end else begin
        ap_ST_fsm_state46_blk = 1'b0;
    end
end

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

assign ap_ST_fsm_state75_blk = 1'b0;

assign ap_ST_fsm_state76_blk = 1'b0;

assign ap_ST_fsm_state77_blk = 1'b0;

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state80_blk = 1'b0;

assign ap_ST_fsm_state81_blk = 1'b0;

assign ap_ST_fsm_state82_blk = 1'b0;

assign ap_ST_fsm_state83_blk = 1'b0;

assign ap_ST_fsm_state84_blk = 1'b0;

assign ap_ST_fsm_state85_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if (((state_load_reg_1104 == 32'd4096) & (1'b1 == ap_CS_fsm_state44))) begin
        ap_phi_mux_tmp_last_V_3_phi_fu_248_p8 = tmp_last_V_reg_1130;
    end else begin
        ap_phi_mux_tmp_last_V_3_phi_fu_248_p8 = tmp_last_V_3_reg_245;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | (input_r_TVALID_int_regslice == 1'b0)) & (state_fu_172 == 32'd4096) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45))) begin
        gmem_AWVALID = grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_AWVALID;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45))) begin
        gmem_BREADY = grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_BREADY;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state41)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state40)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state36)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state30)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45))) begin
        gmem_WVALID = grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_m_axi_gmem_WVALID;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((state_fu_172 == 32'd4096) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        input_r_TDATA_blk_n = input_r_TVALID_int_regslice;
    end else begin
        input_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | (input_r_TVALID_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        input_r_TREADY_int_regslice = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        input_r_TREADY_int_regslice = grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_input_r_TREADY;
    end else begin
        input_r_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | ((state_load_reg_1104 == 32'd4096) & (1'b1 == ap_CS_fsm_state44)))) begin
        output_r_TDATA_blk_n = output_r_TREADY_int_regslice;
    end else begin
        output_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) & (output_r_TREADY_int_regslice == 1'b1))) begin
        output_r_TVALID_int_regslice = 1'b1;
    end else begin
        output_r_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_io) | (input_r_TVALID_int_regslice == 1'b0)) & (state_load_load_fu_325_p1 == 32'd17) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else if ((~(state_load_load_fu_325_p1 == 32'd17) & ~(state_fu_172 == 32'd4096) & ~((1'b1 == ap_block_state2_io) | (input_r_TVALID_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else if ((~((1'b1 == ap_block_state2_io) | (input_r_TVALID_int_regslice == 1'b0)) & (state_fu_172 == 32'd4096) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((1'b1 == ap_CS_fsm_state43) & (output_r_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            if ((~((regslice_both_output_r_V_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state44_io) | ((state_load_reg_1104 == 32'd4096) & (output_r_TREADY_int_regslice == 1'b0))) & (ap_phi_mux_tmp_last_V_3_phi_fu_248_p8 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((regslice_both_output_r_V_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state44_io) | ((state_load_reg_1104 == 32'd4096) & (output_r_TREADY_int_regslice == 1'b0))) & (ap_phi_mux_tmp_last_V_3_phi_fu_248_p8 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            if (((grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln33_fu_367_p2 = ($signed(i_fu_176) + $signed(32'd4294967295));

assign add_ln82_10_fu_813_p2 = (mul_ln79_10_fu_797_p2 + mul_ln79_11_fu_808_p2);

assign add_ln82_11_fu_778_p2 = (mul_ln79_12_fu_773_p2 + mul_ln79_13_reg_1285);

assign add_ln82_12_fu_819_p2 = (add_ln82_11_reg_1301 + add_ln82_10_fu_813_p2);

assign add_ln82_13_fu_910_p2 = (add_ln82_12_reg_1312 + add_ln82_9_fu_906_p2);

assign add_ln82_14_fu_1028_p2 = (add_ln82_13_reg_1366 + add_ln82_6_fu_1023_p2);

assign add_ln82_15_fu_730_p2 = (mul_ln79_14_fu_714_p2 + mul_ln79_15_fu_725_p2);

assign add_ln82_16_fu_695_p2 = (mul_ln79_16_fu_690_p2 + mul_ln79_17_reg_1252);

assign add_ln82_17_fu_736_p2 = (add_ln82_16_reg_1263 + add_ln82_15_fu_730_p2);

assign add_ln82_18_fu_656_p2 = (mul_ln79_18_fu_640_p2 + mul_ln79_19_fu_651_p2);

assign add_ln82_19_fu_620_p2 = (mul_ln79_20_fu_604_p2 + mul_ln79_21_fu_615_p2);

assign add_ln82_1_fu_994_p2 = (mul_ln79_fu_989_p2 + mul_ln79_1_reg_1399);

assign add_ln82_20_fu_662_p2 = (add_ln82_19_reg_1230 + add_ln82_18_fu_656_p2);

assign add_ln82_21_fu_755_p2 = (add_ln82_20_reg_1241 + add_ln82_17_reg_1274);

assign add_ln82_22_fu_576_p2 = (mul_ln79_22_fu_571_p2 + mul_ln79_23_reg_1203);

assign add_ln82_23_fu_542_p2 = (mul_ln79_24_fu_515_p2 + mul_ln79_25_fu_531_p2);

assign add_ln82_24_fu_581_p2 = (add_ln82_23_reg_1192 + add_ln82_22_reg_1214);

assign add_ln82_25_fu_491_p2 = (mul_ln79_26_fu_486_p2 + mul_ln79_27_reg_1176);

assign add_ln82_26_fu_455_p2 = (mul_ln79_29_fu_433_p2 + mul_ln79_30_fu_449_p2);

assign add_ln82_27_fu_461_p2 = (add_ln82_26_fu_455_p2 + mul_ln79_28_fu_418_p2);

assign add_ln82_28_fu_496_p2 = (add_ln82_27_reg_1165 + add_ln82_25_fu_491_p2);

assign add_ln82_29_fu_585_p2 = (add_ln82_28_reg_1181 + add_ln82_24_fu_581_p2);

assign add_ln82_2_fu_1019_p2 = (add_ln82_1_reg_1404 + add_ln82_reg_1409);

assign add_ln82_30_fu_759_p2 = (add_ln82_29_reg_1219 + add_ln82_21_fu_755_p2);

assign add_ln82_3_fu_964_p2 = (mul_ln79_2_fu_948_p2 + mul_ln79_3_fu_959_p2);

assign add_ln82_4_fu_929_p2 = (mul_ln79_4_fu_924_p2 + mul_ln79_5_reg_1361);

assign add_ln82_5_fu_970_p2 = (add_ln82_4_reg_1377 + add_ln82_3_fu_964_p2);

assign add_ln82_6_fu_1023_p2 = (add_ln82_5_reg_1388 + add_ln82_2_fu_1019_p2);

assign add_ln82_7_fu_887_p2 = (mul_ln79_6_fu_876_p2 + mul_ln79_7_reg_1339);

assign add_ln82_8_fu_852_p2 = (mul_ln79_8_fu_847_p2 + mul_ln79_9_reg_1323);

assign add_ln82_9_fu_906_p2 = (add_ln82_8_reg_1334 + add_ln82_7_reg_1350);

assign add_ln82_fu_1014_p2 = (accumulate_fu_1003_p2 + mul_ln82_reg_1149);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state2_io = ((gmem_ARREADY == 1'b0) & (state_fu_172 == 32'd4096));
end

always @ (*) begin
    ap_block_state44 = ((regslice_both_output_r_V_data_V_U_apdone_blk == 1'b1) | ((state_load_reg_1104 == 32'd4096) & (output_r_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state44_io = ((state_load_reg_1104 == 32'd4096) & (output_r_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_ap_start = grp_equalizer_Pipeline_VITIS_LOOP_56_2_fu_258_ap_start_reg;

assign i_1_fu_373_p3 = ((icmp_ln30_fu_361_p2[0:0] == 1'b1) ? add_ln33_fu_367_p2 : i_fu_176);

assign i_3_fu_1044_p2 = (i_fu_176 + 32'd1);

assign icmp_ln30_fu_361_p0 = input_r_TDATA_int_regslice;

assign icmp_ln30_fu_361_p2 = ((icmp_ln30_fu_361_p0 == 32'd48879) ? 1'b1 : 1'b0);

assign input_r_TREADY = regslice_both_input_r_V_data_V_U_ack_in;

assign output_r_TDATA_int_regslice = (add_ln82_30_reg_1290 + add_ln82_14_fu_1028_p2);

assign output_r_TVALID = regslice_both_output_r_V_data_V_U_vld_out;

assign select_ln9_fu_381_p3 = ((icmp_ln30_fu_361_p2[0:0] == 1'b1) ? 32'd17 : 32'd0);

assign sext_ln79_fu_305_p1 = $signed(trunc_ln_fu_295_p4);

assign state_load_load_fu_325_p1 = state_fu_172;

assign trunc_ln_fu_295_p4 = {{coefs[63:2]}};

always @ (posedge ap_clk) begin
    state_load_reg_1104[3:1] <= 3'b000;
    state_load_reg_1104[11:5] <= 7'b0000000;
    state_load_reg_1104[31:13] <= 19'b0000000000000000000;
    state_fu_172[3:1] <= 3'b000;
    state_fu_172[11:5] <= 7'b0000000;
    state_fu_172[31:13] <= 19'b0000000000000000000;
end


reg find_kernel_block = 0;
// synthesis translate_off
`include "equalizer_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //equalizer

