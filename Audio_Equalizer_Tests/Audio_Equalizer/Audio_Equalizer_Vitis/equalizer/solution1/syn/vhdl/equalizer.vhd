-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity equalizer is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    output_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_TVALID : OUT STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC;
    output_r_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_TVALID : IN STD_LOGIC;
    input_r_TREADY : OUT STD_LOGIC;
    input_r_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    input_r_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    input_r_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of equalizer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "equalizer_equalizer,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=14.600000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1365,HLS_SYN_LUT=2107,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_BEEF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001011111011101111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal coefs : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal state_load_load_fu_273_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal input_r_TDATA_blk_n : STD_LOGIC;
    signal coefs_read_reg_673 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal state_load_reg_684 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_688 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_last_V_reg_708 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_load_1_reg_727 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_ap_start : STD_LOGIC;
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_ap_done : STD_LOGIC;
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_ap_idle : STD_LOGIC;
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_ap_ready : STD_LOGIC;
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_input_r_TREADY : STD_LOGIC;
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_tmp_last_V_1_out : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_tmp_last_V_1_out_ap_vld : STD_LOGIC;
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal ap_phi_mux_tmp_last_V_3_phi_fu_219_p8 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_3_reg_216 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal regslice_both_output_r_V_data_V_U_apdone_blk : STD_LOGIC;
    signal grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_last_V_1_loc_fu_162 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_fu_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln9_fu_575_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_fu_635_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_567_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln41_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln43_fu_561_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal output_r_TVALID_int_regslice : STD_LOGIC;
    signal output_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_output_r_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_r_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_r_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_r_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_r_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_r_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_r_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_r_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_r_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_r_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_r_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_r_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_r_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_r_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_r_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_r_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_r_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_r_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_r_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_data_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal input_r_TVALID_int_regslice : STD_LOGIC;
    signal input_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_input_r_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_r_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_input_r_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_r_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_input_r_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_r_V_user_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_r_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_r_V_last_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_r_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_r_V_id_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_r_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_r_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_r_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_dest_V_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component equalizer_equalizer_Pipeline_VITIS_LOOP_48_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_TVALID : IN STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln48 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_last_V : IN STD_LOGIC_VECTOR (0 downto 0);
        tmp_data_V_3 : IN STD_LOGIC_VECTOR (31 downto 0);
        coefs : IN STD_LOGIC_VECTOR (63 downto 0);
        input_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r_TREADY : OUT STD_LOGIC;
        input_r_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        input_r_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        input_r_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        tmp_last_V_1_out : OUT STD_LOGIC_VECTOR (0 downto 0);
        tmp_last_V_1_out_ap_vld : OUT STD_LOGIC );
    end component;


    component equalizer_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        coefs : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component equalizer_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component equalizer_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229 : component equalizer_equalizer_Pipeline_VITIS_LOOP_48_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_ap_start,
        ap_done => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_ap_done,
        ap_idle => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_ap_idle,
        ap_ready => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_ap_ready,
        input_r_TVALID => input_r_TVALID_int_regslice,
        m_axi_gmem_AWVALID => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => gmem_AWREADY,
        m_axi_gmem_AWADDR => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => gmem_WREADY,
        m_axi_gmem_WDATA => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => ap_const_logic_0,
        m_axi_gmem_ARADDR => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => ap_const_logic_0,
        m_axi_gmem_RREADY => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => ap_const_lv32_0,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => ap_const_lv9_0,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => gmem_BVALID,
        m_axi_gmem_BREADY => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        sext_ln48 => i_load_1_reg_727,
        tmp_last_V => tmp_last_V_reg_708,
        tmp_data_V_3 => tmp_data_V_reg_688,
        coefs => coefs_read_reg_673,
        input_r_TDATA => input_r_TDATA_int_regslice,
        input_r_TREADY => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_input_r_TREADY,
        input_r_TKEEP => input_r_TKEEP_int_regslice,
        input_r_TSTRB => input_r_TSTRB_int_regslice,
        input_r_TUSER => input_r_TUSER_int_regslice,
        input_r_TLAST => input_r_TLAST_int_regslice,
        input_r_TID => input_r_TID_int_regslice,
        input_r_TDEST => input_r_TDEST_int_regslice,
        tmp_last_V_1_out => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_tmp_last_V_1_out,
        tmp_last_V_1_out_ap_vld => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_tmp_last_V_1_out_ap_vld);

    control_s_axi_U : component equalizer_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        coefs => coefs);

    gmem_m_axi_U : component equalizer_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 9,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        USER_DW => 32,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_AWADDR,
        I_AWLEN => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_AWLEN,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_WDATA,
        I_WSTRB => grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY);

    regslice_both_output_r_V_data_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv32_0,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => output_r_TREADY_int_regslice,
        data_out => output_r_TDATA,
        vld_out => regslice_both_output_r_V_data_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_data_V_U_apdone_blk);

    regslice_both_output_r_V_keep_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TKEEP_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_r_V_keep_V_U_ack_in_dummy,
        data_out => output_r_TKEEP,
        vld_out => regslice_both_output_r_V_keep_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_keep_V_U_apdone_blk);

    regslice_both_output_r_V_strb_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TSTRB_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_r_V_strb_V_U_ack_in_dummy,
        data_out => output_r_TSTRB,
        vld_out => regslice_both_output_r_V_strb_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_strb_V_U_apdone_blk);

    regslice_both_output_r_V_user_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TUSER_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_r_V_user_V_U_ack_in_dummy,
        data_out => output_r_TUSER,
        vld_out => regslice_both_output_r_V_user_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_user_V_U_apdone_blk);

    regslice_both_output_r_V_last_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TLAST_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_r_V_last_V_U_ack_in_dummy,
        data_out => output_r_TLAST,
        vld_out => regslice_both_output_r_V_last_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_last_V_U_apdone_blk);

    regslice_both_output_r_V_id_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TID_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_r_V_id_V_U_ack_in_dummy,
        data_out => output_r_TID,
        vld_out => regslice_both_output_r_V_id_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_id_V_U_apdone_blk);

    regslice_both_output_r_V_dest_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TDEST_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_r_V_dest_V_U_ack_in_dummy,
        data_out => output_r_TDEST,
        vld_out => regslice_both_output_r_V_dest_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_dest_V_U_apdone_blk);

    regslice_both_input_r_V_data_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TDATA,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_data_V_U_ack_in,
        data_out => input_r_TDATA_int_regslice,
        vld_out => input_r_TVALID_int_regslice,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_data_V_U_apdone_blk);

    regslice_both_input_r_V_keep_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TKEEP,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_keep_V_U_ack_in,
        data_out => input_r_TKEEP_int_regslice,
        vld_out => regslice_both_input_r_V_keep_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_keep_V_U_apdone_blk);

    regslice_both_input_r_V_strb_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TSTRB,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_strb_V_U_ack_in,
        data_out => input_r_TSTRB_int_regslice,
        vld_out => regslice_both_input_r_V_strb_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_strb_V_U_apdone_blk);

    regslice_both_input_r_V_user_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TUSER,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_user_V_U_ack_in,
        data_out => input_r_TUSER_int_regslice,
        vld_out => regslice_both_input_r_V_user_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_user_V_U_apdone_blk);

    regslice_both_input_r_V_last_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TLAST,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_last_V_U_ack_in,
        data_out => input_r_TLAST_int_regslice,
        vld_out => regslice_both_input_r_V_last_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_last_V_U_apdone_blk);

    regslice_both_input_r_V_id_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TID,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_id_V_U_ack_in,
        data_out => input_r_TID_int_regslice,
        vld_out => regslice_both_input_r_V_id_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_id_V_U_apdone_blk);

    regslice_both_input_r_V_dest_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TDEST,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_dest_V_U_ack_in,
        data_out => input_r_TDEST_int_regslice,
        vld_out => regslice_both_input_r_V_dest_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_ap_ready = ap_const_logic_1)) then 
                    grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((input_r_TVALID_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_fu_154 = ap_const_lv32_1000)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (state_load_load_fu_273_p1 = ap_const_lv32_0))) then 
                i_fu_158 <= i_1_fu_567_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state1) or (not(((input_r_TVALID_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_fu_154 = ap_const_lv32_1000)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (state_fu_154 = ap_const_lv32_1000)))) then 
                i_fu_158 <= ap_const_lv32_0;
            elsif (((regslice_both_output_r_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_fu_158 <= i_3_fu_635_p2;
            end if; 
        end if;
    end process;

    state_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                state_fu_154(0) <= '0';
                state_fu_154(4) <= '0';
                state_fu_154(12) <= '0';
            elsif ((not(((input_r_TVALID_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_fu_154 = ap_const_lv32_1000)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (state_load_load_fu_273_p1 = ap_const_lv32_0))) then 
                                state_fu_154(0) <= select_ln9_fu_575_p3(0);                state_fu_154(4) <= select_ln9_fu_575_p3(4);                state_fu_154(12) <= select_ln9_fu_575_p3(12);
            elsif ((((output_r_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((regslice_both_output_r_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (state_load_reg_684 = ap_const_lv32_11)))) then 
                state_fu_154(0) <= '0';
                state_fu_154(4) <= '0';
                state_fu_154(12) <= '1';
            end if; 
        end if;
    end process;

    tmp_last_V_3_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((regslice_both_output_r_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (state_load_reg_684 = ap_const_lv32_11))) then 
                tmp_last_V_3_reg_216 <= tmp_last_V_1_loc_fu_162;
            elsif (((not(((input_r_TVALID_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_fu_154 = ap_const_lv32_1000)))) and not((state_load_load_fu_273_p1 = ap_const_lv32_11)) and not((state_load_load_fu_273_p1 = ap_const_lv32_0)) and not((state_fu_154 = ap_const_lv32_1000)) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((input_r_TVALID_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_fu_154 = ap_const_lv32_1000)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (state_load_load_fu_273_p1 = ap_const_lv32_0)))) then 
                tmp_last_V_3_reg_216 <= input_r_TLAST_int_regslice;
            elsif (((output_r_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                tmp_last_V_3_reg_216 <= tmp_last_V_reg_708;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                coefs_read_reg_673 <= coefs;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_load_1_reg_727 <= i_fu_158;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    state_load_reg_684(0) <= state_fu_154(0);    state_load_reg_684(4) <= state_fu_154(4);    state_load_reg_684(12) <= state_fu_154(12);
                tmp_data_V_reg_688 <= input_r_TDATA_int_regslice;
                tmp_last_V_reg_708 <= input_r_TLAST_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_tmp_last_V_1_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_last_V_1_loc_fu_162 <= grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_tmp_last_V_1_out;
            end if;
        end if;
    end process;
    state_load_reg_684(3 downto 1) <= "000";
    state_load_reg_684(11 downto 5) <= "0000000";
    state_load_reg_684(31 downto 13) <= "0000000000000000000";
    state_fu_154(3 downto 1) <= "000";
    state_fu_154(11 downto 5) <= "0000000";
    state_fu_154(31 downto 13) <= "0000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state2, state_load_load_fu_273_p1, ap_CS_fsm_state3, grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_ap_done, ap_phi_mux_tmp_last_V_3_phi_fu_219_p8, ap_block_state2_io, ap_CS_fsm_state6, regslice_both_output_r_V_data_V_U_apdone_blk, ap_CS_fsm_state5, state_fu_154, output_r_TREADY_int_regslice, input_r_TVALID_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if ((not(((input_r_TVALID_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_fu_154 = ap_const_lv32_1000)))) and not((state_load_load_fu_273_p1 = ap_const_lv32_11)) and not((state_fu_154 = ap_const_lv32_1000)) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif ((not(((input_r_TVALID_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_fu_154 = ap_const_lv32_1000)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (state_load_load_fu_273_p1 = ap_const_lv32_11))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((input_r_TVALID_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_fu_154 = ap_const_lv32_1000)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (state_fu_154 = ap_const_lv32_1000))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((output_r_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((regslice_both_output_r_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_phi_mux_tmp_last_V_3_phi_fu_219_p8 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((regslice_both_output_r_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_phi_mux_tmp_last_V_3_phi_fu_219_p8 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln43_fu_561_p2 <= std_logic_vector(unsigned(i_fu_158) + unsigned(ap_const_lv32_FFFFFFFF));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_ST_fsm_state1_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2_io, state_fu_154, output_r_TREADY_int_regslice, input_r_TVALID_int_regslice)
    begin
        if (((input_r_TVALID_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_fu_154 = ap_const_lv32_1000)))) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(output_r_TREADY_int_regslice)
    begin
        if ((output_r_TREADY_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_ap_done)
    begin
        if ((grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(regslice_both_output_r_V_data_V_U_apdone_blk)
    begin
        if ((regslice_both_output_r_V_data_V_U_apdone_blk = ap_const_logic_1)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state2_assign_proc : process(state_fu_154, output_r_TREADY_int_regslice, input_r_TVALID_int_regslice)
    begin
                ap_block_state2 <= ((input_r_TVALID_int_regslice = ap_const_logic_0) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_fu_154 = ap_const_lv32_1000)));
    end process;


    ap_block_state2_io_assign_proc : process(state_fu_154, output_r_TREADY_int_regslice)
    begin
                ap_block_state2_io <= ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_fu_154 = ap_const_lv32_1000));
    end process;


    ap_phi_mux_tmp_last_V_3_phi_fu_219_p8_assign_proc : process(state_load_reg_684, tmp_last_V_3_reg_216, ap_CS_fsm_state6, tmp_last_V_1_loc_fu_162)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (state_load_reg_684 = ap_const_lv32_11))) then 
            ap_phi_mux_tmp_last_V_3_phi_fu_219_p8 <= tmp_last_V_1_loc_fu_162;
        else 
            ap_phi_mux_tmp_last_V_3_phi_fu_219_p8 <= tmp_last_V_3_reg_216;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state4, grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_AWVALID, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_AWVALID <= grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_AWVALID;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state4, grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_BREADY, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_BREADY <= grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_BREADY;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state4, grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_WVALID, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_WVALID <= grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_m_axi_gmem_WVALID;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_ap_start <= grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_ap_start_reg;
    i_1_fu_567_p3 <= 
        add_ln43_fu_561_p2 when (icmp_ln41_fu_555_p2(0) = '1') else 
        i_fu_158;
    i_3_fu_635_p2 <= std_logic_vector(unsigned(i_fu_158) + unsigned(ap_const_lv32_1));
    icmp_ln41_fu_555_p2 <= "1" when (input_r_TDATA_int_regslice = ap_const_lv32_BEEF) else "0";

    input_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, input_r_TVALID_int_regslice)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_r_TDATA_blk_n <= input_r_TVALID_int_regslice;
        else 
            input_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input_r_TREADY <= regslice_both_input_r_V_data_V_U_ack_in;

    input_r_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state2, grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_input_r_TREADY, ap_block_state2_io, ap_CS_fsm_state5, state_fu_154, output_r_TREADY_int_regslice, input_r_TVALID_int_regslice)
    begin
        if ((not(((input_r_TVALID_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_fu_154 = ap_const_lv32_1000)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            input_r_TREADY_int_regslice <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_r_TREADY_int_regslice <= grp_equalizer_Pipeline_VITIS_LOOP_48_2_fu_229_input_r_TREADY;
        else 
            input_r_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    output_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, state_fu_154, output_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (state_fu_154 = ap_const_lv32_1000)))) then 
            output_r_TDATA_blk_n <= output_r_TREADY_int_regslice;
        else 
            output_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_r_TVALID <= regslice_both_output_r_V_data_V_U_vld_out;

    output_r_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_io, state_fu_154, output_r_TREADY_int_regslice, input_r_TVALID_int_regslice)
    begin
        if ((not(((input_r_TVALID_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_fu_154 = ap_const_lv32_1000)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (state_fu_154 = ap_const_lv32_1000))) then 
            output_r_TVALID_int_regslice <= ap_const_logic_1;
        else 
            output_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    select_ln9_fu_575_p3 <= 
        ap_const_lv32_11 when (icmp_ln41_fu_555_p2(0) = '1') else 
        ap_const_lv32_0;
    state_load_load_fu_273_p1 <= state_fu_154;
end behav;
