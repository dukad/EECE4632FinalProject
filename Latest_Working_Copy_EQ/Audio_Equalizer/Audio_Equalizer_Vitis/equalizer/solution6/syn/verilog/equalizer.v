// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="equalizer_equalizer,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=12526,HLS_SYN_LUT=5472,HLS_VERSION=2022_1}" *)

module equalizer (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        output_r_TDATA,
        output_r_TVALID,
        output_r_TREADY,
        output_r_TKEEP,
        output_r_TSTRB,
        output_r_TUSER,
        output_r_TLAST,
        output_r_TID,
        output_r_TDEST,
        input_r_TDATA,
        input_r_TVALID,
        input_r_TREADY,
        input_r_TKEEP,
        input_r_TSTRB,
        input_r_TUSER,
        input_r_TLAST,
        input_r_TID,
        input_r_TDEST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
output  [31:0] output_r_TDATA;
output   output_r_TVALID;
input   output_r_TREADY;
output  [3:0] output_r_TKEEP;
output  [3:0] output_r_TSTRB;
output  [0:0] output_r_TUSER;
output  [0:0] output_r_TLAST;
output  [0:0] output_r_TID;
output  [0:0] output_r_TDEST;
input  [31:0] input_r_TDATA;
input   input_r_TVALID;
output   input_r_TREADY;
input  [3:0] input_r_TKEEP;
input  [3:0] input_r_TSTRB;
input  [0:0] input_r_TUSER;
input  [0:0] input_r_TLAST;
input  [0:0] input_r_TID;
input  [0:0] input_r_TDEST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
wire   [63:0] coefs;
reg    output_r_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg   [61:0] trunc_ln0_reg_542;
wire    ap_CS_fsm_state1;
reg   [61:0] trunc_ln_reg_547;
reg   [0:0] tmp_reg_552;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_dest_V_fu_422_p3;
wire   [0:0] tmp_id_V_fu_430_p3;
wire   [0:0] tmp_user_V_fu_438_p3;
wire   [3:0] tmp_strb_V_fu_446_p3;
wire   [3:0] tmp_keep_V_fu_454_p3;
wire   [31:0] tmp_data_V_fu_462_p3;
wire    grp_equalizer_Pipeline_Running_Loop_fu_240_ap_start;
wire    grp_equalizer_Pipeline_Running_Loop_fu_240_ap_done;
wire    grp_equalizer_Pipeline_Running_Loop_fu_240_ap_idle;
wire    grp_equalizer_Pipeline_Running_Loop_fu_240_ap_ready;
wire    grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_AWVALID;
wire   [63:0] grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_AWADDR;
wire   [0:0] grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_AWID;
wire   [31:0] grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_AWLEN;
wire   [2:0] grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_AWSIZE;
wire   [1:0] grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_AWBURST;
wire   [1:0] grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_AWLOCK;
wire   [3:0] grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_AWCACHE;
wire   [2:0] grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_AWPROT;
wire   [3:0] grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_AWQOS;
wire   [3:0] grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_AWREGION;
wire   [0:0] grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_AWUSER;
wire    grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_WVALID;
wire   [31:0] grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_WDATA;
wire   [3:0] grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_WSTRB;
wire    grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_WLAST;
wire   [0:0] grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_WID;
wire   [0:0] grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_WUSER;
wire    grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_ARVALID;
wire   [63:0] grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_ARADDR;
wire   [0:0] grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_ARID;
wire   [31:0] grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_ARLEN;
wire   [2:0] grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_ARSIZE;
wire   [1:0] grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_ARBURST;
wire   [1:0] grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_ARLOCK;
wire   [3:0] grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_ARCACHE;
wire   [2:0] grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_ARPROT;
wire   [3:0] grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_ARQOS;
wire   [3:0] grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_ARREGION;
wire   [0:0] grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_ARUSER;
wire    grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_RREADY;
wire    grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_BREADY;
wire    grp_equalizer_Pipeline_Running_Loop_fu_240_input_r_TREADY;
wire   [31:0] grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TDATA;
wire    grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TVALID;
wire    grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TREADY;
wire   [3:0] grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TKEEP;
wire   [3:0] grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TSTRB;
wire   [0:0] grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TUSER;
wire   [0:0] grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TLAST;
wire   [0:0] grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TID;
wire   [0:0] grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TDEST;
wire   [0:0] grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_dest_V_out;
wire    grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_dest_V_out_ap_vld;
wire   [0:0] grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_id_V_out;
wire    grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_id_V_out_ap_vld;
wire   [0:0] grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_user_V_out;
wire    grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_user_V_out_ap_vld;
wire   [3:0] grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_strb_V_out;
wire    grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_strb_V_out_ap_vld;
wire   [3:0] grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_keep_V_out;
wire    grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_keep_V_out_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_data_V_out;
wire    grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_data_V_out_ap_vld;
wire   [0:0] grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_dest_V_1_out;
wire    grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_dest_V_1_out_ap_vld;
wire   [0:0] grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_id_V_1_out;
wire    grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_id_V_1_out_ap_vld;
wire   [0:0] grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_user_V_1_out;
wire    grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_user_V_1_out_ap_vld;
wire   [3:0] grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_strb_V_1_out;
wire    grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_strb_V_1_out_ap_vld;
wire   [3:0] grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_keep_V_1_out;
wire    grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_keep_V_1_out_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_data_V_1_out;
wire    grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_data_V_1_out_ap_vld;
wire   [1:0] grp_equalizer_Pipeline_Running_Loop_fu_240_ap_return;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire   [8:0] gmem_RFIFONUM;
wire    gmem_BVALID;
reg    gmem_BREADY;
reg    grp_equalizer_Pipeline_Running_Loop_fu_240_ap_start_reg;
wire    ap_CS_fsm_state2;
reg   [0:0] tmp_out_dest_V_loc_fu_204;
reg   [0:0] tmp_out_id_V_loc_fu_200;
reg   [0:0] tmp_out_user_V_loc_fu_196;
reg   [3:0] tmp_out_strb_V_loc_fu_192;
reg   [3:0] tmp_out_keep_V_loc_fu_188;
reg   [31:0] tmp_out_data_V_loc_fu_184;
reg   [0:0] tmp_out_dest_V_1_loc_fu_180;
reg   [0:0] tmp_out_id_V_1_loc_fu_176;
reg   [0:0] tmp_out_user_V_1_loc_fu_172;
reg   [3:0] tmp_out_strb_V_1_loc_fu_168;
reg   [3:0] tmp_out_keep_V_1_loc_fu_164;
reg   [31:0] tmp_out_data_V_1_loc_fu_160;
wire   [63:0] empty_fu_352_p2;
reg   [4:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    regslice_both_output_r_V_data_V_U_apdone_blk;
reg    ap_block_state5;
reg   [31:0] output_r_TDATA_int_regslice;
reg    output_r_TVALID_int_regslice;
wire    output_r_TREADY_int_regslice;
wire    regslice_both_output_r_V_data_V_U_vld_out;
wire    regslice_both_output_r_V_keep_V_U_apdone_blk;
reg   [3:0] output_r_TKEEP_int_regslice;
wire    regslice_both_output_r_V_keep_V_U_ack_in_dummy;
wire    regslice_both_output_r_V_keep_V_U_vld_out;
wire    regslice_both_output_r_V_strb_V_U_apdone_blk;
reg   [3:0] output_r_TSTRB_int_regslice;
wire    regslice_both_output_r_V_strb_V_U_ack_in_dummy;
wire    regslice_both_output_r_V_strb_V_U_vld_out;
wire    regslice_both_output_r_V_user_V_U_apdone_blk;
reg   [0:0] output_r_TUSER_int_regslice;
wire    regslice_both_output_r_V_user_V_U_ack_in_dummy;
wire    regslice_both_output_r_V_user_V_U_vld_out;
wire    regslice_both_output_r_V_last_V_U_apdone_blk;
reg   [0:0] output_r_TLAST_int_regslice;
wire    regslice_both_output_r_V_last_V_U_ack_in_dummy;
wire    regslice_both_output_r_V_last_V_U_vld_out;
wire    regslice_both_output_r_V_id_V_U_apdone_blk;
reg   [0:0] output_r_TID_int_regslice;
wire    regslice_both_output_r_V_id_V_U_ack_in_dummy;
wire    regslice_both_output_r_V_id_V_U_vld_out;
wire    regslice_both_output_r_V_dest_V_U_apdone_blk;
reg   [0:0] output_r_TDEST_int_regslice;
wire    regslice_both_output_r_V_dest_V_U_ack_in_dummy;
wire    regslice_both_output_r_V_dest_V_U_vld_out;
wire    regslice_both_input_r_V_data_V_U_apdone_blk;
wire   [31:0] input_r_TDATA_int_regslice;
wire    input_r_TVALID_int_regslice;
reg    input_r_TREADY_int_regslice;
wire    regslice_both_input_r_V_data_V_U_ack_in;
wire    regslice_both_input_r_V_keep_V_U_apdone_blk;
wire   [3:0] input_r_TKEEP_int_regslice;
wire    regslice_both_input_r_V_keep_V_U_vld_out;
wire    regslice_both_input_r_V_keep_V_U_ack_in;
wire    regslice_both_input_r_V_strb_V_U_apdone_blk;
wire   [3:0] input_r_TSTRB_int_regslice;
wire    regslice_both_input_r_V_strb_V_U_vld_out;
wire    regslice_both_input_r_V_strb_V_U_ack_in;
wire    regslice_both_input_r_V_user_V_U_apdone_blk;
wire   [0:0] input_r_TUSER_int_regslice;
wire    regslice_both_input_r_V_user_V_U_vld_out;
wire    regslice_both_input_r_V_user_V_U_ack_in;
wire    regslice_both_input_r_V_last_V_U_apdone_blk;
wire   [0:0] input_r_TLAST_int_regslice;
wire    regslice_both_input_r_V_last_V_U_vld_out;
wire    regslice_both_input_r_V_last_V_U_ack_in;
wire    regslice_both_input_r_V_id_V_U_apdone_blk;
wire   [0:0] input_r_TID_int_regslice;
wire    regslice_both_input_r_V_id_V_U_vld_out;
wire    regslice_both_input_r_V_id_V_U_ack_in;
wire    regslice_both_input_r_V_dest_V_U_apdone_blk;
wire   [0:0] input_r_TDEST_int_regslice;
wire    regslice_both_input_r_V_dest_V_U_vld_out;
wire    regslice_both_input_r_V_dest_V_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 grp_equalizer_Pipeline_Running_Loop_fu_240_ap_start_reg = 1'b0;
end

equalizer_equalizer_Pipeline_Running_Loop grp_equalizer_Pipeline_Running_Loop_fu_240(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_equalizer_Pipeline_Running_Loop_fu_240_ap_start),
    .ap_done(grp_equalizer_Pipeline_Running_Loop_fu_240_ap_done),
    .ap_idle(grp_equalizer_Pipeline_Running_Loop_fu_240_ap_idle),
    .ap_ready(grp_equalizer_Pipeline_Running_Loop_fu_240_ap_ready),
    .m_axi_gmem_AWVALID(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_AWVALID),
    .m_axi_gmem_AWREADY(gmem_AWREADY),
    .m_axi_gmem_AWADDR(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_AWADDR),
    .m_axi_gmem_AWID(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_AWID),
    .m_axi_gmem_AWLEN(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_AWLEN),
    .m_axi_gmem_AWSIZE(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_AWSIZE),
    .m_axi_gmem_AWBURST(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_AWBURST),
    .m_axi_gmem_AWLOCK(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_AWLOCK),
    .m_axi_gmem_AWCACHE(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_AWCACHE),
    .m_axi_gmem_AWPROT(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_AWPROT),
    .m_axi_gmem_AWQOS(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_AWQOS),
    .m_axi_gmem_AWREGION(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_AWREGION),
    .m_axi_gmem_AWUSER(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_AWUSER),
    .m_axi_gmem_WVALID(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_WVALID),
    .m_axi_gmem_WREADY(gmem_WREADY),
    .m_axi_gmem_WDATA(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_WDATA),
    .m_axi_gmem_WSTRB(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_WSTRB),
    .m_axi_gmem_WLAST(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_WLAST),
    .m_axi_gmem_WID(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_WID),
    .m_axi_gmem_WUSER(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_WUSER),
    .m_axi_gmem_ARVALID(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_ARVALID),
    .m_axi_gmem_ARREADY(gmem_ARREADY),
    .m_axi_gmem_ARADDR(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_ARADDR),
    .m_axi_gmem_ARID(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_ARID),
    .m_axi_gmem_ARLEN(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_ARLEN),
    .m_axi_gmem_ARSIZE(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_ARSIZE),
    .m_axi_gmem_ARBURST(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_ARBURST),
    .m_axi_gmem_ARLOCK(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_ARLOCK),
    .m_axi_gmem_ARCACHE(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_ARCACHE),
    .m_axi_gmem_ARPROT(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_ARPROT),
    .m_axi_gmem_ARQOS(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_ARQOS),
    .m_axi_gmem_ARREGION(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_ARREGION),
    .m_axi_gmem_ARUSER(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_ARUSER),
    .m_axi_gmem_RVALID(gmem_RVALID),
    .m_axi_gmem_RREADY(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_RREADY),
    .m_axi_gmem_RDATA(gmem_RDATA),
    .m_axi_gmem_RLAST(1'b0),
    .m_axi_gmem_RID(1'd0),
    .m_axi_gmem_RFIFONUM(gmem_RFIFONUM),
    .m_axi_gmem_RUSER(1'd0),
    .m_axi_gmem_RRESP(2'd0),
    .m_axi_gmem_BVALID(gmem_BVALID),
    .m_axi_gmem_BREADY(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_BREADY),
    .m_axi_gmem_BRESP(2'd0),
    .m_axi_gmem_BID(1'd0),
    .m_axi_gmem_BUSER(1'd0),
    .sext_ln59(trunc_ln_reg_547),
    .sext_ln0(trunc_ln0_reg_542),
    .input_r_TDATA(input_r_TDATA_int_regslice),
    .input_r_TVALID(input_r_TVALID_int_regslice),
    .input_r_TREADY(grp_equalizer_Pipeline_Running_Loop_fu_240_input_r_TREADY),
    .input_r_TKEEP(input_r_TKEEP_int_regslice),
    .input_r_TSTRB(input_r_TSTRB_int_regslice),
    .input_r_TUSER(input_r_TUSER_int_regslice),
    .input_r_TLAST(input_r_TLAST_int_regslice),
    .input_r_TID(input_r_TID_int_regslice),
    .input_r_TDEST(input_r_TDEST_int_regslice),
    .output_r_TDATA(grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TDATA),
    .output_r_TVALID(grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TVALID),
    .output_r_TREADY(grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TREADY),
    .output_r_TKEEP(grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TKEEP),
    .output_r_TSTRB(grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TSTRB),
    .output_r_TUSER(grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TUSER),
    .output_r_TLAST(grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TLAST),
    .output_r_TID(grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TID),
    .output_r_TDEST(grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TDEST),
    .tmp_out_dest_V_out(grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_dest_V_out),
    .tmp_out_dest_V_out_ap_vld(grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_dest_V_out_ap_vld),
    .tmp_out_id_V_out(grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_id_V_out),
    .tmp_out_id_V_out_ap_vld(grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_id_V_out_ap_vld),
    .tmp_out_user_V_out(grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_user_V_out),
    .tmp_out_user_V_out_ap_vld(grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_user_V_out_ap_vld),
    .tmp_out_strb_V_out(grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_strb_V_out),
    .tmp_out_strb_V_out_ap_vld(grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_strb_V_out_ap_vld),
    .tmp_out_keep_V_out(grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_keep_V_out),
    .tmp_out_keep_V_out_ap_vld(grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_keep_V_out_ap_vld),
    .tmp_out_data_V_out(grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_data_V_out),
    .tmp_out_data_V_out_ap_vld(grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_data_V_out_ap_vld),
    .tmp_out_dest_V_1_out(grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_dest_V_1_out),
    .tmp_out_dest_V_1_out_ap_vld(grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_dest_V_1_out_ap_vld),
    .tmp_out_id_V_1_out(grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_id_V_1_out),
    .tmp_out_id_V_1_out_ap_vld(grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_id_V_1_out_ap_vld),
    .tmp_out_user_V_1_out(grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_user_V_1_out),
    .tmp_out_user_V_1_out_ap_vld(grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_user_V_1_out_ap_vld),
    .tmp_out_strb_V_1_out(grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_strb_V_1_out),
    .tmp_out_strb_V_1_out_ap_vld(grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_strb_V_1_out_ap_vld),
    .tmp_out_keep_V_1_out(grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_keep_V_1_out),
    .tmp_out_keep_V_1_out_ap_vld(grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_keep_V_1_out_ap_vld),
    .tmp_out_data_V_1_out(grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_data_V_1_out),
    .tmp_out_data_V_1_out_ap_vld(grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_data_V_1_out_ap_vld),
    .ap_return(grp_equalizer_Pipeline_Running_Loop_fu_240_ap_return)
);

equalizer_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .coefs(coefs)
);

equalizer_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .USER_DW( 32 ),
    .USER_AW( 64 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_ARADDR),
    .I_ARLEN(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_ARLEN),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RFIFONUM(gmem_RFIFONUM),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_AWADDR),
    .I_AWLEN(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_AWLEN),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_WDATA),
    .I_WSTRB(grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_WSTRB),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY)
);

equalizer_regslice_both #(
    .DataWidth( 32 ))
regslice_both_output_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TDATA_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(output_r_TREADY_int_regslice),
    .data_out(output_r_TDATA),
    .vld_out(regslice_both_output_r_V_data_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_data_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 4 ))
regslice_both_output_r_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TKEEP_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_r_V_keep_V_U_ack_in_dummy),
    .data_out(output_r_TKEEP),
    .vld_out(regslice_both_output_r_V_keep_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_keep_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 4 ))
regslice_both_output_r_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TSTRB_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_r_V_strb_V_U_ack_in_dummy),
    .data_out(output_r_TSTRB),
    .vld_out(regslice_both_output_r_V_strb_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_strb_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_r_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TUSER_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_r_V_user_V_U_ack_in_dummy),
    .data_out(output_r_TUSER),
    .vld_out(regslice_both_output_r_V_user_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_user_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_r_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TLAST_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_r_V_last_V_U_ack_in_dummy),
    .data_out(output_r_TLAST),
    .vld_out(regslice_both_output_r_V_last_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_last_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_r_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TID_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_r_V_id_V_U_ack_in_dummy),
    .data_out(output_r_TID),
    .vld_out(regslice_both_output_r_V_id_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_id_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_r_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TDEST_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_r_V_dest_V_U_ack_in_dummy),
    .data_out(output_r_TDEST),
    .vld_out(regslice_both_output_r_V_dest_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_dest_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 32 ))
regslice_both_input_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TDATA),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_data_V_U_ack_in),
    .data_out(input_r_TDATA_int_regslice),
    .vld_out(input_r_TVALID_int_regslice),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_data_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 4 ))
regslice_both_input_r_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TKEEP),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_keep_V_U_ack_in),
    .data_out(input_r_TKEEP_int_regslice),
    .vld_out(regslice_both_input_r_V_keep_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_keep_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 4 ))
regslice_both_input_r_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TSTRB),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_strb_V_U_ack_in),
    .data_out(input_r_TSTRB_int_regslice),
    .vld_out(regslice_both_input_r_V_strb_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_strb_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_r_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TUSER),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_user_V_U_ack_in),
    .data_out(input_r_TUSER_int_regslice),
    .vld_out(regslice_both_input_r_V_user_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_user_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_r_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TLAST),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_last_V_U_ack_in),
    .data_out(input_r_TLAST_int_regslice),
    .vld_out(regslice_both_input_r_V_last_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_last_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_r_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TID),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_id_V_U_ack_in),
    .data_out(input_r_TID_int_regslice),
    .vld_out(regslice_both_input_r_V_id_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_id_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_r_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TDEST),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_dest_V_U_ack_in),
    .data_out(input_r_TDEST_int_regslice),
    .vld_out(regslice_both_input_r_V_dest_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_equalizer_Pipeline_Running_Loop_fu_240_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_equalizer_Pipeline_Running_Loop_fu_240_ap_start_reg <= 1'b1;
        end else if ((grp_equalizer_Pipeline_Running_Loop_fu_240_ap_ready == 1'b1)) begin
            grp_equalizer_Pipeline_Running_Loop_fu_240_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_data_V_1_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_out_data_V_1_loc_fu_160 <= grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_data_V_1_out;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_data_V_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_out_data_V_loc_fu_184 <= grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_data_V_out;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_dest_V_1_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_out_dest_V_1_loc_fu_180 <= grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_dest_V_1_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_dest_V_out_ap_vld == 1'b1))) begin
        tmp_out_dest_V_loc_fu_204 <= grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_dest_V_out;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_id_V_1_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_out_id_V_1_loc_fu_176 <= grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_id_V_1_out;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_id_V_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_out_id_V_loc_fu_200 <= grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_id_V_out;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_keep_V_1_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_out_keep_V_1_loc_fu_164 <= grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_keep_V_1_out;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_keep_V_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_out_keep_V_loc_fu_188 <= grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_keep_V_out;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_strb_V_1_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_out_strb_V_1_loc_fu_168 <= grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_strb_V_1_out;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_strb_V_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_out_strb_V_loc_fu_192 <= grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_strb_V_out;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_user_V_1_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_out_user_V_1_loc_fu_172 <= grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_user_V_1_out;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_user_V_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_out_user_V_loc_fu_196 <= grp_equalizer_Pipeline_Running_Loop_fu_240_tmp_out_user_V_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_reg_552 <= grp_equalizer_Pipeline_Running_Loop_fu_240_ap_return[32'd1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        trunc_ln0_reg_542 <= {{empty_fu_352_p2[63:2]}};
        trunc_ln_reg_547 <= {{coefs[63:2]}};
    end
end

assign ap_ST_fsm_state1_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_equalizer_Pipeline_Running_Loop_fu_240_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((output_r_TREADY_int_regslice == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((output_r_TREADY_int_regslice == 1'b0) | (regslice_both_output_r_V_data_V_U_apdone_blk == 1'b1))) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        gmem_ARVALID = grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_ARVALID;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        gmem_AWVALID = grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_AWVALID;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        gmem_BREADY = grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_BREADY;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        gmem_RREADY = grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_RREADY;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        gmem_WVALID = grp_equalizer_Pipeline_Running_Loop_fu_240_m_axi_gmem_WVALID;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_r_TREADY_int_regslice = grp_equalizer_Pipeline_Running_Loop_fu_240_input_r_TREADY;
    end else begin
        input_r_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        output_r_TDATA_blk_n = output_r_TREADY_int_regslice;
    end else begin
        output_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((output_r_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        output_r_TDATA_int_regslice = tmp_data_V_fu_462_p3;
    end else if (((1'b1 == ap_CS_fsm_state3) & (grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TVALID == 1'b1))) begin
        output_r_TDATA_int_regslice = grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TDATA;
    end else begin
        output_r_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((output_r_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        output_r_TDEST_int_regslice = tmp_dest_V_fu_422_p3;
    end else if (((1'b1 == ap_CS_fsm_state3) & (grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TVALID == 1'b1))) begin
        output_r_TDEST_int_regslice = grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TDEST;
    end else begin
        output_r_TDEST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((output_r_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        output_r_TID_int_regslice = tmp_id_V_fu_430_p3;
    end else if (((1'b1 == ap_CS_fsm_state3) & (grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TVALID == 1'b1))) begin
        output_r_TID_int_regslice = grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TID;
    end else begin
        output_r_TID_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((output_r_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        output_r_TKEEP_int_regslice = tmp_keep_V_fu_454_p3;
    end else if (((1'b1 == ap_CS_fsm_state3) & (grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TVALID == 1'b1))) begin
        output_r_TKEEP_int_regslice = grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TKEEP;
    end else begin
        output_r_TKEEP_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((output_r_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        output_r_TLAST_int_regslice = 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state3) & (grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TVALID == 1'b1))) begin
        output_r_TLAST_int_regslice = grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TLAST;
    end else begin
        output_r_TLAST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((output_r_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        output_r_TSTRB_int_regslice = tmp_strb_V_fu_446_p3;
    end else if (((1'b1 == ap_CS_fsm_state3) & (grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TVALID == 1'b1))) begin
        output_r_TSTRB_int_regslice = grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TSTRB;
    end else begin
        output_r_TSTRB_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((output_r_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        output_r_TUSER_int_regslice = tmp_user_V_fu_438_p3;
    end else if (((1'b1 == ap_CS_fsm_state3) & (grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TVALID == 1'b1))) begin
        output_r_TUSER_int_regslice = grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TUSER;
    end else begin
        output_r_TUSER_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((output_r_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        output_r_TVALID_int_regslice = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_r_TVALID_int_regslice = grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TVALID;
    end else begin
        output_r_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_equalizer_Pipeline_Running_Loop_fu_240_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((output_r_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((output_r_TREADY_int_regslice == 1'b0) | (regslice_both_output_r_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state5 = ((output_r_TREADY_int_regslice == 1'b0) | (regslice_both_output_r_V_data_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_fu_352_p2 = (coefs + 64'd4);

assign grp_equalizer_Pipeline_Running_Loop_fu_240_ap_start = grp_equalizer_Pipeline_Running_Loop_fu_240_ap_start_reg;

assign grp_equalizer_Pipeline_Running_Loop_fu_240_output_r_TREADY = (output_r_TREADY_int_regslice & ap_CS_fsm_state3);

assign input_r_TREADY = regslice_both_input_r_V_data_V_U_ack_in;

assign output_r_TVALID = regslice_both_output_r_V_data_V_U_vld_out;

assign tmp_data_V_fu_462_p3 = ((tmp_reg_552[0:0] == 1'b1) ? tmp_out_data_V_1_loc_fu_160 : tmp_out_data_V_loc_fu_184);

assign tmp_dest_V_fu_422_p3 = ((tmp_reg_552[0:0] == 1'b1) ? tmp_out_dest_V_1_loc_fu_180 : tmp_out_dest_V_loc_fu_204);

assign tmp_id_V_fu_430_p3 = ((tmp_reg_552[0:0] == 1'b1) ? tmp_out_id_V_1_loc_fu_176 : tmp_out_id_V_loc_fu_200);

assign tmp_keep_V_fu_454_p3 = ((tmp_reg_552[0:0] == 1'b1) ? tmp_out_keep_V_1_loc_fu_164 : tmp_out_keep_V_loc_fu_188);

assign tmp_strb_V_fu_446_p3 = ((tmp_reg_552[0:0] == 1'b1) ? tmp_out_strb_V_1_loc_fu_168 : tmp_out_strb_V_loc_fu_192);

assign tmp_user_V_fu_438_p3 = ((tmp_reg_552[0:0] == 1'b1) ? tmp_out_user_V_1_loc_fu_172 : tmp_out_user_V_loc_fu_196);

endmodule //equalizer
