-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity equalizer is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    output_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_TVALID : OUT STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC;
    output_r_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_TVALID : IN STD_LOGIC;
    input_r_TREADY : OUT STD_LOGIC;
    input_r_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    input_r_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    input_r_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of equalizer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "equalizer_equalizer,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=10207,HLS_SYN_LUT=5021,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (55 downto 0) := "00000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (55 downto 0) := "00000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (55 downto 0) := "00000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (55 downto 0) := "00000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (55 downto 0) := "00000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (55 downto 0) := "00000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (55 downto 0) := "00001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (55 downto 0) := "00010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (55 downto 0) := "00100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (55 downto 0) := "01000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (55 downto 0) := "10000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal coefs : STD_LOGIC_VECTOR (63 downto 0);
    signal signal_shift_reg_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal_shift_reg_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal_shift_reg_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal_shift_reg_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal_shift_reg_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal_shift_reg_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal_shift_reg_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal_shift_reg_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal_shift_reg_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal_shift_reg_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal_shift_reg_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal_shift_reg_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal_shift_reg_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal_shift_reg_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal_shift_reg_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal_shift_reg_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal_shift_reg_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal_shift_reg_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal_shift_reg_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal_shift_reg_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal_shift_reg_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal_shift_reg_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal_shift_reg_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal_shift_reg_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal_shift_reg_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal_shift_reg_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal_shift_reg_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal_shift_reg_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal_shift_reg_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal_shift_reg_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal_shift_reg_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal_shift_reg_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal state_2_load_fu_520_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal output_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal state_2_reg_1356 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_last_V_2_reg_1388 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal input_r_TDATA_blk_n : STD_LOGIC;
    signal reg_483 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal reg_487 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal coefs_read_reg_1315 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem_addr_reg_1320 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_load_fu_451_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_fu_455_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_fu_459_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_fu_463_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_fu_467_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_fu_471_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_V_reg_1360 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_keep_V_reg_1367 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_strb_V_reg_1374 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_user_V_reg_1381 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_479_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_V_reg_1393 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_V_reg_1400 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_543_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln70_reg_1407 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_read_4_reg_1412 : STD_LOGIC_VECTOR (31 downto 0);
    signal signal_shift_reg_3_load_reg_1417 : STD_LOGIC_VECTOR (31 downto 0);
    signal signal_shift_reg_4_load_reg_1438 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_562_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_28_reg_1444 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_578_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_29_reg_1449 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_594_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_30_reg_1454 : STD_LOGIC_VECTOR (31 downto 0);
    signal signal_shift_reg_5_load_reg_1459 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_614_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_27_reg_1465 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_fu_632_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_reg_1470 : STD_LOGIC_VECTOR (31 downto 0);
    signal signal_shift_reg_6_load_reg_1475 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_627_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_26_reg_1481 : STD_LOGIC_VECTOR (31 downto 0);
    signal signal_shift_reg_7_load_reg_1486 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_645_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_25_reg_1492 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_1_fu_664_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_1_reg_1497 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_659_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_24_reg_1502 : STD_LOGIC_VECTOR (31 downto 0);
    signal signal_shift_reg_9_load_reg_1507 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_4_fu_698_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_4_reg_1518 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_682_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_22_reg_1523 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_693_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_23_reg_1528 : STD_LOGIC_VECTOR (31 downto 0);
    signal signal_shift_reg_11_load_reg_1533 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_5_fu_736_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_5_reg_1544 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_716_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_20_reg_1549 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_727_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_21_reg_1554 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_6_fu_745_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_6_reg_1559 : STD_LOGIC_VECTOR (31 downto 0);
    signal signal_shift_reg_13_load_reg_1564 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_11_fu_780_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_11_reg_1575 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_764_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_18_reg_1580 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_775_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_19_reg_1585 : STD_LOGIC_VECTOR (31 downto 0);
    signal signal_shift_reg_15_load_reg_1590 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_12_fu_818_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_12_reg_1601 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_798_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_16_reg_1606 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_809_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_17_reg_1611 : STD_LOGIC_VECTOR (31 downto 0);
    signal signal_shift_reg_17_load_reg_1616 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_823_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_15_reg_1627 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_8_fu_853_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_8_reg_1632 : STD_LOGIC_VECTOR (31 downto 0);
    signal signal_shift_reg_18_load_reg_1637 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_842_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_14_reg_1643 : STD_LOGIC_VECTOR (31 downto 0);
    signal signal_shift_reg_19_load_reg_1648 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_866_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_13_reg_1654 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_13_fu_894_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_13_reg_1659 : STD_LOGIC_VECTOR (31 downto 0);
    signal signal_shift_reg_20_load_reg_1664 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_880_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_12_reg_1670 : STD_LOGIC_VECTOR (31 downto 0);
    signal signal_shift_reg_21_load_reg_1675 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_908_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_11_reg_1681 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_27_fu_931_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_27_reg_1686 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_922_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_10_reg_1691 : STD_LOGIC_VECTOR (31 downto 0);
    signal signal_shift_reg_23_load_reg_1696 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_936_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_9_reg_1707 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_28_fu_970_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_28_reg_1712 : STD_LOGIC_VECTOR (31 downto 0);
    signal signal_shift_reg_24_load_reg_1717 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_955_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_8_reg_1723 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_984_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_7_reg_1728 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_23_fu_994_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_23_reg_1733 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_989_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_6_reg_1738 : STD_LOGIC_VECTOR (31 downto 0);
    signal signal_shift_reg_27_load_reg_1743 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_29_fu_1048_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_29_reg_1759 : STD_LOGIC_VECTOR (31 downto 0);
    signal signal_shift_reg_28_load_reg_1764 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1012_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_4_reg_1770 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1028_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_5_reg_1775 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1062_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_3_reg_1780 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_19_fu_1072_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_19_reg_1785 : STD_LOGIC_VECTOR (31 downto 0);
    signal signal_shift_reg_30_load_reg_1790 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1067_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_2_reg_1801 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1090_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_1_reg_1806 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_20_fu_1110_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_20_reg_1811 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_fu_1101_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_reg_1821 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1119_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulate_reg_1826 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal add_ln70_16_fu_1130_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_16_reg_1831 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_17_fu_1138_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_17_reg_1836 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal add_ln70_30_fu_1147_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_30_reg_1841 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal accumulate_2_fu_1156_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_1_reg_1854 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal icmp_ln39_fu_1217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln39_fu_1260_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln39_reg_1860 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_last_V_1_reg_301 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal ap_predicate_op314_write_state46 : BOOLEAN;
    signal ap_predicate_op343_write_state46 : BOOLEAN;
    signal ap_block_state46 : BOOLEAN;
    signal ap_block_state46_io : BOOLEAN;
    signal ap_phi_mux_state_1_phi_fu_318_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_1_reg_314 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_tmp_dest_V_1_phi_fu_333_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_V_1_reg_329 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_tmp_id_V_1_phi_fu_345_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_V_1_reg_341 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_tmp_user_V_1_phi_fu_357_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_1_reg_353 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_tmp_strb_V_1_phi_fu_369_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_strb_V_1_reg_365 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_tmp_keep_V_1_phi_fu_381_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_keep_V_1_reg_377 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_tmp_data_V_4_phi_fu_393_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_4_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_state_1233_phi_fu_405_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_1233_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op344_write_state47 : BOOLEAN;
    signal ap_block_state47 : BOOLEAN;
    signal ap_block_state47_io : BOOLEAN;
    signal j_reg_416 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state55 : BOOLEAN;
    signal tmp_data_V_1_reg_427 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_4_0_0_0108_phi_reg_438 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln67_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln40_fu_1250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_out_data_V_fu_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_tmp_out_data_V_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_out_keep_V_fu_198 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_tmp_out_keep_V_4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_out_strb_V_fu_202 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_tmp_out_strb_V_4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_out_user_V_fu_206 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_allocacmp_tmp_out_user_V_4 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_out_id_V_fu_210 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_allocacmp_tmp_out_id_V_4 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_out_dest_V_fu_214 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_allocacmp_tmp_out_dest_V_4 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_fu_218 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_fu_495_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln70_3_fu_732_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_2_fu_741_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_10_fu_814_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_7_fu_885_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_9_fu_889_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_26_fu_927_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_25_fu_966_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_22_fu_1039_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_24_fu_1043_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_18_fu_1106_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_15_fu_1134_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_21_fu_1143_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_14_fu_1152_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_1223_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln40_fu_1231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln40_fu_1235_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_1240_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_543_ce : STD_LOGIC;
    signal grp_fu_562_ce : STD_LOGIC;
    signal grp_fu_578_ce : STD_LOGIC;
    signal grp_fu_594_ce : STD_LOGIC;
    signal grp_fu_614_ce : STD_LOGIC;
    signal grp_fu_627_ce : STD_LOGIC;
    signal grp_fu_645_ce : STD_LOGIC;
    signal grp_fu_659_ce : STD_LOGIC;
    signal grp_fu_682_ce : STD_LOGIC;
    signal grp_fu_693_ce : STD_LOGIC;
    signal grp_fu_716_ce : STD_LOGIC;
    signal grp_fu_727_ce : STD_LOGIC;
    signal grp_fu_764_ce : STD_LOGIC;
    signal grp_fu_775_ce : STD_LOGIC;
    signal grp_fu_798_ce : STD_LOGIC;
    signal grp_fu_809_ce : STD_LOGIC;
    signal grp_fu_823_ce : STD_LOGIC;
    signal grp_fu_842_ce : STD_LOGIC;
    signal grp_fu_866_ce : STD_LOGIC;
    signal grp_fu_880_ce : STD_LOGIC;
    signal grp_fu_908_ce : STD_LOGIC;
    signal grp_fu_922_ce : STD_LOGIC;
    signal grp_fu_936_ce : STD_LOGIC;
    signal grp_fu_955_ce : STD_LOGIC;
    signal grp_fu_984_ce : STD_LOGIC;
    signal grp_fu_989_ce : STD_LOGIC;
    signal grp_fu_1012_ce : STD_LOGIC;
    signal grp_fu_1028_ce : STD_LOGIC;
    signal grp_fu_1062_ce : STD_LOGIC;
    signal grp_fu_1067_ce : STD_LOGIC;
    signal grp_fu_1090_ce : STD_LOGIC;
    signal grp_fu_1101_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal regslice_both_output_r_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state56 : BOOLEAN;
    signal output_r_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r_TVALID_int_regslice : STD_LOGIC;
    signal output_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_output_r_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_r_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal output_r_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_output_r_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_r_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_r_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal output_r_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_output_r_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_r_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_r_V_user_V_U_apdone_blk : STD_LOGIC;
    signal output_r_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_output_r_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_r_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_r_V_last_V_U_apdone_blk : STD_LOGIC;
    signal output_r_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_output_r_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_r_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_r_V_id_V_U_apdone_blk : STD_LOGIC;
    signal output_r_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_output_r_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_r_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_r_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal output_r_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_output_r_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_r_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_data_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal input_r_TVALID_int_regslice : STD_LOGIC;
    signal input_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_input_r_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_r_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_input_r_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_r_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_input_r_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_r_V_user_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_r_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_r_V_last_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_r_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_r_V_id_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_r_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_r_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_r_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_dest_V_U_ack_in : STD_LOGIC;
    signal ap_condition_1749 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component equalizer_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component equalizer_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        coefs : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component equalizer_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component equalizer_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    control_s_axi_U : component equalizer_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        coefs => coefs);

    gmem_m_axi_U : component equalizer_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 9,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        USER_DW => 32,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_addr_reg_1320,
        I_ARLEN => ap_const_lv32_21,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_addr_1_reg_1854,
        I_AWLEN => ap_const_lv32_1,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => tmp_data_V_1_reg_427,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY);

    mul_32s_32s_32_2_1_U1 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_data_V_reg_1360,
        din1 => reg_483,
        ce => grp_fu_543_ce,
        dout => grp_fu_543_p2);

    mul_32s_32s_32_2_1_U2 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_2,
        din1 => reg_491,
        ce => grp_fu_562_ce,
        dout => grp_fu_562_p2);

    mul_32s_32s_32_2_1_U3 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_1,
        din1 => reg_483,
        ce => grp_fu_578_ce,
        dout => grp_fu_578_p2);

    mul_32s_32s_32_2_1_U4 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_0,
        din1 => reg_487,
        ce => grp_fu_594_ce,
        dout => grp_fu_594_p2);

    mul_32s_32s_32_2_1_U5 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_3_load_reg_1417,
        din1 => gmem_addr_read_4_reg_1412,
        ce => grp_fu_614_ce,
        dout => grp_fu_614_p2);

    mul_32s_32s_32_2_1_U6 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_4_load_reg_1438,
        din1 => reg_483,
        ce => grp_fu_627_ce,
        dout => grp_fu_627_p2);

    mul_32s_32s_32_2_1_U7 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_5_load_reg_1459,
        din1 => reg_487,
        ce => grp_fu_645_ce,
        dout => grp_fu_645_p2);

    mul_32s_32s_32_2_1_U8 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_6_load_reg_1475,
        din1 => reg_483,
        ce => grp_fu_659_ce,
        dout => grp_fu_659_p2);

    mul_32s_32s_32_2_1_U9 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_8,
        din1 => reg_483,
        ce => grp_fu_682_ce,
        dout => grp_fu_682_p2);

    mul_32s_32s_32_2_1_U10 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_7_load_reg_1486,
        din1 => reg_487,
        ce => grp_fu_693_ce,
        dout => grp_fu_693_p2);

    mul_32s_32s_32_2_1_U11 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_10,
        din1 => reg_483,
        ce => grp_fu_716_ce,
        dout => grp_fu_716_p2);

    mul_32s_32s_32_2_1_U12 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_9_load_reg_1507,
        din1 => reg_491,
        ce => grp_fu_727_ce,
        dout => grp_fu_727_p2);

    mul_32s_32s_32_2_1_U13 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_12,
        din1 => reg_483,
        ce => grp_fu_764_ce,
        dout => grp_fu_764_p2);

    mul_32s_32s_32_2_1_U14 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_11_load_reg_1533,
        din1 => reg_487,
        ce => grp_fu_775_ce,
        dout => grp_fu_775_p2);

    mul_32s_32s_32_2_1_U15 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_14,
        din1 => reg_483,
        ce => grp_fu_798_ce,
        dout => grp_fu_798_p2);

    mul_32s_32s_32_2_1_U16 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_13_load_reg_1564,
        din1 => reg_491,
        ce => grp_fu_809_ce,
        dout => grp_fu_809_p2);

    mul_32s_32s_32_2_1_U17 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_15_load_reg_1590,
        din1 => reg_487,
        ce => grp_fu_823_ce,
        dout => grp_fu_823_p2);

    mul_32s_32s_32_2_1_U18 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_16,
        din1 => reg_483,
        ce => grp_fu_842_ce,
        dout => grp_fu_842_p2);

    mul_32s_32s_32_2_1_U19 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_17_load_reg_1616,
        din1 => reg_487,
        ce => grp_fu_866_ce,
        dout => grp_fu_866_p2);

    mul_32s_32s_32_2_1_U20 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_18_load_reg_1637,
        din1 => reg_483,
        ce => grp_fu_880_ce,
        dout => grp_fu_880_p2);

    mul_32s_32s_32_2_1_U21 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_19_load_reg_1648,
        din1 => reg_487,
        ce => grp_fu_908_ce,
        dout => grp_fu_908_p2);

    mul_32s_32s_32_2_1_U22 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_20_load_reg_1664,
        din1 => reg_483,
        ce => grp_fu_922_ce,
        dout => grp_fu_922_p2);

    mul_32s_32s_32_2_1_U23 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_21_load_reg_1675,
        din1 => reg_487,
        ce => grp_fu_936_ce,
        dout => grp_fu_936_p2);

    mul_32s_32s_32_2_1_U24 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_22,
        din1 => reg_483,
        ce => grp_fu_955_ce,
        dout => grp_fu_955_p2);

    mul_32s_32s_32_2_1_U25 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_23_load_reg_1696,
        din1 => reg_487,
        ce => grp_fu_984_ce,
        dout => grp_fu_984_p2);

    mul_32s_32s_32_2_1_U26 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_24_load_reg_1717,
        din1 => reg_483,
        ce => grp_fu_989_ce,
        dout => grp_fu_989_p2);

    mul_32s_32s_32_2_1_U27 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_26,
        din1 => reg_483,
        ce => grp_fu_1012_ce,
        dout => grp_fu_1012_p2);

    mul_32s_32s_32_2_1_U28 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_25,
        din1 => reg_487,
        ce => grp_fu_1028_ce,
        dout => grp_fu_1028_p2);

    mul_32s_32s_32_2_1_U29 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_27_load_reg_1743,
        din1 => reg_491,
        ce => grp_fu_1062_ce,
        dout => grp_fu_1062_p2);

    mul_32s_32s_32_2_1_U30 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_28_load_reg_1764,
        din1 => reg_483,
        ce => grp_fu_1067_ce,
        dout => grp_fu_1067_p2);

    mul_32s_32s_32_2_1_U31 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_29,
        din1 => reg_487,
        ce => grp_fu_1090_ce,
        dout => grp_fu_1090_p2);

    mul_32s_32s_32_2_1_U32 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_30_load_reg_1790,
        din1 => reg_483,
        ce => grp_fu_1101_ce,
        dout => grp_fu_1101_p2);

    mul_32s_32s_32_2_1_U33 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => signal_shift_reg_31,
        din1 => reg_487,
        ce => ap_const_logic_1,
        dout => grp_fu_1119_p2);

    regslice_both_output_r_V_data_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TDATA_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => output_r_TREADY_int_regslice,
        data_out => output_r_TDATA,
        vld_out => regslice_both_output_r_V_data_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_data_V_U_apdone_blk);

    regslice_both_output_r_V_keep_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TKEEP_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_r_V_keep_V_U_ack_in_dummy,
        data_out => output_r_TKEEP,
        vld_out => regslice_both_output_r_V_keep_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_keep_V_U_apdone_blk);

    regslice_both_output_r_V_strb_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TSTRB_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_r_V_strb_V_U_ack_in_dummy,
        data_out => output_r_TSTRB,
        vld_out => regslice_both_output_r_V_strb_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_strb_V_U_apdone_blk);

    regslice_both_output_r_V_user_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TUSER_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_r_V_user_V_U_ack_in_dummy,
        data_out => output_r_TUSER,
        vld_out => regslice_both_output_r_V_user_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_user_V_U_apdone_blk);

    regslice_both_output_r_V_last_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TLAST_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_r_V_last_V_U_ack_in_dummy,
        data_out => output_r_TLAST,
        vld_out => regslice_both_output_r_V_last_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_last_V_U_apdone_blk);

    regslice_both_output_r_V_id_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TID_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_r_V_id_V_U_ack_in_dummy,
        data_out => output_r_TID,
        vld_out => regslice_both_output_r_V_id_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_id_V_U_apdone_blk);

    regslice_both_output_r_V_dest_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TDEST_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_r_V_dest_V_U_ack_in_dummy,
        data_out => output_r_TDEST,
        vld_out => regslice_both_output_r_V_dest_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_dest_V_U_apdone_blk);

    regslice_both_input_r_V_data_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TDATA,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_data_V_U_ack_in,
        data_out => input_r_TDATA_int_regslice,
        vld_out => input_r_TVALID_int_regslice,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_data_V_U_apdone_blk);

    regslice_both_input_r_V_keep_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TKEEP,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_keep_V_U_ack_in,
        data_out => input_r_TKEEP_int_regslice,
        vld_out => regslice_both_input_r_V_keep_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_keep_V_U_apdone_blk);

    regslice_both_input_r_V_strb_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TSTRB,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_strb_V_U_ack_in,
        data_out => input_r_TSTRB_int_regslice,
        vld_out => regslice_both_input_r_V_strb_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_strb_V_U_apdone_blk);

    regslice_both_input_r_V_user_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TUSER,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_user_V_U_ack_in,
        data_out => input_r_TUSER_int_regslice,
        vld_out => regslice_both_input_r_V_user_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_user_V_U_apdone_blk);

    regslice_both_input_r_V_last_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TLAST,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_last_V_U_ack_in,
        data_out => input_r_TLAST_int_regslice,
        vld_out => regslice_both_input_r_V_last_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_last_V_U_apdone_blk);

    regslice_both_input_r_V_id_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TID,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_id_V_U_ack_in,
        data_out => input_r_TID_int_regslice,
        vld_out => regslice_both_input_r_V_id_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_id_V_U_apdone_blk);

    regslice_both_input_r_V_dest_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TDEST,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_dest_V_U_ack_in,
        data_out => input_r_TDEST_int_regslice,
        vld_out => regslice_both_input_r_V_dest_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    j_reg_416_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((input_r_TVALID_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (state_2_load_fu_520_p1 = ap_const_lv32_11))) then 
                j_reg_416 <= ap_const_lv6_20;
            elsif ((not(((gmem_BVALID = ap_const_logic_0) or (input_r_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
                j_reg_416 <= add_ln39_reg_1860;
            end if; 
        end if;
    end process;

    state_1233_reg_401_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state46_io) or ((ap_predicate_op343_write_state46 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op314_write_state46 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state46) and (((ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 = ap_const_lv1_0) and (tmp_last_V_2_reg_1388 = ap_const_lv1_1) and (state_2_reg_1356 = ap_const_lv32_1000)) or (not((state_2_reg_1356 = ap_const_lv32_0)) and not((state_2_reg_1356 = ap_const_lv32_1000)) and (ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 = ap_const_lv1_0))))) then 
                state_1233_reg_401 <= ap_phi_mux_state_1_phi_fu_318_p6;
            elsif ((not(((input_r_TVALID_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (grp_fu_479_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (state_2_load_fu_520_p1 = ap_const_lv32_0))) then 
                state_1233_reg_401 <= ap_const_lv32_11;
            elsif ((not(((ap_const_boolean_1 = ap_block_state47_io) or ((ap_predicate_op344_write_state47 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (tmp_last_V_2_reg_1388 = ap_const_lv1_0) and (state_2_reg_1356 = ap_const_lv32_1000) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                state_1233_reg_401 <= ap_const_lv32_1000;
            end if; 
        end if;
    end process;

    state_1_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln39_fu_1217_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48)) or (not(((ap_const_boolean_1 = ap_block_state46_io) or ((ap_predicate_op343_write_state46 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op314_write_state46 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (tmp_last_V_2_reg_1388 = ap_const_lv1_1) and (state_2_reg_1356 = ap_const_lv32_1000) and (ap_const_logic_1 = ap_CS_fsm_state46)))) then 
                state_1_reg_314 <= ap_const_lv32_1000;
            elsif ((not((state_2_load_fu_520_p1 = ap_const_lv32_11)) and not((state_2_load_fu_520_p1 = ap_const_lv32_0)) and not((state_fu_218 = ap_const_lv32_1000)) and not(((input_r_TVALID_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                state_1_reg_314 <= state_fu_218;
            end if; 
        end if;
    end process;

    state_fu_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                state_fu_218 <= ap_const_lv32_0;
            elsif ((not(((ap_const_boolean_1 = ap_block_state47_io) or ((ap_predicate_op344_write_state47 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state47) and (((not((state_2_reg_1356 = ap_const_lv32_0)) and (tmp_last_V_1_reg_301 = ap_const_lv1_0)) or ((tmp_last_V_2_reg_1388 = ap_const_lv1_0) and (state_2_reg_1356 = ap_const_lv32_1000))) or ((tmp_last_V_2_reg_1388 = ap_const_lv1_0) and (state_2_reg_1356 = ap_const_lv32_0))))) then 
                state_fu_218 <= ap_phi_mux_state_1233_phi_fu_405_p6;
            end if; 
        end if;
    end process;

    tmp_last_V_1_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_1217_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                tmp_last_V_1_reg_301 <= p_4_0_0_0108_phi_reg_438;
            elsif ((not(((ap_const_boolean_1 = ap_block_state46_io) or ((ap_predicate_op343_write_state46 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op314_write_state46 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (tmp_last_V_2_reg_1388 = ap_const_lv1_1) and (state_2_reg_1356 = ap_const_lv32_1000) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                tmp_last_V_1_reg_301 <= ap_const_lv1_1;
            elsif ((not((state_2_load_fu_520_p1 = ap_const_lv32_11)) and not((state_2_load_fu_520_p1 = ap_const_lv32_0)) and not((state_fu_218 = ap_const_lv32_1000)) and not(((input_r_TVALID_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                tmp_last_V_1_reg_301 <= input_r_TLAST_int_regslice;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                accumulate_reg_1826 <= grp_fu_1119_p2;
                add_ln70_16_reg_1831 <= add_ln70_16_fu_1130_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_1217_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                add_ln39_reg_1860 <= add_ln39_fu_1260_p2;
                gmem_addr_1_reg_1854 <= sext_ln40_fu_1250_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                add_ln70_11_reg_1575 <= add_ln70_11_fu_780_p2;
                signal_shift_reg_13_load_reg_1564 <= signal_shift_reg_13;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                add_ln70_12_reg_1601 <= add_ln70_12_fu_818_p2;
                signal_shift_reg_15_load_reg_1590 <= signal_shift_reg_15;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                add_ln70_13_reg_1659 <= add_ln70_13_fu_894_p2;
                mul_ln67_13_reg_1654 <= grp_fu_866_p2;
                signal_shift_reg_19_load_reg_1648 <= signal_shift_reg_19;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                add_ln70_17_reg_1836 <= add_ln70_17_fu_1138_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                add_ln70_19_reg_1785 <= add_ln70_19_fu_1072_p2;
                mul_ln67_3_reg_1780 <= grp_fu_1062_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                add_ln70_1_reg_1497 <= add_ln70_1_fu_664_p2;
                mul_ln67_25_reg_1492 <= grp_fu_645_p2;
                signal_shift_reg_7_load_reg_1486 <= signal_shift_reg_7;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                add_ln70_20_reg_1811 <= add_ln70_20_fu_1110_p2;
                mul_ln67_1_reg_1806 <= grp_fu_1090_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                add_ln70_23_reg_1733 <= add_ln70_23_fu_994_p2;
                mul_ln67_7_reg_1728 <= grp_fu_984_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                add_ln70_27_reg_1686 <= add_ln70_27_fu_931_p2;
                mul_ln67_11_reg_1681 <= grp_fu_908_p2;
                signal_shift_reg_21_load_reg_1675 <= signal_shift_reg_21;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                add_ln70_28_reg_1712 <= add_ln70_28_fu_970_p2;
                mul_ln67_9_reg_1707 <= grp_fu_936_p2;
                signal_shift_reg_23_load_reg_1696 <= signal_shift_reg_23;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                add_ln70_29_reg_1759 <= add_ln70_29_fu_1048_p2;
                signal_shift_reg_27_load_reg_1743 <= signal_shift_reg_27;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                add_ln70_30_reg_1841 <= add_ln70_30_fu_1147_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                add_ln70_4_reg_1518 <= add_ln70_4_fu_698_p2;
                signal_shift_reg_9_load_reg_1507 <= signal_shift_reg_9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                add_ln70_5_reg_1544 <= add_ln70_5_fu_736_p2;
                signal_shift_reg_11_load_reg_1533 <= signal_shift_reg_11;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                add_ln70_6_reg_1559 <= add_ln70_6_fu_745_p2;
                mul_ln67_20_reg_1549 <= grp_fu_716_p2;
                mul_ln67_21_reg_1554 <= grp_fu_727_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                add_ln70_8_reg_1632 <= add_ln70_8_fu_853_p2;
                mul_ln67_15_reg_1627 <= grp_fu_823_p2;
                signal_shift_reg_17_load_reg_1616 <= signal_shift_reg_17;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                add_ln70_reg_1470 <= add_ln70_fu_632_p2;
                mul_ln67_27_reg_1465 <= grp_fu_614_p2;
                signal_shift_reg_5_load_reg_1459 <= signal_shift_reg_5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                coefs_read_reg_1315 <= coefs;
                gmem_addr_reg_1320 <= sext_ln67_fu_505_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                gmem_addr_read_4_reg_1412 <= gmem_RDATA;
                signal_shift_reg_3_load_reg_1417 <= signal_shift_reg_3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                mul_ln67_10_reg_1691 <= grp_fu_922_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                mul_ln67_12_reg_1670 <= grp_fu_880_p2;
                signal_shift_reg_20_load_reg_1664 <= signal_shift_reg_20;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                mul_ln67_14_reg_1643 <= grp_fu_842_p2;
                signal_shift_reg_18_load_reg_1637 <= signal_shift_reg_18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                mul_ln67_16_reg_1606 <= grp_fu_798_p2;
                mul_ln67_17_reg_1611 <= grp_fu_809_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                mul_ln67_18_reg_1580 <= grp_fu_764_p2;
                mul_ln67_19_reg_1585 <= grp_fu_775_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                mul_ln67_22_reg_1523 <= grp_fu_682_p2;
                mul_ln67_23_reg_1528 <= grp_fu_693_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                mul_ln67_24_reg_1502 <= grp_fu_659_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                mul_ln67_26_reg_1481 <= grp_fu_627_p2;
                signal_shift_reg_6_load_reg_1475 <= signal_shift_reg_6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                mul_ln67_28_reg_1444 <= grp_fu_562_p2;
                mul_ln67_29_reg_1449 <= grp_fu_578_p2;
                mul_ln67_30_reg_1454 <= grp_fu_594_p2;
                signal_shift_reg_4_load_reg_1438 <= signal_shift_reg_4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                mul_ln67_2_reg_1801 <= grp_fu_1067_p2;
                signal_shift_reg_30_load_reg_1790 <= signal_shift_reg_30;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                mul_ln67_4_reg_1770 <= grp_fu_1012_p2;
                mul_ln67_5_reg_1775 <= grp_fu_1028_p2;
                signal_shift_reg_28_load_reg_1764 <= signal_shift_reg_28;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                mul_ln67_6_reg_1738 <= grp_fu_989_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                mul_ln67_8_reg_1723 <= grp_fu_955_p2;
                signal_shift_reg_24_load_reg_1717 <= signal_shift_reg_24;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                mul_ln67_reg_1821 <= grp_fu_1101_p2;
                signal_shift_reg_31 <= signal_shift_reg_30_load_reg_1790;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                mul_ln70_reg_1407 <= grp_fu_543_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((gmem_BVALID = ap_const_logic_0) or (input_r_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                p_4_0_0_0108_phi_reg_438 <= input_r_TLAST_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then
                reg_483 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then
                reg_487 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_491 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                signal_shift_reg_0 <= tmp_data_V_reg_1360;
                signal_shift_reg_1 <= signal_shift_reg_0;
                signal_shift_reg_2 <= signal_shift_reg_1;
                signal_shift_reg_3 <= signal_shift_reg_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                signal_shift_reg_10 <= signal_shift_reg_9_load_reg_1507;
                signal_shift_reg_11 <= signal_shift_reg_10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                signal_shift_reg_12 <= signal_shift_reg_11_load_reg_1533;
                signal_shift_reg_13 <= signal_shift_reg_12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                signal_shift_reg_14 <= signal_shift_reg_13_load_reg_1564;
                signal_shift_reg_15 <= signal_shift_reg_14;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                signal_shift_reg_16 <= signal_shift_reg_15_load_reg_1590;
                signal_shift_reg_17 <= signal_shift_reg_16;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                signal_shift_reg_18 <= signal_shift_reg_17_load_reg_1616;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                signal_shift_reg_19 <= signal_shift_reg_18_load_reg_1637;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                signal_shift_reg_20 <= signal_shift_reg_19_load_reg_1648;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                signal_shift_reg_21 <= signal_shift_reg_20_load_reg_1664;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                signal_shift_reg_22 <= signal_shift_reg_21_load_reg_1675;
                signal_shift_reg_23 <= signal_shift_reg_22;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                signal_shift_reg_24 <= signal_shift_reg_23_load_reg_1696;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                signal_shift_reg_25 <= signal_shift_reg_24_load_reg_1717;
                signal_shift_reg_26 <= signal_shift_reg_25;
                signal_shift_reg_27 <= signal_shift_reg_26;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                signal_shift_reg_28 <= signal_shift_reg_27_load_reg_1743;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                signal_shift_reg_29 <= signal_shift_reg_28_load_reg_1764;
                signal_shift_reg_30 <= signal_shift_reg_29;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                signal_shift_reg_4 <= signal_shift_reg_3_load_reg_1417;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                signal_shift_reg_5 <= signal_shift_reg_4_load_reg_1438;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                signal_shift_reg_6 <= signal_shift_reg_5_load_reg_1459;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                signal_shift_reg_7 <= signal_shift_reg_6_load_reg_1475;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                signal_shift_reg_8 <= signal_shift_reg_7_load_reg_1486;
                signal_shift_reg_9 <= signal_shift_reg_8;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                state_2_reg_1356 <= state_fu_218;
                tmp_data_V_reg_1360 <= input_r_TDATA_int_regslice;
                tmp_dest_V_reg_1400 <= input_r_TDEST_int_regslice;
                tmp_id_V_reg_1393 <= input_r_TID_int_regslice;
                tmp_keep_V_reg_1367 <= input_r_TKEEP_int_regslice;
                tmp_last_V_2_reg_1388 <= input_r_TLAST_int_regslice;
                tmp_strb_V_reg_1374 <= input_r_TSTRB_int_regslice;
                tmp_user_V_reg_1381 <= input_r_TUSER_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((gmem_BVALID = ap_const_logic_0) or (input_r_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state55)) or (not(((input_r_TVALID_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (state_2_load_fu_520_p1 = ap_const_lv32_11)))) then
                tmp_data_V_1_reg_427 <= input_r_TDATA_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((input_r_TVALID_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (grp_fu_479_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (state_2_load_fu_520_p1 = ap_const_lv32_0)) or (not(((ap_const_boolean_1 = ap_block_state46_io) or ((ap_predicate_op343_write_state46 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op314_write_state46 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state46) and ((not((state_2_reg_1356 = ap_const_lv32_0)) and not((state_2_reg_1356 = ap_const_lv32_1000)) and (ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 = ap_const_lv1_1)) or ((ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 = ap_const_lv1_1) and (tmp_last_V_2_reg_1388 = ap_const_lv1_1) and (state_2_reg_1356 = ap_const_lv32_1000)))))) then
                tmp_data_V_4_reg_389 <= grp_load_fu_451_p1;
                tmp_dest_V_1_reg_329 <= grp_load_fu_471_p1;
                tmp_id_V_1_reg_341 <= grp_load_fu_467_p1;
                tmp_keep_V_1_reg_377 <= grp_load_fu_455_p1;
                tmp_strb_V_1_reg_365 <= grp_load_fu_459_p1;
                tmp_user_V_1_reg_353 <= grp_load_fu_463_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_boolean_1 = ap_block_state46_io) or ((ap_predicate_op343_write_state46 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op314_write_state46 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (tmp_last_V_2_reg_1388 = ap_const_lv1_1) and (state_2_reg_1356 = ap_const_lv32_1000) and (ap_const_logic_1 = ap_CS_fsm_state46)) or (not(((ap_const_boolean_1 = ap_block_state46_io) or ((ap_predicate_op343_write_state46 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op314_write_state46 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (tmp_last_V_2_reg_1388 = ap_const_lv1_0) and (state_2_reg_1356 = ap_const_lv32_1000) and (ap_const_logic_1 = ap_CS_fsm_state46)))) then
                tmp_out_data_V_fu_194 <= accumulate_2_fu_1156_p2;
                tmp_out_dest_V_fu_214 <= tmp_dest_V_reg_1400;
                tmp_out_id_V_fu_210 <= tmp_id_V_reg_1393;
                tmp_out_keep_V_fu_198 <= tmp_keep_V_reg_1367;
                tmp_out_strb_V_fu_202 <= tmp_strb_V_reg_1374;
                tmp_out_user_V_fu_206 <= tmp_user_V_reg_1381;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state2, state_2_load_fu_520_p1, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state55, ap_CS_fsm_state46, state_2_reg_1356, tmp_last_V_2_reg_1388, ap_CS_fsm_state47, ap_phi_mux_tmp_last_V_1_phi_fu_304_p6, ap_CS_fsm_state56, gmem_AWREADY, gmem_WREADY, gmem_RVALID, gmem_BVALID, grp_fu_479_p1, ap_CS_fsm_state48, icmp_ln39_fu_1217_p2, tmp_last_V_1_reg_301, ap_block_state2_io, ap_predicate_op314_write_state46, ap_predicate_op343_write_state46, ap_block_state46_io, ap_predicate_op344_write_state47, ap_block_state47_io, state_fu_218, regslice_both_output_r_V_data_V_U_apdone_blk, output_r_TREADY_int_regslice, input_r_TVALID_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if ((not(((input_r_TVALID_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (grp_fu_479_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (state_2_load_fu_520_p1 = ap_const_lv32_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                elsif ((not(((input_r_TVALID_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (state_2_load_fu_520_p1 = ap_const_lv32_11))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                elsif ((not(((input_r_TVALID_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (((grp_fu_479_p1 = ap_const_lv1_1) and (state_2_load_fu_520_p1 = ap_const_lv32_0)) or (not((state_2_load_fu_520_p1 = ap_const_lv32_11)) and not((state_2_load_fu_520_p1 = ap_const_lv32_0)) and not((state_fu_218 = ap_const_lv32_1000)))))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                elsif ((not(((input_r_TVALID_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (state_fu_218 = ap_const_lv32_1000))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if ((not(((ap_const_boolean_1 = ap_block_state46_io) or ((ap_predicate_op343_write_state46 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op314_write_state46 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state46) and (((not((state_2_reg_1356 = ap_const_lv32_0)) and not((state_2_reg_1356 = ap_const_lv32_1000)) and (ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 = ap_const_lv1_1)) or ((ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 = ap_const_lv1_1) and (tmp_last_V_2_reg_1388 = ap_const_lv1_1))) or ((tmp_last_V_2_reg_1388 = ap_const_lv1_1) and (state_2_reg_1356 = ap_const_lv32_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                elsif ((not(((ap_const_boolean_1 = ap_block_state46_io) or ((ap_predicate_op343_write_state46 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op314_write_state46 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state46) and ((not((state_2_reg_1356 = ap_const_lv32_0)) and (ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 = ap_const_lv1_0)) or ((tmp_last_V_2_reg_1388 = ap_const_lv1_0) and (state_2_reg_1356 = ap_const_lv32_1000))))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                if ((not(((ap_const_boolean_1 = ap_block_state47_io) or ((ap_predicate_op344_write_state47 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state47) and (((not((state_2_reg_1356 = ap_const_lv32_0)) and (tmp_last_V_1_reg_301 = ap_const_lv1_0)) or ((tmp_last_V_2_reg_1388 = ap_const_lv1_0) and (state_2_reg_1356 = ap_const_lv32_1000))) or ((tmp_last_V_2_reg_1388 = ap_const_lv1_0) and (state_2_reg_1356 = ap_const_lv32_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                if (((icmp_ln39_fu_1217_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state49 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                if ((not(((gmem_BVALID = ap_const_logic_0) or (input_r_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state56 => 
                if ((not(((output_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_output_r_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    accumulate_2_fu_1156_p2 <= std_logic_vector(unsigned(add_ln70_30_reg_1841) + unsigned(add_ln70_14_fu_1152_p2));
    add_ln39_fu_1260_p2 <= std_logic_vector(unsigned(j_reg_416) + unsigned(ap_const_lv6_3F));
    add_ln40_fu_1235_p2 <= std_logic_vector(unsigned(zext_ln40_fu_1231_p1) + unsigned(coefs_read_reg_1315));
    add_ln70_10_fu_814_p2 <= std_logic_vector(unsigned(mul_ln67_19_reg_1585) + unsigned(mul_ln67_18_reg_1580));
    add_ln70_11_fu_780_p2 <= std_logic_vector(unsigned(mul_ln67_21_reg_1554) + unsigned(mul_ln67_20_reg_1549));
    add_ln70_12_fu_818_p2 <= std_logic_vector(unsigned(add_ln70_11_reg_1575) + unsigned(add_ln70_10_fu_814_p2));
    add_ln70_13_fu_894_p2 <= std_logic_vector(unsigned(add_ln70_12_reg_1601) + unsigned(add_ln70_9_fu_889_p2));
    add_ln70_14_fu_1152_p2 <= std_logic_vector(unsigned(add_ln70_13_reg_1659) + unsigned(add_ln70_6_reg_1559));
    add_ln70_15_fu_1134_p2 <= std_logic_vector(unsigned(mul_ln70_reg_1407) + unsigned(accumulate_reg_1826));
    add_ln70_16_fu_1130_p2 <= std_logic_vector(unsigned(mul_ln67_1_reg_1806) + unsigned(mul_ln67_reg_1821));
    add_ln70_17_fu_1138_p2 <= std_logic_vector(unsigned(add_ln70_16_reg_1831) + unsigned(add_ln70_15_fu_1134_p2));
    add_ln70_18_fu_1106_p2 <= std_logic_vector(unsigned(mul_ln67_3_reg_1780) + unsigned(mul_ln67_2_reg_1801));
    add_ln70_19_fu_1072_p2 <= std_logic_vector(unsigned(mul_ln67_5_reg_1775) + unsigned(mul_ln67_4_reg_1770));
    add_ln70_1_fu_664_p2 <= std_logic_vector(unsigned(mul_ln67_27_reg_1465) + unsigned(mul_ln67_26_reg_1481));
    add_ln70_20_fu_1110_p2 <= std_logic_vector(unsigned(add_ln70_19_reg_1785) + unsigned(add_ln70_18_fu_1106_p2));
    add_ln70_21_fu_1143_p2 <= std_logic_vector(unsigned(add_ln70_20_reg_1811) + unsigned(add_ln70_17_reg_1836));
    add_ln70_22_fu_1039_p2 <= std_logic_vector(unsigned(mul_ln67_7_reg_1728) + unsigned(mul_ln67_6_reg_1738));
    add_ln70_23_fu_994_p2 <= std_logic_vector(unsigned(mul_ln67_9_reg_1707) + unsigned(mul_ln67_8_reg_1723));
    add_ln70_24_fu_1043_p2 <= std_logic_vector(unsigned(add_ln70_23_reg_1733) + unsigned(add_ln70_22_fu_1039_p2));
    add_ln70_25_fu_966_p2 <= std_logic_vector(unsigned(mul_ln67_11_reg_1681) + unsigned(mul_ln67_10_reg_1691));
    add_ln70_26_fu_927_p2 <= std_logic_vector(unsigned(mul_ln67_12_reg_1670) + unsigned(mul_ln67_30_reg_1454));
    add_ln70_27_fu_931_p2 <= std_logic_vector(unsigned(add_ln70_26_fu_927_p2) + unsigned(mul_ln67_13_reg_1654));
    add_ln70_28_fu_970_p2 <= std_logic_vector(unsigned(add_ln70_27_reg_1686) + unsigned(add_ln70_25_fu_966_p2));
    add_ln70_29_fu_1048_p2 <= std_logic_vector(unsigned(add_ln70_28_reg_1712) + unsigned(add_ln70_24_fu_1043_p2));
    add_ln70_2_fu_741_p2 <= std_logic_vector(unsigned(add_ln70_1_reg_1497) + unsigned(add_ln70_reg_1470));
    add_ln70_30_fu_1147_p2 <= std_logic_vector(unsigned(add_ln70_29_reg_1759) + unsigned(add_ln70_21_fu_1143_p2));
    add_ln70_3_fu_732_p2 <= std_logic_vector(unsigned(mul_ln67_23_reg_1528) + unsigned(mul_ln67_22_reg_1523));
    add_ln70_4_fu_698_p2 <= std_logic_vector(unsigned(mul_ln67_25_reg_1492) + unsigned(mul_ln67_24_reg_1502));
    add_ln70_5_fu_736_p2 <= std_logic_vector(unsigned(add_ln70_4_reg_1518) + unsigned(add_ln70_3_fu_732_p2));
    add_ln70_6_fu_745_p2 <= std_logic_vector(unsigned(add_ln70_5_reg_1544) + unsigned(add_ln70_2_fu_741_p2));
    add_ln70_7_fu_885_p2 <= std_logic_vector(unsigned(mul_ln67_15_reg_1627) + unsigned(mul_ln67_14_reg_1643));
    add_ln70_8_fu_853_p2 <= std_logic_vector(unsigned(mul_ln67_17_reg_1611) + unsigned(mul_ln67_16_reg_1606));
    add_ln70_9_fu_889_p2 <= std_logic_vector(unsigned(add_ln70_8_reg_1632) + unsigned(add_ln70_7_fu_885_p2));
    add_ln70_fu_632_p2 <= std_logic_vector(unsigned(mul_ln67_28_reg_1444) + unsigned(mul_ln67_29_reg_1449));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state11_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state12_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state13_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state14_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state15_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state16_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state17_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state17_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state17_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state18_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state18_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state18_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state19_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state19_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state19_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state1_blk <= ap_const_logic_0;

    ap_ST_fsm_state20_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state20_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state20_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state21_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state21_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state21_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state22_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state22_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state22_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state23_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state23_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state23_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state24_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state24_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state24_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state25_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state25_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state25_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state26_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state26_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state26_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state27_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state27_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state27_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state28_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state28_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state28_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state29_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state29_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state29_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2_io, input_r_TVALID_int_regslice)
    begin
        if (((input_r_TVALID_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state30_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state30_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state30_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state31_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state31_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state31_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state32_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state32_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state32_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state33_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state33_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state33_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state34_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state34_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state34_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state35_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state35_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state35_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state36_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state36_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state36_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state37_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state37_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state37_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state38_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state38_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state38_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state39_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state39_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state39_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state40_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state40_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state40_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state41_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state41_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state41_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;

    ap_ST_fsm_state46_blk_assign_proc : process(ap_predicate_op314_write_state46, ap_predicate_op343_write_state46, ap_block_state46_io, output_r_TREADY_int_regslice)
    begin
        if (((ap_const_boolean_1 = ap_block_state46_io) or ((ap_predicate_op343_write_state46 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op314_write_state46 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) then 
            ap_ST_fsm_state46_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state46_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state47_blk_assign_proc : process(ap_predicate_op344_write_state47, ap_block_state47_io, output_r_TREADY_int_regslice)
    begin
        if (((ap_const_boolean_1 = ap_block_state47_io) or ((ap_predicate_op344_write_state47 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) then 
            ap_ST_fsm_state47_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state47_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state48_blk <= ap_const_logic_0;

    ap_ST_fsm_state49_blk_assign_proc : process(gmem_AWREADY)
    begin
        if ((gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state49_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state49_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state50_blk_assign_proc : process(gmem_WREADY)
    begin
        if ((gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state50_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state50_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;

    ap_ST_fsm_state55_blk_assign_proc : process(gmem_BVALID, input_r_TVALID_int_regslice)
    begin
        if (((gmem_BVALID = ap_const_logic_0) or (input_r_TVALID_int_regslice = ap_const_logic_0))) then 
            ap_ST_fsm_state55_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state55_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state56_blk_assign_proc : process(regslice_both_output_r_V_data_V_U_apdone_blk, output_r_TREADY_int_regslice)
    begin
        if (((output_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_output_r_V_data_V_U_apdone_blk = ap_const_logic_1))) then 
            ap_ST_fsm_state56_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state56_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_ST_fsm_state9_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state2_io_assign_proc : process(gmem_ARREADY, state_fu_218)
    begin
                ap_block_state2_io <= ((gmem_ARREADY = ap_const_logic_0) and (state_fu_218 = ap_const_lv32_1000));
    end process;


    ap_block_state46_assign_proc : process(ap_predicate_op314_write_state46, ap_predicate_op343_write_state46, output_r_TREADY_int_regslice)
    begin
                ap_block_state46 <= (((ap_predicate_op343_write_state46 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op314_write_state46 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state46_io_assign_proc : process(ap_predicate_op314_write_state46, ap_predicate_op343_write_state46, output_r_TREADY_int_regslice)
    begin
                ap_block_state46_io <= (((ap_predicate_op343_write_state46 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op314_write_state46 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state47_assign_proc : process(ap_predicate_op344_write_state47, output_r_TREADY_int_regslice)
    begin
                ap_block_state47 <= ((ap_predicate_op344_write_state47 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state47_io_assign_proc : process(ap_predicate_op344_write_state47, output_r_TREADY_int_regslice)
    begin
                ap_block_state47_io <= ((ap_predicate_op344_write_state47 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state55_assign_proc : process(gmem_BVALID, input_r_TVALID_int_regslice)
    begin
                ap_block_state55 <= ((gmem_BVALID = ap_const_logic_0) or (input_r_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state56_assign_proc : process(regslice_both_output_r_V_data_V_U_apdone_blk, output_r_TREADY_int_regslice)
    begin
                ap_block_state56 <= ((output_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_output_r_V_data_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_condition_1749_assign_proc : process(ap_CS_fsm_state46, ap_predicate_op314_write_state46, ap_predicate_op343_write_state46, output_r_TREADY_int_regslice)
    begin
                ap_condition_1749 <= (not((((ap_predicate_op343_write_state46 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op314_write_state46 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state46));
    end process;


    ap_phi_mux_state_1233_phi_fu_405_p6_assign_proc : process(state_2_reg_1356, tmp_last_V_2_reg_1388, ap_CS_fsm_state47, state_1233_reg_401)
    begin
        if (((tmp_last_V_2_reg_1388 = ap_const_lv1_0) and (state_2_reg_1356 = ap_const_lv32_1000) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            ap_phi_mux_state_1233_phi_fu_405_p6 <= ap_const_lv32_1000;
        else 
            ap_phi_mux_state_1233_phi_fu_405_p6 <= state_1233_reg_401;
        end if; 
    end process;


    ap_phi_mux_state_1_phi_fu_318_p6_assign_proc : process(ap_CS_fsm_state46, state_2_reg_1356, tmp_last_V_2_reg_1388, state_1_reg_314)
    begin
        if (((tmp_last_V_2_reg_1388 = ap_const_lv1_1) and (state_2_reg_1356 = ap_const_lv32_1000) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            ap_phi_mux_state_1_phi_fu_318_p6 <= ap_const_lv32_1000;
        else 
            ap_phi_mux_state_1_phi_fu_318_p6 <= state_1_reg_314;
        end if; 
    end process;


    ap_phi_mux_tmp_data_V_4_phi_fu_393_p4_assign_proc : process(ap_CS_fsm_state46, state_2_reg_1356, tmp_last_V_2_reg_1388, ap_phi_mux_tmp_last_V_1_phi_fu_304_p6, grp_load_fu_451_p1, tmp_data_V_4_reg_389)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) and ((not((state_2_reg_1356 = ap_const_lv32_0)) and not((state_2_reg_1356 = ap_const_lv32_1000)) and (ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 = ap_const_lv1_1)) or ((ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 = ap_const_lv1_1) and (tmp_last_V_2_reg_1388 = ap_const_lv1_1) and (state_2_reg_1356 = ap_const_lv32_1000))))) then 
            ap_phi_mux_tmp_data_V_4_phi_fu_393_p4 <= grp_load_fu_451_p1;
        else 
            ap_phi_mux_tmp_data_V_4_phi_fu_393_p4 <= tmp_data_V_4_reg_389;
        end if; 
    end process;


    ap_phi_mux_tmp_dest_V_1_phi_fu_333_p4_assign_proc : process(ap_CS_fsm_state46, state_2_reg_1356, tmp_last_V_2_reg_1388, ap_phi_mux_tmp_last_V_1_phi_fu_304_p6, grp_load_fu_471_p1, tmp_dest_V_1_reg_329)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) and ((not((state_2_reg_1356 = ap_const_lv32_0)) and not((state_2_reg_1356 = ap_const_lv32_1000)) and (ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 = ap_const_lv1_1)) or ((ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 = ap_const_lv1_1) and (tmp_last_V_2_reg_1388 = ap_const_lv1_1) and (state_2_reg_1356 = ap_const_lv32_1000))))) then 
            ap_phi_mux_tmp_dest_V_1_phi_fu_333_p4 <= grp_load_fu_471_p1;
        else 
            ap_phi_mux_tmp_dest_V_1_phi_fu_333_p4 <= tmp_dest_V_1_reg_329;
        end if; 
    end process;


    ap_phi_mux_tmp_id_V_1_phi_fu_345_p4_assign_proc : process(ap_CS_fsm_state46, state_2_reg_1356, tmp_last_V_2_reg_1388, ap_phi_mux_tmp_last_V_1_phi_fu_304_p6, grp_load_fu_467_p1, tmp_id_V_1_reg_341)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) and ((not((state_2_reg_1356 = ap_const_lv32_0)) and not((state_2_reg_1356 = ap_const_lv32_1000)) and (ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 = ap_const_lv1_1)) or ((ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 = ap_const_lv1_1) and (tmp_last_V_2_reg_1388 = ap_const_lv1_1) and (state_2_reg_1356 = ap_const_lv32_1000))))) then 
            ap_phi_mux_tmp_id_V_1_phi_fu_345_p4 <= grp_load_fu_467_p1;
        else 
            ap_phi_mux_tmp_id_V_1_phi_fu_345_p4 <= tmp_id_V_1_reg_341;
        end if; 
    end process;


    ap_phi_mux_tmp_keep_V_1_phi_fu_381_p4_assign_proc : process(ap_CS_fsm_state46, state_2_reg_1356, tmp_last_V_2_reg_1388, ap_phi_mux_tmp_last_V_1_phi_fu_304_p6, grp_load_fu_455_p1, tmp_keep_V_1_reg_377)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) and ((not((state_2_reg_1356 = ap_const_lv32_0)) and not((state_2_reg_1356 = ap_const_lv32_1000)) and (ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 = ap_const_lv1_1)) or ((ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 = ap_const_lv1_1) and (tmp_last_V_2_reg_1388 = ap_const_lv1_1) and (state_2_reg_1356 = ap_const_lv32_1000))))) then 
            ap_phi_mux_tmp_keep_V_1_phi_fu_381_p4 <= grp_load_fu_455_p1;
        else 
            ap_phi_mux_tmp_keep_V_1_phi_fu_381_p4 <= tmp_keep_V_1_reg_377;
        end if; 
    end process;


    ap_phi_mux_tmp_last_V_1_phi_fu_304_p6_assign_proc : process(ap_CS_fsm_state46, state_2_reg_1356, tmp_last_V_2_reg_1388, tmp_last_V_1_reg_301)
    begin
        if (((tmp_last_V_2_reg_1388 = ap_const_lv1_1) and (state_2_reg_1356 = ap_const_lv32_1000) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 <= ap_const_lv1_1;
        else 
            ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 <= tmp_last_V_1_reg_301;
        end if; 
    end process;


    ap_phi_mux_tmp_strb_V_1_phi_fu_369_p4_assign_proc : process(ap_CS_fsm_state46, state_2_reg_1356, tmp_last_V_2_reg_1388, ap_phi_mux_tmp_last_V_1_phi_fu_304_p6, grp_load_fu_459_p1, tmp_strb_V_1_reg_365)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) and ((not((state_2_reg_1356 = ap_const_lv32_0)) and not((state_2_reg_1356 = ap_const_lv32_1000)) and (ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 = ap_const_lv1_1)) or ((ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 = ap_const_lv1_1) and (tmp_last_V_2_reg_1388 = ap_const_lv1_1) and (state_2_reg_1356 = ap_const_lv32_1000))))) then 
            ap_phi_mux_tmp_strb_V_1_phi_fu_369_p4 <= grp_load_fu_459_p1;
        else 
            ap_phi_mux_tmp_strb_V_1_phi_fu_369_p4 <= tmp_strb_V_1_reg_365;
        end if; 
    end process;


    ap_phi_mux_tmp_user_V_1_phi_fu_357_p4_assign_proc : process(ap_CS_fsm_state46, state_2_reg_1356, tmp_last_V_2_reg_1388, ap_phi_mux_tmp_last_V_1_phi_fu_304_p6, grp_load_fu_463_p1, tmp_user_V_1_reg_353)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) and ((not((state_2_reg_1356 = ap_const_lv32_0)) and not((state_2_reg_1356 = ap_const_lv32_1000)) and (ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 = ap_const_lv1_1)) or ((ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 = ap_const_lv1_1) and (tmp_last_V_2_reg_1388 = ap_const_lv1_1) and (state_2_reg_1356 = ap_const_lv32_1000))))) then 
            ap_phi_mux_tmp_user_V_1_phi_fu_357_p4 <= grp_load_fu_463_p1;
        else 
            ap_phi_mux_tmp_user_V_1_phi_fu_357_p4 <= tmp_user_V_1_reg_353;
        end if; 
    end process;


    ap_predicate_op314_write_state46_assign_proc : process(state_2_reg_1356, tmp_last_V_2_reg_1388)
    begin
                ap_predicate_op314_write_state46 <= ((tmp_last_V_2_reg_1388 = ap_const_lv1_0) and (state_2_reg_1356 = ap_const_lv32_1000));
    end process;


    ap_predicate_op343_write_state46_assign_proc : process(state_2_reg_1356, tmp_last_V_2_reg_1388, ap_phi_mux_tmp_last_V_1_phi_fu_304_p6)
    begin
                ap_predicate_op343_write_state46 <= (((not((state_2_reg_1356 = ap_const_lv32_0)) and not((state_2_reg_1356 = ap_const_lv32_1000)) and (ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 = ap_const_lv1_1)) or ((ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 = ap_const_lv1_1) and (tmp_last_V_2_reg_1388 = ap_const_lv1_1))) or ((tmp_last_V_2_reg_1388 = ap_const_lv1_1) and (state_2_reg_1356 = ap_const_lv32_0)));
    end process;


    ap_predicate_op344_write_state47_assign_proc : process(state_2_reg_1356, tmp_last_V_2_reg_1388)
    begin
                ap_predicate_op344_write_state47 <= ((tmp_last_V_2_reg_1388 = ap_const_lv1_0) and (state_2_reg_1356 = ap_const_lv32_1000));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_allocacmp_tmp_out_data_V_4_assign_proc : process(ap_CS_fsm_state46, state_2_reg_1356, tmp_last_V_2_reg_1388, accumulate_2_fu_1156_p2, tmp_out_data_V_fu_194)
    begin
        if (((tmp_last_V_2_reg_1388 = ap_const_lv1_1) and (state_2_reg_1356 = ap_const_lv32_1000) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            ap_sig_allocacmp_tmp_out_data_V_4 <= accumulate_2_fu_1156_p2;
        else 
            ap_sig_allocacmp_tmp_out_data_V_4 <= tmp_out_data_V_fu_194;
        end if; 
    end process;


    ap_sig_allocacmp_tmp_out_dest_V_4_assign_proc : process(ap_CS_fsm_state46, state_2_reg_1356, tmp_last_V_2_reg_1388, tmp_dest_V_reg_1400, tmp_out_dest_V_fu_214)
    begin
        if (((tmp_last_V_2_reg_1388 = ap_const_lv1_1) and (state_2_reg_1356 = ap_const_lv32_1000) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            ap_sig_allocacmp_tmp_out_dest_V_4 <= tmp_dest_V_reg_1400;
        else 
            ap_sig_allocacmp_tmp_out_dest_V_4 <= tmp_out_dest_V_fu_214;
        end if; 
    end process;


    ap_sig_allocacmp_tmp_out_id_V_4_assign_proc : process(ap_CS_fsm_state46, state_2_reg_1356, tmp_last_V_2_reg_1388, tmp_id_V_reg_1393, tmp_out_id_V_fu_210)
    begin
        if (((tmp_last_V_2_reg_1388 = ap_const_lv1_1) and (state_2_reg_1356 = ap_const_lv32_1000) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            ap_sig_allocacmp_tmp_out_id_V_4 <= tmp_id_V_reg_1393;
        else 
            ap_sig_allocacmp_tmp_out_id_V_4 <= tmp_out_id_V_fu_210;
        end if; 
    end process;


    ap_sig_allocacmp_tmp_out_keep_V_4_assign_proc : process(ap_CS_fsm_state46, state_2_reg_1356, tmp_last_V_2_reg_1388, tmp_keep_V_reg_1367, tmp_out_keep_V_fu_198)
    begin
        if (((tmp_last_V_2_reg_1388 = ap_const_lv1_1) and (state_2_reg_1356 = ap_const_lv32_1000) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            ap_sig_allocacmp_tmp_out_keep_V_4 <= tmp_keep_V_reg_1367;
        else 
            ap_sig_allocacmp_tmp_out_keep_V_4 <= tmp_out_keep_V_fu_198;
        end if; 
    end process;


    ap_sig_allocacmp_tmp_out_strb_V_4_assign_proc : process(ap_CS_fsm_state46, state_2_reg_1356, tmp_last_V_2_reg_1388, tmp_strb_V_reg_1374, tmp_out_strb_V_fu_202)
    begin
        if (((tmp_last_V_2_reg_1388 = ap_const_lv1_1) and (state_2_reg_1356 = ap_const_lv32_1000) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            ap_sig_allocacmp_tmp_out_strb_V_4 <= tmp_strb_V_reg_1374;
        else 
            ap_sig_allocacmp_tmp_out_strb_V_4 <= tmp_out_strb_V_fu_202;
        end if; 
    end process;


    ap_sig_allocacmp_tmp_out_user_V_4_assign_proc : process(ap_CS_fsm_state46, state_2_reg_1356, tmp_last_V_2_reg_1388, tmp_user_V_reg_1381, tmp_out_user_V_fu_206)
    begin
        if (((tmp_last_V_2_reg_1388 = ap_const_lv1_1) and (state_2_reg_1356 = ap_const_lv32_1000) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            ap_sig_allocacmp_tmp_out_user_V_4 <= tmp_user_V_reg_1381;
        else 
            ap_sig_allocacmp_tmp_out_user_V_4 <= tmp_out_user_V_fu_206;
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_io, state_fu_218, input_r_TVALID_int_regslice)
    begin
        if ((not(((input_r_TVALID_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (state_fu_218 = ap_const_lv32_1000))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state49, gmem_AWREADY)
    begin
        if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state55, gmem_BVALID, input_r_TVALID_int_regslice)
    begin
        if ((not(((gmem_BVALID = ap_const_logic_0) or (input_r_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state50, gmem_WREADY)
    begin
        if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state2, state_fu_218)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (state_fu_218 = ap_const_lv32_1000))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_1012_ce_assign_proc : process(ap_CS_fsm_state37, ap_CS_fsm_state38, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37)))) then 
            grp_fu_1012_ce <= ap_const_logic_1;
        else 
            grp_fu_1012_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1028_ce_assign_proc : process(ap_CS_fsm_state37, ap_CS_fsm_state38, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37)))) then 
            grp_fu_1028_ce <= ap_const_logic_1;
        else 
            grp_fu_1028_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1062_ce_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state39, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then 
            grp_fu_1062_ce <= ap_const_logic_1;
        else 
            grp_fu_1062_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1067_ce_assign_proc : process(ap_CS_fsm_state39, ap_CS_fsm_state40, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            grp_fu_1067_ce <= ap_const_logic_1;
        else 
            grp_fu_1067_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1090_ce_assign_proc : process(ap_CS_fsm_state40, ap_CS_fsm_state41, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40)))) then 
            grp_fu_1090_ce <= ap_const_logic_1;
        else 
            grp_fu_1090_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1101_ce_assign_proc : process(ap_CS_fsm_state41, gmem_RVALID, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)))) then 
            grp_fu_1101_ce <= ap_const_logic_1;
        else 
            grp_fu_1101_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_479_p1 <= input_r_TLAST_int_regslice;

    grp_fu_543_ce_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            grp_fu_543_ce <= ap_const_logic_1;
        else 
            grp_fu_543_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_562_ce_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            grp_fu_562_ce <= ap_const_logic_1;
        else 
            grp_fu_562_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_578_ce_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            grp_fu_578_ce <= ap_const_logic_1;
        else 
            grp_fu_578_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_594_ce_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            grp_fu_594_ce <= ap_const_logic_1;
        else 
            grp_fu_594_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_614_ce_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state15, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            grp_fu_614_ce <= ap_const_logic_1;
        else 
            grp_fu_614_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_627_ce_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            grp_fu_627_ce <= ap_const_logic_1;
        else 
            grp_fu_627_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_645_ce_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state17, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            grp_fu_645_ce <= ap_const_logic_1;
        else 
            grp_fu_645_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_659_ce_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            grp_fu_659_ce <= ap_const_logic_1;
        else 
            grp_fu_659_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_682_ce_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state20, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
            grp_fu_682_ce <= ap_const_logic_1;
        else 
            grp_fu_682_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_693_ce_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state20, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
            grp_fu_693_ce <= ap_const_logic_1;
        else 
            grp_fu_693_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_716_ce_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state22, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            grp_fu_716_ce <= ap_const_logic_1;
        else 
            grp_fu_716_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_727_ce_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state22, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            grp_fu_727_ce <= ap_const_logic_1;
        else 
            grp_fu_727_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_764_ce_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state24, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            grp_fu_764_ce <= ap_const_logic_1;
        else 
            grp_fu_764_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_775_ce_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state24, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            grp_fu_775_ce <= ap_const_logic_1;
        else 
            grp_fu_775_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_798_ce_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state26, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)))) then 
            grp_fu_798_ce <= ap_const_logic_1;
        else 
            grp_fu_798_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_809_ce_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state26, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)))) then 
            grp_fu_809_ce <= ap_const_logic_1;
        else 
            grp_fu_809_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_823_ce_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state27, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26)))) then 
            grp_fu_823_ce <= ap_const_logic_1;
        else 
            grp_fu_823_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_842_ce_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27)))) then 
            grp_fu_842_ce <= ap_const_logic_1;
        else 
            grp_fu_842_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_866_ce_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state29, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28)))) then 
            grp_fu_866_ce <= ap_const_logic_1;
        else 
            grp_fu_866_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_880_ce_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state30, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29)))) then 
            grp_fu_880_ce <= ap_const_logic_1;
        else 
            grp_fu_880_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_908_ce_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state31, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
            grp_fu_908_ce <= ap_const_logic_1;
        else 
            grp_fu_908_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_922_ce_assign_proc : process(ap_CS_fsm_state31, ap_CS_fsm_state32, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31)))) then 
            grp_fu_922_ce <= ap_const_logic_1;
        else 
            grp_fu_922_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_936_ce_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            grp_fu_936_ce <= ap_const_logic_1;
        else 
            grp_fu_936_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_955_ce_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state34, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33)))) then 
            grp_fu_955_ce <= ap_const_logic_1;
        else 
            grp_fu_955_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_984_ce_assign_proc : process(ap_CS_fsm_state34, ap_CS_fsm_state35, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34)))) then 
            grp_fu_984_ce <= ap_const_logic_1;
        else 
            grp_fu_984_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_989_ce_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state36, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35)))) then 
            grp_fu_989_ce <= ap_const_logic_1;
        else 
            grp_fu_989_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_load_fu_451_p1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state46, state_2_reg_1356, tmp_last_V_2_reg_1388, tmp_out_data_V_fu_194, ap_sig_allocacmp_tmp_out_data_V_4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) and ((not((state_2_reg_1356 = ap_const_lv32_0)) and not((state_2_reg_1356 = ap_const_lv32_1000))) or ((tmp_last_V_2_reg_1388 = ap_const_lv1_1) and (state_2_reg_1356 = ap_const_lv32_1000))))) then 
            grp_load_fu_451_p1 <= ap_sig_allocacmp_tmp_out_data_V_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_load_fu_451_p1 <= tmp_out_data_V_fu_194;
        else 
            grp_load_fu_451_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_load_fu_455_p1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state46, state_2_reg_1356, tmp_last_V_2_reg_1388, tmp_out_keep_V_fu_198, ap_sig_allocacmp_tmp_out_keep_V_4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) and ((not((state_2_reg_1356 = ap_const_lv32_0)) and not((state_2_reg_1356 = ap_const_lv32_1000))) or ((tmp_last_V_2_reg_1388 = ap_const_lv1_1) and (state_2_reg_1356 = ap_const_lv32_1000))))) then 
            grp_load_fu_455_p1 <= ap_sig_allocacmp_tmp_out_keep_V_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_load_fu_455_p1 <= tmp_out_keep_V_fu_198;
        else 
            grp_load_fu_455_p1 <= "XXXX";
        end if; 
    end process;


    grp_load_fu_459_p1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state46, state_2_reg_1356, tmp_last_V_2_reg_1388, tmp_out_strb_V_fu_202, ap_sig_allocacmp_tmp_out_strb_V_4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) and ((not((state_2_reg_1356 = ap_const_lv32_0)) and not((state_2_reg_1356 = ap_const_lv32_1000))) or ((tmp_last_V_2_reg_1388 = ap_const_lv1_1) and (state_2_reg_1356 = ap_const_lv32_1000))))) then 
            grp_load_fu_459_p1 <= ap_sig_allocacmp_tmp_out_strb_V_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_load_fu_459_p1 <= tmp_out_strb_V_fu_202;
        else 
            grp_load_fu_459_p1 <= "XXXX";
        end if; 
    end process;


    grp_load_fu_463_p1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state46, state_2_reg_1356, tmp_last_V_2_reg_1388, tmp_out_user_V_fu_206, ap_sig_allocacmp_tmp_out_user_V_4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) and ((not((state_2_reg_1356 = ap_const_lv32_0)) and not((state_2_reg_1356 = ap_const_lv32_1000))) or ((tmp_last_V_2_reg_1388 = ap_const_lv1_1) and (state_2_reg_1356 = ap_const_lv32_1000))))) then 
            grp_load_fu_463_p1 <= ap_sig_allocacmp_tmp_out_user_V_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_load_fu_463_p1 <= tmp_out_user_V_fu_206;
        else 
            grp_load_fu_463_p1 <= "X";
        end if; 
    end process;


    grp_load_fu_467_p1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state46, state_2_reg_1356, tmp_last_V_2_reg_1388, tmp_out_id_V_fu_210, ap_sig_allocacmp_tmp_out_id_V_4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) and ((not((state_2_reg_1356 = ap_const_lv32_0)) and not((state_2_reg_1356 = ap_const_lv32_1000))) or ((tmp_last_V_2_reg_1388 = ap_const_lv1_1) and (state_2_reg_1356 = ap_const_lv32_1000))))) then 
            grp_load_fu_467_p1 <= ap_sig_allocacmp_tmp_out_id_V_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_load_fu_467_p1 <= tmp_out_id_V_fu_210;
        else 
            grp_load_fu_467_p1 <= "X";
        end if; 
    end process;


    grp_load_fu_471_p1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state46, state_2_reg_1356, tmp_last_V_2_reg_1388, tmp_out_dest_V_fu_214, ap_sig_allocacmp_tmp_out_dest_V_4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) and ((not((state_2_reg_1356 = ap_const_lv32_0)) and not((state_2_reg_1356 = ap_const_lv32_1000))) or ((tmp_last_V_2_reg_1388 = ap_const_lv1_1) and (state_2_reg_1356 = ap_const_lv32_1000))))) then 
            grp_load_fu_471_p1 <= ap_sig_allocacmp_tmp_out_dest_V_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_load_fu_471_p1 <= tmp_out_dest_V_fu_214;
        else 
            grp_load_fu_471_p1 <= "X";
        end if; 
    end process;

    icmp_ln39_fu_1217_p2 <= "1" when (j_reg_416 = ap_const_lv6_0) else "0";

    input_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state55, input_r_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            input_r_TDATA_blk_n <= input_r_TVALID_int_regslice;
        else 
            input_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input_r_TREADY <= regslice_both_input_r_V_data_V_U_ack_in;

    input_r_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state55, gmem_BVALID, ap_block_state2_io, input_r_TVALID_int_regslice)
    begin
        if (((not(((gmem_BVALID = ap_const_logic_0) or (input_r_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state55)) or (not(((input_r_TVALID_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            input_r_TREADY_int_regslice <= ap_const_logic_1;
        else 
            input_r_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    output_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state46, state_2_reg_1356, tmp_last_V_2_reg_1388, ap_CS_fsm_state47, ap_phi_mux_tmp_last_V_1_phi_fu_304_p6, ap_CS_fsm_state56, output_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or ((tmp_last_V_2_reg_1388 = ap_const_lv1_0) and (state_2_reg_1356 = ap_const_lv32_1000) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((tmp_last_V_2_reg_1388 = ap_const_lv1_0) and (state_2_reg_1356 = ap_const_lv32_1000) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((ap_const_logic_1 = ap_CS_fsm_state46) and (((not((state_2_reg_1356 = ap_const_lv32_0)) and not((state_2_reg_1356 = ap_const_lv32_1000)) and (ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 = ap_const_lv1_1)) or ((ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 = ap_const_lv1_1) and (tmp_last_V_2_reg_1388 = ap_const_lv1_1))) or ((tmp_last_V_2_reg_1388 = ap_const_lv1_1) and (state_2_reg_1356 = ap_const_lv32_0)))))) then 
            output_r_TDATA_blk_n <= output_r_TREADY_int_regslice;
        else 
            output_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    output_r_TDATA_int_regslice_assign_proc : process(accumulate_2_fu_1156_p2, ap_predicate_op314_write_state46, ap_predicate_op343_write_state46, ap_phi_mux_tmp_data_V_4_phi_fu_393_p4, ap_condition_1749)
    begin
        if ((ap_const_boolean_1 = ap_condition_1749)) then
            if ((ap_predicate_op343_write_state46 = ap_const_boolean_1)) then 
                output_r_TDATA_int_regslice <= ap_phi_mux_tmp_data_V_4_phi_fu_393_p4;
            elsif ((ap_predicate_op314_write_state46 = ap_const_boolean_1)) then 
                output_r_TDATA_int_regslice <= accumulate_2_fu_1156_p2;
            else 
                output_r_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            output_r_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_TDEST_int_regslice_assign_proc : process(tmp_dest_V_reg_1400, ap_predicate_op314_write_state46, ap_predicate_op343_write_state46, ap_phi_mux_tmp_dest_V_1_phi_fu_333_p4, ap_condition_1749)
    begin
        if ((ap_const_boolean_1 = ap_condition_1749)) then
            if ((ap_predicate_op343_write_state46 = ap_const_boolean_1)) then 
                output_r_TDEST_int_regslice <= ap_phi_mux_tmp_dest_V_1_phi_fu_333_p4;
            elsif ((ap_predicate_op314_write_state46 = ap_const_boolean_1)) then 
                output_r_TDEST_int_regslice <= tmp_dest_V_reg_1400;
            else 
                output_r_TDEST_int_regslice <= "X";
            end if;
        else 
            output_r_TDEST_int_regslice <= "X";
        end if; 
    end process;


    output_r_TID_int_regslice_assign_proc : process(tmp_id_V_reg_1393, ap_predicate_op314_write_state46, ap_predicate_op343_write_state46, ap_phi_mux_tmp_id_V_1_phi_fu_345_p4, ap_condition_1749)
    begin
        if ((ap_const_boolean_1 = ap_condition_1749)) then
            if ((ap_predicate_op343_write_state46 = ap_const_boolean_1)) then 
                output_r_TID_int_regslice <= ap_phi_mux_tmp_id_V_1_phi_fu_345_p4;
            elsif ((ap_predicate_op314_write_state46 = ap_const_boolean_1)) then 
                output_r_TID_int_regslice <= tmp_id_V_reg_1393;
            else 
                output_r_TID_int_regslice <= "X";
            end if;
        else 
            output_r_TID_int_regslice <= "X";
        end if; 
    end process;


    output_r_TKEEP_int_regslice_assign_proc : process(tmp_keep_V_reg_1367, ap_predicate_op314_write_state46, ap_predicate_op343_write_state46, ap_phi_mux_tmp_keep_V_1_phi_fu_381_p4, ap_condition_1749)
    begin
        if ((ap_const_boolean_1 = ap_condition_1749)) then
            if ((ap_predicate_op343_write_state46 = ap_const_boolean_1)) then 
                output_r_TKEEP_int_regslice <= ap_phi_mux_tmp_keep_V_1_phi_fu_381_p4;
            elsif ((ap_predicate_op314_write_state46 = ap_const_boolean_1)) then 
                output_r_TKEEP_int_regslice <= tmp_keep_V_reg_1367;
            else 
                output_r_TKEEP_int_regslice <= "XXXX";
            end if;
        else 
            output_r_TKEEP_int_regslice <= "XXXX";
        end if; 
    end process;


    output_r_TLAST_int_regslice_assign_proc : process(ap_predicate_op314_write_state46, ap_predicate_op343_write_state46, ap_condition_1749)
    begin
        if ((ap_const_boolean_1 = ap_condition_1749)) then
            if ((ap_predicate_op343_write_state46 = ap_const_boolean_1)) then 
                output_r_TLAST_int_regslice <= ap_const_lv1_1;
            elsif ((ap_predicate_op314_write_state46 = ap_const_boolean_1)) then 
                output_r_TLAST_int_regslice <= ap_const_lv1_0;
            else 
                output_r_TLAST_int_regslice <= "X";
            end if;
        else 
            output_r_TLAST_int_regslice <= "X";
        end if; 
    end process;


    output_r_TSTRB_int_regslice_assign_proc : process(tmp_strb_V_reg_1374, ap_predicate_op314_write_state46, ap_predicate_op343_write_state46, ap_phi_mux_tmp_strb_V_1_phi_fu_369_p4, ap_condition_1749)
    begin
        if ((ap_const_boolean_1 = ap_condition_1749)) then
            if ((ap_predicate_op343_write_state46 = ap_const_boolean_1)) then 
                output_r_TSTRB_int_regslice <= ap_phi_mux_tmp_strb_V_1_phi_fu_369_p4;
            elsif ((ap_predicate_op314_write_state46 = ap_const_boolean_1)) then 
                output_r_TSTRB_int_regslice <= tmp_strb_V_reg_1374;
            else 
                output_r_TSTRB_int_regslice <= "XXXX";
            end if;
        else 
            output_r_TSTRB_int_regslice <= "XXXX";
        end if; 
    end process;


    output_r_TUSER_int_regslice_assign_proc : process(tmp_user_V_reg_1381, ap_predicate_op314_write_state46, ap_predicate_op343_write_state46, ap_phi_mux_tmp_user_V_1_phi_fu_357_p4, ap_condition_1749)
    begin
        if ((ap_const_boolean_1 = ap_condition_1749)) then
            if ((ap_predicate_op343_write_state46 = ap_const_boolean_1)) then 
                output_r_TUSER_int_regslice <= ap_phi_mux_tmp_user_V_1_phi_fu_357_p4;
            elsif ((ap_predicate_op314_write_state46 = ap_const_boolean_1)) then 
                output_r_TUSER_int_regslice <= tmp_user_V_reg_1381;
            else 
                output_r_TUSER_int_regslice <= "X";
            end if;
        else 
            output_r_TUSER_int_regslice <= "X";
        end if; 
    end process;

    output_r_TVALID <= regslice_both_output_r_V_data_V_U_vld_out;

    output_r_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state46, ap_predicate_op314_write_state46, ap_predicate_op343_write_state46, ap_block_state46_io, output_r_TREADY_int_regslice)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state46_io) or ((ap_predicate_op343_write_state46 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op314_write_state46 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_predicate_op343_write_state46 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state46)) or (not(((ap_const_boolean_1 = ap_block_state46_io) or ((ap_predicate_op343_write_state46 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op314_write_state46 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_predicate_op314_write_state46 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state46)))) then 
            output_r_TVALID_int_regslice <= ap_const_logic_1;
        else 
            output_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln40_fu_1250_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_1240_p4),64));

        sext_ln67_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_495_p4),64));

    shl_ln_fu_1223_p3 <= (j_reg_416 & ap_const_lv2_0);
    state_2_load_fu_520_p1 <= state_fu_218;
    trunc_ln1_fu_1240_p4 <= add_ln40_fu_1235_p2(63 downto 2);
    trunc_ln_fu_495_p4 <= coefs(63 downto 2);
    zext_ln40_fu_1231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_1223_p3),64));
end behav;
