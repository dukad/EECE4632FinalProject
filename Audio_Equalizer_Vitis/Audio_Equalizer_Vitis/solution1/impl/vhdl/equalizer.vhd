-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity equalizer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    SIGNAL_IN_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    SIGNAL_IN_TVALID : IN STD_LOGIC;
    SIGNAL_IN_TREADY : OUT STD_LOGIC;
    SIGNAL_IN_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    SIGNAL_IN_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    SIGNAL_IN_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    SIGNAL_IN_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    SIGNAL_IN_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    SIGNAL_IN_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    SIGNAL_OUT_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    SIGNAL_OUT_TVALID : OUT STD_LOGIC;
    SIGNAL_OUT_TREADY : IN STD_LOGIC;
    SIGNAL_OUT_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    SIGNAL_OUT_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    SIGNAL_OUT_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    SIGNAL_OUT_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    SIGNAL_OUT_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    SIGNAL_OUT_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    lowpass_coefs_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    lowpass_coefs_ce0 : OUT STD_LOGIC;
    lowpass_coefs_we0 : OUT STD_LOGIC;
    lowpass_coefs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    lowpass_coefs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lowpass_coefs_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    lowpass_coefs_ce1 : OUT STD_LOGIC;
    lowpass_coefs_we1 : OUT STD_LOGIC;
    lowpass_coefs_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    lowpass_coefs_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    bandpass_coefs_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bandpass_coefs_ce0 : OUT STD_LOGIC;
    bandpass_coefs_we0 : OUT STD_LOGIC;
    bandpass_coefs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    bandpass_coefs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bandpass_coefs_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bandpass_coefs_ce1 : OUT STD_LOGIC;
    bandpass_coefs_we1 : OUT STD_LOGIC;
    bandpass_coefs_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    bandpass_coefs_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    highpass_coefs_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    highpass_coefs_ce0 : OUT STD_LOGIC;
    highpass_coefs_we0 : OUT STD_LOGIC;
    highpass_coefs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    highpass_coefs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    highpass_coefs_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    highpass_coefs_ce1 : OUT STD_LOGIC;
    highpass_coefs_we1 : OUT STD_LOGIC;
    highpass_coefs_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    highpass_coefs_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of equalizer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "equalizer_equalizer,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.508000,HLS_SYN_LAT=36,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=56,HLS_SYN_LUT=194,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal SIGNAL_IN_TDATA_blk_n : STD_LOGIC;
    signal SIGNAL_OUT_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_equalizer_Pipeline_Lowpass_Shift_Accumulate_Loop_fu_115_ap_start : STD_LOGIC;
    signal grp_equalizer_Pipeline_Lowpass_Shift_Accumulate_Loop_fu_115_ap_done : STD_LOGIC;
    signal grp_equalizer_Pipeline_Lowpass_Shift_Accumulate_Loop_fu_115_ap_idle : STD_LOGIC;
    signal grp_equalizer_Pipeline_Lowpass_Shift_Accumulate_Loop_fu_115_ap_ready : STD_LOGIC;
    signal grp_equalizer_Pipeline_Bandpass_Shift_Accumulate_Loop_fu_121_ap_start : STD_LOGIC;
    signal grp_equalizer_Pipeline_Bandpass_Shift_Accumulate_Loop_fu_121_ap_done : STD_LOGIC;
    signal grp_equalizer_Pipeline_Bandpass_Shift_Accumulate_Loop_fu_121_ap_idle : STD_LOGIC;
    signal grp_equalizer_Pipeline_Bandpass_Shift_Accumulate_Loop_fu_121_ap_ready : STD_LOGIC;
    signal grp_equalizer_Pipeline_Highpass_Shift_Accumulate_Loop_fu_127_ap_start : STD_LOGIC;
    signal grp_equalizer_Pipeline_Highpass_Shift_Accumulate_Loop_fu_127_ap_done : STD_LOGIC;
    signal grp_equalizer_Pipeline_Highpass_Shift_Accumulate_Loop_fu_127_ap_idle : STD_LOGIC;
    signal grp_equalizer_Pipeline_Highpass_Shift_Accumulate_Loop_fu_127_ap_ready : STD_LOGIC;
    signal grp_equalizer_Pipeline_Lowpass_Shift_Accumulate_Loop_fu_115_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call31 : BOOLEAN;
    signal grp_equalizer_Pipeline_Bandpass_Shift_Accumulate_Loop_fu_121_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call32 : BOOLEAN;
    signal grp_equalizer_Pipeline_Highpass_Shift_Accumulate_Loop_fu_127_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call33 : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal regslice_both_SIGNAL_OUT_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state2 : BOOLEAN;
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal regslice_both_SIGNAL_IN_V_data_V_U_apdone_blk : STD_LOGIC;
    signal SIGNAL_IN_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal SIGNAL_IN_TVALID_int_regslice : STD_LOGIC;
    signal SIGNAL_IN_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_SIGNAL_IN_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_SIGNAL_IN_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal SIGNAL_IN_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_SIGNAL_IN_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SIGNAL_IN_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_SIGNAL_IN_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal SIGNAL_IN_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_SIGNAL_IN_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SIGNAL_IN_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_SIGNAL_IN_V_user_V_U_apdone_blk : STD_LOGIC;
    signal SIGNAL_IN_TUSER_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_SIGNAL_IN_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SIGNAL_IN_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_SIGNAL_IN_V_last_V_U_apdone_blk : STD_LOGIC;
    signal SIGNAL_IN_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_SIGNAL_IN_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SIGNAL_IN_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_SIGNAL_IN_V_id_V_U_apdone_blk : STD_LOGIC;
    signal SIGNAL_IN_TID_int_regslice : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_SIGNAL_IN_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SIGNAL_IN_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_SIGNAL_IN_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal SIGNAL_IN_TDEST_int_regslice : STD_LOGIC_VECTOR (5 downto 0);
    signal regslice_both_SIGNAL_IN_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SIGNAL_IN_V_dest_V_U_ack_in : STD_LOGIC;
    signal SIGNAL_OUT_TVALID_int_regslice : STD_LOGIC;
    signal SIGNAL_OUT_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component equalizer_equalizer_Pipeline_Lowpass_Shift_Accumulate_Loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC );
    end component;


    component equalizer_equalizer_Pipeline_Bandpass_Shift_Accumulate_Loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC );
    end component;


    component equalizer_equalizer_Pipeline_Highpass_Shift_Accumulate_Loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC );
    end component;


    component equalizer_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_equalizer_Pipeline_Lowpass_Shift_Accumulate_Loop_fu_115 : component equalizer_equalizer_Pipeline_Lowpass_Shift_Accumulate_Loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_equalizer_Pipeline_Lowpass_Shift_Accumulate_Loop_fu_115_ap_start,
        ap_done => grp_equalizer_Pipeline_Lowpass_Shift_Accumulate_Loop_fu_115_ap_done,
        ap_idle => grp_equalizer_Pipeline_Lowpass_Shift_Accumulate_Loop_fu_115_ap_idle,
        ap_ready => grp_equalizer_Pipeline_Lowpass_Shift_Accumulate_Loop_fu_115_ap_ready);

    grp_equalizer_Pipeline_Bandpass_Shift_Accumulate_Loop_fu_121 : component equalizer_equalizer_Pipeline_Bandpass_Shift_Accumulate_Loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_equalizer_Pipeline_Bandpass_Shift_Accumulate_Loop_fu_121_ap_start,
        ap_done => grp_equalizer_Pipeline_Bandpass_Shift_Accumulate_Loop_fu_121_ap_done,
        ap_idle => grp_equalizer_Pipeline_Bandpass_Shift_Accumulate_Loop_fu_121_ap_idle,
        ap_ready => grp_equalizer_Pipeline_Bandpass_Shift_Accumulate_Loop_fu_121_ap_ready);

    grp_equalizer_Pipeline_Highpass_Shift_Accumulate_Loop_fu_127 : component equalizer_equalizer_Pipeline_Highpass_Shift_Accumulate_Loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_equalizer_Pipeline_Highpass_Shift_Accumulate_Loop_fu_127_ap_start,
        ap_done => grp_equalizer_Pipeline_Highpass_Shift_Accumulate_Loop_fu_127_ap_done,
        ap_idle => grp_equalizer_Pipeline_Highpass_Shift_Accumulate_Loop_fu_127_ap_idle,
        ap_ready => grp_equalizer_Pipeline_Highpass_Shift_Accumulate_Loop_fu_127_ap_ready);

    regslice_both_SIGNAL_IN_V_data_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => SIGNAL_IN_TDATA,
        vld_in => SIGNAL_IN_TVALID,
        ack_in => regslice_both_SIGNAL_IN_V_data_V_U_ack_in,
        data_out => SIGNAL_IN_TDATA_int_regslice,
        vld_out => SIGNAL_IN_TVALID_int_regslice,
        ack_out => SIGNAL_IN_TREADY_int_regslice,
        apdone_blk => regslice_both_SIGNAL_IN_V_data_V_U_apdone_blk);

    regslice_both_SIGNAL_IN_V_keep_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => SIGNAL_IN_TKEEP,
        vld_in => SIGNAL_IN_TVALID,
        ack_in => regslice_both_SIGNAL_IN_V_keep_V_U_ack_in,
        data_out => SIGNAL_IN_TKEEP_int_regslice,
        vld_out => regslice_both_SIGNAL_IN_V_keep_V_U_vld_out,
        ack_out => SIGNAL_IN_TREADY_int_regslice,
        apdone_blk => regslice_both_SIGNAL_IN_V_keep_V_U_apdone_blk);

    regslice_both_SIGNAL_IN_V_strb_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => SIGNAL_IN_TSTRB,
        vld_in => SIGNAL_IN_TVALID,
        ack_in => regslice_both_SIGNAL_IN_V_strb_V_U_ack_in,
        data_out => SIGNAL_IN_TSTRB_int_regslice,
        vld_out => regslice_both_SIGNAL_IN_V_strb_V_U_vld_out,
        ack_out => SIGNAL_IN_TREADY_int_regslice,
        apdone_blk => regslice_both_SIGNAL_IN_V_strb_V_U_apdone_blk);

    regslice_both_SIGNAL_IN_V_user_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => SIGNAL_IN_TUSER,
        vld_in => SIGNAL_IN_TVALID,
        ack_in => regslice_both_SIGNAL_IN_V_user_V_U_ack_in,
        data_out => SIGNAL_IN_TUSER_int_regslice,
        vld_out => regslice_both_SIGNAL_IN_V_user_V_U_vld_out,
        ack_out => SIGNAL_IN_TREADY_int_regslice,
        apdone_blk => regslice_both_SIGNAL_IN_V_user_V_U_apdone_blk);

    regslice_both_SIGNAL_IN_V_last_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => SIGNAL_IN_TLAST,
        vld_in => SIGNAL_IN_TVALID,
        ack_in => regslice_both_SIGNAL_IN_V_last_V_U_ack_in,
        data_out => SIGNAL_IN_TLAST_int_regslice,
        vld_out => regslice_both_SIGNAL_IN_V_last_V_U_vld_out,
        ack_out => SIGNAL_IN_TREADY_int_regslice,
        apdone_blk => regslice_both_SIGNAL_IN_V_last_V_U_apdone_blk);

    regslice_both_SIGNAL_IN_V_id_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => SIGNAL_IN_TID,
        vld_in => SIGNAL_IN_TVALID,
        ack_in => regslice_both_SIGNAL_IN_V_id_V_U_ack_in,
        data_out => SIGNAL_IN_TID_int_regslice,
        vld_out => regslice_both_SIGNAL_IN_V_id_V_U_vld_out,
        ack_out => SIGNAL_IN_TREADY_int_regslice,
        apdone_blk => regslice_both_SIGNAL_IN_V_id_V_U_apdone_blk);

    regslice_both_SIGNAL_IN_V_dest_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => SIGNAL_IN_TDEST,
        vld_in => SIGNAL_IN_TVALID,
        ack_in => regslice_both_SIGNAL_IN_V_dest_V_U_ack_in,
        data_out => SIGNAL_IN_TDEST_int_regslice,
        vld_out => regslice_both_SIGNAL_IN_V_dest_V_U_vld_out,
        ack_out => SIGNAL_IN_TREADY_int_regslice,
        apdone_blk => regslice_both_SIGNAL_IN_V_dest_V_U_apdone_blk);

    regslice_both_SIGNAL_OUT_V_data_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => SIGNAL_IN_TDATA_int_regslice,
        vld_in => SIGNAL_OUT_TVALID_int_regslice,
        ack_in => SIGNAL_OUT_TREADY_int_regslice,
        data_out => SIGNAL_OUT_TDATA,
        vld_out => regslice_both_SIGNAL_OUT_V_data_V_U_vld_out,
        ack_out => SIGNAL_OUT_TREADY,
        apdone_blk => regslice_both_SIGNAL_OUT_V_data_V_U_apdone_blk);

    regslice_both_SIGNAL_OUT_V_keep_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => SIGNAL_IN_TKEEP_int_regslice,
        vld_in => SIGNAL_OUT_TVALID_int_regslice,
        ack_in => regslice_both_SIGNAL_OUT_V_keep_V_U_ack_in_dummy,
        data_out => SIGNAL_OUT_TKEEP,
        vld_out => regslice_both_SIGNAL_OUT_V_keep_V_U_vld_out,
        ack_out => SIGNAL_OUT_TREADY,
        apdone_blk => regslice_both_SIGNAL_OUT_V_keep_V_U_apdone_blk);

    regslice_both_SIGNAL_OUT_V_strb_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => SIGNAL_IN_TSTRB_int_regslice,
        vld_in => SIGNAL_OUT_TVALID_int_regslice,
        ack_in => regslice_both_SIGNAL_OUT_V_strb_V_U_ack_in_dummy,
        data_out => SIGNAL_OUT_TSTRB,
        vld_out => regslice_both_SIGNAL_OUT_V_strb_V_U_vld_out,
        ack_out => SIGNAL_OUT_TREADY,
        apdone_blk => regslice_both_SIGNAL_OUT_V_strb_V_U_apdone_blk);

    regslice_both_SIGNAL_OUT_V_user_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => SIGNAL_IN_TUSER_int_regslice,
        vld_in => SIGNAL_OUT_TVALID_int_regslice,
        ack_in => regslice_both_SIGNAL_OUT_V_user_V_U_ack_in_dummy,
        data_out => SIGNAL_OUT_TUSER,
        vld_out => regslice_both_SIGNAL_OUT_V_user_V_U_vld_out,
        ack_out => SIGNAL_OUT_TREADY,
        apdone_blk => regslice_both_SIGNAL_OUT_V_user_V_U_apdone_blk);

    regslice_both_SIGNAL_OUT_V_last_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => SIGNAL_IN_TLAST_int_regslice,
        vld_in => SIGNAL_OUT_TVALID_int_regslice,
        ack_in => regslice_both_SIGNAL_OUT_V_last_V_U_ack_in_dummy,
        data_out => SIGNAL_OUT_TLAST,
        vld_out => regslice_both_SIGNAL_OUT_V_last_V_U_vld_out,
        ack_out => SIGNAL_OUT_TREADY,
        apdone_blk => regslice_both_SIGNAL_OUT_V_last_V_U_apdone_blk);

    regslice_both_SIGNAL_OUT_V_id_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => SIGNAL_IN_TID_int_regslice,
        vld_in => SIGNAL_OUT_TVALID_int_regslice,
        ack_in => regslice_both_SIGNAL_OUT_V_id_V_U_ack_in_dummy,
        data_out => SIGNAL_OUT_TID,
        vld_out => regslice_both_SIGNAL_OUT_V_id_V_U_vld_out,
        ack_out => SIGNAL_OUT_TREADY,
        apdone_blk => regslice_both_SIGNAL_OUT_V_id_V_U_apdone_blk);

    regslice_both_SIGNAL_OUT_V_dest_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => SIGNAL_IN_TDEST_int_regslice,
        vld_in => SIGNAL_OUT_TVALID_int_regslice,
        ack_in => regslice_both_SIGNAL_OUT_V_dest_V_U_ack_in_dummy,
        data_out => SIGNAL_OUT_TDEST,
        vld_out => regslice_both_SIGNAL_OUT_V_dest_V_U_vld_out,
        ack_out => SIGNAL_OUT_TREADY,
        apdone_blk => regslice_both_SIGNAL_OUT_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_equalizer_Pipeline_Bandpass_Shift_Accumulate_Loop_fu_121_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_equalizer_Pipeline_Bandpass_Shift_Accumulate_Loop_fu_121_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = SIGNAL_OUT_TREADY_int_regslice) or (ap_const_logic_0 = SIGNAL_IN_TVALID_int_regslice))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_equalizer_Pipeline_Bandpass_Shift_Accumulate_Loop_fu_121_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_equalizer_Pipeline_Bandpass_Shift_Accumulate_Loop_fu_121_ap_ready = ap_const_logic_1)) then 
                    grp_equalizer_Pipeline_Bandpass_Shift_Accumulate_Loop_fu_121_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_equalizer_Pipeline_Highpass_Shift_Accumulate_Loop_fu_127_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_equalizer_Pipeline_Highpass_Shift_Accumulate_Loop_fu_127_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = SIGNAL_OUT_TREADY_int_regslice) or (ap_const_logic_0 = SIGNAL_IN_TVALID_int_regslice))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_equalizer_Pipeline_Highpass_Shift_Accumulate_Loop_fu_127_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_equalizer_Pipeline_Highpass_Shift_Accumulate_Loop_fu_127_ap_ready = ap_const_logic_1)) then 
                    grp_equalizer_Pipeline_Highpass_Shift_Accumulate_Loop_fu_127_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_equalizer_Pipeline_Lowpass_Shift_Accumulate_Loop_fu_115_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_equalizer_Pipeline_Lowpass_Shift_Accumulate_Loop_fu_115_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = SIGNAL_OUT_TREADY_int_regslice) or (ap_const_logic_0 = SIGNAL_IN_TVALID_int_regslice))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_equalizer_Pipeline_Lowpass_Shift_Accumulate_Loop_fu_115_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_equalizer_Pipeline_Lowpass_Shift_Accumulate_Loop_fu_115_ap_ready = ap_const_logic_1)) then 
                    grp_equalizer_Pipeline_Lowpass_Shift_Accumulate_Loop_fu_115_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, regslice_both_SIGNAL_OUT_V_data_V_U_apdone_blk, ap_block_state2_on_subcall_done, SIGNAL_IN_TVALID_int_regslice, SIGNAL_OUT_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = SIGNAL_OUT_TREADY_int_regslice) or (ap_const_logic_0 = SIGNAL_IN_TVALID_int_regslice))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((ap_const_logic_0 = SIGNAL_OUT_TREADY_int_regslice) or (regslice_both_SIGNAL_OUT_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state2_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    SIGNAL_IN_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, SIGNAL_IN_TVALID_int_regslice)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            SIGNAL_IN_TDATA_blk_n <= SIGNAL_IN_TVALID_int_regslice;
        else 
            SIGNAL_IN_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    SIGNAL_IN_TREADY <= regslice_both_SIGNAL_IN_V_data_V_U_ack_in;

    SIGNAL_IN_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_state1, SIGNAL_IN_TVALID_int_regslice, SIGNAL_OUT_TREADY_int_regslice)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = SIGNAL_OUT_TREADY_int_regslice) or (ap_const_logic_0 = SIGNAL_IN_TVALID_int_regslice))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            SIGNAL_IN_TREADY_int_regslice <= ap_const_logic_1;
        else 
            SIGNAL_IN_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    SIGNAL_OUT_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, SIGNAL_OUT_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            SIGNAL_OUT_TDATA_blk_n <= SIGNAL_OUT_TREADY_int_regslice;
        else 
            SIGNAL_OUT_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    SIGNAL_OUT_TVALID <= regslice_both_SIGNAL_OUT_V_data_V_U_vld_out;

    SIGNAL_OUT_TVALID_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_state1, SIGNAL_IN_TVALID_int_regslice, SIGNAL_OUT_TREADY_int_regslice)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = SIGNAL_OUT_TREADY_int_regslice) or (ap_const_logic_0 = SIGNAL_IN_TVALID_int_regslice))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            SIGNAL_OUT_TVALID_int_regslice <= ap_const_logic_1;
        else 
            SIGNAL_OUT_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, SIGNAL_IN_TVALID_int_regslice, SIGNAL_OUT_TREADY_int_regslice)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_const_logic_0 = SIGNAL_OUT_TREADY_int_regslice) or (ap_const_logic_0 = SIGNAL_IN_TVALID_int_regslice))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(regslice_both_SIGNAL_OUT_V_data_V_U_apdone_blk, ap_block_state2_on_subcall_done, SIGNAL_OUT_TREADY_int_regslice)
    begin
        if (((ap_const_logic_0 = SIGNAL_OUT_TREADY_int_regslice) or (regslice_both_SIGNAL_OUT_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state2_on_subcall_done))) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, SIGNAL_IN_TVALID_int_regslice, SIGNAL_OUT_TREADY_int_regslice)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_const_logic_0 = SIGNAL_OUT_TREADY_int_regslice) or (ap_const_logic_0 = SIGNAL_IN_TVALID_int_regslice));
    end process;


    ap_block_state1_ignore_call31_assign_proc : process(ap_start, SIGNAL_IN_TVALID_int_regslice, SIGNAL_OUT_TREADY_int_regslice)
    begin
                ap_block_state1_ignore_call31 <= ((ap_start = ap_const_logic_0) or (ap_const_logic_0 = SIGNAL_OUT_TREADY_int_regslice) or (ap_const_logic_0 = SIGNAL_IN_TVALID_int_regslice));
    end process;


    ap_block_state1_ignore_call32_assign_proc : process(ap_start, SIGNAL_IN_TVALID_int_regslice, SIGNAL_OUT_TREADY_int_regslice)
    begin
                ap_block_state1_ignore_call32 <= ((ap_start = ap_const_logic_0) or (ap_const_logic_0 = SIGNAL_OUT_TREADY_int_regslice) or (ap_const_logic_0 = SIGNAL_IN_TVALID_int_regslice));
    end process;


    ap_block_state1_ignore_call33_assign_proc : process(ap_start, SIGNAL_IN_TVALID_int_regslice, SIGNAL_OUT_TREADY_int_regslice)
    begin
                ap_block_state1_ignore_call33 <= ((ap_start = ap_const_logic_0) or (ap_const_logic_0 = SIGNAL_OUT_TREADY_int_regslice) or (ap_const_logic_0 = SIGNAL_IN_TVALID_int_regslice));
    end process;


    ap_block_state2_assign_proc : process(regslice_both_SIGNAL_OUT_V_data_V_U_apdone_blk, SIGNAL_OUT_TREADY_int_regslice)
    begin
                ap_block_state2 <= ((ap_const_logic_0 = SIGNAL_OUT_TREADY_int_regslice) or (regslice_both_SIGNAL_OUT_V_data_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_block_state2_on_subcall_done_assign_proc : process(grp_equalizer_Pipeline_Lowpass_Shift_Accumulate_Loop_fu_115_ap_done, grp_equalizer_Pipeline_Bandpass_Shift_Accumulate_Loop_fu_121_ap_done, grp_equalizer_Pipeline_Highpass_Shift_Accumulate_Loop_fu_127_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((grp_equalizer_Pipeline_Highpass_Shift_Accumulate_Loop_fu_127_ap_done = ap_const_logic_0) or (grp_equalizer_Pipeline_Bandpass_Shift_Accumulate_Loop_fu_121_ap_done = ap_const_logic_0) or (grp_equalizer_Pipeline_Lowpass_Shift_Accumulate_Loop_fu_115_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, regslice_both_SIGNAL_OUT_V_data_V_U_apdone_blk, ap_block_state2_on_subcall_done, SIGNAL_OUT_TREADY_int_regslice)
    begin
        if ((not(((ap_const_logic_0 = SIGNAL_OUT_TREADY_int_regslice) or (regslice_both_SIGNAL_OUT_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state2_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, regslice_both_SIGNAL_OUT_V_data_V_U_apdone_blk, ap_block_state2_on_subcall_done, SIGNAL_OUT_TREADY_int_regslice)
    begin
        if ((not(((ap_const_logic_0 = SIGNAL_OUT_TREADY_int_regslice) or (regslice_both_SIGNAL_OUT_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state2_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bandpass_coefs_address0 <= ap_const_lv6_0;
    bandpass_coefs_address1 <= ap_const_lv6_0;
    bandpass_coefs_ce0 <= ap_const_logic_0;
    bandpass_coefs_ce1 <= ap_const_logic_0;
    bandpass_coefs_d0 <= ap_const_lv32_0;
    bandpass_coefs_d1 <= ap_const_lv32_0;
    bandpass_coefs_we0 <= ap_const_logic_0;
    bandpass_coefs_we1 <= ap_const_logic_0;
    grp_equalizer_Pipeline_Bandpass_Shift_Accumulate_Loop_fu_121_ap_start <= grp_equalizer_Pipeline_Bandpass_Shift_Accumulate_Loop_fu_121_ap_start_reg;
    grp_equalizer_Pipeline_Highpass_Shift_Accumulate_Loop_fu_127_ap_start <= grp_equalizer_Pipeline_Highpass_Shift_Accumulate_Loop_fu_127_ap_start_reg;
    grp_equalizer_Pipeline_Lowpass_Shift_Accumulate_Loop_fu_115_ap_start <= grp_equalizer_Pipeline_Lowpass_Shift_Accumulate_Loop_fu_115_ap_start_reg;
    highpass_coefs_address0 <= ap_const_lv6_0;
    highpass_coefs_address1 <= ap_const_lv6_0;
    highpass_coefs_ce0 <= ap_const_logic_0;
    highpass_coefs_ce1 <= ap_const_logic_0;
    highpass_coefs_d0 <= ap_const_lv32_0;
    highpass_coefs_d1 <= ap_const_lv32_0;
    highpass_coefs_we0 <= ap_const_logic_0;
    highpass_coefs_we1 <= ap_const_logic_0;
    lowpass_coefs_address0 <= ap_const_lv6_0;
    lowpass_coefs_address1 <= ap_const_lv6_0;
    lowpass_coefs_ce0 <= ap_const_logic_0;
    lowpass_coefs_ce1 <= ap_const_logic_0;
    lowpass_coefs_d0 <= ap_const_lv32_0;
    lowpass_coefs_d1 <= ap_const_lv32_0;
    lowpass_coefs_we0 <= ap_const_logic_0;
    lowpass_coefs_we1 <= ap_const_logic_0;
end behav;
