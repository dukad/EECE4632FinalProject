// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="equalizer_equalizer,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=29.200001,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=8899,HLS_SYN_LUT=5735,HLS_VERSION=2022_1}" *)

module equalizer (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        SIGNAL_IN_TDATA,
        SIGNAL_IN_TVALID,
        SIGNAL_IN_TREADY,
        SIGNAL_IN_TKEEP,
        SIGNAL_IN_TSTRB,
        SIGNAL_IN_TUSER,
        SIGNAL_IN_TLAST,
        SIGNAL_IN_TID,
        SIGNAL_IN_TDEST,
        SIGNAL_OUT_TDATA,
        SIGNAL_OUT_TVALID,
        SIGNAL_OUT_TREADY,
        SIGNAL_OUT_TKEEP,
        SIGNAL_OUT_TSTRB,
        SIGNAL_OUT_TUSER,
        SIGNAL_OUT_TLAST,
        SIGNAL_OUT_TID,
        SIGNAL_OUT_TDEST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 74'd1;
parameter    ap_ST_fsm_state2 = 74'd2;
parameter    ap_ST_fsm_state3 = 74'd4;
parameter    ap_ST_fsm_state4 = 74'd8;
parameter    ap_ST_fsm_state5 = 74'd16;
parameter    ap_ST_fsm_state6 = 74'd32;
parameter    ap_ST_fsm_state7 = 74'd64;
parameter    ap_ST_fsm_state8 = 74'd128;
parameter    ap_ST_fsm_state9 = 74'd256;
parameter    ap_ST_fsm_state10 = 74'd512;
parameter    ap_ST_fsm_state11 = 74'd1024;
parameter    ap_ST_fsm_state12 = 74'd2048;
parameter    ap_ST_fsm_state13 = 74'd4096;
parameter    ap_ST_fsm_state14 = 74'd8192;
parameter    ap_ST_fsm_state15 = 74'd16384;
parameter    ap_ST_fsm_state16 = 74'd32768;
parameter    ap_ST_fsm_state17 = 74'd65536;
parameter    ap_ST_fsm_state18 = 74'd131072;
parameter    ap_ST_fsm_state19 = 74'd262144;
parameter    ap_ST_fsm_state20 = 74'd524288;
parameter    ap_ST_fsm_state21 = 74'd1048576;
parameter    ap_ST_fsm_state22 = 74'd2097152;
parameter    ap_ST_fsm_state23 = 74'd4194304;
parameter    ap_ST_fsm_state24 = 74'd8388608;
parameter    ap_ST_fsm_state25 = 74'd16777216;
parameter    ap_ST_fsm_state26 = 74'd33554432;
parameter    ap_ST_fsm_state27 = 74'd67108864;
parameter    ap_ST_fsm_state28 = 74'd134217728;
parameter    ap_ST_fsm_state29 = 74'd268435456;
parameter    ap_ST_fsm_state30 = 74'd536870912;
parameter    ap_ST_fsm_state31 = 74'd1073741824;
parameter    ap_ST_fsm_state32 = 74'd2147483648;
parameter    ap_ST_fsm_state33 = 74'd4294967296;
parameter    ap_ST_fsm_state34 = 74'd8589934592;
parameter    ap_ST_fsm_state35 = 74'd17179869184;
parameter    ap_ST_fsm_state36 = 74'd34359738368;
parameter    ap_ST_fsm_state37 = 74'd68719476736;
parameter    ap_ST_fsm_state38 = 74'd137438953472;
parameter    ap_ST_fsm_state39 = 74'd274877906944;
parameter    ap_ST_fsm_state40 = 74'd549755813888;
parameter    ap_ST_fsm_state41 = 74'd1099511627776;
parameter    ap_ST_fsm_state42 = 74'd2199023255552;
parameter    ap_ST_fsm_state43 = 74'd4398046511104;
parameter    ap_ST_fsm_state44 = 74'd8796093022208;
parameter    ap_ST_fsm_state45 = 74'd17592186044416;
parameter    ap_ST_fsm_state46 = 74'd35184372088832;
parameter    ap_ST_fsm_state47 = 74'd70368744177664;
parameter    ap_ST_fsm_state48 = 74'd140737488355328;
parameter    ap_ST_fsm_state49 = 74'd281474976710656;
parameter    ap_ST_fsm_state50 = 74'd562949953421312;
parameter    ap_ST_fsm_state51 = 74'd1125899906842624;
parameter    ap_ST_fsm_state52 = 74'd2251799813685248;
parameter    ap_ST_fsm_state53 = 74'd4503599627370496;
parameter    ap_ST_fsm_state54 = 74'd9007199254740992;
parameter    ap_ST_fsm_state55 = 74'd18014398509481984;
parameter    ap_ST_fsm_state56 = 74'd36028797018963968;
parameter    ap_ST_fsm_state57 = 74'd72057594037927936;
parameter    ap_ST_fsm_state58 = 74'd144115188075855872;
parameter    ap_ST_fsm_state59 = 74'd288230376151711744;
parameter    ap_ST_fsm_state60 = 74'd576460752303423488;
parameter    ap_ST_fsm_state61 = 74'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 74'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 74'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 74'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 74'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 74'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 74'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 74'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 74'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 74'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 74'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 74'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 74'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 74'd9444732965739290427392;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input  [31:0] SIGNAL_IN_TDATA;
input   SIGNAL_IN_TVALID;
output   SIGNAL_IN_TREADY;
input  [3:0] SIGNAL_IN_TKEEP;
input  [3:0] SIGNAL_IN_TSTRB;
input  [0:0] SIGNAL_IN_TUSER;
input  [0:0] SIGNAL_IN_TLAST;
input  [0:0] SIGNAL_IN_TID;
input  [0:0] SIGNAL_IN_TDEST;
output  [31:0] SIGNAL_OUT_TDATA;
output   SIGNAL_OUT_TVALID;
input   SIGNAL_OUT_TREADY;
output  [3:0] SIGNAL_OUT_TKEEP;
output  [3:0] SIGNAL_OUT_TSTRB;
output  [0:0] SIGNAL_OUT_TUSER;
output  [0:0] SIGNAL_OUT_TLAST;
output  [0:0] SIGNAL_OUT_TID;
output  [0:0] SIGNAL_OUT_TDEST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [73:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] coefs;
reg   [31:0] lowfreq_shift_reg_19;
reg   [31:0] lowfreq_shift_reg_18;
reg   [31:0] lowfreq_shift_reg_17;
reg   [31:0] lowfreq_shift_reg_16;
reg   [31:0] lowfreq_shift_reg_15;
reg   [31:0] lowfreq_shift_reg_14;
reg   [31:0] lowfreq_shift_reg_13;
reg   [31:0] lowfreq_shift_reg_12;
reg   [31:0] lowfreq_shift_reg_11;
reg   [31:0] lowfreq_shift_reg_10;
reg   [31:0] lowfreq_shift_reg_9;
reg   [31:0] lowfreq_shift_reg_8;
reg   [31:0] lowfreq_shift_reg_7;
reg   [31:0] lowfreq_shift_reg_6;
reg   [31:0] lowfreq_shift_reg_5;
reg   [31:0] lowfreq_shift_reg_4;
reg   [31:0] lowfreq_shift_reg_3;
reg   [31:0] lowfreq_shift_reg_2;
reg   [31:0] lowfreq_shift_reg_1;
reg   [31:0] lowfreq_shift_reg_0;
reg   [31:0] midfreq_shift_reg_19;
reg   [31:0] midfreq_shift_reg_18;
reg   [31:0] midfreq_shift_reg_17;
reg   [31:0] midfreq_shift_reg_16;
reg   [31:0] midfreq_shift_reg_15;
reg   [31:0] midfreq_shift_reg_14;
reg   [31:0] midfreq_shift_reg_13;
reg   [31:0] midfreq_shift_reg_12;
reg   [31:0] midfreq_shift_reg_11;
reg   [31:0] midfreq_shift_reg_10;
reg   [31:0] midfreq_shift_reg_9;
reg   [31:0] midfreq_shift_reg_8;
reg   [31:0] midfreq_shift_reg_7;
reg   [31:0] midfreq_shift_reg_6;
reg   [31:0] midfreq_shift_reg_5;
reg   [31:0] midfreq_shift_reg_4;
reg   [31:0] midfreq_shift_reg_3;
reg   [31:0] midfreq_shift_reg_2;
reg   [31:0] midfreq_shift_reg_1;
reg   [31:0] midfreq_shift_reg_0;
reg   [31:0] highfreq_shift_reg_19;
reg   [31:0] highfreq_shift_reg_18;
reg   [31:0] highfreq_shift_reg_17;
reg   [31:0] highfreq_shift_reg_16;
reg   [31:0] highfreq_shift_reg_15;
reg   [31:0] highfreq_shift_reg_14;
reg   [31:0] highfreq_shift_reg_13;
reg   [31:0] highfreq_shift_reg_12;
reg   [31:0] highfreq_shift_reg_11;
reg   [31:0] highfreq_shift_reg_10;
reg   [31:0] highfreq_shift_reg_9;
reg   [31:0] highfreq_shift_reg_8;
reg   [31:0] highfreq_shift_reg_7;
reg   [31:0] highfreq_shift_reg_6;
reg   [31:0] highfreq_shift_reg_5;
reg   [31:0] highfreq_shift_reg_4;
reg   [31:0] highfreq_shift_reg_3;
reg   [31:0] highfreq_shift_reg_2;
reg   [31:0] highfreq_shift_reg_1;
reg   [31:0] highfreq_shift_reg_0;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state71;
reg   [63:0] gmem_addr_reg_1903;
reg   [31:0] gmem_addr_read_reg_1909;
reg   [31:0] gmem_addr_read_1_reg_1914;
reg   [31:0] gmem_addr_read_2_reg_1919;
reg   [31:0] gmem_addr_read_3_reg_1924;
reg   [31:0] gmem_addr_read_4_reg_1929;
reg   [31:0] gmem_addr_read_5_reg_1934;
reg   [31:0] gmem_addr_read_6_reg_1939;
reg   [31:0] gmem_addr_read_7_reg_1944;
reg   [31:0] gmem_addr_read_8_reg_1949;
reg   [31:0] gmem_addr_read_9_reg_1954;
reg   [31:0] gmem_addr_read_10_reg_1959;
reg   [31:0] gmem_addr_read_11_reg_1964;
reg   [31:0] gmem_addr_read_12_reg_1969;
reg   [31:0] gmem_addr_read_13_reg_1974;
reg   [31:0] gmem_addr_read_14_reg_1979;
reg   [31:0] gmem_addr_read_15_reg_1984;
reg   [31:0] gmem_addr_read_16_reg_1989;
reg   [31:0] gmem_addr_read_17_reg_1994;
reg   [31:0] gmem_addr_read_18_reg_1999;
reg   [31:0] gmem_addr_read_19_reg_2004;
reg   [31:0] gmem_addr_read_20_reg_2009;
reg   [31:0] gmem_addr_read_21_reg_2014;
reg   [31:0] gmem_addr_read_22_reg_2019;
reg   [31:0] gmem_addr_read_23_reg_2024;
reg   [31:0] gmem_addr_read_24_reg_2029;
reg   [31:0] gmem_addr_read_25_reg_2034;
reg   [31:0] gmem_addr_read_26_reg_2039;
reg   [31:0] gmem_addr_read_27_reg_2044;
reg   [31:0] gmem_addr_read_28_reg_2049;
reg   [31:0] gmem_addr_read_29_reg_2054;
reg   [31:0] gmem_addr_read_30_reg_2059;
reg   [31:0] gmem_addr_read_31_reg_2064;
reg   [31:0] gmem_addr_read_32_reg_2069;
reg   [31:0] gmem_addr_read_33_reg_2074;
reg   [31:0] gmem_addr_read_34_reg_2079;
reg   [31:0] gmem_addr_read_35_reg_2084;
reg   [31:0] gmem_addr_read_36_reg_2089;
reg   [31:0] gmem_addr_read_37_reg_2094;
reg   [31:0] gmem_addr_read_38_reg_2099;
reg   [31:0] gmem_addr_read_39_reg_2104;
reg   [31:0] gmem_addr_read_40_reg_2109;
reg   [31:0] gmem_addr_read_41_reg_2114;
reg   [31:0] gmem_addr_read_42_reg_2119;
reg   [31:0] gmem_addr_read_43_reg_2124;
reg   [31:0] gmem_addr_read_44_reg_2129;
reg   [31:0] gmem_addr_read_45_reg_2134;
reg   [31:0] gmem_addr_read_46_reg_2139;
reg   [31:0] gmem_addr_read_47_reg_2144;
reg   [31:0] gmem_addr_read_48_reg_2149;
reg   [31:0] gmem_addr_read_49_reg_2154;
reg   [31:0] gmem_addr_read_50_reg_2159;
reg   [31:0] gmem_addr_read_51_reg_2164;
reg   [31:0] gmem_addr_read_52_reg_2169;
reg   [31:0] gmem_addr_read_53_reg_2174;
reg   [31:0] gmem_addr_read_54_reg_2179;
reg   [31:0] gmem_addr_read_55_reg_2184;
reg   [31:0] gmem_addr_read_56_reg_2189;
reg   [31:0] gmem_addr_read_57_reg_2194;
reg   [31:0] gmem_addr_read_58_reg_2199;
reg   [31:0] gmem_addr_read_59_reg_2204;
reg   [31:0] gmem_addr_read_60_reg_2209;
reg   [31:0] gmem_addr_read_61_reg_2214;
reg   [31:0] gmem_addr_read_62_reg_2219;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_ap_start;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_ap_done;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_ap_idle;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_ap_ready;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TREADY;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_IN_TREADY;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TDATA;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TVALID;
wire   [3:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TKEEP;
wire   [3:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TSTRB;
wire   [0:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TUSER;
wire   [0:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TLAST;
wire   [0:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TID;
wire   [0:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TDEST;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out1;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out1_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out2;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out2_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out3;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out3_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out4;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out4_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out5;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out5_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out6;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out6_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out7;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out7_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out8;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out8_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out9;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out9_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out10;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out10_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out11;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out11_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out12;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out12_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out13;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out13_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out14;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out14_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out15;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out15_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out16;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out16_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out17;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out17_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out18;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out18_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out19;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out19_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out20;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out20_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out21;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out21_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out22;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out22_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out23;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out23_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out24;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out24_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out25;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out25_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out26;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out26_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out27;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out27_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out28;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out28_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out29;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out29_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out30;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out30_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out31;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out31_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out32;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out32_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out33;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out33_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out34;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out34_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out35;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out35_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out36;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out36_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out37;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out37_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out38;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out38_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out39;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out39_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out40;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out40_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out41;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out41_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out42;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out42_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out43;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out43_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out44;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out44_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out45;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out45_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out46;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out46_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out47;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out47_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out48;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out48_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out49;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out49_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out50;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out50_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out51;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out51_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out52;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out52_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out53;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out53_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out54;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out54_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out55;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out55_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out56;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out56_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_tmp_data_V_out;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_tmp_data_V_out_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_lowfreq_accumulate_1_out;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_lowfreq_accumulate_1_out_ap_vld;
wire   [31:0] grp_equalizer_Pipeline_FILTER_LOOP_fu_468_add_ln69_out;
wire    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_add_ln69_out_ap_vld;
wire    gmem_AWREADY;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire   [8:0] gmem_RFIFONUM;
wire    gmem_BVALID;
reg    grp_equalizer_Pipeline_FILTER_LOOP_fu_468_ap_start_reg;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state73;
reg   [31:0] add_ln69_loc_fu_210;
wire  signed [63:0] p_cast_cast_fu_693_p1;
wire    ap_CS_fsm_state74;
wire    regslice_both_SIGNAL_OUT_V_data_V_U_apdone_blk;
wire   [61:0] p_cast_fu_683_p4;
reg   [73:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
reg    ap_ST_fsm_state17_blk;
reg    ap_ST_fsm_state18_blk;
reg    ap_ST_fsm_state19_blk;
reg    ap_ST_fsm_state20_blk;
reg    ap_ST_fsm_state21_blk;
reg    ap_ST_fsm_state22_blk;
reg    ap_ST_fsm_state23_blk;
reg    ap_ST_fsm_state24_blk;
reg    ap_ST_fsm_state25_blk;
reg    ap_ST_fsm_state26_blk;
reg    ap_ST_fsm_state27_blk;
reg    ap_ST_fsm_state28_blk;
reg    ap_ST_fsm_state29_blk;
reg    ap_ST_fsm_state30_blk;
reg    ap_ST_fsm_state31_blk;
reg    ap_ST_fsm_state32_blk;
reg    ap_ST_fsm_state33_blk;
reg    ap_ST_fsm_state34_blk;
reg    ap_ST_fsm_state35_blk;
reg    ap_ST_fsm_state36_blk;
reg    ap_ST_fsm_state37_blk;
reg    ap_ST_fsm_state38_blk;
reg    ap_ST_fsm_state39_blk;
reg    ap_ST_fsm_state40_blk;
reg    ap_ST_fsm_state41_blk;
reg    ap_ST_fsm_state42_blk;
reg    ap_ST_fsm_state43_blk;
reg    ap_ST_fsm_state44_blk;
reg    ap_ST_fsm_state45_blk;
reg    ap_ST_fsm_state46_blk;
reg    ap_ST_fsm_state47_blk;
reg    ap_ST_fsm_state48_blk;
reg    ap_ST_fsm_state49_blk;
reg    ap_ST_fsm_state50_blk;
reg    ap_ST_fsm_state51_blk;
reg    ap_ST_fsm_state52_blk;
reg    ap_ST_fsm_state53_blk;
reg    ap_ST_fsm_state54_blk;
reg    ap_ST_fsm_state55_blk;
reg    ap_ST_fsm_state56_blk;
reg    ap_ST_fsm_state57_blk;
reg    ap_ST_fsm_state58_blk;
reg    ap_ST_fsm_state59_blk;
reg    ap_ST_fsm_state60_blk;
reg    ap_ST_fsm_state61_blk;
reg    ap_ST_fsm_state62_blk;
reg    ap_ST_fsm_state63_blk;
reg    ap_ST_fsm_state64_blk;
reg    ap_ST_fsm_state65_blk;
reg    ap_ST_fsm_state66_blk;
reg    ap_ST_fsm_state67_blk;
reg    ap_ST_fsm_state68_blk;
reg    ap_ST_fsm_state69_blk;
reg    ap_ST_fsm_state70_blk;
reg    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
reg    ap_ST_fsm_state73_blk;
reg    ap_ST_fsm_state74_blk;
wire    regslice_both_SIGNAL_IN_V_data_V_U_apdone_blk;
wire   [31:0] SIGNAL_IN_TDATA_int_regslice;
wire    SIGNAL_IN_TVALID_int_regslice;
reg    SIGNAL_IN_TREADY_int_regslice;
wire    regslice_both_SIGNAL_IN_V_data_V_U_ack_in;
wire    regslice_both_SIGNAL_IN_V_keep_V_U_apdone_blk;
wire   [3:0] SIGNAL_IN_TKEEP_int_regslice;
wire    regslice_both_SIGNAL_IN_V_keep_V_U_vld_out;
wire    regslice_both_SIGNAL_IN_V_keep_V_U_ack_in;
wire    regslice_both_SIGNAL_IN_V_strb_V_U_apdone_blk;
wire   [3:0] SIGNAL_IN_TSTRB_int_regslice;
wire    regslice_both_SIGNAL_IN_V_strb_V_U_vld_out;
wire    regslice_both_SIGNAL_IN_V_strb_V_U_ack_in;
wire    regslice_both_SIGNAL_IN_V_user_V_U_apdone_blk;
wire   [0:0] SIGNAL_IN_TUSER_int_regslice;
wire    regslice_both_SIGNAL_IN_V_user_V_U_vld_out;
wire    regslice_both_SIGNAL_IN_V_user_V_U_ack_in;
wire    regslice_both_SIGNAL_IN_V_last_V_U_apdone_blk;
wire   [0:0] SIGNAL_IN_TLAST_int_regslice;
wire    regslice_both_SIGNAL_IN_V_last_V_U_vld_out;
wire    regslice_both_SIGNAL_IN_V_last_V_U_ack_in;
wire    regslice_both_SIGNAL_IN_V_id_V_U_apdone_blk;
wire   [0:0] SIGNAL_IN_TID_int_regslice;
wire    regslice_both_SIGNAL_IN_V_id_V_U_vld_out;
wire    regslice_both_SIGNAL_IN_V_id_V_U_ack_in;
wire    regslice_both_SIGNAL_IN_V_dest_V_U_apdone_blk;
wire   [0:0] SIGNAL_IN_TDEST_int_regslice;
wire    regslice_both_SIGNAL_IN_V_dest_V_U_vld_out;
wire    regslice_both_SIGNAL_IN_V_dest_V_U_ack_in;
wire    SIGNAL_OUT_TVALID_int_regslice;
wire    SIGNAL_OUT_TREADY_int_regslice;
wire    regslice_both_SIGNAL_OUT_V_data_V_U_vld_out;
wire    regslice_both_SIGNAL_OUT_V_keep_V_U_apdone_blk;
wire    regslice_both_SIGNAL_OUT_V_keep_V_U_ack_in_dummy;
wire    regslice_both_SIGNAL_OUT_V_keep_V_U_vld_out;
wire    regslice_both_SIGNAL_OUT_V_strb_V_U_apdone_blk;
wire    regslice_both_SIGNAL_OUT_V_strb_V_U_ack_in_dummy;
wire    regslice_both_SIGNAL_OUT_V_strb_V_U_vld_out;
wire    regslice_both_SIGNAL_OUT_V_user_V_U_apdone_blk;
wire    regslice_both_SIGNAL_OUT_V_user_V_U_ack_in_dummy;
wire    regslice_both_SIGNAL_OUT_V_user_V_U_vld_out;
wire    regslice_both_SIGNAL_OUT_V_last_V_U_apdone_blk;
wire    regslice_both_SIGNAL_OUT_V_last_V_U_ack_in_dummy;
wire    regslice_both_SIGNAL_OUT_V_last_V_U_vld_out;
wire    regslice_both_SIGNAL_OUT_V_id_V_U_apdone_blk;
wire    regslice_both_SIGNAL_OUT_V_id_V_U_ack_in_dummy;
wire    regslice_both_SIGNAL_OUT_V_id_V_U_vld_out;
wire    regslice_both_SIGNAL_OUT_V_dest_V_U_apdone_blk;
wire    regslice_both_SIGNAL_OUT_V_dest_V_U_ack_in_dummy;
wire    regslice_both_SIGNAL_OUT_V_dest_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 74'd1;
#0 lowfreq_shift_reg_19 = 32'd0;
#0 lowfreq_shift_reg_18 = 32'd0;
#0 lowfreq_shift_reg_17 = 32'd0;
#0 lowfreq_shift_reg_16 = 32'd0;
#0 lowfreq_shift_reg_15 = 32'd0;
#0 lowfreq_shift_reg_14 = 32'd0;
#0 lowfreq_shift_reg_13 = 32'd0;
#0 lowfreq_shift_reg_12 = 32'd0;
#0 lowfreq_shift_reg_11 = 32'd0;
#0 lowfreq_shift_reg_10 = 32'd0;
#0 lowfreq_shift_reg_9 = 32'd0;
#0 lowfreq_shift_reg_8 = 32'd0;
#0 lowfreq_shift_reg_7 = 32'd0;
#0 lowfreq_shift_reg_6 = 32'd0;
#0 lowfreq_shift_reg_5 = 32'd0;
#0 lowfreq_shift_reg_4 = 32'd0;
#0 lowfreq_shift_reg_3 = 32'd0;
#0 lowfreq_shift_reg_2 = 32'd0;
#0 lowfreq_shift_reg_1 = 32'd0;
#0 lowfreq_shift_reg_0 = 32'd0;
#0 midfreq_shift_reg_19 = 32'd0;
#0 midfreq_shift_reg_18 = 32'd0;
#0 midfreq_shift_reg_17 = 32'd0;
#0 midfreq_shift_reg_16 = 32'd0;
#0 midfreq_shift_reg_15 = 32'd0;
#0 midfreq_shift_reg_14 = 32'd0;
#0 midfreq_shift_reg_13 = 32'd0;
#0 midfreq_shift_reg_12 = 32'd0;
#0 midfreq_shift_reg_11 = 32'd0;
#0 midfreq_shift_reg_10 = 32'd0;
#0 midfreq_shift_reg_9 = 32'd0;
#0 midfreq_shift_reg_8 = 32'd0;
#0 midfreq_shift_reg_7 = 32'd0;
#0 midfreq_shift_reg_6 = 32'd0;
#0 midfreq_shift_reg_5 = 32'd0;
#0 midfreq_shift_reg_4 = 32'd0;
#0 midfreq_shift_reg_3 = 32'd0;
#0 midfreq_shift_reg_2 = 32'd0;
#0 midfreq_shift_reg_1 = 32'd0;
#0 midfreq_shift_reg_0 = 32'd0;
#0 highfreq_shift_reg_19 = 32'd0;
#0 highfreq_shift_reg_18 = 32'd0;
#0 highfreq_shift_reg_17 = 32'd0;
#0 highfreq_shift_reg_16 = 32'd0;
#0 highfreq_shift_reg_15 = 32'd0;
#0 highfreq_shift_reg_14 = 32'd0;
#0 highfreq_shift_reg_13 = 32'd0;
#0 highfreq_shift_reg_12 = 32'd0;
#0 highfreq_shift_reg_11 = 32'd0;
#0 highfreq_shift_reg_10 = 32'd0;
#0 highfreq_shift_reg_9 = 32'd0;
#0 highfreq_shift_reg_8 = 32'd0;
#0 highfreq_shift_reg_7 = 32'd0;
#0 highfreq_shift_reg_6 = 32'd0;
#0 highfreq_shift_reg_5 = 32'd0;
#0 highfreq_shift_reg_4 = 32'd0;
#0 highfreq_shift_reg_3 = 32'd0;
#0 highfreq_shift_reg_2 = 32'd0;
#0 highfreq_shift_reg_1 = 32'd0;
#0 highfreq_shift_reg_0 = 32'd0;
#0 grp_equalizer_Pipeline_FILTER_LOOP_fu_468_ap_start_reg = 1'b0;
end

equalizer_equalizer_Pipeline_FILTER_LOOP grp_equalizer_Pipeline_FILTER_LOOP_fu_468(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_ap_start),
    .ap_done(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_ap_done),
    .ap_idle(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_ap_idle),
    .ap_ready(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_ap_ready),
    .SIGNAL_IN_TVALID(SIGNAL_IN_TVALID_int_regslice),
    .SIGNAL_OUT_TREADY(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TREADY),
    .highfreq_shift_reg_0_load(highfreq_shift_reg_0),
    .highfreq_shift_reg_1_load(highfreq_shift_reg_1),
    .highfreq_shift_reg_2_load(highfreq_shift_reg_2),
    .highfreq_shift_reg_3_load(highfreq_shift_reg_3),
    .highfreq_shift_reg_4_load(highfreq_shift_reg_4),
    .highfreq_shift_reg_5_load(highfreq_shift_reg_5),
    .highfreq_shift_reg_6_load(highfreq_shift_reg_6),
    .highfreq_shift_reg_7_load(highfreq_shift_reg_7),
    .highfreq_shift_reg_8_load(highfreq_shift_reg_8),
    .highfreq_shift_reg_9_load(highfreq_shift_reg_9),
    .highfreq_shift_reg_10_load(highfreq_shift_reg_10),
    .highfreq_shift_reg_11_load(highfreq_shift_reg_11),
    .highfreq_shift_reg_12_load(highfreq_shift_reg_12),
    .highfreq_shift_reg_13_load(highfreq_shift_reg_13),
    .highfreq_shift_reg_14_load(highfreq_shift_reg_14),
    .highfreq_shift_reg_15_load(highfreq_shift_reg_15),
    .highfreq_shift_reg_16_load(highfreq_shift_reg_16),
    .highfreq_shift_reg_17_load(highfreq_shift_reg_17),
    .highfreq_shift_reg_18_load(highfreq_shift_reg_18),
    .highfreq_shift_reg_19_load(highfreq_shift_reg_19),
    .midfreq_shift_reg_0_load(midfreq_shift_reg_0),
    .midfreq_shift_reg_1_load(midfreq_shift_reg_1),
    .midfreq_shift_reg_2_load(midfreq_shift_reg_2),
    .midfreq_shift_reg_3_load(midfreq_shift_reg_3),
    .midfreq_shift_reg_4_load(midfreq_shift_reg_4),
    .midfreq_shift_reg_5_load(midfreq_shift_reg_5),
    .midfreq_shift_reg_6_load(midfreq_shift_reg_6),
    .midfreq_shift_reg_7_load(midfreq_shift_reg_7),
    .midfreq_shift_reg_8_load(midfreq_shift_reg_8),
    .midfreq_shift_reg_9_load(midfreq_shift_reg_9),
    .midfreq_shift_reg_10_load(midfreq_shift_reg_10),
    .midfreq_shift_reg_11_load(midfreq_shift_reg_11),
    .midfreq_shift_reg_12_load(midfreq_shift_reg_12),
    .midfreq_shift_reg_13_load(midfreq_shift_reg_13),
    .midfreq_shift_reg_14_load(midfreq_shift_reg_14),
    .midfreq_shift_reg_15_load(midfreq_shift_reg_15),
    .midfreq_shift_reg_16_load(midfreq_shift_reg_16),
    .midfreq_shift_reg_17_load(midfreq_shift_reg_17),
    .midfreq_shift_reg_18_load(midfreq_shift_reg_18),
    .midfreq_shift_reg_19_load(midfreq_shift_reg_19),
    .lowfreq_shift_reg_0_load(lowfreq_shift_reg_0),
    .lowfreq_shift_reg_1_load(lowfreq_shift_reg_1),
    .lowfreq_shift_reg_2_load(lowfreq_shift_reg_2),
    .lowfreq_shift_reg_3_load(lowfreq_shift_reg_3),
    .lowfreq_shift_reg_4_load(lowfreq_shift_reg_4),
    .lowfreq_shift_reg_5_load(lowfreq_shift_reg_5),
    .lowfreq_shift_reg_6_load(lowfreq_shift_reg_6),
    .lowfreq_shift_reg_7_load(lowfreq_shift_reg_7),
    .lowfreq_shift_reg_8_load(lowfreq_shift_reg_8),
    .lowfreq_shift_reg_9_load(lowfreq_shift_reg_9),
    .lowfreq_shift_reg_10_load(lowfreq_shift_reg_10),
    .lowfreq_shift_reg_11_load(lowfreq_shift_reg_11),
    .lowfreq_shift_reg_12_load(lowfreq_shift_reg_12),
    .lowfreq_shift_reg_13_load(lowfreq_shift_reg_13),
    .lowfreq_shift_reg_14_load(lowfreq_shift_reg_14),
    .lowfreq_shift_reg_15_load(lowfreq_shift_reg_15),
    .lowfreq_shift_reg_16_load(lowfreq_shift_reg_16),
    .lowfreq_shift_reg_17_load(lowfreq_shift_reg_17),
    .lowfreq_shift_reg_18_load(lowfreq_shift_reg_18),
    .lowfreq_shift_reg_19_load(lowfreq_shift_reg_19),
    .SIGNAL_IN_TDATA(SIGNAL_IN_TDATA_int_regslice),
    .SIGNAL_IN_TREADY(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_IN_TREADY),
    .SIGNAL_IN_TKEEP(SIGNAL_IN_TKEEP_int_regslice),
    .SIGNAL_IN_TSTRB(SIGNAL_IN_TSTRB_int_regslice),
    .SIGNAL_IN_TUSER(SIGNAL_IN_TUSER_int_regslice),
    .SIGNAL_IN_TLAST(SIGNAL_IN_TLAST_int_regslice),
    .SIGNAL_IN_TID(SIGNAL_IN_TID_int_regslice),
    .SIGNAL_IN_TDEST(SIGNAL_IN_TDEST_int_regslice),
    .gmem_addr_read_20(gmem_addr_read_20_reg_2009),
    .gmem_addr_read_19(gmem_addr_read_19_reg_2004),
    .gmem_addr_read_18(gmem_addr_read_18_reg_1999),
    .gmem_addr_read_17(gmem_addr_read_17_reg_1994),
    .gmem_addr_read_16(gmem_addr_read_16_reg_1989),
    .gmem_addr_read_15(gmem_addr_read_15_reg_1984),
    .gmem_addr_read_14(gmem_addr_read_14_reg_1979),
    .gmem_addr_read_13(gmem_addr_read_13_reg_1974),
    .gmem_addr_read_12(gmem_addr_read_12_reg_1969),
    .gmem_addr_read_11(gmem_addr_read_11_reg_1964),
    .gmem_addr_read_10(gmem_addr_read_10_reg_1959),
    .gmem_addr_read_9(gmem_addr_read_9_reg_1954),
    .gmem_addr_read_8(gmem_addr_read_8_reg_1949),
    .gmem_addr_read_7(gmem_addr_read_7_reg_1944),
    .gmem_addr_read_6(gmem_addr_read_6_reg_1939),
    .gmem_addr_read_5(gmem_addr_read_5_reg_1934),
    .gmem_addr_read_4(gmem_addr_read_4_reg_1929),
    .gmem_addr_read_3(gmem_addr_read_3_reg_1924),
    .gmem_addr_read_2(gmem_addr_read_2_reg_1919),
    .gmem_addr_read_1(gmem_addr_read_1_reg_1914),
    .gmem_addr_read(gmem_addr_read_reg_1909),
    .gmem_addr_read_41(gmem_addr_read_41_reg_2114),
    .gmem_addr_read_40(gmem_addr_read_40_reg_2109),
    .gmem_addr_read_39(gmem_addr_read_39_reg_2104),
    .gmem_addr_read_38(gmem_addr_read_38_reg_2099),
    .gmem_addr_read_37(gmem_addr_read_37_reg_2094),
    .gmem_addr_read_36(gmem_addr_read_36_reg_2089),
    .gmem_addr_read_35(gmem_addr_read_35_reg_2084),
    .gmem_addr_read_34(gmem_addr_read_34_reg_2079),
    .gmem_addr_read_33(gmem_addr_read_33_reg_2074),
    .gmem_addr_read_32(gmem_addr_read_32_reg_2069),
    .gmem_addr_read_31(gmem_addr_read_31_reg_2064),
    .gmem_addr_read_30(gmem_addr_read_30_reg_2059),
    .gmem_addr_read_29(gmem_addr_read_29_reg_2054),
    .gmem_addr_read_28(gmem_addr_read_28_reg_2049),
    .gmem_addr_read_27(gmem_addr_read_27_reg_2044),
    .gmem_addr_read_26(gmem_addr_read_26_reg_2039),
    .gmem_addr_read_25(gmem_addr_read_25_reg_2034),
    .gmem_addr_read_24(gmem_addr_read_24_reg_2029),
    .gmem_addr_read_23(gmem_addr_read_23_reg_2024),
    .gmem_addr_read_22(gmem_addr_read_22_reg_2019),
    .gmem_addr_read_21(gmem_addr_read_21_reg_2014),
    .gmem_addr_read_62(gmem_addr_read_62_reg_2219),
    .gmem_addr_read_61(gmem_addr_read_61_reg_2214),
    .gmem_addr_read_60(gmem_addr_read_60_reg_2209),
    .gmem_addr_read_59(gmem_addr_read_59_reg_2204),
    .gmem_addr_read_58(gmem_addr_read_58_reg_2199),
    .gmem_addr_read_57(gmem_addr_read_57_reg_2194),
    .gmem_addr_read_56(gmem_addr_read_56_reg_2189),
    .gmem_addr_read_55(gmem_addr_read_55_reg_2184),
    .gmem_addr_read_54(gmem_addr_read_54_reg_2179),
    .gmem_addr_read_53(gmem_addr_read_53_reg_2174),
    .gmem_addr_read_52(gmem_addr_read_52_reg_2169),
    .gmem_addr_read_51(gmem_addr_read_51_reg_2164),
    .gmem_addr_read_50(gmem_addr_read_50_reg_2159),
    .gmem_addr_read_49(gmem_addr_read_49_reg_2154),
    .gmem_addr_read_48(gmem_addr_read_48_reg_2149),
    .gmem_addr_read_47(gmem_addr_read_47_reg_2144),
    .gmem_addr_read_46(gmem_addr_read_46_reg_2139),
    .gmem_addr_read_45(gmem_addr_read_45_reg_2134),
    .gmem_addr_read_44(gmem_addr_read_44_reg_2129),
    .gmem_addr_read_43(gmem_addr_read_43_reg_2124),
    .gmem_addr_read_42(gmem_addr_read_42_reg_2119),
    .SIGNAL_OUT_TDATA(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TDATA),
    .SIGNAL_OUT_TVALID(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TVALID),
    .SIGNAL_OUT_TKEEP(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TKEEP),
    .SIGNAL_OUT_TSTRB(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TSTRB),
    .SIGNAL_OUT_TUSER(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TUSER),
    .SIGNAL_OUT_TLAST(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TLAST),
    .SIGNAL_OUT_TID(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TID),
    .SIGNAL_OUT_TDEST(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TDEST),
    .p_out(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out),
    .p_out_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out_ap_vld),
    .p_out1(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out1),
    .p_out1_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out1_ap_vld),
    .p_out2(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out2),
    .p_out2_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out2_ap_vld),
    .p_out3(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out3),
    .p_out3_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out3_ap_vld),
    .p_out4(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out4),
    .p_out4_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out4_ap_vld),
    .p_out5(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out5),
    .p_out5_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out5_ap_vld),
    .p_out6(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out6),
    .p_out6_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out6_ap_vld),
    .p_out7(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out7),
    .p_out7_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out7_ap_vld),
    .p_out8(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out8),
    .p_out8_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out8_ap_vld),
    .p_out9(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out9),
    .p_out9_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out9_ap_vld),
    .p_out10(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out10),
    .p_out10_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out10_ap_vld),
    .p_out11(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out11),
    .p_out11_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out11_ap_vld),
    .p_out12(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out12),
    .p_out12_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out12_ap_vld),
    .p_out13(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out13),
    .p_out13_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out13_ap_vld),
    .p_out14(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out14),
    .p_out14_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out14_ap_vld),
    .p_out15(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out15),
    .p_out15_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out15_ap_vld),
    .p_out16(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out16),
    .p_out16_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out16_ap_vld),
    .p_out17(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out17),
    .p_out17_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out17_ap_vld),
    .p_out18(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out18),
    .p_out18_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out18_ap_vld),
    .p_out19(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out19),
    .p_out19_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out19_ap_vld),
    .p_out20(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out20),
    .p_out20_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out20_ap_vld),
    .p_out21(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out21),
    .p_out21_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out21_ap_vld),
    .p_out22(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out22),
    .p_out22_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out22_ap_vld),
    .p_out23(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out23),
    .p_out23_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out23_ap_vld),
    .p_out24(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out24),
    .p_out24_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out24_ap_vld),
    .p_out25(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out25),
    .p_out25_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out25_ap_vld),
    .p_out26(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out26),
    .p_out26_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out26_ap_vld),
    .p_out27(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out27),
    .p_out27_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out27_ap_vld),
    .p_out28(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out28),
    .p_out28_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out28_ap_vld),
    .p_out29(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out29),
    .p_out29_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out29_ap_vld),
    .p_out30(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out30),
    .p_out30_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out30_ap_vld),
    .p_out31(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out31),
    .p_out31_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out31_ap_vld),
    .p_out32(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out32),
    .p_out32_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out32_ap_vld),
    .p_out33(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out33),
    .p_out33_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out33_ap_vld),
    .p_out34(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out34),
    .p_out34_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out34_ap_vld),
    .p_out35(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out35),
    .p_out35_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out35_ap_vld),
    .p_out36(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out36),
    .p_out36_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out36_ap_vld),
    .p_out37(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out37),
    .p_out37_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out37_ap_vld),
    .p_out38(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out38),
    .p_out38_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out38_ap_vld),
    .p_out39(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out39),
    .p_out39_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out39_ap_vld),
    .p_out40(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out40),
    .p_out40_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out40_ap_vld),
    .p_out41(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out41),
    .p_out41_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out41_ap_vld),
    .p_out42(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out42),
    .p_out42_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out42_ap_vld),
    .p_out43(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out43),
    .p_out43_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out43_ap_vld),
    .p_out44(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out44),
    .p_out44_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out44_ap_vld),
    .p_out45(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out45),
    .p_out45_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out45_ap_vld),
    .p_out46(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out46),
    .p_out46_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out46_ap_vld),
    .p_out47(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out47),
    .p_out47_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out47_ap_vld),
    .p_out48(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out48),
    .p_out48_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out48_ap_vld),
    .p_out49(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out49),
    .p_out49_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out49_ap_vld),
    .p_out50(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out50),
    .p_out50_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out50_ap_vld),
    .p_out51(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out51),
    .p_out51_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out51_ap_vld),
    .p_out52(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out52),
    .p_out52_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out52_ap_vld),
    .p_out53(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out53),
    .p_out53_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out53_ap_vld),
    .p_out54(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out54),
    .p_out54_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out54_ap_vld),
    .p_out55(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out55),
    .p_out55_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out55_ap_vld),
    .p_out56(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out56),
    .p_out56_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out56_ap_vld),
    .tmp_data_V_out(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_tmp_data_V_out),
    .tmp_data_V_out_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_tmp_data_V_out_ap_vld),
    .lowfreq_accumulate_1_out(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_lowfreq_accumulate_1_out),
    .lowfreq_accumulate_1_out_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_lowfreq_accumulate_1_out_ap_vld),
    .add_ln69_out(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_add_ln69_out),
    .add_ln69_out_ap_vld(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_add_ln69_out_ap_vld)
);

equalizer_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .coefs(coefs),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

equalizer_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .USER_DW( 32 ),
    .USER_AW( 64 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_addr_reg_1903),
    .I_ARLEN(32'd63),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RFIFONUM(gmem_RFIFONUM),
    .I_AWVALID(1'b0),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWLEN(32'd0),
    .I_WVALID(1'b0),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(32'd0),
    .I_WSTRB(4'd0),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(1'b0)
);

equalizer_regslice_both #(
    .DataWidth( 32 ))
regslice_both_SIGNAL_IN_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(SIGNAL_IN_TDATA),
    .vld_in(SIGNAL_IN_TVALID),
    .ack_in(regslice_both_SIGNAL_IN_V_data_V_U_ack_in),
    .data_out(SIGNAL_IN_TDATA_int_regslice),
    .vld_out(SIGNAL_IN_TVALID_int_regslice),
    .ack_out(SIGNAL_IN_TREADY_int_regslice),
    .apdone_blk(regslice_both_SIGNAL_IN_V_data_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 4 ))
regslice_both_SIGNAL_IN_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(SIGNAL_IN_TKEEP),
    .vld_in(SIGNAL_IN_TVALID),
    .ack_in(regslice_both_SIGNAL_IN_V_keep_V_U_ack_in),
    .data_out(SIGNAL_IN_TKEEP_int_regslice),
    .vld_out(regslice_both_SIGNAL_IN_V_keep_V_U_vld_out),
    .ack_out(SIGNAL_IN_TREADY_int_regslice),
    .apdone_blk(regslice_both_SIGNAL_IN_V_keep_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 4 ))
regslice_both_SIGNAL_IN_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(SIGNAL_IN_TSTRB),
    .vld_in(SIGNAL_IN_TVALID),
    .ack_in(regslice_both_SIGNAL_IN_V_strb_V_U_ack_in),
    .data_out(SIGNAL_IN_TSTRB_int_regslice),
    .vld_out(regslice_both_SIGNAL_IN_V_strb_V_U_vld_out),
    .ack_out(SIGNAL_IN_TREADY_int_regslice),
    .apdone_blk(regslice_both_SIGNAL_IN_V_strb_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_SIGNAL_IN_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(SIGNAL_IN_TUSER),
    .vld_in(SIGNAL_IN_TVALID),
    .ack_in(regslice_both_SIGNAL_IN_V_user_V_U_ack_in),
    .data_out(SIGNAL_IN_TUSER_int_regslice),
    .vld_out(regslice_both_SIGNAL_IN_V_user_V_U_vld_out),
    .ack_out(SIGNAL_IN_TREADY_int_regslice),
    .apdone_blk(regslice_both_SIGNAL_IN_V_user_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_SIGNAL_IN_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(SIGNAL_IN_TLAST),
    .vld_in(SIGNAL_IN_TVALID),
    .ack_in(regslice_both_SIGNAL_IN_V_last_V_U_ack_in),
    .data_out(SIGNAL_IN_TLAST_int_regslice),
    .vld_out(regslice_both_SIGNAL_IN_V_last_V_U_vld_out),
    .ack_out(SIGNAL_IN_TREADY_int_regslice),
    .apdone_blk(regslice_both_SIGNAL_IN_V_last_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_SIGNAL_IN_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(SIGNAL_IN_TID),
    .vld_in(SIGNAL_IN_TVALID),
    .ack_in(regslice_both_SIGNAL_IN_V_id_V_U_ack_in),
    .data_out(SIGNAL_IN_TID_int_regslice),
    .vld_out(regslice_both_SIGNAL_IN_V_id_V_U_vld_out),
    .ack_out(SIGNAL_IN_TREADY_int_regslice),
    .apdone_blk(regslice_both_SIGNAL_IN_V_id_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_SIGNAL_IN_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(SIGNAL_IN_TDEST),
    .vld_in(SIGNAL_IN_TVALID),
    .ack_in(regslice_both_SIGNAL_IN_V_dest_V_U_ack_in),
    .data_out(SIGNAL_IN_TDEST_int_regslice),
    .vld_out(regslice_both_SIGNAL_IN_V_dest_V_U_vld_out),
    .ack_out(SIGNAL_IN_TREADY_int_regslice),
    .apdone_blk(regslice_both_SIGNAL_IN_V_dest_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 32 ))
regslice_both_SIGNAL_OUT_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TDATA),
    .vld_in(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TVALID),
    .ack_in(SIGNAL_OUT_TREADY_int_regslice),
    .data_out(SIGNAL_OUT_TDATA),
    .vld_out(regslice_both_SIGNAL_OUT_V_data_V_U_vld_out),
    .ack_out(SIGNAL_OUT_TREADY),
    .apdone_blk(regslice_both_SIGNAL_OUT_V_data_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 4 ))
regslice_both_SIGNAL_OUT_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TKEEP),
    .vld_in(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TVALID),
    .ack_in(regslice_both_SIGNAL_OUT_V_keep_V_U_ack_in_dummy),
    .data_out(SIGNAL_OUT_TKEEP),
    .vld_out(regslice_both_SIGNAL_OUT_V_keep_V_U_vld_out),
    .ack_out(SIGNAL_OUT_TREADY),
    .apdone_blk(regslice_both_SIGNAL_OUT_V_keep_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 4 ))
regslice_both_SIGNAL_OUT_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TSTRB),
    .vld_in(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TVALID),
    .ack_in(regslice_both_SIGNAL_OUT_V_strb_V_U_ack_in_dummy),
    .data_out(SIGNAL_OUT_TSTRB),
    .vld_out(regslice_both_SIGNAL_OUT_V_strb_V_U_vld_out),
    .ack_out(SIGNAL_OUT_TREADY),
    .apdone_blk(regslice_both_SIGNAL_OUT_V_strb_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_SIGNAL_OUT_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TUSER),
    .vld_in(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TVALID),
    .ack_in(regslice_both_SIGNAL_OUT_V_user_V_U_ack_in_dummy),
    .data_out(SIGNAL_OUT_TUSER),
    .vld_out(regslice_both_SIGNAL_OUT_V_user_V_U_vld_out),
    .ack_out(SIGNAL_OUT_TREADY),
    .apdone_blk(regslice_both_SIGNAL_OUT_V_user_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_SIGNAL_OUT_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TLAST),
    .vld_in(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TVALID),
    .ack_in(regslice_both_SIGNAL_OUT_V_last_V_U_ack_in_dummy),
    .data_out(SIGNAL_OUT_TLAST),
    .vld_out(regslice_both_SIGNAL_OUT_V_last_V_U_vld_out),
    .ack_out(SIGNAL_OUT_TREADY),
    .apdone_blk(regslice_both_SIGNAL_OUT_V_last_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_SIGNAL_OUT_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TID),
    .vld_in(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TVALID),
    .ack_in(regslice_both_SIGNAL_OUT_V_id_V_U_ack_in_dummy),
    .data_out(SIGNAL_OUT_TID),
    .vld_out(regslice_both_SIGNAL_OUT_V_id_V_U_vld_out),
    .ack_out(SIGNAL_OUT_TREADY),
    .apdone_blk(regslice_both_SIGNAL_OUT_V_id_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_SIGNAL_OUT_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TDEST),
    .vld_in(grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TVALID),
    .ack_in(regslice_both_SIGNAL_OUT_V_dest_V_U_ack_in_dummy),
    .data_out(SIGNAL_OUT_TDEST),
    .vld_out(regslice_both_SIGNAL_OUT_V_dest_V_U_vld_out),
    .ack_out(SIGNAL_OUT_TREADY),
    .apdone_blk(regslice_both_SIGNAL_OUT_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_equalizer_Pipeline_FILTER_LOOP_fu_468_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state72)) begin
            grp_equalizer_Pipeline_FILTER_LOOP_fu_468_ap_start_reg <= 1'b1;
        end else if ((grp_equalizer_Pipeline_FILTER_LOOP_fu_468_ap_ready == 1'b1)) begin
            grp_equalizer_Pipeline_FILTER_LOOP_fu_468_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_equalizer_Pipeline_FILTER_LOOP_fu_468_add_ln69_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state73))) begin
        add_ln69_loc_fu_210 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_add_ln69_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        gmem_addr_read_10_reg_1959 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        gmem_addr_read_11_reg_1964 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        gmem_addr_read_12_reg_1969 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        gmem_addr_read_13_reg_1974 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        gmem_addr_read_14_reg_1979 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        gmem_addr_read_15_reg_1984 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        gmem_addr_read_16_reg_1989 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        gmem_addr_read_17_reg_1994 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        gmem_addr_read_18_reg_1999 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        gmem_addr_read_19_reg_2004 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        gmem_addr_read_1_reg_1914 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        gmem_addr_read_20_reg_2009 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        gmem_addr_read_21_reg_2014 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        gmem_addr_read_22_reg_2019 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        gmem_addr_read_23_reg_2024 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        gmem_addr_read_24_reg_2029 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        gmem_addr_read_25_reg_2034 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        gmem_addr_read_26_reg_2039 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        gmem_addr_read_27_reg_2044 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        gmem_addr_read_28_reg_2049 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        gmem_addr_read_29_reg_2054 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        gmem_addr_read_2_reg_1919 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        gmem_addr_read_30_reg_2059 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        gmem_addr_read_31_reg_2064 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        gmem_addr_read_32_reg_2069 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        gmem_addr_read_33_reg_2074 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        gmem_addr_read_34_reg_2079 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        gmem_addr_read_35_reg_2084 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        gmem_addr_read_36_reg_2089 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        gmem_addr_read_37_reg_2094 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        gmem_addr_read_38_reg_2099 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        gmem_addr_read_39_reg_2104 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        gmem_addr_read_3_reg_1924 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        gmem_addr_read_40_reg_2109 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        gmem_addr_read_41_reg_2114 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        gmem_addr_read_42_reg_2119 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        gmem_addr_read_43_reg_2124 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        gmem_addr_read_44_reg_2129 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        gmem_addr_read_45_reg_2134 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        gmem_addr_read_46_reg_2139 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        gmem_addr_read_47_reg_2144 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        gmem_addr_read_48_reg_2149 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        gmem_addr_read_49_reg_2154 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        gmem_addr_read_4_reg_1929 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        gmem_addr_read_50_reg_2159 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        gmem_addr_read_51_reg_2164 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        gmem_addr_read_52_reg_2169 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        gmem_addr_read_53_reg_2174 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        gmem_addr_read_54_reg_2179 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        gmem_addr_read_55_reg_2184 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        gmem_addr_read_56_reg_2189 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        gmem_addr_read_57_reg_2194 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        gmem_addr_read_58_reg_2199 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        gmem_addr_read_59_reg_2204 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        gmem_addr_read_5_reg_1934 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        gmem_addr_read_60_reg_2209 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        gmem_addr_read_61_reg_2214 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        gmem_addr_read_62_reg_2219 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        gmem_addr_read_6_reg_1939 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        gmem_addr_read_7_reg_1944 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        gmem_addr_read_8_reg_1949 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        gmem_addr_read_9_reg_1954 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        gmem_addr_read_reg_1909 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        gmem_addr_reg_1903 <= p_cast_cast_fu_693_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state74) & (regslice_both_SIGNAL_OUT_V_data_V_U_apdone_blk == 1'b0))) begin
        highfreq_shift_reg_0 <= add_ln69_loc_fu_210;
        highfreq_shift_reg_1 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out;
        highfreq_shift_reg_10 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out9;
        highfreq_shift_reg_11 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out10;
        highfreq_shift_reg_12 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out11;
        highfreq_shift_reg_13 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out12;
        highfreq_shift_reg_14 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out13;
        highfreq_shift_reg_15 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out14;
        highfreq_shift_reg_16 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out15;
        highfreq_shift_reg_17 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out16;
        highfreq_shift_reg_18 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out17;
        highfreq_shift_reg_19 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out18;
        highfreq_shift_reg_2 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out1;
        highfreq_shift_reg_3 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out2;
        highfreq_shift_reg_4 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out3;
        highfreq_shift_reg_5 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out4;
        highfreq_shift_reg_6 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out5;
        highfreq_shift_reg_7 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out6;
        highfreq_shift_reg_8 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out7;
        highfreq_shift_reg_9 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out8;
        lowfreq_shift_reg_0 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_tmp_data_V_out;
        lowfreq_shift_reg_1 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out38;
        lowfreq_shift_reg_10 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out47;
        lowfreq_shift_reg_11 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out48;
        lowfreq_shift_reg_12 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out49;
        lowfreq_shift_reg_13 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out50;
        lowfreq_shift_reg_14 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out51;
        lowfreq_shift_reg_15 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out52;
        lowfreq_shift_reg_16 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out53;
        lowfreq_shift_reg_17 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out54;
        lowfreq_shift_reg_18 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out55;
        lowfreq_shift_reg_19 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out56;
        lowfreq_shift_reg_2 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out39;
        lowfreq_shift_reg_3 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out40;
        lowfreq_shift_reg_4 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out41;
        lowfreq_shift_reg_5 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out42;
        lowfreq_shift_reg_6 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out43;
        lowfreq_shift_reg_7 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out44;
        lowfreq_shift_reg_8 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out45;
        lowfreq_shift_reg_9 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out46;
        midfreq_shift_reg_0 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_lowfreq_accumulate_1_out;
        midfreq_shift_reg_1 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out19;
        midfreq_shift_reg_10 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out28;
        midfreq_shift_reg_11 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out29;
        midfreq_shift_reg_12 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out30;
        midfreq_shift_reg_13 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out31;
        midfreq_shift_reg_14 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out32;
        midfreq_shift_reg_15 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out33;
        midfreq_shift_reg_16 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out34;
        midfreq_shift_reg_17 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out35;
        midfreq_shift_reg_18 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out36;
        midfreq_shift_reg_19 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out37;
        midfreq_shift_reg_2 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out20;
        midfreq_shift_reg_3 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out21;
        midfreq_shift_reg_4 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out22;
        midfreq_shift_reg_5 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out23;
        midfreq_shift_reg_6 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out24;
        midfreq_shift_reg_7 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out25;
        midfreq_shift_reg_8 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out26;
        midfreq_shift_reg_9 <= grp_equalizer_Pipeline_FILTER_LOOP_fu_468_p_out27;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        SIGNAL_IN_TREADY_int_regslice = grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_IN_TREADY;
    end else begin
        SIGNAL_IN_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_fsm_state17_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state18_blk = 1'b1;
    end else begin
        ap_ST_fsm_state18_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state19_blk = 1'b1;
    end else begin
        ap_ST_fsm_state19_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state20_blk = 1'b1;
    end else begin
        ap_ST_fsm_state20_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state21_blk = 1'b1;
    end else begin
        ap_ST_fsm_state21_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state22_blk = 1'b1;
    end else begin
        ap_ST_fsm_state22_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state23_blk = 1'b1;
    end else begin
        ap_ST_fsm_state23_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state24_blk = 1'b1;
    end else begin
        ap_ST_fsm_state24_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state25_blk = 1'b1;
    end else begin
        ap_ST_fsm_state25_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state26_blk = 1'b1;
    end else begin
        ap_ST_fsm_state26_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state27_blk = 1'b1;
    end else begin
        ap_ST_fsm_state27_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state28_blk = 1'b1;
    end else begin
        ap_ST_fsm_state28_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state29_blk = 1'b1;
    end else begin
        ap_ST_fsm_state29_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state30_blk = 1'b1;
    end else begin
        ap_ST_fsm_state30_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state31_blk = 1'b1;
    end else begin
        ap_ST_fsm_state31_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state32_blk = 1'b1;
    end else begin
        ap_ST_fsm_state32_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state33_blk = 1'b1;
    end else begin
        ap_ST_fsm_state33_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state34_blk = 1'b1;
    end else begin
        ap_ST_fsm_state34_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state35_blk = 1'b1;
    end else begin
        ap_ST_fsm_state35_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state36_blk = 1'b1;
    end else begin
        ap_ST_fsm_state36_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state37_blk = 1'b1;
    end else begin
        ap_ST_fsm_state37_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state38_blk = 1'b1;
    end else begin
        ap_ST_fsm_state38_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state39_blk = 1'b1;
    end else begin
        ap_ST_fsm_state39_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state40_blk = 1'b1;
    end else begin
        ap_ST_fsm_state40_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state41_blk = 1'b1;
    end else begin
        ap_ST_fsm_state41_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state42_blk = 1'b1;
    end else begin
        ap_ST_fsm_state42_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state43_blk = 1'b1;
    end else begin
        ap_ST_fsm_state43_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state44_blk = 1'b1;
    end else begin
        ap_ST_fsm_state44_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state45_blk = 1'b1;
    end else begin
        ap_ST_fsm_state45_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state46_blk = 1'b1;
    end else begin
        ap_ST_fsm_state46_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state47_blk = 1'b1;
    end else begin
        ap_ST_fsm_state47_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state48_blk = 1'b1;
    end else begin
        ap_ST_fsm_state48_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state49_blk = 1'b1;
    end else begin
        ap_ST_fsm_state49_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state50_blk = 1'b1;
    end else begin
        ap_ST_fsm_state50_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state51_blk = 1'b1;
    end else begin
        ap_ST_fsm_state51_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state52_blk = 1'b1;
    end else begin
        ap_ST_fsm_state52_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state53_blk = 1'b1;
    end else begin
        ap_ST_fsm_state53_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state54_blk = 1'b1;
    end else begin
        ap_ST_fsm_state54_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state55_blk = 1'b1;
    end else begin
        ap_ST_fsm_state55_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state56_blk = 1'b1;
    end else begin
        ap_ST_fsm_state56_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state57_blk = 1'b1;
    end else begin
        ap_ST_fsm_state57_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state58_blk = 1'b1;
    end else begin
        ap_ST_fsm_state58_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state59_blk = 1'b1;
    end else begin
        ap_ST_fsm_state59_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state60_blk = 1'b1;
    end else begin
        ap_ST_fsm_state60_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state61_blk = 1'b1;
    end else begin
        ap_ST_fsm_state61_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state62_blk = 1'b1;
    end else begin
        ap_ST_fsm_state62_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state63_blk = 1'b1;
    end else begin
        ap_ST_fsm_state63_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state64_blk = 1'b1;
    end else begin
        ap_ST_fsm_state64_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state65_blk = 1'b1;
    end else begin
        ap_ST_fsm_state65_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state66_blk = 1'b1;
    end else begin
        ap_ST_fsm_state66_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state67_blk = 1'b1;
    end else begin
        ap_ST_fsm_state67_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state68_blk = 1'b1;
    end else begin
        ap_ST_fsm_state68_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state69_blk = 1'b1;
    end else begin
        ap_ST_fsm_state69_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state70_blk = 1'b1;
    end else begin
        ap_ST_fsm_state70_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state71_blk = 1'b1;
    end else begin
        ap_ST_fsm_state71_blk = 1'b0;
    end
end

assign ap_ST_fsm_state72_blk = 1'b0;

always @ (*) begin
    if ((grp_equalizer_Pipeline_FILTER_LOOP_fu_468_ap_done == 1'b0)) begin
        ap_ST_fsm_state73_blk = 1'b1;
    end else begin
        ap_ST_fsm_state73_blk = 1'b0;
    end
end

always @ (*) begin
    if ((regslice_both_SIGNAL_OUT_V_data_V_U_apdone_blk == 1'b1)) begin
        ap_ST_fsm_state74_blk = 1'b1;
    end else begin
        ap_ST_fsm_state74_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) & (regslice_both_SIGNAL_OUT_V_data_V_U_apdone_blk == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) & (regslice_both_SIGNAL_OUT_V_data_V_U_apdone_blk == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (gmem_ARREADY == 1'b1))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state71) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state70) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state69) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state68) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state67) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state66) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state65) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state64) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state63) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state62) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state61) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state60) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state59) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state58) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state57) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state56) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state55) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state54) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state53) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state52) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state51) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state50) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state49) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state48) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state47) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state46) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state45) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state44) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state43) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state42) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state41) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state40) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state39) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state38) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state37) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state36) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state35) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state34) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state33) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state32) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state31) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state30) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state29) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state28) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state27) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state26) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state25) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state24) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state23) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state22) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state21) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state20) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state19) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state18) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state17) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state16) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state15) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state14) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state13) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state12) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state11) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state10) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & (gmem_RVALID == 1'b1)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == ap_CS_fsm_state29) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == ap_CS_fsm_state32) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == ap_CS_fsm_state33) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == ap_CS_fsm_state34) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == ap_CS_fsm_state35) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((1'b1 == ap_CS_fsm_state36) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((1'b1 == ap_CS_fsm_state37) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((1'b1 == ap_CS_fsm_state38) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((1'b1 == ap_CS_fsm_state39) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            if (((1'b1 == ap_CS_fsm_state40) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((1'b1 == ap_CS_fsm_state41) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((1'b1 == ap_CS_fsm_state42) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            if (((1'b1 == ap_CS_fsm_state43) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((1'b1 == ap_CS_fsm_state44) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((1'b1 == ap_CS_fsm_state45) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            if (((1'b1 == ap_CS_fsm_state46) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            if (((1'b1 == ap_CS_fsm_state47) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            if (((1'b1 == ap_CS_fsm_state48) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state49 : begin
            if (((1'b1 == ap_CS_fsm_state49) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state50 : begin
            if (((1'b1 == ap_CS_fsm_state50) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            if (((1'b1 == ap_CS_fsm_state51) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            if (((1'b1 == ap_CS_fsm_state52) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state53 : begin
            if (((1'b1 == ap_CS_fsm_state53) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            if (((1'b1 == ap_CS_fsm_state54) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state55 : begin
            if (((1'b1 == ap_CS_fsm_state55) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state56 : begin
            if (((1'b1 == ap_CS_fsm_state56) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state57 : begin
            if (((1'b1 == ap_CS_fsm_state57) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            if (((1'b1 == ap_CS_fsm_state58) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            if (((1'b1 == ap_CS_fsm_state59) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            if (((1'b1 == ap_CS_fsm_state60) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state61 : begin
            if (((1'b1 == ap_CS_fsm_state61) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_state62 : begin
            if (((1'b1 == ap_CS_fsm_state62) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state63 : begin
            if (((1'b1 == ap_CS_fsm_state63) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        ap_ST_fsm_state64 : begin
            if (((1'b1 == ap_CS_fsm_state64) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state65 : begin
            if (((1'b1 == ap_CS_fsm_state65) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        ap_ST_fsm_state66 : begin
            if (((1'b1 == ap_CS_fsm_state66) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        ap_ST_fsm_state67 : begin
            if (((1'b1 == ap_CS_fsm_state67) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        ap_ST_fsm_state68 : begin
            if (((1'b1 == ap_CS_fsm_state68) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        ap_ST_fsm_state69 : begin
            if (((1'b1 == ap_CS_fsm_state69) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end
        end
        ap_ST_fsm_state70 : begin
            if (((1'b1 == ap_CS_fsm_state70) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end
        end
        ap_ST_fsm_state71 : begin
            if (((1'b1 == ap_CS_fsm_state71) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            if (((grp_equalizer_Pipeline_FILTER_LOOP_fu_468_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state73))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state74 : begin
            if (((1'b1 == ap_CS_fsm_state74) & (regslice_both_SIGNAL_OUT_V_data_V_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SIGNAL_IN_TREADY = regslice_both_SIGNAL_IN_V_data_V_U_ack_in;

assign SIGNAL_OUT_TVALID = regslice_both_SIGNAL_OUT_V_data_V_U_vld_out;

assign SIGNAL_OUT_TVALID_int_regslice = grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TVALID;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_equalizer_Pipeline_FILTER_LOOP_fu_468_SIGNAL_OUT_TREADY = (ap_CS_fsm_state73 & SIGNAL_OUT_TREADY_int_regslice);

assign grp_equalizer_Pipeline_FILTER_LOOP_fu_468_ap_start = grp_equalizer_Pipeline_FILTER_LOOP_fu_468_ap_start_reg;

assign p_cast_cast_fu_693_p1 = $signed(p_cast_fu_683_p4);

assign p_cast_fu_683_p4 = {{coefs[63:2]}};


reg find_kernel_block = 0;
// synthesis translate_off
`include "equalizer_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //equalizer

