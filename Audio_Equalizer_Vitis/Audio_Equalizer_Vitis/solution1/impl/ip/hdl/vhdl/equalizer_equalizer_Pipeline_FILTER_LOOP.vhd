-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity equalizer_equalizer_Pipeline_FILTER_LOOP is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    SIGNAL_IN_TVALID : IN STD_LOGIC;
    SIGNAL_OUT_TREADY : IN STD_LOGIC;
    highfreq_shift_reg_0_load : IN STD_LOGIC_VECTOR (31 downto 0);
    highfreq_shift_reg_1_load : IN STD_LOGIC_VECTOR (31 downto 0);
    highfreq_shift_reg_2_load : IN STD_LOGIC_VECTOR (31 downto 0);
    highfreq_shift_reg_3_load : IN STD_LOGIC_VECTOR (31 downto 0);
    highfreq_shift_reg_4_load : IN STD_LOGIC_VECTOR (31 downto 0);
    highfreq_shift_reg_5_load : IN STD_LOGIC_VECTOR (31 downto 0);
    highfreq_shift_reg_6_load : IN STD_LOGIC_VECTOR (31 downto 0);
    highfreq_shift_reg_7_load : IN STD_LOGIC_VECTOR (31 downto 0);
    highfreq_shift_reg_8_load : IN STD_LOGIC_VECTOR (31 downto 0);
    highfreq_shift_reg_9_load : IN STD_LOGIC_VECTOR (31 downto 0);
    highfreq_shift_reg_10_load : IN STD_LOGIC_VECTOR (31 downto 0);
    highfreq_shift_reg_11_load : IN STD_LOGIC_VECTOR (31 downto 0);
    highfreq_shift_reg_12_load : IN STD_LOGIC_VECTOR (31 downto 0);
    highfreq_shift_reg_13_load : IN STD_LOGIC_VECTOR (31 downto 0);
    highfreq_shift_reg_14_load : IN STD_LOGIC_VECTOR (31 downto 0);
    highfreq_shift_reg_15_load : IN STD_LOGIC_VECTOR (31 downto 0);
    highfreq_shift_reg_16_load : IN STD_LOGIC_VECTOR (31 downto 0);
    highfreq_shift_reg_17_load : IN STD_LOGIC_VECTOR (31 downto 0);
    highfreq_shift_reg_18_load : IN STD_LOGIC_VECTOR (31 downto 0);
    highfreq_shift_reg_19_load : IN STD_LOGIC_VECTOR (31 downto 0);
    midfreq_shift_reg_0_load : IN STD_LOGIC_VECTOR (31 downto 0);
    midfreq_shift_reg_1_load : IN STD_LOGIC_VECTOR (31 downto 0);
    midfreq_shift_reg_2_load : IN STD_LOGIC_VECTOR (31 downto 0);
    midfreq_shift_reg_3_load : IN STD_LOGIC_VECTOR (31 downto 0);
    midfreq_shift_reg_4_load : IN STD_LOGIC_VECTOR (31 downto 0);
    midfreq_shift_reg_5_load : IN STD_LOGIC_VECTOR (31 downto 0);
    midfreq_shift_reg_6_load : IN STD_LOGIC_VECTOR (31 downto 0);
    midfreq_shift_reg_7_load : IN STD_LOGIC_VECTOR (31 downto 0);
    midfreq_shift_reg_8_load : IN STD_LOGIC_VECTOR (31 downto 0);
    midfreq_shift_reg_9_load : IN STD_LOGIC_VECTOR (31 downto 0);
    midfreq_shift_reg_10_load : IN STD_LOGIC_VECTOR (31 downto 0);
    midfreq_shift_reg_11_load : IN STD_LOGIC_VECTOR (31 downto 0);
    midfreq_shift_reg_12_load : IN STD_LOGIC_VECTOR (31 downto 0);
    midfreq_shift_reg_13_load : IN STD_LOGIC_VECTOR (31 downto 0);
    midfreq_shift_reg_14_load : IN STD_LOGIC_VECTOR (31 downto 0);
    midfreq_shift_reg_15_load : IN STD_LOGIC_VECTOR (31 downto 0);
    midfreq_shift_reg_16_load : IN STD_LOGIC_VECTOR (31 downto 0);
    midfreq_shift_reg_17_load : IN STD_LOGIC_VECTOR (31 downto 0);
    midfreq_shift_reg_18_load : IN STD_LOGIC_VECTOR (31 downto 0);
    midfreq_shift_reg_19_load : IN STD_LOGIC_VECTOR (31 downto 0);
    lowfreq_shift_reg_0_load : IN STD_LOGIC_VECTOR (31 downto 0);
    lowfreq_shift_reg_1_load : IN STD_LOGIC_VECTOR (31 downto 0);
    lowfreq_shift_reg_2_load : IN STD_LOGIC_VECTOR (31 downto 0);
    lowfreq_shift_reg_3_load : IN STD_LOGIC_VECTOR (31 downto 0);
    lowfreq_shift_reg_4_load : IN STD_LOGIC_VECTOR (31 downto 0);
    lowfreq_shift_reg_5_load : IN STD_LOGIC_VECTOR (31 downto 0);
    lowfreq_shift_reg_6_load : IN STD_LOGIC_VECTOR (31 downto 0);
    lowfreq_shift_reg_7_load : IN STD_LOGIC_VECTOR (31 downto 0);
    lowfreq_shift_reg_8_load : IN STD_LOGIC_VECTOR (31 downto 0);
    lowfreq_shift_reg_9_load : IN STD_LOGIC_VECTOR (31 downto 0);
    lowfreq_shift_reg_10_load : IN STD_LOGIC_VECTOR (31 downto 0);
    lowfreq_shift_reg_11_load : IN STD_LOGIC_VECTOR (31 downto 0);
    lowfreq_shift_reg_12_load : IN STD_LOGIC_VECTOR (31 downto 0);
    lowfreq_shift_reg_13_load : IN STD_LOGIC_VECTOR (31 downto 0);
    lowfreq_shift_reg_14_load : IN STD_LOGIC_VECTOR (31 downto 0);
    lowfreq_shift_reg_15_load : IN STD_LOGIC_VECTOR (31 downto 0);
    lowfreq_shift_reg_16_load : IN STD_LOGIC_VECTOR (31 downto 0);
    lowfreq_shift_reg_17_load : IN STD_LOGIC_VECTOR (31 downto 0);
    lowfreq_shift_reg_18_load : IN STD_LOGIC_VECTOR (31 downto 0);
    lowfreq_shift_reg_19_load : IN STD_LOGIC_VECTOR (31 downto 0);
    SIGNAL_IN_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    SIGNAL_IN_TREADY : OUT STD_LOGIC;
    SIGNAL_IN_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    SIGNAL_IN_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    SIGNAL_IN_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    SIGNAL_IN_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    SIGNAL_IN_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    SIGNAL_IN_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    gmem_addr_read_20 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_19 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_18 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_17 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_16 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_15 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_14 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_13 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_12 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_11 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_10 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_9 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_8 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_41 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_40 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_39 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_38 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_37 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_36 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_35 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_34 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_33 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_32 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_31 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_30 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_29 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_28 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_27 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_26 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_25 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_24 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_23 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_22 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_21 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_62 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_61 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_60 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_59 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_58 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_57 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_56 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_55 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_54 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_53 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_52 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_51 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_50 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_49 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_48 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_47 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_46 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_45 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_44 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_43 : IN STD_LOGIC_VECTOR (31 downto 0);
    gmem_addr_read_42 : IN STD_LOGIC_VECTOR (31 downto 0);
    SIGNAL_OUT_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    SIGNAL_OUT_TVALID : OUT STD_LOGIC;
    SIGNAL_OUT_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    SIGNAL_OUT_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    SIGNAL_OUT_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    SIGNAL_OUT_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    SIGNAL_OUT_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    SIGNAL_OUT_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    p_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out_ap_vld : OUT STD_LOGIC;
    p_out1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out1_ap_vld : OUT STD_LOGIC;
    p_out2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out2_ap_vld : OUT STD_LOGIC;
    p_out3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out3_ap_vld : OUT STD_LOGIC;
    p_out4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out4_ap_vld : OUT STD_LOGIC;
    p_out5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out5_ap_vld : OUT STD_LOGIC;
    p_out6 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out6_ap_vld : OUT STD_LOGIC;
    p_out7 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out7_ap_vld : OUT STD_LOGIC;
    p_out8 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out8_ap_vld : OUT STD_LOGIC;
    p_out9 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out9_ap_vld : OUT STD_LOGIC;
    p_out10 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out10_ap_vld : OUT STD_LOGIC;
    p_out11 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out11_ap_vld : OUT STD_LOGIC;
    p_out12 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out12_ap_vld : OUT STD_LOGIC;
    p_out13 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out13_ap_vld : OUT STD_LOGIC;
    p_out14 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out14_ap_vld : OUT STD_LOGIC;
    p_out15 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out15_ap_vld : OUT STD_LOGIC;
    p_out16 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out16_ap_vld : OUT STD_LOGIC;
    p_out17 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out17_ap_vld : OUT STD_LOGIC;
    p_out18 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out18_ap_vld : OUT STD_LOGIC;
    p_out19 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out19_ap_vld : OUT STD_LOGIC;
    p_out20 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out20_ap_vld : OUT STD_LOGIC;
    p_out21 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out21_ap_vld : OUT STD_LOGIC;
    p_out22 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out22_ap_vld : OUT STD_LOGIC;
    p_out23 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out23_ap_vld : OUT STD_LOGIC;
    p_out24 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out24_ap_vld : OUT STD_LOGIC;
    p_out25 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out25_ap_vld : OUT STD_LOGIC;
    p_out26 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out26_ap_vld : OUT STD_LOGIC;
    p_out27 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out27_ap_vld : OUT STD_LOGIC;
    p_out28 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out28_ap_vld : OUT STD_LOGIC;
    p_out29 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out29_ap_vld : OUT STD_LOGIC;
    p_out30 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out30_ap_vld : OUT STD_LOGIC;
    p_out31 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out31_ap_vld : OUT STD_LOGIC;
    p_out32 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out32_ap_vld : OUT STD_LOGIC;
    p_out33 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out33_ap_vld : OUT STD_LOGIC;
    p_out34 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out34_ap_vld : OUT STD_LOGIC;
    p_out35 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out35_ap_vld : OUT STD_LOGIC;
    p_out36 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out36_ap_vld : OUT STD_LOGIC;
    p_out37 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out37_ap_vld : OUT STD_LOGIC;
    p_out38 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out38_ap_vld : OUT STD_LOGIC;
    p_out39 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out39_ap_vld : OUT STD_LOGIC;
    p_out40 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out40_ap_vld : OUT STD_LOGIC;
    p_out41 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out41_ap_vld : OUT STD_LOGIC;
    p_out42 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out42_ap_vld : OUT STD_LOGIC;
    p_out43 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out43_ap_vld : OUT STD_LOGIC;
    p_out44 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out44_ap_vld : OUT STD_LOGIC;
    p_out45 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out45_ap_vld : OUT STD_LOGIC;
    p_out46 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out46_ap_vld : OUT STD_LOGIC;
    p_out47 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out47_ap_vld : OUT STD_LOGIC;
    p_out48 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out48_ap_vld : OUT STD_LOGIC;
    p_out49 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out49_ap_vld : OUT STD_LOGIC;
    p_out50 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out50_ap_vld : OUT STD_LOGIC;
    p_out51 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out51_ap_vld : OUT STD_LOGIC;
    p_out52 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out52_ap_vld : OUT STD_LOGIC;
    p_out53 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out53_ap_vld : OUT STD_LOGIC;
    p_out54 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out54_ap_vld : OUT STD_LOGIC;
    p_out55 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out55_ap_vld : OUT STD_LOGIC;
    p_out56 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out56_ap_vld : OUT STD_LOGIC;
    tmp_data_V_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp_data_V_out_ap_vld : OUT STD_LOGIC;
    lowfreq_accumulate_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    lowfreq_accumulate_1_out_ap_vld : OUT STD_LOGIC;
    add_ln69_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    add_ln69_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of equalizer_equalizer_Pipeline_FILTER_LOOP is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_last_V_fu_2241_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal SIGNAL_IN_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal SIGNAL_OUT_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_load254_reg_4106 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load254_reg_4106_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load253_reg_4111 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load253_reg_4111_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load252_reg_4116 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load252_reg_4116_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load251_reg_4121 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load251_reg_4121_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load250_reg_4126 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load250_reg_4126_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load249_reg_4131 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load249_reg_4131_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load248_reg_4136 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load248_reg_4136_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load247_reg_4141 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load247_reg_4141_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load246_reg_4146 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load246_reg_4146_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load245_reg_4151 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load245_reg_4151_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load244_reg_4156 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load244_reg_4156_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load243_reg_4161 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load243_reg_4161_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load242_reg_4166 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load242_reg_4166_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load241_reg_4171 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load241_reg_4171_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load240_reg_4176 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load240_reg_4176_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load239_reg_4181 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load239_reg_4181_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load238_reg_4186 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load238_reg_4186_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load237_reg_4191 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load237_reg_4191_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_load_reg_4196 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_load_reg_4196_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_1_reg_4201 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_1_reg_4201_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_keep_V_reg_4206 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_keep_V_reg_4206_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_strb_V_reg_4211 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_strb_V_reg_4211_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_user_V_reg_4216 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_reg_4216_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_4221 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_4221_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_V_reg_4226 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_V_reg_4226_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_V_reg_4231 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_V_reg_4231_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal lowfreq_accumulate_3_fu_2472_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lowfreq_accumulate_3_reg_4236 : STD_LOGIC_VECTOR (31 downto 0);
    signal lowfreq_accumulate_3_reg_4236_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load235_reg_4243 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load234_reg_4248 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load233_reg_4253 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load232_reg_4258 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load231_reg_4263 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load230_reg_4268 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load229_reg_4273 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load228_reg_4278 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load227_reg_4283 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load226_reg_4288 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load225_reg_4293 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load224_reg_4298 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load223_reg_4303 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load222_reg_4308 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load221_reg_4313 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load220_reg_4318 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load219_reg_4323 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load218_reg_4328 : STD_LOGIC_VECTOR (31 downto 0);
    signal lowfreq_accumulate_2_load_reg_4333 : STD_LOGIC_VECTOR (31 downto 0);
    signal midfreq_accumulate_1_fu_2856_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal midfreq_accumulate_1_reg_4338 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_fu_3265_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_reg_4343 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter3_stage0 : STD_LOGIC;
    signal empty_fu_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal empty_17_fu_428 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_18_fu_432 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_19_fu_436 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_20_fu_440 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_21_fu_444 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_22_fu_448 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_23_fu_452 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_24_fu_456 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_25_fu_460 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_26_fu_464 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_27_fu_468 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_28_fu_472 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_29_fu_476 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_30_fu_480 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_31_fu_484 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_32_fu_488 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_33_fu_492 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_34_fu_496 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_35_fu_500 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_36_fu_504 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_fu_508 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_37_fu_512 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_38_fu_516 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_39_fu_520 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_40_fu_524 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_41_fu_528 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_42_fu_532 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_43_fu_536 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_44_fu_540 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_45_fu_544 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_46_fu_548 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_47_fu_552 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_48_fu_556 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_49_fu_560 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_50_fu_564 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_51_fu_568 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_52_fu_572 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_53_fu_576 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_54_fu_580 : STD_LOGIC_VECTOR (31 downto 0);
    signal lowfreq_accumulate_2_fu_584 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_55_fu_588 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_56_fu_592 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_57_fu_596 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_58_fu_600 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_59_fu_604 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_60_fu_608 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_61_fu_612 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_62_fu_616 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_63_fu_620 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_64_fu_624 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_65_fu_628 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_66_fu_632 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_67_fu_636 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_68_fu_640 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_69_fu_644 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_70_fu_648 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_71_fu_652 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_72_fu_656 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_73_fu_660 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_p_load : STD_LOGIC_VECTOR (31 downto 0);
    signal highfreq_accumulate_2_fu_3258_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln43_fu_2258_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lowfreq_accumulate_fu_2253_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_2_fu_2268_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_3_fu_2273_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_7_fu_2293_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_8_fu_2298_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_4_fu_2278_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_5_fu_2283_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_5_fu_2376_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_6_fu_2288_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_18_fu_2348_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_17_fu_2343_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_14_fu_2328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_15_fu_2333_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_10_fu_2308_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln46_fu_2353_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_11_fu_2313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_13_fu_2323_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_10_fu_2394_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_16_fu_2338_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_11_fu_2412_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_9_fu_2388_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_13_fu_2406_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_12_fu_2318_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_15_fu_2400_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_9_fu_2303_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_16_fu_2430_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_14_fu_2424_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_17_fu_2436_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_12_fu_2418_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_6_fu_2382_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_4_fu_2370_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_1_fu_2364_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_1_fu_2263_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_2_fu_2454_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_fu_2358_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_3_fu_2460_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_7_fu_2448_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_8_fu_2466_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_18_fu_2442_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln54_17_fu_2728_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln54_18_fu_2733_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln54_15_fu_2718_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln54_14_fu_2713_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_1_fu_2748_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln54_16_fu_2723_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_2_fu_2754_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_fu_2742_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln54_13_fu_2708_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln54_12_fu_2703_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln54_10_fu_2693_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln54_9_fu_2688_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_5_fu_2772_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln54_11_fu_2698_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_6_fu_2778_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_4_fu_2766_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_7_fu_2784_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_3_fu_2760_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln54_8_fu_2683_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln54_7_fu_2678_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln54_5_fu_2668_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln54_4_fu_2663_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_10_fu_2802_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln54_6_fu_2673_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_11_fu_2808_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_9_fu_2796_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln54_2_fu_2653_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln54_1_fu_2648_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_13_fu_2820_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln54_3_fu_2658_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln57_fu_2738_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal midfreq_accumulate_fu_2638_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_15_fu_2832_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln54_fu_2643_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_16_fu_2838_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_14_fu_2826_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_17_fu_2844_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_12_fu_2814_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_18_fu_2850_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_8_fu_2790_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln65_fu_3045_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal highfreq_accumulate_fu_3040_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln65_2_fu_3055_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln65_3_fu_3060_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_1_fu_3150_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln65_1_fu_3050_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_2_fu_3156_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_fu_3144_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln65_7_fu_3080_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln65_8_fu_3085_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln65_4_fu_3065_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln65_5_fu_3070_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_5_fu_3174_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln65_6_fu_3075_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_6_fu_3180_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_4_fu_3168_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_7_fu_3186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_3_fu_3162_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln65_18_fu_3135_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln65_17_fu_3130_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln65_14_fu_3115_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln65_15_fu_3120_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_10_fu_3204_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln65_16_fu_3125_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_11_fu_3210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_9_fu_3198_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln65_13_fu_3110_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln65_11_fu_3100_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_13_fu_3222_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln65_12_fu_3105_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_fu_3140_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln65_10_fu_3095_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_15_fu_3234_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln65_9_fu_3090_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_16_fu_3240_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_14_fu_3228_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_17_fu_3246_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_12_fu_3216_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_18_fu_3252_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_8_fu_3192_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_fu_3265_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component equalizer_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component equalizer_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_32_1_1_U1 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_fu_424,
        din1 => gmem_addr_read_20,
        dout => lowfreq_accumulate_fu_2253_p2);

    mul_32s_32s_32_1_1_U2 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_19_fu_436,
        din1 => gmem_addr_read_19,
        dout => mul_ln43_fu_2258_p2);

    mul_32s_32s_32_1_1_U3 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_20_fu_440,
        din1 => gmem_addr_read_18,
        dout => mul_ln43_1_fu_2263_p2);

    mul_32s_32s_32_1_1_U4 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_21_fu_444,
        din1 => gmem_addr_read_17,
        dout => mul_ln43_2_fu_2268_p2);

    mul_32s_32s_32_1_1_U5 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_22_fu_448,
        din1 => gmem_addr_read_16,
        dout => mul_ln43_3_fu_2273_p2);

    mul_32s_32s_32_1_1_U6 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_23_fu_452,
        din1 => gmem_addr_read_15,
        dout => mul_ln43_4_fu_2278_p2);

    mul_32s_32s_32_1_1_U7 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_24_fu_456,
        din1 => gmem_addr_read_14,
        dout => mul_ln43_5_fu_2283_p2);

    mul_32s_32s_32_1_1_U8 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_25_fu_460,
        din1 => gmem_addr_read_13,
        dout => mul_ln43_6_fu_2288_p2);

    mul_32s_32s_32_1_1_U9 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_26_fu_464,
        din1 => gmem_addr_read_12,
        dout => mul_ln43_7_fu_2293_p2);

    mul_32s_32s_32_1_1_U10 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_27_fu_468,
        din1 => gmem_addr_read_11,
        dout => mul_ln43_8_fu_2298_p2);

    mul_32s_32s_32_1_1_U11 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_28_fu_472,
        din1 => gmem_addr_read_10,
        dout => mul_ln43_9_fu_2303_p2);

    mul_32s_32s_32_1_1_U12 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_29_fu_476,
        din1 => gmem_addr_read_9,
        dout => mul_ln43_10_fu_2308_p2);

    mul_32s_32s_32_1_1_U13 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_30_fu_480,
        din1 => gmem_addr_read_8,
        dout => mul_ln43_11_fu_2313_p2);

    mul_32s_32s_32_1_1_U14 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_31_fu_484,
        din1 => gmem_addr_read_7,
        dout => mul_ln43_12_fu_2318_p2);

    mul_32s_32s_32_1_1_U15 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_32_fu_488,
        din1 => gmem_addr_read_6,
        dout => mul_ln43_13_fu_2323_p2);

    mul_32s_32s_32_1_1_U16 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_33_fu_492,
        din1 => gmem_addr_read_5,
        dout => mul_ln43_14_fu_2328_p2);

    mul_32s_32s_32_1_1_U17 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_34_fu_496,
        din1 => gmem_addr_read_4,
        dout => mul_ln43_15_fu_2333_p2);

    mul_32s_32s_32_1_1_U18 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_35_fu_500,
        din1 => gmem_addr_read_3,
        dout => mul_ln43_16_fu_2338_p2);

    mul_32s_32s_32_1_1_U19 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_36_fu_504,
        din1 => gmem_addr_read_2,
        dout => mul_ln43_17_fu_2343_p2);

    mul_32s_32s_32_1_1_U20 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_data_V_fu_508,
        din1 => gmem_addr_read_1,
        dout => mul_ln43_18_fu_2348_p2);

    mul_32s_32s_32_1_1_U21 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => SIGNAL_IN_TDATA,
        din1 => gmem_addr_read,
        dout => mul_ln46_fu_2353_p2);

    mul_32s_32s_32_1_1_U22 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_17_fu_428,
        din1 => gmem_addr_read_41,
        dout => midfreq_accumulate_fu_2638_p2);

    mul_32s_32s_32_1_1_U23 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_37_fu_512,
        din1 => gmem_addr_read_40,
        dout => mul_ln54_fu_2643_p2);

    mul_32s_32s_32_1_1_U24 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_38_fu_516,
        din1 => gmem_addr_read_39,
        dout => mul_ln54_1_fu_2648_p2);

    mul_32s_32s_32_1_1_U25 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_39_fu_520,
        din1 => gmem_addr_read_38,
        dout => mul_ln54_2_fu_2653_p2);

    mul_32s_32s_32_1_1_U26 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_40_fu_524,
        din1 => gmem_addr_read_37,
        dout => mul_ln54_3_fu_2658_p2);

    mul_32s_32s_32_1_1_U27 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_41_fu_528,
        din1 => gmem_addr_read_36,
        dout => mul_ln54_4_fu_2663_p2);

    mul_32s_32s_32_1_1_U28 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_42_fu_532,
        din1 => gmem_addr_read_35,
        dout => mul_ln54_5_fu_2668_p2);

    mul_32s_32s_32_1_1_U29 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_43_fu_536,
        din1 => gmem_addr_read_34,
        dout => mul_ln54_6_fu_2673_p2);

    mul_32s_32s_32_1_1_U30 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_44_fu_540,
        din1 => gmem_addr_read_33,
        dout => mul_ln54_7_fu_2678_p2);

    mul_32s_32s_32_1_1_U31 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_45_fu_544,
        din1 => gmem_addr_read_32,
        dout => mul_ln54_8_fu_2683_p2);

    mul_32s_32s_32_1_1_U32 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_46_fu_548,
        din1 => gmem_addr_read_31,
        dout => mul_ln54_9_fu_2688_p2);

    mul_32s_32s_32_1_1_U33 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_47_fu_552,
        din1 => gmem_addr_read_30,
        dout => mul_ln54_10_fu_2693_p2);

    mul_32s_32s_32_1_1_U34 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_48_fu_556,
        din1 => gmem_addr_read_29,
        dout => mul_ln54_11_fu_2698_p2);

    mul_32s_32s_32_1_1_U35 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_49_fu_560,
        din1 => gmem_addr_read_28,
        dout => mul_ln54_12_fu_2703_p2);

    mul_32s_32s_32_1_1_U36 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_50_fu_564,
        din1 => gmem_addr_read_27,
        dout => mul_ln54_13_fu_2708_p2);

    mul_32s_32s_32_1_1_U37 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_51_fu_568,
        din1 => gmem_addr_read_26,
        dout => mul_ln54_14_fu_2713_p2);

    mul_32s_32s_32_1_1_U38 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_52_fu_572,
        din1 => gmem_addr_read_25,
        dout => mul_ln54_15_fu_2718_p2);

    mul_32s_32s_32_1_1_U39 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_53_fu_576,
        din1 => gmem_addr_read_24,
        dout => mul_ln54_16_fu_2723_p2);

    mul_32s_32s_32_1_1_U40 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_54_fu_580,
        din1 => gmem_addr_read_23,
        dout => mul_ln54_17_fu_2728_p2);

    mul_32s_32s_32_1_1_U41 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => lowfreq_accumulate_2_fu_584,
        din1 => gmem_addr_read_22,
        dout => mul_ln54_18_fu_2733_p2);

    mul_32s_32s_32_1_1_U42 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => lowfreq_accumulate_3_reg_4236,
        din1 => gmem_addr_read_21,
        dout => mul_ln57_fu_2738_p2);

    mul_32s_32s_32_1_1_U43 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_18_fu_432,
        din1 => gmem_addr_read_62,
        dout => highfreq_accumulate_fu_3040_p2);

    mul_32s_32s_32_1_1_U44 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_55_fu_588,
        din1 => gmem_addr_read_61,
        dout => mul_ln65_fu_3045_p2);

    mul_32s_32s_32_1_1_U45 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_56_fu_592,
        din1 => gmem_addr_read_60,
        dout => mul_ln65_1_fu_3050_p2);

    mul_32s_32s_32_1_1_U46 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_57_fu_596,
        din1 => gmem_addr_read_59,
        dout => mul_ln65_2_fu_3055_p2);

    mul_32s_32s_32_1_1_U47 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_58_fu_600,
        din1 => gmem_addr_read_58,
        dout => mul_ln65_3_fu_3060_p2);

    mul_32s_32s_32_1_1_U48 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_59_fu_604,
        din1 => gmem_addr_read_57,
        dout => mul_ln65_4_fu_3065_p2);

    mul_32s_32s_32_1_1_U49 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_60_fu_608,
        din1 => gmem_addr_read_56,
        dout => mul_ln65_5_fu_3070_p2);

    mul_32s_32s_32_1_1_U50 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_61_fu_612,
        din1 => gmem_addr_read_55,
        dout => mul_ln65_6_fu_3075_p2);

    mul_32s_32s_32_1_1_U51 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_62_fu_616,
        din1 => gmem_addr_read_54,
        dout => mul_ln65_7_fu_3080_p2);

    mul_32s_32s_32_1_1_U52 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_63_fu_620,
        din1 => gmem_addr_read_53,
        dout => mul_ln65_8_fu_3085_p2);

    mul_32s_32s_32_1_1_U53 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_64_fu_624,
        din1 => gmem_addr_read_52,
        dout => mul_ln65_9_fu_3090_p2);

    mul_32s_32s_32_1_1_U54 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_65_fu_628,
        din1 => gmem_addr_read_51,
        dout => mul_ln65_10_fu_3095_p2);

    mul_32s_32s_32_1_1_U55 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_66_fu_632,
        din1 => gmem_addr_read_50,
        dout => mul_ln65_11_fu_3100_p2);

    mul_32s_32s_32_1_1_U56 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_67_fu_636,
        din1 => gmem_addr_read_49,
        dout => mul_ln65_12_fu_3105_p2);

    mul_32s_32s_32_1_1_U57 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_68_fu_640,
        din1 => gmem_addr_read_48,
        dout => mul_ln65_13_fu_3110_p2);

    mul_32s_32s_32_1_1_U58 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_69_fu_644,
        din1 => gmem_addr_read_47,
        dout => mul_ln65_14_fu_3115_p2);

    mul_32s_32s_32_1_1_U59 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_70_fu_648,
        din1 => gmem_addr_read_46,
        dout => mul_ln65_15_fu_3120_p2);

    mul_32s_32s_32_1_1_U60 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_71_fu_652,
        din1 => gmem_addr_read_45,
        dout => mul_ln65_16_fu_3125_p2);

    mul_32s_32s_32_1_1_U61 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_72_fu_656,
        din1 => gmem_addr_read_44,
        dout => mul_ln65_17_fu_3130_p2);

    mul_32s_32s_32_1_1_U62 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => ap_sig_allocacmp_p_load,
        din1 => gmem_addr_read_43,
        dout => mul_ln65_18_fu_3135_p2);

    mul_32s_32s_32_1_1_U63 : component equalizer_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => midfreq_accumulate_1_reg_4338,
        din1 => gmem_addr_read_42,
        dout => mul_ln68_fu_3140_p2);

    flow_control_loop_pipe_sequential_init_U : component equalizer_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    empty_17_fu_428_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_17_fu_428 <= midfreq_shift_reg_19_load;
                elsif (((tmp_last_V_reg_4221 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    empty_17_fu_428 <= empty_37_fu_512;
                end if;
            end if; 
        end if;
    end process;

    empty_18_fu_432_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_18_fu_432 <= highfreq_shift_reg_19_load;
                elsif (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    empty_18_fu_432 <= empty_55_fu_588;
                end if;
            end if; 
        end if;
    end process;

    empty_19_fu_436_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_19_fu_436 <= lowfreq_shift_reg_18_load;
                elsif (((tmp_last_V_fu_2241_p1 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    empty_19_fu_436 <= empty_20_fu_440;
                end if;
            end if; 
        end if;
    end process;

    empty_20_fu_440_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_20_fu_440 <= lowfreq_shift_reg_17_load;
                elsif (((tmp_last_V_fu_2241_p1 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    empty_20_fu_440 <= empty_21_fu_444;
                end if;
            end if; 
        end if;
    end process;

    empty_21_fu_444_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_21_fu_444 <= lowfreq_shift_reg_16_load;
                elsif (((tmp_last_V_fu_2241_p1 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    empty_21_fu_444 <= empty_22_fu_448;
                end if;
            end if; 
        end if;
    end process;

    empty_22_fu_448_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_22_fu_448 <= lowfreq_shift_reg_15_load;
                elsif (((tmp_last_V_fu_2241_p1 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    empty_22_fu_448 <= empty_23_fu_452;
                end if;
            end if; 
        end if;
    end process;

    empty_23_fu_452_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_23_fu_452 <= lowfreq_shift_reg_14_load;
                elsif (((tmp_last_V_fu_2241_p1 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    empty_23_fu_452 <= empty_24_fu_456;
                end if;
            end if; 
        end if;
    end process;

    empty_24_fu_456_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_24_fu_456 <= lowfreq_shift_reg_13_load;
                elsif (((tmp_last_V_fu_2241_p1 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    empty_24_fu_456 <= empty_25_fu_460;
                end if;
            end if; 
        end if;
    end process;

    empty_25_fu_460_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_25_fu_460 <= lowfreq_shift_reg_12_load;
                elsif (((tmp_last_V_fu_2241_p1 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    empty_25_fu_460 <= empty_26_fu_464;
                end if;
            end if; 
        end if;
    end process;

    empty_26_fu_464_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_26_fu_464 <= lowfreq_shift_reg_11_load;
                elsif (((tmp_last_V_fu_2241_p1 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    empty_26_fu_464 <= empty_27_fu_468;
                end if;
            end if; 
        end if;
    end process;

    empty_27_fu_468_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_27_fu_468 <= lowfreq_shift_reg_10_load;
                elsif (((tmp_last_V_fu_2241_p1 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    empty_27_fu_468 <= empty_28_fu_472;
                end if;
            end if; 
        end if;
    end process;

    empty_28_fu_472_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_28_fu_472 <= lowfreq_shift_reg_9_load;
                elsif (((tmp_last_V_fu_2241_p1 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    empty_28_fu_472 <= empty_29_fu_476;
                end if;
            end if; 
        end if;
    end process;

    empty_29_fu_476_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_29_fu_476 <= lowfreq_shift_reg_8_load;
                elsif (((tmp_last_V_fu_2241_p1 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    empty_29_fu_476 <= empty_30_fu_480;
                end if;
            end if; 
        end if;
    end process;

    empty_30_fu_480_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_30_fu_480 <= lowfreq_shift_reg_7_load;
                elsif (((tmp_last_V_fu_2241_p1 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    empty_30_fu_480 <= empty_31_fu_484;
                end if;
            end if; 
        end if;
    end process;

    empty_31_fu_484_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_31_fu_484 <= lowfreq_shift_reg_6_load;
                elsif (((tmp_last_V_fu_2241_p1 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    empty_31_fu_484 <= empty_32_fu_488;
                end if;
            end if; 
        end if;
    end process;

    empty_32_fu_488_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_32_fu_488 <= lowfreq_shift_reg_5_load;
                elsif (((tmp_last_V_fu_2241_p1 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    empty_32_fu_488 <= empty_33_fu_492;
                end if;
            end if; 
        end if;
    end process;

    empty_33_fu_492_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_33_fu_492 <= lowfreq_shift_reg_4_load;
                elsif (((tmp_last_V_fu_2241_p1 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    empty_33_fu_492 <= empty_34_fu_496;
                end if;
            end if; 
        end if;
    end process;

    empty_34_fu_496_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_34_fu_496 <= lowfreq_shift_reg_3_load;
                elsif (((tmp_last_V_fu_2241_p1 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    empty_34_fu_496 <= empty_35_fu_500;
                end if;
            end if; 
        end if;
    end process;

    empty_35_fu_500_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_35_fu_500 <= lowfreq_shift_reg_2_load;
                elsif (((tmp_last_V_fu_2241_p1 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    empty_35_fu_500 <= empty_36_fu_504;
                end if;
            end if; 
        end if;
    end process;

    empty_36_fu_504_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_36_fu_504 <= lowfreq_shift_reg_1_load;
                elsif (((tmp_last_V_fu_2241_p1 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    empty_36_fu_504 <= tmp_data_V_fu_508;
                end if;
            end if; 
        end if;
    end process;

    empty_37_fu_512_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_37_fu_512 <= midfreq_shift_reg_18_load;
                elsif (((tmp_last_V_reg_4221 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    empty_37_fu_512 <= empty_38_fu_516;
                end if;
            end if; 
        end if;
    end process;

    empty_38_fu_516_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_38_fu_516 <= midfreq_shift_reg_17_load;
                elsif (((tmp_last_V_reg_4221 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    empty_38_fu_516 <= empty_39_fu_520;
                end if;
            end if; 
        end if;
    end process;

    empty_39_fu_520_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_39_fu_520 <= midfreq_shift_reg_16_load;
                elsif (((tmp_last_V_reg_4221 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    empty_39_fu_520 <= empty_40_fu_524;
                end if;
            end if; 
        end if;
    end process;

    empty_40_fu_524_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_40_fu_524 <= midfreq_shift_reg_15_load;
                elsif (((tmp_last_V_reg_4221 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    empty_40_fu_524 <= empty_41_fu_528;
                end if;
            end if; 
        end if;
    end process;

    empty_41_fu_528_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_41_fu_528 <= midfreq_shift_reg_14_load;
                elsif (((tmp_last_V_reg_4221 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    empty_41_fu_528 <= empty_42_fu_532;
                end if;
            end if; 
        end if;
    end process;

    empty_42_fu_532_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_42_fu_532 <= midfreq_shift_reg_13_load;
                elsif (((tmp_last_V_reg_4221 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    empty_42_fu_532 <= empty_43_fu_536;
                end if;
            end if; 
        end if;
    end process;

    empty_43_fu_536_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_43_fu_536 <= midfreq_shift_reg_12_load;
                elsif (((tmp_last_V_reg_4221 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    empty_43_fu_536 <= empty_44_fu_540;
                end if;
            end if; 
        end if;
    end process;

    empty_44_fu_540_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_44_fu_540 <= midfreq_shift_reg_11_load;
                elsif (((tmp_last_V_reg_4221 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    empty_44_fu_540 <= empty_45_fu_544;
                end if;
            end if; 
        end if;
    end process;

    empty_45_fu_544_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_45_fu_544 <= midfreq_shift_reg_10_load;
                elsif (((tmp_last_V_reg_4221 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    empty_45_fu_544 <= empty_46_fu_548;
                end if;
            end if; 
        end if;
    end process;

    empty_46_fu_548_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_46_fu_548 <= midfreq_shift_reg_9_load;
                elsif (((tmp_last_V_reg_4221 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    empty_46_fu_548 <= empty_47_fu_552;
                end if;
            end if; 
        end if;
    end process;

    empty_47_fu_552_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_47_fu_552 <= midfreq_shift_reg_8_load;
                elsif (((tmp_last_V_reg_4221 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    empty_47_fu_552 <= empty_48_fu_556;
                end if;
            end if; 
        end if;
    end process;

    empty_48_fu_556_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_48_fu_556 <= midfreq_shift_reg_7_load;
                elsif (((tmp_last_V_reg_4221 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    empty_48_fu_556 <= empty_49_fu_560;
                end if;
            end if; 
        end if;
    end process;

    empty_49_fu_560_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_49_fu_560 <= midfreq_shift_reg_6_load;
                elsif (((tmp_last_V_reg_4221 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    empty_49_fu_560 <= empty_50_fu_564;
                end if;
            end if; 
        end if;
    end process;

    empty_50_fu_564_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_50_fu_564 <= midfreq_shift_reg_5_load;
                elsif (((tmp_last_V_reg_4221 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    empty_50_fu_564 <= empty_51_fu_568;
                end if;
            end if; 
        end if;
    end process;

    empty_51_fu_568_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_51_fu_568 <= midfreq_shift_reg_4_load;
                elsif (((tmp_last_V_reg_4221 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    empty_51_fu_568 <= empty_52_fu_572;
                end if;
            end if; 
        end if;
    end process;

    empty_52_fu_572_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_52_fu_572 <= midfreq_shift_reg_3_load;
                elsif (((tmp_last_V_reg_4221 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    empty_52_fu_572 <= empty_53_fu_576;
                end if;
            end if; 
        end if;
    end process;

    empty_53_fu_576_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_53_fu_576 <= midfreq_shift_reg_2_load;
                elsif (((tmp_last_V_reg_4221 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    empty_53_fu_576 <= empty_54_fu_580;
                end if;
            end if; 
        end if;
    end process;

    empty_54_fu_580_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_54_fu_580 <= midfreq_shift_reg_1_load;
                elsif (((tmp_last_V_reg_4221 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    empty_54_fu_580 <= lowfreq_accumulate_2_fu_584;
                end if;
            end if; 
        end if;
    end process;

    empty_55_fu_588_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_55_fu_588 <= highfreq_shift_reg_18_load;
                elsif (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    empty_55_fu_588 <= empty_56_fu_592;
                end if;
            end if; 
        end if;
    end process;

    empty_56_fu_592_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_56_fu_592 <= highfreq_shift_reg_17_load;
                elsif (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    empty_56_fu_592 <= empty_57_fu_596;
                end if;
            end if; 
        end if;
    end process;

    empty_57_fu_596_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_57_fu_596 <= highfreq_shift_reg_16_load;
                elsif (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    empty_57_fu_596 <= empty_58_fu_600;
                end if;
            end if; 
        end if;
    end process;

    empty_58_fu_600_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_58_fu_600 <= highfreq_shift_reg_15_load;
                elsif (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    empty_58_fu_600 <= empty_59_fu_604;
                end if;
            end if; 
        end if;
    end process;

    empty_59_fu_604_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_59_fu_604 <= highfreq_shift_reg_14_load;
                elsif (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    empty_59_fu_604 <= empty_60_fu_608;
                end if;
            end if; 
        end if;
    end process;

    empty_60_fu_608_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_60_fu_608 <= highfreq_shift_reg_13_load;
                elsif (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    empty_60_fu_608 <= empty_61_fu_612;
                end if;
            end if; 
        end if;
    end process;

    empty_61_fu_612_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_61_fu_612 <= highfreq_shift_reg_12_load;
                elsif (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    empty_61_fu_612 <= empty_62_fu_616;
                end if;
            end if; 
        end if;
    end process;

    empty_62_fu_616_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_62_fu_616 <= highfreq_shift_reg_11_load;
                elsif (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    empty_62_fu_616 <= empty_63_fu_620;
                end if;
            end if; 
        end if;
    end process;

    empty_63_fu_620_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_63_fu_620 <= highfreq_shift_reg_10_load;
                elsif (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    empty_63_fu_620 <= empty_64_fu_624;
                end if;
            end if; 
        end if;
    end process;

    empty_64_fu_624_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_64_fu_624 <= highfreq_shift_reg_9_load;
                elsif (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    empty_64_fu_624 <= empty_65_fu_628;
                end if;
            end if; 
        end if;
    end process;

    empty_65_fu_628_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_65_fu_628 <= highfreq_shift_reg_8_load;
                elsif (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    empty_65_fu_628 <= empty_66_fu_632;
                end if;
            end if; 
        end if;
    end process;

    empty_66_fu_632_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_66_fu_632 <= highfreq_shift_reg_7_load;
                elsif (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    empty_66_fu_632 <= empty_67_fu_636;
                end if;
            end if; 
        end if;
    end process;

    empty_67_fu_636_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_67_fu_636 <= highfreq_shift_reg_6_load;
                elsif (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    empty_67_fu_636 <= empty_68_fu_640;
                end if;
            end if; 
        end if;
    end process;

    empty_68_fu_640_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_68_fu_640 <= highfreq_shift_reg_5_load;
                elsif (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    empty_68_fu_640 <= empty_69_fu_644;
                end if;
            end if; 
        end if;
    end process;

    empty_69_fu_644_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_69_fu_644 <= highfreq_shift_reg_4_load;
                elsif (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    empty_69_fu_644 <= empty_70_fu_648;
                end if;
            end if; 
        end if;
    end process;

    empty_70_fu_648_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_70_fu_648 <= highfreq_shift_reg_3_load;
                elsif (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    empty_70_fu_648 <= empty_71_fu_652;
                end if;
            end if; 
        end if;
    end process;

    empty_71_fu_652_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_71_fu_652 <= highfreq_shift_reg_2_load;
                elsif (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    empty_71_fu_652 <= empty_72_fu_656;
                end if;
            end if; 
        end if;
    end process;

    empty_72_fu_656_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_72_fu_656 <= highfreq_shift_reg_1_load;
                elsif (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    empty_72_fu_656 <= ap_sig_allocacmp_p_load;
                end if;
            end if; 
        end if;
    end process;

    empty_73_fu_660_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_73_fu_660 <= highfreq_shift_reg_0_load;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    empty_73_fu_660 <= add_ln69_reg_4343;
                end if;
            end if; 
        end if;
    end process;

    empty_fu_424_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_fu_424 <= lowfreq_shift_reg_19_load;
                elsif (((tmp_last_V_fu_2241_p1 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    empty_fu_424 <= empty_19_fu_436;
                end if;
            end if; 
        end if;
    end process;

    lowfreq_accumulate_2_fu_584_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    lowfreq_accumulate_2_fu_584 <= midfreq_shift_reg_0_load;
                elsif (((tmp_last_V_reg_4221 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    lowfreq_accumulate_2_fu_584 <= lowfreq_accumulate_3_reg_4236;
                end if;
            end if; 
        end if;
    end process;

    tmp_data_V_fu_508_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    tmp_data_V_fu_508 <= lowfreq_shift_reg_0_load;
                elsif (((tmp_last_V_fu_2241_p1 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    tmp_data_V_fu_508 <= SIGNAL_IN_TDATA;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                add_ln69_reg_4343 <= add_ln69_fu_3265_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                tmp_dest_V_reg_4231 <= SIGNAL_IN_TDEST;
                tmp_id_V_reg_4226 <= SIGNAL_IN_TID;
                tmp_keep_V_reg_4206 <= SIGNAL_IN_TKEEP;
                tmp_last_V_reg_4221 <= SIGNAL_IN_TLAST;
                tmp_strb_V_reg_4211 <= SIGNAL_IN_TSTRB;
                tmp_user_V_reg_4216 <= SIGNAL_IN_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                lowfreq_accumulate_3_reg_4236_pp0_iter2_reg <= lowfreq_accumulate_3_reg_4236;
                midfreq_accumulate_1_reg_4338 <= midfreq_accumulate_1_fu_2856_p2;
                p_load237_reg_4191_pp0_iter2_reg <= p_load237_reg_4191;
                p_load238_reg_4186_pp0_iter2_reg <= p_load238_reg_4186;
                p_load239_reg_4181_pp0_iter2_reg <= p_load239_reg_4181;
                p_load240_reg_4176_pp0_iter2_reg <= p_load240_reg_4176;
                p_load241_reg_4171_pp0_iter2_reg <= p_load241_reg_4171;
                p_load242_reg_4166_pp0_iter2_reg <= p_load242_reg_4166;
                p_load243_reg_4161_pp0_iter2_reg <= p_load243_reg_4161;
                p_load244_reg_4156_pp0_iter2_reg <= p_load244_reg_4156;
                p_load245_reg_4151_pp0_iter2_reg <= p_load245_reg_4151;
                p_load246_reg_4146_pp0_iter2_reg <= p_load246_reg_4146;
                p_load247_reg_4141_pp0_iter2_reg <= p_load247_reg_4141;
                p_load248_reg_4136_pp0_iter2_reg <= p_load248_reg_4136;
                p_load249_reg_4131_pp0_iter2_reg <= p_load249_reg_4131;
                p_load250_reg_4126_pp0_iter2_reg <= p_load250_reg_4126;
                p_load251_reg_4121_pp0_iter2_reg <= p_load251_reg_4121;
                p_load252_reg_4116_pp0_iter2_reg <= p_load252_reg_4116;
                p_load253_reg_4111_pp0_iter2_reg <= p_load253_reg_4111;
                p_load254_reg_4106_pp0_iter2_reg <= p_load254_reg_4106;
                tmp_data_V_1_reg_4201_pp0_iter2_reg <= tmp_data_V_1_reg_4201;
                tmp_data_V_load_reg_4196_pp0_iter2_reg <= tmp_data_V_load_reg_4196;
                tmp_dest_V_reg_4231_pp0_iter2_reg <= tmp_dest_V_reg_4231;
                tmp_id_V_reg_4226_pp0_iter2_reg <= tmp_id_V_reg_4226;
                tmp_keep_V_reg_4206_pp0_iter2_reg <= tmp_keep_V_reg_4206;
                tmp_last_V_reg_4221_pp0_iter2_reg <= tmp_last_V_reg_4221;
                tmp_strb_V_reg_4211_pp0_iter2_reg <= tmp_strb_V_reg_4211;
                tmp_user_V_reg_4216_pp0_iter2_reg <= tmp_user_V_reg_4216;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                lowfreq_accumulate_2_load_reg_4333 <= lowfreq_accumulate_2_fu_584;
                p_load218_reg_4328 <= empty_54_fu_580;
                p_load219_reg_4323 <= empty_53_fu_576;
                p_load220_reg_4318 <= empty_52_fu_572;
                p_load221_reg_4313 <= empty_51_fu_568;
                p_load222_reg_4308 <= empty_50_fu_564;
                p_load223_reg_4303 <= empty_49_fu_560;
                p_load224_reg_4298 <= empty_48_fu_556;
                p_load225_reg_4293 <= empty_47_fu_552;
                p_load226_reg_4288 <= empty_46_fu_548;
                p_load227_reg_4283 <= empty_45_fu_544;
                p_load228_reg_4278 <= empty_44_fu_540;
                p_load229_reg_4273 <= empty_43_fu_536;
                p_load230_reg_4268 <= empty_42_fu_532;
                p_load231_reg_4263 <= empty_41_fu_528;
                p_load232_reg_4258 <= empty_40_fu_524;
                p_load233_reg_4253 <= empty_39_fu_520;
                p_load234_reg_4248 <= empty_38_fu_516;
                p_load235_reg_4243 <= empty_37_fu_512;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                lowfreq_accumulate_3_reg_4236 <= lowfreq_accumulate_3_fu_2472_p2;
                p_load237_reg_4191 <= empty_36_fu_504;
                p_load238_reg_4186 <= empty_35_fu_500;
                p_load239_reg_4181 <= empty_34_fu_496;
                p_load240_reg_4176 <= empty_33_fu_492;
                p_load241_reg_4171 <= empty_32_fu_488;
                p_load242_reg_4166 <= empty_31_fu_484;
                p_load243_reg_4161 <= empty_30_fu_480;
                p_load244_reg_4156 <= empty_29_fu_476;
                p_load245_reg_4151 <= empty_28_fu_472;
                p_load246_reg_4146 <= empty_27_fu_468;
                p_load247_reg_4141 <= empty_26_fu_464;
                p_load248_reg_4136 <= empty_25_fu_460;
                p_load249_reg_4131 <= empty_24_fu_456;
                p_load250_reg_4126 <= empty_23_fu_452;
                p_load251_reg_4121 <= empty_22_fu_448;
                p_load252_reg_4116 <= empty_21_fu_444;
                p_load253_reg_4111 <= empty_20_fu_440;
                p_load254_reg_4106 <= empty_19_fu_436;
                tmp_data_V_1_reg_4201 <= SIGNAL_IN_TDATA;
                tmp_data_V_load_reg_4196 <= tmp_data_V_fu_508;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    SIGNAL_IN_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, SIGNAL_IN_TVALID, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            SIGNAL_IN_TDATA_blk_n <= SIGNAL_IN_TVALID;
        else 
            SIGNAL_IN_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    SIGNAL_IN_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            SIGNAL_IN_TREADY <= ap_const_logic_1;
        else 
            SIGNAL_IN_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    SIGNAL_OUT_TDATA <= highfreq_accumulate_2_fu_3258_p2;

    SIGNAL_OUT_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, SIGNAL_OUT_TREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            SIGNAL_OUT_TDATA_blk_n <= SIGNAL_OUT_TREADY;
        else 
            SIGNAL_OUT_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    SIGNAL_OUT_TDEST <= tmp_dest_V_reg_4231_pp0_iter2_reg;
    SIGNAL_OUT_TID <= tmp_id_V_reg_4226_pp0_iter2_reg;
    SIGNAL_OUT_TKEEP <= tmp_keep_V_reg_4206_pp0_iter2_reg;
    SIGNAL_OUT_TLAST <= tmp_last_V_reg_4221_pp0_iter2_reg;
    SIGNAL_OUT_TSTRB <= tmp_strb_V_reg_4211_pp0_iter2_reg;
    SIGNAL_OUT_TUSER <= tmp_user_V_reg_4216_pp0_iter2_reg;

    SIGNAL_OUT_TVALID_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            SIGNAL_OUT_TVALID <= ap_const_logic_1;
        else 
            SIGNAL_OUT_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    add_ln46_10_fu_2394_p2 <= std_logic_vector(unsigned(mul_ln43_14_fu_2328_p2) + unsigned(mul_ln43_15_fu_2333_p2));
    add_ln46_11_fu_2412_p2 <= std_logic_vector(unsigned(add_ln46_10_fu_2394_p2) + unsigned(mul_ln43_16_fu_2338_p2));
    add_ln46_12_fu_2418_p2 <= std_logic_vector(unsigned(add_ln46_11_fu_2412_p2) + unsigned(add_ln46_9_fu_2388_p2));
    add_ln46_13_fu_2406_p2 <= std_logic_vector(unsigned(mul_ln43_11_fu_2313_p2) + unsigned(mul_ln43_13_fu_2323_p2));
    add_ln46_14_fu_2424_p2 <= std_logic_vector(unsigned(add_ln46_13_fu_2406_p2) + unsigned(mul_ln43_12_fu_2318_p2));
    add_ln46_15_fu_2400_p2 <= std_logic_vector(unsigned(mul_ln43_10_fu_2308_p2) + unsigned(mul_ln46_fu_2353_p2));
    add_ln46_16_fu_2430_p2 <= std_logic_vector(unsigned(add_ln46_15_fu_2400_p2) + unsigned(mul_ln43_9_fu_2303_p2));
    add_ln46_17_fu_2436_p2 <= std_logic_vector(unsigned(add_ln46_16_fu_2430_p2) + unsigned(add_ln46_14_fu_2424_p2));
    add_ln46_18_fu_2442_p2 <= std_logic_vector(unsigned(add_ln46_17_fu_2436_p2) + unsigned(add_ln46_12_fu_2418_p2));
    add_ln46_1_fu_2364_p2 <= std_logic_vector(unsigned(mul_ln43_2_fu_2268_p2) + unsigned(mul_ln43_3_fu_2273_p2));
    add_ln46_2_fu_2454_p2 <= std_logic_vector(unsigned(add_ln46_1_fu_2364_p2) + unsigned(mul_ln43_1_fu_2263_p2));
    add_ln46_3_fu_2460_p2 <= std_logic_vector(unsigned(add_ln46_2_fu_2454_p2) + unsigned(add_ln46_fu_2358_p2));
    add_ln46_4_fu_2370_p2 <= std_logic_vector(unsigned(mul_ln43_7_fu_2293_p2) + unsigned(mul_ln43_8_fu_2298_p2));
    add_ln46_5_fu_2376_p2 <= std_logic_vector(unsigned(mul_ln43_4_fu_2278_p2) + unsigned(mul_ln43_5_fu_2283_p2));
    add_ln46_6_fu_2382_p2 <= std_logic_vector(unsigned(add_ln46_5_fu_2376_p2) + unsigned(mul_ln43_6_fu_2288_p2));
    add_ln46_7_fu_2448_p2 <= std_logic_vector(unsigned(add_ln46_6_fu_2382_p2) + unsigned(add_ln46_4_fu_2370_p2));
    add_ln46_8_fu_2466_p2 <= std_logic_vector(unsigned(add_ln46_3_fu_2460_p2) + unsigned(add_ln46_7_fu_2448_p2));
    add_ln46_9_fu_2388_p2 <= std_logic_vector(unsigned(mul_ln43_18_fu_2348_p2) + unsigned(mul_ln43_17_fu_2343_p2));
    add_ln46_fu_2358_p2 <= std_logic_vector(unsigned(mul_ln43_fu_2258_p2) + unsigned(lowfreq_accumulate_fu_2253_p2));
    add_ln57_10_fu_2802_p2 <= std_logic_vector(unsigned(mul_ln54_5_fu_2668_p2) + unsigned(mul_ln54_4_fu_2663_p2));
    add_ln57_11_fu_2808_p2 <= std_logic_vector(unsigned(add_ln57_10_fu_2802_p2) + unsigned(mul_ln54_6_fu_2673_p2));
    add_ln57_12_fu_2814_p2 <= std_logic_vector(unsigned(add_ln57_11_fu_2808_p2) + unsigned(add_ln57_9_fu_2796_p2));
    add_ln57_13_fu_2820_p2 <= std_logic_vector(unsigned(mul_ln54_2_fu_2653_p2) + unsigned(mul_ln54_1_fu_2648_p2));
    add_ln57_14_fu_2826_p2 <= std_logic_vector(unsigned(add_ln57_13_fu_2820_p2) + unsigned(mul_ln54_3_fu_2658_p2));
    add_ln57_15_fu_2832_p2 <= std_logic_vector(unsigned(mul_ln57_fu_2738_p2) + unsigned(midfreq_accumulate_fu_2638_p2));
    add_ln57_16_fu_2838_p2 <= std_logic_vector(unsigned(add_ln57_15_fu_2832_p2) + unsigned(mul_ln54_fu_2643_p2));
    add_ln57_17_fu_2844_p2 <= std_logic_vector(unsigned(add_ln57_16_fu_2838_p2) + unsigned(add_ln57_14_fu_2826_p2));
    add_ln57_18_fu_2850_p2 <= std_logic_vector(unsigned(add_ln57_17_fu_2844_p2) + unsigned(add_ln57_12_fu_2814_p2));
    add_ln57_1_fu_2748_p2 <= std_logic_vector(unsigned(mul_ln54_15_fu_2718_p2) + unsigned(mul_ln54_14_fu_2713_p2));
    add_ln57_2_fu_2754_p2 <= std_logic_vector(unsigned(add_ln57_1_fu_2748_p2) + unsigned(mul_ln54_16_fu_2723_p2));
    add_ln57_3_fu_2760_p2 <= std_logic_vector(unsigned(add_ln57_2_fu_2754_p2) + unsigned(add_ln57_fu_2742_p2));
    add_ln57_4_fu_2766_p2 <= std_logic_vector(unsigned(mul_ln54_13_fu_2708_p2) + unsigned(mul_ln54_12_fu_2703_p2));
    add_ln57_5_fu_2772_p2 <= std_logic_vector(unsigned(mul_ln54_10_fu_2693_p2) + unsigned(mul_ln54_9_fu_2688_p2));
    add_ln57_6_fu_2778_p2 <= std_logic_vector(unsigned(add_ln57_5_fu_2772_p2) + unsigned(mul_ln54_11_fu_2698_p2));
    add_ln57_7_fu_2784_p2 <= std_logic_vector(unsigned(add_ln57_6_fu_2778_p2) + unsigned(add_ln57_4_fu_2766_p2));
    add_ln57_8_fu_2790_p2 <= std_logic_vector(unsigned(add_ln57_7_fu_2784_p2) + unsigned(add_ln57_3_fu_2760_p2));
    add_ln57_9_fu_2796_p2 <= std_logic_vector(unsigned(mul_ln54_8_fu_2683_p2) + unsigned(mul_ln54_7_fu_2678_p2));
    add_ln57_fu_2742_p2 <= std_logic_vector(unsigned(mul_ln54_17_fu_2728_p2) + unsigned(mul_ln54_18_fu_2733_p2));
    add_ln68_10_fu_3204_p2 <= std_logic_vector(unsigned(mul_ln65_14_fu_3115_p2) + unsigned(mul_ln65_15_fu_3120_p2));
    add_ln68_11_fu_3210_p2 <= std_logic_vector(unsigned(add_ln68_10_fu_3204_p2) + unsigned(mul_ln65_16_fu_3125_p2));
    add_ln68_12_fu_3216_p2 <= std_logic_vector(unsigned(add_ln68_11_fu_3210_p2) + unsigned(add_ln68_9_fu_3198_p2));
    add_ln68_13_fu_3222_p2 <= std_logic_vector(unsigned(mul_ln65_13_fu_3110_p2) + unsigned(mul_ln65_11_fu_3100_p2));
    add_ln68_14_fu_3228_p2 <= std_logic_vector(unsigned(add_ln68_13_fu_3222_p2) + unsigned(mul_ln65_12_fu_3105_p2));
    add_ln68_15_fu_3234_p2 <= std_logic_vector(unsigned(mul_ln68_fu_3140_p2) + unsigned(mul_ln65_10_fu_3095_p2));
    add_ln68_16_fu_3240_p2 <= std_logic_vector(unsigned(add_ln68_15_fu_3234_p2) + unsigned(mul_ln65_9_fu_3090_p2));
    add_ln68_17_fu_3246_p2 <= std_logic_vector(unsigned(add_ln68_16_fu_3240_p2) + unsigned(add_ln68_14_fu_3228_p2));
    add_ln68_18_fu_3252_p2 <= std_logic_vector(unsigned(add_ln68_17_fu_3246_p2) + unsigned(add_ln68_12_fu_3216_p2));
    add_ln68_1_fu_3150_p2 <= std_logic_vector(unsigned(mul_ln65_2_fu_3055_p2) + unsigned(mul_ln65_3_fu_3060_p2));
    add_ln68_2_fu_3156_p2 <= std_logic_vector(unsigned(add_ln68_1_fu_3150_p2) + unsigned(mul_ln65_1_fu_3050_p2));
    add_ln68_3_fu_3162_p2 <= std_logic_vector(unsigned(add_ln68_2_fu_3156_p2) + unsigned(add_ln68_fu_3144_p2));
    add_ln68_4_fu_3168_p2 <= std_logic_vector(unsigned(mul_ln65_7_fu_3080_p2) + unsigned(mul_ln65_8_fu_3085_p2));
    add_ln68_5_fu_3174_p2 <= std_logic_vector(unsigned(mul_ln65_4_fu_3065_p2) + unsigned(mul_ln65_5_fu_3070_p2));
    add_ln68_6_fu_3180_p2 <= std_logic_vector(unsigned(add_ln68_5_fu_3174_p2) + unsigned(mul_ln65_6_fu_3075_p2));
    add_ln68_7_fu_3186_p2 <= std_logic_vector(unsigned(add_ln68_6_fu_3180_p2) + unsigned(add_ln68_4_fu_3168_p2));
    add_ln68_8_fu_3192_p2 <= std_logic_vector(unsigned(add_ln68_7_fu_3186_p2) + unsigned(add_ln68_3_fu_3162_p2));
    add_ln68_9_fu_3198_p2 <= std_logic_vector(unsigned(mul_ln65_18_fu_3135_p2) + unsigned(mul_ln65_17_fu_3130_p2));
    add_ln68_fu_3144_p2 <= std_logic_vector(unsigned(mul_ln65_fu_3045_p2) + unsigned(highfreq_accumulate_fu_3040_p2));
    add_ln69_fu_3265_p1 <= ap_sig_allocacmp_p_load;
    add_ln69_fu_3265_p2 <= std_logic_vector(unsigned(highfreq_accumulate_2_fu_3258_p2) + unsigned(add_ln69_fu_3265_p1));
    add_ln69_out <= std_logic_vector(unsigned(highfreq_accumulate_2_fu_3258_p2) + unsigned(add_ln69_fu_3265_p1));

    add_ln69_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            add_ln69_out_ap_vld <= ap_const_logic_1;
        else 
            add_ln69_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, SIGNAL_IN_TVALID, SIGNAL_OUT_TREADY)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_const_logic_0 = SIGNAL_OUT_TREADY) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_logic_0 = SIGNAL_IN_TVALID) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, SIGNAL_IN_TVALID, SIGNAL_OUT_TREADY)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_logic_0 = SIGNAL_OUT_TREADY) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_logic_0 = SIGNAL_IN_TVALID) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, SIGNAL_IN_TVALID, SIGNAL_OUT_TREADY)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_logic_0 = SIGNAL_OUT_TREADY) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_logic_0 = SIGNAL_IN_TVALID) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(SIGNAL_IN_TVALID)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (ap_const_logic_0 = SIGNAL_IN_TVALID);
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter3_assign_proc : process(SIGNAL_OUT_TREADY)
    begin
                ap_block_state4_pp0_stage0_iter3 <= (ap_const_logic_0 = SIGNAL_OUT_TREADY);
    end process;

        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, tmp_last_V_fu_2241_p1)
    begin
        if (((tmp_last_V_fu_2241_p1 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter3_stage0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_p_load_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, add_ln69_reg_4343, empty_73_fu_660)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_sig_allocacmp_p_load <= add_ln69_reg_4343;
        else 
            ap_sig_allocacmp_p_load <= empty_73_fu_660;
        end if; 
    end process;

    highfreq_accumulate_2_fu_3258_p2 <= std_logic_vector(unsigned(add_ln68_18_fu_3252_p2) + unsigned(add_ln68_8_fu_3192_p2));
    lowfreq_accumulate_1_out <= lowfreq_accumulate_3_reg_4236_pp0_iter2_reg;

    lowfreq_accumulate_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            lowfreq_accumulate_1_out_ap_vld <= ap_const_logic_1;
        else 
            lowfreq_accumulate_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    lowfreq_accumulate_3_fu_2472_p2 <= std_logic_vector(unsigned(add_ln46_8_fu_2466_p2) + unsigned(add_ln46_18_fu_2442_p2));
    midfreq_accumulate_1_fu_2856_p2 <= std_logic_vector(unsigned(add_ln57_18_fu_2850_p2) + unsigned(add_ln57_8_fu_2790_p2));
    p_out <= empty_73_fu_660;
    p_out1 <= empty_72_fu_656;
    p_out10 <= empty_63_fu_620;

    p_out10_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out10_ap_vld <= ap_const_logic_1;
        else 
            p_out10_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out11 <= empty_62_fu_616;

    p_out11_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out11_ap_vld <= ap_const_logic_1;
        else 
            p_out11_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out12 <= empty_61_fu_612;

    p_out12_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out12_ap_vld <= ap_const_logic_1;
        else 
            p_out12_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out13 <= empty_60_fu_608;

    p_out13_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out13_ap_vld <= ap_const_logic_1;
        else 
            p_out13_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out14 <= empty_59_fu_604;

    p_out14_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out14_ap_vld <= ap_const_logic_1;
        else 
            p_out14_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out15 <= empty_58_fu_600;

    p_out15_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out15_ap_vld <= ap_const_logic_1;
        else 
            p_out15_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out16 <= empty_57_fu_596;

    p_out16_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out16_ap_vld <= ap_const_logic_1;
        else 
            p_out16_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out17 <= empty_56_fu_592;

    p_out17_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out17_ap_vld <= ap_const_logic_1;
        else 
            p_out17_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out18 <= empty_55_fu_588;

    p_out18_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out18_ap_vld <= ap_const_logic_1;
        else 
            p_out18_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out19 <= lowfreq_accumulate_2_load_reg_4333;

    p_out19_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out19_ap_vld <= ap_const_logic_1;
        else 
            p_out19_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    p_out1_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out1_ap_vld <= ap_const_logic_1;
        else 
            p_out1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out2 <= empty_71_fu_652;
    p_out20 <= p_load218_reg_4328;

    p_out20_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out20_ap_vld <= ap_const_logic_1;
        else 
            p_out20_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out21 <= p_load219_reg_4323;

    p_out21_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out21_ap_vld <= ap_const_logic_1;
        else 
            p_out21_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out22 <= p_load220_reg_4318;

    p_out22_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out22_ap_vld <= ap_const_logic_1;
        else 
            p_out22_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out23 <= p_load221_reg_4313;

    p_out23_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out23_ap_vld <= ap_const_logic_1;
        else 
            p_out23_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out24 <= p_load222_reg_4308;

    p_out24_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out24_ap_vld <= ap_const_logic_1;
        else 
            p_out24_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out25 <= p_load223_reg_4303;

    p_out25_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out25_ap_vld <= ap_const_logic_1;
        else 
            p_out25_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out26 <= p_load224_reg_4298;

    p_out26_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out26_ap_vld <= ap_const_logic_1;
        else 
            p_out26_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out27 <= p_load225_reg_4293;

    p_out27_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out27_ap_vld <= ap_const_logic_1;
        else 
            p_out27_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out28 <= p_load226_reg_4288;

    p_out28_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out28_ap_vld <= ap_const_logic_1;
        else 
            p_out28_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out29 <= p_load227_reg_4283;

    p_out29_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out29_ap_vld <= ap_const_logic_1;
        else 
            p_out29_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    p_out2_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out2_ap_vld <= ap_const_logic_1;
        else 
            p_out2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out3 <= empty_70_fu_648;
    p_out30 <= p_load228_reg_4278;

    p_out30_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out30_ap_vld <= ap_const_logic_1;
        else 
            p_out30_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out31 <= p_load229_reg_4273;

    p_out31_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out31_ap_vld <= ap_const_logic_1;
        else 
            p_out31_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out32 <= p_load230_reg_4268;

    p_out32_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out32_ap_vld <= ap_const_logic_1;
        else 
            p_out32_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out33 <= p_load231_reg_4263;

    p_out33_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out33_ap_vld <= ap_const_logic_1;
        else 
            p_out33_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out34 <= p_load232_reg_4258;

    p_out34_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out34_ap_vld <= ap_const_logic_1;
        else 
            p_out34_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out35 <= p_load233_reg_4253;

    p_out35_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out35_ap_vld <= ap_const_logic_1;
        else 
            p_out35_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out36 <= p_load234_reg_4248;

    p_out36_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out36_ap_vld <= ap_const_logic_1;
        else 
            p_out36_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out37 <= p_load235_reg_4243;

    p_out37_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out37_ap_vld <= ap_const_logic_1;
        else 
            p_out37_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out38 <= tmp_data_V_load_reg_4196_pp0_iter2_reg;

    p_out38_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out38_ap_vld <= ap_const_logic_1;
        else 
            p_out38_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out39 <= p_load237_reg_4191_pp0_iter2_reg;

    p_out39_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out39_ap_vld <= ap_const_logic_1;
        else 
            p_out39_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    p_out3_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out3_ap_vld <= ap_const_logic_1;
        else 
            p_out3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out4 <= empty_69_fu_644;
    p_out40 <= p_load238_reg_4186_pp0_iter2_reg;

    p_out40_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out40_ap_vld <= ap_const_logic_1;
        else 
            p_out40_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out41 <= p_load239_reg_4181_pp0_iter2_reg;

    p_out41_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out41_ap_vld <= ap_const_logic_1;
        else 
            p_out41_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out42 <= p_load240_reg_4176_pp0_iter2_reg;

    p_out42_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out42_ap_vld <= ap_const_logic_1;
        else 
            p_out42_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out43 <= p_load241_reg_4171_pp0_iter2_reg;

    p_out43_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out43_ap_vld <= ap_const_logic_1;
        else 
            p_out43_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out44 <= p_load242_reg_4166_pp0_iter2_reg;

    p_out44_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out44_ap_vld <= ap_const_logic_1;
        else 
            p_out44_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out45 <= p_load243_reg_4161_pp0_iter2_reg;

    p_out45_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out45_ap_vld <= ap_const_logic_1;
        else 
            p_out45_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out46 <= p_load244_reg_4156_pp0_iter2_reg;

    p_out46_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out46_ap_vld <= ap_const_logic_1;
        else 
            p_out46_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out47 <= p_load245_reg_4151_pp0_iter2_reg;

    p_out47_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out47_ap_vld <= ap_const_logic_1;
        else 
            p_out47_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out48 <= p_load246_reg_4146_pp0_iter2_reg;

    p_out48_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out48_ap_vld <= ap_const_logic_1;
        else 
            p_out48_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out49 <= p_load247_reg_4141_pp0_iter2_reg;

    p_out49_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out49_ap_vld <= ap_const_logic_1;
        else 
            p_out49_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    p_out4_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out4_ap_vld <= ap_const_logic_1;
        else 
            p_out4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out5 <= empty_68_fu_640;
    p_out50 <= p_load248_reg_4136_pp0_iter2_reg;

    p_out50_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out50_ap_vld <= ap_const_logic_1;
        else 
            p_out50_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out51 <= p_load249_reg_4131_pp0_iter2_reg;

    p_out51_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out51_ap_vld <= ap_const_logic_1;
        else 
            p_out51_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out52 <= p_load250_reg_4126_pp0_iter2_reg;

    p_out52_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out52_ap_vld <= ap_const_logic_1;
        else 
            p_out52_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out53 <= p_load251_reg_4121_pp0_iter2_reg;

    p_out53_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out53_ap_vld <= ap_const_logic_1;
        else 
            p_out53_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out54 <= p_load252_reg_4116_pp0_iter2_reg;

    p_out54_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out54_ap_vld <= ap_const_logic_1;
        else 
            p_out54_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out55 <= p_load253_reg_4111_pp0_iter2_reg;

    p_out55_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out55_ap_vld <= ap_const_logic_1;
        else 
            p_out55_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out56 <= p_load254_reg_4106_pp0_iter2_reg;

    p_out56_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out56_ap_vld <= ap_const_logic_1;
        else 
            p_out56_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    p_out5_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out5_ap_vld <= ap_const_logic_1;
        else 
            p_out5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out6 <= empty_67_fu_636;

    p_out6_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out6_ap_vld <= ap_const_logic_1;
        else 
            p_out6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out7 <= empty_66_fu_632;

    p_out7_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out7_ap_vld <= ap_const_logic_1;
        else 
            p_out7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out8 <= empty_65_fu_628;

    p_out8_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out8_ap_vld <= ap_const_logic_1;
        else 
            p_out8_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out9 <= empty_64_fu_624;

    p_out9_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out9_ap_vld <= ap_const_logic_1;
        else 
            p_out9_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    p_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out_ap_vld <= ap_const_logic_1;
        else 
            p_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_data_V_out <= tmp_data_V_1_reg_4201_pp0_iter2_reg;

    tmp_data_V_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_last_V_reg_4221_pp0_iter2_reg)
    begin
        if (((tmp_last_V_reg_4221_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            tmp_data_V_out_ap_vld <= ap_const_logic_1;
        else 
            tmp_data_V_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_last_V_fu_2241_p1 <= SIGNAL_IN_TLAST;
end behav;
