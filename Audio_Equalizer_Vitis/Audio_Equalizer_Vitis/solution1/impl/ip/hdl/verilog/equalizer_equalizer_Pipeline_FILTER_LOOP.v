// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module equalizer_equalizer_Pipeline_FILTER_LOOP (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        SIGNAL_IN_TVALID,
        SIGNAL_OUT_TREADY,
        highfreq_shift_reg_0_load,
        highfreq_shift_reg_1_load,
        highfreq_shift_reg_2_load,
        highfreq_shift_reg_3_load,
        highfreq_shift_reg_4_load,
        highfreq_shift_reg_5_load,
        highfreq_shift_reg_6_load,
        highfreq_shift_reg_7_load,
        highfreq_shift_reg_8_load,
        highfreq_shift_reg_9_load,
        highfreq_shift_reg_10_load,
        highfreq_shift_reg_11_load,
        highfreq_shift_reg_12_load,
        highfreq_shift_reg_13_load,
        highfreq_shift_reg_14_load,
        highfreq_shift_reg_15_load,
        highfreq_shift_reg_16_load,
        highfreq_shift_reg_17_load,
        highfreq_shift_reg_18_load,
        highfreq_shift_reg_19_load,
        midfreq_shift_reg_0_load,
        midfreq_shift_reg_1_load,
        midfreq_shift_reg_2_load,
        midfreq_shift_reg_3_load,
        midfreq_shift_reg_4_load,
        midfreq_shift_reg_5_load,
        midfreq_shift_reg_6_load,
        midfreq_shift_reg_7_load,
        midfreq_shift_reg_8_load,
        midfreq_shift_reg_9_load,
        midfreq_shift_reg_10_load,
        midfreq_shift_reg_11_load,
        midfreq_shift_reg_12_load,
        midfreq_shift_reg_13_load,
        midfreq_shift_reg_14_load,
        midfreq_shift_reg_15_load,
        midfreq_shift_reg_16_load,
        midfreq_shift_reg_17_load,
        midfreq_shift_reg_18_load,
        midfreq_shift_reg_19_load,
        lowfreq_shift_reg_0_load,
        lowfreq_shift_reg_1_load,
        lowfreq_shift_reg_2_load,
        lowfreq_shift_reg_3_load,
        lowfreq_shift_reg_4_load,
        lowfreq_shift_reg_5_load,
        lowfreq_shift_reg_6_load,
        lowfreq_shift_reg_7_load,
        lowfreq_shift_reg_8_load,
        lowfreq_shift_reg_9_load,
        lowfreq_shift_reg_10_load,
        lowfreq_shift_reg_11_load,
        lowfreq_shift_reg_12_load,
        lowfreq_shift_reg_13_load,
        lowfreq_shift_reg_14_load,
        lowfreq_shift_reg_15_load,
        lowfreq_shift_reg_16_load,
        lowfreq_shift_reg_17_load,
        lowfreq_shift_reg_18_load,
        lowfreq_shift_reg_19_load,
        SIGNAL_IN_TDATA,
        SIGNAL_IN_TREADY,
        SIGNAL_IN_TKEEP,
        SIGNAL_IN_TSTRB,
        SIGNAL_IN_TUSER,
        SIGNAL_IN_TLAST,
        SIGNAL_IN_TID,
        SIGNAL_IN_TDEST,
        gmem_addr_read_20,
        gmem_addr_read_19,
        gmem_addr_read_18,
        gmem_addr_read_17,
        gmem_addr_read_16,
        gmem_addr_read_15,
        gmem_addr_read_14,
        gmem_addr_read_13,
        gmem_addr_read_12,
        gmem_addr_read_11,
        gmem_addr_read_10,
        gmem_addr_read_9,
        gmem_addr_read_8,
        gmem_addr_read_7,
        gmem_addr_read_6,
        gmem_addr_read_5,
        gmem_addr_read_4,
        gmem_addr_read_3,
        gmem_addr_read_2,
        gmem_addr_read_1,
        gmem_addr_read,
        gmem_addr_read_41,
        gmem_addr_read_40,
        gmem_addr_read_39,
        gmem_addr_read_38,
        gmem_addr_read_37,
        gmem_addr_read_36,
        gmem_addr_read_35,
        gmem_addr_read_34,
        gmem_addr_read_33,
        gmem_addr_read_32,
        gmem_addr_read_31,
        gmem_addr_read_30,
        gmem_addr_read_29,
        gmem_addr_read_28,
        gmem_addr_read_27,
        gmem_addr_read_26,
        gmem_addr_read_25,
        gmem_addr_read_24,
        gmem_addr_read_23,
        gmem_addr_read_22,
        gmem_addr_read_21,
        gmem_addr_read_62,
        gmem_addr_read_61,
        gmem_addr_read_60,
        gmem_addr_read_59,
        gmem_addr_read_58,
        gmem_addr_read_57,
        gmem_addr_read_56,
        gmem_addr_read_55,
        gmem_addr_read_54,
        gmem_addr_read_53,
        gmem_addr_read_52,
        gmem_addr_read_51,
        gmem_addr_read_50,
        gmem_addr_read_49,
        gmem_addr_read_48,
        gmem_addr_read_47,
        gmem_addr_read_46,
        gmem_addr_read_45,
        gmem_addr_read_44,
        gmem_addr_read_43,
        gmem_addr_read_42,
        SIGNAL_OUT_TDATA,
        SIGNAL_OUT_TVALID,
        SIGNAL_OUT_TKEEP,
        SIGNAL_OUT_TSTRB,
        SIGNAL_OUT_TUSER,
        SIGNAL_OUT_TLAST,
        SIGNAL_OUT_TID,
        SIGNAL_OUT_TDEST,
        p_out,
        p_out_ap_vld,
        p_out1,
        p_out1_ap_vld,
        p_out2,
        p_out2_ap_vld,
        p_out3,
        p_out3_ap_vld,
        p_out4,
        p_out4_ap_vld,
        p_out5,
        p_out5_ap_vld,
        p_out6,
        p_out6_ap_vld,
        p_out7,
        p_out7_ap_vld,
        p_out8,
        p_out8_ap_vld,
        p_out9,
        p_out9_ap_vld,
        p_out10,
        p_out10_ap_vld,
        p_out11,
        p_out11_ap_vld,
        p_out12,
        p_out12_ap_vld,
        p_out13,
        p_out13_ap_vld,
        p_out14,
        p_out14_ap_vld,
        p_out15,
        p_out15_ap_vld,
        p_out16,
        p_out16_ap_vld,
        p_out17,
        p_out17_ap_vld,
        p_out18,
        p_out18_ap_vld,
        p_out19,
        p_out19_ap_vld,
        p_out20,
        p_out20_ap_vld,
        p_out21,
        p_out21_ap_vld,
        p_out22,
        p_out22_ap_vld,
        p_out23,
        p_out23_ap_vld,
        p_out24,
        p_out24_ap_vld,
        p_out25,
        p_out25_ap_vld,
        p_out26,
        p_out26_ap_vld,
        p_out27,
        p_out27_ap_vld,
        p_out28,
        p_out28_ap_vld,
        p_out29,
        p_out29_ap_vld,
        p_out30,
        p_out30_ap_vld,
        p_out31,
        p_out31_ap_vld,
        p_out32,
        p_out32_ap_vld,
        p_out33,
        p_out33_ap_vld,
        p_out34,
        p_out34_ap_vld,
        p_out35,
        p_out35_ap_vld,
        p_out36,
        p_out36_ap_vld,
        p_out37,
        p_out37_ap_vld,
        p_out38,
        p_out38_ap_vld,
        p_out39,
        p_out39_ap_vld,
        p_out40,
        p_out40_ap_vld,
        p_out41,
        p_out41_ap_vld,
        p_out42,
        p_out42_ap_vld,
        p_out43,
        p_out43_ap_vld,
        p_out44,
        p_out44_ap_vld,
        p_out45,
        p_out45_ap_vld,
        p_out46,
        p_out46_ap_vld,
        p_out47,
        p_out47_ap_vld,
        p_out48,
        p_out48_ap_vld,
        p_out49,
        p_out49_ap_vld,
        p_out50,
        p_out50_ap_vld,
        p_out51,
        p_out51_ap_vld,
        p_out52,
        p_out52_ap_vld,
        p_out53,
        p_out53_ap_vld,
        p_out54,
        p_out54_ap_vld,
        p_out55,
        p_out55_ap_vld,
        p_out56,
        p_out56_ap_vld,
        tmp_data_V_out,
        tmp_data_V_out_ap_vld,
        lowfreq_accumulate_1_out,
        lowfreq_accumulate_1_out_ap_vld,
        add_ln69_out,
        add_ln69_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   SIGNAL_IN_TVALID;
input   SIGNAL_OUT_TREADY;
input  [31:0] highfreq_shift_reg_0_load;
input  [31:0] highfreq_shift_reg_1_load;
input  [31:0] highfreq_shift_reg_2_load;
input  [31:0] highfreq_shift_reg_3_load;
input  [31:0] highfreq_shift_reg_4_load;
input  [31:0] highfreq_shift_reg_5_load;
input  [31:0] highfreq_shift_reg_6_load;
input  [31:0] highfreq_shift_reg_7_load;
input  [31:0] highfreq_shift_reg_8_load;
input  [31:0] highfreq_shift_reg_9_load;
input  [31:0] highfreq_shift_reg_10_load;
input  [31:0] highfreq_shift_reg_11_load;
input  [31:0] highfreq_shift_reg_12_load;
input  [31:0] highfreq_shift_reg_13_load;
input  [31:0] highfreq_shift_reg_14_load;
input  [31:0] highfreq_shift_reg_15_load;
input  [31:0] highfreq_shift_reg_16_load;
input  [31:0] highfreq_shift_reg_17_load;
input  [31:0] highfreq_shift_reg_18_load;
input  [31:0] highfreq_shift_reg_19_load;
input  [31:0] midfreq_shift_reg_0_load;
input  [31:0] midfreq_shift_reg_1_load;
input  [31:0] midfreq_shift_reg_2_load;
input  [31:0] midfreq_shift_reg_3_load;
input  [31:0] midfreq_shift_reg_4_load;
input  [31:0] midfreq_shift_reg_5_load;
input  [31:0] midfreq_shift_reg_6_load;
input  [31:0] midfreq_shift_reg_7_load;
input  [31:0] midfreq_shift_reg_8_load;
input  [31:0] midfreq_shift_reg_9_load;
input  [31:0] midfreq_shift_reg_10_load;
input  [31:0] midfreq_shift_reg_11_load;
input  [31:0] midfreq_shift_reg_12_load;
input  [31:0] midfreq_shift_reg_13_load;
input  [31:0] midfreq_shift_reg_14_load;
input  [31:0] midfreq_shift_reg_15_load;
input  [31:0] midfreq_shift_reg_16_load;
input  [31:0] midfreq_shift_reg_17_load;
input  [31:0] midfreq_shift_reg_18_load;
input  [31:0] midfreq_shift_reg_19_load;
input  [31:0] lowfreq_shift_reg_0_load;
input  [31:0] lowfreq_shift_reg_1_load;
input  [31:0] lowfreq_shift_reg_2_load;
input  [31:0] lowfreq_shift_reg_3_load;
input  [31:0] lowfreq_shift_reg_4_load;
input  [31:0] lowfreq_shift_reg_5_load;
input  [31:0] lowfreq_shift_reg_6_load;
input  [31:0] lowfreq_shift_reg_7_load;
input  [31:0] lowfreq_shift_reg_8_load;
input  [31:0] lowfreq_shift_reg_9_load;
input  [31:0] lowfreq_shift_reg_10_load;
input  [31:0] lowfreq_shift_reg_11_load;
input  [31:0] lowfreq_shift_reg_12_load;
input  [31:0] lowfreq_shift_reg_13_load;
input  [31:0] lowfreq_shift_reg_14_load;
input  [31:0] lowfreq_shift_reg_15_load;
input  [31:0] lowfreq_shift_reg_16_load;
input  [31:0] lowfreq_shift_reg_17_load;
input  [31:0] lowfreq_shift_reg_18_load;
input  [31:0] lowfreq_shift_reg_19_load;
input  [31:0] SIGNAL_IN_TDATA;
output   SIGNAL_IN_TREADY;
input  [3:0] SIGNAL_IN_TKEEP;
input  [3:0] SIGNAL_IN_TSTRB;
input  [0:0] SIGNAL_IN_TUSER;
input  [0:0] SIGNAL_IN_TLAST;
input  [0:0] SIGNAL_IN_TID;
input  [0:0] SIGNAL_IN_TDEST;
input  [31:0] gmem_addr_read_20;
input  [31:0] gmem_addr_read_19;
input  [31:0] gmem_addr_read_18;
input  [31:0] gmem_addr_read_17;
input  [31:0] gmem_addr_read_16;
input  [31:0] gmem_addr_read_15;
input  [31:0] gmem_addr_read_14;
input  [31:0] gmem_addr_read_13;
input  [31:0] gmem_addr_read_12;
input  [31:0] gmem_addr_read_11;
input  [31:0] gmem_addr_read_10;
input  [31:0] gmem_addr_read_9;
input  [31:0] gmem_addr_read_8;
input  [31:0] gmem_addr_read_7;
input  [31:0] gmem_addr_read_6;
input  [31:0] gmem_addr_read_5;
input  [31:0] gmem_addr_read_4;
input  [31:0] gmem_addr_read_3;
input  [31:0] gmem_addr_read_2;
input  [31:0] gmem_addr_read_1;
input  [31:0] gmem_addr_read;
input  [31:0] gmem_addr_read_41;
input  [31:0] gmem_addr_read_40;
input  [31:0] gmem_addr_read_39;
input  [31:0] gmem_addr_read_38;
input  [31:0] gmem_addr_read_37;
input  [31:0] gmem_addr_read_36;
input  [31:0] gmem_addr_read_35;
input  [31:0] gmem_addr_read_34;
input  [31:0] gmem_addr_read_33;
input  [31:0] gmem_addr_read_32;
input  [31:0] gmem_addr_read_31;
input  [31:0] gmem_addr_read_30;
input  [31:0] gmem_addr_read_29;
input  [31:0] gmem_addr_read_28;
input  [31:0] gmem_addr_read_27;
input  [31:0] gmem_addr_read_26;
input  [31:0] gmem_addr_read_25;
input  [31:0] gmem_addr_read_24;
input  [31:0] gmem_addr_read_23;
input  [31:0] gmem_addr_read_22;
input  [31:0] gmem_addr_read_21;
input  [31:0] gmem_addr_read_62;
input  [31:0] gmem_addr_read_61;
input  [31:0] gmem_addr_read_60;
input  [31:0] gmem_addr_read_59;
input  [31:0] gmem_addr_read_58;
input  [31:0] gmem_addr_read_57;
input  [31:0] gmem_addr_read_56;
input  [31:0] gmem_addr_read_55;
input  [31:0] gmem_addr_read_54;
input  [31:0] gmem_addr_read_53;
input  [31:0] gmem_addr_read_52;
input  [31:0] gmem_addr_read_51;
input  [31:0] gmem_addr_read_50;
input  [31:0] gmem_addr_read_49;
input  [31:0] gmem_addr_read_48;
input  [31:0] gmem_addr_read_47;
input  [31:0] gmem_addr_read_46;
input  [31:0] gmem_addr_read_45;
input  [31:0] gmem_addr_read_44;
input  [31:0] gmem_addr_read_43;
input  [31:0] gmem_addr_read_42;
output  [31:0] SIGNAL_OUT_TDATA;
output   SIGNAL_OUT_TVALID;
output  [3:0] SIGNAL_OUT_TKEEP;
output  [3:0] SIGNAL_OUT_TSTRB;
output  [0:0] SIGNAL_OUT_TUSER;
output  [0:0] SIGNAL_OUT_TLAST;
output  [0:0] SIGNAL_OUT_TID;
output  [0:0] SIGNAL_OUT_TDEST;
output  [31:0] p_out;
output   p_out_ap_vld;
output  [31:0] p_out1;
output   p_out1_ap_vld;
output  [31:0] p_out2;
output   p_out2_ap_vld;
output  [31:0] p_out3;
output   p_out3_ap_vld;
output  [31:0] p_out4;
output   p_out4_ap_vld;
output  [31:0] p_out5;
output   p_out5_ap_vld;
output  [31:0] p_out6;
output   p_out6_ap_vld;
output  [31:0] p_out7;
output   p_out7_ap_vld;
output  [31:0] p_out8;
output   p_out8_ap_vld;
output  [31:0] p_out9;
output   p_out9_ap_vld;
output  [31:0] p_out10;
output   p_out10_ap_vld;
output  [31:0] p_out11;
output   p_out11_ap_vld;
output  [31:0] p_out12;
output   p_out12_ap_vld;
output  [31:0] p_out13;
output   p_out13_ap_vld;
output  [31:0] p_out14;
output   p_out14_ap_vld;
output  [31:0] p_out15;
output   p_out15_ap_vld;
output  [31:0] p_out16;
output   p_out16_ap_vld;
output  [31:0] p_out17;
output   p_out17_ap_vld;
output  [31:0] p_out18;
output   p_out18_ap_vld;
output  [31:0] p_out19;
output   p_out19_ap_vld;
output  [31:0] p_out20;
output   p_out20_ap_vld;
output  [31:0] p_out21;
output   p_out21_ap_vld;
output  [31:0] p_out22;
output   p_out22_ap_vld;
output  [31:0] p_out23;
output   p_out23_ap_vld;
output  [31:0] p_out24;
output   p_out24_ap_vld;
output  [31:0] p_out25;
output   p_out25_ap_vld;
output  [31:0] p_out26;
output   p_out26_ap_vld;
output  [31:0] p_out27;
output   p_out27_ap_vld;
output  [31:0] p_out28;
output   p_out28_ap_vld;
output  [31:0] p_out29;
output   p_out29_ap_vld;
output  [31:0] p_out30;
output   p_out30_ap_vld;
output  [31:0] p_out31;
output   p_out31_ap_vld;
output  [31:0] p_out32;
output   p_out32_ap_vld;
output  [31:0] p_out33;
output   p_out33_ap_vld;
output  [31:0] p_out34;
output   p_out34_ap_vld;
output  [31:0] p_out35;
output   p_out35_ap_vld;
output  [31:0] p_out36;
output   p_out36_ap_vld;
output  [31:0] p_out37;
output   p_out37_ap_vld;
output  [31:0] p_out38;
output   p_out38_ap_vld;
output  [31:0] p_out39;
output   p_out39_ap_vld;
output  [31:0] p_out40;
output   p_out40_ap_vld;
output  [31:0] p_out41;
output   p_out41_ap_vld;
output  [31:0] p_out42;
output   p_out42_ap_vld;
output  [31:0] p_out43;
output   p_out43_ap_vld;
output  [31:0] p_out44;
output   p_out44_ap_vld;
output  [31:0] p_out45;
output   p_out45_ap_vld;
output  [31:0] p_out46;
output   p_out46_ap_vld;
output  [31:0] p_out47;
output   p_out47_ap_vld;
output  [31:0] p_out48;
output   p_out48_ap_vld;
output  [31:0] p_out49;
output   p_out49_ap_vld;
output  [31:0] p_out50;
output   p_out50_ap_vld;
output  [31:0] p_out51;
output   p_out51_ap_vld;
output  [31:0] p_out52;
output   p_out52_ap_vld;
output  [31:0] p_out53;
output   p_out53_ap_vld;
output  [31:0] p_out54;
output   p_out54_ap_vld;
output  [31:0] p_out55;
output   p_out55_ap_vld;
output  [31:0] p_out56;
output   p_out56_ap_vld;
output  [31:0] tmp_data_V_out;
output   tmp_data_V_out_ap_vld;
output  [31:0] lowfreq_accumulate_1_out;
output   lowfreq_accumulate_1_out_ap_vld;
output  [31:0] add_ln69_out;
output   add_ln69_out_ap_vld;

reg ap_idle;
reg SIGNAL_IN_TREADY;
reg SIGNAL_OUT_TVALID;
reg p_out_ap_vld;
reg p_out1_ap_vld;
reg p_out2_ap_vld;
reg p_out3_ap_vld;
reg p_out4_ap_vld;
reg p_out5_ap_vld;
reg p_out6_ap_vld;
reg p_out7_ap_vld;
reg p_out8_ap_vld;
reg p_out9_ap_vld;
reg p_out10_ap_vld;
reg p_out11_ap_vld;
reg p_out12_ap_vld;
reg p_out13_ap_vld;
reg p_out14_ap_vld;
reg p_out15_ap_vld;
reg p_out16_ap_vld;
reg p_out17_ap_vld;
reg p_out18_ap_vld;
reg p_out19_ap_vld;
reg p_out20_ap_vld;
reg p_out21_ap_vld;
reg p_out22_ap_vld;
reg p_out23_ap_vld;
reg p_out24_ap_vld;
reg p_out25_ap_vld;
reg p_out26_ap_vld;
reg p_out27_ap_vld;
reg p_out28_ap_vld;
reg p_out29_ap_vld;
reg p_out30_ap_vld;
reg p_out31_ap_vld;
reg p_out32_ap_vld;
reg p_out33_ap_vld;
reg p_out34_ap_vld;
reg p_out35_ap_vld;
reg p_out36_ap_vld;
reg p_out37_ap_vld;
reg p_out38_ap_vld;
reg p_out39_ap_vld;
reg p_out40_ap_vld;
reg p_out41_ap_vld;
reg p_out42_ap_vld;
reg p_out43_ap_vld;
reg p_out44_ap_vld;
reg p_out45_ap_vld;
reg p_out46_ap_vld;
reg p_out47_ap_vld;
reg p_out48_ap_vld;
reg p_out49_ap_vld;
reg p_out50_ap_vld;
reg p_out51_ap_vld;
reg p_out52_ap_vld;
reg p_out53_ap_vld;
reg p_out54_ap_vld;
reg p_out55_ap_vld;
reg p_out56_ap_vld;
reg tmp_data_V_out_ap_vld;
reg lowfreq_accumulate_1_out_ap_vld;
reg add_ln69_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] tmp_last_V_fu_2241_p1;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    SIGNAL_IN_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    SIGNAL_OUT_TDATA_blk_n;
reg    ap_block_pp0_stage0_11001;
reg  signed [31:0] p_load254_reg_4106;
reg  signed [31:0] p_load254_reg_4106_pp0_iter2_reg;
reg  signed [31:0] p_load253_reg_4111;
reg  signed [31:0] p_load253_reg_4111_pp0_iter2_reg;
reg  signed [31:0] p_load252_reg_4116;
reg  signed [31:0] p_load252_reg_4116_pp0_iter2_reg;
reg  signed [31:0] p_load251_reg_4121;
reg  signed [31:0] p_load251_reg_4121_pp0_iter2_reg;
reg  signed [31:0] p_load250_reg_4126;
reg  signed [31:0] p_load250_reg_4126_pp0_iter2_reg;
reg  signed [31:0] p_load249_reg_4131;
reg  signed [31:0] p_load249_reg_4131_pp0_iter2_reg;
reg  signed [31:0] p_load248_reg_4136;
reg  signed [31:0] p_load248_reg_4136_pp0_iter2_reg;
reg  signed [31:0] p_load247_reg_4141;
reg  signed [31:0] p_load247_reg_4141_pp0_iter2_reg;
reg  signed [31:0] p_load246_reg_4146;
reg  signed [31:0] p_load246_reg_4146_pp0_iter2_reg;
reg  signed [31:0] p_load245_reg_4151;
reg  signed [31:0] p_load245_reg_4151_pp0_iter2_reg;
reg  signed [31:0] p_load244_reg_4156;
reg  signed [31:0] p_load244_reg_4156_pp0_iter2_reg;
reg  signed [31:0] p_load243_reg_4161;
reg  signed [31:0] p_load243_reg_4161_pp0_iter2_reg;
reg  signed [31:0] p_load242_reg_4166;
reg  signed [31:0] p_load242_reg_4166_pp0_iter2_reg;
reg  signed [31:0] p_load241_reg_4171;
reg  signed [31:0] p_load241_reg_4171_pp0_iter2_reg;
reg  signed [31:0] p_load240_reg_4176;
reg  signed [31:0] p_load240_reg_4176_pp0_iter2_reg;
reg  signed [31:0] p_load239_reg_4181;
reg  signed [31:0] p_load239_reg_4181_pp0_iter2_reg;
reg  signed [31:0] p_load238_reg_4186;
reg  signed [31:0] p_load238_reg_4186_pp0_iter2_reg;
reg  signed [31:0] p_load237_reg_4191;
reg  signed [31:0] p_load237_reg_4191_pp0_iter2_reg;
reg  signed [31:0] tmp_data_V_load_reg_4196;
reg  signed [31:0] tmp_data_V_load_reg_4196_pp0_iter2_reg;
reg  signed [31:0] tmp_data_V_1_reg_4201;
reg  signed [31:0] tmp_data_V_1_reg_4201_pp0_iter2_reg;
reg   [3:0] tmp_keep_V_reg_4206;
reg   [3:0] tmp_keep_V_reg_4206_pp0_iter2_reg;
reg   [3:0] tmp_strb_V_reg_4211;
reg   [3:0] tmp_strb_V_reg_4211_pp0_iter2_reg;
reg   [0:0] tmp_user_V_reg_4216;
reg   [0:0] tmp_user_V_reg_4216_pp0_iter2_reg;
reg   [0:0] tmp_last_V_reg_4221;
reg   [0:0] tmp_last_V_reg_4221_pp0_iter2_reg;
reg   [0:0] tmp_id_V_reg_4226;
reg   [0:0] tmp_id_V_reg_4226_pp0_iter2_reg;
reg   [0:0] tmp_dest_V_reg_4231;
reg   [0:0] tmp_dest_V_reg_4231_pp0_iter2_reg;
wire  signed [31:0] lowfreq_accumulate_3_fu_2472_p2;
reg  signed [31:0] lowfreq_accumulate_3_reg_4236;
reg  signed [31:0] lowfreq_accumulate_3_reg_4236_pp0_iter2_reg;
reg  signed [31:0] p_load235_reg_4243;
reg  signed [31:0] p_load234_reg_4248;
reg  signed [31:0] p_load233_reg_4253;
reg  signed [31:0] p_load232_reg_4258;
reg  signed [31:0] p_load231_reg_4263;
reg  signed [31:0] p_load230_reg_4268;
reg  signed [31:0] p_load229_reg_4273;
reg  signed [31:0] p_load228_reg_4278;
reg  signed [31:0] p_load227_reg_4283;
reg  signed [31:0] p_load226_reg_4288;
reg  signed [31:0] p_load225_reg_4293;
reg  signed [31:0] p_load224_reg_4298;
reg  signed [31:0] p_load223_reg_4303;
reg  signed [31:0] p_load222_reg_4308;
reg  signed [31:0] p_load221_reg_4313;
reg  signed [31:0] p_load220_reg_4318;
reg  signed [31:0] p_load219_reg_4323;
reg  signed [31:0] p_load218_reg_4328;
reg  signed [31:0] lowfreq_accumulate_2_load_reg_4333;
wire  signed [31:0] midfreq_accumulate_1_fu_2856_p2;
reg  signed [31:0] midfreq_accumulate_1_reg_4338;
wire   [31:0] add_ln69_fu_3265_p2;
reg   [31:0] add_ln69_reg_4343;
reg    ap_condition_exit_pp0_iter3_stage0;
reg  signed [31:0] empty_fu_424;
wire    ap_loop_init;
reg  signed [31:0] empty_17_fu_428;
reg  signed [31:0] empty_18_fu_432;
reg  signed [31:0] empty_19_fu_436;
reg  signed [31:0] empty_20_fu_440;
reg  signed [31:0] empty_21_fu_444;
reg  signed [31:0] empty_22_fu_448;
reg  signed [31:0] empty_23_fu_452;
reg  signed [31:0] empty_24_fu_456;
reg  signed [31:0] empty_25_fu_460;
reg  signed [31:0] empty_26_fu_464;
reg  signed [31:0] empty_27_fu_468;
reg  signed [31:0] empty_28_fu_472;
reg  signed [31:0] empty_29_fu_476;
reg  signed [31:0] empty_30_fu_480;
reg  signed [31:0] empty_31_fu_484;
reg  signed [31:0] empty_32_fu_488;
reg  signed [31:0] empty_33_fu_492;
reg  signed [31:0] empty_34_fu_496;
reg  signed [31:0] empty_35_fu_500;
reg  signed [31:0] empty_36_fu_504;
reg  signed [31:0] tmp_data_V_fu_508;
reg  signed [31:0] empty_37_fu_512;
reg  signed [31:0] empty_38_fu_516;
reg  signed [31:0] empty_39_fu_520;
reg  signed [31:0] empty_40_fu_524;
reg  signed [31:0] empty_41_fu_528;
reg  signed [31:0] empty_42_fu_532;
reg  signed [31:0] empty_43_fu_536;
reg  signed [31:0] empty_44_fu_540;
reg  signed [31:0] empty_45_fu_544;
reg  signed [31:0] empty_46_fu_548;
reg  signed [31:0] empty_47_fu_552;
reg  signed [31:0] empty_48_fu_556;
reg  signed [31:0] empty_49_fu_560;
reg  signed [31:0] empty_50_fu_564;
reg  signed [31:0] empty_51_fu_568;
reg  signed [31:0] empty_52_fu_572;
reg  signed [31:0] empty_53_fu_576;
reg  signed [31:0] empty_54_fu_580;
reg  signed [31:0] lowfreq_accumulate_2_fu_584;
reg  signed [31:0] empty_55_fu_588;
reg  signed [31:0] empty_56_fu_592;
reg  signed [31:0] empty_57_fu_596;
reg  signed [31:0] empty_58_fu_600;
reg  signed [31:0] empty_59_fu_604;
reg  signed [31:0] empty_60_fu_608;
reg  signed [31:0] empty_61_fu_612;
reg  signed [31:0] empty_62_fu_616;
reg  signed [31:0] empty_63_fu_620;
reg  signed [31:0] empty_64_fu_624;
reg  signed [31:0] empty_65_fu_628;
reg  signed [31:0] empty_66_fu_632;
reg  signed [31:0] empty_67_fu_636;
reg  signed [31:0] empty_68_fu_640;
reg  signed [31:0] empty_69_fu_644;
reg  signed [31:0] empty_70_fu_648;
reg  signed [31:0] empty_71_fu_652;
reg  signed [31:0] empty_72_fu_656;
reg   [31:0] empty_73_fu_660;
reg  signed [31:0] ap_sig_allocacmp_p_load;
wire   [31:0] highfreq_accumulate_2_fu_3258_p2;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] mul_ln43_fu_2258_p2;
wire   [31:0] lowfreq_accumulate_fu_2253_p2;
wire   [31:0] mul_ln43_2_fu_2268_p2;
wire   [31:0] mul_ln43_3_fu_2273_p2;
wire   [31:0] mul_ln43_7_fu_2293_p2;
wire   [31:0] mul_ln43_8_fu_2298_p2;
wire   [31:0] mul_ln43_4_fu_2278_p2;
wire   [31:0] mul_ln43_5_fu_2283_p2;
wire   [31:0] add_ln46_5_fu_2376_p2;
wire   [31:0] mul_ln43_6_fu_2288_p2;
wire   [31:0] mul_ln43_18_fu_2348_p2;
wire   [31:0] mul_ln43_17_fu_2343_p2;
wire   [31:0] mul_ln43_14_fu_2328_p2;
wire   [31:0] mul_ln43_15_fu_2333_p2;
wire   [31:0] mul_ln43_10_fu_2308_p2;
wire   [31:0] mul_ln46_fu_2353_p2;
wire   [31:0] mul_ln43_11_fu_2313_p2;
wire   [31:0] mul_ln43_13_fu_2323_p2;
wire   [31:0] add_ln46_10_fu_2394_p2;
wire   [31:0] mul_ln43_16_fu_2338_p2;
wire   [31:0] add_ln46_11_fu_2412_p2;
wire   [31:0] add_ln46_9_fu_2388_p2;
wire   [31:0] add_ln46_13_fu_2406_p2;
wire   [31:0] mul_ln43_12_fu_2318_p2;
wire   [31:0] add_ln46_15_fu_2400_p2;
wire   [31:0] mul_ln43_9_fu_2303_p2;
wire   [31:0] add_ln46_16_fu_2430_p2;
wire   [31:0] add_ln46_14_fu_2424_p2;
wire   [31:0] add_ln46_17_fu_2436_p2;
wire   [31:0] add_ln46_12_fu_2418_p2;
wire   [31:0] add_ln46_6_fu_2382_p2;
wire   [31:0] add_ln46_4_fu_2370_p2;
wire   [31:0] add_ln46_1_fu_2364_p2;
wire   [31:0] mul_ln43_1_fu_2263_p2;
wire   [31:0] add_ln46_2_fu_2454_p2;
wire   [31:0] add_ln46_fu_2358_p2;
wire   [31:0] add_ln46_3_fu_2460_p2;
wire   [31:0] add_ln46_7_fu_2448_p2;
wire   [31:0] add_ln46_8_fu_2466_p2;
wire   [31:0] add_ln46_18_fu_2442_p2;
wire   [31:0] mul_ln54_17_fu_2728_p2;
wire   [31:0] mul_ln54_18_fu_2733_p2;
wire   [31:0] mul_ln54_15_fu_2718_p2;
wire   [31:0] mul_ln54_14_fu_2713_p2;
wire   [31:0] add_ln57_1_fu_2748_p2;
wire   [31:0] mul_ln54_16_fu_2723_p2;
wire   [31:0] add_ln57_2_fu_2754_p2;
wire   [31:0] add_ln57_fu_2742_p2;
wire   [31:0] mul_ln54_13_fu_2708_p2;
wire   [31:0] mul_ln54_12_fu_2703_p2;
wire   [31:0] mul_ln54_10_fu_2693_p2;
wire   [31:0] mul_ln54_9_fu_2688_p2;
wire   [31:0] add_ln57_5_fu_2772_p2;
wire   [31:0] mul_ln54_11_fu_2698_p2;
wire   [31:0] add_ln57_6_fu_2778_p2;
wire   [31:0] add_ln57_4_fu_2766_p2;
wire   [31:0] add_ln57_7_fu_2784_p2;
wire   [31:0] add_ln57_3_fu_2760_p2;
wire   [31:0] mul_ln54_8_fu_2683_p2;
wire   [31:0] mul_ln54_7_fu_2678_p2;
wire   [31:0] mul_ln54_5_fu_2668_p2;
wire   [31:0] mul_ln54_4_fu_2663_p2;
wire   [31:0] add_ln57_10_fu_2802_p2;
wire   [31:0] mul_ln54_6_fu_2673_p2;
wire   [31:0] add_ln57_11_fu_2808_p2;
wire   [31:0] add_ln57_9_fu_2796_p2;
wire   [31:0] mul_ln54_2_fu_2653_p2;
wire   [31:0] mul_ln54_1_fu_2648_p2;
wire   [31:0] add_ln57_13_fu_2820_p2;
wire   [31:0] mul_ln54_3_fu_2658_p2;
wire   [31:0] mul_ln57_fu_2738_p2;
wire   [31:0] midfreq_accumulate_fu_2638_p2;
wire   [31:0] add_ln57_15_fu_2832_p2;
wire   [31:0] mul_ln54_fu_2643_p2;
wire   [31:0] add_ln57_16_fu_2838_p2;
wire   [31:0] add_ln57_14_fu_2826_p2;
wire   [31:0] add_ln57_17_fu_2844_p2;
wire   [31:0] add_ln57_12_fu_2814_p2;
wire   [31:0] add_ln57_18_fu_2850_p2;
wire   [31:0] add_ln57_8_fu_2790_p2;
wire   [31:0] mul_ln65_fu_3045_p2;
wire   [31:0] highfreq_accumulate_fu_3040_p2;
wire   [31:0] mul_ln65_2_fu_3055_p2;
wire   [31:0] mul_ln65_3_fu_3060_p2;
wire   [31:0] add_ln68_1_fu_3150_p2;
wire   [31:0] mul_ln65_1_fu_3050_p2;
wire   [31:0] add_ln68_2_fu_3156_p2;
wire   [31:0] add_ln68_fu_3144_p2;
wire   [31:0] mul_ln65_7_fu_3080_p2;
wire   [31:0] mul_ln65_8_fu_3085_p2;
wire   [31:0] mul_ln65_4_fu_3065_p2;
wire   [31:0] mul_ln65_5_fu_3070_p2;
wire   [31:0] add_ln68_5_fu_3174_p2;
wire   [31:0] mul_ln65_6_fu_3075_p2;
wire   [31:0] add_ln68_6_fu_3180_p2;
wire   [31:0] add_ln68_4_fu_3168_p2;
wire   [31:0] add_ln68_7_fu_3186_p2;
wire   [31:0] add_ln68_3_fu_3162_p2;
wire   [31:0] mul_ln65_18_fu_3135_p2;
wire   [31:0] mul_ln65_17_fu_3130_p2;
wire   [31:0] mul_ln65_14_fu_3115_p2;
wire   [31:0] mul_ln65_15_fu_3120_p2;
wire   [31:0] add_ln68_10_fu_3204_p2;
wire   [31:0] mul_ln65_16_fu_3125_p2;
wire   [31:0] add_ln68_11_fu_3210_p2;
wire   [31:0] add_ln68_9_fu_3198_p2;
wire   [31:0] mul_ln65_13_fu_3110_p2;
wire   [31:0] mul_ln65_11_fu_3100_p2;
wire   [31:0] add_ln68_13_fu_3222_p2;
wire   [31:0] mul_ln65_12_fu_3105_p2;
wire   [31:0] mul_ln68_fu_3140_p2;
wire   [31:0] mul_ln65_10_fu_3095_p2;
wire   [31:0] add_ln68_15_fu_3234_p2;
wire   [31:0] mul_ln65_9_fu_3090_p2;
wire   [31:0] add_ln68_16_fu_3240_p2;
wire   [31:0] add_ln68_14_fu_3228_p2;
wire   [31:0] add_ln68_17_fu_3246_p2;
wire   [31:0] add_ln68_12_fu_3216_p2;
wire   [31:0] add_ln68_18_fu_3252_p2;
wire   [31:0] add_ln68_8_fu_3192_p2;
wire  signed [31:0] add_ln69_fu_3265_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U1(
    .din0(empty_fu_424),
    .din1(gmem_addr_read_20),
    .dout(lowfreq_accumulate_fu_2253_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U2(
    .din0(empty_19_fu_436),
    .din1(gmem_addr_read_19),
    .dout(mul_ln43_fu_2258_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U3(
    .din0(empty_20_fu_440),
    .din1(gmem_addr_read_18),
    .dout(mul_ln43_1_fu_2263_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U4(
    .din0(empty_21_fu_444),
    .din1(gmem_addr_read_17),
    .dout(mul_ln43_2_fu_2268_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U5(
    .din0(empty_22_fu_448),
    .din1(gmem_addr_read_16),
    .dout(mul_ln43_3_fu_2273_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U6(
    .din0(empty_23_fu_452),
    .din1(gmem_addr_read_15),
    .dout(mul_ln43_4_fu_2278_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U7(
    .din0(empty_24_fu_456),
    .din1(gmem_addr_read_14),
    .dout(mul_ln43_5_fu_2283_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U8(
    .din0(empty_25_fu_460),
    .din1(gmem_addr_read_13),
    .dout(mul_ln43_6_fu_2288_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U9(
    .din0(empty_26_fu_464),
    .din1(gmem_addr_read_12),
    .dout(mul_ln43_7_fu_2293_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U10(
    .din0(empty_27_fu_468),
    .din1(gmem_addr_read_11),
    .dout(mul_ln43_8_fu_2298_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U11(
    .din0(empty_28_fu_472),
    .din1(gmem_addr_read_10),
    .dout(mul_ln43_9_fu_2303_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U12(
    .din0(empty_29_fu_476),
    .din1(gmem_addr_read_9),
    .dout(mul_ln43_10_fu_2308_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U13(
    .din0(empty_30_fu_480),
    .din1(gmem_addr_read_8),
    .dout(mul_ln43_11_fu_2313_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U14(
    .din0(empty_31_fu_484),
    .din1(gmem_addr_read_7),
    .dout(mul_ln43_12_fu_2318_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U15(
    .din0(empty_32_fu_488),
    .din1(gmem_addr_read_6),
    .dout(mul_ln43_13_fu_2323_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U16(
    .din0(empty_33_fu_492),
    .din1(gmem_addr_read_5),
    .dout(mul_ln43_14_fu_2328_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U17(
    .din0(empty_34_fu_496),
    .din1(gmem_addr_read_4),
    .dout(mul_ln43_15_fu_2333_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U18(
    .din0(empty_35_fu_500),
    .din1(gmem_addr_read_3),
    .dout(mul_ln43_16_fu_2338_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U19(
    .din0(empty_36_fu_504),
    .din1(gmem_addr_read_2),
    .dout(mul_ln43_17_fu_2343_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U20(
    .din0(tmp_data_V_fu_508),
    .din1(gmem_addr_read_1),
    .dout(mul_ln43_18_fu_2348_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U21(
    .din0(SIGNAL_IN_TDATA),
    .din1(gmem_addr_read),
    .dout(mul_ln46_fu_2353_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U22(
    .din0(empty_17_fu_428),
    .din1(gmem_addr_read_41),
    .dout(midfreq_accumulate_fu_2638_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U23(
    .din0(empty_37_fu_512),
    .din1(gmem_addr_read_40),
    .dout(mul_ln54_fu_2643_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U24(
    .din0(empty_38_fu_516),
    .din1(gmem_addr_read_39),
    .dout(mul_ln54_1_fu_2648_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U25(
    .din0(empty_39_fu_520),
    .din1(gmem_addr_read_38),
    .dout(mul_ln54_2_fu_2653_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U26(
    .din0(empty_40_fu_524),
    .din1(gmem_addr_read_37),
    .dout(mul_ln54_3_fu_2658_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U27(
    .din0(empty_41_fu_528),
    .din1(gmem_addr_read_36),
    .dout(mul_ln54_4_fu_2663_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U28(
    .din0(empty_42_fu_532),
    .din1(gmem_addr_read_35),
    .dout(mul_ln54_5_fu_2668_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U29(
    .din0(empty_43_fu_536),
    .din1(gmem_addr_read_34),
    .dout(mul_ln54_6_fu_2673_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U30(
    .din0(empty_44_fu_540),
    .din1(gmem_addr_read_33),
    .dout(mul_ln54_7_fu_2678_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U31(
    .din0(empty_45_fu_544),
    .din1(gmem_addr_read_32),
    .dout(mul_ln54_8_fu_2683_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U32(
    .din0(empty_46_fu_548),
    .din1(gmem_addr_read_31),
    .dout(mul_ln54_9_fu_2688_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U33(
    .din0(empty_47_fu_552),
    .din1(gmem_addr_read_30),
    .dout(mul_ln54_10_fu_2693_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U34(
    .din0(empty_48_fu_556),
    .din1(gmem_addr_read_29),
    .dout(mul_ln54_11_fu_2698_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U35(
    .din0(empty_49_fu_560),
    .din1(gmem_addr_read_28),
    .dout(mul_ln54_12_fu_2703_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U36(
    .din0(empty_50_fu_564),
    .din1(gmem_addr_read_27),
    .dout(mul_ln54_13_fu_2708_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U37(
    .din0(empty_51_fu_568),
    .din1(gmem_addr_read_26),
    .dout(mul_ln54_14_fu_2713_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U38(
    .din0(empty_52_fu_572),
    .din1(gmem_addr_read_25),
    .dout(mul_ln54_15_fu_2718_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U39(
    .din0(empty_53_fu_576),
    .din1(gmem_addr_read_24),
    .dout(mul_ln54_16_fu_2723_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U40(
    .din0(empty_54_fu_580),
    .din1(gmem_addr_read_23),
    .dout(mul_ln54_17_fu_2728_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U41(
    .din0(lowfreq_accumulate_2_fu_584),
    .din1(gmem_addr_read_22),
    .dout(mul_ln54_18_fu_2733_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U42(
    .din0(lowfreq_accumulate_3_reg_4236),
    .din1(gmem_addr_read_21),
    .dout(mul_ln57_fu_2738_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U43(
    .din0(empty_18_fu_432),
    .din1(gmem_addr_read_62),
    .dout(highfreq_accumulate_fu_3040_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U44(
    .din0(empty_55_fu_588),
    .din1(gmem_addr_read_61),
    .dout(mul_ln65_fu_3045_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U45(
    .din0(empty_56_fu_592),
    .din1(gmem_addr_read_60),
    .dout(mul_ln65_1_fu_3050_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U46(
    .din0(empty_57_fu_596),
    .din1(gmem_addr_read_59),
    .dout(mul_ln65_2_fu_3055_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U47(
    .din0(empty_58_fu_600),
    .din1(gmem_addr_read_58),
    .dout(mul_ln65_3_fu_3060_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U48(
    .din0(empty_59_fu_604),
    .din1(gmem_addr_read_57),
    .dout(mul_ln65_4_fu_3065_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U49(
    .din0(empty_60_fu_608),
    .din1(gmem_addr_read_56),
    .dout(mul_ln65_5_fu_3070_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U50(
    .din0(empty_61_fu_612),
    .din1(gmem_addr_read_55),
    .dout(mul_ln65_6_fu_3075_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U51(
    .din0(empty_62_fu_616),
    .din1(gmem_addr_read_54),
    .dout(mul_ln65_7_fu_3080_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U52(
    .din0(empty_63_fu_620),
    .din1(gmem_addr_read_53),
    .dout(mul_ln65_8_fu_3085_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U53(
    .din0(empty_64_fu_624),
    .din1(gmem_addr_read_52),
    .dout(mul_ln65_9_fu_3090_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U54(
    .din0(empty_65_fu_628),
    .din1(gmem_addr_read_51),
    .dout(mul_ln65_10_fu_3095_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U55(
    .din0(empty_66_fu_632),
    .din1(gmem_addr_read_50),
    .dout(mul_ln65_11_fu_3100_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U56(
    .din0(empty_67_fu_636),
    .din1(gmem_addr_read_49),
    .dout(mul_ln65_12_fu_3105_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U57(
    .din0(empty_68_fu_640),
    .din1(gmem_addr_read_48),
    .dout(mul_ln65_13_fu_3110_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U58(
    .din0(empty_69_fu_644),
    .din1(gmem_addr_read_47),
    .dout(mul_ln65_14_fu_3115_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U59(
    .din0(empty_70_fu_648),
    .din1(gmem_addr_read_46),
    .dout(mul_ln65_15_fu_3120_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U60(
    .din0(empty_71_fu_652),
    .din1(gmem_addr_read_45),
    .dout(mul_ln65_16_fu_3125_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U61(
    .din0(empty_72_fu_656),
    .din1(gmem_addr_read_44),
    .dout(mul_ln65_17_fu_3130_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U62(
    .din0(ap_sig_allocacmp_p_load),
    .din1(gmem_addr_read_43),
    .dout(mul_ln65_18_fu_3135_p2)
);

equalizer_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U63(
    .din0(midfreq_accumulate_1_reg_4338),
    .din1(gmem_addr_read_42),
    .dout(mul_ln68_fu_3140_p2)
);

equalizer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter3_stage0)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_17_fu_428 <= midfreq_shift_reg_19_load;
        end else if (((tmp_last_V_reg_4221 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            empty_17_fu_428 <= empty_37_fu_512;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_18_fu_432 <= highfreq_shift_reg_19_load;
        end else if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            empty_18_fu_432 <= empty_55_fu_588;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_19_fu_436 <= lowfreq_shift_reg_18_load;
        end else if (((tmp_last_V_fu_2241_p1 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_19_fu_436 <= empty_20_fu_440;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_20_fu_440 <= lowfreq_shift_reg_17_load;
        end else if (((tmp_last_V_fu_2241_p1 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_20_fu_440 <= empty_21_fu_444;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_21_fu_444 <= lowfreq_shift_reg_16_load;
        end else if (((tmp_last_V_fu_2241_p1 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_21_fu_444 <= empty_22_fu_448;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_22_fu_448 <= lowfreq_shift_reg_15_load;
        end else if (((tmp_last_V_fu_2241_p1 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_22_fu_448 <= empty_23_fu_452;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_23_fu_452 <= lowfreq_shift_reg_14_load;
        end else if (((tmp_last_V_fu_2241_p1 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_23_fu_452 <= empty_24_fu_456;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_24_fu_456 <= lowfreq_shift_reg_13_load;
        end else if (((tmp_last_V_fu_2241_p1 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_24_fu_456 <= empty_25_fu_460;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_25_fu_460 <= lowfreq_shift_reg_12_load;
        end else if (((tmp_last_V_fu_2241_p1 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_25_fu_460 <= empty_26_fu_464;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_26_fu_464 <= lowfreq_shift_reg_11_load;
        end else if (((tmp_last_V_fu_2241_p1 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_26_fu_464 <= empty_27_fu_468;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_27_fu_468 <= lowfreq_shift_reg_10_load;
        end else if (((tmp_last_V_fu_2241_p1 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_27_fu_468 <= empty_28_fu_472;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_28_fu_472 <= lowfreq_shift_reg_9_load;
        end else if (((tmp_last_V_fu_2241_p1 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_28_fu_472 <= empty_29_fu_476;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_29_fu_476 <= lowfreq_shift_reg_8_load;
        end else if (((tmp_last_V_fu_2241_p1 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_29_fu_476 <= empty_30_fu_480;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_30_fu_480 <= lowfreq_shift_reg_7_load;
        end else if (((tmp_last_V_fu_2241_p1 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_30_fu_480 <= empty_31_fu_484;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_31_fu_484 <= lowfreq_shift_reg_6_load;
        end else if (((tmp_last_V_fu_2241_p1 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_31_fu_484 <= empty_32_fu_488;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_32_fu_488 <= lowfreq_shift_reg_5_load;
        end else if (((tmp_last_V_fu_2241_p1 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_32_fu_488 <= empty_33_fu_492;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_33_fu_492 <= lowfreq_shift_reg_4_load;
        end else if (((tmp_last_V_fu_2241_p1 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_33_fu_492 <= empty_34_fu_496;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_34_fu_496 <= lowfreq_shift_reg_3_load;
        end else if (((tmp_last_V_fu_2241_p1 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_34_fu_496 <= empty_35_fu_500;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_35_fu_500 <= lowfreq_shift_reg_2_load;
        end else if (((tmp_last_V_fu_2241_p1 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_35_fu_500 <= empty_36_fu_504;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_36_fu_504 <= lowfreq_shift_reg_1_load;
        end else if (((tmp_last_V_fu_2241_p1 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_36_fu_504 <= tmp_data_V_fu_508;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_37_fu_512 <= midfreq_shift_reg_18_load;
        end else if (((tmp_last_V_reg_4221 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            empty_37_fu_512 <= empty_38_fu_516;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_38_fu_516 <= midfreq_shift_reg_17_load;
        end else if (((tmp_last_V_reg_4221 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            empty_38_fu_516 <= empty_39_fu_520;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_39_fu_520 <= midfreq_shift_reg_16_load;
        end else if (((tmp_last_V_reg_4221 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            empty_39_fu_520 <= empty_40_fu_524;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_40_fu_524 <= midfreq_shift_reg_15_load;
        end else if (((tmp_last_V_reg_4221 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            empty_40_fu_524 <= empty_41_fu_528;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_41_fu_528 <= midfreq_shift_reg_14_load;
        end else if (((tmp_last_V_reg_4221 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            empty_41_fu_528 <= empty_42_fu_532;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_42_fu_532 <= midfreq_shift_reg_13_load;
        end else if (((tmp_last_V_reg_4221 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            empty_42_fu_532 <= empty_43_fu_536;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_43_fu_536 <= midfreq_shift_reg_12_load;
        end else if (((tmp_last_V_reg_4221 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            empty_43_fu_536 <= empty_44_fu_540;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_44_fu_540 <= midfreq_shift_reg_11_load;
        end else if (((tmp_last_V_reg_4221 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            empty_44_fu_540 <= empty_45_fu_544;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_45_fu_544 <= midfreq_shift_reg_10_load;
        end else if (((tmp_last_V_reg_4221 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            empty_45_fu_544 <= empty_46_fu_548;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_46_fu_548 <= midfreq_shift_reg_9_load;
        end else if (((tmp_last_V_reg_4221 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            empty_46_fu_548 <= empty_47_fu_552;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_47_fu_552 <= midfreq_shift_reg_8_load;
        end else if (((tmp_last_V_reg_4221 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            empty_47_fu_552 <= empty_48_fu_556;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_48_fu_556 <= midfreq_shift_reg_7_load;
        end else if (((tmp_last_V_reg_4221 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            empty_48_fu_556 <= empty_49_fu_560;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_49_fu_560 <= midfreq_shift_reg_6_load;
        end else if (((tmp_last_V_reg_4221 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            empty_49_fu_560 <= empty_50_fu_564;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_50_fu_564 <= midfreq_shift_reg_5_load;
        end else if (((tmp_last_V_reg_4221 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            empty_50_fu_564 <= empty_51_fu_568;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_51_fu_568 <= midfreq_shift_reg_4_load;
        end else if (((tmp_last_V_reg_4221 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            empty_51_fu_568 <= empty_52_fu_572;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_52_fu_572 <= midfreq_shift_reg_3_load;
        end else if (((tmp_last_V_reg_4221 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            empty_52_fu_572 <= empty_53_fu_576;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_53_fu_576 <= midfreq_shift_reg_2_load;
        end else if (((tmp_last_V_reg_4221 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            empty_53_fu_576 <= empty_54_fu_580;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_54_fu_580 <= midfreq_shift_reg_1_load;
        end else if (((tmp_last_V_reg_4221 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            empty_54_fu_580 <= lowfreq_accumulate_2_fu_584;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_55_fu_588 <= highfreq_shift_reg_18_load;
        end else if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            empty_55_fu_588 <= empty_56_fu_592;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_56_fu_592 <= highfreq_shift_reg_17_load;
        end else if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            empty_56_fu_592 <= empty_57_fu_596;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_57_fu_596 <= highfreq_shift_reg_16_load;
        end else if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            empty_57_fu_596 <= empty_58_fu_600;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_58_fu_600 <= highfreq_shift_reg_15_load;
        end else if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            empty_58_fu_600 <= empty_59_fu_604;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_59_fu_604 <= highfreq_shift_reg_14_load;
        end else if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            empty_59_fu_604 <= empty_60_fu_608;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_60_fu_608 <= highfreq_shift_reg_13_load;
        end else if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            empty_60_fu_608 <= empty_61_fu_612;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_61_fu_612 <= highfreq_shift_reg_12_load;
        end else if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            empty_61_fu_612 <= empty_62_fu_616;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_62_fu_616 <= highfreq_shift_reg_11_load;
        end else if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            empty_62_fu_616 <= empty_63_fu_620;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_63_fu_620 <= highfreq_shift_reg_10_load;
        end else if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            empty_63_fu_620 <= empty_64_fu_624;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_64_fu_624 <= highfreq_shift_reg_9_load;
        end else if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            empty_64_fu_624 <= empty_65_fu_628;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_65_fu_628 <= highfreq_shift_reg_8_load;
        end else if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            empty_65_fu_628 <= empty_66_fu_632;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_66_fu_632 <= highfreq_shift_reg_7_load;
        end else if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            empty_66_fu_632 <= empty_67_fu_636;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_67_fu_636 <= highfreq_shift_reg_6_load;
        end else if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            empty_67_fu_636 <= empty_68_fu_640;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_68_fu_640 <= highfreq_shift_reg_5_load;
        end else if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            empty_68_fu_640 <= empty_69_fu_644;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_69_fu_644 <= highfreq_shift_reg_4_load;
        end else if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            empty_69_fu_644 <= empty_70_fu_648;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_70_fu_648 <= highfreq_shift_reg_3_load;
        end else if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            empty_70_fu_648 <= empty_71_fu_652;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_71_fu_652 <= highfreq_shift_reg_2_load;
        end else if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            empty_71_fu_652 <= empty_72_fu_656;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_72_fu_656 <= highfreq_shift_reg_1_load;
        end else if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            empty_72_fu_656 <= ap_sig_allocacmp_p_load;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_73_fu_660 <= highfreq_shift_reg_0_load;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            empty_73_fu_660 <= add_ln69_reg_4343;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_fu_424 <= lowfreq_shift_reg_19_load;
        end else if (((tmp_last_V_fu_2241_p1 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_fu_424 <= empty_19_fu_436;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            lowfreq_accumulate_2_fu_584 <= midfreq_shift_reg_0_load;
        end else if (((tmp_last_V_reg_4221 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            lowfreq_accumulate_2_fu_584 <= lowfreq_accumulate_3_reg_4236;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            tmp_data_V_fu_508 <= lowfreq_shift_reg_0_load;
        end else if (((tmp_last_V_fu_2241_p1 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            tmp_data_V_fu_508 <= SIGNAL_IN_TDATA;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        add_ln69_reg_4343 <= add_ln69_fu_3265_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        tmp_dest_V_reg_4231 <= SIGNAL_IN_TDEST;
        tmp_id_V_reg_4226 <= SIGNAL_IN_TID;
        tmp_keep_V_reg_4206 <= SIGNAL_IN_TKEEP;
        tmp_last_V_reg_4221 <= SIGNAL_IN_TLAST;
        tmp_strb_V_reg_4211 <= SIGNAL_IN_TSTRB;
        tmp_user_V_reg_4216 <= SIGNAL_IN_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        lowfreq_accumulate_3_reg_4236_pp0_iter2_reg <= lowfreq_accumulate_3_reg_4236;
        midfreq_accumulate_1_reg_4338 <= midfreq_accumulate_1_fu_2856_p2;
        p_load237_reg_4191_pp0_iter2_reg <= p_load237_reg_4191;
        p_load238_reg_4186_pp0_iter2_reg <= p_load238_reg_4186;
        p_load239_reg_4181_pp0_iter2_reg <= p_load239_reg_4181;
        p_load240_reg_4176_pp0_iter2_reg <= p_load240_reg_4176;
        p_load241_reg_4171_pp0_iter2_reg <= p_load241_reg_4171;
        p_load242_reg_4166_pp0_iter2_reg <= p_load242_reg_4166;
        p_load243_reg_4161_pp0_iter2_reg <= p_load243_reg_4161;
        p_load244_reg_4156_pp0_iter2_reg <= p_load244_reg_4156;
        p_load245_reg_4151_pp0_iter2_reg <= p_load245_reg_4151;
        p_load246_reg_4146_pp0_iter2_reg <= p_load246_reg_4146;
        p_load247_reg_4141_pp0_iter2_reg <= p_load247_reg_4141;
        p_load248_reg_4136_pp0_iter2_reg <= p_load248_reg_4136;
        p_load249_reg_4131_pp0_iter2_reg <= p_load249_reg_4131;
        p_load250_reg_4126_pp0_iter2_reg <= p_load250_reg_4126;
        p_load251_reg_4121_pp0_iter2_reg <= p_load251_reg_4121;
        p_load252_reg_4116_pp0_iter2_reg <= p_load252_reg_4116;
        p_load253_reg_4111_pp0_iter2_reg <= p_load253_reg_4111;
        p_load254_reg_4106_pp0_iter2_reg <= p_load254_reg_4106;
        tmp_data_V_1_reg_4201_pp0_iter2_reg <= tmp_data_V_1_reg_4201;
        tmp_data_V_load_reg_4196_pp0_iter2_reg <= tmp_data_V_load_reg_4196;
        tmp_dest_V_reg_4231_pp0_iter2_reg <= tmp_dest_V_reg_4231;
        tmp_id_V_reg_4226_pp0_iter2_reg <= tmp_id_V_reg_4226;
        tmp_keep_V_reg_4206_pp0_iter2_reg <= tmp_keep_V_reg_4206;
        tmp_last_V_reg_4221_pp0_iter2_reg <= tmp_last_V_reg_4221;
        tmp_strb_V_reg_4211_pp0_iter2_reg <= tmp_strb_V_reg_4211;
        tmp_user_V_reg_4216_pp0_iter2_reg <= tmp_user_V_reg_4216;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lowfreq_accumulate_2_load_reg_4333 <= lowfreq_accumulate_2_fu_584;
        p_load218_reg_4328 <= empty_54_fu_580;
        p_load219_reg_4323 <= empty_53_fu_576;
        p_load220_reg_4318 <= empty_52_fu_572;
        p_load221_reg_4313 <= empty_51_fu_568;
        p_load222_reg_4308 <= empty_50_fu_564;
        p_load223_reg_4303 <= empty_49_fu_560;
        p_load224_reg_4298 <= empty_48_fu_556;
        p_load225_reg_4293 <= empty_47_fu_552;
        p_load226_reg_4288 <= empty_46_fu_548;
        p_load227_reg_4283 <= empty_45_fu_544;
        p_load228_reg_4278 <= empty_44_fu_540;
        p_load229_reg_4273 <= empty_43_fu_536;
        p_load230_reg_4268 <= empty_42_fu_532;
        p_load231_reg_4263 <= empty_41_fu_528;
        p_load232_reg_4258 <= empty_40_fu_524;
        p_load233_reg_4253 <= empty_39_fu_520;
        p_load234_reg_4248 <= empty_38_fu_516;
        p_load235_reg_4243 <= empty_37_fu_512;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lowfreq_accumulate_3_reg_4236 <= lowfreq_accumulate_3_fu_2472_p2;
        p_load237_reg_4191 <= empty_36_fu_504;
        p_load238_reg_4186 <= empty_35_fu_500;
        p_load239_reg_4181 <= empty_34_fu_496;
        p_load240_reg_4176 <= empty_33_fu_492;
        p_load241_reg_4171 <= empty_32_fu_488;
        p_load242_reg_4166 <= empty_31_fu_484;
        p_load243_reg_4161 <= empty_30_fu_480;
        p_load244_reg_4156 <= empty_29_fu_476;
        p_load245_reg_4151 <= empty_28_fu_472;
        p_load246_reg_4146 <= empty_27_fu_468;
        p_load247_reg_4141 <= empty_26_fu_464;
        p_load248_reg_4136 <= empty_25_fu_460;
        p_load249_reg_4131 <= empty_24_fu_456;
        p_load250_reg_4126 <= empty_23_fu_452;
        p_load251_reg_4121 <= empty_22_fu_448;
        p_load252_reg_4116 <= empty_21_fu_444;
        p_load253_reg_4111 <= empty_20_fu_440;
        p_load254_reg_4106 <= empty_19_fu_436;
        tmp_data_V_1_reg_4201 <= SIGNAL_IN_TDATA;
        tmp_data_V_load_reg_4196 <= tmp_data_V_fu_508;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        SIGNAL_IN_TDATA_blk_n = SIGNAL_IN_TVALID;
    end else begin
        SIGNAL_IN_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        SIGNAL_IN_TREADY = 1'b1;
    end else begin
        SIGNAL_IN_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        SIGNAL_OUT_TDATA_blk_n = SIGNAL_OUT_TREADY;
    end else begin
        SIGNAL_OUT_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        SIGNAL_OUT_TVALID = 1'b1;
    end else begin
        SIGNAL_OUT_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln69_out_ap_vld = 1'b1;
    end else begin
        add_ln69_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_fu_2241_p1 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ap_sig_allocacmp_p_load = add_ln69_reg_4343;
    end else begin
        ap_sig_allocacmp_p_load = empty_73_fu_660;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lowfreq_accumulate_1_out_ap_vld = 1'b1;
    end else begin
        lowfreq_accumulate_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out10_ap_vld = 1'b1;
    end else begin
        p_out10_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out11_ap_vld = 1'b1;
    end else begin
        p_out11_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out12_ap_vld = 1'b1;
    end else begin
        p_out12_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out13_ap_vld = 1'b1;
    end else begin
        p_out13_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out14_ap_vld = 1'b1;
    end else begin
        p_out14_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out15_ap_vld = 1'b1;
    end else begin
        p_out15_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out16_ap_vld = 1'b1;
    end else begin
        p_out16_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out17_ap_vld = 1'b1;
    end else begin
        p_out17_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out18_ap_vld = 1'b1;
    end else begin
        p_out18_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out19_ap_vld = 1'b1;
    end else begin
        p_out19_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out1_ap_vld = 1'b1;
    end else begin
        p_out1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out20_ap_vld = 1'b1;
    end else begin
        p_out20_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out21_ap_vld = 1'b1;
    end else begin
        p_out21_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out22_ap_vld = 1'b1;
    end else begin
        p_out22_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out23_ap_vld = 1'b1;
    end else begin
        p_out23_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out24_ap_vld = 1'b1;
    end else begin
        p_out24_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out25_ap_vld = 1'b1;
    end else begin
        p_out25_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out26_ap_vld = 1'b1;
    end else begin
        p_out26_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out27_ap_vld = 1'b1;
    end else begin
        p_out27_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out28_ap_vld = 1'b1;
    end else begin
        p_out28_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out29_ap_vld = 1'b1;
    end else begin
        p_out29_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out2_ap_vld = 1'b1;
    end else begin
        p_out2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out30_ap_vld = 1'b1;
    end else begin
        p_out30_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out31_ap_vld = 1'b1;
    end else begin
        p_out31_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out32_ap_vld = 1'b1;
    end else begin
        p_out32_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out33_ap_vld = 1'b1;
    end else begin
        p_out33_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out34_ap_vld = 1'b1;
    end else begin
        p_out34_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out35_ap_vld = 1'b1;
    end else begin
        p_out35_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out36_ap_vld = 1'b1;
    end else begin
        p_out36_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out37_ap_vld = 1'b1;
    end else begin
        p_out37_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out38_ap_vld = 1'b1;
    end else begin
        p_out38_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out39_ap_vld = 1'b1;
    end else begin
        p_out39_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out3_ap_vld = 1'b1;
    end else begin
        p_out3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out40_ap_vld = 1'b1;
    end else begin
        p_out40_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out41_ap_vld = 1'b1;
    end else begin
        p_out41_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out42_ap_vld = 1'b1;
    end else begin
        p_out42_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out43_ap_vld = 1'b1;
    end else begin
        p_out43_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out44_ap_vld = 1'b1;
    end else begin
        p_out44_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out45_ap_vld = 1'b1;
    end else begin
        p_out45_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out46_ap_vld = 1'b1;
    end else begin
        p_out46_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out47_ap_vld = 1'b1;
    end else begin
        p_out47_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out48_ap_vld = 1'b1;
    end else begin
        p_out48_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out49_ap_vld = 1'b1;
    end else begin
        p_out49_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out4_ap_vld = 1'b1;
    end else begin
        p_out4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out50_ap_vld = 1'b1;
    end else begin
        p_out50_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out51_ap_vld = 1'b1;
    end else begin
        p_out51_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out52_ap_vld = 1'b1;
    end else begin
        p_out52_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out53_ap_vld = 1'b1;
    end else begin
        p_out53_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out54_ap_vld = 1'b1;
    end else begin
        p_out54_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out55_ap_vld = 1'b1;
    end else begin
        p_out55_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out56_ap_vld = 1'b1;
    end else begin
        p_out56_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out5_ap_vld = 1'b1;
    end else begin
        p_out5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out6_ap_vld = 1'b1;
    end else begin
        p_out6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out7_ap_vld = 1'b1;
    end else begin
        p_out7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out8_ap_vld = 1'b1;
    end else begin
        p_out8_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out9_ap_vld = 1'b1;
    end else begin
        p_out9_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_4221_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_V_out_ap_vld = 1'b1;
    end else begin
        tmp_data_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SIGNAL_OUT_TDATA = highfreq_accumulate_2_fu_3258_p2;

assign SIGNAL_OUT_TDEST = tmp_dest_V_reg_4231_pp0_iter2_reg;

assign SIGNAL_OUT_TID = tmp_id_V_reg_4226_pp0_iter2_reg;

assign SIGNAL_OUT_TKEEP = tmp_keep_V_reg_4206_pp0_iter2_reg;

assign SIGNAL_OUT_TLAST = tmp_last_V_reg_4221_pp0_iter2_reg;

assign SIGNAL_OUT_TSTRB = tmp_strb_V_reg_4211_pp0_iter2_reg;

assign SIGNAL_OUT_TUSER = tmp_user_V_reg_4216_pp0_iter2_reg;

assign add_ln46_10_fu_2394_p2 = (mul_ln43_14_fu_2328_p2 + mul_ln43_15_fu_2333_p2);

assign add_ln46_11_fu_2412_p2 = (add_ln46_10_fu_2394_p2 + mul_ln43_16_fu_2338_p2);

assign add_ln46_12_fu_2418_p2 = (add_ln46_11_fu_2412_p2 + add_ln46_9_fu_2388_p2);

assign add_ln46_13_fu_2406_p2 = (mul_ln43_11_fu_2313_p2 + mul_ln43_13_fu_2323_p2);

assign add_ln46_14_fu_2424_p2 = (add_ln46_13_fu_2406_p2 + mul_ln43_12_fu_2318_p2);

assign add_ln46_15_fu_2400_p2 = (mul_ln43_10_fu_2308_p2 + mul_ln46_fu_2353_p2);

assign add_ln46_16_fu_2430_p2 = (add_ln46_15_fu_2400_p2 + mul_ln43_9_fu_2303_p2);

assign add_ln46_17_fu_2436_p2 = (add_ln46_16_fu_2430_p2 + add_ln46_14_fu_2424_p2);

assign add_ln46_18_fu_2442_p2 = (add_ln46_17_fu_2436_p2 + add_ln46_12_fu_2418_p2);

assign add_ln46_1_fu_2364_p2 = (mul_ln43_2_fu_2268_p2 + mul_ln43_3_fu_2273_p2);

assign add_ln46_2_fu_2454_p2 = (add_ln46_1_fu_2364_p2 + mul_ln43_1_fu_2263_p2);

assign add_ln46_3_fu_2460_p2 = (add_ln46_2_fu_2454_p2 + add_ln46_fu_2358_p2);

assign add_ln46_4_fu_2370_p2 = (mul_ln43_7_fu_2293_p2 + mul_ln43_8_fu_2298_p2);

assign add_ln46_5_fu_2376_p2 = (mul_ln43_4_fu_2278_p2 + mul_ln43_5_fu_2283_p2);

assign add_ln46_6_fu_2382_p2 = (add_ln46_5_fu_2376_p2 + mul_ln43_6_fu_2288_p2);

assign add_ln46_7_fu_2448_p2 = (add_ln46_6_fu_2382_p2 + add_ln46_4_fu_2370_p2);

assign add_ln46_8_fu_2466_p2 = (add_ln46_3_fu_2460_p2 + add_ln46_7_fu_2448_p2);

assign add_ln46_9_fu_2388_p2 = (mul_ln43_18_fu_2348_p2 + mul_ln43_17_fu_2343_p2);

assign add_ln46_fu_2358_p2 = (mul_ln43_fu_2258_p2 + lowfreq_accumulate_fu_2253_p2);

assign add_ln57_10_fu_2802_p2 = (mul_ln54_5_fu_2668_p2 + mul_ln54_4_fu_2663_p2);

assign add_ln57_11_fu_2808_p2 = (add_ln57_10_fu_2802_p2 + mul_ln54_6_fu_2673_p2);

assign add_ln57_12_fu_2814_p2 = (add_ln57_11_fu_2808_p2 + add_ln57_9_fu_2796_p2);

assign add_ln57_13_fu_2820_p2 = (mul_ln54_2_fu_2653_p2 + mul_ln54_1_fu_2648_p2);

assign add_ln57_14_fu_2826_p2 = (add_ln57_13_fu_2820_p2 + mul_ln54_3_fu_2658_p2);

assign add_ln57_15_fu_2832_p2 = (mul_ln57_fu_2738_p2 + midfreq_accumulate_fu_2638_p2);

assign add_ln57_16_fu_2838_p2 = (add_ln57_15_fu_2832_p2 + mul_ln54_fu_2643_p2);

assign add_ln57_17_fu_2844_p2 = (add_ln57_16_fu_2838_p2 + add_ln57_14_fu_2826_p2);

assign add_ln57_18_fu_2850_p2 = (add_ln57_17_fu_2844_p2 + add_ln57_12_fu_2814_p2);

assign add_ln57_1_fu_2748_p2 = (mul_ln54_15_fu_2718_p2 + mul_ln54_14_fu_2713_p2);

assign add_ln57_2_fu_2754_p2 = (add_ln57_1_fu_2748_p2 + mul_ln54_16_fu_2723_p2);

assign add_ln57_3_fu_2760_p2 = (add_ln57_2_fu_2754_p2 + add_ln57_fu_2742_p2);

assign add_ln57_4_fu_2766_p2 = (mul_ln54_13_fu_2708_p2 + mul_ln54_12_fu_2703_p2);

assign add_ln57_5_fu_2772_p2 = (mul_ln54_10_fu_2693_p2 + mul_ln54_9_fu_2688_p2);

assign add_ln57_6_fu_2778_p2 = (add_ln57_5_fu_2772_p2 + mul_ln54_11_fu_2698_p2);

assign add_ln57_7_fu_2784_p2 = (add_ln57_6_fu_2778_p2 + add_ln57_4_fu_2766_p2);

assign add_ln57_8_fu_2790_p2 = (add_ln57_7_fu_2784_p2 + add_ln57_3_fu_2760_p2);

assign add_ln57_9_fu_2796_p2 = (mul_ln54_8_fu_2683_p2 + mul_ln54_7_fu_2678_p2);

assign add_ln57_fu_2742_p2 = (mul_ln54_17_fu_2728_p2 + mul_ln54_18_fu_2733_p2);

assign add_ln68_10_fu_3204_p2 = (mul_ln65_14_fu_3115_p2 + mul_ln65_15_fu_3120_p2);

assign add_ln68_11_fu_3210_p2 = (add_ln68_10_fu_3204_p2 + mul_ln65_16_fu_3125_p2);

assign add_ln68_12_fu_3216_p2 = (add_ln68_11_fu_3210_p2 + add_ln68_9_fu_3198_p2);

assign add_ln68_13_fu_3222_p2 = (mul_ln65_13_fu_3110_p2 + mul_ln65_11_fu_3100_p2);

assign add_ln68_14_fu_3228_p2 = (add_ln68_13_fu_3222_p2 + mul_ln65_12_fu_3105_p2);

assign add_ln68_15_fu_3234_p2 = (mul_ln68_fu_3140_p2 + mul_ln65_10_fu_3095_p2);

assign add_ln68_16_fu_3240_p2 = (add_ln68_15_fu_3234_p2 + mul_ln65_9_fu_3090_p2);

assign add_ln68_17_fu_3246_p2 = (add_ln68_16_fu_3240_p2 + add_ln68_14_fu_3228_p2);

assign add_ln68_18_fu_3252_p2 = (add_ln68_17_fu_3246_p2 + add_ln68_12_fu_3216_p2);

assign add_ln68_1_fu_3150_p2 = (mul_ln65_2_fu_3055_p2 + mul_ln65_3_fu_3060_p2);

assign add_ln68_2_fu_3156_p2 = (add_ln68_1_fu_3150_p2 + mul_ln65_1_fu_3050_p2);

assign add_ln68_3_fu_3162_p2 = (add_ln68_2_fu_3156_p2 + add_ln68_fu_3144_p2);

assign add_ln68_4_fu_3168_p2 = (mul_ln65_7_fu_3080_p2 + mul_ln65_8_fu_3085_p2);

assign add_ln68_5_fu_3174_p2 = (mul_ln65_4_fu_3065_p2 + mul_ln65_5_fu_3070_p2);

assign add_ln68_6_fu_3180_p2 = (add_ln68_5_fu_3174_p2 + mul_ln65_6_fu_3075_p2);

assign add_ln68_7_fu_3186_p2 = (add_ln68_6_fu_3180_p2 + add_ln68_4_fu_3168_p2);

assign add_ln68_8_fu_3192_p2 = (add_ln68_7_fu_3186_p2 + add_ln68_3_fu_3162_p2);

assign add_ln68_9_fu_3198_p2 = (mul_ln65_18_fu_3135_p2 + mul_ln65_17_fu_3130_p2);

assign add_ln68_fu_3144_p2 = (mul_ln65_fu_3045_p2 + highfreq_accumulate_fu_3040_p2);

assign add_ln69_fu_3265_p1 = ap_sig_allocacmp_p_load;

assign add_ln69_fu_3265_p2 = ($signed(highfreq_accumulate_2_fu_3258_p2) + $signed(add_ln69_fu_3265_p1));

assign add_ln69_out = ($signed(highfreq_accumulate_2_fu_3258_p2) + $signed(add_ln69_fu_3265_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((1'b0 == SIGNAL_OUT_TREADY) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == SIGNAL_IN_TVALID) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b0 == SIGNAL_OUT_TREADY) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == SIGNAL_IN_TVALID) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b0 == SIGNAL_OUT_TREADY) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == SIGNAL_IN_TVALID) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (1'b0 == SIGNAL_IN_TVALID);
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (1'b0 == SIGNAL_OUT_TREADY);
end

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign highfreq_accumulate_2_fu_3258_p2 = (add_ln68_18_fu_3252_p2 + add_ln68_8_fu_3192_p2);

assign lowfreq_accumulate_1_out = lowfreq_accumulate_3_reg_4236_pp0_iter2_reg;

assign lowfreq_accumulate_3_fu_2472_p2 = (add_ln46_8_fu_2466_p2 + add_ln46_18_fu_2442_p2);

assign midfreq_accumulate_1_fu_2856_p2 = (add_ln57_18_fu_2850_p2 + add_ln57_8_fu_2790_p2);

assign p_out = empty_73_fu_660;

assign p_out1 = empty_72_fu_656;

assign p_out10 = empty_63_fu_620;

assign p_out11 = empty_62_fu_616;

assign p_out12 = empty_61_fu_612;

assign p_out13 = empty_60_fu_608;

assign p_out14 = empty_59_fu_604;

assign p_out15 = empty_58_fu_600;

assign p_out16 = empty_57_fu_596;

assign p_out17 = empty_56_fu_592;

assign p_out18 = empty_55_fu_588;

assign p_out19 = lowfreq_accumulate_2_load_reg_4333;

assign p_out2 = empty_71_fu_652;

assign p_out20 = p_load218_reg_4328;

assign p_out21 = p_load219_reg_4323;

assign p_out22 = p_load220_reg_4318;

assign p_out23 = p_load221_reg_4313;

assign p_out24 = p_load222_reg_4308;

assign p_out25 = p_load223_reg_4303;

assign p_out26 = p_load224_reg_4298;

assign p_out27 = p_load225_reg_4293;

assign p_out28 = p_load226_reg_4288;

assign p_out29 = p_load227_reg_4283;

assign p_out3 = empty_70_fu_648;

assign p_out30 = p_load228_reg_4278;

assign p_out31 = p_load229_reg_4273;

assign p_out32 = p_load230_reg_4268;

assign p_out33 = p_load231_reg_4263;

assign p_out34 = p_load232_reg_4258;

assign p_out35 = p_load233_reg_4253;

assign p_out36 = p_load234_reg_4248;

assign p_out37 = p_load235_reg_4243;

assign p_out38 = tmp_data_V_load_reg_4196_pp0_iter2_reg;

assign p_out39 = p_load237_reg_4191_pp0_iter2_reg;

assign p_out4 = empty_69_fu_644;

assign p_out40 = p_load238_reg_4186_pp0_iter2_reg;

assign p_out41 = p_load239_reg_4181_pp0_iter2_reg;

assign p_out42 = p_load240_reg_4176_pp0_iter2_reg;

assign p_out43 = p_load241_reg_4171_pp0_iter2_reg;

assign p_out44 = p_load242_reg_4166_pp0_iter2_reg;

assign p_out45 = p_load243_reg_4161_pp0_iter2_reg;

assign p_out46 = p_load244_reg_4156_pp0_iter2_reg;

assign p_out47 = p_load245_reg_4151_pp0_iter2_reg;

assign p_out48 = p_load246_reg_4146_pp0_iter2_reg;

assign p_out49 = p_load247_reg_4141_pp0_iter2_reg;

assign p_out5 = empty_68_fu_640;

assign p_out50 = p_load248_reg_4136_pp0_iter2_reg;

assign p_out51 = p_load249_reg_4131_pp0_iter2_reg;

assign p_out52 = p_load250_reg_4126_pp0_iter2_reg;

assign p_out53 = p_load251_reg_4121_pp0_iter2_reg;

assign p_out54 = p_load252_reg_4116_pp0_iter2_reg;

assign p_out55 = p_load253_reg_4111_pp0_iter2_reg;

assign p_out56 = p_load254_reg_4106_pp0_iter2_reg;

assign p_out6 = empty_67_fu_636;

assign p_out7 = empty_66_fu_632;

assign p_out8 = empty_65_fu_628;

assign p_out9 = empty_64_fu_624;

assign tmp_data_V_out = tmp_data_V_1_reg_4201_pp0_iter2_reg;

assign tmp_last_V_fu_2241_p1 = SIGNAL_IN_TLAST;

endmodule //equalizer_equalizer_Pipeline_FILTER_LOOP
