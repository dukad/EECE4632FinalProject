-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity equalizer is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    SIGNAL_IN_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    SIGNAL_IN_TVALID : IN STD_LOGIC;
    SIGNAL_IN_TREADY : OUT STD_LOGIC;
    SIGNAL_IN_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    SIGNAL_IN_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    SIGNAL_IN_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    SIGNAL_IN_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    SIGNAL_IN_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    SIGNAL_IN_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    SIGNAL_OUT_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    SIGNAL_OUT_TVALID : OUT STD_LOGIC;
    SIGNAL_OUT_TREADY : IN STD_LOGIC;
    SIGNAL_OUT_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    SIGNAL_OUT_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    SIGNAL_OUT_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    SIGNAL_OUT_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    SIGNAL_OUT_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    SIGNAL_OUT_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of equalizer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "equalizer_equalizer,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=168,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=3226,HLS_SYN_LUT=3325,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (33 downto 0) := "0000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (33 downto 0) := "0000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (33 downto 0) := "0000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (33 downto 0) := "0000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (33 downto 0) := "0000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (33 downto 0) := "0000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (33 downto 0) := "0001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (33 downto 0) := "0010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (33 downto 0) := "0100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (33 downto 0) := "1000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal lowfreq_coefs : STD_LOGIC_VECTOR (63 downto 0);
    signal midfreq_coefs : STD_LOGIC_VECTOR (63 downto 0);
    signal highfreq_coefs : STD_LOGIC_VECTOR (63 downto 0);
    signal lowfreq_shift_reg_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal lowfreq_shift_reg_ce0 : STD_LOGIC;
    signal lowfreq_shift_reg_we0 : STD_LOGIC;
    signal lowfreq_shift_reg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal lowfreq_shift_reg_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal midfreq_shift_reg_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal midfreq_shift_reg_ce0 : STD_LOGIC;
    signal midfreq_shift_reg_we0 : STD_LOGIC;
    signal midfreq_shift_reg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal midfreq_shift_reg_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal highfreq_shift_reg_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal highfreq_shift_reg_ce0 : STD_LOGIC;
    signal highfreq_shift_reg_we0 : STD_LOGIC;
    signal highfreq_shift_reg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal highfreq_shift_reg_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal SIGNAL_IN_TDATA_blk_n : STD_LOGIC;
    signal SIGNAL_OUT_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal highfreq_coefs_read_reg_401 : STD_LOGIC_VECTOR (63 downto 0);
    signal midfreq_coefs_read_reg_406 : STD_LOGIC_VECTOR (63 downto 0);
    signal lowfreq_coefs_read_reg_411 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_data_V_reg_434 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_keep_V_reg_440 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_strb_V_reg_445 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_user_V_reg_450 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_last_V_reg_455 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_V_reg_460 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_dest_V_reg_465 : STD_LOGIC_VECTOR (5 downto 0);
    signal gmem_addr_reg_470 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_reg_476 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_2_reg_482 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_read_reg_488 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_362_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln49_reg_493 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal lowfreq_accumulate_fu_369_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lowfreq_accumulate_reg_498 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_1_read_reg_503 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_375_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln59_reg_508 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal gmem_addr_2_read_reg_513 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_391_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln69_reg_521 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_ap_start : STD_LOGIC;
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_ap_done : STD_LOGIC;
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_ap_idle : STD_LOGIC;
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_ap_ready : STD_LOGIC;
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_lowfreq_accumulate_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_lowfreq_accumulate_out_ap_vld : STD_LOGIC;
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_lowfreq_shift_reg_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_lowfreq_shift_reg_ce0 : STD_LOGIC;
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_lowfreq_shift_reg_we0 : STD_LOGIC;
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_lowfreq_shift_reg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_lowfreq_shift_reg_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_lowfreq_shift_reg_ce1 : STD_LOGIC;
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_grp_fu_391_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_grp_fu_391_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_grp_fu_391_p_ce : STD_LOGIC;
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_ap_start : STD_LOGIC;
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_ap_done : STD_LOGIC;
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_ap_idle : STD_LOGIC;
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_ap_ready : STD_LOGIC;
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_midfreq_accumulate_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_midfreq_accumulate_out_ap_vld : STD_LOGIC;
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_midfreq_shift_reg_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_midfreq_shift_reg_ce0 : STD_LOGIC;
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_midfreq_shift_reg_we0 : STD_LOGIC;
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_midfreq_shift_reg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_midfreq_shift_reg_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_midfreq_shift_reg_ce1 : STD_LOGIC;
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_grp_fu_391_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_grp_fu_391_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_grp_fu_391_p_ce : STD_LOGIC;
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_ap_start : STD_LOGIC;
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_ap_done : STD_LOGIC;
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_ap_idle : STD_LOGIC;
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_ap_ready : STD_LOGIC;
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_highfreq_accumulate_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_highfreq_accumulate_out_ap_vld : STD_LOGIC;
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_highfreq_shift_reg_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_highfreq_shift_reg_ce0 : STD_LOGIC;
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_highfreq_shift_reg_we0 : STD_LOGIC;
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_highfreq_shift_reg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_highfreq_shift_reg_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_highfreq_shift_reg_ce1 : STD_LOGIC;
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_grp_fu_391_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_grp_fu_391_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_grp_fu_391_p_ce : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call39 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal sext_ln49_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln59_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln69_fu_352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal midfreq_accumulate_fu_382_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1_fu_302_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln3_fu_322_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln5_fu_342_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_391_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_391_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal highfreq_accumulate_fu_396_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_362_ce : STD_LOGIC;
    signal grp_fu_375_ce : STD_LOGIC;
    signal grp_fu_391_ce : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state34 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal regslice_both_SIGNAL_IN_V_data_V_U_apdone_blk : STD_LOGIC;
    signal SIGNAL_IN_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal SIGNAL_IN_TVALID_int_regslice : STD_LOGIC;
    signal SIGNAL_IN_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_SIGNAL_IN_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_SIGNAL_IN_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal SIGNAL_IN_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_SIGNAL_IN_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SIGNAL_IN_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_SIGNAL_IN_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal SIGNAL_IN_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_SIGNAL_IN_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SIGNAL_IN_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_SIGNAL_IN_V_user_V_U_apdone_blk : STD_LOGIC;
    signal SIGNAL_IN_TUSER_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_SIGNAL_IN_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SIGNAL_IN_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_SIGNAL_IN_V_last_V_U_apdone_blk : STD_LOGIC;
    signal SIGNAL_IN_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_SIGNAL_IN_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SIGNAL_IN_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_SIGNAL_IN_V_id_V_U_apdone_blk : STD_LOGIC;
    signal SIGNAL_IN_TID_int_regslice : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_SIGNAL_IN_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SIGNAL_IN_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_SIGNAL_IN_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal SIGNAL_IN_TDEST_int_regslice : STD_LOGIC_VECTOR (5 downto 0);
    signal regslice_both_SIGNAL_IN_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SIGNAL_IN_V_dest_V_U_ack_in : STD_LOGIC;
    signal SIGNAL_OUT_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal SIGNAL_OUT_TVALID_int_regslice : STD_LOGIC;
    signal SIGNAL_OUT_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_SIGNAL_OUT_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component equalizer_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        lowfreq_coefs : IN STD_LOGIC_VECTOR (63 downto 0);
        lowfreq_accumulate_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        lowfreq_accumulate_out_ap_vld : OUT STD_LOGIC;
        lowfreq_shift_reg_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        lowfreq_shift_reg_ce0 : OUT STD_LOGIC;
        lowfreq_shift_reg_we0 : OUT STD_LOGIC;
        lowfreq_shift_reg_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        lowfreq_shift_reg_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        lowfreq_shift_reg_ce1 : OUT STD_LOGIC;
        lowfreq_shift_reg_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_391_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_391_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_391_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_391_p_ce : OUT STD_LOGIC );
    end component;


    component equalizer_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        midfreq_coefs : IN STD_LOGIC_VECTOR (63 downto 0);
        midfreq_accumulate_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        midfreq_accumulate_out_ap_vld : OUT STD_LOGIC;
        midfreq_shift_reg_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        midfreq_shift_reg_ce0 : OUT STD_LOGIC;
        midfreq_shift_reg_we0 : OUT STD_LOGIC;
        midfreq_shift_reg_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        midfreq_shift_reg_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        midfreq_shift_reg_ce1 : OUT STD_LOGIC;
        midfreq_shift_reg_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_391_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_391_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_391_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_391_p_ce : OUT STD_LOGIC );
    end component;


    component equalizer_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        highfreq_coefs : IN STD_LOGIC_VECTOR (63 downto 0);
        highfreq_accumulate_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        highfreq_accumulate_out_ap_vld : OUT STD_LOGIC;
        highfreq_shift_reg_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        highfreq_shift_reg_ce0 : OUT STD_LOGIC;
        highfreq_shift_reg_we0 : OUT STD_LOGIC;
        highfreq_shift_reg_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        highfreq_shift_reg_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        highfreq_shift_reg_ce1 : OUT STD_LOGIC;
        highfreq_shift_reg_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_391_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_391_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_391_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_391_p_ce : OUT STD_LOGIC );
    end component;


    component equalizer_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component equalizer_lowfreq_shift_reg_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component equalizer_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        lowfreq_coefs : OUT STD_LOGIC_VECTOR (63 downto 0);
        midfreq_coefs : OUT STD_LOGIC_VECTOR (63 downto 0);
        highfreq_coefs : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component equalizer_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component equalizer_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    lowfreq_shift_reg_U : component equalizer_lowfreq_shift_reg_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lowfreq_shift_reg_address0,
        ce0 => lowfreq_shift_reg_ce0,
        we0 => lowfreq_shift_reg_we0,
        d0 => lowfreq_shift_reg_d0,
        address1 => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_lowfreq_shift_reg_address1,
        ce1 => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_lowfreq_shift_reg_ce1,
        q1 => lowfreq_shift_reg_q1);

    midfreq_shift_reg_U : component equalizer_lowfreq_shift_reg_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => midfreq_shift_reg_address0,
        ce0 => midfreq_shift_reg_ce0,
        we0 => midfreq_shift_reg_we0,
        d0 => midfreq_shift_reg_d0,
        address1 => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_midfreq_shift_reg_address1,
        ce1 => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_midfreq_shift_reg_ce1,
        q1 => midfreq_shift_reg_q1);

    highfreq_shift_reg_U : component equalizer_lowfreq_shift_reg_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => highfreq_shift_reg_address0,
        ce0 => highfreq_shift_reg_ce0,
        we0 => highfreq_shift_reg_we0,
        d0 => highfreq_shift_reg_d0,
        address1 => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_highfreq_shift_reg_address1,
        ce1 => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_highfreq_shift_reg_ce1,
        q1 => highfreq_shift_reg_q1);

    grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243 : component equalizer_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_ap_start,
        ap_done => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_ap_done,
        ap_idle => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_ap_idle,
        ap_ready => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_ap_ready,
        m_axi_gmem_AWVALID => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => gmem_RFIFONUM,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        lowfreq_coefs => lowfreq_coefs_read_reg_411,
        lowfreq_accumulate_out => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_lowfreq_accumulate_out,
        lowfreq_accumulate_out_ap_vld => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_lowfreq_accumulate_out_ap_vld,
        lowfreq_shift_reg_address0 => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_lowfreq_shift_reg_address0,
        lowfreq_shift_reg_ce0 => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_lowfreq_shift_reg_ce0,
        lowfreq_shift_reg_we0 => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_lowfreq_shift_reg_we0,
        lowfreq_shift_reg_d0 => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_lowfreq_shift_reg_d0,
        lowfreq_shift_reg_address1 => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_lowfreq_shift_reg_address1,
        lowfreq_shift_reg_ce1 => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_lowfreq_shift_reg_ce1,
        lowfreq_shift_reg_q1 => lowfreq_shift_reg_q1,
        grp_fu_391_p_din0 => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_grp_fu_391_p_din0,
        grp_fu_391_p_din1 => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_grp_fu_391_p_din1,
        grp_fu_391_p_dout0 => grp_fu_391_p2,
        grp_fu_391_p_ce => grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_grp_fu_391_p_ce);

    grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254 : component equalizer_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_ap_start,
        ap_done => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_ap_done,
        ap_idle => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_ap_idle,
        ap_ready => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_ap_ready,
        m_axi_gmem_AWVALID => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => gmem_RFIFONUM,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        midfreq_coefs => midfreq_coefs_read_reg_406,
        midfreq_accumulate_out => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_midfreq_accumulate_out,
        midfreq_accumulate_out_ap_vld => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_midfreq_accumulate_out_ap_vld,
        midfreq_shift_reg_address0 => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_midfreq_shift_reg_address0,
        midfreq_shift_reg_ce0 => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_midfreq_shift_reg_ce0,
        midfreq_shift_reg_we0 => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_midfreq_shift_reg_we0,
        midfreq_shift_reg_d0 => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_midfreq_shift_reg_d0,
        midfreq_shift_reg_address1 => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_midfreq_shift_reg_address1,
        midfreq_shift_reg_ce1 => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_midfreq_shift_reg_ce1,
        midfreq_shift_reg_q1 => midfreq_shift_reg_q1,
        grp_fu_391_p_din0 => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_grp_fu_391_p_din0,
        grp_fu_391_p_din1 => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_grp_fu_391_p_din1,
        grp_fu_391_p_dout0 => grp_fu_391_p2,
        grp_fu_391_p_ce => grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_grp_fu_391_p_ce);

    grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264 : component equalizer_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_ap_start,
        ap_done => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_ap_done,
        ap_idle => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_ap_idle,
        ap_ready => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_ap_ready,
        m_axi_gmem_AWVALID => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => gmem_RFIFONUM,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        highfreq_coefs => highfreq_coefs_read_reg_401,
        highfreq_accumulate_out => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_highfreq_accumulate_out,
        highfreq_accumulate_out_ap_vld => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_highfreq_accumulate_out_ap_vld,
        highfreq_shift_reg_address0 => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_highfreq_shift_reg_address0,
        highfreq_shift_reg_ce0 => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_highfreq_shift_reg_ce0,
        highfreq_shift_reg_we0 => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_highfreq_shift_reg_we0,
        highfreq_shift_reg_d0 => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_highfreq_shift_reg_d0,
        highfreq_shift_reg_address1 => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_highfreq_shift_reg_address1,
        highfreq_shift_reg_ce1 => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_highfreq_shift_reg_ce1,
        highfreq_shift_reg_q1 => highfreq_shift_reg_q1,
        grp_fu_391_p_din0 => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_grp_fu_391_p_din0,
        grp_fu_391_p_din1 => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_grp_fu_391_p_din1,
        grp_fu_391_p_dout0 => grp_fu_391_p2,
        grp_fu_391_p_ce => grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_grp_fu_391_p_ce);

    control_s_axi_U : component equalizer_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        lowfreq_coefs => lowfreq_coefs,
        midfreq_coefs => midfreq_coefs,
        highfreq_coefs => highfreq_coefs);

    gmem_m_axi_U : component equalizer_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 9,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        USER_DW => 32,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARLEN => gmem_ARLEN,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => gmem_BVALID,
        I_BREADY => ap_const_logic_0);

    mul_32s_32s_32_2_1_U16 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gmem_addr_read_reg_488,
        din1 => tmp_data_V_reg_434,
        ce => grp_fu_362_ce,
        dout => grp_fu_362_p2);

    mul_32s_32s_32_2_1_U17 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gmem_addr_1_read_reg_503,
        din1 => lowfreq_accumulate_reg_498,
        ce => grp_fu_375_ce,
        dout => grp_fu_375_p2);

    mul_32s_32s_32_2_1_U18 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_391_p0,
        din1 => grp_fu_391_p1,
        ce => grp_fu_391_ce,
        dout => grp_fu_391_p2);

    regslice_both_SIGNAL_IN_V_data_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => SIGNAL_IN_TDATA,
        vld_in => SIGNAL_IN_TVALID,
        ack_in => regslice_both_SIGNAL_IN_V_data_V_U_ack_in,
        data_out => SIGNAL_IN_TDATA_int_regslice,
        vld_out => SIGNAL_IN_TVALID_int_regslice,
        ack_out => SIGNAL_IN_TREADY_int_regslice,
        apdone_blk => regslice_both_SIGNAL_IN_V_data_V_U_apdone_blk);

    regslice_both_SIGNAL_IN_V_keep_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => SIGNAL_IN_TKEEP,
        vld_in => SIGNAL_IN_TVALID,
        ack_in => regslice_both_SIGNAL_IN_V_keep_V_U_ack_in,
        data_out => SIGNAL_IN_TKEEP_int_regslice,
        vld_out => regslice_both_SIGNAL_IN_V_keep_V_U_vld_out,
        ack_out => SIGNAL_IN_TREADY_int_regslice,
        apdone_blk => regslice_both_SIGNAL_IN_V_keep_V_U_apdone_blk);

    regslice_both_SIGNAL_IN_V_strb_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => SIGNAL_IN_TSTRB,
        vld_in => SIGNAL_IN_TVALID,
        ack_in => regslice_both_SIGNAL_IN_V_strb_V_U_ack_in,
        data_out => SIGNAL_IN_TSTRB_int_regslice,
        vld_out => regslice_both_SIGNAL_IN_V_strb_V_U_vld_out,
        ack_out => SIGNAL_IN_TREADY_int_regslice,
        apdone_blk => regslice_both_SIGNAL_IN_V_strb_V_U_apdone_blk);

    regslice_both_SIGNAL_IN_V_user_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => SIGNAL_IN_TUSER,
        vld_in => SIGNAL_IN_TVALID,
        ack_in => regslice_both_SIGNAL_IN_V_user_V_U_ack_in,
        data_out => SIGNAL_IN_TUSER_int_regslice,
        vld_out => regslice_both_SIGNAL_IN_V_user_V_U_vld_out,
        ack_out => SIGNAL_IN_TREADY_int_regslice,
        apdone_blk => regslice_both_SIGNAL_IN_V_user_V_U_apdone_blk);

    regslice_both_SIGNAL_IN_V_last_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => SIGNAL_IN_TLAST,
        vld_in => SIGNAL_IN_TVALID,
        ack_in => regslice_both_SIGNAL_IN_V_last_V_U_ack_in,
        data_out => SIGNAL_IN_TLAST_int_regslice,
        vld_out => regslice_both_SIGNAL_IN_V_last_V_U_vld_out,
        ack_out => SIGNAL_IN_TREADY_int_regslice,
        apdone_blk => regslice_both_SIGNAL_IN_V_last_V_U_apdone_blk);

    regslice_both_SIGNAL_IN_V_id_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => SIGNAL_IN_TID,
        vld_in => SIGNAL_IN_TVALID,
        ack_in => regslice_both_SIGNAL_IN_V_id_V_U_ack_in,
        data_out => SIGNAL_IN_TID_int_regslice,
        vld_out => regslice_both_SIGNAL_IN_V_id_V_U_vld_out,
        ack_out => SIGNAL_IN_TREADY_int_regslice,
        apdone_blk => regslice_both_SIGNAL_IN_V_id_V_U_apdone_blk);

    regslice_both_SIGNAL_IN_V_dest_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => SIGNAL_IN_TDEST,
        vld_in => SIGNAL_IN_TVALID,
        ack_in => regslice_both_SIGNAL_IN_V_dest_V_U_ack_in,
        data_out => SIGNAL_IN_TDEST_int_regslice,
        vld_out => regslice_both_SIGNAL_IN_V_dest_V_U_vld_out,
        ack_out => SIGNAL_IN_TREADY_int_regslice,
        apdone_blk => regslice_both_SIGNAL_IN_V_dest_V_U_apdone_blk);

    regslice_both_SIGNAL_OUT_V_data_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => SIGNAL_OUT_TDATA_int_regslice,
        vld_in => SIGNAL_OUT_TVALID_int_regslice,
        ack_in => SIGNAL_OUT_TREADY_int_regslice,
        data_out => SIGNAL_OUT_TDATA,
        vld_out => regslice_both_SIGNAL_OUT_V_data_V_U_vld_out,
        ack_out => SIGNAL_OUT_TREADY,
        apdone_blk => regslice_both_SIGNAL_OUT_V_data_V_U_apdone_blk);

    regslice_both_SIGNAL_OUT_V_keep_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_keep_V_reg_440,
        vld_in => SIGNAL_OUT_TVALID_int_regslice,
        ack_in => regslice_both_SIGNAL_OUT_V_keep_V_U_ack_in_dummy,
        data_out => SIGNAL_OUT_TKEEP,
        vld_out => regslice_both_SIGNAL_OUT_V_keep_V_U_vld_out,
        ack_out => SIGNAL_OUT_TREADY,
        apdone_blk => regslice_both_SIGNAL_OUT_V_keep_V_U_apdone_blk);

    regslice_both_SIGNAL_OUT_V_strb_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_strb_V_reg_445,
        vld_in => SIGNAL_OUT_TVALID_int_regslice,
        ack_in => regslice_both_SIGNAL_OUT_V_strb_V_U_ack_in_dummy,
        data_out => SIGNAL_OUT_TSTRB,
        vld_out => regslice_both_SIGNAL_OUT_V_strb_V_U_vld_out,
        ack_out => SIGNAL_OUT_TREADY,
        apdone_blk => regslice_both_SIGNAL_OUT_V_strb_V_U_apdone_blk);

    regslice_both_SIGNAL_OUT_V_user_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_user_V_reg_450,
        vld_in => SIGNAL_OUT_TVALID_int_regslice,
        ack_in => regslice_both_SIGNAL_OUT_V_user_V_U_ack_in_dummy,
        data_out => SIGNAL_OUT_TUSER,
        vld_out => regslice_both_SIGNAL_OUT_V_user_V_U_vld_out,
        ack_out => SIGNAL_OUT_TREADY,
        apdone_blk => regslice_both_SIGNAL_OUT_V_user_V_U_apdone_blk);

    regslice_both_SIGNAL_OUT_V_last_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_last_V_reg_455,
        vld_in => SIGNAL_OUT_TVALID_int_regslice,
        ack_in => regslice_both_SIGNAL_OUT_V_last_V_U_ack_in_dummy,
        data_out => SIGNAL_OUT_TLAST,
        vld_out => regslice_both_SIGNAL_OUT_V_last_V_U_vld_out,
        ack_out => SIGNAL_OUT_TREADY,
        apdone_blk => regslice_both_SIGNAL_OUT_V_last_V_U_apdone_blk);

    regslice_both_SIGNAL_OUT_V_id_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_id_V_reg_460,
        vld_in => SIGNAL_OUT_TVALID_int_regslice,
        ack_in => regslice_both_SIGNAL_OUT_V_id_V_U_ack_in_dummy,
        data_out => SIGNAL_OUT_TID,
        vld_out => regslice_both_SIGNAL_OUT_V_id_V_U_vld_out,
        ack_out => SIGNAL_OUT_TREADY,
        apdone_blk => regslice_both_SIGNAL_OUT_V_id_V_U_apdone_blk);

    regslice_both_SIGNAL_OUT_V_dest_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_dest_V_reg_465,
        vld_in => SIGNAL_OUT_TVALID_int_regslice,
        ack_in => regslice_both_SIGNAL_OUT_V_dest_V_U_ack_in_dummy,
        data_out => SIGNAL_OUT_TDEST,
        vld_out => regslice_both_SIGNAL_OUT_V_dest_V_U_vld_out,
        ack_out => SIGNAL_OUT_TREADY,
        apdone_blk => regslice_both_SIGNAL_OUT_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                    grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_ap_ready = ap_const_logic_1)) then 
                    grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = SIGNAL_IN_TVALID_int_regslice))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_ap_ready = ap_const_logic_1)) then 
                    grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_ap_ready = ap_const_logic_1)) then 
                    grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                gmem_addr_1_read_reg_503 <= gmem_RDATA;
                lowfreq_accumulate_reg_498 <= lowfreq_accumulate_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                gmem_addr_1_reg_476 <= sext_ln59_fu_332_p1;
                gmem_addr_2_reg_482 <= sext_ln69_fu_352_p1;
                gmem_addr_reg_470 <= sext_ln49_fu_312_p1;
                highfreq_coefs_read_reg_401 <= highfreq_coefs;
                lowfreq_coefs_read_reg_411 <= lowfreq_coefs;
                midfreq_coefs_read_reg_406 <= midfreq_coefs;
                tmp_data_V_reg_434 <= SIGNAL_IN_TDATA_int_regslice;
                tmp_dest_V_reg_465 <= SIGNAL_IN_TDEST_int_regslice;
                tmp_id_V_reg_460 <= SIGNAL_IN_TID_int_regslice;
                tmp_keep_V_reg_440 <= SIGNAL_IN_TKEEP_int_regslice;
                tmp_last_V_reg_455 <= SIGNAL_IN_TLAST_int_regslice;
                tmp_strb_V_reg_445 <= SIGNAL_IN_TSTRB_int_regslice;
                tmp_user_V_reg_450 <= SIGNAL_IN_TUSER_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                gmem_addr_2_read_reg_513 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                gmem_addr_read_reg_488 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                mul_ln49_reg_493 <= grp_fu_362_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                mul_ln59_reg_508 <= grp_fu_375_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                mul_ln69_reg_521 <= grp_fu_391_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state30, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state12, ap_CS_fsm_state22, grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_ap_done, grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_ap_done, grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_ap_done, gmem_ARREADY, gmem_RVALID, ap_CS_fsm_state2, regslice_both_SIGNAL_OUT_V_data_V_U_apdone_blk, SIGNAL_IN_TVALID_int_regslice, SIGNAL_OUT_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = SIGNAL_IN_TVALID_int_regslice))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_logic_1 = SIGNAL_OUT_TREADY_int_regslice))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                if ((not(((regslice_both_SIGNAL_OUT_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_logic_0 = SIGNAL_OUT_TREADY_int_regslice))) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    SIGNAL_IN_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, SIGNAL_IN_TVALID_int_regslice)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            SIGNAL_IN_TDATA_blk_n <= SIGNAL_IN_TVALID_int_regslice;
        else 
            SIGNAL_IN_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    SIGNAL_IN_TREADY <= regslice_both_SIGNAL_IN_V_data_V_U_ack_in;

    SIGNAL_IN_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_state1, SIGNAL_IN_TVALID_int_regslice)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = SIGNAL_IN_TVALID_int_regslice))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            SIGNAL_IN_TREADY_int_regslice <= ap_const_logic_1;
        else 
            SIGNAL_IN_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    SIGNAL_OUT_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state34, SIGNAL_OUT_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            SIGNAL_OUT_TDATA_blk_n <= SIGNAL_OUT_TREADY_int_regslice;
        else 
            SIGNAL_OUT_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    SIGNAL_OUT_TDATA_int_regslice <= std_logic_vector(unsigned(mul_ln69_reg_521) + unsigned(highfreq_accumulate_fu_396_p1));
    SIGNAL_OUT_TVALID <= regslice_both_SIGNAL_OUT_V_data_V_U_vld_out;

    SIGNAL_OUT_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state33, SIGNAL_OUT_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_logic_1 = SIGNAL_OUT_TREADY_int_regslice))) then 
            SIGNAL_OUT_TVALID_int_regslice <= ap_const_logic_1;
        else 
            SIGNAL_OUT_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);

    ap_ST_fsm_state10_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_ap_done)
    begin
        if ((grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state13_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, SIGNAL_IN_TVALID_int_regslice)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_const_logic_0 = SIGNAL_IN_TVALID_int_regslice))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state20_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state20_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state20_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state21_blk <= ap_const_logic_0;

    ap_ST_fsm_state22_blk_assign_proc : process(grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_ap_done)
    begin
        if ((grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state22_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state22_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state23_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state23_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state23_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_ap_done)
    begin
        if ((grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state30_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state30_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state30_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;

    ap_ST_fsm_state33_blk_assign_proc : process(SIGNAL_OUT_TREADY_int_regslice)
    begin
        if ((ap_const_logic_0 = SIGNAL_OUT_TREADY_int_regslice)) then 
            ap_ST_fsm_state33_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state33_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state34_blk_assign_proc : process(regslice_both_SIGNAL_OUT_V_data_V_U_apdone_blk, SIGNAL_OUT_TREADY_int_regslice)
    begin
        if (((regslice_both_SIGNAL_OUT_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_logic_0 = SIGNAL_OUT_TREADY_int_regslice))) then 
            ap_ST_fsm_state34_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state34_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, SIGNAL_IN_TVALID_int_regslice)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_const_logic_0 = SIGNAL_IN_TVALID_int_regslice));
    end process;


    ap_block_state1_ignore_call39_assign_proc : process(ap_start, SIGNAL_IN_TVALID_int_regslice)
    begin
                ap_block_state1_ignore_call39 <= ((ap_start = ap_const_logic_0) or (ap_const_logic_0 = SIGNAL_IN_TVALID_int_regslice));
    end process;


    ap_block_state34_assign_proc : process(regslice_both_SIGNAL_OUT_V_data_V_U_apdone_blk, SIGNAL_OUT_TREADY_int_regslice)
    begin
                ap_block_state34 <= ((regslice_both_SIGNAL_OUT_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_logic_0 = SIGNAL_OUT_TREADY_int_regslice));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state34, regslice_both_SIGNAL_OUT_V_data_V_U_apdone_blk, SIGNAL_OUT_TREADY_int_regslice)
    begin
        if ((not(((regslice_both_SIGNAL_OUT_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_logic_0 = SIGNAL_OUT_TREADY_int_regslice))) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state34, regslice_both_SIGNAL_OUT_V_data_V_U_apdone_blk, SIGNAL_OUT_TREADY_int_regslice)
    begin
        if ((not(((regslice_both_SIGNAL_OUT_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_logic_0 = SIGNAL_OUT_TREADY_int_regslice))) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state13, ap_CS_fsm_state23, gmem_addr_reg_470, gmem_addr_1_reg_476, gmem_addr_2_reg_482, ap_CS_fsm_state12, ap_CS_fsm_state22, grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_ARADDR, grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_ARADDR, grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_ARADDR, gmem_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state21)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            gmem_ARADDR <= gmem_addr_2_reg_482;
        elsif (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            gmem_ARADDR <= gmem_addr_1_reg_476;
        elsif (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem_ARADDR <= gmem_addr_reg_470;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            gmem_ARADDR <= grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem_ARADDR <= grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem_ARADDR <= grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_ARADDR;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state13, ap_CS_fsm_state23, ap_CS_fsm_state12, ap_CS_fsm_state22, grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_ARLEN, grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_ARLEN, grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_ARLEN, gmem_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state21)
    begin
        if ((((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            gmem_ARLEN <= ap_const_lv32_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            gmem_ARLEN <= grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem_ARLEN <= grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem_ARLEN <= grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_ARLEN;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state13, ap_CS_fsm_state23, ap_CS_fsm_state12, ap_CS_fsm_state22, grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_ARVALID, grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_ARVALID, grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_ARVALID, gmem_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state21)
    begin
        if ((((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            gmem_ARVALID <= grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem_ARVALID <= grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem_ARVALID <= grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state10, ap_CS_fsm_state20, ap_CS_fsm_state30, ap_CS_fsm_state12, ap_CS_fsm_state22, grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_RREADY, grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_RREADY, grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_RREADY, gmem_RVALID, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state21)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            gmem_RREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            gmem_RREADY <= grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_m_axi_gmem_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem_RREADY <= grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_m_axi_gmem_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem_RREADY <= grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_m_axi_gmem_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state13, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state20, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_ap_start <= grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_ap_start_reg;
    grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_ap_start <= grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_ap_start_reg;
    grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_ap_start <= grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_ap_start_reg;

    grp_fu_362_ce_assign_proc : process(ap_CS_fsm_state12, grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_ap_done, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            grp_fu_362_ce <= ap_const_logic_1;
        else 
            grp_fu_362_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_375_ce_assign_proc : process(ap_CS_fsm_state22, grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_ap_done, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or ((grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
            grp_fu_375_ce <= ap_const_logic_1;
        else 
            grp_fu_375_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_391_ce_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state22, grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_grp_fu_391_p_ce, grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_grp_fu_391_p_ce, grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_grp_fu_391_p_ce, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_391_ce <= grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_grp_fu_391_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_391_ce <= grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_grp_fu_391_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_391_ce <= grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_grp_fu_391_p_ce;
        else 
            grp_fu_391_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_391_p0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state22, gmem_addr_2_read_reg_513, grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_grp_fu_391_p_din0, grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_grp_fu_391_p_din0, grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_grp_fu_391_p_din0, ap_CS_fsm_state2, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_391_p0 <= grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_grp_fu_391_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_391_p0 <= grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_grp_fu_391_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_391_p0 <= grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_grp_fu_391_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_391_p0 <= gmem_addr_2_read_reg_513;
        else 
            grp_fu_391_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_391_p1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state22, grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_grp_fu_391_p_din1, grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_grp_fu_391_p_din1, grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_highfreq_accumulate_out, grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_grp_fu_391_p_din1, ap_CS_fsm_state2, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_391_p1 <= grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_grp_fu_391_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_391_p1 <= grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_grp_fu_391_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_391_p1 <= grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_grp_fu_391_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_391_p1 <= grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_highfreq_accumulate_out;
        else 
            grp_fu_391_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    highfreq_accumulate_fu_396_p1 <= grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_highfreq_accumulate_out;

    highfreq_shift_reg_address0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state22, grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_highfreq_shift_reg_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            highfreq_shift_reg_address0 <= ap_const_lv6_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            highfreq_shift_reg_address0 <= grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_highfreq_shift_reg_address0;
        else 
            highfreq_shift_reg_address0 <= "XXXXXX";
        end if; 
    end process;


    highfreq_shift_reg_ce0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state22, grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_highfreq_shift_reg_ce0, gmem_ARREADY)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            highfreq_shift_reg_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            highfreq_shift_reg_ce0 <= grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_highfreq_shift_reg_ce0;
        else 
            highfreq_shift_reg_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    highfreq_shift_reg_d0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state22, grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_highfreq_shift_reg_d0, midfreq_accumulate_fu_382_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            highfreq_shift_reg_d0 <= midfreq_accumulate_fu_382_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            highfreq_shift_reg_d0 <= grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_highfreq_shift_reg_d0;
        else 
            highfreq_shift_reg_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    highfreq_shift_reg_we0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state22, grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_highfreq_shift_reg_we0, gmem_ARREADY)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            highfreq_shift_reg_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            highfreq_shift_reg_we0 <= grp_equalizer_Pipeline_Highfreq_Shift_Accumulate_Loop_fu_264_highfreq_shift_reg_we0;
        else 
            highfreq_shift_reg_we0 <= ap_const_logic_0;
        end if; 
    end process;

    lowfreq_accumulate_fu_369_p2 <= std_logic_vector(unsigned(mul_ln49_reg_493) + unsigned(grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_lowfreq_accumulate_out));

    lowfreq_shift_reg_address0_assign_proc : process(ap_CS_fsm_state3, grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_lowfreq_shift_reg_address0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            lowfreq_shift_reg_address0 <= ap_const_lv6_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            lowfreq_shift_reg_address0 <= grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_lowfreq_shift_reg_address0;
        else 
            lowfreq_shift_reg_address0 <= "XXXXXX";
        end if; 
    end process;


    lowfreq_shift_reg_ce0_assign_proc : process(ap_CS_fsm_state3, grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_lowfreq_shift_reg_ce0, gmem_ARREADY, ap_CS_fsm_state2)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            lowfreq_shift_reg_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            lowfreq_shift_reg_ce0 <= grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_lowfreq_shift_reg_ce0;
        else 
            lowfreq_shift_reg_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lowfreq_shift_reg_d0_assign_proc : process(ap_CS_fsm_state3, tmp_data_V_reg_434, grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_lowfreq_shift_reg_d0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            lowfreq_shift_reg_d0 <= tmp_data_V_reg_434;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            lowfreq_shift_reg_d0 <= grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_lowfreq_shift_reg_d0;
        else 
            lowfreq_shift_reg_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    lowfreq_shift_reg_we0_assign_proc : process(ap_CS_fsm_state3, grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_lowfreq_shift_reg_we0, gmem_ARREADY, ap_CS_fsm_state2)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            lowfreq_shift_reg_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            lowfreq_shift_reg_we0 <= grp_equalizer_Pipeline_Lowfreq_Shift_Accumulate_Loop_fu_243_lowfreq_shift_reg_we0;
        else 
            lowfreq_shift_reg_we0 <= ap_const_logic_0;
        end if; 
    end process;

    midfreq_accumulate_fu_382_p2 <= std_logic_vector(unsigned(mul_ln59_reg_508) + unsigned(grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_midfreq_accumulate_out));

    midfreq_shift_reg_address0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state12, grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_midfreq_shift_reg_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            midfreq_shift_reg_address0 <= ap_const_lv6_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            midfreq_shift_reg_address0 <= grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_midfreq_shift_reg_address0;
        else 
            midfreq_shift_reg_address0 <= "XXXXXX";
        end if; 
    end process;


    midfreq_shift_reg_ce0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state12, grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_midfreq_shift_reg_ce0, gmem_RVALID)
    begin
        if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            midfreq_shift_reg_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            midfreq_shift_reg_ce0 <= grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_midfreq_shift_reg_ce0;
        else 
            midfreq_shift_reg_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    midfreq_shift_reg_d0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state12, lowfreq_accumulate_fu_369_p2, grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_midfreq_shift_reg_d0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            midfreq_shift_reg_d0 <= lowfreq_accumulate_fu_369_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            midfreq_shift_reg_d0 <= grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_midfreq_shift_reg_d0;
        else 
            midfreq_shift_reg_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    midfreq_shift_reg_we0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state12, grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_midfreq_shift_reg_we0, gmem_RVALID)
    begin
        if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            midfreq_shift_reg_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            midfreq_shift_reg_we0 <= grp_equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop_fu_254_midfreq_shift_reg_we0;
        else 
            midfreq_shift_reg_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln49_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_302_p4),64));

        sext_ln59_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_322_p4),64));

        sext_ln69_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln5_fu_342_p4),64));

    trunc_ln1_fu_302_p4 <= lowfreq_coefs(63 downto 2);
    trunc_ln3_fu_322_p4 <= midfreq_coefs(63 downto 2);
    trunc_ln5_fu_342_p4 <= highfreq_coefs(63 downto 2);
end behav;
