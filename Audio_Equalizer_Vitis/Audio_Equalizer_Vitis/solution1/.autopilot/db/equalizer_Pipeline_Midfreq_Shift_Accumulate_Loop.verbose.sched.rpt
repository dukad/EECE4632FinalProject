

================================================================
== Vitis HLS Report for 'equalizer_Pipeline_Midfreq_Shift_Accumulate_Loop'
================================================================
* Date:           Wed Mar 27 17:45:55 2024

* Version:        2022.1 (Build 3526262 on Mon Apr 18 15:48:16 MDT 2022)
* Project:        Audio_Equalizer_Vitis
* Solution:       solution1 (Vivado IP Flow Target)
* Product family: zynq
* Target device:  xc7z020-clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  7.300 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |       45|       45|  0.450 us|  0.450 us|   45|   45|       no|
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +---------------------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                                 |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |            Loop Name            |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +---------------------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- Midfreq_Shift_Accumulate_Loop  |       43|       43|        12|          1|          1|    33|       yes|
        +---------------------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 12


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 12
* Pipeline : 1
  Pipeline-0 : II = 1, D = 12, States = { 1 2 3 4 5 6 7 8 9 10 11 12 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 4 
4 --> 5 
5 --> 6 
6 --> 7 
7 --> 8 
8 --> 9 
9 --> 10 
10 --> 11 
11 --> 12 
12 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 5.12>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%midfreq_accumulate = alloca i32 1"   --->   Operation 15 'alloca' 'midfreq_accumulate' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%i = alloca i32 1"   --->   Operation 16 'alloca' 'i' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i32 %gmem, void @empty, i32 0, i32 0, void @empty_0, i32 0, i32 33, void @empty_1, void @empty_2, void @empty_0, i32 16, i32 16, i32 16, i32 16, void @empty_0, void @empty_0, i32 4294967295, i32 0"   --->   Operation 17 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%midfreq_coefs_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %midfreq_coefs"   --->   Operation 18 'read' 'midfreq_coefs_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (1.58ns)   --->   "%store_ln0 = store i7 32, i7 %i"   --->   Operation 19 'store' 'store_ln0' <Predicate = true> <Delay = 1.58>
ST_1 : Operation 20 [1/1] (1.58ns)   --->   "%store_ln0 = store i32 0, i32 %midfreq_accumulate"   --->   Operation 20 'store' 'store_ln0' <Predicate = true> <Delay = 1.58>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%br_ln0 = br void %for.inc27"   --->   Operation 21 'br' 'br_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%i_1 = load i7 %i" [equalizer.cpp:56]   --->   Operation 22 'load' 'i_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i32 %gmem"   --->   Operation 23 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%specpipeline_ln0 = specpipeline void @_ssdm_op_SpecPipeline, i32 4294967295, i32 0, i32 1, i32 0, void @p_str"   --->   Operation 24 'specpipeline' 'specpipeline_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%tmp = bitselect i1 @_ssdm_op_BitSelect.i1.i7.i32, i7 %i_1, i32 6" [equalizer.cpp:54]   --->   Operation 25 'bitselect' 'tmp' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%empty = speclooptripcount i32 @_ssdm_op_SpecLoopTripCount, i64 33, i64 33, i64 33"   --->   Operation 26 'speclooptripcount' 'empty' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%br_ln54 = br i1 %tmp, void %for.inc27.split, void %for.end29.exitStub" [equalizer.cpp:54]   --->   Operation 27 'br' 'br_ln54' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (1.87ns)   --->   "%add_ln54 = add i7 %i_1, i7 127" [equalizer.cpp:54]   --->   Operation 28 'add' 'add_ln54' <Predicate = (!tmp)> <Delay = 1.87> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.87> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 29 [1/1] (0.00ns)   --->   "%sext_ln55 = sext i7 %add_ln54" [equalizer.cpp:55]   --->   Operation 29 'sext' 'sext_ln55' <Predicate = (!tmp)> <Delay = 0.00>
ST_1 : Operation 30 [1/1] (0.00ns)   --->   "%midfreq_shift_reg_addr = getelementptr i32 %midfreq_shift_reg, i64 0, i64 %sext_ln55" [equalizer.cpp:55]   --->   Operation 30 'getelementptr' 'midfreq_shift_reg_addr' <Predicate = (!tmp)> <Delay = 0.00>
ST_1 : Operation 31 [2/2] (3.25ns)   --->   "%midfreq_shift_reg_load = load i6 %midfreq_shift_reg_addr" [equalizer.cpp:55]   --->   Operation 31 'load' 'midfreq_shift_reg_load' <Predicate = (!tmp)> <Delay = 3.25> <CoreInst = "RAM">   --->   Core 82 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 33> <RAM>
ST_1 : Operation 32 [1/1] (0.00ns)   --->   "%trunc_ln56 = trunc i7 %i_1" [equalizer.cpp:56]   --->   Operation 32 'trunc' 'trunc_ln56' <Predicate = (!tmp)> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "%shl_ln1 = bitconcatenate i8 @_ssdm_op_BitConcatenate.i8.i6.i2, i6 %trunc_ln56, i2 0" [equalizer.cpp:56]   --->   Operation 33 'bitconcatenate' 'shl_ln1' <Predicate = (!tmp)> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "%zext_ln56 = zext i8 %shl_ln1" [equalizer.cpp:56]   --->   Operation 34 'zext' 'zext_ln56' <Predicate = (!tmp)> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (3.52ns)   --->   "%add_ln56 = add i64 %zext_ln56, i64 %midfreq_coefs_read" [equalizer.cpp:56]   --->   Operation 35 'add' 'add_ln56' <Predicate = (!tmp)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 36 [1/1] (0.00ns)   --->   "%trunc_ln2 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln56, i32 2, i32 63" [equalizer.cpp:56]   --->   Operation 36 'partselect' 'trunc_ln2' <Predicate = (!tmp)> <Delay = 0.00>
ST_1 : Operation 37 [1/1] (0.00ns)   --->   "%sext_ln56 = sext i62 %trunc_ln2" [equalizer.cpp:56]   --->   Operation 37 'sext' 'sext_ln56' <Predicate = (!tmp)> <Delay = 0.00>
ST_1 : Operation 38 [1/1] (0.00ns)   --->   "%gmem_addr = getelementptr i32 %gmem, i64 %sext_ln56" [equalizer.cpp:56]   --->   Operation 38 'getelementptr' 'gmem_addr' <Predicate = (!tmp)> <Delay = 0.00>
ST_1 : Operation 39 [1/1] (1.58ns)   --->   "%store_ln54 = store i7 %add_ln54, i7 %i" [equalizer.cpp:54]   --->   Operation 39 'store' 'store_ln54' <Predicate = (!tmp)> <Delay = 1.58>

State 2 <SV = 1> <Delay = 7.30>
ST_2 : Operation 40 [1/1] (0.00ns)   --->   "%i_1_cast2 = zext i7 %i_1" [equalizer.cpp:56]   --->   Operation 40 'zext' 'i_1_cast2' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 41 [1/2] (3.25ns)   --->   "%midfreq_shift_reg_load = load i6 %midfreq_shift_reg_addr" [equalizer.cpp:55]   --->   Operation 41 'load' 'midfreq_shift_reg_load' <Predicate = true> <Delay = 3.25> <CoreInst = "RAM">   --->   Core 82 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 33> <RAM>
ST_2 : Operation 42 [1/1] (0.00ns)   --->   "%midfreq_shift_reg_addr_1 = getelementptr i32 %midfreq_shift_reg, i64 0, i64 %i_1_cast2" [equalizer.cpp:55]   --->   Operation 42 'getelementptr' 'midfreq_shift_reg_addr_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 43 [1/1] (3.25ns)   --->   "%store_ln55 = store i32 %midfreq_shift_reg_load, i6 %midfreq_shift_reg_addr_1" [equalizer.cpp:55]   --->   Operation 43 'store' 'store_ln55' <Predicate = true> <Delay = 3.25> <CoreInst = "RAM">   --->   Core 82 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 33> <RAM>
ST_2 : Operation 44 [7/7] (7.30ns)   --->   "%gmem_load_2_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i32P1A, i32 %gmem_addr, i32 1" [equalizer.cpp:56]   --->   Operation 44 'readreq' 'gmem_load_2_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 3 <SV = 2> <Delay = 7.30>
ST_3 : Operation 45 [6/7] (7.30ns)   --->   "%gmem_load_2_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i32P1A, i32 %gmem_addr, i32 1" [equalizer.cpp:56]   --->   Operation 45 'readreq' 'gmem_load_2_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 4 <SV = 3> <Delay = 7.30>
ST_4 : Operation 46 [5/7] (7.30ns)   --->   "%gmem_load_2_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i32P1A, i32 %gmem_addr, i32 1" [equalizer.cpp:56]   --->   Operation 46 'readreq' 'gmem_load_2_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 5 <SV = 4> <Delay = 7.30>
ST_5 : Operation 47 [4/7] (7.30ns)   --->   "%gmem_load_2_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i32P1A, i32 %gmem_addr, i32 1" [equalizer.cpp:56]   --->   Operation 47 'readreq' 'gmem_load_2_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 6 <SV = 5> <Delay = 7.30>
ST_6 : Operation 48 [3/7] (7.30ns)   --->   "%gmem_load_2_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i32P1A, i32 %gmem_addr, i32 1" [equalizer.cpp:56]   --->   Operation 48 'readreq' 'gmem_load_2_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 7 <SV = 6> <Delay = 7.30>
ST_7 : Operation 49 [2/7] (7.30ns)   --->   "%gmem_load_2_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i32P1A, i32 %gmem_addr, i32 1" [equalizer.cpp:56]   --->   Operation 49 'readreq' 'gmem_load_2_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 8 <SV = 7> <Delay = 7.30>
ST_8 : Operation 50 [1/7] (7.30ns)   --->   "%gmem_load_2_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i32P1A, i32 %gmem_addr, i32 1" [equalizer.cpp:56]   --->   Operation 50 'readreq' 'gmem_load_2_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 9 <SV = 8> <Delay = 7.30>
ST_9 : Operation 51 [1/1] (7.30ns)   --->   "%gmem_addr_read = read i32 @_ssdm_op_Read.m_axi.i32P1A, i32 %gmem_addr" [equalizer.cpp:56]   --->   Operation 51 'read' 'gmem_addr_read' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 10 <SV = 9> <Delay = 6.91>
ST_10 : Operation 52 [2/2] (6.91ns)   --->   "%mul_ln56 = mul i32 %gmem_addr_read, i32 %midfreq_shift_reg_load" [equalizer.cpp:56]   --->   Operation 52 'mul' 'mul_ln56' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>

State 11 <SV = 10> <Delay = 6.91>
ST_11 : Operation 53 [1/2] (6.91ns)   --->   "%mul_ln56 = mul i32 %gmem_addr_read, i32 %midfreq_shift_reg_load" [equalizer.cpp:56]   --->   Operation 53 'mul' 'mul_ln56' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_11 : Operation 59 [1/1] (0.00ns)   --->   "%midfreq_accumulate_load_1 = load i32 %midfreq_accumulate"   --->   Operation 59 'load' 'midfreq_accumulate_load_1' <Predicate = (tmp)> <Delay = 0.00>
ST_11 : Operation 60 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i32P0A, i32 %midfreq_accumulate_out, i32 %midfreq_accumulate_load_1"   --->   Operation 60 'write' 'write_ln0' <Predicate = (tmp)> <Delay = 0.00>
ST_11 : Operation 61 [1/1] (0.00ns)   --->   "%ret_ln0 = ret"   --->   Operation 61 'ret' 'ret_ln0' <Predicate = (tmp)> <Delay = 0.00>

State 12 <SV = 11> <Delay = 4.14>
ST_12 : Operation 54 [1/1] (0.00ns)   --->   "%midfreq_accumulate_load = load i32 %midfreq_accumulate" [equalizer.cpp:56]   --->   Operation 54 'load' 'midfreq_accumulate_load' <Predicate = true> <Delay = 0.00>
ST_12 : Operation 55 [1/1] (0.00ns)   --->   "%specloopname_ln33 = specloopname void @_ssdm_op_SpecLoopName, void @empty_14" [equalizer.cpp:33]   --->   Operation 55 'specloopname' 'specloopname_ln33' <Predicate = true> <Delay = 0.00>
ST_12 : Operation 56 [1/1] (2.55ns)   --->   "%midfreq_accumulate_1 = add i32 %mul_ln56, i32 %midfreq_accumulate_load" [equalizer.cpp:56]   --->   Operation 56 'add' 'midfreq_accumulate_1' <Predicate = true> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_12 : Operation 57 [1/1] (1.58ns)   --->   "%store_ln54 = store i32 %midfreq_accumulate_1, i32 %midfreq_accumulate" [equalizer.cpp:54]   --->   Operation 57 'store' 'store_ln54' <Predicate = true> <Delay = 1.58>
ST_12 : Operation 58 [1/1] (0.00ns)   --->   "%br_ln54 = br void %for.inc27" [equalizer.cpp:54]   --->   Operation 58 'br' 'br_ln54' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 2.7ns.

 <State 1>: 5.12ns
The critical path consists of the following:
	'alloca' operation ('i') [6]  (0 ns)
	'load' operation ('i', equalizer.cpp:56) on local variable 'i' [13]  (0 ns)
	'add' operation ('add_ln54', equalizer.cpp:54) [23]  (1.87 ns)
	'getelementptr' operation ('midfreq_shift_reg_addr', equalizer.cpp:55) [25]  (0 ns)
	'load' operation ('midfreq_shift_reg_load', equalizer.cpp:55) on array 'midfreq_shift_reg' [26]  (3.25 ns)

 <State 2>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_load_2_req', equalizer.cpp:56) on port 'gmem' (equalizer.cpp:56) [36]  (7.3 ns)

 <State 3>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_load_2_req', equalizer.cpp:56) on port 'gmem' (equalizer.cpp:56) [36]  (7.3 ns)

 <State 4>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_load_2_req', equalizer.cpp:56) on port 'gmem' (equalizer.cpp:56) [36]  (7.3 ns)

 <State 5>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_load_2_req', equalizer.cpp:56) on port 'gmem' (equalizer.cpp:56) [36]  (7.3 ns)

 <State 6>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_load_2_req', equalizer.cpp:56) on port 'gmem' (equalizer.cpp:56) [36]  (7.3 ns)

 <State 7>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_load_2_req', equalizer.cpp:56) on port 'gmem' (equalizer.cpp:56) [36]  (7.3 ns)

 <State 8>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_load_2_req', equalizer.cpp:56) on port 'gmem' (equalizer.cpp:56) [36]  (7.3 ns)

 <State 9>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read', equalizer.cpp:56) on port 'gmem' (equalizer.cpp:56) [37]  (7.3 ns)

 <State 10>: 6.91ns
The critical path consists of the following:
	'mul' operation ('mul_ln56', equalizer.cpp:56) [38]  (6.91 ns)

 <State 11>: 6.91ns
The critical path consists of the following:
	'mul' operation ('mul_ln56', equalizer.cpp:56) [38]  (6.91 ns)

 <State 12>: 4.14ns
The critical path consists of the following:
	'load' operation ('midfreq_accumulate_load', equalizer.cpp:56) on local variable 'midfreq_accumulate' [20]  (0 ns)
	'add' operation ('midfreq_accumulate', equalizer.cpp:56) [39]  (2.55 ns)
	'store' operation ('store_ln54', equalizer.cpp:54) of variable 'midfreq_accumulate', equalizer.cpp:56 on local variable 'midfreq_accumulate' [41]  (1.59 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
