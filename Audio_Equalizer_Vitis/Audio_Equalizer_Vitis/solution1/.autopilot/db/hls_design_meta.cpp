#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_start", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_done", 1, hls_out, -1, "", "", 1),
	Port_Property("ap_idle", 1, hls_out, -1, "", "", 1),
	Port_Property("ap_ready", 1, hls_out, -1, "", "", 1),
	Port_Property("SIGNAL_IN_TDATA", 32, hls_in, 0, "axis", "in_data", 1),
	Port_Property("SIGNAL_IN_TVALID", 1, hls_in, 6, "axis", "in_vld", 1),
	Port_Property("SIGNAL_IN_TREADY", 1, hls_out, 6, "axis", "in_acc", 1),
	Port_Property("SIGNAL_IN_TKEEP", 4, hls_in, 1, "axis", "in_data", 1),
	Port_Property("SIGNAL_IN_TSTRB", 4, hls_in, 2, "axis", "in_data", 1),
	Port_Property("SIGNAL_IN_TUSER", 2, hls_in, 3, "axis", "in_data", 1),
	Port_Property("SIGNAL_IN_TLAST", 1, hls_in, 4, "axis", "in_data", 1),
	Port_Property("SIGNAL_IN_TID", 5, hls_in, 5, "axis", "in_data", 1),
	Port_Property("SIGNAL_IN_TDEST", 6, hls_in, 6, "axis", "in_data", 1),
	Port_Property("SIGNAL_OUT_TDATA", 32, hls_out, 7, "axis", "out_data", 1),
	Port_Property("SIGNAL_OUT_TVALID", 1, hls_out, 13, "axis", "out_vld", 1),
	Port_Property("SIGNAL_OUT_TREADY", 1, hls_in, 13, "axis", "out_acc", 1),
	Port_Property("SIGNAL_OUT_TKEEP", 4, hls_out, 8, "axis", "out_data", 1),
	Port_Property("SIGNAL_OUT_TSTRB", 4, hls_out, 9, "axis", "out_data", 1),
	Port_Property("SIGNAL_OUT_TUSER", 2, hls_out, 10, "axis", "out_data", 1),
	Port_Property("SIGNAL_OUT_TLAST", 1, hls_out, 11, "axis", "out_data", 1),
	Port_Property("SIGNAL_OUT_TID", 5, hls_out, 12, "axis", "out_data", 1),
	Port_Property("SIGNAL_OUT_TDEST", 6, hls_out, 13, "axis", "out_data", 1),
	Port_Property("lowpass_coefs_address0", 6, hls_out, 14, "ap_memory", "mem_address", 1),
	Port_Property("lowpass_coefs_ce0", 1, hls_out, 14, "ap_memory", "mem_ce", 1),
	Port_Property("lowpass_coefs_we0", 1, hls_out, 14, "ap_memory", "mem_we", 1),
	Port_Property("lowpass_coefs_d0", 32, hls_out, 14, "ap_memory", "mem_din", 1),
	Port_Property("lowpass_coefs_q0", 32, hls_in, 14, "ap_memory", "mem_dout", 1),
	Port_Property("lowpass_coefs_address1", 6, hls_out, 14, "ap_memory", "MemPortADDR2", 1),
	Port_Property("lowpass_coefs_ce1", 1, hls_out, 14, "ap_memory", "MemPortCE2", 1),
	Port_Property("lowpass_coefs_we1", 1, hls_out, 14, "ap_memory", "MemPortWE2", 1),
	Port_Property("lowpass_coefs_d1", 32, hls_out, 14, "ap_memory", "MemPortDIN2", 1),
	Port_Property("lowpass_coefs_q1", 32, hls_in, 14, "ap_memory", "MemPortDOUT2", 1),
	Port_Property("bandpass_coefs_address0", 6, hls_out, 15, "ap_memory", "mem_address", 1),
	Port_Property("bandpass_coefs_ce0", 1, hls_out, 15, "ap_memory", "mem_ce", 1),
	Port_Property("bandpass_coefs_we0", 1, hls_out, 15, "ap_memory", "mem_we", 1),
	Port_Property("bandpass_coefs_d0", 32, hls_out, 15, "ap_memory", "mem_din", 1),
	Port_Property("bandpass_coefs_q0", 32, hls_in, 15, "ap_memory", "mem_dout", 1),
	Port_Property("bandpass_coefs_address1", 6, hls_out, 15, "ap_memory", "MemPortADDR2", 1),
	Port_Property("bandpass_coefs_ce1", 1, hls_out, 15, "ap_memory", "MemPortCE2", 1),
	Port_Property("bandpass_coefs_we1", 1, hls_out, 15, "ap_memory", "MemPortWE2", 1),
	Port_Property("bandpass_coefs_d1", 32, hls_out, 15, "ap_memory", "MemPortDIN2", 1),
	Port_Property("bandpass_coefs_q1", 32, hls_in, 15, "ap_memory", "MemPortDOUT2", 1),
	Port_Property("highpass_coefs_address0", 6, hls_out, 16, "ap_memory", "mem_address", 1),
	Port_Property("highpass_coefs_ce0", 1, hls_out, 16, "ap_memory", "mem_ce", 1),
	Port_Property("highpass_coefs_we0", 1, hls_out, 16, "ap_memory", "mem_we", 1),
	Port_Property("highpass_coefs_d0", 32, hls_out, 16, "ap_memory", "mem_din", 1),
	Port_Property("highpass_coefs_q0", 32, hls_in, 16, "ap_memory", "mem_dout", 1),
	Port_Property("highpass_coefs_address1", 6, hls_out, 16, "ap_memory", "MemPortADDR2", 1),
	Port_Property("highpass_coefs_ce1", 1, hls_out, 16, "ap_memory", "MemPortCE2", 1),
	Port_Property("highpass_coefs_we1", 1, hls_out, 16, "ap_memory", "MemPortWE2", 1),
	Port_Property("highpass_coefs_d1", 32, hls_out, 16, "ap_memory", "MemPortDIN2", 1),
	Port_Property("highpass_coefs_q1", 32, hls_in, 16, "ap_memory", "MemPortDOUT2", 1),
};
const char* HLS_Design_Meta::dut_name = "equalizer";
