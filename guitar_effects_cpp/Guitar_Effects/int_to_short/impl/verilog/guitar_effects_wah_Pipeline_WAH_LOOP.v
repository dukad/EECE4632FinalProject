// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module guitar_effects_wah_Pipeline_WAH_LOOP (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln238,
        wah_values_buffer_address0,
        wah_values_buffer_ce0,
        wah_values_buffer_q0,
        control_signal_buffer_address0,
        control_signal_buffer_ce0,
        control_signal_buffer_q0,
        bandpass_coeffs,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        temp_result_out,
        temp_result_out_ap_vld,
        grp_fu_541_p_din0,
        grp_fu_541_p_din1,
        grp_fu_541_p_dout0,
        grp_fu_541_p_ce,
        grp_fu_545_p_din0,
        grp_fu_545_p_dout0,
        grp_fu_545_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 6'd1;
parameter    ap_ST_fsm_pp0_stage1 = 6'd2;
parameter    ap_ST_fsm_pp0_stage2 = 6'd4;
parameter    ap_ST_fsm_pp0_stage3 = 6'd8;
parameter    ap_ST_fsm_pp0_stage4 = 6'd16;
parameter    ap_ST_fsm_pp0_stage5 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] zext_ln238;
output  [6:0] wah_values_buffer_address0;
output   wah_values_buffer_ce0;
input  [15:0] wah_values_buffer_q0;
output  [6:0] control_signal_buffer_address0;
output   control_signal_buffer_ce0;
input  [4:0] control_signal_buffer_q0;
input  [63:0] bandpass_coeffs;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
output  [31:0] temp_result_out;
output   temp_result_out_ap_vld;
output  [31:0] grp_fu_541_p_din0;
output  [31:0] grp_fu_541_p_din1;
input  [31:0] grp_fu_541_p_dout0;
output   grp_fu_541_p_ce;
output  [31:0] grp_fu_545_p_din0;
input  [31:0] grp_fu_545_p_dout0;
output   grp_fu_545_p_ce;

reg ap_idle;
reg wah_values_buffer_ce0;
reg control_signal_buffer_ce0;
reg m_axi_gmem_ARVALID;
reg m_axi_gmem_RREADY;
reg temp_result_out_ap_vld;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_state12_pp0_stage5_iter1;
wire    ap_block_state18_pp0_stage5_iter2;
wire    ap_block_state24_pp0_stage5_iter3;
wire    ap_block_state30_pp0_stage5_iter4;
wire    ap_block_state36_pp0_stage5_iter5;
wire    ap_block_pp0_stage5_subdone;
reg   [0:0] icmp_ln238_reg_631;
reg    ap_condition_exit_pp0_iter0_stage5;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state13_pp0_stage0_iter2;
wire    ap_block_state19_pp0_stage0_iter3;
wire    ap_block_state25_pp0_stage0_iter4;
wire    ap_block_state31_pp0_stage0_iter5;
wire    ap_block_state37_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_11001;
reg   [6:0] i_1_reg_626;
reg   [6:0] i_1_reg_626_pp0_iter1_reg;
reg   [6:0] i_1_reg_626_pp0_iter2_reg;
wire   [0:0] icmp_ln238_fu_215_p2;
reg   [0:0] icmp_ln238_reg_631_pp0_iter1_reg;
reg   [0:0] icmp_ln238_reg_631_pp0_iter2_reg;
reg   [0:0] icmp_ln238_reg_631_pp0_iter3_reg;
reg   [0:0] icmp_ln238_reg_631_pp0_iter4_reg;
wire   [63:0] zext_ln241_fu_252_p1;
reg   [63:0] zext_ln241_reg_640;
wire   [14:0] mul_ln1136_fu_261_p2;
reg   [14:0] mul_ln1136_reg_650;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state14_pp0_stage1_iter2;
wire    ap_block_state20_pp0_stage1_iter3;
wire    ap_block_state26_pp0_stage1_iter4;
wire    ap_block_state32_pp0_stage1_iter5;
wire    ap_block_pp0_stage1_11001;
reg   [63:0] gmem_addr_reg_655;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_state15_pp0_stage2_iter2;
wire    ap_block_state21_pp0_stage2_iter3;
wire    ap_block_state27_pp0_stage2_iter4;
wire    ap_block_state33_pp0_stage2_iter5;
wire    ap_block_pp0_stage2_11001;
reg   [15:0] wah_values_buffer_load_reg_666;
wire  signed [31:0] sext_ln241_fu_312_p1;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_state16_pp0_stage3_iter2;
wire    ap_block_state22_pp0_stage3_iter3;
wire    ap_block_state28_pp0_stage3_iter4;
wire    ap_block_state34_pp0_stage3_iter5;
reg    ap_block_pp0_stage3_11001;
reg   [31:0] p_Val2_s_reg_676;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_state17_pp0_stage4_iter2;
reg    ap_block_state23_pp0_stage4_iter3;
wire    ap_block_state29_pp0_stage4_iter4;
wire    ap_block_state35_pp0_stage4_iter5;
reg    ap_block_pp0_stage4_11001;
reg   [0:0] p_Result_4_reg_683;
wire   [0:0] icmp_ln1136_fu_324_p2;
reg   [0:0] icmp_ln1136_reg_689;
wire    ap_block_pp0_stage5_11001;
wire   [31:0] tmp_V_2_fu_334_p3;
reg   [31:0] tmp_V_2_reg_694;
wire   [31:0] sub_ln1145_fu_358_p2;
reg   [31:0] sub_ln1145_reg_701;
wire   [5:0] trunc_ln1148_fu_364_p1;
reg   [5:0] trunc_ln1148_reg_708;
wire   [7:0] trunc_ln1144_fu_368_p1;
reg   [7:0] trunc_ln1144_reg_713;
wire   [1:0] or_ln_fu_458_p3;
reg   [1:0] or_ln_reg_718;
wire   [0:0] icmp_ln1159_fu_466_p2;
reg   [0:0] icmp_ln1159_reg_723;
reg   [62:0] m_4_reg_728;
reg   [0:0] p_Result_2_reg_733;
reg   [31:0] conv_reg_738;
wire   [31:0] select_ln1136_fu_587_p3;
reg   [31:0] select_ln1136_reg_743;
reg   [31:0] mul_reg_748;
wire   [31:0] grp_fu_187_p2;
reg   [31:0] temp_result_1_reg_758;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage0;
wire  signed [63:0] sext_ln1136_fu_302_p1;
wire    ap_block_pp0_stage2;
reg   [31:0] temp_result_fu_122;
wire    ap_loop_init;
wire    ap_block_pp0_stage1;
reg   [6:0] i_fu_126;
wire   [6:0] add_ln238_fu_221_p2;
reg   [6:0] ap_sig_allocacmp_i_1;
wire    ap_block_pp0_stage0_01001;
wire   [8:0] zext_ln238_cast_fu_198_p1;
wire   [8:0] zext_ln238_1_fu_227_p1;
wire   [8:0] grp_fu_237_p0;
wire   [7:0] grp_fu_237_p1;
wire   [6:0] grp_fu_237_p2;
wire   [6:0] coeff_index_fu_248_p1;
wire   [9:0] mul_ln1136_fu_261_p1;
wire   [8:0] shl_ln1_fu_270_p3;
wire   [63:0] zext_ln1136_fu_277_p1;
wire   [63:0] add_ln1136_fu_281_p2;
wire  signed [63:0] sext_ln1136_2_fu_267_p1;
wire   [63:0] add_ln1136_1_fu_286_p2;
wire   [61:0] trunc_ln1_fu_292_p4;
wire    ap_block_pp0_stage5;
wire   [31:0] tmp_V_fu_329_p2;
reg   [31:0] p_Result_5_fu_340_p4;
reg   [31:0] l_fu_350_p3;
wire   [31:0] lsb_index_fu_372_p2;
wire   [30:0] tmp_fu_377_p4;
wire   [5:0] sub_ln1148_fu_393_p2;
wire   [31:0] zext_ln1148_fu_398_p1;
wire   [31:0] lshr_ln1148_fu_402_p2;
wire   [31:0] p_Result_s_fu_408_p2;
wire   [0:0] icmp_ln1147_fu_387_p2;
wire   [0:0] icmp_ln1148_fu_413_p2;
wire   [0:0] tmp_2_fu_425_p3;
wire   [0:0] p_Result_1_fu_439_p3;
wire   [0:0] xor_ln1150_fu_433_p2;
wire   [0:0] and_ln1150_fu_446_p2;
wire   [0:0] a_fu_419_p2;
wire   [0:0] or_ln1150_fu_452_p2;
wire   [31:0] add_ln1159_fu_475_p2;
wire   [63:0] zext_ln1158_fu_472_p1;
wire   [63:0] zext_ln1159_fu_480_p1;
wire   [31:0] sub_ln1160_fu_490_p2;
wire   [63:0] zext_ln1160_fu_495_p1;
wire   [63:0] lshr_ln1159_fu_484_p2;
wire   [63:0] shl_ln1160_fu_499_p2;
wire   [63:0] m_2_fu_505_p3;
wire   [63:0] zext_ln1162_fu_512_p1;
wire   [63:0] m_3_fu_515_p2;
wire   [7:0] sub_ln1165_fu_549_p2;
wire   [7:0] select_ln1144_fu_542_p3;
wire   [7:0] add_ln1170_fu_554_p2;
wire   [63:0] zext_ln1163_fu_539_p1;
wire   [8:0] tmp_1_fu_560_p3;
wire   [63:0] p_Result_6_fu_567_p5;
wire   [31:0] LD_fu_579_p1;
wire   [31:0] bitcast_ln810_fu_583_p1;
reg    grp_fu_187_ce;
reg    grp_fu_191_ce;
reg    grp_fu_195_ce;
reg    grp_fu_237_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter5_stage0;
reg    ap_idle_pp0_0to4;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0_1to6;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

guitar_effects_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(temp_result_fu_122),
    .din1(mul_reg_748),
    .ce(grp_fu_187_ce),
    .dout(grp_fu_187_p2)
);

guitar_effects_srem_9ns_8ns_7_13_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 7 ))
srem_9ns_8ns_7_13_1_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_237_p0),
    .din1(grp_fu_237_p1),
    .ce(grp_fu_237_ce),
    .dout(grp_fu_237_p2)
);

guitar_effects_mul_5s_10ns_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 15 ))
mul_5s_10ns_15_1_1_U27(
    .din0(control_signal_buffer_q0),
    .din1(mul_ln1136_fu_261_p1),
    .dout(mul_ln1136_fu_261_p2)
);

guitar_effects_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage5),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage5)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage0))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage0))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln238_fu_215_p2 == 1'd0))) begin
            i_fu_126 <= add_ln238_fu_221_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_126 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            temp_result_fu_122 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter6 == 1'b1)) begin
            temp_result_fu_122 <= temp_result_1_reg_758;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        conv_reg_738 <= grp_fu_545_p_dout0;
        gmem_addr_reg_655 <= sext_ln1136_fu_302_p1;
        select_ln1136_reg_743 <= select_ln1136_fu_587_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_1_reg_626 <= ap_sig_allocacmp_i_1;
        i_1_reg_626_pp0_iter1_reg <= i_1_reg_626;
        i_1_reg_626_pp0_iter2_reg <= i_1_reg_626_pp0_iter1_reg;
        icmp_ln238_reg_631 <= icmp_ln238_fu_215_p2;
        icmp_ln238_reg_631_pp0_iter1_reg <= icmp_ln238_reg_631;
        icmp_ln238_reg_631_pp0_iter2_reg <= icmp_ln238_reg_631_pp0_iter1_reg;
        icmp_ln238_reg_631_pp0_iter3_reg <= icmp_ln238_reg_631_pp0_iter2_reg;
        icmp_ln238_reg_631_pp0_iter4_reg <= icmp_ln238_reg_631_pp0_iter3_reg;
        mul_reg_748 <= grp_fu_541_p_dout0;
        zext_ln241_reg_640[6 : 0] <= zext_ln241_fu_252_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        icmp_ln1136_reg_689 <= icmp_ln1136_fu_324_p2;
        sub_ln1145_reg_701 <= sub_ln1145_fu_358_p2;
        temp_result_1_reg_758 <= grp_fu_187_p2;
        tmp_V_2_reg_694 <= tmp_V_2_fu_334_p3;
        trunc_ln1144_reg_713 <= trunc_ln1144_fu_368_p1;
        trunc_ln1148_reg_708 <= trunc_ln1148_fu_364_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1136_reg_689 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1159_reg_723 <= icmp_ln1159_fu_466_p2;
        or_ln_reg_718[0] <= or_ln_fu_458_p3[0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln1136_reg_689 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        m_4_reg_728 <= {{m_3_fu_515_p2[63:1]}};
        p_Result_2_reg_733 <= m_3_fu_515_p2[32'd25];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul_ln1136_reg_650 <= mul_ln1136_fu_261_p2;
        wah_values_buffer_load_reg_666 <= wah_values_buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        p_Result_4_reg_683 <= m_axi_gmem_RDATA[32'd31];
        p_Val2_s_reg_676 <= m_axi_gmem_RDATA;
    end
end

always @ (*) begin
    if (((icmp_ln238_reg_631 == 1'd1) & (1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_condition_exit_pp0_iter0_stage5 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln238_reg_631_pp0_iter4_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter5_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter5_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to4 = 1'b1;
    end else begin
        ap_idle_pp0_0to4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to6 = 1'b1;
    end else begin
        ap_idle_pp0_1to6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 7'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_126;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        control_signal_buffer_ce0 = 1'b1;
    end else begin
        control_signal_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_187_ce = 1'b1;
    end else begin
        grp_fu_187_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_191_ce = 1'b1;
    end else begin
        grp_fu_191_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_195_ce = 1'b1;
    end else begin
        grp_fu_195_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_237_ce = 1'b1;
    end else begin
        grp_fu_237_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln238_reg_631_pp0_iter4_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_result_out_ap_vld = 1'b1;
    end else begin
        temp_result_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wah_values_buffer_ce0 = 1'b1;
    end else begin
        wah_values_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to6 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LD_fu_579_p1 = p_Result_6_fu_567_p5[31:0];

assign a_fu_419_p2 = (icmp_ln1148_fu_413_p2 & icmp_ln1147_fu_387_p2);

assign add_ln1136_1_fu_286_p2 = ($signed(add_ln1136_fu_281_p2) + $signed(sext_ln1136_2_fu_267_p1));

assign add_ln1136_fu_281_p2 = (zext_ln1136_fu_277_p1 + bandpass_coeffs);

assign add_ln1159_fu_475_p2 = ($signed(sub_ln1145_reg_701) + $signed(32'd4294967271));

assign add_ln1170_fu_554_p2 = (sub_ln1165_fu_549_p2 + select_ln1144_fu_542_p3);

assign add_ln238_fu_221_p2 = (ap_sig_allocacmp_i_1 + 7'd1);

assign and_ln1150_fu_446_p2 = (xor_ln1150_fu_433_p2 & p_Result_1_fu_439_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (m_axi_gmem_ARREADY == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (m_axi_gmem_ARREADY == 1'b0));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (m_axi_gmem_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((ap_enable_reg_pp0_iter3 == 1'b1) & (m_axi_gmem_RVALID == 1'b0));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state23_pp0_stage4_iter3 = (m_axi_gmem_RVALID == 1'b0);
end

assign ap_block_state24_pp0_stage5_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage4_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage5_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage3_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage4_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage5_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage5;

assign bitcast_ln810_fu_583_p1 = LD_fu_579_p1;

assign coeff_index_fu_248_p1 = grp_fu_237_p2[6:0];

assign control_signal_buffer_address0 = zext_ln241_fu_252_p1;

assign grp_fu_237_p0 = (zext_ln238_cast_fu_198_p1 - zext_ln238_1_fu_227_p1);

assign grp_fu_237_p1 = 9'd100;

assign grp_fu_541_p_ce = grp_fu_191_ce;

assign grp_fu_541_p_din0 = conv_reg_738;

assign grp_fu_541_p_din1 = select_ln1136_reg_743;

assign grp_fu_545_p_ce = grp_fu_195_ce;

assign grp_fu_545_p_din0 = sext_ln241_fu_312_p1;

assign icmp_ln1136_fu_324_p2 = ((p_Val2_s_reg_676 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1147_fu_387_p2 = (($signed(tmp_fu_377_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1148_fu_413_p2 = ((p_Result_s_fu_408_p2 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1159_fu_466_p2 = (($signed(lsb_index_fu_372_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln238_fu_215_p2 = ((ap_sig_allocacmp_i_1 == 7'd100) ? 1'b1 : 1'b0);


always @ (p_Result_5_fu_340_p4) begin
    if (p_Result_5_fu_340_p4[0] == 1'b1) begin
        l_fu_350_p3 = 32'd0;
    end else if (p_Result_5_fu_340_p4[1] == 1'b1) begin
        l_fu_350_p3 = 32'd1;
    end else if (p_Result_5_fu_340_p4[2] == 1'b1) begin
        l_fu_350_p3 = 32'd2;
    end else if (p_Result_5_fu_340_p4[3] == 1'b1) begin
        l_fu_350_p3 = 32'd3;
    end else if (p_Result_5_fu_340_p4[4] == 1'b1) begin
        l_fu_350_p3 = 32'd4;
    end else if (p_Result_5_fu_340_p4[5] == 1'b1) begin
        l_fu_350_p3 = 32'd5;
    end else if (p_Result_5_fu_340_p4[6] == 1'b1) begin
        l_fu_350_p3 = 32'd6;
    end else if (p_Result_5_fu_340_p4[7] == 1'b1) begin
        l_fu_350_p3 = 32'd7;
    end else if (p_Result_5_fu_340_p4[8] == 1'b1) begin
        l_fu_350_p3 = 32'd8;
    end else if (p_Result_5_fu_340_p4[9] == 1'b1) begin
        l_fu_350_p3 = 32'd9;
    end else if (p_Result_5_fu_340_p4[10] == 1'b1) begin
        l_fu_350_p3 = 32'd10;
    end else if (p_Result_5_fu_340_p4[11] == 1'b1) begin
        l_fu_350_p3 = 32'd11;
    end else if (p_Result_5_fu_340_p4[12] == 1'b1) begin
        l_fu_350_p3 = 32'd12;
    end else if (p_Result_5_fu_340_p4[13] == 1'b1) begin
        l_fu_350_p3 = 32'd13;
    end else if (p_Result_5_fu_340_p4[14] == 1'b1) begin
        l_fu_350_p3 = 32'd14;
    end else if (p_Result_5_fu_340_p4[15] == 1'b1) begin
        l_fu_350_p3 = 32'd15;
    end else if (p_Result_5_fu_340_p4[16] == 1'b1) begin
        l_fu_350_p3 = 32'd16;
    end else if (p_Result_5_fu_340_p4[17] == 1'b1) begin
        l_fu_350_p3 = 32'd17;
    end else if (p_Result_5_fu_340_p4[18] == 1'b1) begin
        l_fu_350_p3 = 32'd18;
    end else if (p_Result_5_fu_340_p4[19] == 1'b1) begin
        l_fu_350_p3 = 32'd19;
    end else if (p_Result_5_fu_340_p4[20] == 1'b1) begin
        l_fu_350_p3 = 32'd20;
    end else if (p_Result_5_fu_340_p4[21] == 1'b1) begin
        l_fu_350_p3 = 32'd21;
    end else if (p_Result_5_fu_340_p4[22] == 1'b1) begin
        l_fu_350_p3 = 32'd22;
    end else if (p_Result_5_fu_340_p4[23] == 1'b1) begin
        l_fu_350_p3 = 32'd23;
    end else if (p_Result_5_fu_340_p4[24] == 1'b1) begin
        l_fu_350_p3 = 32'd24;
    end else if (p_Result_5_fu_340_p4[25] == 1'b1) begin
        l_fu_350_p3 = 32'd25;
    end else if (p_Result_5_fu_340_p4[26] == 1'b1) begin
        l_fu_350_p3 = 32'd26;
    end else if (p_Result_5_fu_340_p4[27] == 1'b1) begin
        l_fu_350_p3 = 32'd27;
    end else if (p_Result_5_fu_340_p4[28] == 1'b1) begin
        l_fu_350_p3 = 32'd28;
    end else if (p_Result_5_fu_340_p4[29] == 1'b1) begin
        l_fu_350_p3 = 32'd29;
    end else if (p_Result_5_fu_340_p4[30] == 1'b1) begin
        l_fu_350_p3 = 32'd30;
    end else if (p_Result_5_fu_340_p4[31] == 1'b1) begin
        l_fu_350_p3 = 32'd31;
    end else begin
        l_fu_350_p3 = 32'd32;
    end
end

assign lsb_index_fu_372_p2 = ($signed(sub_ln1145_reg_701) + $signed(32'd4294967272));

assign lshr_ln1148_fu_402_p2 = 32'd4294967295 >> zext_ln1148_fu_398_p1;

assign lshr_ln1159_fu_484_p2 = zext_ln1158_fu_472_p1 >> zext_ln1159_fu_480_p1;

assign m_2_fu_505_p3 = ((icmp_ln1159_reg_723[0:0] == 1'b1) ? lshr_ln1159_fu_484_p2 : shl_ln1160_fu_499_p2);

assign m_3_fu_515_p2 = (m_2_fu_505_p3 + zext_ln1162_fu_512_p1);

assign m_axi_gmem_ARADDR = gmem_addr_reg_655;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 32'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign mul_ln1136_fu_261_p1 = 15'd400;

assign or_ln1150_fu_452_p2 = (and_ln1150_fu_446_p2 | a_fu_419_p2);

assign or_ln_fu_458_p3 = {{1'd0}, {or_ln1150_fu_452_p2}};

assign p_Result_1_fu_439_p3 = tmp_V_2_reg_694[lsb_index_fu_372_p2];

integer ap_tvar_int_0;

always @ (tmp_V_2_fu_334_p3) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            p_Result_5_fu_340_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_5_fu_340_p4[ap_tvar_int_0] = tmp_V_2_fu_334_p3[31 - ap_tvar_int_0];
        end
    end
end

assign p_Result_6_fu_567_p5 = {{zext_ln1163_fu_539_p1[63:32]}, {tmp_1_fu_560_p3}, {zext_ln1163_fu_539_p1[22:0]}};

assign p_Result_s_fu_408_p2 = (tmp_V_2_reg_694 & lshr_ln1148_fu_402_p2);

assign select_ln1136_fu_587_p3 = ((icmp_ln1136_reg_689[0:0] == 1'b1) ? 32'd0 : bitcast_ln810_fu_583_p1);

assign select_ln1144_fu_542_p3 = ((p_Result_2_reg_733[0:0] == 1'b1) ? 8'd127 : 8'd126);

assign sext_ln1136_2_fu_267_p1 = $signed(mul_ln1136_reg_650);

assign sext_ln1136_fu_302_p1 = $signed(trunc_ln1_fu_292_p4);

assign sext_ln241_fu_312_p1 = $signed(wah_values_buffer_load_reg_666);

assign shl_ln1160_fu_499_p2 = zext_ln1158_fu_472_p1 << zext_ln1160_fu_495_p1;

assign shl_ln1_fu_270_p3 = {{i_1_reg_626_pp0_iter2_reg}, {2'd0}};

assign sub_ln1145_fu_358_p2 = (32'd32 - l_fu_350_p3);

assign sub_ln1148_fu_393_p2 = ($signed(6'd57) - $signed(trunc_ln1148_reg_708));

assign sub_ln1160_fu_490_p2 = (32'd25 - sub_ln1145_reg_701);

assign sub_ln1165_fu_549_p2 = (8'd8 - trunc_ln1144_reg_713);

assign temp_result_out = temp_result_fu_122;

assign tmp_1_fu_560_p3 = {{p_Result_4_reg_683}, {add_ln1170_fu_554_p2}};

assign tmp_2_fu_425_p3 = lsb_index_fu_372_p2[32'd31];

assign tmp_V_2_fu_334_p3 = ((p_Result_4_reg_683[0:0] == 1'b1) ? tmp_V_fu_329_p2 : p_Val2_s_reg_676);

assign tmp_V_fu_329_p2 = (32'd0 - p_Val2_s_reg_676);

assign tmp_fu_377_p4 = {{lsb_index_fu_372_p2[31:1]}};

assign trunc_ln1144_fu_368_p1 = l_fu_350_p3[7:0];

assign trunc_ln1148_fu_364_p1 = sub_ln1145_fu_358_p2[5:0];

assign trunc_ln1_fu_292_p4 = {{add_ln1136_1_fu_286_p2[63:2]}};

assign wah_values_buffer_address0 = zext_ln241_reg_640;

assign xor_ln1150_fu_433_p2 = (tmp_2_fu_425_p3 ^ 1'd1);

assign zext_ln1136_fu_277_p1 = shl_ln1_fu_270_p3;

assign zext_ln1148_fu_398_p1 = sub_ln1148_fu_393_p2;

assign zext_ln1158_fu_472_p1 = tmp_V_2_reg_694;

assign zext_ln1159_fu_480_p1 = add_ln1159_fu_475_p2;

assign zext_ln1160_fu_495_p1 = sub_ln1160_fu_490_p2;

assign zext_ln1162_fu_512_p1 = or_ln_reg_718;

assign zext_ln1163_fu_539_p1 = m_4_reg_728;

assign zext_ln238_1_fu_227_p1 = ap_sig_allocacmp_i_1;

assign zext_ln238_cast_fu_198_p1 = zext_ln238;

assign zext_ln241_fu_252_p1 = coeff_index_fu_248_p1;

always @ (posedge ap_clk) begin
    zext_ln241_reg_640[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    or_ln_reg_718[1] <= 1'b0;
end

endmodule //guitar_effects_wah_Pipeline_WAH_LOOP
