-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity guitar_effects is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_R_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_CONTROL_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    INPUT_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    INPUT_r_TVALID : IN STD_LOGIC;
    INPUT_r_TREADY : OUT STD_LOGIC;
    INPUT_r_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_r_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_r_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    INPUT_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_r_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    INPUT_r_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    OUTPUT_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUTPUT_r_TVALID : OUT STD_LOGIC;
    OUTPUT_r_TREADY : IN STD_LOGIC;
    OUTPUT_r_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_r_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_r_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    OUTPUT_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_r_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    OUTPUT_r_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_control_r_AWVALID : IN STD_LOGIC;
    s_axi_control_r_AWREADY : OUT STD_LOGIC;
    s_axi_control_r_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_ADDR_WIDTH-1 downto 0);
    s_axi_control_r_WVALID : IN STD_LOGIC;
    s_axi_control_r_WREADY : OUT STD_LOGIC;
    s_axi_control_r_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH-1 downto 0);
    s_axi_control_r_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH/8-1 downto 0);
    s_axi_control_r_ARVALID : IN STD_LOGIC;
    s_axi_control_r_ARREADY : OUT STD_LOGIC;
    s_axi_control_r_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_ADDR_WIDTH-1 downto 0);
    s_axi_control_r_RVALID : OUT STD_LOGIC;
    s_axi_control_r_RREADY : IN STD_LOGIC;
    s_axi_control_r_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH-1 downto 0);
    s_axi_control_r_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_r_BVALID : OUT STD_LOGIC;
    s_axi_control_r_BREADY : IN STD_LOGIC;
    s_axi_control_r_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of guitar_effects is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "guitar_effects_guitar_effects,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=131,HLS_SYN_DSP=0,HLS_SYN_FF=7873,HLS_SYN_LUT=12772,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (76 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (76 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (76 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (76 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (76 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (76 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (76 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (76 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (76 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (76 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (76 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_F000000 : STD_LOGIC_VECTOR (31 downto 0) := "00001111000000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv9_1B9 : STD_LOGIC_VECTOR (8 downto 0) := "110111001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv17_15888 : STD_LOGIC_VECTOR (16 downto 0) := "10101100010001000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_15888 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010101100010001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal axilite_out_ap_vld : STD_LOGIC;
    signal control : STD_LOGIC_VECTOR (7 downto 0);
    signal distortion_threshold : STD_LOGIC_VECTOR (31 downto 0);
    signal distortion_clip_factor : STD_LOGIC_VECTOR (7 downto 0);
    signal compression_min_threshold : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_max_threshold : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_zero_threshold : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_mult : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_samples : STD_LOGIC_VECTOR (31 downto 0);
    signal tempo : STD_LOGIC_VECTOR (31 downto 0);
    signal wah_coeffs : STD_LOGIC_VECTOR (63 downto 0);
    signal debug_output_ap_vld : STD_LOGIC;
    signal starting_sample : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal INPUT_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal OUTPUT_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal tmp_last_V_reg_1442 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal wah_coeffs_read_reg_1256 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal delay_samples_read_reg_1262 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_mult_read_reg_1267 : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_zero_threshold_read_reg_1272 : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_max_threshold_read_reg_1277 : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_min_threshold_read_reg_1282 : STD_LOGIC_VECTOR (31 downto 0);
    signal distortion_clip_factor_read_reg_1287 : STD_LOGIC_VECTOR (7 downto 0);
    signal distortion_threshold_read_reg_1292 : STD_LOGIC_VECTOR (31 downto 0);
    signal control_read_reg_1300 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln24_fu_614_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln24_reg_1307 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1376 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln84_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_1380 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_1384 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_read_reg_1394 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_59_fu_775_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_59_reg_1399 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal negative_threshold_fu_778_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal negative_threshold_reg_1405 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv7_i_i_i_fu_784_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal conv7_i_i_i_reg_1410 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln77_fu_797_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln77_reg_1422 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_keep_V_reg_1427 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_strb_V_reg_1432 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_user_V_reg_1437 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_id_V_reg_1446 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_dest_V_reg_1451 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_short_8_fu_829_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal current_sample_fu_833_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_sample_reg_1462 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln105_fu_839_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln105_reg_1467 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_fu_859_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_reg_1480 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln148_fu_849_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_2_fu_864_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_2_reg_1485 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_872_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal r_V_10_reg_1495 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ret_V_3_cast_reg_1500 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1049_1_fu_887_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln1049_1_reg_1507 : STD_LOGIC_VECTOR (6 downto 0);
    signal result_1_fu_922_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_930_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal r_V_9_reg_1522 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ret_V_cast_reg_1527 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1049_fu_945_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln1049_reg_1534 : STD_LOGIC_VECTOR (6 downto 0);
    signal result_fu_980_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal or_ln110_fu_989_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal delay_buffer_index_load_reg_1557 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_1016_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal srem_ln209_reg_1572 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal delay_buffer_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_buffer_load_reg_1582 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal sext_ln209_fu_1047_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal grp_fu_611_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_i_reg_1592 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal grp_fu_607_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_reg_1597 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal data_V_fu_1051_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_reg_1602 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal p_Result_13_fu_1064_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_13_reg_1607 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_fu_1078_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_1612 : STD_LOGIC_VECTOR (0 downto 0);
    signal ush_fu_1096_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_reg_1617 : STD_LOGIC_VECTOR (8 downto 0);
    signal val_fu_1158_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal val_reg_1622 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal result_V_4_fu_1165_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal result_V_4_reg_1627 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln115_fu_1171_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal output_fu_1190_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal compression_buffer_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal compression_buffer_ce0 : STD_LOGIC;
    signal compression_buffer_we0 : STD_LOGIC;
    signal compression_buffer_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal compression_buffer_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_buffer_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal delay_buffer_ce0 : STD_LOGIC;
    signal delay_buffer_we0 : STD_LOGIC;
    signal delay_buffer_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal wah_values_buffer_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal wah_values_buffer_ce0 : STD_LOGIC;
    signal wah_values_buffer_we0 : STD_LOGIC;
    signal wah_values_buffer_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal wah_values_buffer_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal control_signals_buffer_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal control_signals_buffer_ce0 : STD_LOGIC;
    signal control_signals_buffer_we0 : STD_LOGIC;
    signal control_signals_buffer_d0 : STD_LOGIC_VECTOR (4 downto 0);
    signal control_signals_buffer_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_compression_fu_580_ap_start : STD_LOGIC;
    signal grp_compression_fu_580_ap_done : STD_LOGIC;
    signal grp_compression_fu_580_ap_idle : STD_LOGIC;
    signal grp_compression_fu_580_ap_ready : STD_LOGIC;
    signal grp_compression_fu_580_values_buffer_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_compression_fu_580_values_buffer_ce0 : STD_LOGIC;
    signal grp_compression_fu_580_values_buffer_we0 : STD_LOGIC;
    signal grp_compression_fu_580_values_buffer_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compression_fu_580_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compression_fu_580_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compression_fu_580_grp_fu_607_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compression_fu_580_grp_fu_607_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compression_fu_580_grp_fu_607_p_ce : STD_LOGIC;
    signal grp_compression_fu_580_grp_fu_611_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compression_fu_580_grp_fu_611_p_ce : STD_LOGIC;
    signal grp_wah_fu_594_ap_start : STD_LOGIC;
    signal grp_wah_fu_594_ap_done : STD_LOGIC;
    signal grp_wah_fu_594_ap_idle : STD_LOGIC;
    signal grp_wah_fu_594_ap_ready : STD_LOGIC;
    signal grp_wah_fu_594_wah_values_buffer_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_wah_fu_594_wah_values_buffer_ce0 : STD_LOGIC;
    signal grp_wah_fu_594_wah_values_buffer_we0 : STD_LOGIC;
    signal grp_wah_fu_594_wah_values_buffer_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_wah_fu_594_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_wah_fu_594_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_wah_fu_594_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_wah_fu_594_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_wah_fu_594_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_wah_fu_594_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_wah_fu_594_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_wah_fu_594_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_wah_fu_594_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_wah_fu_594_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_wah_fu_594_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_wah_fu_594_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_wah_fu_594_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_wah_fu_594_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_wah_fu_594_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_wah_fu_594_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_wah_fu_594_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_wah_fu_594_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_wah_fu_594_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_wah_fu_594_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_wah_fu_594_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_wah_fu_594_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_wah_fu_594_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_wah_fu_594_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_wah_fu_594_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_wah_fu_594_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_wah_fu_594_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_wah_fu_594_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_wah_fu_594_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_wah_fu_594_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_wah_fu_594_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_wah_fu_594_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_wah_fu_594_control_signal_buffer_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_wah_fu_594_control_signal_buffer_ce0 : STD_LOGIC;
    signal grp_wah_fu_594_control_signal_buffer_we0 : STD_LOGIC;
    signal grp_wah_fu_594_control_signal_buffer_d0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_wah_fu_594_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_wah_fu_594_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_wah_fu_594_grp_fu_607_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_wah_fu_594_grp_fu_607_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_wah_fu_594_grp_fu_607_p_ce : STD_LOGIC;
    signal grp_wah_fu_594_grp_fu_611_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_wah_fu_594_grp_fu_611_p_ce : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal empty_61_reg_487 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_short_reg_501 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_62_reg_515 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_short_4_reg_526 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_63_reg_537 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_short_2_reg_548 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln120_fu_1210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_empty_64_phi_fu_562_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_64_reg_559 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state75 : BOOLEAN;
    signal ap_block_state75_io : BOOLEAN;
    signal ap_block_state75_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_phi_mux_tmp_short_9_phi_fu_573_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_short_9_reg_570 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compression_fu_580_ap_start_reg : STD_LOGIC := '0';
    signal grp_wah_fu_594_ap_start_reg : STD_LOGIC := '0';
    signal p_cast_fu_626_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond3725_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast4_fu_656_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond3712_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln84_fu_686_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln209_fu_1042_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln212_fu_1197_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln94_fu_764_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_244 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_53_fu_637_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_54_fu_264 : STD_LOGIC_VECTOR (16 downto 0);
    signal empty_56_fu_667_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_fu_268 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln84_fu_698_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal current_sample_1_fu_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_58_fu_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_buffer_index_fu_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1028_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_buffer_index_1_fu_284 : STD_LOGIC_VECTOR (15 downto 0);
    signal wah_buffer_index_1_fu_288 : STD_LOGIC_VECTOR (15 downto 0);
    signal debug_output_local_0_fu_292 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_607_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_607_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal grp_fu_611_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln4_fu_755_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln148_fu_845_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_872_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1049_1_fu_898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_2_fu_903_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_8_fu_891_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1048_1_fu_908_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_3_fu_915_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_930_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1049_fu_956_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_fu_961_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_949_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1048_fu_966_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_1_fu_973_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1016_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1016_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1028_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1028_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln209_fu_1039_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal xs_exp_V_fu_1054_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln346_fu_1068_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_fu_1072_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1512_fu_1086_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1512_fu_1092_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mantissa_fu_1104_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1488_fu_1117_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_1113_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1488_fu_1120_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_7_fu_1124_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_19_fu_1136_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_8_fu_1130_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln818_fu_1144_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_1148_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_12_fu_1177_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_fu_1184_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_607_ce : STD_LOGIC;
    signal grp_fu_611_ce : STD_LOGIC;
    signal grp_fu_1016_ap_start : STD_LOGIC;
    signal grp_fu_1016_ap_done : STD_LOGIC;
    signal grp_fu_1028_ap_start : STD_LOGIC;
    signal grp_fu_1028_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (76 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state77 : BOOLEAN;
    signal regslice_both_INPUT_r_V_data_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_r_TVALID_int_regslice : STD_LOGIC;
    signal INPUT_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_INPUT_r_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_r_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_INPUT_r_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_r_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_r_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_INPUT_r_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_r_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_r_V_user_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TUSER_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_INPUT_r_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_r_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_r_V_last_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_INPUT_r_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_r_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_r_V_id_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TID_int_regslice : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_INPUT_r_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_r_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_r_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TDEST_int_regslice : STD_LOGIC_VECTOR (5 downto 0);
    signal regslice_both_INPUT_r_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_r_V_dest_V_U_ack_in : STD_LOGIC;
    signal OUTPUT_r_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal OUTPUT_r_TVALID_int_regslice : STD_LOGIC;
    signal OUTPUT_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_last_V_U_apdone_blk : STD_LOGIC;
    signal OUTPUT_r_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_OUTPUT_r_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_condition_1800 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component guitar_effects_compression IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r : IN STD_LOGIC_VECTOR (15 downto 0);
        min_threshold : IN STD_LOGIC_VECTOR (31 downto 0);
        max_threshold : IN STD_LOGIC_VECTOR (31 downto 0);
        zero_threshold : IN STD_LOGIC_VECTOR (31 downto 0);
        values_buffer_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        values_buffer_ce0 : OUT STD_LOGIC;
        values_buffer_we0 : OUT STD_LOGIC;
        values_buffer_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        values_buffer_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        compression_buffer_index_read : IN STD_LOGIC_VECTOR (15 downto 0);
        current_sample : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        grp_fu_607_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_607_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_607_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_607_p_ce : OUT STD_LOGIC;
        grp_fu_611_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_611_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_611_p_ce : OUT STD_LOGIC );
    end component;


    component guitar_effects_wah IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read : IN STD_LOGIC_VECTOR (30 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
        wah_values_buffer_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        wah_values_buffer_ce0 : OUT STD_LOGIC;
        wah_values_buffer_we0 : OUT STD_LOGIC;
        wah_values_buffer_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        wah_values_buffer_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        bandpass_coeffs : IN STD_LOGIC_VECTOR (63 downto 0);
        control_signal_buffer_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        control_signal_buffer_ce0 : OUT STD_LOGIC;
        control_signal_buffer_we0 : OUT STD_LOGIC;
        control_signal_buffer_d0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        control_signal_buffer_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        grp_fu_607_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_607_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_607_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_607_p_ce : OUT STD_LOGIC;
        grp_fu_611_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_611_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_611_p_ce : OUT STD_LOGIC );
    end component;


    component guitar_effects_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_sitofp_32s_32_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_mul_32s_8s_40_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component guitar_effects_srem_32ns_18ns_17_36_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component guitar_effects_srem_32ns_18ns_32_36_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_compression_buffer_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component guitar_effects_delay_buffer_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component guitar_effects_wah_values_buffer_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component guitar_effects_control_signals_buffer_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (4 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component guitar_effects_control_r_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        axilite_out : IN STD_LOGIC_VECTOR (31 downto 0);
        axilite_out_ap_vld : IN STD_LOGIC;
        control : OUT STD_LOGIC_VECTOR (7 downto 0);
        distortion_threshold : OUT STD_LOGIC_VECTOR (31 downto 0);
        distortion_clip_factor : OUT STD_LOGIC_VECTOR (7 downto 0);
        compression_min_threshold : OUT STD_LOGIC_VECTOR (31 downto 0);
        compression_max_threshold : OUT STD_LOGIC_VECTOR (31 downto 0);
        compression_zero_threshold : OUT STD_LOGIC_VECTOR (31 downto 0);
        delay_mult : OUT STD_LOGIC_VECTOR (31 downto 0);
        delay_samples : OUT STD_LOGIC_VECTOR (31 downto 0);
        tempo : OUT STD_LOGIC_VECTOR (31 downto 0);
        wah_coeffs : OUT STD_LOGIC_VECTOR (63 downto 0);
        debug_output : IN STD_LOGIC_VECTOR (31 downto 0);
        debug_output_ap_vld : IN STD_LOGIC;
        starting_sample : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component guitar_effects_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    compression_buffer_U : component guitar_effects_compression_buffer_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 441,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => compression_buffer_address0,
        ce0 => compression_buffer_ce0,
        we0 => compression_buffer_we0,
        d0 => compression_buffer_d0,
        q0 => compression_buffer_q0);

    delay_buffer_U : component guitar_effects_delay_buffer_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 88200,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => delay_buffer_address0,
        ce0 => delay_buffer_ce0,
        we0 => delay_buffer_we0,
        d0 => delay_buffer_d0,
        q0 => delay_buffer_q0);

    wah_values_buffer_U : component guitar_effects_wah_values_buffer_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => wah_values_buffer_address0,
        ce0 => wah_values_buffer_ce0,
        we0 => wah_values_buffer_we0,
        d0 => wah_values_buffer_d0,
        q0 => wah_values_buffer_q0);

    control_signals_buffer_U : component guitar_effects_control_signals_buffer_RAM_AUTO_1R1W
    generic map (
        DataWidth => 5,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => control_signals_buffer_address0,
        ce0 => control_signals_buffer_ce0,
        we0 => control_signals_buffer_we0,
        d0 => control_signals_buffer_d0,
        q0 => control_signals_buffer_q0);

    grp_compression_fu_580 : component guitar_effects_compression
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_compression_fu_580_ap_start,
        ap_done => grp_compression_fu_580_ap_done,
        ap_idle => grp_compression_fu_580_ap_idle,
        ap_ready => grp_compression_fu_580_ap_ready,
        input_r => tmp_short_reg_501,
        min_threshold => compression_min_threshold_read_reg_1282,
        max_threshold => compression_max_threshold_read_reg_1277,
        zero_threshold => compression_zero_threshold_read_reg_1272,
        values_buffer_address0 => grp_compression_fu_580_values_buffer_address0,
        values_buffer_ce0 => grp_compression_fu_580_values_buffer_ce0,
        values_buffer_we0 => grp_compression_fu_580_values_buffer_we0,
        values_buffer_d0 => grp_compression_fu_580_values_buffer_d0,
        values_buffer_q0 => compression_buffer_q0,
        compression_buffer_index_read => compression_buffer_index_1_fu_284,
        current_sample => current_sample_1_fu_272,
        ap_return_0 => grp_compression_fu_580_ap_return_0,
        ap_return_1 => grp_compression_fu_580_ap_return_1,
        grp_fu_607_p_din0 => grp_compression_fu_580_grp_fu_607_p_din0,
        grp_fu_607_p_din1 => grp_compression_fu_580_grp_fu_607_p_din1,
        grp_fu_607_p_dout0 => grp_fu_607_p2,
        grp_fu_607_p_ce => grp_compression_fu_580_grp_fu_607_p_ce,
        grp_fu_611_p_din0 => grp_compression_fu_580_grp_fu_611_p_din0,
        grp_fu_611_p_dout0 => grp_fu_611_p1,
        grp_fu_611_p_ce => grp_compression_fu_580_grp_fu_611_p_ce);

    grp_wah_fu_594 : component guitar_effects_wah
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_wah_fu_594_ap_start,
        ap_done => grp_wah_fu_594_ap_done,
        ap_idle => grp_wah_fu_594_ap_idle,
        ap_ready => grp_wah_fu_594_ap_ready,
        input_r => tmp_short_2_reg_548,
        p_read => trunc_ln77_reg_1422,
        p_read1 => wah_buffer_index_1_fu_288,
        wah_values_buffer_address0 => grp_wah_fu_594_wah_values_buffer_address0,
        wah_values_buffer_ce0 => grp_wah_fu_594_wah_values_buffer_ce0,
        wah_values_buffer_we0 => grp_wah_fu_594_wah_values_buffer_we0,
        wah_values_buffer_d0 => grp_wah_fu_594_wah_values_buffer_d0,
        wah_values_buffer_q0 => wah_values_buffer_q0,
        m_axi_gmem_AWVALID => grp_wah_fu_594_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_wah_fu_594_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_wah_fu_594_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_wah_fu_594_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_wah_fu_594_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_wah_fu_594_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_wah_fu_594_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_wah_fu_594_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_wah_fu_594_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_wah_fu_594_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_wah_fu_594_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_wah_fu_594_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_wah_fu_594_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_wah_fu_594_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_wah_fu_594_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_wah_fu_594_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_wah_fu_594_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_wah_fu_594_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_wah_fu_594_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_wah_fu_594_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_wah_fu_594_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_wah_fu_594_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_wah_fu_594_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_wah_fu_594_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_wah_fu_594_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_wah_fu_594_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_wah_fu_594_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_wah_fu_594_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_wah_fu_594_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_wah_fu_594_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_wah_fu_594_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => gmem_RFIFONUM,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_wah_fu_594_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        bandpass_coeffs => wah_coeffs_read_reg_1256,
        control_signal_buffer_address0 => grp_wah_fu_594_control_signal_buffer_address0,
        control_signal_buffer_ce0 => grp_wah_fu_594_control_signal_buffer_ce0,
        control_signal_buffer_we0 => grp_wah_fu_594_control_signal_buffer_we0,
        control_signal_buffer_d0 => grp_wah_fu_594_control_signal_buffer_d0,
        control_signal_buffer_q0 => control_signals_buffer_q0,
        ap_return_0 => grp_wah_fu_594_ap_return_0,
        ap_return_1 => grp_wah_fu_594_ap_return_1,
        grp_fu_607_p_din0 => grp_wah_fu_594_grp_fu_607_p_din0,
        grp_fu_607_p_din1 => grp_wah_fu_594_grp_fu_607_p_din1,
        grp_fu_607_p_dout0 => grp_fu_607_p2,
        grp_fu_607_p_ce => grp_wah_fu_594_grp_fu_607_p_ce,
        grp_fu_611_p_din0 => grp_wah_fu_594_grp_fu_611_p_din0,
        grp_fu_611_p_dout0 => grp_fu_611_p1,
        grp_fu_611_p_ce => grp_wah_fu_594_grp_fu_611_p_ce);

    control_r_s_axi_U : component guitar_effects_control_r_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_R_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_R_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_r_AWVALID,
        AWREADY => s_axi_control_r_AWREADY,
        AWADDR => s_axi_control_r_AWADDR,
        WVALID => s_axi_control_r_WVALID,
        WREADY => s_axi_control_r_WREADY,
        WDATA => s_axi_control_r_WDATA,
        WSTRB => s_axi_control_r_WSTRB,
        ARVALID => s_axi_control_r_ARVALID,
        ARREADY => s_axi_control_r_ARREADY,
        ARADDR => s_axi_control_r_ARADDR,
        RVALID => s_axi_control_r_RVALID,
        RREADY => s_axi_control_r_RREADY,
        RDATA => s_axi_control_r_RDATA,
        RRESP => s_axi_control_r_RRESP,
        BVALID => s_axi_control_r_BVALID,
        BREADY => s_axi_control_r_BREADY,
        BRESP => s_axi_control_r_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        axilite_out => ap_phi_mux_empty_64_phi_fu_562_p4,
        axilite_out_ap_vld => axilite_out_ap_vld,
        control => control,
        distortion_threshold => distortion_threshold,
        distortion_clip_factor => distortion_clip_factor,
        compression_min_threshold => compression_min_threshold,
        compression_max_threshold => compression_max_threshold,
        compression_zero_threshold => compression_zero_threshold,
        delay_mult => delay_mult,
        delay_samples => delay_samples,
        tempo => tempo,
        wah_coeffs => wah_coeffs,
        debug_output => debug_output_local_0_fu_292,
        debug_output_ap_vld => debug_output_ap_vld,
        starting_sample => starting_sample);

    gmem_m_axi_U : component guitar_effects_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 9,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        USER_DW => 32,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARLEN => gmem_ARLEN,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => gmem_BVALID,
        I_BREADY => ap_const_logic_0);

    fmul_32ns_32ns_32_4_max_dsp_1_U52 : component guitar_effects_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_607_p0,
        din1 => grp_fu_607_p1,
        ce => grp_fu_607_ce,
        dout => grp_fu_607_p2);

    sitofp_32s_32_6_no_dsp_1_U53 : component guitar_effects_sitofp_32s_32_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_611_p0,
        ce => grp_fu_611_ce,
        dout => grp_fu_611_p1);

    mul_32s_8s_40_2_1_U54 : component guitar_effects_mul_32s_8s_40_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => r_V_reg_1480,
        din1 => grp_fu_872_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_872_p2);

    mul_32s_8s_40_2_1_U55 : component guitar_effects_mul_32s_8s_40_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => r_V_2_reg_1485,
        din1 => grp_fu_930_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_930_p2);

    srem_32ns_18ns_17_36_seq_1_U56 : component guitar_effects_srem_32ns_18ns_17_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 18,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_1016_ap_start,
        done => grp_fu_1016_ap_done,
        din0 => grp_fu_1016_p0,
        din1 => grp_fu_1016_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1016_p2);

    srem_32ns_18ns_32_36_seq_1_U57 : component guitar_effects_srem_32ns_18ns_32_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 18,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_1028_ap_start,
        done => grp_fu_1028_ap_done,
        din0 => grp_fu_1028_p0,
        din1 => grp_fu_1028_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1028_p2);

    regslice_both_INPUT_r_V_data_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TDATA,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_data_V_U_ack_in,
        data_out => INPUT_r_TDATA_int_regslice,
        vld_out => INPUT_r_TVALID_int_regslice,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_data_V_U_apdone_blk);

    regslice_both_INPUT_r_V_keep_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TKEEP,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_keep_V_U_ack_in,
        data_out => INPUT_r_TKEEP_int_regslice,
        vld_out => regslice_both_INPUT_r_V_keep_V_U_vld_out,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_keep_V_U_apdone_blk);

    regslice_both_INPUT_r_V_strb_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TSTRB,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_strb_V_U_ack_in,
        data_out => INPUT_r_TSTRB_int_regslice,
        vld_out => regslice_both_INPUT_r_V_strb_V_U_vld_out,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_strb_V_U_apdone_blk);

    regslice_both_INPUT_r_V_user_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TUSER,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_user_V_U_ack_in,
        data_out => INPUT_r_TUSER_int_regslice,
        vld_out => regslice_both_INPUT_r_V_user_V_U_vld_out,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_user_V_U_apdone_blk);

    regslice_both_INPUT_r_V_last_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TLAST,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_last_V_U_ack_in,
        data_out => INPUT_r_TLAST_int_regslice,
        vld_out => regslice_both_INPUT_r_V_last_V_U_vld_out,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_last_V_U_apdone_blk);

    regslice_both_INPUT_r_V_id_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TID,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_id_V_U_ack_in,
        data_out => INPUT_r_TID_int_regslice,
        vld_out => regslice_both_INPUT_r_V_id_V_U_vld_out,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_id_V_U_apdone_blk);

    regslice_both_INPUT_r_V_dest_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TDEST,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_dest_V_U_ack_in,
        data_out => INPUT_r_TDEST_int_regslice,
        vld_out => regslice_both_INPUT_r_V_dest_V_U_vld_out,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_dest_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_data_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => OUTPUT_r_TDATA_int_regslice,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => OUTPUT_r_TREADY_int_regslice,
        data_out => OUTPUT_r_TDATA,
        vld_out => regslice_both_OUTPUT_r_V_data_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_data_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_keep_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_keep_V_reg_1427,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_keep_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TKEEP,
        vld_out => regslice_both_OUTPUT_r_V_keep_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_keep_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_strb_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_strb_V_reg_1432,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_strb_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TSTRB,
        vld_out => regslice_both_OUTPUT_r_V_strb_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_strb_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_user_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_user_V_reg_1437,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_user_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TUSER,
        vld_out => regslice_both_OUTPUT_r_V_user_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_user_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_last_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => OUTPUT_r_TLAST_int_regslice,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_last_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TLAST,
        vld_out => regslice_both_OUTPUT_r_V_last_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_last_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_id_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_id_V_reg_1446,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_id_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TID,
        vld_out => regslice_both_OUTPUT_r_V_id_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_id_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_dest_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_dest_V_reg_1451,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_dest_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TDEST,
        vld_out => regslice_both_OUTPUT_r_V_dest_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_compression_fu_580_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_compression_fu_580_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_12_reg_1380 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                    grp_compression_fu_580_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_compression_fu_580_ap_ready = ap_const_logic_1)) then 
                    grp_compression_fu_580_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_wah_fu_594_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_wah_fu_594_ap_start_reg <= ap_const_logic_0;
            else
                if (((trunc_ln24_reg_1307 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state74))) then 
                    grp_wah_fu_594_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_wah_fu_594_ap_ready = ap_const_logic_1)) then 
                    grp_wah_fu_594_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    compression_buffer_index_1_fu_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln84_fu_692_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                compression_buffer_index_1_fu_284 <= ap_const_lv16_0;
            elsif (((grp_compression_fu_580_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                compression_buffer_index_1_fu_284 <= grp_compression_fu_580_ap_return_1;
            end if; 
        end if;
    end process;

    current_sample_1_fu_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln84_fu_692_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                current_sample_1_fu_272 <= ap_const_lv32_0;
            elsif ((not(((ap_const_boolean_1 = ap_block_state75_on_subcall_done) or (ap_const_boolean_1 = ap_block_state75_io) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_1442 = ap_const_lv1_0)) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_1442 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state75) and (tmp_last_V_reg_1442 = ap_const_lv1_0))) then 
                current_sample_1_fu_272 <= current_sample_reg_1462;
            end if; 
        end if;
    end process;

    debug_output_local_0_fu_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                debug_output_local_0_fu_292 <= gmem_addr_read_reg_1394;
            elsif (((trunc_ln24_reg_1307 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state74))) then 
                debug_output_local_0_fu_292 <= ap_const_lv32_F000000;
            end if; 
        end if;
    end process;

    delay_buffer_index_fu_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln84_fu_692_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                delay_buffer_index_fu_280 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                delay_buffer_index_fu_280 <= grp_fu_1028_p2;
            end if; 
        end if;
    end process;

    empty_54_fu_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3725_fu_631_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                empty_54_fu_264 <= ap_const_lv17_0;
            elsif (((exitcond3712_fu_661_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                empty_54_fu_264 <= empty_56_fu_667_p2;
            end if; 
        end if;
    end process;

    empty_58_fu_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln84_fu_692_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                empty_58_fu_276 <= ap_const_lv32_0;
            elsif ((not(((ap_const_boolean_1 = ap_block_state75_on_subcall_done) or (ap_const_boolean_1 = ap_block_state75_io) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_1442 = ap_const_lv1_0)) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_1442 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state75) and (tmp_last_V_reg_1442 = ap_const_lv1_0))) then 
                empty_58_fu_276 <= ap_phi_mux_empty_64_phi_fu_562_p4;
            end if; 
        end if;
    end process;

    empty_61_reg_487_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln150_fu_854_p2 = ap_const_lv1_0) and (icmp_ln148_fu_849_p2 = ap_const_lv1_0) and (tmp_reg_1376 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice))) then 
                empty_61_reg_487 <= or_ln105_fu_839_p2;
            elsif (((tmp_reg_1376 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice))) then 
                empty_61_reg_487 <= empty_58_fu_276;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                empty_61_reg_487 <= or_ln105_reg_1467;
            end if; 
        end if;
    end process;

    empty_62_reg_515_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_compression_fu_580_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                empty_62_reg_515 <= or_ln110_fu_989_p2;
            elsif (((tmp_12_reg_1380 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                empty_62_reg_515 <= empty_61_reg_487;
            end if; 
        end if;
    end process;

    empty_63_reg_537_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_13_reg_1384 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                empty_63_reg_537 <= empty_62_reg_515;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                empty_63_reg_537 <= or_ln115_fu_1171_p2;
            end if; 
        end if;
    end process;

    empty_64_reg_559_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln24_reg_1307 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state74))) then 
                empty_64_reg_559 <= empty_63_reg_537;
            elsif ((not(((ap_const_boolean_1 = ap_block_state75_on_subcall_done) or (ap_const_boolean_1 = ap_block_state75_io) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_1442 = ap_const_lv1_0)) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_1442 = ap_const_lv1_1)))) and (trunc_ln24_reg_1307 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
                empty_64_reg_559 <= or_ln120_fu_1210_p2;
            end if; 
        end if;
    end process;

    empty_fu_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                empty_fu_244 <= ap_const_lv9_0;
            elsif (((exitcond3725_fu_631_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                empty_fu_244 <= empty_53_fu_637_p2;
            end if; 
        end if;
    end process;

    i_fu_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3712_fu_661_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_fu_268 <= ap_const_lv7_0;
            elsif (((icmp_ln84_fu_692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_fu_268 <= add_ln84_fu_698_p2;
            end if; 
        end if;
    end process;

    tmp_short_2_reg_548_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_13_reg_1384 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                tmp_short_2_reg_548 <= tmp_short_4_reg_526;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                tmp_short_2_reg_548 <= output_fu_1190_p2;
            end if; 
        end if;
    end process;

    tmp_short_4_reg_526_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_compression_fu_580_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                tmp_short_4_reg_526 <= grp_compression_fu_580_ap_return_0;
            elsif (((tmp_12_reg_1380 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                tmp_short_4_reg_526 <= tmp_short_reg_501;
            end if; 
        end if;
    end process;

    tmp_short_9_reg_570_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln24_reg_1307 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state74))) then 
                tmp_short_9_reg_570 <= tmp_short_2_reg_548;
            elsif ((not(((ap_const_boolean_1 = ap_block_state75_on_subcall_done) or (ap_const_boolean_1 = ap_block_state75_io) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_1442 = ap_const_lv1_0)) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_1442 = ap_const_lv1_1)))) and (trunc_ln24_reg_1307 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
                tmp_short_9_reg_570 <= grp_wah_fu_594_ap_return_0;
            end if; 
        end if;
    end process;

    tmp_short_reg_501_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln150_fu_854_p2 = ap_const_lv1_0) and (icmp_ln148_fu_849_p2 = ap_const_lv1_0) and (tmp_reg_1376 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice)) or ((tmp_reg_1376 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice)))) then 
                tmp_short_reg_501 <= tmp_short_8_fu_829_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                tmp_short_reg_501 <= result_1_fu_922_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                tmp_short_reg_501 <= result_fu_980_p2;
            end if; 
        end if;
    end process;

    wah_buffer_index_1_fu_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln84_fu_692_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                wah_buffer_index_1_fu_288 <= ap_const_lv16_0;
            elsif ((not(((ap_const_boolean_1 = ap_block_state75_on_subcall_done) or (ap_const_boolean_1 = ap_block_state75_io) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_1442 = ap_const_lv1_0)) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_1442 = ap_const_lv1_1)))) and (trunc_ln24_reg_1307 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
                wah_buffer_index_1_fu_288 <= grp_wah_fu_594_ap_return_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                compression_max_threshold_read_reg_1277 <= compression_max_threshold;
                compression_min_threshold_read_reg_1282 <= compression_min_threshold;
                compression_zero_threshold_read_reg_1272 <= compression_zero_threshold;
                control_read_reg_1300 <= control;
                delay_mult_read_reg_1267 <= delay_mult;
                delay_samples_read_reg_1262 <= delay_samples;
                distortion_clip_factor_read_reg_1287 <= distortion_clip_factor;
                distortion_threshold_read_reg_1292 <= distortion_threshold;
                trunc_ln24_reg_1307 <= trunc_ln24_fu_614_p1;
                wah_coeffs_read_reg_1256 <= wah_coeffs;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                conv2_i_reg_1592 <= grp_fu_611_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                conv7_i_i_i_reg_1410 <= conv7_i_i_i_fu_784_p1;
                empty_59_reg_1399 <= empty_59_fu_775_p1;
                negative_threshold_reg_1405 <= negative_threshold_fu_778_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                current_sample_reg_1462 <= current_sample_fu_833_p2;
                tmp_dest_V_reg_1451 <= INPUT_r_TDEST_int_regslice;
                tmp_id_V_reg_1446 <= INPUT_r_TID_int_regslice;
                tmp_keep_V_reg_1427 <= INPUT_r_TKEEP_int_regslice;
                tmp_last_V_reg_1442 <= INPUT_r_TLAST_int_regslice;
                tmp_strb_V_reg_1432 <= INPUT_r_TSTRB_int_regslice;
                tmp_user_V_reg_1437 <= INPUT_r_TUSER_int_regslice;
                trunc_ln77_reg_1422 <= trunc_ln77_fu_797_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                data_V_reg_1602 <= data_V_fu_1051_p1;
                isNeg_reg_1612 <= add_ln346_fu_1072_p2(8 downto 8);
                p_Result_13_reg_1607 <= p_Result_13_fu_1064_p1;
                ush_reg_1617 <= ush_fu_1096_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then
                dc_reg_1597 <= grp_fu_607_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_13_reg_1384 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                delay_buffer_index_load_reg_1557 <= delay_buffer_index_fu_280;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then
                delay_buffer_load_reg_1582 <= delay_buffer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                gmem_addr_read_reg_1394 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_1376 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    or_ln105_reg_1467(2 downto 0) <= or_ln105_fu_839_p2(2 downto 0);    or_ln105_reg_1467(31 downto 4) <= or_ln105_fu_839_p2(31 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                r_V_10_reg_1495 <= grp_fu_872_p2;
                ret_V_3_cast_reg_1500 <= grp_fu_872_p2(22 downto 7);
                trunc_ln1049_1_reg_1507 <= trunc_ln1049_1_fu_887_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln148_fu_849_p2 = ap_const_lv1_1) and (tmp_reg_1376 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                r_V_2_reg_1485 <= r_V_2_fu_864_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                r_V_9_reg_1522 <= grp_fu_930_p2;
                ret_V_cast_reg_1527 <= grp_fu_930_p2(22 downto 7);
                trunc_ln1049_reg_1534 <= trunc_ln1049_fu_945_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln150_fu_854_p2 = ap_const_lv1_1) and (icmp_ln148_fu_849_p2 = ap_const_lv1_0) and (tmp_reg_1376 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                r_V_reg_1480 <= r_V_fu_859_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then
                result_V_4_reg_1627 <= result_V_4_fu_1165_p2;
                val_reg_1622 <= val_fu_1158_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then
                srem_ln209_reg_1572 <= grp_fu_1016_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln84_fu_692_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_12_reg_1380 <= control_read_reg_1300(2 downto 2);
                tmp_13_reg_1384 <= control_read_reg_1300(1 downto 1);
                tmp_reg_1376 <= control_read_reg_1300(3 downto 3);
            end if;
        end if;
    end process;
    or_ln105_reg_1467(3) <= '1';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state75, tmp_last_V_reg_1442, ap_CS_fsm_state77, ap_CS_fsm_state76, tmp_reg_1376, ap_CS_fsm_state4, icmp_ln84_fu_692_p2, tmp_12_reg_1380, tmp_13_reg_1384, icmp_ln148_fu_849_p2, icmp_ln150_fu_854_p2, ap_CS_fsm_state22, ap_CS_fsm_state23, grp_compression_fu_580_ap_done, gmem_ARREADY, gmem_RVALID, ap_CS_fsm_state21, ap_block_state75_io, ap_block_state75_on_subcall_done, ap_CS_fsm_state2, exitcond3725_fu_631_p2, ap_CS_fsm_state3, exitcond3712_fu_661_p2, regslice_both_OUTPUT_r_V_data_V_U_apdone_blk, INPUT_r_TVALID_int_regslice, OUTPUT_r_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((exitcond3725_fu_631_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond3712_fu_661_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln84_fu_692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((icmp_ln150_fu_854_p2 = ap_const_lv1_1) and (icmp_ln148_fu_849_p2 = ap_const_lv1_0) and (tmp_reg_1376 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                elsif (((icmp_ln148_fu_849_p2 = ap_const_lv1_1) and (tmp_reg_1376 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice) and ((tmp_reg_1376 = ap_const_lv1_0) or ((icmp_ln150_fu_854_p2 = ap_const_lv1_0) and (icmp_ln148_fu_849_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((tmp_12_reg_1380 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                if (((grp_compression_fu_580_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((tmp_13_reg_1384 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                if ((not(((ap_const_boolean_1 = ap_block_state75_on_subcall_done) or (ap_const_boolean_1 = ap_block_state75_io) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_1442 = ap_const_lv1_0)) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_1442 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state75) and (tmp_last_V_reg_1442 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                elsif ((not(((ap_const_boolean_1 = ap_block_state75_on_subcall_done) or (ap_const_boolean_1 = ap_block_state75_io) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_1442 = ap_const_lv1_0)) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_1442 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state75) and (tmp_last_V_reg_1442 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when ap_ST_fsm_state76 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_logic_1 = OUTPUT_r_TREADY_int_regslice))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_state77 => 
                if ((not(((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) or (regslice_both_OUTPUT_r_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state77))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state77;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    INPUT_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state14, INPUT_r_TVALID_int_regslice)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            INPUT_r_TDATA_blk_n <= INPUT_r_TVALID_int_regslice;
        else 
            INPUT_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    INPUT_r_TREADY <= regslice_both_INPUT_r_V_data_V_U_ack_in;

    INPUT_r_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state14, INPUT_r_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice))) then 
            INPUT_r_TREADY_int_regslice <= ap_const_logic_1;
        else 
            INPUT_r_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state75, tmp_last_V_reg_1442, ap_CS_fsm_state77, ap_CS_fsm_state76, OUTPUT_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state77) or ((ap_const_logic_1 = ap_CS_fsm_state75) and (tmp_last_V_reg_1442 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state75) and (tmp_last_V_reg_1442 = ap_const_lv1_1)))) then 
            OUTPUT_r_TDATA_blk_n <= OUTPUT_r_TREADY_int_regslice;
        else 
            OUTPUT_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        OUTPUT_r_TDATA_int_regslice <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_tmp_short_9_phi_fu_573_p4),32));


    OUTPUT_r_TLAST_int_regslice_assign_proc : process(tmp_last_V_reg_1442, ap_condition_1800)
    begin
        if ((ap_const_boolean_1 = ap_condition_1800)) then
            if ((tmp_last_V_reg_1442 = ap_const_lv1_1)) then 
                OUTPUT_r_TLAST_int_regslice <= ap_const_lv1_1;
            elsif ((tmp_last_V_reg_1442 = ap_const_lv1_0)) then 
                OUTPUT_r_TLAST_int_regslice <= ap_const_lv1_0;
            else 
                OUTPUT_r_TLAST_int_regslice <= "X";
            end if;
        else 
            OUTPUT_r_TLAST_int_regslice <= "X";
        end if; 
    end process;

    OUTPUT_r_TVALID <= regslice_both_OUTPUT_r_V_data_V_U_vld_out;

    OUTPUT_r_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state75, tmp_last_V_reg_1442, ap_block_state75_io, ap_block_state75_on_subcall_done, OUTPUT_r_TREADY_int_regslice)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state75_on_subcall_done) or (ap_const_boolean_1 = ap_block_state75_io) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_1442 = ap_const_lv1_0)) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_1442 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state75) and (tmp_last_V_reg_1442 = ap_const_lv1_0)) or (not(((ap_const_boolean_1 = ap_block_state75_on_subcall_done) or (ap_const_boolean_1 = ap_block_state75_io) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_1442 = ap_const_lv1_0)) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_1442 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state75) and (tmp_last_V_reg_1442 = ap_const_lv1_1)))) then 
            OUTPUT_r_TVALID_int_regslice <= ap_const_logic_1;
        else 
            OUTPUT_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    add_ln346_fu_1072_p2 <= std_logic_vector(unsigned(zext_ln346_fu_1068_p1) + unsigned(ap_const_lv9_181));
    add_ln84_fu_698_p2 <= std_logic_vector(unsigned(i_fu_268) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state14_blk_assign_proc : process(INPUT_r_TVALID_int_regslice)
    begin
        if ((ap_const_logic_0 = INPUT_r_TVALID_int_regslice)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;
    ap_ST_fsm_state1_blk <= ap_const_logic_0;
    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;

    ap_ST_fsm_state22_blk_assign_proc : process(grp_compression_fu_580_ap_done)
    begin
        if ((grp_compression_fu_580_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state22_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state22_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;

    ap_ST_fsm_state75_blk_assign_proc : process(tmp_last_V_reg_1442, ap_block_state75_io, ap_block_state75_on_subcall_done, OUTPUT_r_TREADY_int_regslice)
    begin
        if (((ap_const_boolean_1 = ap_block_state75_on_subcall_done) or (ap_const_boolean_1 = ap_block_state75_io) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_1442 = ap_const_lv1_0)) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_1442 = ap_const_lv1_1)))) then 
            ap_ST_fsm_state75_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state75_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state76_blk_assign_proc : process(OUTPUT_r_TREADY_int_regslice)
    begin
        if ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) then 
            ap_ST_fsm_state76_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state76_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state77_blk_assign_proc : process(regslice_both_OUTPUT_r_V_data_V_U_apdone_blk, OUTPUT_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) or (regslice_both_OUTPUT_r_V_data_V_U_apdone_blk = ap_const_logic_1))) then 
            ap_ST_fsm_state77_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state77_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state75_assign_proc : process(tmp_last_V_reg_1442, OUTPUT_r_TREADY_int_regslice)
    begin
                ap_block_state75 <= (((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_1442 = ap_const_lv1_0)) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_1442 = ap_const_lv1_1)));
    end process;


    ap_block_state75_io_assign_proc : process(tmp_last_V_reg_1442, OUTPUT_r_TREADY_int_regslice)
    begin
                ap_block_state75_io <= (((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_1442 = ap_const_lv1_0)) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_1442 = ap_const_lv1_1)));
    end process;


    ap_block_state75_on_subcall_done_assign_proc : process(trunc_ln24_reg_1307, grp_wah_fu_594_ap_done)
    begin
                ap_block_state75_on_subcall_done <= ((grp_wah_fu_594_ap_done = ap_const_logic_0) and (trunc_ln24_reg_1307 = ap_const_lv1_1));
    end process;


    ap_block_state77_assign_proc : process(regslice_both_OUTPUT_r_V_data_V_U_apdone_blk, OUTPUT_r_TREADY_int_regslice)
    begin
                ap_block_state77 <= ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) or (regslice_both_OUTPUT_r_V_data_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_condition_1800_assign_proc : process(ap_CS_fsm_state75, tmp_last_V_reg_1442, ap_block_state75_on_subcall_done, OUTPUT_r_TREADY_int_regslice)
    begin
                ap_condition_1800 <= (not(((ap_const_boolean_1 = ap_block_state75_on_subcall_done) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_1442 = ap_const_lv1_0)) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_1442 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state75));
    end process;


    ap_phi_mux_empty_64_phi_fu_562_p4_assign_proc : process(ap_CS_fsm_state75, trunc_ln24_reg_1307, or_ln120_fu_1210_p2, empty_64_reg_559)
    begin
        if (((trunc_ln24_reg_1307 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            ap_phi_mux_empty_64_phi_fu_562_p4 <= or_ln120_fu_1210_p2;
        else 
            ap_phi_mux_empty_64_phi_fu_562_p4 <= empty_64_reg_559;
        end if; 
    end process;


    ap_phi_mux_tmp_short_9_phi_fu_573_p4_assign_proc : process(ap_CS_fsm_state75, trunc_ln24_reg_1307, grp_wah_fu_594_ap_return_0, tmp_short_9_reg_570)
    begin
        if (((trunc_ln24_reg_1307 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            ap_phi_mux_tmp_short_9_phi_fu_573_p4 <= grp_wah_fu_594_ap_return_0;
        else 
            ap_phi_mux_tmp_short_9_phi_fu_573_p4 <= tmp_short_9_reg_570;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    axilite_out_ap_vld_assign_proc : process(ap_CS_fsm_state75, tmp_last_V_reg_1442, ap_block_state75_io, ap_block_state75_on_subcall_done, OUTPUT_r_TREADY_int_regslice)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state75_on_subcall_done) or (ap_const_boolean_1 = ap_block_state75_io) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_1442 = ap_const_lv1_0)) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_1442 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state75) and (tmp_last_V_reg_1442 = ap_const_lv1_1))) then 
            axilite_out_ap_vld <= ap_const_logic_1;
        else 
            axilite_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    compression_buffer_address0_assign_proc : process(ap_CS_fsm_state22, grp_compression_fu_580_values_buffer_address0, p_cast_fu_626_p1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            compression_buffer_address0 <= p_cast_fu_626_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            compression_buffer_address0 <= grp_compression_fu_580_values_buffer_address0;
        else 
            compression_buffer_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    compression_buffer_ce0_assign_proc : process(ap_CS_fsm_state22, grp_compression_fu_580_values_buffer_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            compression_buffer_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            compression_buffer_ce0 <= grp_compression_fu_580_values_buffer_ce0;
        else 
            compression_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    compression_buffer_d0_assign_proc : process(ap_CS_fsm_state22, grp_compression_fu_580_values_buffer_d0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            compression_buffer_d0 <= ap_const_lv16_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            compression_buffer_d0 <= grp_compression_fu_580_values_buffer_d0;
        else 
            compression_buffer_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    compression_buffer_we0_assign_proc : process(ap_CS_fsm_state22, grp_compression_fu_580_values_buffer_we0, ap_CS_fsm_state2, exitcond3725_fu_631_p2)
    begin
        if (((exitcond3725_fu_631_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            compression_buffer_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            compression_buffer_we0 <= grp_compression_fu_580_values_buffer_we0;
        else 
            compression_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    control_signals_buffer_address0_assign_proc : process(ap_CS_fsm_state75, trunc_ln24_reg_1307, ap_CS_fsm_state4, grp_wah_fu_594_control_signal_buffer_address0, zext_ln84_fu_686_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            control_signals_buffer_address0 <= zext_ln84_fu_686_p1(7 - 1 downto 0);
        elsif (((trunc_ln24_reg_1307 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            control_signals_buffer_address0 <= grp_wah_fu_594_control_signal_buffer_address0;
        else 
            control_signals_buffer_address0 <= "XXXXXXX";
        end if; 
    end process;


    control_signals_buffer_ce0_assign_proc : process(ap_CS_fsm_state75, trunc_ln24_reg_1307, ap_CS_fsm_state4, grp_wah_fu_594_control_signal_buffer_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            control_signals_buffer_ce0 <= ap_const_logic_1;
        elsif (((trunc_ln24_reg_1307 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            control_signals_buffer_ce0 <= grp_wah_fu_594_control_signal_buffer_ce0;
        else 
            control_signals_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    control_signals_buffer_d0_assign_proc : process(ap_CS_fsm_state75, trunc_ln24_reg_1307, ap_CS_fsm_state4, grp_wah_fu_594_control_signal_buffer_d0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            control_signals_buffer_d0 <= ap_const_lv5_0;
        elsif (((trunc_ln24_reg_1307 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            control_signals_buffer_d0 <= grp_wah_fu_594_control_signal_buffer_d0;
        else 
            control_signals_buffer_d0 <= "XXXXX";
        end if; 
    end process;


    control_signals_buffer_we0_assign_proc : process(ap_CS_fsm_state75, trunc_ln24_reg_1307, ap_CS_fsm_state4, icmp_ln84_fu_692_p2, grp_wah_fu_594_control_signal_buffer_we0)
    begin
        if (((icmp_ln84_fu_692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            control_signals_buffer_we0 <= ap_const_logic_1;
        elsif (((trunc_ln24_reg_1307 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            control_signals_buffer_we0 <= grp_wah_fu_594_control_signal_buffer_we0;
        else 
            control_signals_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

        conv7_i_i_i_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(distortion_clip_factor_read_reg_1287),40));

    current_sample_fu_833_p2 <= std_logic_vector(unsigned(current_sample_1_fu_272) + unsigned(ap_const_lv32_1));
    data_V_fu_1051_p1 <= dc_reg_1597;

    debug_output_ap_vld_assign_proc : process(ap_CS_fsm_state75, tmp_last_V_reg_1442, ap_block_state75_io, ap_block_state75_on_subcall_done, OUTPUT_r_TREADY_int_regslice)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state75_on_subcall_done) or (ap_const_boolean_1 = ap_block_state75_io) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_1442 = ap_const_lv1_0)) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_1442 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state75) and (tmp_last_V_reg_1442 = ap_const_lv1_1))) then 
            debug_output_ap_vld <= ap_const_logic_1;
        else 
            debug_output_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    delay_buffer_address0_assign_proc : process(ap_CS_fsm_state59, ap_CS_fsm_state73, p_cast4_fu_656_p1, ap_CS_fsm_state3, zext_ln209_fu_1042_p1, zext_ln212_fu_1197_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            delay_buffer_address0 <= zext_ln212_fu_1197_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            delay_buffer_address0 <= zext_ln209_fu_1042_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            delay_buffer_address0 <= p_cast4_fu_656_p1(17 - 1 downto 0);
        else 
            delay_buffer_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    delay_buffer_ce0_assign_proc : process(ap_CS_fsm_state59, ap_CS_fsm_state73, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            delay_buffer_ce0 <= ap_const_logic_1;
        else 
            delay_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_buffer_d0_assign_proc : process(ap_CS_fsm_state73, output_fu_1190_p2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            delay_buffer_d0 <= output_fu_1190_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            delay_buffer_d0 <= ap_const_lv16_0;
        else 
            delay_buffer_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    delay_buffer_we0_assign_proc : process(ap_CS_fsm_state73, ap_CS_fsm_state3, exitcond3712_fu_661_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) or ((exitcond3712_fu_661_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            delay_buffer_we0 <= ap_const_logic_1;
        else 
            delay_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_53_fu_637_p2 <= std_logic_vector(unsigned(empty_fu_244) + unsigned(ap_const_lv9_1));
    empty_56_fu_667_p2 <= std_logic_vector(unsigned(empty_54_fu_264) + unsigned(ap_const_lv17_1));
    empty_59_fu_775_p1 <= distortion_threshold_read_reg_1292(16 - 1 downto 0);
    exitcond3712_fu_661_p2 <= "1" when (empty_54_fu_264 = ap_const_lv17_15888) else "0";
    exitcond3725_fu_631_p2 <= "1" when (empty_fu_244 = ap_const_lv9_1B9) else "0";

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state75, trunc_ln24_reg_1307, grp_wah_fu_594_m_axi_gmem_ARADDR, gmem_ARREADY, ap_CS_fsm_state74, sext_ln94_fu_764_p1)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem_ARADDR <= sext_ln94_fu_764_p1;
        elsif ((((trunc_ln24_reg_1307 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state74)) or ((trunc_ln24_reg_1307 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75)))) then 
            gmem_ARADDR <= grp_wah_fu_594_m_axi_gmem_ARADDR;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state75, trunc_ln24_reg_1307, grp_wah_fu_594_m_axi_gmem_ARLEN, gmem_ARREADY, ap_CS_fsm_state74)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem_ARLEN <= ap_const_lv32_1;
        elsif ((((trunc_ln24_reg_1307 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state74)) or ((trunc_ln24_reg_1307 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75)))) then 
            gmem_ARLEN <= grp_wah_fu_594_m_axi_gmem_ARLEN;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state75, trunc_ln24_reg_1307, grp_wah_fu_594_m_axi_gmem_ARVALID, gmem_ARREADY, ap_CS_fsm_state74)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem_ARVALID <= ap_const_logic_1;
        elsif ((((trunc_ln24_reg_1307 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state74)) or ((trunc_ln24_reg_1307 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75)))) then 
            gmem_ARVALID <= grp_wah_fu_594_m_axi_gmem_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state75, trunc_ln24_reg_1307, grp_wah_fu_594_m_axi_gmem_RREADY, gmem_RVALID, ap_CS_fsm_state74)
    begin
        if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem_RREADY <= ap_const_logic_1;
        elsif ((((trunc_ln24_reg_1307 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state74)) or ((trunc_ln24_reg_1307 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75)))) then 
            gmem_RREADY <= grp_wah_fu_594_m_axi_gmem_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    grp_compression_fu_580_ap_start <= grp_compression_fu_580_ap_start_reg;

    grp_fu_1016_ap_start_assign_proc : process(tmp_13_reg_1384, ap_CS_fsm_state23)
    begin
        if (((tmp_13_reg_1384 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            grp_fu_1016_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1016_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1016_p0 <= std_logic_vector(unsigned(delay_buffer_index_fu_280) - unsigned(delay_samples_read_reg_1262));
    grp_fu_1016_p1 <= ap_const_lv32_15888(18 - 1 downto 0);

    grp_fu_1028_ap_start_assign_proc : process(tmp_13_reg_1384, ap_CS_fsm_state23)
    begin
        if (((tmp_13_reg_1384 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            grp_fu_1028_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1028_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1028_p0 <= std_logic_vector(unsigned(delay_buffer_index_fu_280) + unsigned(ap_const_lv32_1));
    grp_fu_1028_p1 <= ap_const_lv32_15888(18 - 1 downto 0);

    grp_fu_607_ce_assign_proc : process(ap_CS_fsm_state75, ap_CS_fsm_state22, grp_compression_fu_580_grp_fu_607_p_ce, grp_wah_fu_594_grp_fu_607_p_ce)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            grp_fu_607_ce <= grp_wah_fu_594_grp_fu_607_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_607_ce <= grp_compression_fu_580_grp_fu_607_p_ce;
        else 
            grp_fu_607_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_607_p0_assign_proc : process(ap_CS_fsm_state75, ap_CS_fsm_state22, conv2_i_reg_1592, grp_compression_fu_580_grp_fu_607_p_din0, grp_wah_fu_594_grp_fu_607_p_din0, ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            grp_fu_607_p0 <= grp_wah_fu_594_grp_fu_607_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_607_p0 <= grp_compression_fu_580_grp_fu_607_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            grp_fu_607_p0 <= conv2_i_reg_1592;
        else 
            grp_fu_607_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_607_p1_assign_proc : process(ap_CS_fsm_state75, delay_mult_read_reg_1267, ap_CS_fsm_state22, grp_compression_fu_580_grp_fu_607_p_din1, grp_wah_fu_594_grp_fu_607_p_din1, ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            grp_fu_607_p1 <= grp_wah_fu_594_grp_fu_607_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_607_p1 <= grp_compression_fu_580_grp_fu_607_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            grp_fu_607_p1 <= delay_mult_read_reg_1267;
        else 
            grp_fu_607_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_611_ce_assign_proc : process(ap_CS_fsm_state75, ap_CS_fsm_state22, grp_compression_fu_580_grp_fu_611_p_ce, grp_wah_fu_594_grp_fu_611_p_ce)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            grp_fu_611_ce <= grp_wah_fu_594_grp_fu_611_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_611_ce <= grp_compression_fu_580_grp_fu_611_p_ce;
        else 
            grp_fu_611_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_611_p0_assign_proc : process(ap_CS_fsm_state75, ap_CS_fsm_state22, sext_ln209_fu_1047_p1, ap_CS_fsm_state61, grp_compression_fu_580_grp_fu_611_p_din0, grp_wah_fu_594_grp_fu_611_p_din0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            grp_fu_611_p0 <= grp_wah_fu_594_grp_fu_611_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_611_p0 <= grp_compression_fu_580_grp_fu_611_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            grp_fu_611_p0 <= sext_ln209_fu_1047_p1;
        else 
            grp_fu_611_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_872_p1 <= conv7_i_i_i_reg_1410(8 - 1 downto 0);
    grp_fu_930_p1 <= conv7_i_i_i_reg_1410(8 - 1 downto 0);
    grp_wah_fu_594_ap_start <= grp_wah_fu_594_ap_start_reg;
    icmp_ln1049_1_fu_898_p2 <= "1" when (trunc_ln1049_1_reg_1507 = ap_const_lv7_0) else "0";
    icmp_ln1049_fu_956_p2 <= "1" when (trunc_ln1049_reg_1534 = ap_const_lv7_0) else "0";
    icmp_ln148_fu_849_p2 <= "1" when (signed(sext_ln148_fu_845_p1) > signed(distortion_threshold_read_reg_1292)) else "0";
    icmp_ln150_fu_854_p2 <= "1" when (signed(tmp_short_8_fu_829_p1) < signed(negative_threshold_reg_1405)) else "0";
    icmp_ln84_fu_692_p2 <= "1" when (i_fu_268 = ap_const_lv7_64) else "0";
    isNeg_fu_1078_p3 <= add_ln346_fu_1072_p2(8 downto 8);
    mantissa_fu_1104_p4 <= ((ap_const_lv1_1 & p_Result_13_reg_1607) & ap_const_lv1_0);
    negative_threshold_fu_778_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(empty_59_fu_775_p1));
    or_ln105_fu_839_p2 <= (empty_58_fu_276 or ap_const_lv32_8);
    or_ln110_fu_989_p2 <= (empty_61_reg_487 or ap_const_lv32_4);
    or_ln115_fu_1171_p2 <= (empty_62_reg_515 or ap_const_lv32_2);
    or_ln120_fu_1210_p2 <= (empty_63_reg_537 or ap_const_lv32_1);
    output_fu_1190_p2 <= std_logic_vector(unsigned(result_V_fu_1184_p3) + unsigned(tmp_short_4_reg_526));
    p_Result_12_fu_1177_p3 <= data_V_reg_1602(31 downto 31);
    p_Result_13_fu_1064_p1 <= data_V_fu_1051_p1(23 - 1 downto 0);
    p_Result_8_fu_891_p3 <= r_V_10_reg_1495(39 downto 39);
    p_Result_s_fu_949_p3 <= r_V_9_reg_1522(39 downto 39);
    p_cast4_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_54_fu_264),64));
    p_cast_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_244),64));
    r_V_2_fu_864_p2 <= std_logic_vector(signed(sext_ln148_fu_845_p1) - signed(distortion_threshold_read_reg_1292));
    r_V_7_fu_1124_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_1113_p1),to_integer(unsigned('0' & zext_ln1488_fu_1120_p1(31-1 downto 0)))));
    r_V_8_fu_1130_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_1113_p1),to_integer(unsigned('0' & zext_ln1488_fu_1120_p1(31-1 downto 0)))));
    r_V_fu_859_p2 <= std_logic_vector(signed(sext_ln148_fu_845_p1) + signed(distortion_threshold_read_reg_1292));
    result_1_fu_922_p2 <= std_logic_vector(unsigned(ret_V_3_fu_915_p3) - unsigned(empty_59_reg_1399));
    result_V_4_fu_1165_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(val_fu_1158_p3));
    result_V_fu_1184_p3 <= 
        result_V_4_reg_1627 when (p_Result_12_fu_1177_p3(0) = '1') else 
        val_reg_1622;
    result_fu_980_p2 <= std_logic_vector(unsigned(ret_V_1_fu_973_p3) + unsigned(empty_59_reg_1399));
    ret_V_1_fu_973_p3 <= 
        select_ln1048_fu_966_p3 when (p_Result_s_fu_949_p3(0) = '1') else 
        ret_V_cast_reg_1527;
    ret_V_2_fu_903_p2 <= std_logic_vector(unsigned(ret_V_3_cast_reg_1500) + unsigned(ap_const_lv16_1));
    ret_V_3_fu_915_p3 <= 
        select_ln1048_1_fu_908_p3 when (p_Result_8_fu_891_p3(0) = '1') else 
        ret_V_3_cast_reg_1500;
    ret_V_fu_961_p2 <= std_logic_vector(unsigned(ret_V_cast_reg_1527) + unsigned(ap_const_lv16_1));
    select_ln1048_1_fu_908_p3 <= 
        ret_V_3_cast_reg_1500 when (icmp_ln1049_1_fu_898_p2(0) = '1') else 
        ret_V_2_fu_903_p2;
    select_ln1048_fu_966_p3 <= 
        ret_V_cast_reg_1527 when (icmp_ln1049_fu_956_p2(0) = '1') else 
        ret_V_fu_961_p2;
        sext_ln1488_fu_1117_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_1617),32));

        sext_ln148_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_short_8_fu_829_p1),32));

        sext_ln1512_fu_1092_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_fu_1086_p2),9));

        sext_ln209_fu_1047_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(delay_buffer_load_reg_1582),32));

        sext_ln94_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln4_fu_755_p4),64));

    sub_ln1512_fu_1086_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_V_fu_1054_p4));
    tmp_19_fu_1136_p3 <= r_V_7_fu_1124_p2(24 downto 24);
    tmp_s_fu_1148_p4 <= r_V_8_fu_1130_p2(39 downto 24);
    tmp_short_8_fu_829_p1 <= INPUT_r_TDATA_int_regslice(16 - 1 downto 0);
    trunc_ln1049_1_fu_887_p1 <= grp_fu_872_p2(7 - 1 downto 0);
    trunc_ln1049_fu_945_p1 <= grp_fu_930_p2(7 - 1 downto 0);
    trunc_ln209_fu_1039_p1 <= srem_ln209_reg_1572(17 - 1 downto 0);
    trunc_ln24_fu_614_p1 <= control(1 - 1 downto 0);
    trunc_ln4_fu_755_p4 <= wah_coeffs_read_reg_1256(63 downto 2);
    trunc_ln77_fu_797_p1 <= current_sample_1_fu_272(31 - 1 downto 0);
    ush_fu_1096_p3 <= 
        sext_ln1512_fu_1092_p1 when (isNeg_fu_1078_p3(0) = '1') else 
        add_ln346_fu_1072_p2;
    val_fu_1158_p3 <= 
        zext_ln818_fu_1144_p1 when (isNeg_reg_1612(0) = '1') else 
        tmp_s_fu_1148_p4;

    wah_values_buffer_address0_assign_proc : process(ap_CS_fsm_state75, trunc_ln24_reg_1307, ap_CS_fsm_state4, grp_wah_fu_594_wah_values_buffer_address0, zext_ln84_fu_686_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            wah_values_buffer_address0 <= zext_ln84_fu_686_p1(7 - 1 downto 0);
        elsif (((trunc_ln24_reg_1307 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            wah_values_buffer_address0 <= grp_wah_fu_594_wah_values_buffer_address0;
        else 
            wah_values_buffer_address0 <= "XXXXXXX";
        end if; 
    end process;


    wah_values_buffer_ce0_assign_proc : process(ap_CS_fsm_state75, trunc_ln24_reg_1307, ap_CS_fsm_state4, grp_wah_fu_594_wah_values_buffer_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            wah_values_buffer_ce0 <= ap_const_logic_1;
        elsif (((trunc_ln24_reg_1307 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            wah_values_buffer_ce0 <= grp_wah_fu_594_wah_values_buffer_ce0;
        else 
            wah_values_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wah_values_buffer_d0_assign_proc : process(ap_CS_fsm_state75, trunc_ln24_reg_1307, ap_CS_fsm_state4, grp_wah_fu_594_wah_values_buffer_d0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            wah_values_buffer_d0 <= ap_const_lv16_0;
        elsif (((trunc_ln24_reg_1307 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            wah_values_buffer_d0 <= grp_wah_fu_594_wah_values_buffer_d0;
        else 
            wah_values_buffer_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    wah_values_buffer_we0_assign_proc : process(ap_CS_fsm_state75, trunc_ln24_reg_1307, ap_CS_fsm_state4, icmp_ln84_fu_692_p2, grp_wah_fu_594_wah_values_buffer_we0)
    begin
        if (((icmp_ln84_fu_692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            wah_values_buffer_we0 <= ap_const_logic_1;
        elsif (((trunc_ln24_reg_1307 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            wah_values_buffer_we0 <= grp_wah_fu_594_wah_values_buffer_we0;
        else 
            wah_values_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xs_exp_V_fu_1054_p4 <= data_V_fu_1051_p1(30 downto 23);
    zext_ln1488_fu_1120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_fu_1117_p1),63));
    zext_ln15_fu_1113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_1104_p4),63));
    zext_ln209_fu_1042_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln209_fu_1039_p1),64));
    zext_ln212_fu_1197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(delay_buffer_index_load_reg_1557),64));
    zext_ln346_fu_1068_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_fu_1054_p4),9));
    zext_ln818_fu_1144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_1136_p3),16));
    zext_ln84_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_268),64));
end behav;
