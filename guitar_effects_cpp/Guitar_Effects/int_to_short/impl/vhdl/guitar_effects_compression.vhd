-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity guitar_effects_compression is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r : IN STD_LOGIC_VECTOR (15 downto 0);
    min_threshold : IN STD_LOGIC_VECTOR (31 downto 0);
    max_threshold : IN STD_LOGIC_VECTOR (31 downto 0);
    zero_threshold : IN STD_LOGIC_VECTOR (31 downto 0);
    values_buffer_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    values_buffer_ce0 : OUT STD_LOGIC;
    values_buffer_we0 : OUT STD_LOGIC;
    values_buffer_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    values_buffer_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    compression_buffer_index_read : IN STD_LOGIC_VECTOR (15 downto 0);
    current_sample : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    grp_fu_607_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_607_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_607_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_607_p_ce : OUT STD_LOGIC;
    grp_fu_611_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_611_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_611_p_ce : OUT STD_LOGIC );
end;


architecture behav of guitar_effects_compression is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (114 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (114 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (114 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (114 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (114 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (114 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (114 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (114 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (114 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (114 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv17_1B9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000110111001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1B9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv6_3A : STD_LOGIC_VECTOR (5 downto 0) := "111010";
    constant ap_const_lv33_1FFFFFFFF : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111111";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_11 : STD_LOGIC_VECTOR (7 downto 0) := "00010001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_203 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal reg_208 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state113 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state113 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_222_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal srem_ln171_reg_1242 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln174_fu_255_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln174_reg_1247 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln181_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln181_reg_1252 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal trunc_ln171_fu_265_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln171_reg_1257 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal sext_ln189_fu_282_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln189_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln189_reg_1268 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln194_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln194_reg_1272 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln196_fu_334_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal grp_fu_316_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_19_reg_1291 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal p_Result_37_reg_1297 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1136_1_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1136_1_reg_1303 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal tmp_V_7_fu_360_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_V_7_reg_1308 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln1145_1_fu_401_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1145_1_reg_1316 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1148_1_fu_407_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1148_1_reg_1323 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1144_1_fu_411_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1144_1_reg_1328 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln1150_1_fu_501_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln1150_1_reg_1333 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal icmp_ln1155_1_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1155_1_reg_1338 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_1_reg_1343 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal p_Result_27_reg_1348 : STD_LOGIC_VECTOR (0 downto 0);
    signal compression_factor_1_fu_629_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_factor_1_reg_1353 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_40_reg_1358 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal p_Result_41_fu_658_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_41_reg_1363 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_1_fu_672_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_1_reg_1368 : STD_LOGIC_VECTOR (0 downto 0);
    signal ush_1_fu_690_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_1_reg_1373 : STD_LOGIC_VECTOR (8 downto 0);
    signal val_1_fu_752_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal val_1_reg_1378 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal sext_ln192_fu_794_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal grp_fu_328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_18_reg_1389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal p_Result_32_reg_1395 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1136_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1136_reg_1401 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal tmp_V_6_fu_820_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_V_6_reg_1406 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln1145_fu_861_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1145_reg_1414 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1148_fu_867_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1148_reg_1421 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1144_fu_871_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1144_reg_1426 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln_fu_961_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln_reg_1431 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal icmp_ln1155_fu_969_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1155_reg_1436 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s_reg_1441 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal p_Result_17_reg_1446 : STD_LOGIC_VECTOR (0 downto 0);
    signal compression_factor_fu_1089_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_factor_reg_1451 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_35_reg_1456 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state114 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state114 : signal is "none";
    signal p_Result_36_fu_1118_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_36_reg_1461 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_fu_1132_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_1466 : STD_LOGIC_VECTOR (0 downto 0);
    signal ush_fu_1150_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_reg_1471 : STD_LOGIC_VECTOR (8 downto 0);
    signal val_fu_1212_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal val_reg_1476 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state115 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state115 : signal is "none";
    signal grp_compression_Pipeline_LPF_Loop_fu_186_ap_start : STD_LOGIC;
    signal grp_compression_Pipeline_LPF_Loop_fu_186_ap_done : STD_LOGIC;
    signal grp_compression_Pipeline_LPF_Loop_fu_186_ap_idle : STD_LOGIC;
    signal grp_compression_Pipeline_LPF_Loop_fu_186_ap_ready : STD_LOGIC;
    signal grp_compression_Pipeline_LPF_Loop_fu_186_values_buffer_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_compression_Pipeline_LPF_Loop_fu_186_values_buffer_ce0 : STD_LOGIC;
    signal grp_compression_Pipeline_LPF_Loop_fu_186_p_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compression_Pipeline_LPF_Loop_fu_186_p_out_ap_vld : STD_LOGIC;
    signal result_V_fu_776_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_output_1_phi_fu_178_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_1_reg_175 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal result_V_11_fu_764_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compression_Pipeline_LPF_Loop_fu_186_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal zext_ln170_fu_251_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_196_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal grp_fu_200_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln171_fu_212_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln171_fu_212_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_222_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_222_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_228_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal abs_in_fu_236_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_228_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal abs_in_fu_236_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal abs_in_1_fu_242_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln170_fu_251_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln182_fu_271_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln181_fu_275_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln194_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln194_1_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_316_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_316_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_328_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_328_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln196_fu_334_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1349_1_fu_346_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_V_4_fu_354_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Result_23_fu_367_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Result_38_fu_377_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln1250_1_fu_385_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_389_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal l_1_fu_397_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_1_fu_415_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_420_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln1148_1_fu_436_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1148_1_fu_441_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal lshr_ln1148_1_fu_445_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Result_25_fu_451_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln1147_1_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1148_1_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_468_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_26_fu_482_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1150_1_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1150_1_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_1_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1150_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1155_1_fu_515_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1155_1_fu_520_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln1156_1_fu_529_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1156_1_fu_534_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal lshr_ln1155_1_fu_524_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal shl_ln1156_1_fu_538_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal m_7_fu_543_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln1152_2_fu_550_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln1162_1_fu_554_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal m_8_fu_557_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal sub_ln1165_1_fu_591_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1144_1_fu_584_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1170_1_fu_596_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1152_3_fu_581_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_602_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_39_fu_609_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_1_fu_621_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln810_1_fu_625_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_1_fu_636_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xs_exp_V_1_fu_648_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln346_1_fu_662_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_1_fu_666_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1512_1_fu_680_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1512_1_fu_686_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mantissa_1_fu_698_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1488_1_fu_711_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_1_fu_707_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1488_1_fu_714_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_16_fu_718_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_35_fu_730_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_17_fu_724_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln818_1_fu_738_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_742_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal result_V_10_fu_759_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal result_V_6_fu_771_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln192_fu_794_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1349_fu_806_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_V_fu_814_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Result_s_fu_827_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Result_33_fu_837_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln1250_fu_845_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_849_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal l_fu_857_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_875_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_880_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln1148_fu_896_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1148_fu_901_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal lshr_ln1148_fu_905_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Result_15_fu_911_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln1147_fu_890_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1148_fu_916_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_928_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_fu_942_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1150_fu_936_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1150_fu_949_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_922_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1150_2_fu_955_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1155_fu_975_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1155_fu_980_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln1156_fu_989_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1156_fu_994_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal lshr_ln1155_fu_984_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal shl_ln1156_fu_998_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal m_fu_1003_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln1152_fu_1010_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln1162_fu_1014_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal m_5_fu_1017_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal sub_ln1165_fu_1051_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1144_fu_1044_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1170_fu_1056_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1152_1_fu_1041_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_1062_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_34_fu_1069_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_fu_1081_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln810_fu_1085_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_fu_1096_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xs_exp_V_fu_1108_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln346_fu_1122_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_fu_1126_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1512_fu_1140_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1512_fu_1146_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mantissa_fu_1158_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1488_fu_1171_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_1167_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1488_fu_1174_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_fu_1178_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_27_fu_1190_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_14_fu_1184_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln818_fu_1198_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_1202_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_222_ap_start : STD_LOGIC;
    signal grp_fu_222_ap_done : STD_LOGIC;
    signal grp_fu_316_ap_start : STD_LOGIC;
    signal grp_fu_316_ap_done : STD_LOGIC;
    signal grp_fu_328_ap_start : STD_LOGIC;
    signal grp_fu_328_ap_done : STD_LOGIC;
    signal ap_return_0_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (114 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ST_fsm_state85_blk : STD_LOGIC;
    signal ap_ST_fsm_state86_blk : STD_LOGIC;
    signal ap_ST_fsm_state87_blk : STD_LOGIC;
    signal ap_ST_fsm_state88_blk : STD_LOGIC;
    signal ap_ST_fsm_state89_blk : STD_LOGIC;
    signal ap_ST_fsm_state90_blk : STD_LOGIC;
    signal ap_ST_fsm_state91_blk : STD_LOGIC;
    signal ap_ST_fsm_state92_blk : STD_LOGIC;
    signal ap_ST_fsm_state93_blk : STD_LOGIC;
    signal ap_ST_fsm_state94_blk : STD_LOGIC;
    signal ap_ST_fsm_state95_blk : STD_LOGIC;
    signal ap_ST_fsm_state96_blk : STD_LOGIC;
    signal ap_ST_fsm_state97_blk : STD_LOGIC;
    signal ap_ST_fsm_state98_blk : STD_LOGIC;
    signal ap_ST_fsm_state99_blk : STD_LOGIC;
    signal ap_ST_fsm_state100_blk : STD_LOGIC;
    signal ap_ST_fsm_state101_blk : STD_LOGIC;
    signal ap_ST_fsm_state102_blk : STD_LOGIC;
    signal ap_ST_fsm_state103_blk : STD_LOGIC;
    signal ap_ST_fsm_state104_blk : STD_LOGIC;
    signal ap_ST_fsm_state105_blk : STD_LOGIC;
    signal ap_ST_fsm_state106_blk : STD_LOGIC;
    signal ap_ST_fsm_state107_blk : STD_LOGIC;
    signal ap_ST_fsm_state108_blk : STD_LOGIC;
    signal ap_ST_fsm_state109_blk : STD_LOGIC;
    signal ap_ST_fsm_state110_blk : STD_LOGIC;
    signal ap_ST_fsm_state111_blk : STD_LOGIC;
    signal ap_ST_fsm_state112_blk : STD_LOGIC;
    signal ap_ST_fsm_state113_blk : STD_LOGIC;
    signal ap_ST_fsm_state114_blk : STD_LOGIC;
    signal ap_ST_fsm_state115_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component guitar_effects_compression_Pipeline_LPF_Loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        trunc_ln7 : IN STD_LOGIC_VECTOR (10 downto 0);
        values_buffer_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        values_buffer_ce0 : OUT STD_LOGIC;
        values_buffer_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        p_out_ap_vld : OUT STD_LOGIC );
    end component;


    component guitar_effects_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_sitofp_32s_32_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_srem_17ns_10ns_16_21_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component guitar_effects_sdiv_32ns_16s_32_36_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_compression_Pipeline_LPF_Loop_fu_186 : component guitar_effects_compression_Pipeline_LPF_Loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_compression_Pipeline_LPF_Loop_fu_186_ap_start,
        ap_done => grp_compression_Pipeline_LPF_Loop_fu_186_ap_done,
        ap_idle => grp_compression_Pipeline_LPF_Loop_fu_186_ap_idle,
        ap_ready => grp_compression_Pipeline_LPF_Loop_fu_186_ap_ready,
        trunc_ln7 => trunc_ln174_reg_1247,
        values_buffer_address0 => grp_compression_Pipeline_LPF_Loop_fu_186_values_buffer_address0,
        values_buffer_ce0 => grp_compression_Pipeline_LPF_Loop_fu_186_values_buffer_ce0,
        values_buffer_q0 => values_buffer_q0,
        p_out => grp_compression_Pipeline_LPF_Loop_fu_186_p_out,
        p_out_ap_vld => grp_compression_Pipeline_LPF_Loop_fu_186_p_out_ap_vld);

    srem_17ns_10ns_16_21_seq_1_U11 : component guitar_effects_srem_17ns_10ns_16_21_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 21,
        din0_WIDTH => 17,
        din1_WIDTH => 10,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_222_ap_start,
        done => grp_fu_222_ap_done,
        din0 => grp_fu_222_p0,
        din1 => grp_fu_222_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_222_p2);

    sdiv_32ns_16s_32_36_seq_1_U12 : component guitar_effects_sdiv_32ns_16s_32_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_316_ap_start,
        done => grp_fu_316_ap_done,
        din0 => grp_fu_316_p0,
        din1 => grp_fu_316_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_316_p2);

    sdiv_32ns_16s_32_36_seq_1_U13 : component guitar_effects_sdiv_32ns_16s_32_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_328_ap_start,
        done => grp_fu_328_ap_done,
        din0 => grp_fu_328_p0,
        din1 => grp_fu_328_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_328_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                    ap_return_0_preg <= ap_phi_mux_output_1_phi_fu_178_p6;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                    ap_return_1_preg <= trunc_ln171_reg_1257;
                end if; 
            end if;
        end if;
    end process;


    grp_compression_Pipeline_LPF_Loop_fu_186_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_compression_Pipeline_LPF_Loop_fu_186_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    grp_compression_Pipeline_LPF_Loop_fu_186_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_compression_Pipeline_LPF_Loop_fu_186_ap_ready = ap_const_logic_1)) then 
                    grp_compression_Pipeline_LPF_Loop_fu_186_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    output_1_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln194_fu_304_p2) and (icmp_ln189_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                output_1_reg_175 <= input_r;
            elsif (((ap_const_lv1_1 = and_ln194_reg_1272) and (icmp_ln189_reg_1268 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
                output_1_reg_175 <= result_V_11_fu_764_p3;
            elsif (((icmp_ln189_reg_1268 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
                output_1_reg_175 <= result_V_fu_776_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln189_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                and_ln194_reg_1272 <= and_ln194_fu_304_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                compression_factor_1_reg_1353 <= compression_factor_1_fu_629_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state109)) then
                compression_factor_reg_1451 <= compression_factor_fu_1089_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then
                icmp_ln1136_1_reg_1303 <= icmp_ln1136_1_fu_349_p2;
                sub_ln1145_1_reg_1316 <= sub_ln1145_1_fu_401_p2;
                tmp_V_7_reg_1308 <= tmp_V_7_fu_360_p3;
                trunc_ln1144_1_reg_1328 <= trunc_ln1144_1_fu_411_p1;
                trunc_ln1148_1_reg_1323 <= trunc_ln1148_1_fu_407_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state106)) then
                icmp_ln1136_reg_1401 <= icmp_ln1136_fu_809_p2;
                sub_ln1145_reg_1414 <= sub_ln1145_fu_861_p2;
                tmp_V_6_reg_1406 <= tmp_V_6_fu_820_p3;
                trunc_ln1144_reg_1426 <= trunc_ln1144_fu_871_p1;
                trunc_ln1148_reg_1421 <= trunc_ln1148_fu_867_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1136_1_reg_1303 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                icmp_ln1155_1_reg_1338 <= icmp_ln1155_1_fu_509_p2;
                    or_ln1150_1_reg_1333(0) <= or_ln1150_1_fu_501_p3(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1136_reg_1401 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state107))) then
                icmp_ln1155_reg_1436 <= icmp_ln1155_fu_969_p2;
                    or_ln_reg_1431(0) <= or_ln_fu_961_p3(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                icmp_ln181_reg_1252 <= icmp_ln181_fu_259_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                icmp_ln189_reg_1268 <= icmp_ln189_fu_286_p2;
                trunc_ln171_reg_1257 <= trunc_ln171_fu_265_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state68)) then
                isNeg_1_reg_1368 <= add_ln346_1_fu_666_p2(8 downto 8);
                p_Result_40_reg_1358 <= data_V_1_fu_636_p1(31 downto 31);
                p_Result_41_reg_1363 <= p_Result_41_fu_658_p1;
                ush_1_reg_1373 <= ush_1_fu_690_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state114)) then
                isNeg_reg_1466 <= add_ln346_fu_1126_p2(8 downto 8);
                p_Result_35_reg_1456 <= data_V_fu_1096_p1(31 downto 31);
                p_Result_36_reg_1461 <= p_Result_36_fu_1118_p1;
                ush_reg_1471 <= ush_fu_1150_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1136_1_reg_1303 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                m_1_reg_1343 <= m_8_fu_557_p2(33 downto 1);
                p_Result_27_reg_1348 <= m_8_fu_557_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1136_reg_1401 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state108))) then
                m_s_reg_1441 <= m_5_fu_1017_p2(33 downto 1);
                p_Result_17_reg_1446 <= m_5_fu_1017_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state105)) then
                p_Result_32_reg_1395 <= grp_fu_328_p2(31 downto 31);
                r_V_18_reg_1389 <= grp_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                p_Result_37_reg_1297 <= grp_fu_316_p2(31 downto 31);
                r_V_19_reg_1291 <= grp_fu_316_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state63))) then
                reg_203 <= grp_fu_611_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state67))) then
                reg_208 <= grp_fu_607_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                srem_ln171_reg_1242 <= grp_fu_222_p2;
                trunc_ln174_reg_1247 <= trunc_ln174_fu_255_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                val_1_reg_1378 <= val_1_fu_752_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state115)) then
                val_reg_1476 <= val_fu_1212_p3;
            end if;
        end if;
    end process;
    or_ln1150_1_reg_1333(1) <= '0';
    or_ln_reg_1431(1) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state23, ap_CS_fsm_state24, icmp_ln189_fu_286_p2, and_ln194_fu_304_p2, grp_compression_Pipeline_LPF_Loop_fu_186_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((grp_compression_Pipeline_LPF_Loop_fu_186_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_lv1_0 = and_ln194_fu_304_p2) and (icmp_ln189_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state70;
                elsif (((ap_const_lv1_1 = and_ln194_fu_304_p2) and (icmp_ln189_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    LD_1_fu_621_p1 <= p_Result_39_fu_609_p5(32 - 1 downto 0);
    LD_fu_1081_p1 <= p_Result_34_fu_1069_p5(32 - 1 downto 0);
    a_1_fu_462_p2 <= (icmp_ln1148_1_fu_456_p2 and icmp_ln1147_1_fu_430_p2);
    a_fu_922_p2 <= (icmp_ln1148_fu_916_p2 and icmp_ln1147_fu_890_p2);
    abs_in_1_fu_242_p2 <= input_r;
    abs_in_fu_236_p1 <= input_r;
    abs_in_fu_236_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(abs_in_fu_236_p1));
    add_ln1155_1_fu_515_p2 <= std_logic_vector(unsigned(sub_ln1145_1_reg_1316) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln1155_fu_975_p2 <= std_logic_vector(unsigned(sub_ln1145_reg_1414) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln1170_1_fu_596_p2 <= std_logic_vector(unsigned(sub_ln1165_1_fu_591_p2) + unsigned(select_ln1144_1_fu_584_p3));
    add_ln1170_fu_1056_p2 <= std_logic_vector(unsigned(sub_ln1165_fu_1051_p2) + unsigned(select_ln1144_fu_1044_p3));
    add_ln346_1_fu_666_p2 <= std_logic_vector(unsigned(zext_ln346_1_fu_662_p1) + unsigned(ap_const_lv9_181));
    add_ln346_fu_1126_p2 <= std_logic_vector(unsigned(zext_ln346_fu_1122_p1) + unsigned(ap_const_lv9_181));
    and_ln1150_1_fu_489_p2 <= (xor_ln1150_1_fu_476_p2 and p_Result_26_fu_482_p3);
    and_ln1150_fu_949_p2 <= (xor_ln1150_fu_936_p2 and p_Result_16_fu_942_p3);
    and_ln194_fu_304_p2 <= (icmp_ln194_fu_292_p2 and icmp_ln194_1_fu_298_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state106 <= ap_CS_fsm(105);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state108 <= ap_CS_fsm(107);
    ap_CS_fsm_state109 <= ap_CS_fsm(108);
    ap_CS_fsm_state110 <= ap_CS_fsm(109);
    ap_CS_fsm_state113 <= ap_CS_fsm(112);
    ap_CS_fsm_state114 <= ap_CS_fsm(113);
    ap_CS_fsm_state115 <= ap_CS_fsm(114);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_ST_fsm_state100_blk <= ap_const_logic_0;
    ap_ST_fsm_state101_blk <= ap_const_logic_0;
    ap_ST_fsm_state102_blk <= ap_const_logic_0;
    ap_ST_fsm_state103_blk <= ap_const_logic_0;
    ap_ST_fsm_state104_blk <= ap_const_logic_0;
    ap_ST_fsm_state105_blk <= ap_const_logic_0;
    ap_ST_fsm_state106_blk <= ap_const_logic_0;
    ap_ST_fsm_state107_blk <= ap_const_logic_0;
    ap_ST_fsm_state108_blk <= ap_const_logic_0;
    ap_ST_fsm_state109_blk <= ap_const_logic_0;
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state110_blk <= ap_const_logic_0;
    ap_ST_fsm_state111_blk <= ap_const_logic_0;
    ap_ST_fsm_state112_blk <= ap_const_logic_0;
    ap_ST_fsm_state113_blk <= ap_const_logic_0;
    ap_ST_fsm_state114_blk <= ap_const_logic_0;
    ap_ST_fsm_state115_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;

    ap_ST_fsm_state23_blk_assign_proc : process(grp_compression_Pipeline_LPF_Loop_fu_186_ap_done)
    begin
        if ((grp_compression_Pipeline_LPF_Loop_fu_186_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state23_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state23_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;
    ap_ST_fsm_state76_blk <= ap_const_logic_0;
    ap_ST_fsm_state77_blk <= ap_const_logic_0;
    ap_ST_fsm_state78_blk <= ap_const_logic_0;
    ap_ST_fsm_state79_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state80_blk <= ap_const_logic_0;
    ap_ST_fsm_state81_blk <= ap_const_logic_0;
    ap_ST_fsm_state82_blk <= ap_const_logic_0;
    ap_ST_fsm_state83_blk <= ap_const_logic_0;
    ap_ST_fsm_state84_blk <= ap_const_logic_0;
    ap_ST_fsm_state85_blk <= ap_const_logic_0;
    ap_ST_fsm_state86_blk <= ap_const_logic_0;
    ap_ST_fsm_state87_blk <= ap_const_logic_0;
    ap_ST_fsm_state88_blk <= ap_const_logic_0;
    ap_ST_fsm_state89_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state90_blk <= ap_const_logic_0;
    ap_ST_fsm_state91_blk <= ap_const_logic_0;
    ap_ST_fsm_state92_blk <= ap_const_logic_0;
    ap_ST_fsm_state93_blk <= ap_const_logic_0;
    ap_ST_fsm_state94_blk <= ap_const_logic_0;
    ap_ST_fsm_state95_blk <= ap_const_logic_0;
    ap_ST_fsm_state96_blk <= ap_const_logic_0;
    ap_ST_fsm_state97_blk <= ap_const_logic_0;
    ap_ST_fsm_state98_blk <= ap_const_logic_0;
    ap_ST_fsm_state99_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state70)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state70) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_output_1_phi_fu_178_p6_assign_proc : process(icmp_ln189_reg_1268, and_ln194_reg_1272, result_V_fu_776_p3, output_1_reg_175, ap_CS_fsm_state70, result_V_11_fu_764_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then
            if (((ap_const_lv1_1 = and_ln194_reg_1272) and (icmp_ln189_reg_1268 = ap_const_lv1_0))) then 
                ap_phi_mux_output_1_phi_fu_178_p6 <= result_V_11_fu_764_p3;
            elsif ((icmp_ln189_reg_1268 = ap_const_lv1_1)) then 
                ap_phi_mux_output_1_phi_fu_178_p6 <= result_V_fu_776_p3;
            else 
                ap_phi_mux_output_1_phi_fu_178_p6 <= output_1_reg_175;
            end if;
        else 
            ap_phi_mux_output_1_phi_fu_178_p6 <= output_1_reg_175;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_phi_mux_output_1_phi_fu_178_p6, ap_CS_fsm_state70, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            ap_return_0 <= ap_phi_mux_output_1_phi_fu_178_p6;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(trunc_ln171_reg_1257, ap_CS_fsm_state70, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            ap_return_1 <= trunc_ln171_reg_1257;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    bitcast_ln810_1_fu_625_p1 <= LD_1_fu_621_p1;
    bitcast_ln810_fu_1085_p1 <= LD_fu_1081_p1;
    compression_factor_1_fu_629_p3 <= 
        ap_const_lv32_0 when (icmp_ln1136_1_reg_1303(0) = '1') else 
        bitcast_ln810_1_fu_625_p1;
    compression_factor_fu_1089_p3 <= 
        ap_const_lv32_0 when (icmp_ln1136_reg_1401(0) = '1') else 
        bitcast_ln810_fu_1085_p1;
    data_V_1_fu_636_p1 <= reg_208;
    data_V_fu_1096_p1 <= reg_208;
    grp_compression_Pipeline_LPF_Loop_fu_186_ap_start <= grp_compression_Pipeline_LPF_Loop_fu_186_ap_start_reg;

    grp_fu_196_p1_assign_proc : process(compression_factor_1_reg_1353, compression_factor_reg_1451, ap_CS_fsm_state64, ap_CS_fsm_state110)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            grp_fu_196_p1 <= compression_factor_reg_1451;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_fu_196_p1 <= compression_factor_1_reg_1353;
        else 
            grp_fu_196_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_200_p0_assign_proc : process(sext_ln196_fu_334_p1, ap_CS_fsm_state58, sext_ln192_fu_794_p1, ap_CS_fsm_state104)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            grp_fu_200_p0 <= sext_ln192_fu_794_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            grp_fu_200_p0 <= sext_ln196_fu_334_p1;
        else 
            grp_fu_200_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_222_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            grp_fu_222_ap_start <= ap_const_logic_1;
        else 
            grp_fu_222_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_222_p0 <= std_logic_vector(signed(sext_ln171_fu_212_p1) + signed(ap_const_lv17_1));
    grp_fu_222_p1 <= ap_const_lv17_1B9(10 - 1 downto 0);

    grp_fu_316_ap_start_assign_proc : process(ap_CS_fsm_state24, icmp_ln189_fu_286_p2, and_ln194_fu_304_p2)
    begin
        if (((ap_const_lv1_1 = and_ln194_fu_304_p2) and (icmp_ln189_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            grp_fu_316_ap_start <= ap_const_logic_1;
        else 
            grp_fu_316_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_316_p0 <= std_logic_vector(shift_left(unsigned(min_threshold),to_integer(unsigned('0' & ap_const_lv32_10(31-1 downto 0)))));
    grp_fu_316_p1 <= sext_ln189_fu_282_p1(16 - 1 downto 0);

    grp_fu_328_ap_start_assign_proc : process(ap_CS_fsm_state24, icmp_ln189_fu_286_p2)
    begin
        if (((icmp_ln189_fu_286_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            grp_fu_328_ap_start <= ap_const_logic_1;
        else 
            grp_fu_328_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_328_p0 <= std_logic_vector(shift_left(unsigned(max_threshold),to_integer(unsigned('0' & ap_const_lv32_10(31-1 downto 0)))));
    grp_fu_328_p1 <= sext_ln189_fu_282_p1(16 - 1 downto 0);
    grp_fu_607_p_ce <= ap_const_logic_1;
    grp_fu_607_p_din0 <= reg_203;
    grp_fu_607_p_din1 <= grp_fu_196_p1;
    grp_fu_611_p_ce <= ap_const_logic_1;
    grp_fu_611_p_din0 <= grp_fu_200_p0;
    icmp_ln1136_1_fu_349_p2 <= "1" when (r_V_19_reg_1291 = ap_const_lv32_0) else "0";
    icmp_ln1136_fu_809_p2 <= "1" when (r_V_18_reg_1389 = ap_const_lv32_0) else "0";
    icmp_ln1147_1_fu_430_p2 <= "1" when (signed(tmp_29_fu_420_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln1147_fu_890_p2 <= "1" when (signed(tmp_21_fu_880_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln1148_1_fu_456_p2 <= "0" when (p_Result_25_fu_451_p2 = ap_const_lv33_0) else "1";
    icmp_ln1148_fu_916_p2 <= "0" when (p_Result_15_fu_911_p2 = ap_const_lv33_0) else "1";
    icmp_ln1155_1_fu_509_p2 <= "1" when (signed(lsb_index_1_fu_415_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln1155_fu_969_p2 <= "1" when (signed(lsb_index_fu_875_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln181_fu_259_p2 <= "1" when (signed(current_sample) < signed(ap_const_lv32_1B9)) else "0";
    icmp_ln189_fu_286_p2 <= "1" when (signed(sext_ln189_fu_282_p1) > signed(max_threshold)) else "0";
    icmp_ln194_1_fu_298_p2 <= "1" when (signed(sext_ln189_fu_282_p1) > signed(zero_threshold)) else "0";
    icmp_ln194_fu_292_p2 <= "1" when (signed(sext_ln189_fu_282_p1) < signed(min_threshold)) else "0";
    isNeg_1_fu_672_p3 <= add_ln346_1_fu_666_p2(8 downto 8);
    isNeg_fu_1132_p3 <= add_ln346_fu_1126_p2(8 downto 8);
    l_1_fu_397_p1 <= tmp_1_fu_389_p3(32 - 1 downto 0);
    l_fu_857_p1 <= tmp_s_fu_849_p3(32 - 1 downto 0);
    lsb_index_1_fu_415_p2 <= std_logic_vector(unsigned(sub_ln1145_1_reg_1316) + unsigned(ap_const_lv32_FFFFFFE8));
    lsb_index_fu_875_p2 <= std_logic_vector(unsigned(sub_ln1145_reg_1414) + unsigned(ap_const_lv32_FFFFFFE8));
    lshr_ln1148_1_fu_445_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv33_1FFFFFFFF),to_integer(unsigned('0' & zext_ln1148_1_fu_441_p1(31-1 downto 0)))));
    lshr_ln1148_fu_905_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv33_1FFFFFFFF),to_integer(unsigned('0' & zext_ln1148_fu_901_p1(31-1 downto 0)))));
    lshr_ln1155_1_fu_524_p2 <= std_logic_vector(shift_right(unsigned(tmp_V_7_reg_1308),to_integer(unsigned('0' & zext_ln1155_1_fu_520_p1(31-1 downto 0)))));
    lshr_ln1155_fu_984_p2 <= std_logic_vector(shift_right(unsigned(tmp_V_6_reg_1406),to_integer(unsigned('0' & zext_ln1155_fu_980_p1(31-1 downto 0)))));
    m_5_fu_1017_p2 <= std_logic_vector(unsigned(zext_ln1152_fu_1010_p1) + unsigned(zext_ln1162_fu_1014_p1));
    m_7_fu_543_p3 <= 
        lshr_ln1155_1_fu_524_p2 when (icmp_ln1155_1_reg_1338(0) = '1') else 
        shl_ln1156_1_fu_538_p2;
    m_8_fu_557_p2 <= std_logic_vector(unsigned(zext_ln1152_2_fu_550_p1) + unsigned(zext_ln1162_1_fu_554_p1));
    m_fu_1003_p3 <= 
        lshr_ln1155_fu_984_p2 when (icmp_ln1155_reg_1436(0) = '1') else 
        shl_ln1156_fu_998_p2;
    mantissa_1_fu_698_p4 <= ((ap_const_lv1_1 & p_Result_41_reg_1363) & ap_const_lv1_0);
    mantissa_fu_1158_p4 <= ((ap_const_lv1_1 & p_Result_36_reg_1461) & ap_const_lv1_0);
    or_ln1150_1_fu_501_p3 <= (ap_const_lv1_0 & or_ln1150_fu_495_p2);
    or_ln1150_2_fu_955_p2 <= (and_ln1150_fu_949_p2 or a_fu_922_p2);
    or_ln1150_fu_495_p2 <= (and_ln1150_1_fu_489_p2 or a_1_fu_462_p2);
    or_ln_fu_961_p3 <= (ap_const_lv1_0 & or_ln1150_2_fu_955_p2);
    p_Result_15_fu_911_p2 <= (tmp_V_6_reg_1406 and lshr_ln1148_fu_905_p2);
    p_Result_16_fu_942_p3 <= tmp_V_6_reg_1406(to_integer(unsigned(lsb_index_fu_875_p2)) downto to_integer(unsigned(lsb_index_fu_875_p2))) when (to_integer(unsigned(lsb_index_fu_875_p2)) >= 0 and to_integer(unsigned(lsb_index_fu_875_p2)) <=32) else "-";
    
    p_Result_23_fu_367_p4_proc : process(tmp_V_7_fu_360_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(33+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(33+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable p_Result_23_fu_367_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(33 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_20(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := tmp_V_7_fu_360_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(33-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(33-1-unsigned(ap_const_lv32_20(6-1 downto 0)));
            for p_Result_23_fu_367_p4_i in 0 to 33-1 loop
                v0_cpy(p_Result_23_fu_367_p4_i) := tmp_V_7_fu_360_p3(33-1-p_Result_23_fu_367_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(33-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_23_fu_367_p4 <= resvalue(33-1 downto 0);
    end process;

    p_Result_25_fu_451_p2 <= (tmp_V_7_reg_1308 and lshr_ln1148_1_fu_445_p2);
    p_Result_26_fu_482_p3 <= tmp_V_7_reg_1308(to_integer(unsigned(lsb_index_1_fu_415_p2)) downto to_integer(unsigned(lsb_index_1_fu_415_p2))) when (to_integer(unsigned(lsb_index_1_fu_415_p2)) >= 0 and to_integer(unsigned(lsb_index_1_fu_415_p2)) <=32) else "-";
    p_Result_33_fu_837_p3 <= (ap_const_lv1_1 & p_Result_s_fu_827_p4);
    p_Result_34_fu_1069_p5 <= (zext_ln1152_1_fu_1041_p1(63 downto 32) & tmp_8_fu_1062_p3 & zext_ln1152_1_fu_1041_p1(22 downto 0));
    p_Result_36_fu_1118_p1 <= data_V_fu_1096_p1(23 - 1 downto 0);
    p_Result_38_fu_377_p3 <= (ap_const_lv1_1 & p_Result_23_fu_367_p4);
    p_Result_39_fu_609_p5 <= (zext_ln1152_3_fu_581_p1(63 downto 32) & tmp_2_fu_602_p3 & zext_ln1152_3_fu_581_p1(22 downto 0));
    p_Result_41_fu_658_p1 <= data_V_1_fu_636_p1(23 - 1 downto 0);
    
    p_Result_s_fu_827_p4_proc : process(tmp_V_6_fu_820_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(33+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(33+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable p_Result_s_fu_827_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(33 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_20(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := tmp_V_6_fu_820_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(33-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(33-1-unsigned(ap_const_lv32_20(6-1 downto 0)));
            for p_Result_s_fu_827_p4_i in 0 to 33-1 loop
                v0_cpy(p_Result_s_fu_827_p4_i) := tmp_V_6_fu_820_p3(33-1-p_Result_s_fu_827_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(33-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_827_p4 <= resvalue(33-1 downto 0);
    end process;

    r_V_14_fu_1184_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_1167_p1),to_integer(unsigned('0' & zext_ln1488_fu_1174_p1(31-1 downto 0)))));
    r_V_16_fu_718_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_1_fu_707_p1),to_integer(unsigned('0' & zext_ln1488_1_fu_714_p1(31-1 downto 0)))));
    r_V_17_fu_724_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_1_fu_707_p1),to_integer(unsigned('0' & zext_ln1488_1_fu_714_p1(31-1 downto 0)))));
    r_V_fu_1178_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_1167_p1),to_integer(unsigned('0' & zext_ln1488_fu_1174_p1(31-1 downto 0)))));
    result_V_10_fu_759_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(val_1_reg_1378));
    result_V_11_fu_764_p3 <= 
        result_V_10_fu_759_p2 when (p_Result_40_reg_1358(0) = '1') else 
        val_1_reg_1378;
    result_V_6_fu_771_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(val_reg_1476));
    result_V_fu_776_p3 <= 
        result_V_6_fu_771_p2 when (p_Result_35_reg_1456(0) = '1') else 
        val_reg_1476;
    select_ln1144_1_fu_584_p3 <= 
        ap_const_lv8_7F when (p_Result_27_reg_1348(0) = '1') else 
        ap_const_lv8_7E;
    select_ln1144_fu_1044_p3 <= 
        ap_const_lv8_7F when (p_Result_17_reg_1446(0) = '1') else 
        ap_const_lv8_7E;
    select_ln181_fu_275_p3 <= 
        trunc_ln182_fu_271_p1 when (icmp_ln181_reg_1252(0) = '1') else 
        grp_compression_Pipeline_LPF_Loop_fu_186_p_out;
        sext_ln1250_1_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_38_fu_377_p3),64));

        sext_ln1250_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_33_fu_837_p3),64));

        sext_ln1349_1_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_19_reg_1291),33));

        sext_ln1349_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_18_reg_1389),33));

        sext_ln1488_1_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_reg_1373),32));

        sext_ln1488_fu_1171_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_1471),32));

        sext_ln1512_1_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_1_fu_680_p2),9));

        sext_ln1512_fu_1146_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_fu_1140_p2),9));

    sext_ln171_fu_212_p0 <= compression_buffer_index_read;
        sext_ln171_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln171_fu_212_p0),17));

        sext_ln189_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln181_fu_275_p3),32));

    sext_ln192_fu_794_p0 <= input_r;
        sext_ln192_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln192_fu_794_p0),32));

    sext_ln196_fu_334_p0 <= input_r;
        sext_ln196_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln196_fu_334_p0),32));

    shl_ln1156_1_fu_538_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_7_reg_1308),to_integer(unsigned('0' & zext_ln1156_1_fu_534_p1(31-1 downto 0)))));
    shl_ln1156_fu_998_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_6_reg_1406),to_integer(unsigned('0' & zext_ln1156_fu_994_p1(31-1 downto 0)))));
    sub_ln1145_1_fu_401_p2 <= std_logic_vector(unsigned(ap_const_lv32_21) - unsigned(l_1_fu_397_p1));
    sub_ln1145_fu_861_p2 <= std_logic_vector(unsigned(ap_const_lv32_21) - unsigned(l_fu_857_p1));
    sub_ln1148_1_fu_436_p2 <= std_logic_vector(signed(ap_const_lv6_3A) - signed(trunc_ln1148_1_reg_1323));
    sub_ln1148_fu_896_p2 <= std_logic_vector(signed(ap_const_lv6_3A) - signed(trunc_ln1148_reg_1421));
    sub_ln1156_1_fu_529_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln1145_1_reg_1316));
    sub_ln1156_fu_989_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln1145_reg_1414));
    sub_ln1165_1_fu_591_p2 <= std_logic_vector(unsigned(ap_const_lv8_11) - unsigned(trunc_ln1144_1_reg_1328));
    sub_ln1165_fu_1051_p2 <= std_logic_vector(unsigned(ap_const_lv8_11) - unsigned(trunc_ln1144_reg_1426));
    sub_ln1512_1_fu_680_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_V_1_fu_648_p4));
    sub_ln1512_fu_1140_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_V_fu_1108_p4));
    
    tmp_1_fu_389_p3_proc : process(sext_ln1250_1_fu_385_p1)
    begin
        tmp_1_fu_389_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if sext_ln1250_1_fu_385_p1(i) = '1' then
                tmp_1_fu_389_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    tmp_21_fu_880_p4 <= lsb_index_fu_875_p2(31 downto 1);
    tmp_22_fu_928_p3 <= lsb_index_fu_875_p2(31 downto 31);
    tmp_27_fu_1190_p3 <= r_V_fu_1178_p2(24 downto 24);
    tmp_29_fu_420_p4 <= lsb_index_1_fu_415_p2(31 downto 1);
    tmp_2_fu_602_p3 <= (p_Result_37_reg_1297 & add_ln1170_1_fu_596_p2);
    tmp_30_fu_468_p3 <= lsb_index_1_fu_415_p2(31 downto 31);
    tmp_35_fu_730_p3 <= r_V_16_fu_718_p2(24 downto 24);
    tmp_3_fu_1202_p4 <= r_V_14_fu_1184_p2(39 downto 24);
    tmp_4_fu_742_p4 <= r_V_17_fu_724_p2(39 downto 24);
    tmp_8_fu_1062_p3 <= (p_Result_32_reg_1395 & add_ln1170_fu_1056_p2);
    tmp_V_4_fu_354_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(sext_ln1349_1_fu_346_p1));
    tmp_V_6_fu_820_p3 <= 
        tmp_V_fu_814_p2 when (p_Result_32_reg_1395(0) = '1') else 
        sext_ln1349_fu_806_p1;
    tmp_V_7_fu_360_p3 <= 
        tmp_V_4_fu_354_p2 when (p_Result_37_reg_1297(0) = '1') else 
        sext_ln1349_1_fu_346_p1;
    tmp_V_fu_814_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(sext_ln1349_fu_806_p1));
    tmp_fu_228_p1 <= input_r;
    tmp_fu_228_p3 <= tmp_fu_228_p1(15 downto 15);
    
    tmp_s_fu_849_p3_proc : process(sext_ln1250_fu_845_p1)
    begin
        tmp_s_fu_849_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if sext_ln1250_fu_845_p1(i) = '1' then
                tmp_s_fu_849_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    trunc_ln1144_1_fu_411_p1 <= tmp_1_fu_389_p3(8 - 1 downto 0);
    trunc_ln1144_fu_871_p1 <= tmp_s_fu_849_p3(8 - 1 downto 0);
    trunc_ln1148_1_fu_407_p1 <= sub_ln1145_1_fu_401_p2(6 - 1 downto 0);
    trunc_ln1148_fu_867_p1 <= sub_ln1145_fu_861_p2(6 - 1 downto 0);
    trunc_ln171_fu_265_p1 <= srem_ln171_reg_1242(16 - 1 downto 0);
    trunc_ln174_fu_255_p1 <= grp_fu_222_p2(11 - 1 downto 0);
    trunc_ln182_fu_271_p1 <= min_threshold(16 - 1 downto 0);
    ush_1_fu_690_p3 <= 
        sext_ln1512_1_fu_686_p1 when (isNeg_1_fu_672_p3(0) = '1') else 
        add_ln346_1_fu_666_p2;
    ush_fu_1150_p3 <= 
        sext_ln1512_fu_1146_p1 when (isNeg_fu_1132_p3(0) = '1') else 
        add_ln346_fu_1126_p2;
    val_1_fu_752_p3 <= 
        zext_ln818_1_fu_738_p1 when (isNeg_1_reg_1368(0) = '1') else 
        tmp_4_fu_742_p4;
    val_fu_1212_p3 <= 
        zext_ln818_fu_1198_p1 when (isNeg_reg_1466(0) = '1') else 
        tmp_3_fu_1202_p4;

    values_buffer_address0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state23, grp_compression_Pipeline_LPF_Loop_fu_186_values_buffer_address0, zext_ln170_fu_251_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            values_buffer_address0 <= zext_ln170_fu_251_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            values_buffer_address0 <= grp_compression_Pipeline_LPF_Loop_fu_186_values_buffer_address0;
        else 
            values_buffer_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    values_buffer_ce0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state23, grp_compression_Pipeline_LPF_Loop_fu_186_values_buffer_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            values_buffer_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            values_buffer_ce0 <= grp_compression_Pipeline_LPF_Loop_fu_186_values_buffer_ce0;
        else 
            values_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    values_buffer_d0 <= 
        abs_in_fu_236_p2 when (tmp_fu_228_p3(0) = '1') else 
        abs_in_1_fu_242_p2;

    values_buffer_we0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            values_buffer_we0 <= ap_const_logic_1;
        else 
            values_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln1150_1_fu_476_p2 <= (tmp_30_fu_468_p3 xor ap_const_lv1_1);
    xor_ln1150_fu_936_p2 <= (tmp_22_fu_928_p3 xor ap_const_lv1_1);
    xs_exp_V_1_fu_648_p4 <= data_V_1_fu_636_p1(30 downto 23);
    xs_exp_V_fu_1108_p4 <= data_V_fu_1096_p1(30 downto 23);
    zext_ln1148_1_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1148_1_fu_436_p2),33));
    zext_ln1148_fu_901_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1148_fu_896_p2),33));
    zext_ln1152_1_fu_1041_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_s_reg_1441),64));
    zext_ln1152_2_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_7_fu_543_p3),34));
    zext_ln1152_3_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_1_reg_1343),64));
    zext_ln1152_fu_1010_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_fu_1003_p3),34));
    zext_ln1155_1_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1155_1_fu_515_p2),33));
    zext_ln1155_fu_980_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1155_fu_975_p2),33));
    zext_ln1156_1_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1156_1_fu_529_p2),33));
    zext_ln1156_fu_994_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1156_fu_989_p2),33));
    zext_ln1162_1_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1150_1_reg_1333),34));
    zext_ln1162_fu_1014_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_reg_1431),34));
    zext_ln1488_1_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_1_fu_711_p1),63));
    zext_ln1488_fu_1174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_fu_1171_p1),63));
    zext_ln15_1_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_1_fu_698_p4),63));
    zext_ln15_fu_1167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_1158_p4),63));
    zext_ln170_fu_251_p0 <= compression_buffer_index_read;
    zext_ln170_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln170_fu_251_p0),64));
    zext_ln346_1_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_1_fu_648_p4),9));
    zext_ln346_fu_1122_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_fu_1108_p4),9));
    zext_ln818_1_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_730_p3),16));
    zext_ln818_fu_1198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_1190_p3),16));
end behav;
