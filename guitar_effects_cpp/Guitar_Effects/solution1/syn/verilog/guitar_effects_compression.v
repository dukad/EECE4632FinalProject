// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module guitar_effects_compression (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r,
        min_threshold,
        max_threshold,
        zero_threshold,
        current_level_read,
        values_buffer_address0,
        values_buffer_ce0,
        values_buffer_we0,
        values_buffer_d0,
        ap_return_0,
        ap_return_1,
        grp_fu_317_p_din0,
        grp_fu_317_p_din1,
        grp_fu_317_p_dout0,
        grp_fu_317_p_ce
);

parameter    ap_ST_fsm_state1 = 61'd1;
parameter    ap_ST_fsm_state2 = 61'd2;
parameter    ap_ST_fsm_state3 = 61'd4;
parameter    ap_ST_fsm_state4 = 61'd8;
parameter    ap_ST_fsm_state5 = 61'd16;
parameter    ap_ST_fsm_state6 = 61'd32;
parameter    ap_ST_fsm_state7 = 61'd64;
parameter    ap_ST_fsm_state8 = 61'd128;
parameter    ap_ST_fsm_state9 = 61'd256;
parameter    ap_ST_fsm_state10 = 61'd512;
parameter    ap_ST_fsm_state11 = 61'd1024;
parameter    ap_ST_fsm_state12 = 61'd2048;
parameter    ap_ST_fsm_state13 = 61'd4096;
parameter    ap_ST_fsm_state14 = 61'd8192;
parameter    ap_ST_fsm_state15 = 61'd16384;
parameter    ap_ST_fsm_state16 = 61'd32768;
parameter    ap_ST_fsm_state17 = 61'd65536;
parameter    ap_ST_fsm_state18 = 61'd131072;
parameter    ap_ST_fsm_state19 = 61'd262144;
parameter    ap_ST_fsm_state20 = 61'd524288;
parameter    ap_ST_fsm_state21 = 61'd1048576;
parameter    ap_ST_fsm_state22 = 61'd2097152;
parameter    ap_ST_fsm_state23 = 61'd4194304;
parameter    ap_ST_fsm_state24 = 61'd8388608;
parameter    ap_ST_fsm_state25 = 61'd16777216;
parameter    ap_ST_fsm_state26 = 61'd33554432;
parameter    ap_ST_fsm_state27 = 61'd67108864;
parameter    ap_ST_fsm_state28 = 61'd134217728;
parameter    ap_ST_fsm_state29 = 61'd268435456;
parameter    ap_ST_fsm_state30 = 61'd536870912;
parameter    ap_ST_fsm_state31 = 61'd1073741824;
parameter    ap_ST_fsm_state32 = 61'd2147483648;
parameter    ap_ST_fsm_state33 = 61'd4294967296;
parameter    ap_ST_fsm_state34 = 61'd8589934592;
parameter    ap_ST_fsm_state35 = 61'd17179869184;
parameter    ap_ST_fsm_state36 = 61'd34359738368;
parameter    ap_ST_fsm_state37 = 61'd68719476736;
parameter    ap_ST_fsm_state38 = 61'd137438953472;
parameter    ap_ST_fsm_state39 = 61'd274877906944;
parameter    ap_ST_fsm_state40 = 61'd549755813888;
parameter    ap_ST_fsm_state41 = 61'd1099511627776;
parameter    ap_ST_fsm_state42 = 61'd2199023255552;
parameter    ap_ST_fsm_state43 = 61'd4398046511104;
parameter    ap_ST_fsm_state44 = 61'd8796093022208;
parameter    ap_ST_fsm_state45 = 61'd17592186044416;
parameter    ap_ST_fsm_state46 = 61'd35184372088832;
parameter    ap_ST_fsm_state47 = 61'd70368744177664;
parameter    ap_ST_fsm_state48 = 61'd140737488355328;
parameter    ap_ST_fsm_state49 = 61'd281474976710656;
parameter    ap_ST_fsm_state50 = 61'd562949953421312;
parameter    ap_ST_fsm_state51 = 61'd1125899906842624;
parameter    ap_ST_fsm_state52 = 61'd2251799813685248;
parameter    ap_ST_fsm_state53 = 61'd4503599627370496;
parameter    ap_ST_fsm_state54 = 61'd9007199254740992;
parameter    ap_ST_fsm_state55 = 61'd18014398509481984;
parameter    ap_ST_fsm_state56 = 61'd36028797018963968;
parameter    ap_ST_fsm_state57 = 61'd72057594037927936;
parameter    ap_ST_fsm_state58 = 61'd144115188075855872;
parameter    ap_ST_fsm_state59 = 61'd288230376151711744;
parameter    ap_ST_fsm_state60 = 61'd576460752303423488;
parameter    ap_ST_fsm_state61 = 61'd1152921504606846976;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] input_r;
input  [15:0] min_threshold;
input  [15:0] max_threshold;
input  [15:0] zero_threshold;
input  [15:0] current_level_read;
output  [8:0] values_buffer_address0;
output   values_buffer_ce0;
output   values_buffer_we0;
output  [15:0] values_buffer_d0;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
output  [31:0] grp_fu_317_p_din0;
output  [31:0] grp_fu_317_p_din1;
input  [31:0] grp_fu_317_p_dout0;
output   grp_fu_317_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg values_buffer_ce0;
reg values_buffer_we0;
reg[15:0] ap_return_0;
reg[15:0] ap_return_1;

(* fsm_encoding = "none" *) reg   [60:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_121_p1;
reg   [31:0] reg_127;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state54;
wire   [31:0] grp_fu_124_p1;
reg   [31:0] reg_134;
reg   [31:0] reg_140;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state58;
wire   [0:0] icmp_ln128_fu_167_p2;
reg   [0:0] icmp_ln128_reg_530;
wire   [0:0] and_ln137_1_fu_197_p2;
reg   [0:0] and_ln137_1_reg_537;
wire  signed [31:0] sext_ln131_fu_209_p1;
wire   [0:0] icmp_ln129_fu_173_p2;
wire  signed [31:0] sext_ln131_1_fu_214_p1;
wire   [15:0] grp_fu_203_p2;
reg   [15:0] sdiv_ln139_reg_551;
wire    ap_CS_fsm_state20;
wire  signed [31:0] sext_ln139_fu_219_p1;
wire    ap_CS_fsm_state21;
wire  signed [31:0] sext_ln140_fu_223_p1;
reg   [0:0] p_Result_7_reg_566;
wire    ap_CS_fsm_state31;
wire   [22:0] p_Result_8_fu_249_p1;
reg   [22:0] p_Result_8_reg_571;
wire   [0:0] isNeg_3_fu_263_p3;
reg   [0:0] isNeg_3_reg_576;
wire   [8:0] ush_3_fu_281_p3;
reg   [8:0] ush_3_reg_581;
wire   [15:0] val_3_fu_343_p3;
reg   [15:0] val_3_reg_586;
wire    ap_CS_fsm_state32;
wire  signed [31:0] sext_ln132_fu_373_p1;
wire    ap_CS_fsm_state49;
wire   [31:0] grp_fu_117_p2;
reg   [31:0] compression_factor_reg_597;
reg   [0:0] p_Result_s_reg_602;
wire    ap_CS_fsm_state59;
wire   [22:0] p_Result_6_fu_399_p1;
reg   [22:0] p_Result_6_reg_607;
wire   [0:0] isNeg_fu_413_p3;
reg   [0:0] isNeg_reg_612;
wire   [8:0] ush_fu_431_p3;
reg   [8:0] ush_reg_617;
wire   [15:0] val_fu_493_p3;
reg   [15:0] val_reg_622;
wire    ap_CS_fsm_state60;
wire   [15:0] result_V_fu_505_p3;
wire    ap_CS_fsm_state61;
reg   [15:0] ap_phi_mux_output_2_phi_fu_103_p8;
reg   [15:0] output_2_reg_100;
wire   [15:0] result_V_17_fu_355_p3;
wire    ap_CS_fsm_state33;
reg   [31:0] grp_fu_113_p0;
reg   [31:0] grp_fu_113_p1;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state39;
reg  signed [31:0] grp_fu_121_p0;
reg  signed [31:0] grp_fu_124_p0;
wire  signed [15:0] tmp_fu_144_p1;
wire  signed [15:0] abs_in_fu_152_p1;
wire   [0:0] tmp_fu_144_p3;
wire   [15:0] abs_in_fu_152_p2;
wire  signed [15:0] abs_in_1_fu_158_p2;
wire  signed [15:0] icmp_ln128_fu_167_p0;
wire  signed [15:0] icmp_ln128_fu_167_p1;
wire  signed [15:0] icmp_ln129_fu_173_p0;
wire  signed [15:0] icmp_ln137_fu_179_p0;
wire  signed [15:0] icmp_ln137_1_fu_185_p0;
wire   [0:0] icmp_ln137_1_fu_185_p2;
wire   [0:0] and_ln137_fu_191_p2;
wire   [0:0] icmp_ln137_fu_179_p2;
wire  signed [15:0] sext_ln131_fu_209_p0;
wire  signed [15:0] sext_ln131_1_fu_214_p0;
wire  signed [15:0] sext_ln140_fu_223_p0;
wire   [31:0] data_V_3_fu_227_p1;
wire   [7:0] xs_exp_V_3_fu_239_p4;
wire   [8:0] zext_ln346_3_fu_253_p1;
wire   [8:0] add_ln346_3_fu_257_p2;
wire   [7:0] sub_ln1512_3_fu_271_p2;
wire  signed [8:0] sext_ln1512_3_fu_277_p1;
wire   [24:0] mantissa_3_fu_289_p4;
wire  signed [31:0] sext_ln1488_3_fu_302_p1;
wire   [62:0] zext_ln15_3_fu_298_p1;
wire   [62:0] zext_ln1488_3_fu_305_p1;
wire   [62:0] r_V_7_fu_309_p2;
wire   [0:0] tmp_24_fu_321_p3;
wire   [62:0] r_V_8_fu_315_p2;
wire   [15:0] zext_ln818_3_fu_329_p1;
wire   [15:0] tmp_s_fu_333_p4;
wire   [15:0] result_V_16_fu_350_p2;
wire  signed [15:0] sext_ln132_fu_373_p0;
wire   [31:0] data_V_fu_377_p1;
wire   [7:0] xs_exp_V_fu_389_p4;
wire   [8:0] zext_ln346_fu_403_p1;
wire   [8:0] add_ln346_fu_407_p2;
wire   [7:0] sub_ln1512_fu_421_p2;
wire  signed [8:0] sext_ln1512_fu_427_p1;
wire   [24:0] mantissa_fu_439_p4;
wire  signed [31:0] sext_ln1488_fu_452_p1;
wire   [62:0] zext_ln15_fu_448_p1;
wire   [62:0] zext_ln1488_fu_455_p1;
wire   [62:0] r_V_fu_459_p2;
wire   [0:0] tmp_20_fu_471_p3;
wire   [62:0] r_V_6_fu_465_p2;
wire   [15:0] zext_ln818_fu_479_p1;
wire   [15:0] tmp_8_fu_483_p4;
wire   [15:0] result_V_12_fu_500_p2;
reg    grp_fu_203_ap_start;
wire    grp_fu_203_ap_done;
reg   [15:0] ap_return_0_preg;
reg   [15:0] ap_return_1_preg;
reg   [60:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 61'd1;
#0 ap_return_0_preg = 16'd0;
#0 ap_return_1_preg = 16'd0;
end

guitar_effects_fdiv_32ns_32ns_32_16_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_16_no_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_127),
    .din1(reg_134),
    .ce(1'b1),
    .dout(grp_fu_117_p2)
);

guitar_effects_sitofp_32s_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32s_32_6_no_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_121_p0),
    .ce(1'b1),
    .dout(grp_fu_121_p1)
);

guitar_effects_sitofp_32s_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32s_32_6_no_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_124_p0),
    .ce(1'b1),
    .dout(grp_fu_124_p1)
);

guitar_effects_sdiv_16ns_16s_16_20_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 20 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
sdiv_16ns_16s_16_20_seq_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_203_ap_start),
    .done(grp_fu_203_ap_done),
    .din0(min_threshold),
    .din1(current_level_read),
    .ce(1'b1),
    .dout(grp_fu_203_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state33)) begin
            ap_return_0_preg <= ap_phi_mux_output_2_phi_fu_103_p8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state33)) begin
            ap_return_1_preg <= current_level_read;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'd0 == and_ln137_1_fu_197_p2) & (icmp_ln128_fu_167_p2 == 1'd0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln129_fu_173_p2 == 1'd0) & (icmp_ln128_fu_167_p2 == 1'd1)))) begin
        output_2_reg_100 <= input_r;
    end else if (((1'b1 == ap_CS_fsm_state33) & (1'd1 == and_ln137_1_reg_537) & (icmp_ln128_reg_530 == 1'd0))) begin
        output_2_reg_100 <= result_V_17_fu_355_p3;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        output_2_reg_100 <= result_V_fu_505_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (icmp_ln128_fu_167_p2 == 1'd0))) begin
        and_ln137_1_reg_537 <= and_ln137_1_fu_197_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        compression_factor_reg_597 <= grp_fu_117_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln128_reg_530 <= icmp_ln128_fu_167_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        isNeg_3_reg_576 <= add_ln346_3_fu_257_p2[32'd8];
        p_Result_7_reg_566 <= data_V_3_fu_227_p1[32'd31];
        p_Result_8_reg_571 <= p_Result_8_fu_249_p1;
        ush_3_reg_581 <= ush_3_fu_281_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        isNeg_reg_612 <= add_ln346_fu_407_p2[32'd8];
        p_Result_6_reg_607 <= p_Result_6_fu_399_p1;
        p_Result_s_reg_602 <= data_V_fu_377_p1[32'd31];
        ush_reg_617 <= ush_fu_431_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state26))) begin
        reg_127 <= grp_fu_121_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state26))) begin
        reg_134 <= grp_fu_124_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state30))) begin
        reg_140 <= grp_fu_317_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        sdiv_ln139_reg_551 <= grp_fu_203_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        val_3_reg_586 <= val_3_fu_343_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        val_reg_622 <= val_fu_493_p3;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) & (1'd1 == and_ln137_1_reg_537) & (icmp_ln128_reg_530 == 1'd0))) begin
        ap_phi_mux_output_2_phi_fu_103_p8 = result_V_17_fu_355_p3;
    end else begin
        ap_phi_mux_output_2_phi_fu_103_p8 = output_2_reg_100;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        ap_return_0 = ap_phi_mux_output_2_phi_fu_103_p8;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        ap_return_1 = current_level_read;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        grp_fu_113_p0 = reg_127;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_113_p0 = reg_134;
    end else begin
        grp_fu_113_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        grp_fu_113_p1 = compression_factor_reg_597;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_113_p1 = reg_127;
    end else begin
        grp_fu_113_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        grp_fu_121_p0 = sext_ln132_fu_373_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_121_p0 = sext_ln139_fu_219_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_121_p0 = sext_ln131_fu_209_p1;
    end else begin
        grp_fu_121_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_124_p0 = sext_ln140_fu_223_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_124_p0 = sext_ln131_1_fu_214_p1;
    end else begin
        grp_fu_124_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'd1 == and_ln137_1_fu_197_p2) & (icmp_ln128_fu_167_p2 == 1'd0))) begin
        grp_fu_203_ap_start = 1'b1;
    end else begin
        grp_fu_203_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        values_buffer_ce0 = 1'b1;
    end else begin
        values_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        values_buffer_we0 = 1'b1;
    end else begin
        values_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln129_fu_173_p2 == 1'd1) & (icmp_ln128_fu_167_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (((1'd0 == and_ln137_1_fu_197_p2) & (icmp_ln128_fu_167_p2 == 1'd0)) | ((icmp_ln129_fu_173_p2 == 1'd0) & (icmp_ln128_fu_167_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'd1 == and_ln137_1_fu_197_p2) & (icmp_ln128_fu_167_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abs_in_1_fu_158_p2 = input_r;

assign abs_in_fu_152_p1 = input_r;

assign abs_in_fu_152_p2 = ($signed(16'd0) - $signed(abs_in_fu_152_p1));

assign add_ln346_3_fu_257_p2 = ($signed(zext_ln346_3_fu_253_p1) + $signed(9'd385));

assign add_ln346_fu_407_p2 = ($signed(zext_ln346_fu_403_p1) + $signed(9'd385));

assign and_ln137_1_fu_197_p2 = (icmp_ln137_fu_179_p2 & and_ln137_fu_191_p2);

assign and_ln137_fu_191_p2 = (icmp_ln137_1_fu_185_p2 & icmp_ln129_fu_173_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign data_V_3_fu_227_p1 = reg_140;

assign data_V_fu_377_p1 = reg_140;

assign grp_fu_317_p_ce = 1'b1;

assign grp_fu_317_p_din0 = grp_fu_113_p0;

assign grp_fu_317_p_din1 = grp_fu_113_p1;

assign icmp_ln128_fu_167_p0 = current_level_read;

assign icmp_ln128_fu_167_p1 = max_threshold;

assign icmp_ln128_fu_167_p2 = (($signed(icmp_ln128_fu_167_p0) > $signed(icmp_ln128_fu_167_p1)) ? 1'b1 : 1'b0);

assign icmp_ln129_fu_173_p0 = current_level_read;

assign icmp_ln129_fu_173_p2 = (($signed(icmp_ln129_fu_173_p0) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln137_1_fu_185_p0 = current_level_read;

assign icmp_ln137_1_fu_185_p2 = (($signed(icmp_ln137_1_fu_185_p0) > $signed(zero_threshold)) ? 1'b1 : 1'b0);

assign icmp_ln137_fu_179_p0 = current_level_read;

assign icmp_ln137_fu_179_p2 = (($signed(icmp_ln137_fu_179_p0) < $signed(min_threshold)) ? 1'b1 : 1'b0);

assign isNeg_3_fu_263_p3 = add_ln346_3_fu_257_p2[32'd8];

assign isNeg_fu_413_p3 = add_ln346_fu_407_p2[32'd8];

assign mantissa_3_fu_289_p4 = {{{{1'd1}, {p_Result_8_reg_571}}}, {1'd0}};

assign mantissa_fu_439_p4 = {{{{1'd1}, {p_Result_6_reg_607}}}, {1'd0}};

assign p_Result_6_fu_399_p1 = data_V_fu_377_p1[22:0];

assign p_Result_8_fu_249_p1 = data_V_3_fu_227_p1[22:0];

assign r_V_6_fu_465_p2 = zext_ln15_fu_448_p1 << zext_ln1488_fu_455_p1;

assign r_V_7_fu_309_p2 = zext_ln15_3_fu_298_p1 >> zext_ln1488_3_fu_305_p1;

assign r_V_8_fu_315_p2 = zext_ln15_3_fu_298_p1 << zext_ln1488_3_fu_305_p1;

assign r_V_fu_459_p2 = zext_ln15_fu_448_p1 >> zext_ln1488_fu_455_p1;

assign result_V_12_fu_500_p2 = (16'd0 - val_reg_622);

assign result_V_16_fu_350_p2 = (16'd0 - val_3_reg_586);

assign result_V_17_fu_355_p3 = ((p_Result_7_reg_566[0:0] == 1'b1) ? result_V_16_fu_350_p2 : val_3_reg_586);

assign result_V_fu_505_p3 = ((p_Result_s_reg_602[0:0] == 1'b1) ? result_V_12_fu_500_p2 : val_reg_622);

assign sext_ln131_1_fu_214_p0 = current_level_read;

assign sext_ln131_1_fu_214_p1 = sext_ln131_1_fu_214_p0;

assign sext_ln131_fu_209_p0 = max_threshold;

assign sext_ln131_fu_209_p1 = sext_ln131_fu_209_p0;

assign sext_ln132_fu_373_p0 = input_r;

assign sext_ln132_fu_373_p1 = sext_ln132_fu_373_p0;

assign sext_ln139_fu_219_p1 = $signed(sdiv_ln139_reg_551);

assign sext_ln140_fu_223_p0 = input_r;

assign sext_ln140_fu_223_p1 = sext_ln140_fu_223_p0;

assign sext_ln1488_3_fu_302_p1 = $signed(ush_3_reg_581);

assign sext_ln1488_fu_452_p1 = $signed(ush_reg_617);

assign sext_ln1512_3_fu_277_p1 = $signed(sub_ln1512_3_fu_271_p2);

assign sext_ln1512_fu_427_p1 = $signed(sub_ln1512_fu_421_p2);

assign sub_ln1512_3_fu_271_p2 = (8'd127 - xs_exp_V_3_fu_239_p4);

assign sub_ln1512_fu_421_p2 = (8'd127 - xs_exp_V_fu_389_p4);

assign tmp_20_fu_471_p3 = r_V_fu_459_p2[32'd24];

assign tmp_24_fu_321_p3 = r_V_7_fu_309_p2[32'd24];

assign tmp_8_fu_483_p4 = {{r_V_6_fu_465_p2[39:24]}};

assign tmp_fu_144_p1 = input_r;

assign tmp_fu_144_p3 = tmp_fu_144_p1[32'd15];

assign tmp_s_fu_333_p4 = {{r_V_8_fu_315_p2[39:24]}};

assign ush_3_fu_281_p3 = ((isNeg_3_fu_263_p3[0:0] == 1'b1) ? sext_ln1512_3_fu_277_p1 : add_ln346_3_fu_257_p2);

assign ush_fu_431_p3 = ((isNeg_fu_413_p3[0:0] == 1'b1) ? sext_ln1512_fu_427_p1 : add_ln346_fu_407_p2);

assign val_3_fu_343_p3 = ((isNeg_3_reg_576[0:0] == 1'b1) ? zext_ln818_3_fu_329_p1 : tmp_s_fu_333_p4);

assign val_fu_493_p3 = ((isNeg_reg_612[0:0] == 1'b1) ? zext_ln818_fu_479_p1 : tmp_8_fu_483_p4);

assign values_buffer_address0 = 64'd0;

assign values_buffer_d0 = ((tmp_fu_144_p3[0:0] == 1'b1) ? abs_in_fu_152_p2 : abs_in_1_fu_158_p2);

assign xs_exp_V_3_fu_239_p4 = {{data_V_3_fu_227_p1[30:23]}};

assign xs_exp_V_fu_389_p4 = {{data_V_fu_377_p1[30:23]}};

assign zext_ln1488_3_fu_305_p1 = $unsigned(sext_ln1488_3_fu_302_p1);

assign zext_ln1488_fu_455_p1 = $unsigned(sext_ln1488_fu_452_p1);

assign zext_ln15_3_fu_298_p1 = mantissa_3_fu_289_p4;

assign zext_ln15_fu_448_p1 = mantissa_fu_439_p4;

assign zext_ln346_3_fu_253_p1 = xs_exp_V_3_fu_239_p4;

assign zext_ln346_fu_403_p1 = xs_exp_V_fu_389_p4;

assign zext_ln818_3_fu_329_p1 = tmp_24_fu_321_p3;

assign zext_ln818_fu_479_p1 = tmp_20_fu_471_p3;

endmodule //guitar_effects_compression
