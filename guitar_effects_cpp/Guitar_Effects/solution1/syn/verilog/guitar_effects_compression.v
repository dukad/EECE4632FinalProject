// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module guitar_effects_compression (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r,
        min_threshold,
        max_threshold,
        zero_threshold,
        current_level_read,
        values_buffer_address0,
        values_buffer_ce0,
        values_buffer_we0,
        values_buffer_d0,
        current_sample,
        ap_return_0,
        ap_return_1,
        grp_fu_633_p_din0,
        grp_fu_633_p_din1,
        grp_fu_633_p_dout0,
        grp_fu_633_p_ce,
        grp_fu_637_p_din0,
        grp_fu_637_p_dout0,
        grp_fu_637_p_ce
);

parameter    ap_ST_fsm_state1 = 97'd1;
parameter    ap_ST_fsm_state2 = 97'd2;
parameter    ap_ST_fsm_state3 = 97'd4;
parameter    ap_ST_fsm_state4 = 97'd8;
parameter    ap_ST_fsm_state5 = 97'd16;
parameter    ap_ST_fsm_state6 = 97'd32;
parameter    ap_ST_fsm_state7 = 97'd64;
parameter    ap_ST_fsm_state8 = 97'd128;
parameter    ap_ST_fsm_state9 = 97'd256;
parameter    ap_ST_fsm_state10 = 97'd512;
parameter    ap_ST_fsm_state11 = 97'd1024;
parameter    ap_ST_fsm_state12 = 97'd2048;
parameter    ap_ST_fsm_state13 = 97'd4096;
parameter    ap_ST_fsm_state14 = 97'd8192;
parameter    ap_ST_fsm_state15 = 97'd16384;
parameter    ap_ST_fsm_state16 = 97'd32768;
parameter    ap_ST_fsm_state17 = 97'd65536;
parameter    ap_ST_fsm_state18 = 97'd131072;
parameter    ap_ST_fsm_state19 = 97'd262144;
parameter    ap_ST_fsm_state20 = 97'd524288;
parameter    ap_ST_fsm_state21 = 97'd1048576;
parameter    ap_ST_fsm_state22 = 97'd2097152;
parameter    ap_ST_fsm_state23 = 97'd4194304;
parameter    ap_ST_fsm_state24 = 97'd8388608;
parameter    ap_ST_fsm_state25 = 97'd16777216;
parameter    ap_ST_fsm_state26 = 97'd33554432;
parameter    ap_ST_fsm_state27 = 97'd67108864;
parameter    ap_ST_fsm_state28 = 97'd134217728;
parameter    ap_ST_fsm_state29 = 97'd268435456;
parameter    ap_ST_fsm_state30 = 97'd536870912;
parameter    ap_ST_fsm_state31 = 97'd1073741824;
parameter    ap_ST_fsm_state32 = 97'd2147483648;
parameter    ap_ST_fsm_state33 = 97'd4294967296;
parameter    ap_ST_fsm_state34 = 97'd8589934592;
parameter    ap_ST_fsm_state35 = 97'd17179869184;
parameter    ap_ST_fsm_state36 = 97'd34359738368;
parameter    ap_ST_fsm_state37 = 97'd68719476736;
parameter    ap_ST_fsm_state38 = 97'd137438953472;
parameter    ap_ST_fsm_state39 = 97'd274877906944;
parameter    ap_ST_fsm_state40 = 97'd549755813888;
parameter    ap_ST_fsm_state41 = 97'd1099511627776;
parameter    ap_ST_fsm_state42 = 97'd2199023255552;
parameter    ap_ST_fsm_state43 = 97'd4398046511104;
parameter    ap_ST_fsm_state44 = 97'd8796093022208;
parameter    ap_ST_fsm_state45 = 97'd17592186044416;
parameter    ap_ST_fsm_state46 = 97'd35184372088832;
parameter    ap_ST_fsm_state47 = 97'd70368744177664;
parameter    ap_ST_fsm_state48 = 97'd140737488355328;
parameter    ap_ST_fsm_state49 = 97'd281474976710656;
parameter    ap_ST_fsm_state50 = 97'd562949953421312;
parameter    ap_ST_fsm_state51 = 97'd1125899906842624;
parameter    ap_ST_fsm_state52 = 97'd2251799813685248;
parameter    ap_ST_fsm_state53 = 97'd4503599627370496;
parameter    ap_ST_fsm_state54 = 97'd9007199254740992;
parameter    ap_ST_fsm_state55 = 97'd18014398509481984;
parameter    ap_ST_fsm_state56 = 97'd36028797018963968;
parameter    ap_ST_fsm_state57 = 97'd72057594037927936;
parameter    ap_ST_fsm_state58 = 97'd144115188075855872;
parameter    ap_ST_fsm_state59 = 97'd288230376151711744;
parameter    ap_ST_fsm_state60 = 97'd576460752303423488;
parameter    ap_ST_fsm_state61 = 97'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 97'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 97'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 97'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 97'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 97'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 97'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 97'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 97'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 97'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 97'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 97'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 97'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 97'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 97'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 97'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 97'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 97'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 97'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 97'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 97'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 97'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 97'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 97'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 97'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 97'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 97'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 97'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 97'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 97'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 97'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 97'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 97'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 97'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 97'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 97'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 97'd79228162514264337593543950336;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] input_r;
input  [31:0] min_threshold;
input  [31:0] max_threshold;
input  [31:0] zero_threshold;
input  [31:0] current_level_read;
output  [8:0] values_buffer_address0;
output   values_buffer_ce0;
output   values_buffer_we0;
output  [31:0] values_buffer_d0;
input  [31:0] current_sample;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] grp_fu_633_p_din0;
output  [31:0] grp_fu_633_p_din1;
input  [31:0] grp_fu_633_p_dout0;
output   grp_fu_633_p_ce;
output  [31:0] grp_fu_637_p_din0;
input  [31:0] grp_fu_637_p_dout0;
output   grp_fu_637_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg values_buffer_ce0;
reg values_buffer_we0;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;

(* fsm_encoding = "none" *) reg   [96:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_129;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state91;
wire   [31:0] grp_fu_126_p1;
reg   [31:0] reg_134;
reg   [31:0] reg_139;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state95;
wire   [0:0] icmp_ln165_fu_143_p2;
reg   [0:0] icmp_ln165_reg_508;
wire    ap_CS_fsm_state2;
wire   [31:0] select_ln165_fu_172_p3;
reg   [31:0] select_ln165_reg_530;
wire   [0:0] icmp_ln173_fu_179_p2;
reg   [0:0] icmp_ln173_reg_537;
wire   [0:0] icmp_ln174_fu_185_p2;
reg   [0:0] icmp_ln174_reg_541;
wire   [0:0] and_ln182_1_fu_209_p2;
reg   [0:0] and_ln182_1_reg_545;
wire   [31:0] grp_fu_215_p2;
reg   [31:0] sdiv_ln184_reg_549;
wire    ap_CS_fsm_state37;
reg   [0:0] p_Result_40_reg_554;
wire    ap_CS_fsm_state48;
wire   [22:0] p_Result_41_fu_249_p1;
reg   [22:0] p_Result_41_reg_559;
wire   [0:0] isNeg_3_fu_263_p3;
reg   [0:0] isNeg_3_reg_564;
wire   [8:0] ush_3_fu_281_p3;
reg   [8:0] ush_3_reg_569;
wire   [31:0] val_2_fu_343_p3;
reg   [31:0] val_2_reg_574;
wire    ap_CS_fsm_state49;
wire   [31:0] grp_fu_221_p2;
reg   [31:0] sdiv_ln176_reg_580;
wire    ap_CS_fsm_state85;
reg   [0:0] p_Result_s_reg_585;
wire    ap_CS_fsm_state96;
wire   [22:0] p_Result_39_fu_407_p1;
reg   [22:0] p_Result_39_reg_590;
wire   [0:0] isNeg_fu_421_p3;
reg   [0:0] isNeg_reg_595;
wire   [8:0] ush_fu_439_p3;
reg   [8:0] ush_reg_600;
wire   [31:0] val_fu_501_p3;
reg   [31:0] val_reg_605;
wire    ap_CS_fsm_state97;
wire   [31:0] result_V_fu_367_p3;
reg   [31:0] ap_phi_mux_output_2_phi_fu_109_p8;
reg   [31:0] output_2_reg_106;
wire    ap_CS_fsm_state50;
wire   [31:0] result_V_15_fu_355_p3;
reg   [31:0] grp_fu_123_p0;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state86;
wire   [0:0] tmp_fu_149_p3;
wire   [31:0] sub_ln151_fu_157_p2;
wire   [0:0] icmp_ln182_1_fu_197_p2;
wire   [0:0] and_ln182_fu_203_p2;
wire   [0:0] icmp_ln182_fu_191_p2;
wire   [31:0] data_V_2_fu_227_p1;
wire   [7:0] xs_exp_V_2_fu_239_p4;
wire   [8:0] zext_ln346_1_fu_253_p1;
wire   [8:0] add_ln346_1_fu_257_p2;
wire   [7:0] sub_ln1512_3_fu_271_p2;
wire  signed [8:0] sext_ln1512_2_fu_277_p1;
wire   [24:0] mantissa_2_fu_289_p4;
wire  signed [31:0] sext_ln1488_2_fu_302_p1;
wire   [78:0] zext_ln15_2_fu_298_p1;
wire   [78:0] zext_ln1488_3_fu_305_p1;
wire   [78:0] r_V_37_fu_309_p2;
wire   [0:0] tmp_30_fu_321_p3;
wire   [78:0] r_V_38_fu_315_p2;
wire   [31:0] zext_ln818_2_fu_329_p1;
wire   [31:0] tmp_3_fu_333_p4;
wire   [31:0] result_V_14_fu_350_p2;
wire   [31:0] result_V_11_fu_362_p2;
wire   [31:0] data_V_fu_385_p1;
wire   [7:0] xs_exp_V_fu_397_p4;
wire   [8:0] zext_ln346_fu_411_p1;
wire   [8:0] add_ln346_fu_415_p2;
wire   [7:0] sub_ln1512_fu_429_p2;
wire  signed [8:0] sext_ln1512_fu_435_p1;
wire   [24:0] mantissa_fu_447_p4;
wire  signed [31:0] sext_ln1488_fu_460_p1;
wire   [78:0] zext_ln15_fu_456_p1;
wire   [78:0] zext_ln1488_fu_463_p1;
wire   [78:0] r_V_fu_467_p2;
wire   [0:0] tmp_26_fu_479_p3;
wire   [78:0] r_V_36_fu_473_p2;
wire   [31:0] zext_ln818_fu_487_p1;
wire   [31:0] tmp_s_fu_491_p4;
reg    grp_fu_215_ap_start;
wire    grp_fu_215_ap_done;
reg    grp_fu_221_ap_start;
wire    grp_fu_221_ap_done;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [96:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
wire    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
wire    ap_ST_fsm_state80_blk;
wire    ap_ST_fsm_state81_blk;
wire    ap_ST_fsm_state82_blk;
wire    ap_ST_fsm_state83_blk;
wire    ap_ST_fsm_state84_blk;
wire    ap_ST_fsm_state85_blk;
wire    ap_ST_fsm_state86_blk;
wire    ap_ST_fsm_state87_blk;
wire    ap_ST_fsm_state88_blk;
wire    ap_ST_fsm_state89_blk;
wire    ap_ST_fsm_state90_blk;
wire    ap_ST_fsm_state91_blk;
wire    ap_ST_fsm_state92_blk;
wire    ap_ST_fsm_state93_blk;
wire    ap_ST_fsm_state94_blk;
wire    ap_ST_fsm_state95_blk;
wire    ap_ST_fsm_state96_blk;
wire    ap_ST_fsm_state97_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 97'd1;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
end

guitar_effects_sitofp_32ns_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32ns_32_6_no_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_r),
    .ce(1'b1),
    .dout(grp_fu_126_p1)
);

guitar_effects_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_215_ap_start),
    .done(grp_fu_215_ap_done),
    .din0(min_threshold),
    .din1(select_ln165_fu_172_p3),
    .ce(1'b1),
    .dout(grp_fu_215_p2)
);

guitar_effects_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_221_ap_start),
    .done(grp_fu_221_ap_done),
    .din0(max_threshold),
    .din1(select_ln165_fu_172_p3),
    .ce(1'b1),
    .dout(grp_fu_221_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state50)) begin
            ap_return_0_preg <= ap_phi_mux_output_2_phi_fu_109_p8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state50)) begin
            ap_return_1_preg <= select_ln165_reg_530;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (1'd0 == and_ln182_1_fu_209_p2) & (icmp_ln173_fu_179_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln174_fu_185_p2 == 1'd0) & (icmp_ln173_fu_179_p2 == 1'd1)))) begin
        output_2_reg_106 <= input_r;
    end else if (((1'd1 == and_ln182_1_reg_545) & (1'b1 == ap_CS_fsm_state50) & (icmp_ln173_reg_537 == 1'd0))) begin
        output_2_reg_106 <= result_V_15_fu_355_p3;
    end else if (((1'b1 == ap_CS_fsm_state50) & (icmp_ln174_reg_541 == 1'd1) & (icmp_ln173_reg_537 == 1'd1))) begin
        output_2_reg_106 <= result_V_fu_367_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln173_fu_179_p2 == 1'd0))) begin
        and_ln182_1_reg_545 <= and_ln182_1_fu_209_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln165_reg_508 <= icmp_ln165_fu_143_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln173_reg_537 <= icmp_ln173_fu_179_p2;
        icmp_ln174_reg_541 <= icmp_ln174_fu_185_p2;
        select_ln165_reg_530 <= select_ln165_fu_172_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        isNeg_3_reg_564 <= add_ln346_1_fu_257_p2[32'd8];
        p_Result_40_reg_554 <= data_V_2_fu_227_p1[32'd31];
        p_Result_41_reg_559 <= p_Result_41_fu_249_p1;
        ush_3_reg_569 <= ush_3_fu_281_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        isNeg_reg_595 <= add_ln346_fu_415_p2[32'd8];
        p_Result_39_reg_590 <= p_Result_39_fu_407_p1;
        p_Result_s_reg_585 <= data_V_fu_385_p1[32'd31];
        ush_reg_600 <= ush_fu_439_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state43))) begin
        reg_129 <= grp_fu_637_p_dout0;
        reg_134 <= grp_fu_126_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state47))) begin
        reg_139 <= grp_fu_633_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        sdiv_ln176_reg_580 <= grp_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        sdiv_ln184_reg_549 <= grp_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        val_2_reg_574 <= val_2_fu_343_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        val_reg_605 <= val_fu_501_p3;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

assign ap_ST_fsm_state75_blk = 1'b0;

assign ap_ST_fsm_state76_blk = 1'b0;

assign ap_ST_fsm_state77_blk = 1'b0;

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state80_blk = 1'b0;

assign ap_ST_fsm_state81_blk = 1'b0;

assign ap_ST_fsm_state82_blk = 1'b0;

assign ap_ST_fsm_state83_blk = 1'b0;

assign ap_ST_fsm_state84_blk = 1'b0;

assign ap_ST_fsm_state85_blk = 1'b0;

assign ap_ST_fsm_state86_blk = 1'b0;

assign ap_ST_fsm_state87_blk = 1'b0;

assign ap_ST_fsm_state88_blk = 1'b0;

assign ap_ST_fsm_state89_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state90_blk = 1'b0;

assign ap_ST_fsm_state91_blk = 1'b0;

assign ap_ST_fsm_state92_blk = 1'b0;

assign ap_ST_fsm_state93_blk = 1'b0;

assign ap_ST_fsm_state94_blk = 1'b0;

assign ap_ST_fsm_state95_blk = 1'b0;

assign ap_ST_fsm_state96_blk = 1'b0;

assign ap_ST_fsm_state97_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        if (((1'd1 == and_ln182_1_reg_545) & (icmp_ln173_reg_537 == 1'd0))) begin
            ap_phi_mux_output_2_phi_fu_109_p8 = result_V_15_fu_355_p3;
        end else if (((icmp_ln174_reg_541 == 1'd1) & (icmp_ln173_reg_537 == 1'd1))) begin
            ap_phi_mux_output_2_phi_fu_109_p8 = result_V_fu_367_p3;
        end else begin
            ap_phi_mux_output_2_phi_fu_109_p8 = output_2_reg_106;
        end
    end else begin
        ap_phi_mux_output_2_phi_fu_109_p8 = output_2_reg_106;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        ap_return_0 = ap_phi_mux_output_2_phi_fu_109_p8;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        ap_return_1 = select_ln165_reg_530;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        grp_fu_123_p0 = sdiv_ln176_reg_580;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_123_p0 = sdiv_ln184_reg_549;
    end else begin
        grp_fu_123_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln182_1_fu_209_p2) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln173_fu_179_p2 == 1'd0))) begin
        grp_fu_215_ap_start = 1'b1;
    end else begin
        grp_fu_215_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln174_fu_185_p2 == 1'd1) & (icmp_ln173_fu_179_p2 == 1'd1))) begin
        grp_fu_221_ap_start = 1'b1;
    end else begin
        grp_fu_221_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        values_buffer_ce0 = 1'b1;
    end else begin
        values_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        values_buffer_we0 = 1'b1;
    end else begin
        values_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln174_fu_185_p2 == 1'd1) & (icmp_ln173_fu_179_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else if (((1'b1 == ap_CS_fsm_state2) & (((1'd0 == and_ln182_1_fu_209_p2) & (icmp_ln173_fu_179_p2 == 1'd0)) | ((icmp_ln174_fu_185_p2 == 1'd0) & (icmp_ln173_fu_179_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln346_1_fu_257_p2 = ($signed(zext_ln346_1_fu_253_p1) + $signed(9'd385));

assign add_ln346_fu_415_p2 = ($signed(zext_ln346_fu_411_p1) + $signed(9'd385));

assign and_ln182_1_fu_209_p2 = (icmp_ln182_fu_191_p2 & and_ln182_fu_203_p2);

assign and_ln182_fu_203_p2 = (icmp_ln182_1_fu_197_p2 & icmp_ln174_fu_185_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign data_V_2_fu_227_p1 = reg_139;

assign data_V_fu_385_p1 = reg_139;

assign grp_fu_633_p_ce = 1'b1;

assign grp_fu_633_p_din0 = reg_134;

assign grp_fu_633_p_din1 = reg_129;

assign grp_fu_637_p_ce = 1'b1;

assign grp_fu_637_p_din0 = grp_fu_123_p0;

assign icmp_ln165_fu_143_p2 = (($signed(current_sample) < $signed(32'd441)) ? 1'b1 : 1'b0);

assign icmp_ln173_fu_179_p2 = (($signed(select_ln165_fu_172_p3) > $signed(max_threshold)) ? 1'b1 : 1'b0);

assign icmp_ln174_fu_185_p2 = (($signed(select_ln165_fu_172_p3) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln182_1_fu_197_p2 = (($signed(select_ln165_fu_172_p3) > $signed(zero_threshold)) ? 1'b1 : 1'b0);

assign icmp_ln182_fu_191_p2 = (($signed(select_ln165_fu_172_p3) < $signed(min_threshold)) ? 1'b1 : 1'b0);

assign isNeg_3_fu_263_p3 = add_ln346_1_fu_257_p2[32'd8];

assign isNeg_fu_421_p3 = add_ln346_fu_415_p2[32'd8];

assign mantissa_2_fu_289_p4 = {{{{1'd1}, {p_Result_41_reg_559}}}, {1'd0}};

assign mantissa_fu_447_p4 = {{{{1'd1}, {p_Result_39_reg_590}}}, {1'd0}};

assign p_Result_39_fu_407_p1 = data_V_fu_385_p1[22:0];

assign p_Result_41_fu_249_p1 = data_V_2_fu_227_p1[22:0];

assign r_V_36_fu_473_p2 = zext_ln15_fu_456_p1 << zext_ln1488_fu_463_p1;

assign r_V_37_fu_309_p2 = zext_ln15_2_fu_298_p1 >> zext_ln1488_3_fu_305_p1;

assign r_V_38_fu_315_p2 = zext_ln15_2_fu_298_p1 << zext_ln1488_3_fu_305_p1;

assign r_V_fu_467_p2 = zext_ln15_fu_456_p1 >> zext_ln1488_fu_463_p1;

assign result_V_11_fu_362_p2 = (32'd0 - val_reg_605);

assign result_V_14_fu_350_p2 = (32'd0 - val_2_reg_574);

assign result_V_15_fu_355_p3 = ((p_Result_40_reg_554[0:0] == 1'b1) ? result_V_14_fu_350_p2 : val_2_reg_574);

assign result_V_fu_367_p3 = ((p_Result_s_reg_585[0:0] == 1'b1) ? result_V_11_fu_362_p2 : val_reg_605);

assign select_ln165_fu_172_p3 = ((icmp_ln165_reg_508[0:0] == 1'b1) ? min_threshold : current_level_read);

assign sext_ln1488_2_fu_302_p1 = $signed(ush_3_reg_569);

assign sext_ln1488_fu_460_p1 = $signed(ush_reg_600);

assign sext_ln1512_2_fu_277_p1 = $signed(sub_ln1512_3_fu_271_p2);

assign sext_ln1512_fu_435_p1 = $signed(sub_ln1512_fu_429_p2);

assign sub_ln1512_3_fu_271_p2 = (8'd127 - xs_exp_V_2_fu_239_p4);

assign sub_ln1512_fu_429_p2 = (8'd127 - xs_exp_V_fu_397_p4);

assign sub_ln151_fu_157_p2 = (32'd0 - input_r);

assign tmp_26_fu_479_p3 = r_V_fu_467_p2[32'd24];

assign tmp_30_fu_321_p3 = r_V_37_fu_309_p2[32'd24];

assign tmp_3_fu_333_p4 = {{r_V_38_fu_315_p2[55:24]}};

assign tmp_fu_149_p3 = input_r[32'd31];

assign tmp_s_fu_491_p4 = {{r_V_36_fu_473_p2[55:24]}};

assign ush_3_fu_281_p3 = ((isNeg_3_fu_263_p3[0:0] == 1'b1) ? sext_ln1512_2_fu_277_p1 : add_ln346_1_fu_257_p2);

assign ush_fu_439_p3 = ((isNeg_fu_421_p3[0:0] == 1'b1) ? sext_ln1512_fu_435_p1 : add_ln346_fu_415_p2);

assign val_2_fu_343_p3 = ((isNeg_3_reg_564[0:0] == 1'b1) ? zext_ln818_2_fu_329_p1 : tmp_3_fu_333_p4);

assign val_fu_501_p3 = ((isNeg_reg_595[0:0] == 1'b1) ? zext_ln818_fu_487_p1 : tmp_s_fu_491_p4);

assign values_buffer_address0 = 64'd0;

assign values_buffer_d0 = ((tmp_fu_149_p3[0:0] == 1'b1) ? sub_ln151_fu_157_p2 : input_r);

assign xs_exp_V_2_fu_239_p4 = {{data_V_2_fu_227_p1[30:23]}};

assign xs_exp_V_fu_397_p4 = {{data_V_fu_385_p1[30:23]}};

assign zext_ln1488_3_fu_305_p1 = $unsigned(sext_ln1488_2_fu_302_p1);

assign zext_ln1488_fu_463_p1 = $unsigned(sext_ln1488_fu_460_p1);

assign zext_ln15_2_fu_298_p1 = mantissa_2_fu_289_p4;

assign zext_ln15_fu_456_p1 = mantissa_fu_447_p4;

assign zext_ln346_1_fu_253_p1 = xs_exp_V_2_fu_239_p4;

assign zext_ln346_fu_411_p1 = xs_exp_V_fu_397_p4;

assign zext_ln818_2_fu_329_p1 = tmp_30_fu_321_p3;

assign zext_ln818_fu_487_p1 = tmp_26_fu_479_p3;

endmodule //guitar_effects_compression
