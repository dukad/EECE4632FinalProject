// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="guitar_effects_guitar_effects,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=15.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.950000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=267,HLS_SYN_DSP=0,HLS_SYN_FF=10454,HLS_SYN_LUT=18531,HLS_VERSION=2022_1}" *)

module guitar_effects (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        INPUT_r_TDATA,
        INPUT_r_TVALID,
        INPUT_r_TREADY,
        INPUT_r_TKEEP,
        INPUT_r_TSTRB,
        INPUT_r_TUSER,
        INPUT_r_TLAST,
        INPUT_r_TID,
        INPUT_r_TDEST,
        OUTPUT_r_TDATA,
        OUTPUT_r_TVALID,
        OUTPUT_r_TREADY,
        OUTPUT_r_TKEEP,
        OUTPUT_r_TSTRB,
        OUTPUT_r_TUSER,
        OUTPUT_r_TLAST,
        OUTPUT_r_TID,
        OUTPUT_r_TDEST,
        s_axi_control_r_AWVALID,
        s_axi_control_r_AWREADY,
        s_axi_control_r_AWADDR,
        s_axi_control_r_WVALID,
        s_axi_control_r_WREADY,
        s_axi_control_r_WDATA,
        s_axi_control_r_WSTRB,
        s_axi_control_r_ARVALID,
        s_axi_control_r_ARREADY,
        s_axi_control_r_ARADDR,
        s_axi_control_r_RVALID,
        s_axi_control_r_RREADY,
        s_axi_control_r_RDATA,
        s_axi_control_r_RRESP,
        s_axi_control_r_BVALID,
        s_axi_control_r_BREADY,
        s_axi_control_r_BRESP
);

parameter    ap_ST_fsm_state1 = 252'd1;
parameter    ap_ST_fsm_state2 = 252'd2;
parameter    ap_ST_fsm_state3 = 252'd4;
parameter    ap_ST_fsm_state4 = 252'd8;
parameter    ap_ST_fsm_state5 = 252'd16;
parameter    ap_ST_fsm_state6 = 252'd32;
parameter    ap_ST_fsm_state7 = 252'd64;
parameter    ap_ST_fsm_state8 = 252'd128;
parameter    ap_ST_fsm_state9 = 252'd256;
parameter    ap_ST_fsm_state10 = 252'd512;
parameter    ap_ST_fsm_state11 = 252'd1024;
parameter    ap_ST_fsm_state12 = 252'd2048;
parameter    ap_ST_fsm_state13 = 252'd4096;
parameter    ap_ST_fsm_state14 = 252'd8192;
parameter    ap_ST_fsm_state15 = 252'd16384;
parameter    ap_ST_fsm_state16 = 252'd32768;
parameter    ap_ST_fsm_state17 = 252'd65536;
parameter    ap_ST_fsm_state18 = 252'd131072;
parameter    ap_ST_fsm_state19 = 252'd262144;
parameter    ap_ST_fsm_state20 = 252'd524288;
parameter    ap_ST_fsm_state21 = 252'd1048576;
parameter    ap_ST_fsm_state22 = 252'd2097152;
parameter    ap_ST_fsm_state23 = 252'd4194304;
parameter    ap_ST_fsm_state24 = 252'd8388608;
parameter    ap_ST_fsm_state25 = 252'd16777216;
parameter    ap_ST_fsm_state26 = 252'd33554432;
parameter    ap_ST_fsm_state27 = 252'd67108864;
parameter    ap_ST_fsm_state28 = 252'd134217728;
parameter    ap_ST_fsm_state29 = 252'd268435456;
parameter    ap_ST_fsm_state30 = 252'd536870912;
parameter    ap_ST_fsm_state31 = 252'd1073741824;
parameter    ap_ST_fsm_state32 = 252'd2147483648;
parameter    ap_ST_fsm_state33 = 252'd4294967296;
parameter    ap_ST_fsm_state34 = 252'd8589934592;
parameter    ap_ST_fsm_state35 = 252'd17179869184;
parameter    ap_ST_fsm_state36 = 252'd34359738368;
parameter    ap_ST_fsm_state37 = 252'd68719476736;
parameter    ap_ST_fsm_state38 = 252'd137438953472;
parameter    ap_ST_fsm_state39 = 252'd274877906944;
parameter    ap_ST_fsm_state40 = 252'd549755813888;
parameter    ap_ST_fsm_state41 = 252'd1099511627776;
parameter    ap_ST_fsm_state42 = 252'd2199023255552;
parameter    ap_ST_fsm_state43 = 252'd4398046511104;
parameter    ap_ST_fsm_state44 = 252'd8796093022208;
parameter    ap_ST_fsm_state45 = 252'd17592186044416;
parameter    ap_ST_fsm_state46 = 252'd35184372088832;
parameter    ap_ST_fsm_state47 = 252'd70368744177664;
parameter    ap_ST_fsm_state48 = 252'd140737488355328;
parameter    ap_ST_fsm_state49 = 252'd281474976710656;
parameter    ap_ST_fsm_state50 = 252'd562949953421312;
parameter    ap_ST_fsm_state51 = 252'd1125899906842624;
parameter    ap_ST_fsm_state52 = 252'd2251799813685248;
parameter    ap_ST_fsm_state53 = 252'd4503599627370496;
parameter    ap_ST_fsm_state54 = 252'd9007199254740992;
parameter    ap_ST_fsm_state55 = 252'd18014398509481984;
parameter    ap_ST_fsm_state56 = 252'd36028797018963968;
parameter    ap_ST_fsm_state57 = 252'd72057594037927936;
parameter    ap_ST_fsm_state58 = 252'd144115188075855872;
parameter    ap_ST_fsm_state59 = 252'd288230376151711744;
parameter    ap_ST_fsm_state60 = 252'd576460752303423488;
parameter    ap_ST_fsm_state61 = 252'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 252'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 252'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 252'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 252'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 252'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 252'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 252'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 252'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 252'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 252'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 252'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 252'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 252'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 252'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 252'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 252'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 252'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 252'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 252'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 252'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 252'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 252'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 252'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 252'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 252'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 252'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 252'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 252'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 252'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 252'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 252'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 252'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 252'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 252'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 252'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 252'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 252'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 252'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 252'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 252'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 252'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 252'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 252'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 252'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 252'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 252'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 252'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 252'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 252'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 252'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 252'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 252'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 252'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 252'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 252'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 252'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 252'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 252'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 252'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 252'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 252'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 252'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 252'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 252'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 252'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 252'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 252'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 252'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 252'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 252'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 252'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 252'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 252'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 252'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 252'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 252'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 252'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 252'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 252'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 252'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 252'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 252'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 252'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state145 = 252'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state146 = 252'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state147 = 252'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state148 = 252'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state149 = 252'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state150 = 252'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state151 = 252'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state152 = 252'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state153 = 252'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state154 = 252'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state155 = 252'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state156 = 252'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state157 = 252'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state158 = 252'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state159 = 252'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_state160 = 252'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state161 = 252'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state162 = 252'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_state163 = 252'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state164 = 252'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_state165 = 252'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_state166 = 252'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_state167 = 252'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_state168 = 252'd187072209578355573530071658587684226515959365500928;
parameter    ap_ST_fsm_state169 = 252'd374144419156711147060143317175368453031918731001856;
parameter    ap_ST_fsm_state170 = 252'd748288838313422294120286634350736906063837462003712;
parameter    ap_ST_fsm_state171 = 252'd1496577676626844588240573268701473812127674924007424;
parameter    ap_ST_fsm_state172 = 252'd2993155353253689176481146537402947624255349848014848;
parameter    ap_ST_fsm_state173 = 252'd5986310706507378352962293074805895248510699696029696;
parameter    ap_ST_fsm_state174 = 252'd11972621413014756705924586149611790497021399392059392;
parameter    ap_ST_fsm_state175 = 252'd23945242826029513411849172299223580994042798784118784;
parameter    ap_ST_fsm_state176 = 252'd47890485652059026823698344598447161988085597568237568;
parameter    ap_ST_fsm_state177 = 252'd95780971304118053647396689196894323976171195136475136;
parameter    ap_ST_fsm_state178 = 252'd191561942608236107294793378393788647952342390272950272;
parameter    ap_ST_fsm_state179 = 252'd383123885216472214589586756787577295904684780545900544;
parameter    ap_ST_fsm_state180 = 252'd766247770432944429179173513575154591809369561091801088;
parameter    ap_ST_fsm_state181 = 252'd1532495540865888858358347027150309183618739122183602176;
parameter    ap_ST_fsm_state182 = 252'd3064991081731777716716694054300618367237478244367204352;
parameter    ap_ST_fsm_state183 = 252'd6129982163463555433433388108601236734474956488734408704;
parameter    ap_ST_fsm_state184 = 252'd12259964326927110866866776217202473468949912977468817408;
parameter    ap_ST_fsm_state185 = 252'd24519928653854221733733552434404946937899825954937634816;
parameter    ap_ST_fsm_state186 = 252'd49039857307708443467467104868809893875799651909875269632;
parameter    ap_ST_fsm_state187 = 252'd98079714615416886934934209737619787751599303819750539264;
parameter    ap_ST_fsm_state188 = 252'd196159429230833773869868419475239575503198607639501078528;
parameter    ap_ST_fsm_state189 = 252'd392318858461667547739736838950479151006397215279002157056;
parameter    ap_ST_fsm_state190 = 252'd784637716923335095479473677900958302012794430558004314112;
parameter    ap_ST_fsm_state191 = 252'd1569275433846670190958947355801916604025588861116008628224;
parameter    ap_ST_fsm_state192 = 252'd3138550867693340381917894711603833208051177722232017256448;
parameter    ap_ST_fsm_state193 = 252'd6277101735386680763835789423207666416102355444464034512896;
parameter    ap_ST_fsm_state194 = 252'd12554203470773361527671578846415332832204710888928069025792;
parameter    ap_ST_fsm_state195 = 252'd25108406941546723055343157692830665664409421777856138051584;
parameter    ap_ST_fsm_state196 = 252'd50216813883093446110686315385661331328818843555712276103168;
parameter    ap_ST_fsm_state197 = 252'd100433627766186892221372630771322662657637687111424552206336;
parameter    ap_ST_fsm_state198 = 252'd200867255532373784442745261542645325315275374222849104412672;
parameter    ap_ST_fsm_state199 = 252'd401734511064747568885490523085290650630550748445698208825344;
parameter    ap_ST_fsm_state200 = 252'd803469022129495137770981046170581301261101496891396417650688;
parameter    ap_ST_fsm_state201 = 252'd1606938044258990275541962092341162602522202993782792835301376;
parameter    ap_ST_fsm_state202 = 252'd3213876088517980551083924184682325205044405987565585670602752;
parameter    ap_ST_fsm_state203 = 252'd6427752177035961102167848369364650410088811975131171341205504;
parameter    ap_ST_fsm_state204 = 252'd12855504354071922204335696738729300820177623950262342682411008;
parameter    ap_ST_fsm_state205 = 252'd25711008708143844408671393477458601640355247900524685364822016;
parameter    ap_ST_fsm_state206 = 252'd51422017416287688817342786954917203280710495801049370729644032;
parameter    ap_ST_fsm_state207 = 252'd102844034832575377634685573909834406561420991602098741459288064;
parameter    ap_ST_fsm_state208 = 252'd205688069665150755269371147819668813122841983204197482918576128;
parameter    ap_ST_fsm_state209 = 252'd411376139330301510538742295639337626245683966408394965837152256;
parameter    ap_ST_fsm_state210 = 252'd822752278660603021077484591278675252491367932816789931674304512;
parameter    ap_ST_fsm_state211 = 252'd1645504557321206042154969182557350504982735865633579863348609024;
parameter    ap_ST_fsm_state212 = 252'd3291009114642412084309938365114701009965471731267159726697218048;
parameter    ap_ST_fsm_state213 = 252'd6582018229284824168619876730229402019930943462534319453394436096;
parameter    ap_ST_fsm_state214 = 252'd13164036458569648337239753460458804039861886925068638906788872192;
parameter    ap_ST_fsm_state215 = 252'd26328072917139296674479506920917608079723773850137277813577744384;
parameter    ap_ST_fsm_state216 = 252'd52656145834278593348959013841835216159447547700274555627155488768;
parameter    ap_ST_fsm_state217 = 252'd105312291668557186697918027683670432318895095400549111254310977536;
parameter    ap_ST_fsm_state218 = 252'd210624583337114373395836055367340864637790190801098222508621955072;
parameter    ap_ST_fsm_state219 = 252'd421249166674228746791672110734681729275580381602196445017243910144;
parameter    ap_ST_fsm_state220 = 252'd842498333348457493583344221469363458551160763204392890034487820288;
parameter    ap_ST_fsm_state221 = 252'd1684996666696914987166688442938726917102321526408785780068975640576;
parameter    ap_ST_fsm_state222 = 252'd3369993333393829974333376885877453834204643052817571560137951281152;
parameter    ap_ST_fsm_state223 = 252'd6739986666787659948666753771754907668409286105635143120275902562304;
parameter    ap_ST_fsm_state224 = 252'd13479973333575319897333507543509815336818572211270286240551805124608;
parameter    ap_ST_fsm_state225 = 252'd26959946667150639794667015087019630673637144422540572481103610249216;
parameter    ap_ST_fsm_state226 = 252'd53919893334301279589334030174039261347274288845081144962207220498432;
parameter    ap_ST_fsm_state227 = 252'd107839786668602559178668060348078522694548577690162289924414440996864;
parameter    ap_ST_fsm_state228 = 252'd215679573337205118357336120696157045389097155380324579848828881993728;
parameter    ap_ST_fsm_state229 = 252'd431359146674410236714672241392314090778194310760649159697657763987456;
parameter    ap_ST_fsm_state230 = 252'd862718293348820473429344482784628181556388621521298319395315527974912;
parameter    ap_ST_fsm_state231 = 252'd1725436586697640946858688965569256363112777243042596638790631055949824;
parameter    ap_ST_fsm_state232 = 252'd3450873173395281893717377931138512726225554486085193277581262111899648;
parameter    ap_ST_fsm_state233 = 252'd6901746346790563787434755862277025452451108972170386555162524223799296;
parameter    ap_ST_fsm_state234 = 252'd13803492693581127574869511724554050904902217944340773110325048447598592;
parameter    ap_ST_fsm_state235 = 252'd27606985387162255149739023449108101809804435888681546220650096895197184;
parameter    ap_ST_fsm_state236 = 252'd55213970774324510299478046898216203619608871777363092441300193790394368;
parameter    ap_ST_fsm_state237 = 252'd110427941548649020598956093796432407239217743554726184882600387580788736;
parameter    ap_ST_fsm_state238 = 252'd220855883097298041197912187592864814478435487109452369765200775161577472;
parameter    ap_ST_fsm_state239 = 252'd441711766194596082395824375185729628956870974218904739530401550323154944;
parameter    ap_ST_fsm_state240 = 252'd883423532389192164791648750371459257913741948437809479060803100646309888;
parameter    ap_ST_fsm_state241 = 252'd1766847064778384329583297500742918515827483896875618958121606201292619776;
parameter    ap_ST_fsm_state242 = 252'd3533694129556768659166595001485837031654967793751237916243212402585239552;
parameter    ap_ST_fsm_state243 = 252'd7067388259113537318333190002971674063309935587502475832486424805170479104;
parameter    ap_ST_fsm_state244 = 252'd14134776518227074636666380005943348126619871175004951664972849610340958208;
parameter    ap_ST_fsm_state245 = 252'd28269553036454149273332760011886696253239742350009903329945699220681916416;
parameter    ap_ST_fsm_state246 = 252'd56539106072908298546665520023773392506479484700019806659891398441363832832;
parameter    ap_ST_fsm_state247 = 252'd113078212145816597093331040047546785012958969400039613319782796882727665664;
parameter    ap_ST_fsm_state248 = 252'd226156424291633194186662080095093570025917938800079226639565593765455331328;
parameter    ap_ST_fsm_state249 = 252'd452312848583266388373324160190187140051835877600158453279131187530910662656;
parameter    ap_ST_fsm_state250 = 252'd904625697166532776746648320380374280103671755200316906558262375061821325312;
parameter    ap_ST_fsm_state251 = 252'd1809251394333065553493296640760748560207343510400633813116524750123642650624;
parameter    ap_ST_fsm_state252 = 252'd3618502788666131106986593281521497120414687020801267626233049500247285301248;
parameter    C_S_AXI_CONTROL_R_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_R_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_R_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input  [31:0] INPUT_r_TDATA;
input   INPUT_r_TVALID;
output   INPUT_r_TREADY;
input  [3:0] INPUT_r_TKEEP;
input  [3:0] INPUT_r_TSTRB;
input  [1:0] INPUT_r_TUSER;
input  [0:0] INPUT_r_TLAST;
input  [4:0] INPUT_r_TID;
input  [5:0] INPUT_r_TDEST;
output  [31:0] OUTPUT_r_TDATA;
output   OUTPUT_r_TVALID;
input   OUTPUT_r_TREADY;
output  [3:0] OUTPUT_r_TKEEP;
output  [3:0] OUTPUT_r_TSTRB;
output  [1:0] OUTPUT_r_TUSER;
output  [0:0] OUTPUT_r_TLAST;
output  [4:0] OUTPUT_r_TID;
output  [5:0] OUTPUT_r_TDEST;
input   s_axi_control_r_AWVALID;
output   s_axi_control_r_AWREADY;
input  [C_S_AXI_CONTROL_R_ADDR_WIDTH - 1:0] s_axi_control_r_AWADDR;
input   s_axi_control_r_WVALID;
output   s_axi_control_r_WREADY;
input  [C_S_AXI_CONTROL_R_DATA_WIDTH - 1:0] s_axi_control_r_WDATA;
input  [C_S_AXI_CONTROL_R_WSTRB_WIDTH - 1:0] s_axi_control_r_WSTRB;
input   s_axi_control_r_ARVALID;
output   s_axi_control_r_ARREADY;
input  [C_S_AXI_CONTROL_R_ADDR_WIDTH - 1:0] s_axi_control_r_ARADDR;
output   s_axi_control_r_RVALID;
input   s_axi_control_r_RREADY;
output  [C_S_AXI_CONTROL_R_DATA_WIDTH - 1:0] s_axi_control_r_RDATA;
output  [1:0] s_axi_control_r_RRESP;
output   s_axi_control_r_BVALID;
input   s_axi_control_r_BREADY;
output  [1:0] s_axi_control_r_BRESP;

 reg    ap_rst_n_inv;
reg    axilite_out_ap_vld;
wire   [7:0] control;
wire   [31:0] distortion_threshold;
wire   [7:0] distortion_clip_factor;
wire   [31:0] compression_min_threshold;
wire   [31:0] compression_max_threshold;
wire   [31:0] compression_zero_threshold;
wire   [31:0] delay_mult;
wire   [31:0] delay_samples;
wire   [31:0] tempo;
wire   [63:0] wah_coeffs;
wire   [8:0] lpf_coefficients_address0;
reg    lpf_coefficients_ce0;
wire   [31:0] lpf_coefficients_q0;
reg    gmem_blk_n_AR;
(* fsm_encoding = "none" *) reg   [251:0] ap_CS_fsm;
wire    ap_CS_fsm_state227;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state247;
reg    INPUT_r_TDATA_blk_n;
wire    ap_CS_fsm_state9;
reg    OUTPUT_r_TDATA_blk_n;
wire    ap_CS_fsm_state250;
reg   [0:0] tmp_last_V_reg_2513;
wire    ap_CS_fsm_state251;
wire    ap_CS_fsm_state252;
wire   [31:0] grp_fu_803_p1;
reg   [31:0] reg_831;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state91;
wire    ap_CS_fsm_state100;
wire    ap_CS_fsm_state112;
wire    ap_CS_fsm_state156;
wire   [31:0] grp_fu_795_p2;
reg   [31:0] reg_838;
wire    ap_CS_fsm_state94;
wire    ap_CS_fsm_state115;
wire    ap_CS_fsm_state159;
wire   [31:0] grp_fu_799_p2;
reg   [31:0] reg_843;
wire   [63:0] grp_fu_816_p2;
reg   [63:0] reg_848;
wire    ap_CS_fsm_state170;
wire    ap_CS_fsm_state175;
wire    ap_CS_fsm_state213;
wire    ap_CS_fsm_state223;
reg   [63:0] wah_coeffs_read_reg_2313;
wire    ap_CS_fsm_state1;
reg   [31:0] tempo_read_reg_2318;
reg   [31:0] delay_samples_read_reg_2323;
reg   [31:0] delay_mult_read_reg_2328;
reg   [31:0] compression_zero_threshold_read_reg_2333;
reg   [31:0] compression_max_threshold_read_reg_2338;
reg   [31:0] compression_min_threshold_read_reg_2344;
reg   [7:0] distortion_clip_factor_read_reg_2351;
reg   [31:0] distortion_threshold_read_reg_2356;
reg   [7:0] control_read_reg_2366;
wire   [0:0] trunc_ln23_fu_855_p1;
reg   [0:0] trunc_ln23_reg_2373;
reg   [0:0] tmp_reg_2445;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond3524_fu_932_p2;
reg   [0:0] tmp_11_reg_2449;
reg   [0:0] tmp_13_reg_2453;
wire   [31:0] negative_threshold_fu_1000_p2;
reg   [31:0] negative_threshold_reg_2457;
wire    ap_CS_fsm_state8;
wire  signed [39:0] conv7_i_i_i_fu_1005_p1;
reg  signed [39:0] conv7_i_i_i_reg_2462;
wire   [63:0] grp_fu_828_p1;
reg   [63:0] conv2_i_reg_2468;
reg   [31:0] conv18_i_reg_2473;
wire   [31:0] grp_fu_806_p1;
reg   [31:0] conv30_i_reg_2478;
reg   [3:0] tmp_keep_V_reg_2498;
reg   [3:0] tmp_strb_V_reg_2503;
reg   [1:0] tmp_user_V_reg_2508;
reg   [4:0] tmp_id_V_reg_2517;
reg   [5:0] tmp_dest_V_reg_2522;
wire   [31:0] current_sample_fu_1045_p2;
reg   [31:0] current_sample_reg_2527;
wire   [31:0] or_ln90_fu_1051_p2;
reg   [31:0] or_ln90_reg_2532;
wire   [0:0] icmp_ln135_fu_1057_p2;
reg   [0:0] icmp_ln135_reg_2542;
wire   [0:0] icmp_ln137_fu_1062_p2;
reg   [0:0] icmp_ln137_reg_2546;
wire   [31:0] r_V_fu_1067_p2;
reg  signed [31:0] r_V_reg_2550;
wire   [31:0] r_V_21_fu_1072_p2;
reg  signed [31:0] r_V_21_reg_2555;
wire   [39:0] r_V_49_fu_1080_p2;
reg   [39:0] r_V_49_reg_2560;
wire    ap_CS_fsm_state10;
reg   [31:0] ret_V_9_cast_reg_2565;
wire   [0:0] icmp_ln1049_1_fu_1099_p2;
reg   [0:0] icmp_ln1049_1_reg_2572;
wire    ap_CS_fsm_state11;
wire   [39:0] r_V_48_fu_1185_p2;
reg   [39:0] r_V_48_reg_2585;
wire    ap_CS_fsm_state12;
reg   [31:0] ret_V_cast_reg_2590;
wire   [0:0] icmp_ln1049_fu_1204_p2;
reg   [0:0] icmp_ln1049_reg_2597;
wire   [31:0] or_ln95_fu_1237_p2;
reg   [31:0] or_ln95_reg_2602;
wire    ap_CS_fsm_state47;
wire   [31:0] grp_fu_1176_p2;
reg   [31:0] compression_buffer_index_1_reg_2614;
wire  signed [10:0] sext_ln61_fu_1247_p1;
reg  signed [10:0] sext_ln61_reg_2622;
wire   [8:0] add_ln159_fu_1262_p2;
reg   [8:0] add_ln159_reg_2630;
wire    ap_CS_fsm_state48;
wire   [0:0] icmp_ln159_fu_1256_p2;
wire   [31:0] current_level_fu_1288_p3;
reg   [31:0] current_level_reg_2645;
wire   [0:0] icmp_ln173_fu_1295_p2;
reg   [0:0] icmp_ln173_reg_2650;
wire   [0:0] icmp_ln183_fu_1300_p2;
reg   [0:0] icmp_ln183_reg_2654;
wire   [0:0] and_ln182_1_fu_1322_p2;
reg   [0:0] and_ln182_1_reg_2658;
reg   [31:0] lpf_coefficients_load_reg_2662;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state62;
wire   [31:0] compression_buffer_q0;
reg   [31:0] compression_buffer_load_reg_2672;
wire    ap_CS_fsm_state63;
wire   [31:0] grp_fu_791_p2;
reg   [31:0] dc_reg_2677;
wire    ap_CS_fsm_state74;
wire   [31:0] result_V_18_fu_1484_p3;
wire    ap_CS_fsm_state75;
wire   [31:0] result_V_fu_1624_p3;
reg   [31:0] result_V_reg_2687;
wire    ap_CS_fsm_state95;
wire    ap_CS_fsm_state96;
wire   [31:0] result_V_19_fu_1778_p3;
reg   [31:0] result_V_19_reg_2700;
wire    ap_CS_fsm_state116;
wire    ap_CS_fsm_state126;
wire    ap_CS_fsm_state151;
wire   [31:0] delay_buffer_q0;
reg   [31:0] delay_buffer_load_reg_2715;
wire    ap_CS_fsm_state152;
wire   [31:0] data_V_3_fu_1806_p1;
reg   [31:0] data_V_3_reg_2720;
wire    ap_CS_fsm_state160;
wire   [31:0] val_3_fu_1916_p3;
reg   [31:0] val_3_reg_2725;
wire   [31:0] shl_ln221_fu_1968_p2;
wire    ap_CS_fsm_state161;
reg   [63:0] conv_i2_reg_2736;
wire    ap_CS_fsm_state165;
wire    ap_CS_fsm_state198;
wire   [63:0] grp_fu_823_p2;
reg   [63:0] x_assign_reg_2746;
wire    ap_CS_fsm_state206;
wire   [63:0] grp_sin_or_cos_double_s_fu_774_ap_return;
reg   [63:0] tmp_2_reg_2751;
wire    ap_CS_fsm_state208;
wire   [63:0] grp_fu_811_p2;
reg   [63:0] add5_i_reg_2756;
wire    ap_CS_fsm_state218;
wire   [31:0] result_V_21_fu_2126_p3;
reg  signed [31:0] result_V_21_reg_2761;
wire    ap_CS_fsm_state224;
wire   [40:0] mul_ln226_fu_2137_p2;
reg   [40:0] mul_ln226_reg_2766;
wire    ap_CS_fsm_state225;
reg   [63:0] gmem_addr_reg_2771;
wire    ap_CS_fsm_state226;
wire   [31:0] or_ln105_fu_2171_p2;
reg   [31:0] or_ln105_reg_2777;
wire    ap_CS_fsm_state233;
wire   [31:0] grp_fu_1988_p2;
reg   [31:0] wah_buffer_index_1_reg_2783;
wire  signed [8:0] sext_ln73_fu_2181_p1;
reg  signed [8:0] sext_ln73_reg_2788;
wire   [6:0] add_ln226_1_fu_2191_p2;
reg   [6:0] add_ln226_1_reg_2796;
wire    ap_CS_fsm_state234;
wire   [0:0] icmp_ln226_fu_2185_p2;
wire    ap_CS_fsm_state246;
wire   [31:0] wah_values_buffer_q0;
reg  signed [31:0] r_V_46_reg_2811;
reg  signed [15:0] gmem_addr_read_reg_2816;
wire   [47:0] r_V_50_fu_2231_p2;
reg   [47:0] r_V_50_reg_2821;
wire    ap_CS_fsm_state248;
reg   [15:0] ret_V_12_reg_2826;
wire   [31:0] trunc_ln1049_2_fu_2247_p1;
reg   [31:0] trunc_ln1049_2_reg_2833;
wire   [31:0] result_3_fu_2286_p2;
wire    ap_CS_fsm_state249;
reg   [8:0] compression_buffer_address0;
reg    compression_buffer_ce0;
reg    compression_buffer_we0;
reg   [31:0] compression_buffer_d0;
reg   [16:0] delay_buffer_address0;
reg    delay_buffer_ce0;
reg    delay_buffer_we0;
reg   [31:0] delay_buffer_d0;
reg   [6:0] wah_values_buffer_address0;
reg    wah_values_buffer_ce0;
reg    wah_values_buffer_we0;
reg   [31:0] wah_values_buffer_d0;
wire    grp_sin_or_cos_double_s_fu_774_ap_start;
wire    grp_sin_or_cos_double_s_fu_774_ap_done;
wire    grp_sin_or_cos_double_s_fu_774_ap_idle;
wire    grp_sin_or_cos_double_s_fu_774_ap_ready;
wire    gmem_AWREADY;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [15:0] gmem_RDATA;
wire   [9:0] gmem_RFIFONUM;
wire    gmem_BVALID;
reg   [31:0] ap_phi_mux_axilite_out_local_1_phi_fu_567_p8;
reg   [31:0] axilite_out_local_1_reg_564;
reg   [31:0] ap_phi_mux_empty_79_phi_fu_581_p8;
reg   [31:0] empty_79_reg_578;
reg   [31:0] ap_phi_mux_tmp_int_6_phi_fu_595_p8;
reg   [31:0] tmp_int_6_reg_592;
wire   [31:0] result_fu_1161_p2;
wire   [31:0] result_1_fu_1130_p2;
reg   [8:0] i_reg_606;
reg   [31:0] empty_80_reg_617;
reg   [31:0] ap_phi_mux_axilite_out_local_2_phi_fu_632_p10;
reg   [31:0] axilite_out_local_2_reg_629;
reg   [31:0] ap_phi_mux_empty_82_phi_fu_649_p10;
reg   [31:0] empty_82_reg_646;
reg   [31:0] ap_phi_mux_tmp_int_3_phi_fu_666_p10;
reg   [31:0] tmp_int_3_reg_663;
reg   [31:0] ap_phi_mux_axilite_out_local_3_phi_fu_685_p4;
reg   [31:0] axilite_out_local_3_reg_682;
wire   [31:0] or_ln100_fu_1924_p2;
reg   [31:0] ap_phi_mux_empty_83_phi_fu_696_p4;
reg   [31:0] empty_83_reg_693;
reg   [31:0] ap_phi_mux_tmp_int_phi_fu_708_p4;
reg   [31:0] tmp_int_reg_704;
wire   [31:0] output_fu_1951_p2;
reg   [6:0] i_7_reg_716;
reg   [31:0] result_2_reg_727;
reg   [31:0] axilite_out_local_4_reg_739;
reg   [31:0] empty_86_reg_750;
reg   [31:0] tmp_int_7_reg_760;
reg    grp_sin_or_cos_double_s_fu_774_ap_start_reg;
wire    ap_CS_fsm_state207;
wire   [63:0] p_cast_fu_867_p1;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond3588_fu_872_p2;
wire   [63:0] p_cast5_fu_897_p1;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond3535_fu_902_p2;
wire   [63:0] p_cast6_fu_927_p1;
wire   [63:0] zext_ln155_fu_1233_p1;
wire    ap_CS_fsm_state13;
wire   [63:0] zext_ln159_fu_1251_p1;
wire   [63:0] zext_ln162_fu_1348_p1;
wire   [63:0] zext_ln201_fu_1801_p1;
wire   [63:0] zext_ln204_fu_1959_p1;
wire   [63:0] zext_ln217_fu_1977_p1;
wire   [63:0] zext_ln229_fu_2220_p1;
wire  signed [63:0] sext_ln226_fu_2161_p1;
reg   [8:0] empty_fu_298;
wire   [8:0] empty_70_fu_878_p2;
reg   [16:0] empty_71_fu_314;
wire   [16:0] empty_73_fu_908_p2;
reg   [6:0] empty_74_fu_318;
wire   [6:0] empty_76_fu_938_p2;
reg   [31:0] current_sample_1_fu_322;
reg    ap_block_state250;
reg    ap_block_state250_io;
reg   [31:0] empty_77_fu_326;
reg   [31:0] wah_buffer_index_fu_330;
reg   [31:0] delay_buffer_index_fu_334;
wire   [31:0] grp_fu_1791_p2;
reg   [31:0] compression_buffer_index_fu_338;
reg   [31:0] axilite_out_local_0_fu_342;
wire   [31:0] abs_in_1_fu_1224_p3;
wire    ap_CS_fsm_state71;
reg   [31:0] grp_fu_795_p1;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state92;
wire    ap_CS_fsm_state113;
wire    ap_CS_fsm_state157;
reg   [31:0] grp_fu_799_p0;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state101;
reg   [31:0] grp_fu_803_p0;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state97;
wire    ap_CS_fsm_state109;
wire    ap_CS_fsm_state153;
wire    ap_CS_fsm_state214;
reg   [63:0] grp_fu_816_p0;
reg   [63:0] grp_fu_816_p1;
wire    ap_CS_fsm_state166;
wire    ap_CS_fsm_state171;
wire    ap_CS_fsm_state209;
wire    ap_CS_fsm_state219;
wire    ap_CS_fsm_state176;
reg   [31:0] grp_fu_828_p0;
wire  signed [7:0] r_V_49_fu_1080_p1;
wire   [6:0] trunc_ln1049_1_fu_1095_p1;
wire   [31:0] ret_V_10_fu_1112_p2;
wire   [0:0] p_Result_28_fu_1105_p3;
wire   [31:0] select_ln1048_1_fu_1117_p3;
wire   [31:0] ret_V_11_fu_1123_p3;
wire   [31:0] ret_V_fu_1143_p2;
wire   [0:0] p_Result_s_fu_1136_p3;
wire   [31:0] select_ln1048_fu_1148_p3;
wire   [31:0] ret_V_9_fu_1154_p3;
wire   [31:0] grp_fu_1176_p0;
wire   [9:0] grp_fu_1176_p1;
wire  signed [7:0] r_V_48_fu_1185_p1;
wire   [6:0] trunc_ln1049_fu_1200_p1;
wire   [0:0] tmp_17_fu_1210_p3;
wire   [31:0] sub_ln151_fu_1218_p2;
wire   [9:0] trunc_ln61_fu_1243_p1;
wire   [10:0] zext_ln161_fu_1268_p1;
wire   [10:0] grp_fu_1277_p0;
wire   [9:0] grp_fu_1277_p1;
wire   [0:0] icmp_ln165_fu_1283_p2;
wire   [0:0] icmp_ln182_1_fu_1311_p2;
wire   [0:0] and_ln182_fu_1316_p2;
wire   [0:0] icmp_ln182_fu_1306_p2;
wire   [8:0] grp_fu_1277_p2;
wire   [8:0] trunc_ln162_fu_1344_p1;
wire   [31:0] data_V_fu_1353_p1;
wire   [22:0] p_Result_46_fu_1374_p1;
wire   [24:0] mantissa_fu_1378_p4;
wire   [7:0] xs_exp_V_fu_1364_p4;
wire   [8:0] zext_ln346_fu_1392_p1;
wire   [8:0] add_ln346_fu_1396_p2;
wire   [7:0] sub_ln1512_3_fu_1410_p2;
wire   [0:0] isNeg_fu_1402_p3;
wire  signed [8:0] sext_ln1512_fu_1416_p1;
wire   [8:0] ush_fu_1420_p3;
wire  signed [31:0] sext_ln1488_fu_1428_p1;
wire   [78:0] zext_ln15_fu_1388_p1;
wire   [78:0] zext_ln1488_fu_1432_p1;
wire   [78:0] r_V_35_fu_1436_p2;
wire   [0:0] tmp_22_fu_1448_p3;
wire   [78:0] r_V_36_fu_1442_p2;
wire   [31:0] zext_ln818_fu_1456_p1;
wire   [31:0] tmp_6_fu_1460_p4;
wire   [31:0] val_fu_1470_p3;
wire   [0:0] p_Result_45_fu_1356_p3;
wire   [31:0] result_V_2_fu_1478_p2;
wire   [31:0] data_V_2_fu_1492_p1;
wire   [22:0] p_Result_50_fu_1514_p1;
wire   [24:0] mantissa_2_fu_1518_p4;
wire   [7:0] xs_exp_V_2_fu_1504_p4;
wire   [8:0] zext_ln346_2_fu_1532_p1;
wire   [8:0] add_ln346_2_fu_1536_p2;
wire   [7:0] sub_ln1512_5_fu_1550_p2;
wire   [0:0] isNeg_3_fu_1542_p3;
wire  signed [8:0] sext_ln1512_2_fu_1556_p1;
wire   [8:0] ush_3_fu_1560_p3;
wire  signed [31:0] sext_ln1488_2_fu_1568_p1;
wire   [78:0] zext_ln15_2_fu_1528_p1;
wire   [78:0] zext_ln1488_3_fu_1572_p1;
wire   [78:0] r_V_40_fu_1576_p2;
wire   [0:0] tmp_30_fu_1588_p3;
wire   [78:0] r_V_41_fu_1582_p2;
wire   [31:0] zext_ln818_2_fu_1596_p1;
wire   [31:0] tmp_s_fu_1600_p4;
wire   [31:0] val_2_fu_1610_p3;
wire   [0:0] p_Result_49_fu_1496_p3;
wire   [31:0] result_V_8_fu_1618_p2;
wire   [31:0] grp_fu_1640_p0;
wire   [17:0] grp_fu_1640_p1;
wire   [31:0] data_V_1_fu_1646_p1;
wire   [22:0] p_Result_48_fu_1668_p1;
wire   [24:0] mantissa_1_fu_1672_p4;
wire   [7:0] xs_exp_V_1_fu_1658_p4;
wire   [8:0] zext_ln346_1_fu_1686_p1;
wire   [8:0] add_ln346_1_fu_1690_p2;
wire   [7:0] sub_ln1512_4_fu_1704_p2;
wire   [0:0] isNeg_2_fu_1696_p3;
wire  signed [8:0] sext_ln1512_1_fu_1710_p1;
wire   [8:0] ush_2_fu_1714_p3;
wire  signed [31:0] sext_ln1488_1_fu_1722_p1;
wire   [78:0] zext_ln15_1_fu_1682_p1;
wire   [78:0] zext_ln1488_2_fu_1726_p1;
wire   [78:0] r_V_38_fu_1730_p2;
wire   [0:0] tmp_26_fu_1742_p3;
wire   [78:0] r_V_39_fu_1736_p2;
wire   [31:0] zext_ln818_1_fu_1750_p1;
wire   [31:0] tmp_9_fu_1754_p4;
wire   [31:0] val_1_fu_1764_p3;
wire   [0:0] p_Result_47_fu_1650_p3;
wire   [31:0] result_V_7_fu_1772_p2;
wire   [31:0] grp_fu_1791_p0;
wire   [17:0] grp_fu_1791_p1;
wire   [16:0] grp_fu_1640_p2;
wire   [16:0] trunc_ln201_fu_1797_p1;
wire   [22:0] p_Result_52_fu_1820_p1;
wire   [24:0] mantissa_3_fu_1824_p4;
wire   [7:0] xs_exp_V_4_fu_1810_p4;
wire   [8:0] zext_ln346_3_fu_1838_p1;
wire   [8:0] add_ln346_3_fu_1842_p2;
wire   [7:0] sub_ln1512_fu_1856_p2;
wire   [0:0] isNeg_4_fu_1848_p3;
wire  signed [8:0] sext_ln1512_3_fu_1862_p1;
wire   [8:0] ush_4_fu_1866_p3;
wire  signed [31:0] sext_ln1488_3_fu_1874_p1;
wire   [78:0] zext_ln15_3_fu_1834_p1;
wire   [78:0] zext_ln1488_4_fu_1878_p1;
wire   [78:0] r_V_42_fu_1882_p2;
wire   [0:0] tmp_34_fu_1894_p3;
wire   [78:0] r_V_43_fu_1888_p2;
wire   [31:0] zext_ln818_3_fu_1902_p1;
wire   [31:0] tmp_3_fu_1906_p4;
wire   [0:0] p_Result_51_fu_1932_p3;
wire   [31:0] result_V_13_fu_1939_p2;
wire   [31:0] result_V_20_fu_1944_p3;
wire   [31:0] grp_fu_1988_p0;
wire   [7:0] grp_fu_1988_p1;
wire   [63:0] data_V_4_fu_1994_p1;
wire   [51:0] p_Result_54_fu_2016_p1;
wire   [53:0] mantissa_4_fu_2020_p4;
wire   [10:0] xs_exp_V_5_fu_2006_p4;
wire   [11:0] zext_ln515_fu_2034_p1;
wire   [11:0] add_ln515_fu_2038_p2;
wire   [10:0] sub_ln1512_2_fu_2052_p2;
wire   [0:0] isNeg_5_fu_2044_p3;
wire  signed [11:0] sext_ln1512_4_fu_2058_p1;
wire   [11:0] ush_5_fu_2062_p3;
wire  signed [31:0] sext_ln1488_4_fu_2070_p1;
wire   [136:0] zext_ln15_4_fu_2030_p1;
wire   [136:0] zext_ln1488_5_fu_2074_p1;
wire   [136:0] r_V_44_fu_2078_p2;
wire   [0:0] tmp_38_fu_2090_p3;
wire   [136:0] r_V_45_fu_2084_p2;
wire   [31:0] zext_ln818_4_fu_2098_p1;
wire   [31:0] tmp_4_fu_2102_p4;
wire   [31:0] val_4_fu_2112_p3;
wire   [0:0] p_Result_53_fu_1998_p3;
wire   [31:0] result_V_16_fu_2120_p2;
wire   [8:0] mul_ln226_fu_2137_p1;
wire  signed [63:0] sext_ln226_2_fu_2143_p1;
wire   [63:0] add_ln226_fu_2146_p2;
wire   [62:0] trunc_ln_fu_2151_p4;
wire   [7:0] trunc_ln73_fu_2177_p1;
wire   [8:0] zext_ln228_fu_2197_p1;
wire   [8:0] grp_fu_2206_p0;
wire   [7:0] grp_fu_2206_p1;
wire   [6:0] grp_fu_2206_p2;
wire   [6:0] trunc_ln229_fu_2216_p1;
wire   [0:0] icmp_ln1049_2_fu_2258_p2;
wire   [15:0] ret_V_13_fu_2263_p2;
wire   [0:0] p_Result_44_fu_2251_p3;
wire   [15:0] select_ln1048_2_fu_2268_p3;
wire   [15:0] ret_V_14_fu_2275_p3;
wire  signed [31:0] sext_ln598_fu_2282_p1;
reg    grp_fu_1176_ap_start;
wire    grp_fu_1176_ap_done;
reg    grp_fu_1277_ap_start;
wire    grp_fu_1277_ap_done;
reg    grp_fu_1640_ap_start;
wire    grp_fu_1640_ap_done;
reg    grp_fu_1791_ap_start;
wire    grp_fu_1791_ap_done;
reg    grp_fu_1988_ap_start;
wire    grp_fu_1988_ap_done;
reg    grp_fu_1988_ce;
wire    ap_CS_fsm_state199;
wire    ap_CS_fsm_state200;
wire    ap_CS_fsm_state201;
wire    ap_CS_fsm_state202;
wire    ap_CS_fsm_state203;
wire    ap_CS_fsm_state204;
wire    ap_CS_fsm_state205;
wire    ap_CS_fsm_state210;
wire    ap_CS_fsm_state211;
wire    ap_CS_fsm_state212;
wire    ap_CS_fsm_state215;
wire    ap_CS_fsm_state216;
wire    ap_CS_fsm_state217;
wire    ap_CS_fsm_state220;
wire    ap_CS_fsm_state221;
wire    ap_CS_fsm_state222;
wire    ap_CS_fsm_state228;
wire    ap_CS_fsm_state229;
wire    ap_CS_fsm_state230;
wire    ap_CS_fsm_state231;
wire    ap_CS_fsm_state232;
reg    grp_fu_2206_ap_start;
wire    grp_fu_2206_ap_done;
reg   [251:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
wire    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
wire    ap_ST_fsm_state80_blk;
wire    ap_ST_fsm_state81_blk;
wire    ap_ST_fsm_state82_blk;
wire    ap_ST_fsm_state83_blk;
wire    ap_ST_fsm_state84_blk;
wire    ap_ST_fsm_state85_blk;
wire    ap_ST_fsm_state86_blk;
wire    ap_ST_fsm_state87_blk;
wire    ap_ST_fsm_state88_blk;
wire    ap_ST_fsm_state89_blk;
wire    ap_ST_fsm_state90_blk;
wire    ap_ST_fsm_state91_blk;
wire    ap_ST_fsm_state92_blk;
wire    ap_ST_fsm_state93_blk;
wire    ap_ST_fsm_state94_blk;
wire    ap_ST_fsm_state95_blk;
wire    ap_ST_fsm_state96_blk;
wire    ap_ST_fsm_state97_blk;
wire    ap_ST_fsm_state98_blk;
wire    ap_ST_fsm_state99_blk;
wire    ap_ST_fsm_state100_blk;
wire    ap_ST_fsm_state101_blk;
wire    ap_ST_fsm_state102_blk;
wire    ap_ST_fsm_state103_blk;
wire    ap_ST_fsm_state104_blk;
wire    ap_ST_fsm_state105_blk;
wire    ap_ST_fsm_state106_blk;
wire    ap_ST_fsm_state107_blk;
wire    ap_ST_fsm_state108_blk;
wire    ap_ST_fsm_state109_blk;
wire    ap_ST_fsm_state110_blk;
wire    ap_ST_fsm_state111_blk;
wire    ap_ST_fsm_state112_blk;
wire    ap_ST_fsm_state113_blk;
wire    ap_ST_fsm_state114_blk;
wire    ap_ST_fsm_state115_blk;
wire    ap_ST_fsm_state116_blk;
wire    ap_ST_fsm_state117_blk;
wire    ap_ST_fsm_state118_blk;
wire    ap_ST_fsm_state119_blk;
wire    ap_ST_fsm_state120_blk;
wire    ap_ST_fsm_state121_blk;
wire    ap_ST_fsm_state122_blk;
wire    ap_ST_fsm_state123_blk;
wire    ap_ST_fsm_state124_blk;
wire    ap_ST_fsm_state125_blk;
wire    ap_ST_fsm_state126_blk;
wire    ap_ST_fsm_state127_blk;
wire    ap_ST_fsm_state128_blk;
wire    ap_ST_fsm_state129_blk;
wire    ap_ST_fsm_state130_blk;
wire    ap_ST_fsm_state131_blk;
wire    ap_ST_fsm_state132_blk;
wire    ap_ST_fsm_state133_blk;
wire    ap_ST_fsm_state134_blk;
wire    ap_ST_fsm_state135_blk;
wire    ap_ST_fsm_state136_blk;
wire    ap_ST_fsm_state137_blk;
wire    ap_ST_fsm_state138_blk;
wire    ap_ST_fsm_state139_blk;
wire    ap_ST_fsm_state140_blk;
wire    ap_ST_fsm_state141_blk;
wire    ap_ST_fsm_state142_blk;
wire    ap_ST_fsm_state143_blk;
wire    ap_ST_fsm_state144_blk;
wire    ap_ST_fsm_state145_blk;
wire    ap_ST_fsm_state146_blk;
wire    ap_ST_fsm_state147_blk;
wire    ap_ST_fsm_state148_blk;
wire    ap_ST_fsm_state149_blk;
wire    ap_ST_fsm_state150_blk;
wire    ap_ST_fsm_state151_blk;
wire    ap_ST_fsm_state152_blk;
wire    ap_ST_fsm_state153_blk;
wire    ap_ST_fsm_state154_blk;
wire    ap_ST_fsm_state155_blk;
wire    ap_ST_fsm_state156_blk;
wire    ap_ST_fsm_state157_blk;
wire    ap_ST_fsm_state158_blk;
wire    ap_ST_fsm_state159_blk;
wire    ap_ST_fsm_state160_blk;
wire    ap_ST_fsm_state161_blk;
wire    ap_ST_fsm_state162_blk;
wire    ap_ST_fsm_state163_blk;
wire    ap_ST_fsm_state164_blk;
wire    ap_ST_fsm_state165_blk;
wire    ap_ST_fsm_state166_blk;
wire    ap_ST_fsm_state167_blk;
wire    ap_ST_fsm_state168_blk;
wire    ap_ST_fsm_state169_blk;
wire    ap_ST_fsm_state170_blk;
wire    ap_ST_fsm_state171_blk;
wire    ap_ST_fsm_state172_blk;
wire    ap_ST_fsm_state173_blk;
wire    ap_ST_fsm_state174_blk;
wire    ap_ST_fsm_state175_blk;
wire    ap_ST_fsm_state176_blk;
wire    ap_ST_fsm_state177_blk;
wire    ap_ST_fsm_state178_blk;
wire    ap_ST_fsm_state179_blk;
wire    ap_ST_fsm_state180_blk;
wire    ap_ST_fsm_state181_blk;
wire    ap_ST_fsm_state182_blk;
wire    ap_ST_fsm_state183_blk;
wire    ap_ST_fsm_state184_blk;
wire    ap_ST_fsm_state185_blk;
wire    ap_ST_fsm_state186_blk;
wire    ap_ST_fsm_state187_blk;
wire    ap_ST_fsm_state188_blk;
wire    ap_ST_fsm_state189_blk;
wire    ap_ST_fsm_state190_blk;
wire    ap_ST_fsm_state191_blk;
wire    ap_ST_fsm_state192_blk;
wire    ap_ST_fsm_state193_blk;
wire    ap_ST_fsm_state194_blk;
wire    ap_ST_fsm_state195_blk;
wire    ap_ST_fsm_state196_blk;
wire    ap_ST_fsm_state197_blk;
wire    ap_ST_fsm_state198_blk;
wire    ap_ST_fsm_state199_blk;
wire    ap_ST_fsm_state200_blk;
wire    ap_ST_fsm_state201_blk;
wire    ap_ST_fsm_state202_blk;
wire    ap_ST_fsm_state203_blk;
wire    ap_ST_fsm_state204_blk;
wire    ap_ST_fsm_state205_blk;
wire    ap_ST_fsm_state206_blk;
wire    ap_ST_fsm_state207_blk;
reg    ap_ST_fsm_state208_blk;
wire    ap_ST_fsm_state209_blk;
wire    ap_ST_fsm_state210_blk;
wire    ap_ST_fsm_state211_blk;
wire    ap_ST_fsm_state212_blk;
wire    ap_ST_fsm_state213_blk;
wire    ap_ST_fsm_state214_blk;
wire    ap_ST_fsm_state215_blk;
wire    ap_ST_fsm_state216_blk;
wire    ap_ST_fsm_state217_blk;
wire    ap_ST_fsm_state218_blk;
wire    ap_ST_fsm_state219_blk;
wire    ap_ST_fsm_state220_blk;
wire    ap_ST_fsm_state221_blk;
wire    ap_ST_fsm_state222_blk;
wire    ap_ST_fsm_state223_blk;
wire    ap_ST_fsm_state224_blk;
wire    ap_ST_fsm_state225_blk;
wire    ap_ST_fsm_state226_blk;
reg    ap_ST_fsm_state227_blk;
wire    ap_ST_fsm_state228_blk;
wire    ap_ST_fsm_state229_blk;
wire    ap_ST_fsm_state230_blk;
wire    ap_ST_fsm_state231_blk;
wire    ap_ST_fsm_state232_blk;
wire    ap_ST_fsm_state233_blk;
wire    ap_ST_fsm_state234_blk;
wire    ap_ST_fsm_state235_blk;
wire    ap_ST_fsm_state236_blk;
wire    ap_ST_fsm_state237_blk;
wire    ap_ST_fsm_state238_blk;
wire    ap_ST_fsm_state239_blk;
wire    ap_ST_fsm_state240_blk;
wire    ap_ST_fsm_state241_blk;
wire    ap_ST_fsm_state242_blk;
wire    ap_ST_fsm_state243_blk;
wire    ap_ST_fsm_state244_blk;
wire    ap_ST_fsm_state245_blk;
wire    ap_ST_fsm_state246_blk;
reg    ap_ST_fsm_state247_blk;
wire    ap_ST_fsm_state248_blk;
wire    ap_ST_fsm_state249_blk;
reg    ap_ST_fsm_state250_blk;
reg    ap_ST_fsm_state251_blk;
reg    ap_ST_fsm_state252_blk;
wire    regslice_both_OUTPUT_r_V_data_V_U_apdone_blk;
reg    ap_block_state252;
wire    regslice_both_INPUT_r_V_data_V_U_apdone_blk;
wire   [31:0] INPUT_r_TDATA_int_regslice;
wire    INPUT_r_TVALID_int_regslice;
reg    INPUT_r_TREADY_int_regslice;
wire    regslice_both_INPUT_r_V_data_V_U_ack_in;
wire    regslice_both_INPUT_r_V_keep_V_U_apdone_blk;
wire   [3:0] INPUT_r_TKEEP_int_regslice;
wire    regslice_both_INPUT_r_V_keep_V_U_vld_out;
wire    regslice_both_INPUT_r_V_keep_V_U_ack_in;
wire    regslice_both_INPUT_r_V_strb_V_U_apdone_blk;
wire   [3:0] INPUT_r_TSTRB_int_regslice;
wire    regslice_both_INPUT_r_V_strb_V_U_vld_out;
wire    regslice_both_INPUT_r_V_strb_V_U_ack_in;
wire    regslice_both_INPUT_r_V_user_V_U_apdone_blk;
wire   [1:0] INPUT_r_TUSER_int_regslice;
wire    regslice_both_INPUT_r_V_user_V_U_vld_out;
wire    regslice_both_INPUT_r_V_user_V_U_ack_in;
wire    regslice_both_INPUT_r_V_last_V_U_apdone_blk;
wire   [0:0] INPUT_r_TLAST_int_regslice;
wire    regslice_both_INPUT_r_V_last_V_U_vld_out;
wire    regslice_both_INPUT_r_V_last_V_U_ack_in;
wire    regslice_both_INPUT_r_V_id_V_U_apdone_blk;
wire   [4:0] INPUT_r_TID_int_regslice;
wire    regslice_both_INPUT_r_V_id_V_U_vld_out;
wire    regslice_both_INPUT_r_V_id_V_U_ack_in;
wire    regslice_both_INPUT_r_V_dest_V_U_apdone_blk;
wire   [5:0] INPUT_r_TDEST_int_regslice;
wire    regslice_both_INPUT_r_V_dest_V_U_vld_out;
wire    regslice_both_INPUT_r_V_dest_V_U_ack_in;
reg    OUTPUT_r_TVALID_int_regslice;
wire    OUTPUT_r_TREADY_int_regslice;
wire    regslice_both_OUTPUT_r_V_data_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_keep_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_keep_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_keep_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_strb_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_strb_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_strb_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_user_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_user_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_user_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_last_V_U_apdone_blk;
reg   [0:0] OUTPUT_r_TLAST_int_regslice;
wire    regslice_both_OUTPUT_r_V_last_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_last_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_id_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_id_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_id_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_dest_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_dest_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_dest_V_U_vld_out;
reg    ap_condition_3887;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 252'd1;
#0 grp_sin_or_cos_double_s_fu_774_ap_start_reg = 1'b0;
end

guitar_effects_lpf_coefficients_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 441 ),
    .AddressWidth( 9 ))
lpf_coefficients_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lpf_coefficients_address0),
    .ce0(lpf_coefficients_ce0),
    .q0(lpf_coefficients_q0)
);

guitar_effects_compression_buffer_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 441 ),
    .AddressWidth( 9 ))
compression_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(compression_buffer_address0),
    .ce0(compression_buffer_ce0),
    .we0(compression_buffer_we0),
    .d0(compression_buffer_d0),
    .q0(compression_buffer_q0)
);

guitar_effects_delay_buffer_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 88200 ),
    .AddressWidth( 17 ))
delay_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(delay_buffer_address0),
    .ce0(delay_buffer_ce0),
    .we0(delay_buffer_we0),
    .d0(delay_buffer_d0),
    .q0(delay_buffer_q0)
);

guitar_effects_wah_values_buffer_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
wah_values_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(wah_values_buffer_address0),
    .ce0(wah_values_buffer_ce0),
    .we0(wah_values_buffer_we0),
    .d0(wah_values_buffer_d0),
    .q0(wah_values_buffer_q0)
);

guitar_effects_sin_or_cos_double_s grp_sin_or_cos_double_s_fu_774(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sin_or_cos_double_s_fu_774_ap_start),
    .ap_done(grp_sin_or_cos_double_s_fu_774_ap_done),
    .ap_idle(grp_sin_or_cos_double_s_fu_774_ap_idle),
    .ap_ready(grp_sin_or_cos_double_s_fu_774_ap_ready),
    .t_in(x_assign_reg_2746),
    .ap_return(grp_sin_or_cos_double_s_fu_774_ap_return)
);

guitar_effects_control_r_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_R_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_R_DATA_WIDTH ))
control_r_s_axi_U(
    .AWVALID(s_axi_control_r_AWVALID),
    .AWREADY(s_axi_control_r_AWREADY),
    .AWADDR(s_axi_control_r_AWADDR),
    .WVALID(s_axi_control_r_WVALID),
    .WREADY(s_axi_control_r_WREADY),
    .WDATA(s_axi_control_r_WDATA),
    .WSTRB(s_axi_control_r_WSTRB),
    .ARVALID(s_axi_control_r_ARVALID),
    .ARREADY(s_axi_control_r_ARREADY),
    .ARADDR(s_axi_control_r_ARADDR),
    .RVALID(s_axi_control_r_RVALID),
    .RREADY(s_axi_control_r_RREADY),
    .RDATA(s_axi_control_r_RDATA),
    .RRESP(s_axi_control_r_RRESP),
    .BVALID(s_axi_control_r_BVALID),
    .BREADY(s_axi_control_r_BREADY),
    .BRESP(s_axi_control_r_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .axilite_out(axilite_out_local_4_reg_739),
    .axilite_out_ap_vld(axilite_out_ap_vld),
    .control(control),
    .distortion_threshold(distortion_threshold),
    .distortion_clip_factor(distortion_clip_factor),
    .compression_min_threshold(compression_min_threshold),
    .compression_max_threshold(compression_max_threshold),
    .compression_zero_threshold(compression_zero_threshold),
    .delay_mult(delay_mult),
    .delay_samples(delay_samples),
    .tempo(tempo),
    .wah_coeffs(wah_coeffs)
);

guitar_effects_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .USER_RFIFONUM_WIDTH( 10 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .USER_DW( 16 ),
    .USER_AW( 64 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_addr_reg_2771),
    .I_ARLEN(32'd100),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RFIFONUM(gmem_RFIFONUM),
    .I_AWVALID(1'b0),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWLEN(32'd0),
    .I_WVALID(1'b0),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(16'd0),
    .I_WSTRB(2'd0),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(1'b0)
);

guitar_effects_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U33(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_831),
    .din1(reg_838),
    .ce(1'b1),
    .dout(grp_fu_791_p2)
);

guitar_effects_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U34(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_831),
    .din1(grp_fu_795_p1),
    .ce(1'b1),
    .dout(grp_fu_795_p2)
);

guitar_effects_fdiv_32ns_32ns_32_12_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_12_no_dsp_1_U35(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_799_p0),
    .din1(reg_831),
    .ce(1'b1),
    .dout(grp_fu_799_p2)
);

guitar_effects_sitofp_32ns_32_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32ns_32_4_no_dsp_1_U36(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_803_p0),
    .ce(1'b1),
    .dout(grp_fu_803_p1)
);

guitar_effects_sitofp_32ns_32_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32ns_32_4_no_dsp_1_U37(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(compression_min_threshold_read_reg_2344),
    .ce(1'b1),
    .dout(grp_fu_806_p1)
);

guitar_effects_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U38(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_848),
    .din1(64'd4602678819172646912),
    .ce(1'b1),
    .dout(grp_fu_811_p2)
);

guitar_effects_dmul_64ns_64ns_64_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_max_dsp_1_U39(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_816_p0),
    .din1(grp_fu_816_p1),
    .ce(1'b1),
    .dout(grp_fu_816_p2)
);

guitar_effects_ddiv_64ns_64ns_64_31_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_31_no_dsp_1_U40(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_848),
    .din1(64'd4680797471058690048),
    .ce(1'b1),
    .dout(grp_fu_823_p2)
);

guitar_effects_sitodp_32ns_64_5_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sitodp_32ns_64_5_no_dsp_1_U41(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_828_p0),
    .ce(1'b1),
    .dout(grp_fu_828_p1)
);

guitar_effects_mul_32s_8s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 40 ))
mul_32s_8s_40_1_1_U42(
    .din0(r_V_reg_2550),
    .din1(r_V_49_fu_1080_p1),
    .dout(r_V_49_fu_1080_p2)
);

guitar_effects_srem_32ns_10ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 32 ))
srem_32ns_10ns_32_36_seq_1_U43(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_1176_ap_start),
    .done(grp_fu_1176_ap_done),
    .din0(grp_fu_1176_p0),
    .din1(grp_fu_1176_p1),
    .ce(1'b1),
    .dout(grp_fu_1176_p2)
);

guitar_effects_mul_32s_8s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 40 ))
mul_32s_8s_40_1_1_U44(
    .din0(r_V_21_reg_2555),
    .din1(r_V_48_fu_1185_p1),
    .dout(r_V_48_fu_1185_p2)
);

guitar_effects_srem_11ns_10ns_9_15_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 15 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 9 ))
srem_11ns_10ns_9_15_seq_1_U45(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_1277_ap_start),
    .done(grp_fu_1277_ap_done),
    .din0(grp_fu_1277_p0),
    .din1(grp_fu_1277_p1),
    .ce(1'b1),
    .dout(grp_fu_1277_p2)
);

guitar_effects_srem_32ns_18ns_17_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 17 ))
srem_32ns_18ns_17_36_seq_1_U46(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_1640_ap_start),
    .done(grp_fu_1640_ap_done),
    .din0(grp_fu_1640_p0),
    .din1(grp_fu_1640_p1),
    .ce(1'b1),
    .dout(grp_fu_1640_p2)
);

guitar_effects_srem_32ns_18ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 32 ))
srem_32ns_18ns_32_36_seq_1_U47(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_1791_ap_start),
    .done(grp_fu_1791_ap_done),
    .din0(grp_fu_1791_p0),
    .din1(grp_fu_1791_p1),
    .ce(1'b1),
    .dout(grp_fu_1791_p2)
);

guitar_effects_srem_32ns_8ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 32 ))
srem_32ns_8ns_32_36_seq_1_U48(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_1988_ap_start),
    .done(grp_fu_1988_ap_done),
    .din0(grp_fu_1988_p0),
    .din1(grp_fu_1988_p1),
    .ce(grp_fu_1988_ce),
    .dout(grp_fu_1988_p2)
);

guitar_effects_mul_32s_9ns_41_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 41 ))
mul_32s_9ns_41_1_1_U49(
    .din0(result_V_21_reg_2761),
    .din1(mul_ln226_fu_2137_p1),
    .dout(mul_ln226_fu_2137_p2)
);

guitar_effects_srem_9ns_8ns_7_13_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 7 ))
srem_9ns_8ns_7_13_seq_1_U50(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_2206_ap_start),
    .done(grp_fu_2206_ap_done),
    .din0(grp_fu_2206_p0),
    .din1(grp_fu_2206_p1),
    .ce(1'b1),
    .dout(grp_fu_2206_p2)
);

guitar_effects_mul_32s_16s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 48 ))
mul_32s_16s_48_1_1_U51(
    .din0(r_V_46_reg_2811),
    .din1(gmem_addr_read_reg_2816),
    .dout(r_V_50_fu_2231_p2)
);

guitar_effects_regslice_both #(
    .DataWidth( 32 ))
regslice_both_INPUT_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TDATA),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_data_V_U_ack_in),
    .data_out(INPUT_r_TDATA_int_regslice),
    .vld_out(INPUT_r_TVALID_int_regslice),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_data_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 4 ))
regslice_both_INPUT_r_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TKEEP),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_keep_V_U_ack_in),
    .data_out(INPUT_r_TKEEP_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_keep_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_keep_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 4 ))
regslice_both_INPUT_r_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TSTRB),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_strb_V_U_ack_in),
    .data_out(INPUT_r_TSTRB_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_strb_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_strb_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 2 ))
regslice_both_INPUT_r_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TUSER),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_user_V_U_ack_in),
    .data_out(INPUT_r_TUSER_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_user_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_user_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 1 ))
regslice_both_INPUT_r_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TLAST),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_last_V_U_ack_in),
    .data_out(INPUT_r_TLAST_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_last_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_last_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 5 ))
regslice_both_INPUT_r_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TID),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_id_V_U_ack_in),
    .data_out(INPUT_r_TID_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_id_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_id_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 6 ))
regslice_both_INPUT_r_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TDEST),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_dest_V_U_ack_in),
    .data_out(INPUT_r_TDEST_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_dest_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_dest_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 32 ))
regslice_both_OUTPUT_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_int_7_reg_760),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(OUTPUT_r_TREADY_int_regslice),
    .data_out(OUTPUT_r_TDATA),
    .vld_out(regslice_both_OUTPUT_r_V_data_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_data_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 4 ))
regslice_both_OUTPUT_r_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_keep_V_reg_2498),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_keep_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TKEEP),
    .vld_out(regslice_both_OUTPUT_r_V_keep_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_keep_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 4 ))
regslice_both_OUTPUT_r_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_strb_V_reg_2503),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_strb_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TSTRB),
    .vld_out(regslice_both_OUTPUT_r_V_strb_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_strb_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 2 ))
regslice_both_OUTPUT_r_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_user_V_reg_2508),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_user_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TUSER),
    .vld_out(regslice_both_OUTPUT_r_V_user_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_user_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 1 ))
regslice_both_OUTPUT_r_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(OUTPUT_r_TLAST_int_regslice),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_last_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TLAST),
    .vld_out(regslice_both_OUTPUT_r_V_last_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_last_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 5 ))
regslice_both_OUTPUT_r_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_id_V_reg_2517),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_id_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TID),
    .vld_out(regslice_both_OUTPUT_r_V_id_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_id_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 6 ))
regslice_both_OUTPUT_r_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_dest_V_reg_2522),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_dest_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TDEST),
    .vld_out(regslice_both_OUTPUT_r_V_dest_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_sin_or_cos_double_s_fu_774_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state207)) begin
            grp_sin_or_cos_double_s_fu_774_ap_start_reg <= 1'b1;
        end else if ((grp_sin_or_cos_double_s_fu_774_ap_ready == 1'b1)) begin
            grp_sin_or_cos_double_s_fu_774_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3524_fu_932_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        axilite_out_local_0_fu_342 <= 32'd0;
    end else if ((~((1'b1 == ap_block_state250_io) | ((tmp_last_V_reg_2513 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2513 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice))) & (tmp_last_V_reg_2513 == 1'd0) & (1'b1 == ap_CS_fsm_state250))) begin
        axilite_out_local_0_fu_342 <= axilite_out_local_4_reg_739;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln137_fu_1062_p2 == 1'd0) & (icmp_ln135_fu_1057_p2 == 1'd0) & (tmp_reg_2445 == 1'd1) & (1'b1 == INPUT_r_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state9))) begin
        axilite_out_local_1_reg_564 <= or_ln90_fu_1051_p2;
    end else if ((((icmp_ln137_reg_2546 == 1'd1) & (icmp_ln135_reg_2542 == 1'd0) & (tmp_reg_2445 == 1'd1) & (1'b1 == ap_CS_fsm_state11)) | ((icmp_ln135_reg_2542 == 1'd1) & (tmp_reg_2445 == 1'd1) & (1'b1 == ap_CS_fsm_state11)))) begin
        axilite_out_local_1_reg_564 <= or_ln90_reg_2532;
    end else if (((tmp_reg_2445 == 1'd0) & (1'b1 == INPUT_r_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state9))) begin
        axilite_out_local_1_reg_564 <= axilite_out_local_0_fu_342;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln173_fu_1295_p2 == 1'd0) & (icmp_ln159_fu_1256_p2 == 1'd1) & (1'd0 == and_ln182_1_fu_1322_p2) & (1'b1 == ap_CS_fsm_state48)) | ((icmp_ln173_reg_2650 == 1'd0) & (tmp_11_reg_2449 == 1'd1) & (1'd1 == and_ln182_1_reg_2658) & (1'b1 == ap_CS_fsm_state96)) | ((icmp_ln183_fu_1300_p2 == 1'd0) & (icmp_ln173_fu_1295_p2 == 1'd1) & (icmp_ln159_fu_1256_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48)) | ((icmp_ln183_reg_2654 == 1'd1) & (icmp_ln173_reg_2650 == 1'd1) & (tmp_11_reg_2449 == 1'd1) & (1'b1 == ap_CS_fsm_state96)))) begin
        axilite_out_local_2_reg_629 <= or_ln95_reg_2602;
    end else if (((tmp_11_reg_2449 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        axilite_out_local_2_reg_629 <= ap_phi_mux_axilite_out_local_1_phi_fu_567_p8;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_13_reg_2453 == 1'd1) & (1'b1 == ap_CS_fsm_state161))) begin
        axilite_out_local_3_reg_682 <= or_ln100_fu_1924_p2;
    end else if (((tmp_13_reg_2453 == 1'd0) & (1'b1 == ap_CS_fsm_state96))) begin
        axilite_out_local_3_reg_682 <= ap_phi_mux_axilite_out_local_2_phi_fu_632_p10;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln226_fu_2185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state234))) begin
        axilite_out_local_4_reg_739 <= or_ln105_reg_2777;
    end else if (((trunc_ln23_reg_2373 == 1'd0) & (1'b1 == ap_CS_fsm_state161))) begin
        axilite_out_local_4_reg_739 <= ap_phi_mux_axilite_out_local_3_phi_fu_685_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3524_fu_932_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        compression_buffer_index_fu_338 <= 32'd0;
    end else if ((((icmp_ln173_fu_1295_p2 == 1'd0) & (icmp_ln159_fu_1256_p2 == 1'd1) & (1'd1 == and_ln182_1_fu_1322_p2) & (1'b1 == ap_CS_fsm_state48)) | ((icmp_ln173_fu_1295_p2 == 1'd0) & (icmp_ln159_fu_1256_p2 == 1'd1) & (1'd0 == and_ln182_1_fu_1322_p2) & (1'b1 == ap_CS_fsm_state48)) | ((icmp_ln183_fu_1300_p2 == 1'd1) & (icmp_ln173_fu_1295_p2 == 1'd1) & (icmp_ln159_fu_1256_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48)) | ((icmp_ln183_fu_1300_p2 == 1'd0) & (icmp_ln173_fu_1295_p2 == 1'd1) & (icmp_ln159_fu_1256_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48)))) begin
        compression_buffer_index_fu_338 <= compression_buffer_index_1_reg_2614;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3524_fu_932_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        current_sample_1_fu_322 <= 32'd0;
    end else if ((~((1'b1 == ap_block_state250_io) | ((tmp_last_V_reg_2513 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2513 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice))) & (tmp_last_V_reg_2513 == 1'd0) & (1'b1 == ap_CS_fsm_state250))) begin
        current_sample_1_fu_322 <= current_sample_reg_2527;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3524_fu_932_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        delay_buffer_index_fu_334 <= 32'd0;
    end else if (((tmp_13_reg_2453 == 1'd1) & (1'b1 == ap_CS_fsm_state161))) begin
        delay_buffer_index_fu_334 <= grp_fu_1791_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3588_fu_872_p2 == 1'd1))) begin
        empty_71_fu_314 <= 17'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond3535_fu_902_p2 == 1'd0))) begin
        empty_71_fu_314 <= empty_73_fu_908_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond3535_fu_902_p2 == 1'd1))) begin
        empty_74_fu_318 <= 7'd0;
    end else if (((exitcond3524_fu_932_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        empty_74_fu_318 <= empty_76_fu_938_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3524_fu_932_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        empty_77_fu_326 <= 32'd0;
    end else if ((~((1'b1 == ap_block_state250_io) | ((tmp_last_V_reg_2513 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2513 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice))) & (tmp_last_V_reg_2513 == 1'd0) & (1'b1 == ap_CS_fsm_state250))) begin
        empty_77_fu_326 <= empty_86_reg_750;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln137_fu_1062_p2 == 1'd0) & (icmp_ln135_fu_1057_p2 == 1'd0) & (tmp_reg_2445 == 1'd1) & (1'b1 == INPUT_r_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state9))) begin
        empty_79_reg_578 <= or_ln90_fu_1051_p2;
    end else if ((((icmp_ln137_reg_2546 == 1'd1) & (icmp_ln135_reg_2542 == 1'd0) & (tmp_reg_2445 == 1'd1) & (1'b1 == ap_CS_fsm_state11)) | ((icmp_ln135_reg_2542 == 1'd1) & (tmp_reg_2445 == 1'd1) & (1'b1 == ap_CS_fsm_state11)))) begin
        empty_79_reg_578 <= or_ln90_reg_2532;
    end else if (((tmp_reg_2445 == 1'd0) & (1'b1 == INPUT_r_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state9))) begin
        empty_79_reg_578 <= empty_77_fu_326;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        empty_80_reg_617 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        empty_80_reg_617 <= result_V_18_fu_1484_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln173_fu_1295_p2 == 1'd0) & (icmp_ln159_fu_1256_p2 == 1'd1) & (1'd0 == and_ln182_1_fu_1322_p2) & (1'b1 == ap_CS_fsm_state48)) | ((icmp_ln173_reg_2650 == 1'd0) & (tmp_11_reg_2449 == 1'd1) & (1'd1 == and_ln182_1_reg_2658) & (1'b1 == ap_CS_fsm_state96)) | ((icmp_ln183_fu_1300_p2 == 1'd0) & (icmp_ln173_fu_1295_p2 == 1'd1) & (icmp_ln159_fu_1256_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48)) | ((icmp_ln183_reg_2654 == 1'd1) & (icmp_ln173_reg_2650 == 1'd1) & (tmp_11_reg_2449 == 1'd1) & (1'b1 == ap_CS_fsm_state96)))) begin
        empty_82_reg_646 <= or_ln95_reg_2602;
    end else if (((tmp_11_reg_2449 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        empty_82_reg_646 <= ap_phi_mux_empty_79_phi_fu_581_p8;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_13_reg_2453 == 1'd1) & (1'b1 == ap_CS_fsm_state161))) begin
        empty_83_reg_693 <= or_ln100_fu_1924_p2;
    end else if (((tmp_13_reg_2453 == 1'd0) & (1'b1 == ap_CS_fsm_state96))) begin
        empty_83_reg_693 <= ap_phi_mux_empty_82_phi_fu_649_p10;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln226_fu_2185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state234))) begin
        empty_86_reg_750 <= or_ln105_reg_2777;
    end else if (((trunc_ln23_reg_2373 == 1'd0) & (1'b1 == ap_CS_fsm_state161))) begin
        empty_86_reg_750 <= ap_phi_mux_empty_83_phi_fu_696_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_fu_298 <= 9'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond3588_fu_872_p2 == 1'd0))) begin
        empty_fu_298 <= empty_70_fu_878_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state233)) begin
        i_7_reg_716 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state249)) begin
        i_7_reg_716 <= add_ln226_1_reg_2796;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        i_reg_606 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        i_reg_606 <= add_ln159_reg_2630;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln173_reg_2650 == 1'd0) & (tmp_11_reg_2449 == 1'd1) & (1'd1 == and_ln182_1_reg_2658) & (1'b1 == ap_CS_fsm_state96))) begin
        tmp_int_3_reg_663 <= result_V_reg_2687;
    end else if ((((icmp_ln173_fu_1295_p2 == 1'd0) & (icmp_ln159_fu_1256_p2 == 1'd1) & (1'd0 == and_ln182_1_fu_1322_p2) & (1'b1 == ap_CS_fsm_state48)) | ((icmp_ln183_fu_1300_p2 == 1'd0) & (icmp_ln173_fu_1295_p2 == 1'd1) & (icmp_ln159_fu_1256_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48)))) begin
        tmp_int_3_reg_663 <= tmp_int_6_reg_592;
    end else if (((icmp_ln183_reg_2654 == 1'd1) & (icmp_ln173_reg_2650 == 1'd1) & (tmp_11_reg_2449 == 1'd1) & (1'b1 == ap_CS_fsm_state96))) begin
        tmp_int_3_reg_663 <= result_V_19_reg_2700;
    end else if (((tmp_11_reg_2449 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        tmp_int_3_reg_663 <= ap_phi_mux_tmp_int_6_phi_fu_595_p8;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln137_reg_2546 == 1'd1) & (icmp_ln135_reg_2542 == 1'd0) & (tmp_reg_2445 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        tmp_int_6_reg_592 <= result_1_fu_1130_p2;
    end else if (((icmp_ln135_reg_2542 == 1'd1) & (tmp_reg_2445 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        tmp_int_6_reg_592 <= result_fu_1161_p2;
    end else if ((((icmp_ln137_fu_1062_p2 == 1'd0) & (icmp_ln135_fu_1057_p2 == 1'd0) & (tmp_reg_2445 == 1'd1) & (1'b1 == INPUT_r_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state9)) | ((tmp_reg_2445 == 1'd0) & (1'b1 == INPUT_r_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state9)))) begin
        tmp_int_6_reg_592 <= INPUT_r_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln226_fu_2185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state234))) begin
        tmp_int_7_reg_760 <= result_2_reg_727;
    end else if (((trunc_ln23_reg_2373 == 1'd0) & (1'b1 == ap_CS_fsm_state161))) begin
        tmp_int_7_reg_760 <= ap_phi_mux_tmp_int_phi_fu_708_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_13_reg_2453 == 1'd1) & (1'b1 == ap_CS_fsm_state161))) begin
        tmp_int_reg_704 <= output_fu_1951_p2;
    end else if (((tmp_13_reg_2453 == 1'd0) & (1'b1 == ap_CS_fsm_state96))) begin
        tmp_int_reg_704 <= ap_phi_mux_tmp_int_3_phi_fu_666_p10;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3524_fu_932_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        wah_buffer_index_fu_330 <= 32'd0;
    end else if (((icmp_ln226_fu_2185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state234))) begin
        wah_buffer_index_fu_330 <= wah_buffer_index_1_reg_2783;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state218)) begin
        add5_i_reg_2756 <= grp_fu_811_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        add_ln159_reg_2630 <= add_ln159_fu_1262_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state234)) begin
        add_ln226_1_reg_2796 <= add_ln226_1_fu_2191_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln173_fu_1295_p2 == 1'd0) & (icmp_ln159_fu_1256_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
        and_ln182_1_reg_2658 <= and_ln182_1_fu_1322_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        compression_buffer_index_1_reg_2614 <= grp_fu_1176_p2;
        or_ln95_reg_2602[1 : 0] <= or_ln95_fu_1237_p2[1 : 0];
or_ln95_reg_2602[31 : 3] <= or_ln95_fu_1237_p2[31 : 3];
        sext_ln61_reg_2622 <= sext_ln61_fu_1247_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        compression_buffer_load_reg_2672 <= compression_buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        compression_max_threshold_read_reg_2338 <= compression_max_threshold;
        compression_min_threshold_read_reg_2344 <= compression_min_threshold;
        compression_zero_threshold_read_reg_2333 <= compression_zero_threshold;
        control_read_reg_2366 <= control;
        delay_mult_read_reg_2328 <= delay_mult;
        delay_samples_read_reg_2323 <= delay_samples;
        distortion_clip_factor_read_reg_2351 <= distortion_clip_factor;
        distortion_threshold_read_reg_2356 <= distortion_threshold;
        tempo_read_reg_2318 <= tempo;
        trunc_ln23_reg_2373 <= trunc_ln23_fu_855_p1;
        wah_coeffs_read_reg_2313 <= wah_coeffs;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv18_i_reg_2473 <= grp_fu_803_p1;
        conv2_i_reg_2468 <= grp_fu_828_p1;
        conv30_i_reg_2478 <= grp_fu_806_p1;
        conv7_i_i_i_reg_2462 <= conv7_i_i_i_fu_1005_p1;
        negative_threshold_reg_2457 <= negative_threshold_fu_1000_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state165)) begin
        conv_i2_reg_2736 <= grp_fu_828_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln159_fu_1256_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
        current_level_reg_2645 <= current_level_fu_1288_p3;
        icmp_ln173_reg_2650 <= icmp_ln173_fu_1295_p2;
        icmp_ln183_reg_2654 <= icmp_ln183_fu_1300_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        current_sample_reg_2527 <= current_sample_fu_1045_p2;
        tmp_dest_V_reg_2522 <= INPUT_r_TDEST_int_regslice;
        tmp_id_V_reg_2517 <= INPUT_r_TID_int_regslice;
        tmp_keep_V_reg_2498 <= INPUT_r_TKEEP_int_regslice;
        tmp_last_V_reg_2513 <= INPUT_r_TLAST_int_regslice;
        tmp_strb_V_reg_2503 <= INPUT_r_TSTRB_int_regslice;
        tmp_user_V_reg_2508 <= INPUT_r_TUSER_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state160)) begin
        data_V_3_reg_2720 <= data_V_3_fu_1806_p1;
        val_3_reg_2725 <= val_3_fu_1916_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        dc_reg_2677 <= grp_fu_791_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state152)) begin
        delay_buffer_load_reg_2715 <= delay_buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state247)) begin
        gmem_addr_read_reg_2816 <= gmem_RDATA;
        r_V_46_reg_2811 <= wah_values_buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state226)) begin
        gmem_addr_reg_2771 <= sext_ln226_fu_2161_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        icmp_ln1049_1_reg_2572 <= icmp_ln1049_1_fu_1099_p2;
        r_V_49_reg_2560 <= r_V_49_fu_1080_p2;
        ret_V_9_cast_reg_2565 <= {{r_V_49_fu_1080_p2[38:7]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        icmp_ln1049_reg_2597 <= icmp_ln1049_fu_1204_p2;
        r_V_48_reg_2585 <= r_V_48_fu_1185_p2;
        ret_V_cast_reg_2590 <= {{r_V_48_fu_1185_p2[38:7]}};
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_2445 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        icmp_ln135_reg_2542 <= icmp_ln135_fu_1057_p2;
        or_ln90_reg_2532[2 : 0] <= or_ln90_fu_1051_p2[2 : 0];
or_ln90_reg_2532[31 : 4] <= or_ln90_fu_1051_p2[31 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln135_fu_1057_p2 == 1'd0) & (tmp_reg_2445 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        icmp_ln137_reg_2546 <= icmp_ln137_fu_1062_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        lpf_coefficients_load_reg_2662 <= lpf_coefficients_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state225)) begin
        mul_ln226_reg_2766 <= mul_ln226_fu_2137_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state233)) begin
        or_ln105_reg_2777[31 : 1] <= or_ln105_fu_2171_p2[31 : 1];
        sext_ln73_reg_2788 <= sext_ln73_fu_2181_p1;
        wah_buffer_index_1_reg_2783 <= grp_fu_1988_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln135_fu_1057_p2 == 1'd1) & (tmp_reg_2445 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        r_V_21_reg_2555 <= r_V_21_fu_1072_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state248)) begin
        r_V_50_reg_2821 <= r_V_50_fu_2231_p2;
        ret_V_12_reg_2826 <= {{r_V_50_fu_2231_p2[47:32]}};
        trunc_ln1049_2_reg_2833 <= trunc_ln1049_2_fu_2247_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln137_fu_1062_p2 == 1'd1) & (icmp_ln135_fu_1057_p2 == 1'd0) & (tmp_reg_2445 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        r_V_reg_2550 <= r_V_fu_1067_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state156) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state67))) begin
        reg_831 <= grp_fu_803_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state159) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state70))) begin
        reg_838 <= grp_fu_795_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state91))) begin
        reg_843 <= grp_fu_799_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state223) | (1'b1 == ap_CS_fsm_state213) | (1'b1 == ap_CS_fsm_state175) | (1'b1 == ap_CS_fsm_state170))) begin
        reg_848 <= grp_fu_816_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state249)) begin
        result_2_reg_727 <= result_3_fu_2286_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state116)) begin
        result_V_19_reg_2700 <= result_V_19_fu_1778_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state224)) begin
        result_V_21_reg_2761 <= result_V_21_fu_2126_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        result_V_reg_2687 <= result_V_fu_1624_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3524_fu_932_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_11_reg_2449 <= control_read_reg_2366[32'd2];
        tmp_13_reg_2453 <= control_read_reg_2366[32'd1];
        tmp_reg_2445 <= control_read_reg_2366[32'd3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state208)) begin
        tmp_2_reg_2751 <= grp_sin_or_cos_double_s_fu_774_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state206)) begin
        x_assign_reg_2746 <= grp_fu_823_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        INPUT_r_TDATA_blk_n = INPUT_r_TVALID_int_regslice;
    end else begin
        INPUT_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == INPUT_r_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state9))) begin
        INPUT_r_TREADY_int_regslice = 1'b1;
    end else begin
        INPUT_r_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state252) | (1'b1 == ap_CS_fsm_state251) | ((tmp_last_V_reg_2513 == 1'd1) & (1'b1 == ap_CS_fsm_state250)) | ((tmp_last_V_reg_2513 == 1'd0) & (1'b1 == ap_CS_fsm_state250)))) begin
        OUTPUT_r_TDATA_blk_n = OUTPUT_r_TREADY_int_regslice;
    end else begin
        OUTPUT_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_3887)) begin
        if ((tmp_last_V_reg_2513 == 1'd1)) begin
            OUTPUT_r_TLAST_int_regslice = 1'd1;
        end else if ((tmp_last_V_reg_2513 == 1'd0)) begin
            OUTPUT_r_TLAST_int_regslice = 1'd0;
        end else begin
            OUTPUT_r_TLAST_int_regslice = 'bx;
        end
    end else begin
        OUTPUT_r_TLAST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state250_io) | ((tmp_last_V_reg_2513 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2513 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice))) & (tmp_last_V_reg_2513 == 1'd1) & (1'b1 == ap_CS_fsm_state250)) | (~((1'b1 == ap_block_state250_io) | ((tmp_last_V_reg_2513 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2513 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice))) & (tmp_last_V_reg_2513 == 1'd0) & (1'b1 == ap_CS_fsm_state250)))) begin
        OUTPUT_r_TVALID_int_regslice = 1'b1;
    end else begin
        OUTPUT_r_TVALID_int_regslice = 1'b0;
    end
end

assign ap_ST_fsm_state100_blk = 1'b0;

assign ap_ST_fsm_state101_blk = 1'b0;

assign ap_ST_fsm_state102_blk = 1'b0;

assign ap_ST_fsm_state103_blk = 1'b0;

assign ap_ST_fsm_state104_blk = 1'b0;

assign ap_ST_fsm_state105_blk = 1'b0;

assign ap_ST_fsm_state106_blk = 1'b0;

assign ap_ST_fsm_state107_blk = 1'b0;

assign ap_ST_fsm_state108_blk = 1'b0;

assign ap_ST_fsm_state109_blk = 1'b0;

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state110_blk = 1'b0;

assign ap_ST_fsm_state111_blk = 1'b0;

assign ap_ST_fsm_state112_blk = 1'b0;

assign ap_ST_fsm_state113_blk = 1'b0;

assign ap_ST_fsm_state114_blk = 1'b0;

assign ap_ST_fsm_state115_blk = 1'b0;

assign ap_ST_fsm_state116_blk = 1'b0;

assign ap_ST_fsm_state117_blk = 1'b0;

assign ap_ST_fsm_state118_blk = 1'b0;

assign ap_ST_fsm_state119_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state120_blk = 1'b0;

assign ap_ST_fsm_state121_blk = 1'b0;

assign ap_ST_fsm_state122_blk = 1'b0;

assign ap_ST_fsm_state123_blk = 1'b0;

assign ap_ST_fsm_state124_blk = 1'b0;

assign ap_ST_fsm_state125_blk = 1'b0;

assign ap_ST_fsm_state126_blk = 1'b0;

assign ap_ST_fsm_state127_blk = 1'b0;

assign ap_ST_fsm_state128_blk = 1'b0;

assign ap_ST_fsm_state129_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state130_blk = 1'b0;

assign ap_ST_fsm_state131_blk = 1'b0;

assign ap_ST_fsm_state132_blk = 1'b0;

assign ap_ST_fsm_state133_blk = 1'b0;

assign ap_ST_fsm_state134_blk = 1'b0;

assign ap_ST_fsm_state135_blk = 1'b0;

assign ap_ST_fsm_state136_blk = 1'b0;

assign ap_ST_fsm_state137_blk = 1'b0;

assign ap_ST_fsm_state138_blk = 1'b0;

assign ap_ST_fsm_state139_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state140_blk = 1'b0;

assign ap_ST_fsm_state141_blk = 1'b0;

assign ap_ST_fsm_state142_blk = 1'b0;

assign ap_ST_fsm_state143_blk = 1'b0;

assign ap_ST_fsm_state144_blk = 1'b0;

assign ap_ST_fsm_state145_blk = 1'b0;

assign ap_ST_fsm_state146_blk = 1'b0;

assign ap_ST_fsm_state147_blk = 1'b0;

assign ap_ST_fsm_state148_blk = 1'b0;

assign ap_ST_fsm_state149_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state150_blk = 1'b0;

assign ap_ST_fsm_state151_blk = 1'b0;

assign ap_ST_fsm_state152_blk = 1'b0;

assign ap_ST_fsm_state153_blk = 1'b0;

assign ap_ST_fsm_state154_blk = 1'b0;

assign ap_ST_fsm_state155_blk = 1'b0;

assign ap_ST_fsm_state156_blk = 1'b0;

assign ap_ST_fsm_state157_blk = 1'b0;

assign ap_ST_fsm_state158_blk = 1'b0;

assign ap_ST_fsm_state159_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state160_blk = 1'b0;

assign ap_ST_fsm_state161_blk = 1'b0;

assign ap_ST_fsm_state162_blk = 1'b0;

assign ap_ST_fsm_state163_blk = 1'b0;

assign ap_ST_fsm_state164_blk = 1'b0;

assign ap_ST_fsm_state165_blk = 1'b0;

assign ap_ST_fsm_state166_blk = 1'b0;

assign ap_ST_fsm_state167_blk = 1'b0;

assign ap_ST_fsm_state168_blk = 1'b0;

assign ap_ST_fsm_state169_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state170_blk = 1'b0;

assign ap_ST_fsm_state171_blk = 1'b0;

assign ap_ST_fsm_state172_blk = 1'b0;

assign ap_ST_fsm_state173_blk = 1'b0;

assign ap_ST_fsm_state174_blk = 1'b0;

assign ap_ST_fsm_state175_blk = 1'b0;

assign ap_ST_fsm_state176_blk = 1'b0;

assign ap_ST_fsm_state177_blk = 1'b0;

assign ap_ST_fsm_state178_blk = 1'b0;

assign ap_ST_fsm_state179_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state180_blk = 1'b0;

assign ap_ST_fsm_state181_blk = 1'b0;

assign ap_ST_fsm_state182_blk = 1'b0;

assign ap_ST_fsm_state183_blk = 1'b0;

assign ap_ST_fsm_state184_blk = 1'b0;

assign ap_ST_fsm_state185_blk = 1'b0;

assign ap_ST_fsm_state186_blk = 1'b0;

assign ap_ST_fsm_state187_blk = 1'b0;

assign ap_ST_fsm_state188_blk = 1'b0;

assign ap_ST_fsm_state189_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state190_blk = 1'b0;

assign ap_ST_fsm_state191_blk = 1'b0;

assign ap_ST_fsm_state192_blk = 1'b0;

assign ap_ST_fsm_state193_blk = 1'b0;

assign ap_ST_fsm_state194_blk = 1'b0;

assign ap_ST_fsm_state195_blk = 1'b0;

assign ap_ST_fsm_state196_blk = 1'b0;

assign ap_ST_fsm_state197_blk = 1'b0;

assign ap_ST_fsm_state198_blk = 1'b0;

assign ap_ST_fsm_state199_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

assign ap_ST_fsm_state1_blk = 1'b0;

assign ap_ST_fsm_state200_blk = 1'b0;

assign ap_ST_fsm_state201_blk = 1'b0;

assign ap_ST_fsm_state202_blk = 1'b0;

assign ap_ST_fsm_state203_blk = 1'b0;

assign ap_ST_fsm_state204_blk = 1'b0;

assign ap_ST_fsm_state205_blk = 1'b0;

assign ap_ST_fsm_state206_blk = 1'b0;

assign ap_ST_fsm_state207_blk = 1'b0;

always @ (*) begin
    if ((grp_sin_or_cos_double_s_fu_774_ap_done == 1'b0)) begin
        ap_ST_fsm_state208_blk = 1'b1;
    end else begin
        ap_ST_fsm_state208_blk = 1'b0;
    end
end

assign ap_ST_fsm_state209_blk = 1'b0;

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state210_blk = 1'b0;

assign ap_ST_fsm_state211_blk = 1'b0;

assign ap_ST_fsm_state212_blk = 1'b0;

assign ap_ST_fsm_state213_blk = 1'b0;

assign ap_ST_fsm_state214_blk = 1'b0;

assign ap_ST_fsm_state215_blk = 1'b0;

assign ap_ST_fsm_state216_blk = 1'b0;

assign ap_ST_fsm_state217_blk = 1'b0;

assign ap_ST_fsm_state218_blk = 1'b0;

assign ap_ST_fsm_state219_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state220_blk = 1'b0;

assign ap_ST_fsm_state221_blk = 1'b0;

assign ap_ST_fsm_state222_blk = 1'b0;

assign ap_ST_fsm_state223_blk = 1'b0;

assign ap_ST_fsm_state224_blk = 1'b0;

assign ap_ST_fsm_state225_blk = 1'b0;

assign ap_ST_fsm_state226_blk = 1'b0;

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state227_blk = 1'b1;
    end else begin
        ap_ST_fsm_state227_blk = 1'b0;
    end
end

assign ap_ST_fsm_state228_blk = 1'b0;

assign ap_ST_fsm_state229_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state230_blk = 1'b0;

assign ap_ST_fsm_state231_blk = 1'b0;

assign ap_ST_fsm_state232_blk = 1'b0;

assign ap_ST_fsm_state233_blk = 1'b0;

assign ap_ST_fsm_state234_blk = 1'b0;

assign ap_ST_fsm_state235_blk = 1'b0;

assign ap_ST_fsm_state236_blk = 1'b0;

assign ap_ST_fsm_state237_blk = 1'b0;

assign ap_ST_fsm_state238_blk = 1'b0;

assign ap_ST_fsm_state239_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state240_blk = 1'b0;

assign ap_ST_fsm_state241_blk = 1'b0;

assign ap_ST_fsm_state242_blk = 1'b0;

assign ap_ST_fsm_state243_blk = 1'b0;

assign ap_ST_fsm_state244_blk = 1'b0;

assign ap_ST_fsm_state245_blk = 1'b0;

assign ap_ST_fsm_state246_blk = 1'b0;

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state247_blk = 1'b1;
    end else begin
        ap_ST_fsm_state247_blk = 1'b0;
    end
end

assign ap_ST_fsm_state248_blk = 1'b0;

assign ap_ST_fsm_state249_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_block_state250_io) | ((tmp_last_V_reg_2513 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2513 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice)))) begin
        ap_ST_fsm_state250_blk = 1'b1;
    end else begin
        ap_ST_fsm_state250_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == OUTPUT_r_TREADY_int_regslice)) begin
        ap_ST_fsm_state251_blk = 1'b1;
    end else begin
        ap_ST_fsm_state251_blk = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_OUTPUT_r_V_data_V_U_apdone_blk == 1'b1) | (1'b0 == OUTPUT_r_TREADY_int_regslice))) begin
        ap_ST_fsm_state252_blk = 1'b1;
    end else begin
        ap_ST_fsm_state252_blk = 1'b0;
    end
end

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

assign ap_ST_fsm_state75_blk = 1'b0;

assign ap_ST_fsm_state76_blk = 1'b0;

assign ap_ST_fsm_state77_blk = 1'b0;

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state80_blk = 1'b0;

assign ap_ST_fsm_state81_blk = 1'b0;

assign ap_ST_fsm_state82_blk = 1'b0;

assign ap_ST_fsm_state83_blk = 1'b0;

assign ap_ST_fsm_state84_blk = 1'b0;

assign ap_ST_fsm_state85_blk = 1'b0;

assign ap_ST_fsm_state86_blk = 1'b0;

assign ap_ST_fsm_state87_blk = 1'b0;

assign ap_ST_fsm_state88_blk = 1'b0;

assign ap_ST_fsm_state89_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state90_blk = 1'b0;

assign ap_ST_fsm_state91_blk = 1'b0;

assign ap_ST_fsm_state92_blk = 1'b0;

assign ap_ST_fsm_state93_blk = 1'b0;

assign ap_ST_fsm_state94_blk = 1'b0;

assign ap_ST_fsm_state95_blk = 1'b0;

assign ap_ST_fsm_state96_blk = 1'b0;

assign ap_ST_fsm_state97_blk = 1'b0;

assign ap_ST_fsm_state98_blk = 1'b0;

assign ap_ST_fsm_state99_blk = 1'b0;

always @ (*) begin
    if ((1'b0 == INPUT_r_TVALID_int_regslice)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln137_reg_2546 == 1'd1) & (icmp_ln135_reg_2542 == 1'd0) & (tmp_reg_2445 == 1'd1) & (1'b1 == ap_CS_fsm_state11)) | ((icmp_ln135_reg_2542 == 1'd1) & (tmp_reg_2445 == 1'd1) & (1'b1 == ap_CS_fsm_state11)))) begin
        ap_phi_mux_axilite_out_local_1_phi_fu_567_p8 = or_ln90_reg_2532;
    end else begin
        ap_phi_mux_axilite_out_local_1_phi_fu_567_p8 = axilite_out_local_1_reg_564;
    end
end

always @ (*) begin
    if ((((icmp_ln173_reg_2650 == 1'd0) & (tmp_11_reg_2449 == 1'd1) & (1'd1 == and_ln182_1_reg_2658) & (1'b1 == ap_CS_fsm_state96)) | ((icmp_ln183_reg_2654 == 1'd1) & (icmp_ln173_reg_2650 == 1'd1) & (tmp_11_reg_2449 == 1'd1) & (1'b1 == ap_CS_fsm_state96)))) begin
        ap_phi_mux_axilite_out_local_2_phi_fu_632_p10 = or_ln95_reg_2602;
    end else begin
        ap_phi_mux_axilite_out_local_2_phi_fu_632_p10 = axilite_out_local_2_reg_629;
    end
end

always @ (*) begin
    if (((tmp_13_reg_2453 == 1'd1) & (1'b1 == ap_CS_fsm_state161))) begin
        ap_phi_mux_axilite_out_local_3_phi_fu_685_p4 = or_ln100_fu_1924_p2;
    end else begin
        ap_phi_mux_axilite_out_local_3_phi_fu_685_p4 = axilite_out_local_3_reg_682;
    end
end

always @ (*) begin
    if ((((icmp_ln137_reg_2546 == 1'd1) & (icmp_ln135_reg_2542 == 1'd0) & (tmp_reg_2445 == 1'd1) & (1'b1 == ap_CS_fsm_state11)) | ((icmp_ln135_reg_2542 == 1'd1) & (tmp_reg_2445 == 1'd1) & (1'b1 == ap_CS_fsm_state11)))) begin
        ap_phi_mux_empty_79_phi_fu_581_p8 = or_ln90_reg_2532;
    end else begin
        ap_phi_mux_empty_79_phi_fu_581_p8 = empty_79_reg_578;
    end
end

always @ (*) begin
    if ((((icmp_ln173_reg_2650 == 1'd0) & (tmp_11_reg_2449 == 1'd1) & (1'd1 == and_ln182_1_reg_2658) & (1'b1 == ap_CS_fsm_state96)) | ((icmp_ln183_reg_2654 == 1'd1) & (icmp_ln173_reg_2650 == 1'd1) & (tmp_11_reg_2449 == 1'd1) & (1'b1 == ap_CS_fsm_state96)))) begin
        ap_phi_mux_empty_82_phi_fu_649_p10 = or_ln95_reg_2602;
    end else begin
        ap_phi_mux_empty_82_phi_fu_649_p10 = empty_82_reg_646;
    end
end

always @ (*) begin
    if (((tmp_13_reg_2453 == 1'd1) & (1'b1 == ap_CS_fsm_state161))) begin
        ap_phi_mux_empty_83_phi_fu_696_p4 = or_ln100_fu_1924_p2;
    end else begin
        ap_phi_mux_empty_83_phi_fu_696_p4 = empty_83_reg_693;
    end
end

always @ (*) begin
    if (((tmp_11_reg_2449 == 1'd1) & (1'b1 == ap_CS_fsm_state96))) begin
        if (((icmp_ln173_reg_2650 == 1'd0) & (1'd1 == and_ln182_1_reg_2658))) begin
            ap_phi_mux_tmp_int_3_phi_fu_666_p10 = result_V_reg_2687;
        end else if (((icmp_ln183_reg_2654 == 1'd1) & (icmp_ln173_reg_2650 == 1'd1))) begin
            ap_phi_mux_tmp_int_3_phi_fu_666_p10 = result_V_19_reg_2700;
        end else begin
            ap_phi_mux_tmp_int_3_phi_fu_666_p10 = tmp_int_3_reg_663;
        end
    end else begin
        ap_phi_mux_tmp_int_3_phi_fu_666_p10 = tmp_int_3_reg_663;
    end
end

always @ (*) begin
    if (((tmp_reg_2445 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        if (((icmp_ln137_reg_2546 == 1'd1) & (icmp_ln135_reg_2542 == 1'd0))) begin
            ap_phi_mux_tmp_int_6_phi_fu_595_p8 = result_1_fu_1130_p2;
        end else if ((icmp_ln135_reg_2542 == 1'd1)) begin
            ap_phi_mux_tmp_int_6_phi_fu_595_p8 = result_fu_1161_p2;
        end else begin
            ap_phi_mux_tmp_int_6_phi_fu_595_p8 = tmp_int_6_reg_592;
        end
    end else begin
        ap_phi_mux_tmp_int_6_phi_fu_595_p8 = tmp_int_6_reg_592;
    end
end

always @ (*) begin
    if (((tmp_13_reg_2453 == 1'd1) & (1'b1 == ap_CS_fsm_state161))) begin
        ap_phi_mux_tmp_int_phi_fu_708_p4 = output_fu_1951_p2;
    end else begin
        ap_phi_mux_tmp_int_phi_fu_708_p4 = tmp_int_reg_704;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state250_io) | ((tmp_last_V_reg_2513 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2513 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice))) & (tmp_last_V_reg_2513 == 1'd1) & (1'b1 == ap_CS_fsm_state250))) begin
        axilite_out_ap_vld = 1'b1;
    end else begin
        axilite_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        compression_buffer_address0 = zext_ln162_fu_1348_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        compression_buffer_address0 = zext_ln155_fu_1233_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        compression_buffer_address0 = p_cast_fu_867_p1;
    end else begin
        compression_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state2))) begin
        compression_buffer_ce0 = 1'b1;
    end else begin
        compression_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        compression_buffer_d0 = abs_in_1_fu_1224_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        compression_buffer_d0 = 32'd0;
    end else begin
        compression_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((1'b1 == ap_CS_fsm_state2) & (exitcond3588_fu_872_p2 == 1'd0)))) begin
        compression_buffer_we0 = 1'b1;
    end else begin
        compression_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state161)) begin
        delay_buffer_address0 = zext_ln204_fu_1959_p1;
    end else if ((1'b1 == ap_CS_fsm_state151)) begin
        delay_buffer_address0 = zext_ln201_fu_1801_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        delay_buffer_address0 = p_cast5_fu_897_p1;
    end else begin
        delay_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state161) | (1'b1 == ap_CS_fsm_state151) | (1'b1 == ap_CS_fsm_state3))) begin
        delay_buffer_ce0 = 1'b1;
    end else begin
        delay_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state161)) begin
        delay_buffer_d0 = output_fu_1951_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        delay_buffer_d0 = 32'd0;
    end else begin
        delay_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_13_reg_2453 == 1'd1) & (1'b1 == ap_CS_fsm_state161)) | ((1'b1 == ap_CS_fsm_state3) & (exitcond3535_fu_902_p2 == 1'd0)))) begin
        delay_buffer_we0 = 1'b1;
    end else begin
        delay_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state227))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state247))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state227)) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state247)) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_11_reg_2449 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_1176_ap_start = 1'b1;
    end else begin
        grp_fu_1176_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln159_fu_1256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state48))) begin
        grp_fu_1277_ap_start = 1'b1;
    end else begin
        grp_fu_1277_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_13_reg_2453 == 1'd1) & (1'b1 == ap_CS_fsm_state96))) begin
        grp_fu_1640_ap_start = 1'b1;
    end else begin
        grp_fu_1640_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state126)) begin
        grp_fu_1791_ap_start = 1'b1;
    end else begin
        grp_fu_1791_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state198)) begin
        grp_fu_1988_ap_start = 1'b1;
    end else begin
        grp_fu_1988_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state233) | (1'b1 == ap_CS_fsm_state226) | (1'b1 == ap_CS_fsm_state225) | (1'b1 == ap_CS_fsm_state224) | (1'b1 == ap_CS_fsm_state218) | (1'b1 == ap_CS_fsm_state208) | (1'b1 == ap_CS_fsm_state206) | (1'b1 == ap_CS_fsm_state198) | (1'b1 == ap_CS_fsm_state223) | (1'b1 == ap_CS_fsm_state213) | (1'b1 == ap_CS_fsm_state227) | (1'b1 == ap_CS_fsm_state232) | (1'b1 == ap_CS_fsm_state231) | (1'b1 == ap_CS_fsm_state230) | (1'b1 == ap_CS_fsm_state229) | (1'b1 == ap_CS_fsm_state228) | (1'b1 == ap_CS_fsm_state222) | (1'b1 == ap_CS_fsm_state221) | (1'b1 == ap_CS_fsm_state220) | (1'b1 == ap_CS_fsm_state217) | (1'b1 == ap_CS_fsm_state216) | (1'b1 == ap_CS_fsm_state215) | (1'b1 == ap_CS_fsm_state212) | (1'b1 == ap_CS_fsm_state211) | (1'b1 == ap_CS_fsm_state210) | (1'b1 == ap_CS_fsm_state205) | (1'b1 == ap_CS_fsm_state204) | (1'b1 == ap_CS_fsm_state203) | (1'b1 == ap_CS_fsm_state202) | (1'b1 == ap_CS_fsm_state201) | (1'b1 == ap_CS_fsm_state200) | (1'b1 == ap_CS_fsm_state199) | (1'b1 == ap_CS_fsm_state219) | (1'b1 == ap_CS_fsm_state209) | (1'b1 == ap_CS_fsm_state214) | (1'b1 == ap_CS_fsm_state207))) begin
        grp_fu_1988_ce = 1'b1;
    end else begin
        grp_fu_1988_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln226_fu_2185_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state234))) begin
        grp_fu_2206_ap_start = 1'b1;
    end else begin
        grp_fu_2206_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state157)) begin
        grp_fu_795_p1 = delay_mult_read_reg_2328;
    end else if (((1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state92))) begin
        grp_fu_795_p1 = reg_843;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        grp_fu_795_p1 = lpf_coefficients_load_reg_2662;
    end else begin
        grp_fu_795_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        grp_fu_799_p0 = conv18_i_reg_2473;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        grp_fu_799_p0 = conv30_i_reg_2478;
    end else begin
        grp_fu_799_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state153)) begin
        grp_fu_803_p0 = delay_buffer_load_reg_2715;
    end else if (((1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state88))) begin
        grp_fu_803_p0 = tmp_int_6_reg_592;
    end else if (((1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state76))) begin
        grp_fu_803_p0 = current_level_reg_2645;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        grp_fu_803_p0 = empty_80_reg_617;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        grp_fu_803_p0 = compression_buffer_load_reg_2672;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_803_p0 = compression_max_threshold_read_reg_2338;
    end else begin
        grp_fu_803_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state219)) begin
        grp_fu_816_p0 = add5_i_reg_2756;
    end else if ((1'b1 == ap_CS_fsm_state209)) begin
        grp_fu_816_p0 = tmp_2_reg_2751;
    end else if ((1'b1 == ap_CS_fsm_state171)) begin
        grp_fu_816_p0 = reg_848;
    end else if ((1'b1 == ap_CS_fsm_state166)) begin
        grp_fu_816_p0 = conv_i2_reg_2736;
    end else begin
        grp_fu_816_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state219)) begin
        grp_fu_816_p1 = 64'd4626322717216342016;
    end else if ((1'b1 == ap_CS_fsm_state209)) begin
        grp_fu_816_p1 = 64'd4602678819172646912;
    end else if ((1'b1 == ap_CS_fsm_state171)) begin
        grp_fu_816_p1 = conv2_i_reg_2468;
    end else if ((1'b1 == ap_CS_fsm_state166)) begin
        grp_fu_816_p1 = 64'd4614256650576692846;
    end else begin
        grp_fu_816_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state161)) begin
        grp_fu_828_p0 = shl_ln221_fu_1968_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_828_p0 = tempo_read_reg_2318;
    end else begin
        grp_fu_828_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        lpf_coefficients_ce0 = 1'b1;
    end else begin
        lpf_coefficients_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state246)) begin
        wah_values_buffer_address0 = zext_ln229_fu_2220_p1;
    end else if ((1'b1 == ap_CS_fsm_state198)) begin
        wah_values_buffer_address0 = zext_ln217_fu_1977_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        wah_values_buffer_address0 = p_cast6_fu_927_p1;
    end else begin
        wah_values_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state246) | (1'b1 == ap_CS_fsm_state198) | (1'b1 == ap_CS_fsm_state4))) begin
        wah_values_buffer_ce0 = 1'b1;
    end else begin
        wah_values_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state198)) begin
        wah_values_buffer_d0 = tmp_int_reg_704;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        wah_values_buffer_d0 = 32'd0;
    end else begin
        wah_values_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state198) | ((exitcond3524_fu_932_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        wah_values_buffer_we0 = 1'b1;
    end else begin
        wah_values_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond3588_fu_872_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond3535_fu_902_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond3524_fu_932_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln137_fu_1062_p2 == 1'd1) & (icmp_ln135_fu_1057_p2 == 1'd0) & (tmp_reg_2445 == 1'd1) & (1'b1 == INPUT_r_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if (((icmp_ln135_fu_1057_p2 == 1'd1) & (tmp_reg_2445 == 1'd1) & (1'b1 == INPUT_r_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if (((1'b1 == INPUT_r_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state9) & ((tmp_reg_2445 == 1'd0) | ((icmp_ln137_fu_1062_p2 == 1'd0) & (icmp_ln135_fu_1057_p2 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((tmp_11_reg_2449 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            if (((icmp_ln183_fu_1300_p2 == 1'd1) & (icmp_ln173_fu_1295_p2 == 1'd1) & (icmp_ln159_fu_1256_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end else if (((1'b1 == ap_CS_fsm_state48) & (((icmp_ln173_fu_1295_p2 == 1'd0) & (icmp_ln159_fu_1256_p2 == 1'd1) & (1'd0 == and_ln182_1_fu_1322_p2)) | ((icmp_ln183_fu_1300_p2 == 1'd0) & (icmp_ln173_fu_1295_p2 == 1'd1) & (icmp_ln159_fu_1256_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end else if (((icmp_ln173_fu_1295_p2 == 1'd0) & (icmp_ln159_fu_1256_p2 == 1'd1) & (1'd1 == and_ln182_1_fu_1322_p2) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            if (((tmp_13_reg_2453 == 1'd0) & (1'b1 == ap_CS_fsm_state96))) begin
                ap_NS_fsm = ap_ST_fsm_state161;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state117;
            end
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        ap_ST_fsm_state154 : begin
            ap_NS_fsm = ap_ST_fsm_state155;
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_state156;
        end
        ap_ST_fsm_state156 : begin
            ap_NS_fsm = ap_ST_fsm_state157;
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state158 : begin
            ap_NS_fsm = ap_ST_fsm_state159;
        end
        ap_ST_fsm_state159 : begin
            ap_NS_fsm = ap_ST_fsm_state160;
        end
        ap_ST_fsm_state160 : begin
            ap_NS_fsm = ap_ST_fsm_state161;
        end
        ap_ST_fsm_state161 : begin
            if (((trunc_ln23_reg_2373 == 1'd0) & (1'b1 == ap_CS_fsm_state161))) begin
                ap_NS_fsm = ap_ST_fsm_state250;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state162;
            end
        end
        ap_ST_fsm_state162 : begin
            ap_NS_fsm = ap_ST_fsm_state163;
        end
        ap_ST_fsm_state163 : begin
            ap_NS_fsm = ap_ST_fsm_state164;
        end
        ap_ST_fsm_state164 : begin
            ap_NS_fsm = ap_ST_fsm_state165;
        end
        ap_ST_fsm_state165 : begin
            ap_NS_fsm = ap_ST_fsm_state166;
        end
        ap_ST_fsm_state166 : begin
            ap_NS_fsm = ap_ST_fsm_state167;
        end
        ap_ST_fsm_state167 : begin
            ap_NS_fsm = ap_ST_fsm_state168;
        end
        ap_ST_fsm_state168 : begin
            ap_NS_fsm = ap_ST_fsm_state169;
        end
        ap_ST_fsm_state169 : begin
            ap_NS_fsm = ap_ST_fsm_state170;
        end
        ap_ST_fsm_state170 : begin
            ap_NS_fsm = ap_ST_fsm_state171;
        end
        ap_ST_fsm_state171 : begin
            ap_NS_fsm = ap_ST_fsm_state172;
        end
        ap_ST_fsm_state172 : begin
            ap_NS_fsm = ap_ST_fsm_state173;
        end
        ap_ST_fsm_state173 : begin
            ap_NS_fsm = ap_ST_fsm_state174;
        end
        ap_ST_fsm_state174 : begin
            ap_NS_fsm = ap_ST_fsm_state175;
        end
        ap_ST_fsm_state175 : begin
            ap_NS_fsm = ap_ST_fsm_state176;
        end
        ap_ST_fsm_state176 : begin
            ap_NS_fsm = ap_ST_fsm_state177;
        end
        ap_ST_fsm_state177 : begin
            ap_NS_fsm = ap_ST_fsm_state178;
        end
        ap_ST_fsm_state178 : begin
            ap_NS_fsm = ap_ST_fsm_state179;
        end
        ap_ST_fsm_state179 : begin
            ap_NS_fsm = ap_ST_fsm_state180;
        end
        ap_ST_fsm_state180 : begin
            ap_NS_fsm = ap_ST_fsm_state181;
        end
        ap_ST_fsm_state181 : begin
            ap_NS_fsm = ap_ST_fsm_state182;
        end
        ap_ST_fsm_state182 : begin
            ap_NS_fsm = ap_ST_fsm_state183;
        end
        ap_ST_fsm_state183 : begin
            ap_NS_fsm = ap_ST_fsm_state184;
        end
        ap_ST_fsm_state184 : begin
            ap_NS_fsm = ap_ST_fsm_state185;
        end
        ap_ST_fsm_state185 : begin
            ap_NS_fsm = ap_ST_fsm_state186;
        end
        ap_ST_fsm_state186 : begin
            ap_NS_fsm = ap_ST_fsm_state187;
        end
        ap_ST_fsm_state187 : begin
            ap_NS_fsm = ap_ST_fsm_state188;
        end
        ap_ST_fsm_state188 : begin
            ap_NS_fsm = ap_ST_fsm_state189;
        end
        ap_ST_fsm_state189 : begin
            ap_NS_fsm = ap_ST_fsm_state190;
        end
        ap_ST_fsm_state190 : begin
            ap_NS_fsm = ap_ST_fsm_state191;
        end
        ap_ST_fsm_state191 : begin
            ap_NS_fsm = ap_ST_fsm_state192;
        end
        ap_ST_fsm_state192 : begin
            ap_NS_fsm = ap_ST_fsm_state193;
        end
        ap_ST_fsm_state193 : begin
            ap_NS_fsm = ap_ST_fsm_state194;
        end
        ap_ST_fsm_state194 : begin
            ap_NS_fsm = ap_ST_fsm_state195;
        end
        ap_ST_fsm_state195 : begin
            ap_NS_fsm = ap_ST_fsm_state196;
        end
        ap_ST_fsm_state196 : begin
            ap_NS_fsm = ap_ST_fsm_state197;
        end
        ap_ST_fsm_state197 : begin
            ap_NS_fsm = ap_ST_fsm_state198;
        end
        ap_ST_fsm_state198 : begin
            ap_NS_fsm = ap_ST_fsm_state199;
        end
        ap_ST_fsm_state199 : begin
            ap_NS_fsm = ap_ST_fsm_state200;
        end
        ap_ST_fsm_state200 : begin
            ap_NS_fsm = ap_ST_fsm_state201;
        end
        ap_ST_fsm_state201 : begin
            ap_NS_fsm = ap_ST_fsm_state202;
        end
        ap_ST_fsm_state202 : begin
            ap_NS_fsm = ap_ST_fsm_state203;
        end
        ap_ST_fsm_state203 : begin
            ap_NS_fsm = ap_ST_fsm_state204;
        end
        ap_ST_fsm_state204 : begin
            ap_NS_fsm = ap_ST_fsm_state205;
        end
        ap_ST_fsm_state205 : begin
            ap_NS_fsm = ap_ST_fsm_state206;
        end
        ap_ST_fsm_state206 : begin
            ap_NS_fsm = ap_ST_fsm_state207;
        end
        ap_ST_fsm_state207 : begin
            ap_NS_fsm = ap_ST_fsm_state208;
        end
        ap_ST_fsm_state208 : begin
            if (((grp_sin_or_cos_double_s_fu_774_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state208))) begin
                ap_NS_fsm = ap_ST_fsm_state209;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state208;
            end
        end
        ap_ST_fsm_state209 : begin
            ap_NS_fsm = ap_ST_fsm_state210;
        end
        ap_ST_fsm_state210 : begin
            ap_NS_fsm = ap_ST_fsm_state211;
        end
        ap_ST_fsm_state211 : begin
            ap_NS_fsm = ap_ST_fsm_state212;
        end
        ap_ST_fsm_state212 : begin
            ap_NS_fsm = ap_ST_fsm_state213;
        end
        ap_ST_fsm_state213 : begin
            ap_NS_fsm = ap_ST_fsm_state214;
        end
        ap_ST_fsm_state214 : begin
            ap_NS_fsm = ap_ST_fsm_state215;
        end
        ap_ST_fsm_state215 : begin
            ap_NS_fsm = ap_ST_fsm_state216;
        end
        ap_ST_fsm_state216 : begin
            ap_NS_fsm = ap_ST_fsm_state217;
        end
        ap_ST_fsm_state217 : begin
            ap_NS_fsm = ap_ST_fsm_state218;
        end
        ap_ST_fsm_state218 : begin
            ap_NS_fsm = ap_ST_fsm_state219;
        end
        ap_ST_fsm_state219 : begin
            ap_NS_fsm = ap_ST_fsm_state220;
        end
        ap_ST_fsm_state220 : begin
            ap_NS_fsm = ap_ST_fsm_state221;
        end
        ap_ST_fsm_state221 : begin
            ap_NS_fsm = ap_ST_fsm_state222;
        end
        ap_ST_fsm_state222 : begin
            ap_NS_fsm = ap_ST_fsm_state223;
        end
        ap_ST_fsm_state223 : begin
            ap_NS_fsm = ap_ST_fsm_state224;
        end
        ap_ST_fsm_state224 : begin
            ap_NS_fsm = ap_ST_fsm_state225;
        end
        ap_ST_fsm_state225 : begin
            ap_NS_fsm = ap_ST_fsm_state226;
        end
        ap_ST_fsm_state226 : begin
            ap_NS_fsm = ap_ST_fsm_state227;
        end
        ap_ST_fsm_state227 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state227))) begin
                ap_NS_fsm = ap_ST_fsm_state228;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state227;
            end
        end
        ap_ST_fsm_state228 : begin
            ap_NS_fsm = ap_ST_fsm_state229;
        end
        ap_ST_fsm_state229 : begin
            ap_NS_fsm = ap_ST_fsm_state230;
        end
        ap_ST_fsm_state230 : begin
            ap_NS_fsm = ap_ST_fsm_state231;
        end
        ap_ST_fsm_state231 : begin
            ap_NS_fsm = ap_ST_fsm_state232;
        end
        ap_ST_fsm_state232 : begin
            ap_NS_fsm = ap_ST_fsm_state233;
        end
        ap_ST_fsm_state233 : begin
            ap_NS_fsm = ap_ST_fsm_state234;
        end
        ap_ST_fsm_state234 : begin
            if (((icmp_ln226_fu_2185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state234))) begin
                ap_NS_fsm = ap_ST_fsm_state250;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state235;
            end
        end
        ap_ST_fsm_state235 : begin
            ap_NS_fsm = ap_ST_fsm_state236;
        end
        ap_ST_fsm_state236 : begin
            ap_NS_fsm = ap_ST_fsm_state237;
        end
        ap_ST_fsm_state237 : begin
            ap_NS_fsm = ap_ST_fsm_state238;
        end
        ap_ST_fsm_state238 : begin
            ap_NS_fsm = ap_ST_fsm_state239;
        end
        ap_ST_fsm_state239 : begin
            ap_NS_fsm = ap_ST_fsm_state240;
        end
        ap_ST_fsm_state240 : begin
            ap_NS_fsm = ap_ST_fsm_state241;
        end
        ap_ST_fsm_state241 : begin
            ap_NS_fsm = ap_ST_fsm_state242;
        end
        ap_ST_fsm_state242 : begin
            ap_NS_fsm = ap_ST_fsm_state243;
        end
        ap_ST_fsm_state243 : begin
            ap_NS_fsm = ap_ST_fsm_state244;
        end
        ap_ST_fsm_state244 : begin
            ap_NS_fsm = ap_ST_fsm_state245;
        end
        ap_ST_fsm_state245 : begin
            ap_NS_fsm = ap_ST_fsm_state246;
        end
        ap_ST_fsm_state246 : begin
            ap_NS_fsm = ap_ST_fsm_state247;
        end
        ap_ST_fsm_state247 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state247))) begin
                ap_NS_fsm = ap_ST_fsm_state248;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state247;
            end
        end
        ap_ST_fsm_state248 : begin
            ap_NS_fsm = ap_ST_fsm_state249;
        end
        ap_ST_fsm_state249 : begin
            ap_NS_fsm = ap_ST_fsm_state234;
        end
        ap_ST_fsm_state250 : begin
            if ((~((1'b1 == ap_block_state250_io) | ((tmp_last_V_reg_2513 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2513 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice))) & (tmp_last_V_reg_2513 == 1'd1) & (1'b1 == ap_CS_fsm_state250))) begin
                ap_NS_fsm = ap_ST_fsm_state252;
            end else if ((~((1'b1 == ap_block_state250_io) | ((tmp_last_V_reg_2513 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2513 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice))) & (tmp_last_V_reg_2513 == 1'd0) & (1'b1 == ap_CS_fsm_state250))) begin
                ap_NS_fsm = ap_ST_fsm_state251;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state250;
            end
        end
        ap_ST_fsm_state251 : begin
            if (((1'b1 == ap_CS_fsm_state251) & (1'b1 == OUTPUT_r_TREADY_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state251;
            end
        end
        ap_ST_fsm_state252 : begin
            if ((~((regslice_both_OUTPUT_r_V_data_V_U_apdone_blk == 1'b1) | (1'b0 == OUTPUT_r_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state252))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state252;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign INPUT_r_TREADY = regslice_both_INPUT_r_V_data_V_U_ack_in;

assign OUTPUT_r_TVALID = regslice_both_OUTPUT_r_V_data_V_U_vld_out;

assign abs_in_1_fu_1224_p3 = ((tmp_17_fu_1210_p3[0:0] == 1'b1) ? sub_ln151_fu_1218_p2 : tmp_int_6_reg_592);

assign add_ln159_fu_1262_p2 = (i_reg_606 + 9'd1);

assign add_ln226_1_fu_2191_p2 = (i_7_reg_716 + 7'd1);

assign add_ln226_fu_2146_p2 = ($signed(sext_ln226_2_fu_2143_p1) + $signed(wah_coeffs_read_reg_2313));

assign add_ln346_1_fu_1690_p2 = ($signed(zext_ln346_1_fu_1686_p1) + $signed(9'd385));

assign add_ln346_2_fu_1536_p2 = ($signed(zext_ln346_2_fu_1532_p1) + $signed(9'd385));

assign add_ln346_3_fu_1842_p2 = ($signed(zext_ln346_3_fu_1838_p1) + $signed(9'd385));

assign add_ln346_fu_1396_p2 = ($signed(zext_ln346_fu_1392_p1) + $signed(9'd385));

assign add_ln515_fu_2038_p2 = ($signed(zext_ln515_fu_2034_p1) + $signed(12'd3073));

assign and_ln182_1_fu_1322_p2 = (icmp_ln182_fu_1306_p2 & and_ln182_fu_1316_p2);

assign and_ln182_fu_1316_p2 = (icmp_ln183_fu_1300_p2 & icmp_ln182_1_fu_1311_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state126 = ap_CS_fsm[32'd125];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state151 = ap_CS_fsm[32'd150];

assign ap_CS_fsm_state152 = ap_CS_fsm[32'd151];

assign ap_CS_fsm_state153 = ap_CS_fsm[32'd152];

assign ap_CS_fsm_state156 = ap_CS_fsm[32'd155];

assign ap_CS_fsm_state157 = ap_CS_fsm[32'd156];

assign ap_CS_fsm_state159 = ap_CS_fsm[32'd158];

assign ap_CS_fsm_state160 = ap_CS_fsm[32'd159];

assign ap_CS_fsm_state161 = ap_CS_fsm[32'd160];

assign ap_CS_fsm_state165 = ap_CS_fsm[32'd164];

assign ap_CS_fsm_state166 = ap_CS_fsm[32'd165];

assign ap_CS_fsm_state170 = ap_CS_fsm[32'd169];

assign ap_CS_fsm_state171 = ap_CS_fsm[32'd170];

assign ap_CS_fsm_state175 = ap_CS_fsm[32'd174];

assign ap_CS_fsm_state176 = ap_CS_fsm[32'd175];

assign ap_CS_fsm_state198 = ap_CS_fsm[32'd197];

assign ap_CS_fsm_state199 = ap_CS_fsm[32'd198];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state200 = ap_CS_fsm[32'd199];

assign ap_CS_fsm_state201 = ap_CS_fsm[32'd200];

assign ap_CS_fsm_state202 = ap_CS_fsm[32'd201];

assign ap_CS_fsm_state203 = ap_CS_fsm[32'd202];

assign ap_CS_fsm_state204 = ap_CS_fsm[32'd203];

assign ap_CS_fsm_state205 = ap_CS_fsm[32'd204];

assign ap_CS_fsm_state206 = ap_CS_fsm[32'd205];

assign ap_CS_fsm_state207 = ap_CS_fsm[32'd206];

assign ap_CS_fsm_state208 = ap_CS_fsm[32'd207];

assign ap_CS_fsm_state209 = ap_CS_fsm[32'd208];

assign ap_CS_fsm_state210 = ap_CS_fsm[32'd209];

assign ap_CS_fsm_state211 = ap_CS_fsm[32'd210];

assign ap_CS_fsm_state212 = ap_CS_fsm[32'd211];

assign ap_CS_fsm_state213 = ap_CS_fsm[32'd212];

assign ap_CS_fsm_state214 = ap_CS_fsm[32'd213];

assign ap_CS_fsm_state215 = ap_CS_fsm[32'd214];

assign ap_CS_fsm_state216 = ap_CS_fsm[32'd215];

assign ap_CS_fsm_state217 = ap_CS_fsm[32'd216];

assign ap_CS_fsm_state218 = ap_CS_fsm[32'd217];

assign ap_CS_fsm_state219 = ap_CS_fsm[32'd218];

assign ap_CS_fsm_state220 = ap_CS_fsm[32'd219];

assign ap_CS_fsm_state221 = ap_CS_fsm[32'd220];

assign ap_CS_fsm_state222 = ap_CS_fsm[32'd221];

assign ap_CS_fsm_state223 = ap_CS_fsm[32'd222];

assign ap_CS_fsm_state224 = ap_CS_fsm[32'd223];

assign ap_CS_fsm_state225 = ap_CS_fsm[32'd224];

assign ap_CS_fsm_state226 = ap_CS_fsm[32'd225];

assign ap_CS_fsm_state227 = ap_CS_fsm[32'd226];

assign ap_CS_fsm_state228 = ap_CS_fsm[32'd227];

assign ap_CS_fsm_state229 = ap_CS_fsm[32'd228];

assign ap_CS_fsm_state230 = ap_CS_fsm[32'd229];

assign ap_CS_fsm_state231 = ap_CS_fsm[32'd230];

assign ap_CS_fsm_state232 = ap_CS_fsm[32'd231];

assign ap_CS_fsm_state233 = ap_CS_fsm[32'd232];

assign ap_CS_fsm_state234 = ap_CS_fsm[32'd233];

assign ap_CS_fsm_state246 = ap_CS_fsm[32'd245];

assign ap_CS_fsm_state247 = ap_CS_fsm[32'd246];

assign ap_CS_fsm_state248 = ap_CS_fsm[32'd247];

assign ap_CS_fsm_state249 = ap_CS_fsm[32'd248];

assign ap_CS_fsm_state250 = ap_CS_fsm[32'd249];

assign ap_CS_fsm_state251 = ap_CS_fsm[32'd250];

assign ap_CS_fsm_state252 = ap_CS_fsm[32'd251];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

always @ (*) begin
    ap_block_state250 = (((tmp_last_V_reg_2513 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2513 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice)));
end

always @ (*) begin
    ap_block_state250_io = (((tmp_last_V_reg_2513 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2513 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice)));
end

always @ (*) begin
    ap_block_state252 = ((regslice_both_OUTPUT_r_V_data_V_U_apdone_blk == 1'b1) | (1'b0 == OUTPUT_r_TREADY_int_regslice));
end

always @ (*) begin
    ap_condition_3887 = (~(((tmp_last_V_reg_2513 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2513 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice))) & (1'b1 == ap_CS_fsm_state250));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign conv7_i_i_i_fu_1005_p1 = $signed(distortion_clip_factor_read_reg_2351);

assign current_level_fu_1288_p3 = ((icmp_ln165_fu_1283_p2[0:0] == 1'b1) ? compression_min_threshold_read_reg_2344 : empty_80_reg_617);

assign current_sample_fu_1045_p2 = (current_sample_1_fu_322 + 32'd1);

assign data_V_1_fu_1646_p1 = reg_838;

assign data_V_2_fu_1492_p1 = reg_838;

assign data_V_3_fu_1806_p1 = reg_838;

assign data_V_4_fu_1994_p1 = reg_848;

assign data_V_fu_1353_p1 = dc_reg_2677;

assign empty_70_fu_878_p2 = (empty_fu_298 + 9'd1);

assign empty_73_fu_908_p2 = (empty_71_fu_314 + 17'd1);

assign empty_76_fu_938_p2 = (empty_74_fu_318 + 7'd1);

assign exitcond3524_fu_932_p2 = ((empty_74_fu_318 == 7'd100) ? 1'b1 : 1'b0);

assign exitcond3535_fu_902_p2 = ((empty_71_fu_314 == 17'd88200) ? 1'b1 : 1'b0);

assign exitcond3588_fu_872_p2 = ((empty_fu_298 == 9'd441) ? 1'b1 : 1'b0);

assign grp_fu_1176_p0 = (compression_buffer_index_fu_338 + 32'd1);

assign grp_fu_1176_p1 = 32'd441;

assign grp_fu_1277_p0 = ($signed(zext_ln161_fu_1268_p1) + $signed(sext_ln61_reg_2622));

assign grp_fu_1277_p1 = 11'd441;

assign grp_fu_1640_p0 = (delay_buffer_index_fu_334 - delay_samples_read_reg_2323);

assign grp_fu_1640_p1 = 32'd88200;

assign grp_fu_1791_p0 = (delay_buffer_index_fu_334 + 32'd1);

assign grp_fu_1791_p1 = 32'd88200;

assign grp_fu_1988_p0 = (wah_buffer_index_fu_330 + 32'd1);

assign grp_fu_1988_p1 = 32'd100;

assign grp_fu_2206_p0 = ($signed(sext_ln73_reg_2788) - $signed(zext_ln228_fu_2197_p1));

assign grp_fu_2206_p1 = 9'd100;

assign grp_sin_or_cos_double_s_fu_774_ap_start = grp_sin_or_cos_double_s_fu_774_ap_start_reg;

assign icmp_ln1049_1_fu_1099_p2 = ((trunc_ln1049_1_fu_1095_p1 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln1049_2_fu_2258_p2 = ((trunc_ln1049_2_reg_2833 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1049_fu_1204_p2 = ((trunc_ln1049_fu_1200_p1 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln135_fu_1057_p2 = (($signed(INPUT_r_TDATA_int_regslice) > $signed(distortion_threshold_read_reg_2356)) ? 1'b1 : 1'b0);

assign icmp_ln137_fu_1062_p2 = (($signed(INPUT_r_TDATA_int_regslice) < $signed(negative_threshold_reg_2457)) ? 1'b1 : 1'b0);

assign icmp_ln159_fu_1256_p2 = ((i_reg_606 == 9'd441) ? 1'b1 : 1'b0);

assign icmp_ln165_fu_1283_p2 = (($signed(current_sample_1_fu_322) < $signed(32'd441)) ? 1'b1 : 1'b0);

assign icmp_ln173_fu_1295_p2 = (($signed(current_level_fu_1288_p3) > $signed(compression_max_threshold_read_reg_2338)) ? 1'b1 : 1'b0);

assign icmp_ln182_1_fu_1311_p2 = (($signed(current_level_fu_1288_p3) > $signed(compression_zero_threshold_read_reg_2333)) ? 1'b1 : 1'b0);

assign icmp_ln182_fu_1306_p2 = (($signed(current_level_fu_1288_p3) < $signed(compression_min_threshold_read_reg_2344)) ? 1'b1 : 1'b0);

assign icmp_ln183_fu_1300_p2 = (($signed(current_level_fu_1288_p3) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln226_fu_2185_p2 = ((i_7_reg_716 == 7'd100) ? 1'b1 : 1'b0);

assign isNeg_2_fu_1696_p3 = add_ln346_1_fu_1690_p2[32'd8];

assign isNeg_3_fu_1542_p3 = add_ln346_2_fu_1536_p2[32'd8];

assign isNeg_4_fu_1848_p3 = add_ln346_3_fu_1842_p2[32'd8];

assign isNeg_5_fu_2044_p3 = add_ln515_fu_2038_p2[32'd11];

assign isNeg_fu_1402_p3 = add_ln346_fu_1396_p2[32'd8];

assign lpf_coefficients_address0 = zext_ln159_fu_1251_p1;

assign mantissa_1_fu_1672_p4 = {{{{1'd1}, {p_Result_48_fu_1668_p1}}}, {1'd0}};

assign mantissa_2_fu_1518_p4 = {{{{1'd1}, {p_Result_50_fu_1514_p1}}}, {1'd0}};

assign mantissa_3_fu_1824_p4 = {{{{1'd1}, {p_Result_52_fu_1820_p1}}}, {1'd0}};

assign mantissa_4_fu_2020_p4 = {{{{1'd1}, {p_Result_54_fu_2016_p1}}}, {1'd0}};

assign mantissa_fu_1378_p4 = {{{{1'd1}, {p_Result_46_fu_1374_p1}}}, {1'd0}};

assign mul_ln226_fu_2137_p1 = 41'd200;

assign negative_threshold_fu_1000_p2 = (32'd0 - distortion_threshold_read_reg_2356);

assign or_ln100_fu_1924_p2 = (empty_82_reg_646 | 32'd2);

assign or_ln105_fu_2171_p2 = (empty_83_reg_693 | 32'd1);

assign or_ln90_fu_1051_p2 = (empty_77_fu_326 | 32'd8);

assign or_ln95_fu_1237_p2 = (empty_79_reg_578 | 32'd4);

assign output_fu_1951_p2 = (result_V_20_fu_1944_p3 + tmp_int_3_reg_663);

assign p_Result_28_fu_1105_p3 = r_V_49_reg_2560[32'd39];

assign p_Result_44_fu_2251_p3 = r_V_50_reg_2821[32'd47];

assign p_Result_45_fu_1356_p3 = data_V_fu_1353_p1[32'd31];

assign p_Result_46_fu_1374_p1 = data_V_fu_1353_p1[22:0];

assign p_Result_47_fu_1650_p3 = data_V_1_fu_1646_p1[32'd31];

assign p_Result_48_fu_1668_p1 = data_V_1_fu_1646_p1[22:0];

assign p_Result_49_fu_1496_p3 = data_V_2_fu_1492_p1[32'd31];

assign p_Result_50_fu_1514_p1 = data_V_2_fu_1492_p1[22:0];

assign p_Result_51_fu_1932_p3 = data_V_3_reg_2720[32'd31];

assign p_Result_52_fu_1820_p1 = data_V_3_fu_1806_p1[22:0];

assign p_Result_53_fu_1998_p3 = data_V_4_fu_1994_p1[32'd63];

assign p_Result_54_fu_2016_p1 = data_V_4_fu_1994_p1[51:0];

assign p_Result_s_fu_1136_p3 = r_V_48_reg_2585[32'd39];

assign p_cast5_fu_897_p1 = empty_71_fu_314;

assign p_cast6_fu_927_p1 = empty_74_fu_318;

assign p_cast_fu_867_p1 = empty_fu_298;

assign r_V_21_fu_1072_p2 = (INPUT_r_TDATA_int_regslice - distortion_threshold_read_reg_2356);

assign r_V_35_fu_1436_p2 = zext_ln15_fu_1388_p1 >> zext_ln1488_fu_1432_p1;

assign r_V_36_fu_1442_p2 = zext_ln15_fu_1388_p1 << zext_ln1488_fu_1432_p1;

assign r_V_38_fu_1730_p2 = zext_ln15_1_fu_1682_p1 >> zext_ln1488_2_fu_1726_p1;

assign r_V_39_fu_1736_p2 = zext_ln15_1_fu_1682_p1 << zext_ln1488_2_fu_1726_p1;

assign r_V_40_fu_1576_p2 = zext_ln15_2_fu_1528_p1 >> zext_ln1488_3_fu_1572_p1;

assign r_V_41_fu_1582_p2 = zext_ln15_2_fu_1528_p1 << zext_ln1488_3_fu_1572_p1;

assign r_V_42_fu_1882_p2 = zext_ln15_3_fu_1834_p1 >> zext_ln1488_4_fu_1878_p1;

assign r_V_43_fu_1888_p2 = zext_ln15_3_fu_1834_p1 << zext_ln1488_4_fu_1878_p1;

assign r_V_44_fu_2078_p2 = zext_ln15_4_fu_2030_p1 >> zext_ln1488_5_fu_2074_p1;

assign r_V_45_fu_2084_p2 = zext_ln15_4_fu_2030_p1 << zext_ln1488_5_fu_2074_p1;

assign r_V_48_fu_1185_p1 = conv7_i_i_i_reg_2462;

assign r_V_49_fu_1080_p1 = conv7_i_i_i_reg_2462;

assign r_V_fu_1067_p2 = (INPUT_r_TDATA_int_regslice + distortion_threshold_read_reg_2356);

assign result_1_fu_1130_p2 = (ret_V_11_fu_1123_p3 - distortion_threshold_read_reg_2356);

assign result_3_fu_2286_p2 = ($signed(sext_ln598_fu_2282_p1) + $signed(result_2_reg_727));

assign result_V_13_fu_1939_p2 = (32'd0 - val_3_reg_2725);

assign result_V_16_fu_2120_p2 = (32'd0 - val_4_fu_2112_p3);

assign result_V_18_fu_1484_p3 = ((p_Result_45_fu_1356_p3[0:0] == 1'b1) ? result_V_2_fu_1478_p2 : val_fu_1470_p3);

assign result_V_19_fu_1778_p3 = ((p_Result_47_fu_1650_p3[0:0] == 1'b1) ? result_V_7_fu_1772_p2 : val_1_fu_1764_p3);

assign result_V_20_fu_1944_p3 = ((p_Result_51_fu_1932_p3[0:0] == 1'b1) ? result_V_13_fu_1939_p2 : val_3_reg_2725);

assign result_V_21_fu_2126_p3 = ((p_Result_53_fu_1998_p3[0:0] == 1'b1) ? result_V_16_fu_2120_p2 : val_4_fu_2112_p3);

assign result_V_2_fu_1478_p2 = (32'd0 - val_fu_1470_p3);

assign result_V_7_fu_1772_p2 = (32'd0 - val_1_fu_1764_p3);

assign result_V_8_fu_1618_p2 = (32'd0 - val_2_fu_1610_p3);

assign result_V_fu_1624_p3 = ((p_Result_49_fu_1496_p3[0:0] == 1'b1) ? result_V_8_fu_1618_p2 : val_2_fu_1610_p3);

assign result_fu_1161_p2 = (ret_V_9_fu_1154_p3 + distortion_threshold_read_reg_2356);

assign ret_V_10_fu_1112_p2 = (ret_V_9_cast_reg_2565 + 32'd1);

assign ret_V_11_fu_1123_p3 = ((p_Result_28_fu_1105_p3[0:0] == 1'b1) ? select_ln1048_1_fu_1117_p3 : ret_V_9_cast_reg_2565);

assign ret_V_13_fu_2263_p2 = (ret_V_12_reg_2826 + 16'd1);

assign ret_V_14_fu_2275_p3 = ((p_Result_44_fu_2251_p3[0:0] == 1'b1) ? select_ln1048_2_fu_2268_p3 : ret_V_12_reg_2826);

assign ret_V_9_fu_1154_p3 = ((p_Result_s_fu_1136_p3[0:0] == 1'b1) ? select_ln1048_fu_1148_p3 : ret_V_cast_reg_2590);

assign ret_V_fu_1143_p2 = (ret_V_cast_reg_2590 + 32'd1);

assign select_ln1048_1_fu_1117_p3 = ((icmp_ln1049_1_reg_2572[0:0] == 1'b1) ? ret_V_9_cast_reg_2565 : ret_V_10_fu_1112_p2);

assign select_ln1048_2_fu_2268_p3 = ((icmp_ln1049_2_fu_2258_p2[0:0] == 1'b1) ? ret_V_12_reg_2826 : ret_V_13_fu_2263_p2);

assign select_ln1048_fu_1148_p3 = ((icmp_ln1049_reg_2597[0:0] == 1'b1) ? ret_V_cast_reg_2590 : ret_V_fu_1143_p2);

assign sext_ln1488_1_fu_1722_p1 = $signed(ush_2_fu_1714_p3);

assign sext_ln1488_2_fu_1568_p1 = $signed(ush_3_fu_1560_p3);

assign sext_ln1488_3_fu_1874_p1 = $signed(ush_4_fu_1866_p3);

assign sext_ln1488_4_fu_2070_p1 = $signed(ush_5_fu_2062_p3);

assign sext_ln1488_fu_1428_p1 = $signed(ush_fu_1420_p3);

assign sext_ln1512_1_fu_1710_p1 = $signed(sub_ln1512_4_fu_1704_p2);

assign sext_ln1512_2_fu_1556_p1 = $signed(sub_ln1512_5_fu_1550_p2);

assign sext_ln1512_3_fu_1862_p1 = $signed(sub_ln1512_fu_1856_p2);

assign sext_ln1512_4_fu_2058_p1 = $signed(sub_ln1512_2_fu_2052_p2);

assign sext_ln1512_fu_1416_p1 = $signed(sub_ln1512_3_fu_1410_p2);

assign sext_ln226_2_fu_2143_p1 = $signed(mul_ln226_reg_2766);

assign sext_ln226_fu_2161_p1 = $signed(trunc_ln_fu_2151_p4);

assign sext_ln598_fu_2282_p1 = $signed(ret_V_14_fu_2275_p3);

assign sext_ln61_fu_1247_p1 = $signed(trunc_ln61_fu_1243_p1);

assign sext_ln73_fu_2181_p1 = $signed(trunc_ln73_fu_2177_p1);

assign shl_ln221_fu_1968_p2 = current_sample_1_fu_322 << 32'd1;

assign sub_ln1512_2_fu_2052_p2 = (11'd1023 - xs_exp_V_5_fu_2006_p4);

assign sub_ln1512_3_fu_1410_p2 = (8'd127 - xs_exp_V_fu_1364_p4);

assign sub_ln1512_4_fu_1704_p2 = (8'd127 - xs_exp_V_1_fu_1658_p4);

assign sub_ln1512_5_fu_1550_p2 = (8'd127 - xs_exp_V_2_fu_1504_p4);

assign sub_ln1512_fu_1856_p2 = (8'd127 - xs_exp_V_4_fu_1810_p4);

assign sub_ln151_fu_1218_p2 = (32'd0 - tmp_int_6_reg_592);

assign tmp_17_fu_1210_p3 = tmp_int_6_reg_592[32'd31];

assign tmp_22_fu_1448_p3 = r_V_35_fu_1436_p2[32'd24];

assign tmp_26_fu_1742_p3 = r_V_38_fu_1730_p2[32'd24];

assign tmp_30_fu_1588_p3 = r_V_40_fu_1576_p2[32'd24];

assign tmp_34_fu_1894_p3 = r_V_42_fu_1882_p2[32'd24];

assign tmp_38_fu_2090_p3 = r_V_44_fu_2078_p2[32'd53];

assign tmp_3_fu_1906_p4 = {{r_V_43_fu_1888_p2[55:24]}};

assign tmp_4_fu_2102_p4 = {{r_V_45_fu_2084_p2[84:53]}};

assign tmp_6_fu_1460_p4 = {{r_V_36_fu_1442_p2[55:24]}};

assign tmp_9_fu_1754_p4 = {{r_V_39_fu_1736_p2[55:24]}};

assign tmp_s_fu_1600_p4 = {{r_V_41_fu_1582_p2[55:24]}};

assign trunc_ln1049_1_fu_1095_p1 = r_V_49_fu_1080_p2[6:0];

assign trunc_ln1049_2_fu_2247_p1 = r_V_50_fu_2231_p2[31:0];

assign trunc_ln1049_fu_1200_p1 = r_V_48_fu_1185_p2[6:0];

assign trunc_ln162_fu_1344_p1 = grp_fu_1277_p2[8:0];

assign trunc_ln201_fu_1797_p1 = grp_fu_1640_p2[16:0];

assign trunc_ln229_fu_2216_p1 = grp_fu_2206_p2[6:0];

assign trunc_ln23_fu_855_p1 = control[0:0];

assign trunc_ln61_fu_1243_p1 = grp_fu_1176_p2[9:0];

assign trunc_ln73_fu_2177_p1 = grp_fu_1988_p2[7:0];

assign trunc_ln_fu_2151_p4 = {{add_ln226_fu_2146_p2[63:1]}};

assign ush_2_fu_1714_p3 = ((isNeg_2_fu_1696_p3[0:0] == 1'b1) ? sext_ln1512_1_fu_1710_p1 : add_ln346_1_fu_1690_p2);

assign ush_3_fu_1560_p3 = ((isNeg_3_fu_1542_p3[0:0] == 1'b1) ? sext_ln1512_2_fu_1556_p1 : add_ln346_2_fu_1536_p2);

assign ush_4_fu_1866_p3 = ((isNeg_4_fu_1848_p3[0:0] == 1'b1) ? sext_ln1512_3_fu_1862_p1 : add_ln346_3_fu_1842_p2);

assign ush_5_fu_2062_p3 = ((isNeg_5_fu_2044_p3[0:0] == 1'b1) ? sext_ln1512_4_fu_2058_p1 : add_ln515_fu_2038_p2);

assign ush_fu_1420_p3 = ((isNeg_fu_1402_p3[0:0] == 1'b1) ? sext_ln1512_fu_1416_p1 : add_ln346_fu_1396_p2);

assign val_1_fu_1764_p3 = ((isNeg_2_fu_1696_p3[0:0] == 1'b1) ? zext_ln818_1_fu_1750_p1 : tmp_9_fu_1754_p4);

assign val_2_fu_1610_p3 = ((isNeg_3_fu_1542_p3[0:0] == 1'b1) ? zext_ln818_2_fu_1596_p1 : tmp_s_fu_1600_p4);

assign val_3_fu_1916_p3 = ((isNeg_4_fu_1848_p3[0:0] == 1'b1) ? zext_ln818_3_fu_1902_p1 : tmp_3_fu_1906_p4);

assign val_4_fu_2112_p3 = ((isNeg_5_fu_2044_p3[0:0] == 1'b1) ? zext_ln818_4_fu_2098_p1 : tmp_4_fu_2102_p4);

assign val_fu_1470_p3 = ((isNeg_fu_1402_p3[0:0] == 1'b1) ? zext_ln818_fu_1456_p1 : tmp_6_fu_1460_p4);

assign xs_exp_V_1_fu_1658_p4 = {{data_V_1_fu_1646_p1[30:23]}};

assign xs_exp_V_2_fu_1504_p4 = {{data_V_2_fu_1492_p1[30:23]}};

assign xs_exp_V_4_fu_1810_p4 = {{data_V_3_fu_1806_p1[30:23]}};

assign xs_exp_V_5_fu_2006_p4 = {{data_V_4_fu_1994_p1[62:52]}};

assign xs_exp_V_fu_1364_p4 = {{data_V_fu_1353_p1[30:23]}};

assign zext_ln1488_2_fu_1726_p1 = $unsigned(sext_ln1488_1_fu_1722_p1);

assign zext_ln1488_3_fu_1572_p1 = $unsigned(sext_ln1488_2_fu_1568_p1);

assign zext_ln1488_4_fu_1878_p1 = $unsigned(sext_ln1488_3_fu_1874_p1);

assign zext_ln1488_5_fu_2074_p1 = $unsigned(sext_ln1488_4_fu_2070_p1);

assign zext_ln1488_fu_1432_p1 = $unsigned(sext_ln1488_fu_1428_p1);

assign zext_ln155_fu_1233_p1 = compression_buffer_index_fu_338;

assign zext_ln159_fu_1251_p1 = i_reg_606;

assign zext_ln15_1_fu_1682_p1 = mantissa_1_fu_1672_p4;

assign zext_ln15_2_fu_1528_p1 = mantissa_2_fu_1518_p4;

assign zext_ln15_3_fu_1834_p1 = mantissa_3_fu_1824_p4;

assign zext_ln15_4_fu_2030_p1 = mantissa_4_fu_2020_p4;

assign zext_ln15_fu_1388_p1 = mantissa_fu_1378_p4;

assign zext_ln161_fu_1268_p1 = i_reg_606;

assign zext_ln162_fu_1348_p1 = trunc_ln162_fu_1344_p1;

assign zext_ln201_fu_1801_p1 = trunc_ln201_fu_1797_p1;

assign zext_ln204_fu_1959_p1 = delay_buffer_index_fu_334;

assign zext_ln217_fu_1977_p1 = wah_buffer_index_fu_330;

assign zext_ln228_fu_2197_p1 = i_7_reg_716;

assign zext_ln229_fu_2220_p1 = trunc_ln229_fu_2216_p1;

assign zext_ln346_1_fu_1686_p1 = xs_exp_V_1_fu_1658_p4;

assign zext_ln346_2_fu_1532_p1 = xs_exp_V_2_fu_1504_p4;

assign zext_ln346_3_fu_1838_p1 = xs_exp_V_4_fu_1810_p4;

assign zext_ln346_fu_1392_p1 = xs_exp_V_fu_1364_p4;

assign zext_ln515_fu_2034_p1 = xs_exp_V_5_fu_2006_p4;

assign zext_ln818_1_fu_1750_p1 = tmp_26_fu_1742_p3;

assign zext_ln818_2_fu_1596_p1 = tmp_30_fu_1588_p3;

assign zext_ln818_3_fu_1902_p1 = tmp_34_fu_1894_p3;

assign zext_ln818_4_fu_2098_p1 = tmp_38_fu_2090_p3;

assign zext_ln818_fu_1456_p1 = tmp_22_fu_1448_p3;

always @ (posedge ap_clk) begin
    or_ln90_reg_2532[3] <= 1'b1;
    or_ln95_reg_2602[2] <= 1'b1;
    or_ln105_reg_2777[0] <= 1'b1;
end

endmodule //guitar_effects
