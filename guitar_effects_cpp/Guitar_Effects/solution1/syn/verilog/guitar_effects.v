// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="guitar_effects_guitar_effects,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=129,HLS_SYN_DSP=0,HLS_SYN_FF=3222,HLS_SYN_LUT=5584,HLS_VERSION=2022_1}" *)

module guitar_effects (
        ap_clk,
        ap_rst_n,
        INPUT_r_TDATA,
        INPUT_r_TVALID,
        INPUT_r_TREADY,
        INPUT_r_TKEEP,
        INPUT_r_TSTRB,
        INPUT_r_TUSER,
        INPUT_r_TLAST,
        INPUT_r_TID,
        INPUT_r_TDEST,
        OUTPUT_r_TDATA,
        OUTPUT_r_TVALID,
        OUTPUT_r_TREADY,
        OUTPUT_r_TKEEP,
        OUTPUT_r_TSTRB,
        OUTPUT_r_TUSER,
        OUTPUT_r_TLAST,
        OUTPUT_r_TID,
        OUTPUT_r_TDEST,
        s_axi_control_r_AWVALID,
        s_axi_control_r_AWREADY,
        s_axi_control_r_AWADDR,
        s_axi_control_r_WVALID,
        s_axi_control_r_WREADY,
        s_axi_control_r_WDATA,
        s_axi_control_r_WSTRB,
        s_axi_control_r_ARVALID,
        s_axi_control_r_ARREADY,
        s_axi_control_r_ARADDR,
        s_axi_control_r_RVALID,
        s_axi_control_r_RREADY,
        s_axi_control_r_RDATA,
        s_axi_control_r_RRESP,
        s_axi_control_r_BVALID,
        s_axi_control_r_BREADY,
        s_axi_control_r_BRESP
);

parameter    ap_ST_fsm_state1 = 63'd1;
parameter    ap_ST_fsm_state2 = 63'd2;
parameter    ap_ST_fsm_state3 = 63'd4;
parameter    ap_ST_fsm_state4 = 63'd8;
parameter    ap_ST_fsm_state5 = 63'd16;
parameter    ap_ST_fsm_state6 = 63'd32;
parameter    ap_ST_fsm_state7 = 63'd64;
parameter    ap_ST_fsm_state8 = 63'd128;
parameter    ap_ST_fsm_state9 = 63'd256;
parameter    ap_ST_fsm_state10 = 63'd512;
parameter    ap_ST_fsm_state11 = 63'd1024;
parameter    ap_ST_fsm_state12 = 63'd2048;
parameter    ap_ST_fsm_state13 = 63'd4096;
parameter    ap_ST_fsm_state14 = 63'd8192;
parameter    ap_ST_fsm_state15 = 63'd16384;
parameter    ap_ST_fsm_state16 = 63'd32768;
parameter    ap_ST_fsm_state17 = 63'd65536;
parameter    ap_ST_fsm_state18 = 63'd131072;
parameter    ap_ST_fsm_state19 = 63'd262144;
parameter    ap_ST_fsm_state20 = 63'd524288;
parameter    ap_ST_fsm_state21 = 63'd1048576;
parameter    ap_ST_fsm_state22 = 63'd2097152;
parameter    ap_ST_fsm_state23 = 63'd4194304;
parameter    ap_ST_fsm_state24 = 63'd8388608;
parameter    ap_ST_fsm_state25 = 63'd16777216;
parameter    ap_ST_fsm_state26 = 63'd33554432;
parameter    ap_ST_fsm_state27 = 63'd67108864;
parameter    ap_ST_fsm_state28 = 63'd134217728;
parameter    ap_ST_fsm_state29 = 63'd268435456;
parameter    ap_ST_fsm_state30 = 63'd536870912;
parameter    ap_ST_fsm_state31 = 63'd1073741824;
parameter    ap_ST_fsm_state32 = 63'd2147483648;
parameter    ap_ST_fsm_state33 = 63'd4294967296;
parameter    ap_ST_fsm_state34 = 63'd8589934592;
parameter    ap_ST_fsm_state35 = 63'd17179869184;
parameter    ap_ST_fsm_state36 = 63'd34359738368;
parameter    ap_ST_fsm_state37 = 63'd68719476736;
parameter    ap_ST_fsm_state38 = 63'd137438953472;
parameter    ap_ST_fsm_state39 = 63'd274877906944;
parameter    ap_ST_fsm_state40 = 63'd549755813888;
parameter    ap_ST_fsm_state41 = 63'd1099511627776;
parameter    ap_ST_fsm_state42 = 63'd2199023255552;
parameter    ap_ST_fsm_state43 = 63'd4398046511104;
parameter    ap_ST_fsm_state44 = 63'd8796093022208;
parameter    ap_ST_fsm_state45 = 63'd17592186044416;
parameter    ap_ST_fsm_state46 = 63'd35184372088832;
parameter    ap_ST_fsm_state47 = 63'd70368744177664;
parameter    ap_ST_fsm_state48 = 63'd140737488355328;
parameter    ap_ST_fsm_state49 = 63'd281474976710656;
parameter    ap_ST_fsm_state50 = 63'd562949953421312;
parameter    ap_ST_fsm_state51 = 63'd1125899906842624;
parameter    ap_ST_fsm_state52 = 63'd2251799813685248;
parameter    ap_ST_fsm_state53 = 63'd4503599627370496;
parameter    ap_ST_fsm_state54 = 63'd9007199254740992;
parameter    ap_ST_fsm_state55 = 63'd18014398509481984;
parameter    ap_ST_fsm_state56 = 63'd36028797018963968;
parameter    ap_ST_fsm_state57 = 63'd72057594037927936;
parameter    ap_ST_fsm_state58 = 63'd144115188075855872;
parameter    ap_ST_fsm_state59 = 63'd288230376151711744;
parameter    ap_ST_fsm_state60 = 63'd576460752303423488;
parameter    ap_ST_fsm_state61 = 63'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 63'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 63'd4611686018427387904;
parameter    C_S_AXI_CONTROL_R_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_R_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_R_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] INPUT_r_TDATA;
input   INPUT_r_TVALID;
output   INPUT_r_TREADY;
input  [3:0] INPUT_r_TKEEP;
input  [3:0] INPUT_r_TSTRB;
input  [1:0] INPUT_r_TUSER;
input  [0:0] INPUT_r_TLAST;
input  [4:0] INPUT_r_TID;
input  [5:0] INPUT_r_TDEST;
output  [31:0] OUTPUT_r_TDATA;
output   OUTPUT_r_TVALID;
input   OUTPUT_r_TREADY;
output  [3:0] OUTPUT_r_TKEEP;
output  [3:0] OUTPUT_r_TSTRB;
output  [1:0] OUTPUT_r_TUSER;
output  [0:0] OUTPUT_r_TLAST;
output  [4:0] OUTPUT_r_TID;
output  [5:0] OUTPUT_r_TDEST;
input   s_axi_control_r_AWVALID;
output   s_axi_control_r_AWREADY;
input  [C_S_AXI_CONTROL_R_ADDR_WIDTH - 1:0] s_axi_control_r_AWADDR;
input   s_axi_control_r_WVALID;
output   s_axi_control_r_WREADY;
input  [C_S_AXI_CONTROL_R_DATA_WIDTH - 1:0] s_axi_control_r_WDATA;
input  [C_S_AXI_CONTROL_R_WSTRB_WIDTH - 1:0] s_axi_control_r_WSTRB;
input   s_axi_control_r_ARVALID;
output   s_axi_control_r_ARREADY;
input  [C_S_AXI_CONTROL_R_ADDR_WIDTH - 1:0] s_axi_control_r_ARADDR;
output   s_axi_control_r_RVALID;
input   s_axi_control_r_RREADY;
output  [C_S_AXI_CONTROL_R_DATA_WIDTH - 1:0] s_axi_control_r_RDATA;
output  [1:0] s_axi_control_r_RRESP;
output   s_axi_control_r_BVALID;
input   s_axi_control_r_BREADY;
output  [1:0] s_axi_control_r_BRESP;

 reg    ap_rst_n_inv;
wire   [31:0] axilite_out;
reg    axilite_out_ap_vld;
wire   [7:0] control;
wire   [31:0] distortion_threshold;
wire   [0:0] distortion_clip_factor;
wire   [31:0] compression_min_threshold;
wire   [31:0] compression_max_threshold;
wire   [31:0] compression_zero_threshold;
wire   [31:0] delay_mult;
wire   [31:0] delay_samples;
reg    INPUT_r_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [62:0] ap_CS_fsm;
wire    ap_CS_fsm_state38;
reg    OUTPUT_r_TDATA_blk_n;
wire    ap_CS_fsm_state61;
reg   [0:0] tmp_last_V_reg_884;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state62;
wire   [31:0] grp_fu_396_p1;
reg   [31:0] reg_400;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state53;
reg   [31:0] delay_samples_read_reg_778;
wire    ap_CS_fsm_state1;
reg   [31:0] delay_mult_read_reg_783;
reg   [31:0] compression_zero_threshold_read_reg_788;
reg   [31:0] compression_max_threshold_read_reg_793;
reg   [31:0] compression_min_threshold_read_reg_798;
reg   [0:0] distortion_clip_factor_read_reg_803;
reg   [31:0] distortion_threshold_read_reg_809;
wire   [24:0] trunc_ln18_fu_406_p1;
reg   [24:0] trunc_ln18_reg_817;
wire   [0:0] trunc_ln18_1_fu_410_p1;
reg   [0:0] trunc_ln18_1_reg_823;
reg   [0:0] tmp_reg_828;
reg   [0:0] tmp_2_reg_832;
reg   [0:0] tmp_3_reg_836;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state37;
wire   [31:0] negative_threshold_fu_459_p2;
reg   [31:0] negative_threshold_reg_850;
reg   [15:0] delay_buffer_addr_1_reg_855;
reg   [3:0] tmp_keep_V_reg_869;
reg   [3:0] tmp_strb_V_reg_874;
reg   [1:0] tmp_user_V_reg_879;
reg   [4:0] tmp_id_V_reg_888;
reg   [5:0] tmp_dest_V_reg_893;
wire   [31:0] or_ln74_fu_508_p2;
reg   [31:0] or_ln74_reg_898;
wire   [31:0] ret_V_1_fu_550_p2;
reg   [31:0] ret_V_1_reg_911;
wire   [0:0] icmp_ln117_fu_514_p2;
wire   [0:0] icmp_ln119_fu_519_p2;
wire   [31:0] ret_V_fu_575_p2;
wire   [31:0] or_ln79_fu_584_p2;
wire    ap_CS_fsm_state41;
wire   [31:0] delay_buffer_q0;
reg   [31:0] delay_buffer_load_reg_934;
wire    ap_CS_fsm_state43;
wire   [31:0] grp_fu_392_p2;
reg   [31:0] mul_i_reg_939;
wire   [31:0] grp_fu_388_p2;
reg   [31:0] dc_reg_944;
wire    ap_CS_fsm_state58;
reg   [0:0] p_Result_s_reg_949;
wire    ap_CS_fsm_state59;
wire   [22:0] p_Result_1_fu_624_p1;
reg   [22:0] p_Result_1_reg_954;
wire   [0:0] isNeg_fu_638_p3;
reg   [0:0] isNeg_reg_959;
wire   [8:0] ush_fu_656_p3;
reg   [8:0] ush_reg_964;
wire   [31:0] val_fu_718_p3;
reg   [31:0] val_reg_969;
wire    ap_CS_fsm_state60;
reg   [15:0] delay_buffer_address0;
reg    delay_buffer_ce0;
reg    delay_buffer_we0;
reg   [31:0] delay_buffer_d0;
wire    grp_guitar_effects_Pipeline_2_fu_371_ap_start;
wire    grp_guitar_effects_Pipeline_2_fu_371_ap_done;
wire    grp_guitar_effects_Pipeline_2_fu_371_ap_idle;
wire    grp_guitar_effects_Pipeline_2_fu_371_ap_ready;
wire   [15:0] grp_guitar_effects_Pipeline_2_fu_371_delay_buffer_address0;
wire    grp_guitar_effects_Pipeline_2_fu_371_delay_buffer_ce0;
wire    grp_guitar_effects_Pipeline_2_fu_371_delay_buffer_we0;
wire   [31:0] grp_guitar_effects_Pipeline_2_fu_371_delay_buffer_d0;
wire    grp_compression_fu_376_ap_start;
wire    grp_compression_fu_376_ap_done;
wire    grp_compression_fu_376_ap_idle;
wire    grp_compression_fu_376_ap_ready;
wire   [8:0] grp_compression_fu_376_values_buffer_address0;
wire    grp_compression_fu_376_values_buffer_ce0;
wire    grp_compression_fu_376_values_buffer_we0;
wire   [31:0] grp_compression_fu_376_values_buffer_d0;
wire   [31:0] grp_compression_fu_376_ap_return_0;
wire   [31:0] grp_compression_fu_376_ap_return_1;
wire   [31:0] grp_compression_fu_376_grp_fu_392_p_din0;
wire   [31:0] grp_compression_fu_376_grp_fu_392_p_din1;
wire    grp_compression_fu_376_grp_fu_392_p_ce;
wire   [31:0] grp_compression_fu_376_grp_fu_396_p_din0;
wire    grp_compression_fu_376_grp_fu_396_p_ce;
reg   [31:0] empty_30_reg_298;
wire    ap_CS_fsm_state39;
reg   [31:0] tmp_int_reg_312;
reg   [31:0] empty_31_reg_326;
wire    ap_CS_fsm_state40;
reg   [31:0] tmp_int_3_reg_337;
wire   [31:0] or_ln84_fu_725_p2;
reg   [31:0] ap_phi_mux_empty_32_phi_fu_351_p4;
reg   [31:0] empty_32_reg_348;
reg    ap_block_state61;
reg    ap_block_state61_io;
wire    ap_CS_fsm_state42;
wire   [31:0] result_V_fu_737_p3;
reg   [31:0] ap_phi_mux_tmp_int_6_phi_fu_362_p4;
reg   [31:0] tmp_int_6_reg_358;
reg    grp_guitar_effects_Pipeline_2_fu_371_ap_start_reg;
wire    ap_CS_fsm_state36;
reg    grp_compression_fu_376_ap_start_reg;
wire   [63:0] idxprom_i_cast_fu_468_p1;
reg   [31:0] empty_fu_168;
wire   [31:0] select_ln87_fu_751_p3;
reg   [31:0] current_level_1_fu_172;
wire    ap_CS_fsm_state54;
reg   [31:0] grp_fu_392_p0;
reg   [31:0] grp_fu_392_p1;
wire    ap_CS_fsm_state50;
reg   [31:0] grp_fu_396_p0;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state48;
wire   [31:0] grp_fu_453_p0;
wire   [16:0] grp_fu_453_p1;
wire   [15:0] grp_fu_453_p2;
wire   [15:0] empty_28_fu_464_p1;
wire   [24:0] trunc_ln283_fu_504_p1;
wire   [24:0] r_V_fu_524_p2;
wire   [24:0] sub_ln1319_1_fu_529_p2;
wire   [24:0] select_ln1319_1_fu_535_p3;
wire   [31:0] lhs_1_fu_542_p3;
wire   [24:0] sub_ln1319_fu_555_p2;
wire   [24:0] select_ln1319_fu_560_p3;
wire   [31:0] lhs_fu_567_p3;
wire   [31:0] data_V_fu_603_p1;
wire   [7:0] xs_exp_V_fu_614_p4;
wire   [8:0] zext_ln346_fu_628_p1;
wire   [8:0] add_ln346_fu_632_p2;
wire   [7:0] sub_ln1512_fu_646_p2;
wire  signed [8:0] sext_ln1512_fu_652_p1;
wire   [24:0] mantissa_fu_664_p4;
wire  signed [31:0] sext_ln1488_fu_677_p1;
wire   [78:0] zext_ln15_fu_673_p1;
wire   [78:0] zext_ln1488_fu_680_p1;
wire   [78:0] r_V_1_fu_684_p2;
wire   [0:0] tmp_7_fu_696_p3;
wire   [78:0] r_V_2_fu_690_p2;
wire   [31:0] zext_ln818_fu_704_p1;
wire   [31:0] tmp_1_fu_708_p4;
wire   [31:0] result_V_2_fu_732_p2;
wire   [31:0] or_ln89_fu_745_p2;
reg    grp_fu_392_ce;
reg    grp_fu_396_ce;
reg    grp_fu_453_ap_start;
wire    grp_fu_453_ap_done;
reg    grp_fu_453_ce;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state57;
reg   [62:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
reg    ap_ST_fsm_state37_blk;
reg    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
reg    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
reg    ap_ST_fsm_state61_blk;
reg    ap_ST_fsm_state62_blk;
reg    ap_ST_fsm_state63_blk;
wire    regslice_both_OUTPUT_r_V_data_V_U_apdone_blk;
reg    ap_block_state63;
wire    regslice_both_INPUT_r_V_data_V_U_apdone_blk;
wire   [31:0] INPUT_r_TDATA_int_regslice;
wire    INPUT_r_TVALID_int_regslice;
reg    INPUT_r_TREADY_int_regslice;
wire    regslice_both_INPUT_r_V_data_V_U_ack_in;
wire    regslice_both_INPUT_r_V_keep_V_U_apdone_blk;
wire   [3:0] INPUT_r_TKEEP_int_regslice;
wire    regslice_both_INPUT_r_V_keep_V_U_vld_out;
wire    regslice_both_INPUT_r_V_keep_V_U_ack_in;
wire    regslice_both_INPUT_r_V_strb_V_U_apdone_blk;
wire   [3:0] INPUT_r_TSTRB_int_regslice;
wire    regslice_both_INPUT_r_V_strb_V_U_vld_out;
wire    regslice_both_INPUT_r_V_strb_V_U_ack_in;
wire    regslice_both_INPUT_r_V_user_V_U_apdone_blk;
wire   [1:0] INPUT_r_TUSER_int_regslice;
wire    regslice_both_INPUT_r_V_user_V_U_vld_out;
wire    regslice_both_INPUT_r_V_user_V_U_ack_in;
wire    regslice_both_INPUT_r_V_last_V_U_apdone_blk;
wire   [0:0] INPUT_r_TLAST_int_regslice;
wire    regslice_both_INPUT_r_V_last_V_U_vld_out;
wire    regslice_both_INPUT_r_V_last_V_U_ack_in;
wire    regslice_both_INPUT_r_V_id_V_U_apdone_blk;
wire   [4:0] INPUT_r_TID_int_regslice;
wire    regslice_both_INPUT_r_V_id_V_U_vld_out;
wire    regslice_both_INPUT_r_V_id_V_U_ack_in;
wire    regslice_both_INPUT_r_V_dest_V_U_apdone_blk;
wire   [5:0] INPUT_r_TDEST_int_regslice;
wire    regslice_both_INPUT_r_V_dest_V_U_vld_out;
wire    regslice_both_INPUT_r_V_dest_V_U_ack_in;
reg    OUTPUT_r_TVALID_int_regslice;
wire    OUTPUT_r_TREADY_int_regslice;
wire    regslice_both_OUTPUT_r_V_data_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_keep_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_keep_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_keep_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_strb_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_strb_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_strb_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_user_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_user_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_user_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_last_V_U_apdone_blk;
reg   [0:0] OUTPUT_r_TLAST_int_regslice;
wire    regslice_both_OUTPUT_r_V_last_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_last_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_id_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_id_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_id_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_dest_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_dest_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_dest_V_U_vld_out;
reg    ap_condition_1238;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 63'd1;
#0 grp_guitar_effects_Pipeline_2_fu_371_ap_start_reg = 1'b0;
#0 grp_compression_fu_376_ap_start_reg = 1'b0;
end

guitar_effects_compression_buffer_RAM_AUTO_0R0W #(
    .DataWidth( 32 ),
    .AddressRange( 441 ),
    .AddressWidth( 9 ))
compression_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_compression_fu_376_values_buffer_address0),
    .ce0(grp_compression_fu_376_values_buffer_ce0),
    .we0(grp_compression_fu_376_values_buffer_we0),
    .d0(grp_compression_fu_376_values_buffer_d0)
);

guitar_effects_delay_buffer_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 44100 ),
    .AddressWidth( 16 ))
delay_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(delay_buffer_address0),
    .ce0(delay_buffer_ce0),
    .we0(delay_buffer_we0),
    .d0(delay_buffer_d0),
    .q0(delay_buffer_q0)
);

guitar_effects_guitar_effects_Pipeline_2 grp_guitar_effects_Pipeline_2_fu_371(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_guitar_effects_Pipeline_2_fu_371_ap_start),
    .ap_done(grp_guitar_effects_Pipeline_2_fu_371_ap_done),
    .ap_idle(grp_guitar_effects_Pipeline_2_fu_371_ap_idle),
    .ap_ready(grp_guitar_effects_Pipeline_2_fu_371_ap_ready),
    .delay_buffer_address0(grp_guitar_effects_Pipeline_2_fu_371_delay_buffer_address0),
    .delay_buffer_ce0(grp_guitar_effects_Pipeline_2_fu_371_delay_buffer_ce0),
    .delay_buffer_we0(grp_guitar_effects_Pipeline_2_fu_371_delay_buffer_we0),
    .delay_buffer_d0(grp_guitar_effects_Pipeline_2_fu_371_delay_buffer_d0)
);

guitar_effects_compression grp_compression_fu_376(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_compression_fu_376_ap_start),
    .ap_done(grp_compression_fu_376_ap_done),
    .ap_idle(grp_compression_fu_376_ap_idle),
    .ap_ready(grp_compression_fu_376_ap_ready),
    .input_r(tmp_int_reg_312),
    .min_threshold(compression_min_threshold_read_reg_798),
    .max_threshold(compression_max_threshold_read_reg_793),
    .zero_threshold(compression_zero_threshold_read_reg_788),
    .current_level_read(current_level_1_fu_172),
    .values_buffer_address0(grp_compression_fu_376_values_buffer_address0),
    .values_buffer_ce0(grp_compression_fu_376_values_buffer_ce0),
    .values_buffer_we0(grp_compression_fu_376_values_buffer_we0),
    .values_buffer_d0(grp_compression_fu_376_values_buffer_d0),
    .ap_return_0(grp_compression_fu_376_ap_return_0),
    .ap_return_1(grp_compression_fu_376_ap_return_1),
    .grp_fu_392_p_din0(grp_compression_fu_376_grp_fu_392_p_din0),
    .grp_fu_392_p_din1(grp_compression_fu_376_grp_fu_392_p_din1),
    .grp_fu_392_p_dout0(grp_fu_392_p2),
    .grp_fu_392_p_ce(grp_compression_fu_376_grp_fu_392_p_ce),
    .grp_fu_396_p_din0(grp_compression_fu_376_grp_fu_396_p_din0),
    .grp_fu_396_p_dout0(grp_fu_396_p1),
    .grp_fu_396_p_ce(grp_compression_fu_376_grp_fu_396_p_ce)
);

guitar_effects_control_r_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_R_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_R_DATA_WIDTH ))
control_r_s_axi_U(
    .AWVALID(s_axi_control_r_AWVALID),
    .AWREADY(s_axi_control_r_AWREADY),
    .AWADDR(s_axi_control_r_AWADDR),
    .WVALID(s_axi_control_r_WVALID),
    .WREADY(s_axi_control_r_WREADY),
    .WDATA(s_axi_control_r_WDATA),
    .WSTRB(s_axi_control_r_WSTRB),
    .ARVALID(s_axi_control_r_ARVALID),
    .ARREADY(s_axi_control_r_ARREADY),
    .ARADDR(s_axi_control_r_ARADDR),
    .RVALID(s_axi_control_r_RVALID),
    .RREADY(s_axi_control_r_RREADY),
    .RDATA(s_axi_control_r_RDATA),
    .RRESP(s_axi_control_r_RRESP),
    .BVALID(s_axi_control_r_BVALID),
    .BREADY(s_axi_control_r_BREADY),
    .BRESP(s_axi_control_r_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .axilite_out(axilite_out),
    .axilite_out_ap_vld(axilite_out_ap_vld),
    .control(control),
    .distortion_threshold(distortion_threshold),
    .distortion_clip_factor(distortion_clip_factor),
    .compression_min_threshold(compression_min_threshold),
    .compression_max_threshold(compression_max_threshold),
    .compression_zero_threshold(compression_zero_threshold),
    .delay_mult(delay_mult),
    .delay_samples(delay_samples)
);

guitar_effects_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U15(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_400),
    .din1(mul_i_reg_939),
    .ce(1'b1),
    .dout(grp_fu_388_p2)
);

guitar_effects_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U16(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_392_p0),
    .din1(grp_fu_392_p1),
    .ce(grp_fu_392_ce),
    .dout(grp_fu_392_p2)
);

guitar_effects_sitofp_32ns_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32ns_32_6_no_dsp_1_U17(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_396_p0),
    .ce(grp_fu_396_ce),
    .dout(grp_fu_396_p1)
);

guitar_effects_srem_32ns_17ns_16_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 16 ))
srem_32ns_17ns_16_36_seq_1_U18(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_453_ap_start),
    .done(grp_fu_453_ap_done),
    .din0(grp_fu_453_p0),
    .din1(grp_fu_453_p1),
    .ce(grp_fu_453_ce),
    .dout(grp_fu_453_p2)
);

guitar_effects_regslice_both #(
    .DataWidth( 32 ))
regslice_both_INPUT_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TDATA),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_data_V_U_ack_in),
    .data_out(INPUT_r_TDATA_int_regslice),
    .vld_out(INPUT_r_TVALID_int_regslice),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_data_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 4 ))
regslice_both_INPUT_r_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TKEEP),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_keep_V_U_ack_in),
    .data_out(INPUT_r_TKEEP_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_keep_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_keep_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 4 ))
regslice_both_INPUT_r_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TSTRB),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_strb_V_U_ack_in),
    .data_out(INPUT_r_TSTRB_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_strb_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_strb_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 2 ))
regslice_both_INPUT_r_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TUSER),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_user_V_U_ack_in),
    .data_out(INPUT_r_TUSER_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_user_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_user_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 1 ))
regslice_both_INPUT_r_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TLAST),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_last_V_U_ack_in),
    .data_out(INPUT_r_TLAST_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_last_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_last_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 5 ))
regslice_both_INPUT_r_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TID),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_id_V_U_ack_in),
    .data_out(INPUT_r_TID_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_id_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_id_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 6 ))
regslice_both_INPUT_r_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TDEST),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_dest_V_U_ack_in),
    .data_out(INPUT_r_TDEST_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_dest_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_dest_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 32 ))
regslice_both_OUTPUT_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ap_phi_mux_tmp_int_6_phi_fu_362_p4),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(OUTPUT_r_TREADY_int_regslice),
    .data_out(OUTPUT_r_TDATA),
    .vld_out(regslice_both_OUTPUT_r_V_data_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_data_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 4 ))
regslice_both_OUTPUT_r_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_keep_V_reg_869),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_keep_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TKEEP),
    .vld_out(regslice_both_OUTPUT_r_V_keep_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_keep_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 4 ))
regslice_both_OUTPUT_r_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_strb_V_reg_874),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_strb_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TSTRB),
    .vld_out(regslice_both_OUTPUT_r_V_strb_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_strb_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 2 ))
regslice_both_OUTPUT_r_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_user_V_reg_879),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_user_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TUSER),
    .vld_out(regslice_both_OUTPUT_r_V_user_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_user_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 1 ))
regslice_both_OUTPUT_r_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(OUTPUT_r_TLAST_int_regslice),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_last_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TLAST),
    .vld_out(regslice_both_OUTPUT_r_V_last_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_last_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 5 ))
regslice_both_OUTPUT_r_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_id_V_reg_888),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_id_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TID),
    .vld_out(regslice_both_OUTPUT_r_V_id_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_id_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 6 ))
regslice_both_OUTPUT_r_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_dest_V_reg_893),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_dest_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TDEST),
    .vld_out(regslice_both_OUTPUT_r_V_dest_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_compression_fu_376_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state40) & (tmp_2_reg_832 == 1'd1))) begin
            grp_compression_fu_376_ap_start_reg <= 1'b1;
        end else if ((grp_compression_fu_376_ap_ready == 1'b1)) begin
            grp_compression_fu_376_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_guitar_effects_Pipeline_2_fu_371_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state36)) begin
            grp_guitar_effects_Pipeline_2_fu_371_ap_start_reg <= 1'b1;
        end else if ((grp_guitar_effects_Pipeline_2_fu_371_ap_ready == 1'b1)) begin
            grp_guitar_effects_Pipeline_2_fu_371_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        current_level_1_fu_172 <= 32'd0;
    end else if (((grp_compression_fu_376_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
        current_level_1_fu_172 <= grp_compression_fu_376_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state38) & (1'b1 == INPUT_r_TVALID_int_regslice) & (tmp_reg_828 == 1'd0))) begin
        empty_30_reg_298 <= empty_fu_168;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        empty_30_reg_298 <= or_ln74_reg_898;
    end else if ((((icmp_ln119_fu_519_p2 == 1'd0) & (icmp_ln117_fu_514_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state38) & (1'b1 == INPUT_r_TVALID_int_regslice) & (tmp_reg_828 == 1'd1)) | ((icmp_ln117_fu_514_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state38) & (1'b1 == INPUT_r_TVALID_int_regslice) & (tmp_reg_828 == 1'd1)))) begin
        empty_30_reg_298 <= or_ln74_fu_508_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) & (tmp_2_reg_832 == 1'd0))) begin
        empty_31_reg_326 <= empty_30_reg_298;
    end else if (((grp_compression_fu_376_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
        empty_31_reg_326 <= or_ln79_fu_584_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & (tmp_3_reg_836 == 1'd0))) begin
        empty_32_reg_348 <= empty_31_reg_326;
    end else if ((~((1'b1 == ap_block_state61_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_884 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_884 == 1'd1))) & (1'b1 == ap_CS_fsm_state61) & (tmp_3_reg_836 == 1'd1))) begin
        empty_32_reg_348 <= or_ln84_fu_725_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_fu_168 <= 32'd0;
    end else if ((~((1'b1 == ap_block_state61_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_884 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_884 == 1'd1))) & (1'b1 == ap_CS_fsm_state61) & (tmp_last_V_reg_884 == 1'd0))) begin
        empty_fu_168 <= select_ln87_fu_751_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) & (tmp_2_reg_832 == 1'd0))) begin
        tmp_int_3_reg_337 <= tmp_int_reg_312;
    end else if (((grp_compression_fu_376_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
        tmp_int_3_reg_337 <= grp_compression_fu_376_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & (tmp_3_reg_836 == 1'd0))) begin
        tmp_int_6_reg_358 <= tmp_int_3_reg_337;
    end else if ((~((1'b1 == ap_block_state61_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_884 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_884 == 1'd1))) & (1'b1 == ap_CS_fsm_state61) & (tmp_3_reg_836 == 1'd1))) begin
        tmp_int_6_reg_358 <= result_V_fu_737_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln119_fu_519_p2 == 1'd0) & (icmp_ln117_fu_514_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state38) & (1'b1 == INPUT_r_TVALID_int_regslice) & (tmp_reg_828 == 1'd1)) | ((1'b1 == ap_CS_fsm_state38) & (1'b1 == INPUT_r_TVALID_int_regslice) & (tmp_reg_828 == 1'd0)))) begin
        tmp_int_reg_312 <= INPUT_r_TDATA_int_regslice;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        tmp_int_reg_312 <= ret_V_1_reg_911;
    end else if (((icmp_ln117_fu_514_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state38) & (1'b1 == INPUT_r_TVALID_int_regslice) & (tmp_reg_828 == 1'd1))) begin
        tmp_int_reg_312 <= ret_V_fu_575_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        compression_max_threshold_read_reg_793 <= compression_max_threshold;
        compression_min_threshold_read_reg_798 <= compression_min_threshold;
        compression_zero_threshold_read_reg_788 <= compression_zero_threshold;
        delay_mult_read_reg_783 <= delay_mult;
        delay_samples_read_reg_778 <= delay_samples;
        distortion_clip_factor_read_reg_803 <= distortion_clip_factor;
        distortion_threshold_read_reg_809 <= distortion_threshold;
        tmp_2_reg_832 <= control[32'd2];
        tmp_3_reg_836 <= control[32'd1];
        tmp_reg_828 <= control[32'd3];
        trunc_ln18_1_reg_823 <= trunc_ln18_1_fu_410_p1;
        trunc_ln18_reg_817 <= trunc_ln18_fu_406_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        dc_reg_944 <= grp_fu_388_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        delay_buffer_addr_1_reg_855 <= idxprom_i_cast_fu_468_p1;
        negative_threshold_reg_850 <= negative_threshold_fu_459_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        delay_buffer_load_reg_934 <= delay_buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        isNeg_reg_959 <= add_ln346_fu_632_p2[32'd8];
        p_Result_1_reg_954 <= p_Result_1_fu_624_p1;
        p_Result_s_reg_949 <= data_V_fu_603_p1[32'd31];
        ush_reg_964 <= ush_fu_656_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        mul_i_reg_939 <= grp_fu_392_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state38) & (tmp_reg_828 == 1'd1))) begin
        or_ln74_reg_898[2 : 0] <= or_ln74_fu_508_p2[2 : 0];
or_ln74_reg_898[31 : 4] <= or_ln74_fu_508_p2[31 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state49))) begin
        reg_400 <= grp_fu_396_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln119_fu_519_p2 == 1'd1) & (icmp_ln117_fu_514_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state38) & (tmp_reg_828 == 1'd1))) begin
        ret_V_1_reg_911 <= ret_V_1_fu_550_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        tmp_dest_V_reg_893 <= INPUT_r_TDEST_int_regslice;
        tmp_id_V_reg_888 <= INPUT_r_TID_int_regslice;
        tmp_keep_V_reg_869 <= INPUT_r_TKEEP_int_regslice;
        tmp_last_V_reg_884 <= INPUT_r_TLAST_int_regslice;
        tmp_strb_V_reg_874 <= INPUT_r_TSTRB_int_regslice;
        tmp_user_V_reg_879 <= INPUT_r_TUSER_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        val_reg_969 <= val_fu_718_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        INPUT_r_TDATA_blk_n = INPUT_r_TVALID_int_regslice;
    end else begin
        INPUT_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) & (1'b1 == INPUT_r_TVALID_int_regslice))) begin
        INPUT_r_TREADY_int_regslice = 1'b1;
    end else begin
        INPUT_r_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state63) | ((1'b1 == ap_CS_fsm_state61) & (tmp_last_V_reg_884 == 1'd0)) | ((1'b1 == ap_CS_fsm_state61) & (tmp_last_V_reg_884 == 1'd1)))) begin
        OUTPUT_r_TDATA_blk_n = OUTPUT_r_TREADY_int_regslice;
    end else begin
        OUTPUT_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1238)) begin
        if ((tmp_last_V_reg_884 == 1'd1)) begin
            OUTPUT_r_TLAST_int_regslice = 1'd1;
        end else if ((tmp_last_V_reg_884 == 1'd0)) begin
            OUTPUT_r_TLAST_int_regslice = 1'd0;
        end else begin
            OUTPUT_r_TLAST_int_regslice = 'bx;
        end
    end else begin
        OUTPUT_r_TLAST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state61_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_884 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_884 == 1'd1))) & (1'b1 == ap_CS_fsm_state61) & (tmp_last_V_reg_884 == 1'd0)) | (~((1'b1 == ap_block_state61_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_884 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_884 == 1'd1))) & (1'b1 == ap_CS_fsm_state61) & (tmp_last_V_reg_884 == 1'd1)))) begin
        OUTPUT_r_TVALID_int_regslice = 1'b1;
    end else begin
        OUTPUT_r_TVALID_int_regslice = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

assign ap_ST_fsm_state1_blk = 1'b0;

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

always @ (*) begin
    if ((grp_guitar_effects_Pipeline_2_fu_371_ap_done == 1'b0)) begin
        ap_ST_fsm_state37_blk = 1'b1;
    end else begin
        ap_ST_fsm_state37_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == INPUT_r_TVALID_int_regslice)) begin
        ap_ST_fsm_state38_blk = 1'b1;
    end else begin
        ap_ST_fsm_state38_blk = 1'b0;
    end
end

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

always @ (*) begin
    if ((grp_compression_fu_376_ap_done == 1'b0)) begin
        ap_ST_fsm_state41_blk = 1'b1;
    end else begin
        ap_ST_fsm_state41_blk = 1'b0;
    end
end

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_block_state61_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_884 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_884 == 1'd1)))) begin
        ap_ST_fsm_state61_blk = 1'b1;
    end else begin
        ap_ST_fsm_state61_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == OUTPUT_r_TREADY_int_regslice)) begin
        ap_ST_fsm_state62_blk = 1'b1;
    end else begin
        ap_ST_fsm_state62_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == OUTPUT_r_TREADY_int_regslice) | (regslice_both_OUTPUT_r_V_data_V_U_apdone_blk == 1'b1))) begin
        ap_ST_fsm_state63_blk = 1'b1;
    end else begin
        ap_ST_fsm_state63_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state61) & (tmp_3_reg_836 == 1'd1))) begin
        ap_phi_mux_empty_32_phi_fu_351_p4 = or_ln84_fu_725_p2;
    end else begin
        ap_phi_mux_empty_32_phi_fu_351_p4 = empty_32_reg_348;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state61) & (tmp_3_reg_836 == 1'd1))) begin
        ap_phi_mux_tmp_int_6_phi_fu_362_p4 = result_V_fu_737_p3;
    end else begin
        ap_phi_mux_tmp_int_6_phi_fu_362_p4 = tmp_int_6_reg_358;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state61_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_884 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_884 == 1'd1))) & (1'b1 == ap_CS_fsm_state61) & (tmp_last_V_reg_884 == 1'd1))) begin
        axilite_out_ap_vld = 1'b1;
    end else begin
        axilite_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        delay_buffer_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        delay_buffer_address0 = delay_buffer_addr_1_reg_855;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        delay_buffer_address0 = grp_guitar_effects_Pipeline_2_fu_371_delay_buffer_address0;
    end else begin
        delay_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (~((1'b1 == ap_block_state61_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_884 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_884 == 1'd1))) & (1'b1 == ap_CS_fsm_state61)))) begin
        delay_buffer_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        delay_buffer_ce0 = grp_guitar_effects_Pipeline_2_fu_371_delay_buffer_ce0;
    end else begin
        delay_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        delay_buffer_d0 = result_V_fu_737_p3;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        delay_buffer_d0 = grp_guitar_effects_Pipeline_2_fu_371_delay_buffer_d0;
    end else begin
        delay_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state61_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_884 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_884 == 1'd1))) & (1'b1 == ap_CS_fsm_state61) & (tmp_3_reg_836 == 1'd1))) begin
        delay_buffer_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        delay_buffer_we0 = grp_guitar_effects_Pipeline_2_fu_371_delay_buffer_we0;
    end else begin
        delay_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_392_ce = grp_compression_fu_376_grp_fu_392_p_ce;
    end else begin
        grp_fu_392_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_392_p0 = grp_compression_fu_376_grp_fu_392_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_392_p0 = reg_400;
    end else begin
        grp_fu_392_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_392_p1 = grp_compression_fu_376_grp_fu_392_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_392_p1 = delay_mult_read_reg_783;
    end else begin
        grp_fu_392_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_396_ce = grp_compression_fu_376_grp_fu_396_p_ce;
    end else begin
        grp_fu_396_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_396_p0 = grp_compression_fu_376_grp_fu_396_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_396_p0 = tmp_int_3_reg_337;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_396_p0 = delay_buffer_load_reg_934;
    end else begin
        grp_fu_396_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_453_ap_start = 1'b1;
    end else begin
        grp_fu_453_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state38))) begin
        grp_fu_453_ce = 1'b0;
    end else begin
        grp_fu_453_ce = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (((grp_guitar_effects_Pipeline_2_fu_371_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((icmp_ln119_fu_519_p2 == 1'd1) & (icmp_ln117_fu_514_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state38) & (1'b1 == INPUT_r_TVALID_int_regslice) & (tmp_reg_828 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else if (((1'b1 == ap_CS_fsm_state38) & (1'b1 == INPUT_r_TVALID_int_regslice) & ((tmp_reg_828 == 1'd0) | ((icmp_ln119_fu_519_p2 == 1'd0) | (icmp_ln117_fu_514_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            if (((1'b1 == ap_CS_fsm_state40) & (tmp_2_reg_832 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((grp_compression_fu_376_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((1'b1 == ap_CS_fsm_state42) & (tmp_3_reg_836 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            if ((~((1'b1 == ap_block_state61_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_884 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_884 == 1'd1))) & (1'b1 == ap_CS_fsm_state61) & (tmp_last_V_reg_884 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else if ((~((1'b1 == ap_block_state61_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_884 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_884 == 1'd1))) & (1'b1 == ap_CS_fsm_state61) & (tmp_last_V_reg_884 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_state62 : begin
            if (((1'b1 == ap_CS_fsm_state62) & (1'b1 == OUTPUT_r_TREADY_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state63 : begin
            if ((~((1'b0 == OUTPUT_r_TREADY_int_regslice) | (regslice_both_OUTPUT_r_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state63))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign INPUT_r_TREADY = regslice_both_INPUT_r_V_data_V_U_ack_in;

assign OUTPUT_r_TVALID = regslice_both_OUTPUT_r_V_data_V_U_vld_out;

assign add_ln346_fu_632_p2 = ($signed(zext_ln346_fu_628_p1) + $signed(9'd385));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

always @ (*) begin
    ap_block_state61 = (((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_884 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_884 == 1'd1)));
end

always @ (*) begin
    ap_block_state61_io = (((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_884 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_884 == 1'd1)));
end

always @ (*) begin
    ap_block_state63 = ((1'b0 == OUTPUT_r_TREADY_int_regslice) | (regslice_both_OUTPUT_r_V_data_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_condition_1238 = (~(((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_884 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_884 == 1'd1))) & (1'b1 == ap_CS_fsm_state61));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign axilite_out = ((trunc_ln18_1_reg_823[0:0] == 1'b1) ? or_ln89_fu_745_p2 : ap_phi_mux_empty_32_phi_fu_351_p4);

assign data_V_fu_603_p1 = dc_reg_944;

assign empty_28_fu_464_p1 = grp_fu_453_p2[15:0];

assign grp_compression_fu_376_ap_start = grp_compression_fu_376_ap_start_reg;

assign grp_fu_453_p0 = (32'd0 - delay_samples_read_reg_778);

assign grp_fu_453_p1 = 32'd44100;

assign grp_guitar_effects_Pipeline_2_fu_371_ap_start = grp_guitar_effects_Pipeline_2_fu_371_ap_start_reg;

assign icmp_ln117_fu_514_p2 = (($signed(INPUT_r_TDATA_int_regslice) > $signed(distortion_threshold_read_reg_809)) ? 1'b1 : 1'b0);

assign icmp_ln119_fu_519_p2 = (($signed(INPUT_r_TDATA_int_regslice) < $signed(negative_threshold_reg_850)) ? 1'b1 : 1'b0);

assign idxprom_i_cast_fu_468_p1 = empty_28_fu_464_p1;

assign isNeg_fu_638_p3 = add_ln346_fu_632_p2[32'd8];

assign lhs_1_fu_542_p3 = {{select_ln1319_1_fu_535_p3}, {7'd0}};

assign lhs_fu_567_p3 = {{select_ln1319_fu_560_p3}, {7'd0}};

assign mantissa_fu_664_p4 = {{{{1'd1}, {p_Result_1_reg_954}}}, {1'd0}};

assign negative_threshold_fu_459_p2 = (32'd0 - distortion_threshold_read_reg_809);

assign or_ln74_fu_508_p2 = (empty_fu_168 | 32'd8);

assign or_ln79_fu_584_p2 = (empty_30_reg_298 | 32'd4);

assign or_ln84_fu_725_p2 = (empty_31_reg_326 | 32'd2);

assign or_ln89_fu_745_p2 = (ap_phi_mux_empty_32_phi_fu_351_p4 | 32'd1);

assign p_Result_1_fu_624_p1 = data_V_fu_603_p1[22:0];

assign r_V_1_fu_684_p2 = zext_ln15_fu_673_p1 >> zext_ln1488_fu_680_p1;

assign r_V_2_fu_690_p2 = zext_ln15_fu_673_p1 << zext_ln1488_fu_680_p1;

assign r_V_fu_524_p2 = (trunc_ln283_fu_504_p1 + trunc_ln18_reg_817);

assign result_V_2_fu_732_p2 = (32'd0 - val_reg_969);

assign result_V_fu_737_p3 = ((p_Result_s_reg_949[0:0] == 1'b1) ? result_V_2_fu_732_p2 : val_reg_969);

assign ret_V_1_fu_550_p2 = (lhs_1_fu_542_p3 - distortion_threshold_read_reg_809);

assign ret_V_fu_575_p2 = (lhs_fu_567_p3 + distortion_threshold_read_reg_809);

assign select_ln1319_1_fu_535_p3 = ((distortion_clip_factor_read_reg_803[0:0] == 1'b1) ? sub_ln1319_1_fu_529_p2 : 25'd0);

assign select_ln1319_fu_560_p3 = ((distortion_clip_factor_read_reg_803[0:0] == 1'b1) ? sub_ln1319_fu_555_p2 : 25'd0);

assign select_ln87_fu_751_p3 = ((trunc_ln18_1_reg_823[0:0] == 1'b1) ? or_ln89_fu_745_p2 : ap_phi_mux_empty_32_phi_fu_351_p4);

assign sext_ln1488_fu_677_p1 = $signed(ush_reg_964);

assign sext_ln1512_fu_652_p1 = $signed(sub_ln1512_fu_646_p2);

assign sub_ln1319_1_fu_529_p2 = (25'd0 - r_V_fu_524_p2);

assign sub_ln1319_fu_555_p2 = (trunc_ln18_reg_817 - trunc_ln283_fu_504_p1);

assign sub_ln1512_fu_646_p2 = (8'd127 - xs_exp_V_fu_614_p4);

assign tmp_1_fu_708_p4 = {{r_V_2_fu_690_p2[55:24]}};

assign tmp_7_fu_696_p3 = r_V_1_fu_684_p2[32'd24];

assign trunc_ln18_1_fu_410_p1 = control[0:0];

assign trunc_ln18_fu_406_p1 = distortion_threshold[24:0];

assign trunc_ln283_fu_504_p1 = INPUT_r_TDATA_int_regslice[24:0];

assign ush_fu_656_p3 = ((isNeg_fu_638_p3[0:0] == 1'b1) ? sext_ln1512_fu_652_p1 : add_ln346_fu_632_p2);

assign val_fu_718_p3 = ((isNeg_reg_959[0:0] == 1'b1) ? zext_ln818_fu_704_p1 : tmp_1_fu_708_p4);

assign xs_exp_V_fu_614_p4 = {{data_V_fu_603_p1[30:23]}};

assign zext_ln1488_fu_680_p1 = $unsigned(sext_ln1488_fu_677_p1);

assign zext_ln15_fu_673_p1 = mantissa_fu_664_p4;

assign zext_ln346_fu_628_p1 = xs_exp_V_fu_614_p4;

assign zext_ln818_fu_704_p1 = tmp_7_fu_696_p3;

always @ (posedge ap_clk) begin
    or_ln74_reg_898[3] <= 1'b1;
end

endmodule //guitar_effects
