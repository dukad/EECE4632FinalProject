// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="guitar_effects_guitar_effects,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=129,HLS_SYN_DSP=0,HLS_SYN_FF=3075,HLS_SYN_LUT=6729,HLS_VERSION=2022_1}" *)

module guitar_effects (
        ap_clk,
        ap_rst_n,
        INPUT_r_TDATA,
        INPUT_r_TVALID,
        INPUT_r_TREADY,
        INPUT_r_TKEEP,
        INPUT_r_TSTRB,
        INPUT_r_TUSER,
        INPUT_r_TLAST,
        INPUT_r_TID,
        INPUT_r_TDEST,
        OUTPUT_r_TDATA,
        OUTPUT_r_TVALID,
        OUTPUT_r_TREADY,
        OUTPUT_r_TKEEP,
        OUTPUT_r_TSTRB,
        OUTPUT_r_TUSER,
        OUTPUT_r_TLAST,
        OUTPUT_r_TID,
        OUTPUT_r_TDEST,
        s_axi_control_r_AWVALID,
        s_axi_control_r_AWREADY,
        s_axi_control_r_AWADDR,
        s_axi_control_r_WVALID,
        s_axi_control_r_WREADY,
        s_axi_control_r_WDATA,
        s_axi_control_r_WSTRB,
        s_axi_control_r_ARVALID,
        s_axi_control_r_ARREADY,
        s_axi_control_r_ARADDR,
        s_axi_control_r_RVALID,
        s_axi_control_r_RREADY,
        s_axi_control_r_RDATA,
        s_axi_control_r_RRESP,
        s_axi_control_r_BVALID,
        s_axi_control_r_BREADY,
        s_axi_control_r_BRESP
);

parameter    ap_ST_fsm_state1 = 97'd1;
parameter    ap_ST_fsm_state2 = 97'd2;
parameter    ap_ST_fsm_state3 = 97'd4;
parameter    ap_ST_fsm_state4 = 97'd8;
parameter    ap_ST_fsm_state5 = 97'd16;
parameter    ap_ST_fsm_state6 = 97'd32;
parameter    ap_ST_fsm_state7 = 97'd64;
parameter    ap_ST_fsm_state8 = 97'd128;
parameter    ap_ST_fsm_state9 = 97'd256;
parameter    ap_ST_fsm_state10 = 97'd512;
parameter    ap_ST_fsm_state11 = 97'd1024;
parameter    ap_ST_fsm_state12 = 97'd2048;
parameter    ap_ST_fsm_state13 = 97'd4096;
parameter    ap_ST_fsm_state14 = 97'd8192;
parameter    ap_ST_fsm_state15 = 97'd16384;
parameter    ap_ST_fsm_state16 = 97'd32768;
parameter    ap_ST_fsm_state17 = 97'd65536;
parameter    ap_ST_fsm_state18 = 97'd131072;
parameter    ap_ST_fsm_state19 = 97'd262144;
parameter    ap_ST_fsm_state20 = 97'd524288;
parameter    ap_ST_fsm_state21 = 97'd1048576;
parameter    ap_ST_fsm_state22 = 97'd2097152;
parameter    ap_ST_fsm_state23 = 97'd4194304;
parameter    ap_ST_fsm_state24 = 97'd8388608;
parameter    ap_ST_fsm_state25 = 97'd16777216;
parameter    ap_ST_fsm_state26 = 97'd33554432;
parameter    ap_ST_fsm_state27 = 97'd67108864;
parameter    ap_ST_fsm_state28 = 97'd134217728;
parameter    ap_ST_fsm_state29 = 97'd268435456;
parameter    ap_ST_fsm_state30 = 97'd536870912;
parameter    ap_ST_fsm_state31 = 97'd1073741824;
parameter    ap_ST_fsm_state32 = 97'd2147483648;
parameter    ap_ST_fsm_state33 = 97'd4294967296;
parameter    ap_ST_fsm_state34 = 97'd8589934592;
parameter    ap_ST_fsm_state35 = 97'd17179869184;
parameter    ap_ST_fsm_state36 = 97'd34359738368;
parameter    ap_ST_fsm_state37 = 97'd68719476736;
parameter    ap_ST_fsm_state38 = 97'd137438953472;
parameter    ap_ST_fsm_state39 = 97'd274877906944;
parameter    ap_ST_fsm_state40 = 97'd549755813888;
parameter    ap_ST_fsm_state41 = 97'd1099511627776;
parameter    ap_ST_fsm_state42 = 97'd2199023255552;
parameter    ap_ST_fsm_state43 = 97'd4398046511104;
parameter    ap_ST_fsm_state44 = 97'd8796093022208;
parameter    ap_ST_fsm_state45 = 97'd17592186044416;
parameter    ap_ST_fsm_state46 = 97'd35184372088832;
parameter    ap_ST_fsm_state47 = 97'd70368744177664;
parameter    ap_ST_fsm_state48 = 97'd140737488355328;
parameter    ap_ST_fsm_state49 = 97'd281474976710656;
parameter    ap_ST_fsm_state50 = 97'd562949953421312;
parameter    ap_ST_fsm_state51 = 97'd1125899906842624;
parameter    ap_ST_fsm_state52 = 97'd2251799813685248;
parameter    ap_ST_fsm_state53 = 97'd4503599627370496;
parameter    ap_ST_fsm_state54 = 97'd9007199254740992;
parameter    ap_ST_fsm_state55 = 97'd18014398509481984;
parameter    ap_ST_fsm_state56 = 97'd36028797018963968;
parameter    ap_ST_fsm_state57 = 97'd72057594037927936;
parameter    ap_ST_fsm_state58 = 97'd144115188075855872;
parameter    ap_ST_fsm_state59 = 97'd288230376151711744;
parameter    ap_ST_fsm_state60 = 97'd576460752303423488;
parameter    ap_ST_fsm_state61 = 97'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 97'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 97'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 97'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 97'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 97'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 97'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 97'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 97'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 97'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 97'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 97'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 97'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 97'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 97'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 97'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 97'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 97'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 97'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 97'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 97'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 97'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 97'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 97'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 97'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 97'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 97'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 97'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 97'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 97'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 97'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 97'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 97'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 97'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 97'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 97'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 97'd79228162514264337593543950336;
parameter    C_S_AXI_CONTROL_R_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_R_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_R_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] INPUT_r_TDATA;
input   INPUT_r_TVALID;
output   INPUT_r_TREADY;
input  [3:0] INPUT_r_TKEEP;
input  [3:0] INPUT_r_TSTRB;
input  [1:0] INPUT_r_TUSER;
input  [0:0] INPUT_r_TLAST;
input  [4:0] INPUT_r_TID;
input  [5:0] INPUT_r_TDEST;
output  [31:0] OUTPUT_r_TDATA;
output   OUTPUT_r_TVALID;
input   OUTPUT_r_TREADY;
output  [3:0] OUTPUT_r_TKEEP;
output  [3:0] OUTPUT_r_TSTRB;
output  [1:0] OUTPUT_r_TUSER;
output  [0:0] OUTPUT_r_TLAST;
output  [4:0] OUTPUT_r_TID;
output  [5:0] OUTPUT_r_TDEST;
input   s_axi_control_r_AWVALID;
output   s_axi_control_r_AWREADY;
input  [C_S_AXI_CONTROL_R_ADDR_WIDTH - 1:0] s_axi_control_r_AWADDR;
input   s_axi_control_r_WVALID;
output   s_axi_control_r_WREADY;
input  [C_S_AXI_CONTROL_R_DATA_WIDTH - 1:0] s_axi_control_r_WDATA;
input  [C_S_AXI_CONTROL_R_WSTRB_WIDTH - 1:0] s_axi_control_r_WSTRB;
input   s_axi_control_r_ARVALID;
output   s_axi_control_r_ARREADY;
input  [C_S_AXI_CONTROL_R_ADDR_WIDTH - 1:0] s_axi_control_r_ARADDR;
output   s_axi_control_r_RVALID;
input   s_axi_control_r_RREADY;
output  [C_S_AXI_CONTROL_R_DATA_WIDTH - 1:0] s_axi_control_r_RDATA;
output  [1:0] s_axi_control_r_RRESP;
output   s_axi_control_r_BVALID;
input   s_axi_control_r_BREADY;
output  [1:0] s_axi_control_r_BRESP;

 reg    ap_rst_n_inv;
wire   [31:0] axilite_out;
reg    axilite_out_ap_vld;
wire   [7:0] control;
wire   [31:0] distortion_threshold;
wire   [31:0] distortion_clip_factor;
wire   [31:0] compression_min_threshold;
wire   [31:0] compression_max_threshold;
wire   [31:0] compression_zero_threshold;
wire   [31:0] delay_mult;
wire   [31:0] delay_samples;
reg    INPUT_r_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [96:0] ap_CS_fsm;
wire    ap_CS_fsm_state38;
reg    OUTPUT_r_TDATA_blk_n;
wire    ap_CS_fsm_state96;
wire    ap_CS_fsm_state97;
wire   [31:0] grp_fu_386_p1;
reg   [31:0] reg_390;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state88;
wire   [31:0] grp_fu_382_p2;
reg   [31:0] reg_396;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state66;
wire   [31:0] grp_fu_378_p2;
reg   [31:0] reg_402;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state93;
reg   [31:0] delay_samples_read_reg_992;
wire    ap_CS_fsm_state1;
reg   [31:0] delay_mult_read_reg_997;
reg   [31:0] compression_zero_threshold_read_reg_1002;
reg   [31:0] compression_max_threshold_read_reg_1007;
reg   [31:0] compression_min_threshold_read_reg_1012;
reg   [31:0] distortion_clip_factor_read_reg_1017;
reg   [31:0] distortion_threshold_read_reg_1022;
wire   [0:0] trunc_ln15_fu_406_p1;
reg   [0:0] trunc_ln15_reg_1031;
reg   [0:0] tmp_reg_1036;
reg   [0:0] tmp_2_reg_1040;
reg   [0:0] tmp_3_reg_1044;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state37;
wire   [31:0] negative_threshold_fu_455_p2;
reg   [31:0] negative_threshold_reg_1058;
reg   [31:0] conv2_i_reg_1063;
reg   [15:0] delay_buffer_addr_1_reg_1068;
reg   [3:0] tmp_keep_V_reg_1082;
reg   [3:0] tmp_strb_V_reg_1087;
reg   [1:0] tmp_user_V_reg_1092;
reg   [0:0] tmp_last_V_reg_1097;
reg   [4:0] tmp_id_V_reg_1102;
reg   [5:0] tmp_dest_V_reg_1107;
wire   [31:0] or_ln70_fu_500_p2;
reg   [31:0] or_ln70_reg_1112;
wire   [31:0] add_ln107_fu_516_p2;
reg   [31:0] add_ln107_reg_1125;
wire   [0:0] icmp_ln104_fu_506_p2;
wire   [0:0] icmp_ln106_fu_511_p2;
wire   [31:0] sub_ln105_fu_521_p2;
reg   [31:0] sub_ln105_reg_1130;
reg   [0:0] p_Result_2_reg_1135;
wire    ap_CS_fsm_state54;
wire   [22:0] p_Result_3_fu_548_p1;
reg   [22:0] p_Result_3_reg_1140;
wire   [0:0] isNeg_1_fu_562_p3;
reg   [0:0] isNeg_1_reg_1145;
wire   [8:0] ush_1_fu_580_p3;
reg   [8:0] ush_1_reg_1150;
wire   [31:0] val_1_fu_642_p3;
reg   [31:0] val_1_reg_1155;
wire    ap_CS_fsm_state55;
wire   [31:0] result_V_9_fu_654_p3;
wire    ap_CS_fsm_state56;
reg   [0:0] p_Result_s_reg_1166;
wire    ap_CS_fsm_state72;
wire   [22:0] p_Result_1_fu_682_p1;
reg   [22:0] p_Result_1_reg_1171;
wire   [0:0] isNeg_fu_696_p3;
reg   [0:0] isNeg_reg_1176;
wire   [8:0] ush_fu_714_p3;
reg   [8:0] ush_reg_1181;
wire   [31:0] val_fu_776_p3;
reg   [31:0] val_reg_1186;
wire    ap_CS_fsm_state73;
wire   [31:0] result_V_fu_788_p3;
wire    ap_CS_fsm_state74;
wire   [31:0] or_ln75_fu_798_p2;
wire    ap_CS_fsm_state76;
wire   [31:0] delay_buffer_q0;
reg   [31:0] delay_buffer_load_reg_1210;
wire    ap_CS_fsm_state78;
reg   [0:0] p_Result_4_reg_1215;
wire    ap_CS_fsm_state94;
wire   [22:0] p_Result_5_fu_839_p1;
reg   [22:0] p_Result_5_reg_1220;
wire   [0:0] isNeg_2_fu_853_p3;
reg   [0:0] isNeg_2_reg_1225;
wire   [8:0] ush_2_fu_871_p3;
reg   [8:0] ush_2_reg_1230;
wire   [31:0] val_2_fu_933_p3;
reg   [31:0] val_2_reg_1235;
wire    ap_CS_fsm_state95;
wire   [31:0] or_ln80_fu_940_p2;
reg   [15:0] delay_buffer_address0;
reg    delay_buffer_ce0;
reg    delay_buffer_we0;
reg   [31:0] delay_buffer_d0;
wire    grp_guitar_effects_Pipeline_2_fu_361_ap_start;
wire    grp_guitar_effects_Pipeline_2_fu_361_ap_done;
wire    grp_guitar_effects_Pipeline_2_fu_361_ap_idle;
wire    grp_guitar_effects_Pipeline_2_fu_361_ap_ready;
wire   [15:0] grp_guitar_effects_Pipeline_2_fu_361_delay_buffer_address0;
wire    grp_guitar_effects_Pipeline_2_fu_361_delay_buffer_ce0;
wire    grp_guitar_effects_Pipeline_2_fu_361_delay_buffer_we0;
wire   [31:0] grp_guitar_effects_Pipeline_2_fu_361_delay_buffer_d0;
wire    grp_compression_fu_366_ap_start;
wire    grp_compression_fu_366_ap_done;
wire    grp_compression_fu_366_ap_idle;
wire    grp_compression_fu_366_ap_ready;
wire   [8:0] grp_compression_fu_366_values_buffer_address0;
wire    grp_compression_fu_366_values_buffer_ce0;
wire    grp_compression_fu_366_values_buffer_we0;
wire   [31:0] grp_compression_fu_366_values_buffer_d0;
wire   [31:0] grp_compression_fu_366_ap_return_0;
wire   [31:0] grp_compression_fu_366_ap_return_1;
wire   [31:0] grp_compression_fu_366_grp_fu_382_p_din0;
wire   [31:0] grp_compression_fu_366_grp_fu_382_p_din1;
wire    grp_compression_fu_366_grp_fu_382_p_ce;
wire   [31:0] grp_compression_fu_366_grp_fu_386_p_din0;
wire    grp_compression_fu_366_grp_fu_386_p_ce;
reg   [31:0] empty_30_reg_288;
reg   [31:0] tmp_int_reg_302;
reg   [31:0] empty_31_reg_316;
wire    ap_CS_fsm_state75;
reg   [31:0] tmp_int_3_reg_327;
wire   [31:0] result_V_10_fu_951_p3;
reg   [31:0] ap_phi_mux_tmp_int_6_phi_fu_342_p4;
reg   [31:0] tmp_int_6_reg_338;
wire    ap_CS_fsm_state77;
reg   [31:0] empty_32_reg_351;
reg    grp_guitar_effects_Pipeline_2_fu_361_ap_start_reg;
wire    ap_CS_fsm_state36;
reg    grp_compression_fu_366_ap_start_reg;
wire   [63:0] idxprom_i_cast_fu_464_p1;
reg   [31:0] empty_fu_160;
wire   [31:0] select_ln83_fu_965_p3;
wire    regslice_both_OUTPUT_r_V_data_V_U_apdone_blk;
reg    ap_block_state97;
reg   [31:0] current_level_1_fu_164;
reg   [31:0] grp_fu_378_p0;
reg   [31:0] grp_fu_378_p1;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state89;
reg   [31:0] grp_fu_382_p0;
reg   [31:0] grp_fu_382_p1;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state85;
reg   [31:0] grp_fu_386_p0;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state83;
wire   [31:0] grp_fu_449_p0;
wire   [16:0] grp_fu_449_p1;
wire   [15:0] grp_fu_449_p2;
wire   [15:0] empty_28_fu_460_p1;
wire   [31:0] data_V_1_fu_526_p1;
wire   [7:0] xs_exp_V_1_fu_538_p4;
wire   [8:0] zext_ln346_1_fu_552_p1;
wire   [8:0] add_ln346_1_fu_556_p2;
wire   [7:0] sub_ln1512_1_fu_570_p2;
wire  signed [8:0] sext_ln1512_1_fu_576_p1;
wire   [24:0] mantissa_1_fu_588_p4;
wire  signed [31:0] sext_ln1488_1_fu_601_p1;
wire   [78:0] zext_ln15_1_fu_597_p1;
wire   [78:0] zext_ln1488_1_fu_604_p1;
wire   [78:0] r_V_2_fu_608_p2;
wire   [0:0] tmp_13_fu_620_p3;
wire   [78:0] r_V_3_fu_614_p2;
wire   [31:0] zext_ln818_1_fu_628_p1;
wire   [31:0] tmp_4_fu_632_p4;
wire   [31:0] result_V_5_fu_649_p2;
wire   [31:0] data_V_fu_660_p1;
wire   [7:0] xs_exp_V_fu_672_p4;
wire   [8:0] zext_ln346_fu_686_p1;
wire   [8:0] add_ln346_fu_690_p2;
wire   [7:0] sub_ln1512_fu_704_p2;
wire  signed [8:0] sext_ln1512_fu_710_p1;
wire   [24:0] mantissa_fu_722_p4;
wire  signed [31:0] sext_ln1488_fu_735_p1;
wire   [78:0] zext_ln15_fu_731_p1;
wire   [78:0] zext_ln1488_fu_738_p1;
wire   [78:0] r_V_fu_742_p2;
wire   [0:0] tmp_9_fu_754_p3;
wire   [78:0] r_V_1_fu_748_p2;
wire   [31:0] zext_ln818_fu_762_p1;
wire   [31:0] tmp_1_fu_766_p4;
wire   [31:0] result_V_2_fu_783_p2;
wire   [31:0] data_V_2_fu_817_p1;
wire   [7:0] xs_exp_V_2_fu_829_p4;
wire   [8:0] zext_ln346_2_fu_843_p1;
wire   [8:0] add_ln346_2_fu_847_p2;
wire   [7:0] sub_ln1512_2_fu_861_p2;
wire  signed [8:0] sext_ln1512_2_fu_867_p1;
wire   [24:0] mantissa_2_fu_879_p4;
wire  signed [31:0] sext_ln1488_2_fu_892_p1;
wire   [78:0] zext_ln15_2_fu_888_p1;
wire   [78:0] zext_ln1488_2_fu_895_p1;
wire   [78:0] r_V_4_fu_899_p2;
wire   [0:0] tmp_17_fu_911_p3;
wire   [78:0] r_V_5_fu_905_p2;
wire   [31:0] zext_ln818_2_fu_919_p1;
wire   [31:0] tmp_7_fu_923_p4;
wire   [31:0] result_V_8_fu_946_p2;
wire   [31:0] or_ln85_fu_959_p2;
reg   [1:0] grp_fu_378_opcode;
reg    grp_fu_382_ce;
reg    grp_fu_386_ce;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_state87;
reg    grp_fu_449_ap_start;
wire    grp_fu_449_ap_done;
reg    grp_fu_449_ce;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
reg   [96:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
reg    ap_ST_fsm_state37_blk;
reg    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
reg    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
wire    ap_ST_fsm_state80_blk;
wire    ap_ST_fsm_state81_blk;
wire    ap_ST_fsm_state82_blk;
wire    ap_ST_fsm_state83_blk;
wire    ap_ST_fsm_state84_blk;
wire    ap_ST_fsm_state85_blk;
wire    ap_ST_fsm_state86_blk;
wire    ap_ST_fsm_state87_blk;
wire    ap_ST_fsm_state88_blk;
wire    ap_ST_fsm_state89_blk;
wire    ap_ST_fsm_state90_blk;
wire    ap_ST_fsm_state91_blk;
wire    ap_ST_fsm_state92_blk;
wire    ap_ST_fsm_state93_blk;
wire    ap_ST_fsm_state94_blk;
wire    ap_ST_fsm_state95_blk;
reg    ap_ST_fsm_state96_blk;
reg    ap_ST_fsm_state97_blk;
wire    regslice_both_INPUT_r_V_data_V_U_apdone_blk;
wire   [31:0] INPUT_r_TDATA_int_regslice;
wire    INPUT_r_TVALID_int_regslice;
reg    INPUT_r_TREADY_int_regslice;
wire    regslice_both_INPUT_r_V_data_V_U_ack_in;
wire    regslice_both_INPUT_r_V_keep_V_U_apdone_blk;
wire   [3:0] INPUT_r_TKEEP_int_regslice;
wire    regslice_both_INPUT_r_V_keep_V_U_vld_out;
wire    regslice_both_INPUT_r_V_keep_V_U_ack_in;
wire    regslice_both_INPUT_r_V_strb_V_U_apdone_blk;
wire   [3:0] INPUT_r_TSTRB_int_regslice;
wire    regslice_both_INPUT_r_V_strb_V_U_vld_out;
wire    regslice_both_INPUT_r_V_strb_V_U_ack_in;
wire    regslice_both_INPUT_r_V_user_V_U_apdone_blk;
wire   [1:0] INPUT_r_TUSER_int_regslice;
wire    regslice_both_INPUT_r_V_user_V_U_vld_out;
wire    regslice_both_INPUT_r_V_user_V_U_ack_in;
wire    regslice_both_INPUT_r_V_last_V_U_apdone_blk;
wire   [0:0] INPUT_r_TLAST_int_regslice;
wire    regslice_both_INPUT_r_V_last_V_U_vld_out;
wire    regslice_both_INPUT_r_V_last_V_U_ack_in;
wire    regslice_both_INPUT_r_V_id_V_U_apdone_blk;
wire   [4:0] INPUT_r_TID_int_regslice;
wire    regslice_both_INPUT_r_V_id_V_U_vld_out;
wire    regslice_both_INPUT_r_V_id_V_U_ack_in;
wire    regslice_both_INPUT_r_V_dest_V_U_apdone_blk;
wire   [5:0] INPUT_r_TDEST_int_regslice;
wire    regslice_both_INPUT_r_V_dest_V_U_vld_out;
wire    regslice_both_INPUT_r_V_dest_V_U_ack_in;
reg    OUTPUT_r_TVALID_int_regslice;
wire    OUTPUT_r_TREADY_int_regslice;
wire    regslice_both_OUTPUT_r_V_data_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_keep_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_keep_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_keep_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_strb_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_strb_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_strb_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_user_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_user_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_user_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_last_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_last_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_last_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_id_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_id_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_id_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_dest_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_dest_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_dest_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 97'd1;
#0 grp_guitar_effects_Pipeline_2_fu_361_ap_start_reg = 1'b0;
#0 grp_compression_fu_366_ap_start_reg = 1'b0;
end

guitar_effects_compression_buffer_RAM_AUTO_0R0W #(
    .DataWidth( 32 ),
    .AddressRange( 441 ),
    .AddressWidth( 9 ))
compression_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_compression_fu_366_values_buffer_address0),
    .ce0(grp_compression_fu_366_values_buffer_ce0),
    .we0(grp_compression_fu_366_values_buffer_we0),
    .d0(grp_compression_fu_366_values_buffer_d0)
);

guitar_effects_delay_buffer_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 44100 ),
    .AddressWidth( 16 ))
delay_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(delay_buffer_address0),
    .ce0(delay_buffer_ce0),
    .we0(delay_buffer_we0),
    .d0(delay_buffer_d0),
    .q0(delay_buffer_q0)
);

guitar_effects_guitar_effects_Pipeline_2 grp_guitar_effects_Pipeline_2_fu_361(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_guitar_effects_Pipeline_2_fu_361_ap_start),
    .ap_done(grp_guitar_effects_Pipeline_2_fu_361_ap_done),
    .ap_idle(grp_guitar_effects_Pipeline_2_fu_361_ap_idle),
    .ap_ready(grp_guitar_effects_Pipeline_2_fu_361_ap_ready),
    .delay_buffer_address0(grp_guitar_effects_Pipeline_2_fu_361_delay_buffer_address0),
    .delay_buffer_ce0(grp_guitar_effects_Pipeline_2_fu_361_delay_buffer_ce0),
    .delay_buffer_we0(grp_guitar_effects_Pipeline_2_fu_361_delay_buffer_we0),
    .delay_buffer_d0(grp_guitar_effects_Pipeline_2_fu_361_delay_buffer_d0)
);

guitar_effects_compression grp_compression_fu_366(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_compression_fu_366_ap_start),
    .ap_done(grp_compression_fu_366_ap_done),
    .ap_idle(grp_compression_fu_366_ap_idle),
    .ap_ready(grp_compression_fu_366_ap_ready),
    .input_r(tmp_int_reg_302),
    .min_threshold(compression_min_threshold_read_reg_1012),
    .max_threshold(compression_max_threshold_read_reg_1007),
    .zero_threshold(compression_zero_threshold_read_reg_1002),
    .current_level_read(current_level_1_fu_164),
    .values_buffer_address0(grp_compression_fu_366_values_buffer_address0),
    .values_buffer_ce0(grp_compression_fu_366_values_buffer_ce0),
    .values_buffer_we0(grp_compression_fu_366_values_buffer_we0),
    .values_buffer_d0(grp_compression_fu_366_values_buffer_d0),
    .ap_return_0(grp_compression_fu_366_ap_return_0),
    .ap_return_1(grp_compression_fu_366_ap_return_1),
    .grp_fu_382_p_din0(grp_compression_fu_366_grp_fu_382_p_din0),
    .grp_fu_382_p_din1(grp_compression_fu_366_grp_fu_382_p_din1),
    .grp_fu_382_p_dout0(grp_fu_382_p2),
    .grp_fu_382_p_ce(grp_compression_fu_366_grp_fu_382_p_ce),
    .grp_fu_386_p_din0(grp_compression_fu_366_grp_fu_386_p_din0),
    .grp_fu_386_p_dout0(grp_fu_386_p1),
    .grp_fu_386_p_ce(grp_compression_fu_366_grp_fu_386_p_ce)
);

guitar_effects_control_r_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_R_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_R_DATA_WIDTH ))
control_r_s_axi_U(
    .AWVALID(s_axi_control_r_AWVALID),
    .AWREADY(s_axi_control_r_AWREADY),
    .AWADDR(s_axi_control_r_AWADDR),
    .WVALID(s_axi_control_r_WVALID),
    .WREADY(s_axi_control_r_WREADY),
    .WDATA(s_axi_control_r_WDATA),
    .WSTRB(s_axi_control_r_WSTRB),
    .ARVALID(s_axi_control_r_ARVALID),
    .ARREADY(s_axi_control_r_ARREADY),
    .ARADDR(s_axi_control_r_ARADDR),
    .RVALID(s_axi_control_r_RVALID),
    .RREADY(s_axi_control_r_RREADY),
    .RDATA(s_axi_control_r_RDATA),
    .RRESP(s_axi_control_r_RRESP),
    .BVALID(s_axi_control_r_BVALID),
    .BREADY(s_axi_control_r_BREADY),
    .BRESP(s_axi_control_r_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .axilite_out(axilite_out),
    .axilite_out_ap_vld(axilite_out_ap_vld),
    .control(control),
    .distortion_threshold(distortion_threshold),
    .distortion_clip_factor(distortion_clip_factor),
    .compression_min_threshold(compression_min_threshold),
    .compression_max_threshold(compression_max_threshold),
    .compression_zero_threshold(compression_zero_threshold),
    .delay_mult(delay_mult),
    .delay_samples(delay_samples)
);

guitar_effects_faddfsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_5_full_dsp_1_U16(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_378_p0),
    .din1(grp_fu_378_p1),
    .opcode(grp_fu_378_opcode),
    .ce(1'b1),
    .dout(grp_fu_378_p2)
);

guitar_effects_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U17(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_382_p0),
    .din1(grp_fu_382_p1),
    .ce(grp_fu_382_ce),
    .dout(grp_fu_382_p2)
);

guitar_effects_sitofp_32ns_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32ns_32_6_no_dsp_1_U18(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_386_p0),
    .ce(grp_fu_386_ce),
    .dout(grp_fu_386_p1)
);

guitar_effects_srem_32ns_17ns_16_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 16 ))
srem_32ns_17ns_16_36_seq_1_U19(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_449_ap_start),
    .done(grp_fu_449_ap_done),
    .din0(grp_fu_449_p0),
    .din1(grp_fu_449_p1),
    .ce(grp_fu_449_ce),
    .dout(grp_fu_449_p2)
);

guitar_effects_regslice_both #(
    .DataWidth( 32 ))
regslice_both_INPUT_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TDATA),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_data_V_U_ack_in),
    .data_out(INPUT_r_TDATA_int_regslice),
    .vld_out(INPUT_r_TVALID_int_regslice),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_data_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 4 ))
regslice_both_INPUT_r_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TKEEP),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_keep_V_U_ack_in),
    .data_out(INPUT_r_TKEEP_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_keep_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_keep_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 4 ))
regslice_both_INPUT_r_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TSTRB),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_strb_V_U_ack_in),
    .data_out(INPUT_r_TSTRB_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_strb_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_strb_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 2 ))
regslice_both_INPUT_r_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TUSER),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_user_V_U_ack_in),
    .data_out(INPUT_r_TUSER_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_user_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_user_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 1 ))
regslice_both_INPUT_r_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TLAST),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_last_V_U_ack_in),
    .data_out(INPUT_r_TLAST_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_last_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_last_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 5 ))
regslice_both_INPUT_r_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TID),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_id_V_U_ack_in),
    .data_out(INPUT_r_TID_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_id_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_id_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 6 ))
regslice_both_INPUT_r_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TDEST),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_dest_V_U_ack_in),
    .data_out(INPUT_r_TDEST_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_dest_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_dest_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 32 ))
regslice_both_OUTPUT_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ap_phi_mux_tmp_int_6_phi_fu_342_p4),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(OUTPUT_r_TREADY_int_regslice),
    .data_out(OUTPUT_r_TDATA),
    .vld_out(regslice_both_OUTPUT_r_V_data_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_data_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 4 ))
regslice_both_OUTPUT_r_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_keep_V_reg_1082),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_keep_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TKEEP),
    .vld_out(regslice_both_OUTPUT_r_V_keep_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_keep_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 4 ))
regslice_both_OUTPUT_r_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_strb_V_reg_1087),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_strb_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TSTRB),
    .vld_out(regslice_both_OUTPUT_r_V_strb_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_strb_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 2 ))
regslice_both_OUTPUT_r_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_user_V_reg_1092),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_user_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TUSER),
    .vld_out(regslice_both_OUTPUT_r_V_user_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_user_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 1 ))
regslice_both_OUTPUT_r_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_last_V_reg_1097),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_last_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TLAST),
    .vld_out(regslice_both_OUTPUT_r_V_last_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_last_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 5 ))
regslice_both_OUTPUT_r_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_id_V_reg_1102),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_id_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TID),
    .vld_out(regslice_both_OUTPUT_r_V_id_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_id_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 6 ))
regslice_both_OUTPUT_r_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_dest_V_reg_1107),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_dest_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TDEST),
    .vld_out(regslice_both_OUTPUT_r_V_dest_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_compression_fu_366_ap_start_reg <= 1'b0;
    end else begin
        if (((tmp_2_reg_1040 == 1'd1) & (1'b1 == ap_CS_fsm_state75))) begin
            grp_compression_fu_366_ap_start_reg <= 1'b1;
        end else if ((grp_compression_fu_366_ap_ready == 1'b1)) begin
            grp_compression_fu_366_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_guitar_effects_Pipeline_2_fu_361_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state36)) begin
            grp_guitar_effects_Pipeline_2_fu_361_ap_start_reg <= 1'b1;
        end else if ((grp_guitar_effects_Pipeline_2_fu_361_ap_ready == 1'b1)) begin
            grp_guitar_effects_Pipeline_2_fu_361_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        current_level_1_fu_164 <= 32'd0;
    end else if (((grp_compression_fu_366_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
        current_level_1_fu_164 <= grp_compression_fu_366_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln106_fu_511_p2 == 1'd0) & (icmp_ln104_fu_506_p2 == 1'd0) & (tmp_reg_1036 == 1'd1) & (1'b1 == INPUT_r_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state38))) begin
        empty_30_reg_288 <= or_ln70_fu_500_p2;
    end else if (((tmp_reg_1036 == 1'd0) & (1'b1 == INPUT_r_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state38))) begin
        empty_30_reg_288 <= empty_fu_160;
    end else if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state56))) begin
        empty_30_reg_288 <= or_ln70_reg_1112;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_reg_1040 == 1'd0) & (1'b1 == ap_CS_fsm_state75))) begin
        empty_31_reg_316 <= empty_30_reg_288;
    end else if (((grp_compression_fu_366_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
        empty_31_reg_316 <= or_ln75_fu_798_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_reg_1044 == 1'd0) & (1'b1 == ap_CS_fsm_state77))) begin
        empty_32_reg_351 <= empty_31_reg_316;
    end else if (((tmp_3_reg_1044 == 1'd1) & (1'b1 == OUTPUT_r_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state96))) begin
        empty_32_reg_351 <= or_ln80_fu_940_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_fu_160 <= 32'd0;
    end else if ((~((regslice_both_OUTPUT_r_V_data_V_U_apdone_blk == 1'b1) | (1'b0 == OUTPUT_r_TREADY_int_regslice)) & (tmp_last_V_reg_1097 == 1'd0) & (1'b1 == ap_CS_fsm_state97))) begin
        empty_fu_160 <= select_ln83_fu_965_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_reg_1040 == 1'd0) & (1'b1 == ap_CS_fsm_state75))) begin
        tmp_int_3_reg_327 <= tmp_int_reg_302;
    end else if (((grp_compression_fu_366_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
        tmp_int_3_reg_327 <= grp_compression_fu_366_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_reg_1044 == 1'd0) & (1'b1 == ap_CS_fsm_state77))) begin
        tmp_int_6_reg_338 <= tmp_int_3_reg_327;
    end else if (((tmp_3_reg_1044 == 1'd1) & (1'b1 == OUTPUT_r_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state96))) begin
        tmp_int_6_reg_338 <= result_V_10_fu_951_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln106_fu_511_p2 == 1'd0) & (icmp_ln104_fu_506_p2 == 1'd0) & (tmp_reg_1036 == 1'd1) & (1'b1 == INPUT_r_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state38)) | ((tmp_reg_1036 == 1'd0) & (1'b1 == INPUT_r_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state38)))) begin
        tmp_int_reg_302 <= INPUT_r_TDATA_int_regslice;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        tmp_int_reg_302 <= result_V_9_fu_654_p3;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        tmp_int_reg_302 <= result_V_fu_788_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln106_fu_511_p2 == 1'd1) & (icmp_ln104_fu_506_p2 == 1'd0) & (tmp_reg_1036 == 1'd1) & (1'b1 == ap_CS_fsm_state38))) begin
        add_ln107_reg_1125 <= add_ln107_fu_516_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        compression_max_threshold_read_reg_1007 <= compression_max_threshold;
        compression_min_threshold_read_reg_1012 <= compression_min_threshold;
        compression_zero_threshold_read_reg_1002 <= compression_zero_threshold;
        delay_mult_read_reg_997 <= delay_mult;
        delay_samples_read_reg_992 <= delay_samples;
        distortion_clip_factor_read_reg_1017 <= distortion_clip_factor;
        distortion_threshold_read_reg_1022 <= distortion_threshold;
        tmp_2_reg_1040 <= control[32'd2];
        tmp_3_reg_1044 <= control[32'd1];
        tmp_reg_1036 <= control[32'd3];
        trunc_ln15_reg_1031 <= trunc_ln15_fu_406_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        conv2_i_reg_1063 <= grp_fu_386_p1;
        delay_buffer_addr_1_reg_1068 <= idxprom_i_cast_fu_464_p1;
        negative_threshold_reg_1058 <= negative_threshold_fu_455_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        delay_buffer_load_reg_1210 <= delay_buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        isNeg_1_reg_1145 <= add_ln346_1_fu_556_p2[32'd8];
        p_Result_2_reg_1135 <= data_V_1_fu_526_p1[32'd31];
        p_Result_3_reg_1140 <= p_Result_3_fu_548_p1;
        ush_1_reg_1150 <= ush_1_fu_580_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        isNeg_2_reg_1225 <= add_ln346_2_fu_847_p2[32'd8];
        p_Result_4_reg_1215 <= data_V_2_fu_817_p1[32'd31];
        p_Result_5_reg_1220 <= p_Result_5_fu_839_p1;
        ush_2_reg_1230 <= ush_2_fu_871_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        isNeg_reg_1176 <= add_ln346_fu_690_p2[32'd8];
        p_Result_1_reg_1171 <= p_Result_1_fu_682_p1;
        p_Result_s_reg_1166 <= data_V_fu_660_p1[32'd31];
        ush_reg_1181 <= ush_fu_714_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_1036 == 1'd1) & (1'b1 == ap_CS_fsm_state38))) begin
        or_ln70_reg_1112[2 : 0] <= or_ln70_fu_500_p2[2 : 0];
or_ln70_reg_1112[31 : 4] <= or_ln70_fu_500_p2[31 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state44))) begin
        reg_390 <= grp_fu_386_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state88))) begin
        reg_396 <= grp_fu_382_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state53))) begin
        reg_402 <= grp_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln104_fu_506_p2 == 1'd1) & (tmp_reg_1036 == 1'd1) & (1'b1 == ap_CS_fsm_state38))) begin
        sub_ln105_reg_1130 <= sub_ln105_fu_521_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        tmp_dest_V_reg_1107 <= INPUT_r_TDEST_int_regslice;
        tmp_id_V_reg_1102 <= INPUT_r_TID_int_regslice;
        tmp_keep_V_reg_1082 <= INPUT_r_TKEEP_int_regslice;
        tmp_last_V_reg_1097 <= INPUT_r_TLAST_int_regslice;
        tmp_strb_V_reg_1087 <= INPUT_r_TSTRB_int_regslice;
        tmp_user_V_reg_1092 <= INPUT_r_TUSER_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        val_1_reg_1155 <= val_1_fu_642_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        val_2_reg_1235 <= val_2_fu_933_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        val_reg_1186 <= val_fu_776_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        INPUT_r_TDATA_blk_n = INPUT_r_TVALID_int_regslice;
    end else begin
        INPUT_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == INPUT_r_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state38))) begin
        INPUT_r_TREADY_int_regslice = 1'b1;
    end else begin
        INPUT_r_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96))) begin
        OUTPUT_r_TDATA_blk_n = OUTPUT_r_TREADY_int_regslice;
    end else begin
        OUTPUT_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == OUTPUT_r_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state96))) begin
        OUTPUT_r_TVALID_int_regslice = 1'b1;
    end else begin
        OUTPUT_r_TVALID_int_regslice = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

assign ap_ST_fsm_state1_blk = 1'b0;

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

always @ (*) begin
    if ((grp_guitar_effects_Pipeline_2_fu_361_ap_done == 1'b0)) begin
        ap_ST_fsm_state37_blk = 1'b1;
    end else begin
        ap_ST_fsm_state37_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == INPUT_r_TVALID_int_regslice)) begin
        ap_ST_fsm_state38_blk = 1'b1;
    end else begin
        ap_ST_fsm_state38_blk = 1'b0;
    end
end

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

assign ap_ST_fsm_state75_blk = 1'b0;

always @ (*) begin
    if ((grp_compression_fu_366_ap_done == 1'b0)) begin
        ap_ST_fsm_state76_blk = 1'b1;
    end else begin
        ap_ST_fsm_state76_blk = 1'b0;
    end
end

assign ap_ST_fsm_state77_blk = 1'b0;

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state80_blk = 1'b0;

assign ap_ST_fsm_state81_blk = 1'b0;

assign ap_ST_fsm_state82_blk = 1'b0;

assign ap_ST_fsm_state83_blk = 1'b0;

assign ap_ST_fsm_state84_blk = 1'b0;

assign ap_ST_fsm_state85_blk = 1'b0;

assign ap_ST_fsm_state86_blk = 1'b0;

assign ap_ST_fsm_state87_blk = 1'b0;

assign ap_ST_fsm_state88_blk = 1'b0;

assign ap_ST_fsm_state89_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state90_blk = 1'b0;

assign ap_ST_fsm_state91_blk = 1'b0;

assign ap_ST_fsm_state92_blk = 1'b0;

assign ap_ST_fsm_state93_blk = 1'b0;

assign ap_ST_fsm_state94_blk = 1'b0;

assign ap_ST_fsm_state95_blk = 1'b0;

always @ (*) begin
    if ((1'b0 == OUTPUT_r_TREADY_int_regslice)) begin
        ap_ST_fsm_state96_blk = 1'b1;
    end else begin
        ap_ST_fsm_state96_blk = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_OUTPUT_r_V_data_V_U_apdone_blk == 1'b1) | (1'b0 == OUTPUT_r_TREADY_int_regslice))) begin
        ap_ST_fsm_state97_blk = 1'b1;
    end else begin
        ap_ST_fsm_state97_blk = 1'b0;
    end
end

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((tmp_3_reg_1044 == 1'd1) & (1'b1 == ap_CS_fsm_state96))) begin
        ap_phi_mux_tmp_int_6_phi_fu_342_p4 = result_V_10_fu_951_p3;
    end else begin
        ap_phi_mux_tmp_int_6_phi_fu_342_p4 = tmp_int_6_reg_338;
    end
end

always @ (*) begin
    if ((~((regslice_both_OUTPUT_r_V_data_V_U_apdone_blk == 1'b1) | (1'b0 == OUTPUT_r_TREADY_int_regslice)) & (tmp_last_V_reg_1097 == 1'd1) & (1'b1 == ap_CS_fsm_state97))) begin
        axilite_out_ap_vld = 1'b1;
    end else begin
        axilite_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        delay_buffer_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        delay_buffer_address0 = delay_buffer_addr_1_reg_1068;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        delay_buffer_address0 = grp_guitar_effects_Pipeline_2_fu_361_delay_buffer_address0;
    end else begin
        delay_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state77) | ((1'b1 == OUTPUT_r_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state96)))) begin
        delay_buffer_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        delay_buffer_ce0 = grp_guitar_effects_Pipeline_2_fu_361_delay_buffer_ce0;
    end else begin
        delay_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        delay_buffer_d0 = result_V_10_fu_951_p3;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        delay_buffer_d0 = grp_guitar_effects_Pipeline_2_fu_361_delay_buffer_d0;
    end else begin
        delay_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if (((tmp_3_reg_1044 == 1'd1) & (1'b1 == OUTPUT_r_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state96))) begin
        delay_buffer_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        delay_buffer_we0 = grp_guitar_effects_Pipeline_2_fu_361_delay_buffer_we0;
    end else begin
        delay_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        grp_fu_378_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state67))) begin
        grp_fu_378_opcode = 2'd0;
    end else begin
        grp_fu_378_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        grp_fu_378_p0 = reg_390;
    end else if (((1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state49))) begin
        grp_fu_378_p0 = reg_396;
    end else begin
        grp_fu_378_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        grp_fu_378_p1 = reg_396;
    end else if (((1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state49))) begin
        grp_fu_378_p1 = conv2_i_reg_1063;
    end else begin
        grp_fu_378_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        grp_fu_382_ce = grp_compression_fu_366_grp_fu_382_p_ce;
    end else begin
        grp_fu_382_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        grp_fu_382_p0 = grp_compression_fu_366_grp_fu_382_p_din0;
    end else if (((1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state45))) begin
        grp_fu_382_p0 = reg_390;
    end else begin
        grp_fu_382_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        grp_fu_382_p1 = grp_compression_fu_366_grp_fu_382_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        grp_fu_382_p1 = delay_mult_read_reg_997;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state45))) begin
        grp_fu_382_p1 = distortion_clip_factor_read_reg_1017;
    end else begin
        grp_fu_382_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        grp_fu_386_ce = grp_compression_fu_366_grp_fu_386_p_ce;
    end else if (((1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | ((grp_guitar_effects_Pipeline_2_fu_361_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state37)))) begin
        grp_fu_386_ce = 1'b1;
    end else begin
        grp_fu_386_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        grp_fu_386_p0 = grp_compression_fu_366_grp_fu_386_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        grp_fu_386_p0 = tmp_int_3_reg_327;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        grp_fu_386_p0 = delay_buffer_load_reg_1210;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        grp_fu_386_p0 = sub_ln105_reg_1130;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_fu_386_p0 = add_ln107_reg_1125;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_386_p0 = distortion_threshold_read_reg_1022;
    end else begin
        grp_fu_386_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_449_ap_start = 1'b1;
    end else begin
        grp_fu_449_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        grp_fu_449_ce = 1'b1;
    end else begin
        grp_fu_449_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (((grp_guitar_effects_Pipeline_2_fu_361_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((icmp_ln106_fu_511_p2 == 1'd1) & (icmp_ln104_fu_506_p2 == 1'd0) & (tmp_reg_1036 == 1'd1) & (1'b1 == INPUT_r_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else if (((icmp_ln104_fu_506_p2 == 1'd1) & (tmp_reg_1036 == 1'd1) & (1'b1 == INPUT_r_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else if (((1'b1 == INPUT_r_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state38) & ((tmp_reg_1036 == 1'd0) | ((icmp_ln106_fu_511_p2 == 1'd0) & (icmp_ln104_fu_506_p2 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            if (((tmp_2_reg_1040 == 1'd0) & (1'b1 == ap_CS_fsm_state75))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state76 : begin
            if (((grp_compression_fu_366_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state77 : begin
            if (((tmp_3_reg_1044 == 1'd0) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            if (((1'b1 == OUTPUT_r_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state96))) begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end
        end
        ap_ST_fsm_state97 : begin
            if ((~((regslice_both_OUTPUT_r_V_data_V_U_apdone_blk == 1'b1) | (1'b0 == OUTPUT_r_TREADY_int_regslice)) & (tmp_last_V_reg_1097 == 1'd1) & (1'b1 == ap_CS_fsm_state97))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((regslice_both_OUTPUT_r_V_data_V_U_apdone_blk == 1'b1) | (1'b0 == OUTPUT_r_TREADY_int_regslice)) & (tmp_last_V_reg_1097 == 1'd0) & (1'b1 == ap_CS_fsm_state97))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign INPUT_r_TREADY = regslice_both_INPUT_r_V_data_V_U_ack_in;

assign OUTPUT_r_TVALID = regslice_both_OUTPUT_r_V_data_V_U_vld_out;

assign add_ln107_fu_516_p2 = (INPUT_r_TDATA_int_regslice + distortion_threshold_read_reg_1022);

assign add_ln346_1_fu_556_p2 = ($signed(zext_ln346_1_fu_552_p1) + $signed(9'd385));

assign add_ln346_2_fu_847_p2 = ($signed(zext_ln346_2_fu_843_p1) + $signed(9'd385));

assign add_ln346_fu_690_p2 = ($signed(zext_ln346_fu_686_p1) + $signed(9'd385));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

always @ (*) begin
    ap_block_state97 = ((regslice_both_OUTPUT_r_V_data_V_U_apdone_blk == 1'b1) | (1'b0 == OUTPUT_r_TREADY_int_regslice));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign axilite_out = ((trunc_ln15_reg_1031[0:0] == 1'b1) ? or_ln85_fu_959_p2 : empty_32_reg_351);

assign data_V_1_fu_526_p1 = reg_402;

assign data_V_2_fu_817_p1 = reg_402;

assign data_V_fu_660_p1 = reg_402;

assign empty_28_fu_460_p1 = grp_fu_449_p2[15:0];

assign grp_compression_fu_366_ap_start = grp_compression_fu_366_ap_start_reg;

assign grp_fu_449_p0 = (32'd0 - delay_samples_read_reg_992);

assign grp_fu_449_p1 = 32'd44100;

assign grp_guitar_effects_Pipeline_2_fu_361_ap_start = grp_guitar_effects_Pipeline_2_fu_361_ap_start_reg;

assign icmp_ln104_fu_506_p2 = (($signed(INPUT_r_TDATA_int_regslice) > $signed(distortion_threshold_read_reg_1022)) ? 1'b1 : 1'b0);

assign icmp_ln106_fu_511_p2 = (($signed(INPUT_r_TDATA_int_regslice) < $signed(negative_threshold_reg_1058)) ? 1'b1 : 1'b0);

assign idxprom_i_cast_fu_464_p1 = empty_28_fu_460_p1;

assign isNeg_1_fu_562_p3 = add_ln346_1_fu_556_p2[32'd8];

assign isNeg_2_fu_853_p3 = add_ln346_2_fu_847_p2[32'd8];

assign isNeg_fu_696_p3 = add_ln346_fu_690_p2[32'd8];

assign mantissa_1_fu_588_p4 = {{{{1'd1}, {p_Result_3_reg_1140}}}, {1'd0}};

assign mantissa_2_fu_879_p4 = {{{{1'd1}, {p_Result_5_reg_1220}}}, {1'd0}};

assign mantissa_fu_722_p4 = {{{{1'd1}, {p_Result_1_reg_1171}}}, {1'd0}};

assign negative_threshold_fu_455_p2 = (32'd0 - distortion_threshold_read_reg_1022);

assign or_ln70_fu_500_p2 = (empty_fu_160 | 32'd8);

assign or_ln75_fu_798_p2 = (empty_30_reg_288 | 32'd4);

assign or_ln80_fu_940_p2 = (empty_31_reg_316 | 32'd2);

assign or_ln85_fu_959_p2 = (empty_32_reg_351 | 32'd1);

assign p_Result_1_fu_682_p1 = data_V_fu_660_p1[22:0];

assign p_Result_3_fu_548_p1 = data_V_1_fu_526_p1[22:0];

assign p_Result_5_fu_839_p1 = data_V_2_fu_817_p1[22:0];

assign r_V_1_fu_748_p2 = zext_ln15_fu_731_p1 << zext_ln1488_fu_738_p1;

assign r_V_2_fu_608_p2 = zext_ln15_1_fu_597_p1 >> zext_ln1488_1_fu_604_p1;

assign r_V_3_fu_614_p2 = zext_ln15_1_fu_597_p1 << zext_ln1488_1_fu_604_p1;

assign r_V_4_fu_899_p2 = zext_ln15_2_fu_888_p1 >> zext_ln1488_2_fu_895_p1;

assign r_V_5_fu_905_p2 = zext_ln15_2_fu_888_p1 << zext_ln1488_2_fu_895_p1;

assign r_V_fu_742_p2 = zext_ln15_fu_731_p1 >> zext_ln1488_fu_738_p1;

assign result_V_10_fu_951_p3 = ((p_Result_4_reg_1215[0:0] == 1'b1) ? result_V_8_fu_946_p2 : val_2_reg_1235);

assign result_V_2_fu_783_p2 = (32'd0 - val_reg_1186);

assign result_V_5_fu_649_p2 = (32'd0 - val_1_reg_1155);

assign result_V_8_fu_946_p2 = (32'd0 - val_2_reg_1235);

assign result_V_9_fu_654_p3 = ((p_Result_2_reg_1135[0:0] == 1'b1) ? result_V_5_fu_649_p2 : val_1_reg_1155);

assign result_V_fu_788_p3 = ((p_Result_s_reg_1166[0:0] == 1'b1) ? result_V_2_fu_783_p2 : val_reg_1186);

assign select_ln83_fu_965_p3 = ((trunc_ln15_reg_1031[0:0] == 1'b1) ? or_ln85_fu_959_p2 : empty_32_reg_351);

assign sext_ln1488_1_fu_601_p1 = $signed(ush_1_reg_1150);

assign sext_ln1488_2_fu_892_p1 = $signed(ush_2_reg_1230);

assign sext_ln1488_fu_735_p1 = $signed(ush_reg_1181);

assign sext_ln1512_1_fu_576_p1 = $signed(sub_ln1512_1_fu_570_p2);

assign sext_ln1512_2_fu_867_p1 = $signed(sub_ln1512_2_fu_861_p2);

assign sext_ln1512_fu_710_p1 = $signed(sub_ln1512_fu_704_p2);

assign sub_ln105_fu_521_p2 = (INPUT_r_TDATA_int_regslice - distortion_threshold_read_reg_1022);

assign sub_ln1512_1_fu_570_p2 = (8'd127 - xs_exp_V_1_fu_538_p4);

assign sub_ln1512_2_fu_861_p2 = (8'd127 - xs_exp_V_2_fu_829_p4);

assign sub_ln1512_fu_704_p2 = (8'd127 - xs_exp_V_fu_672_p4);

assign tmp_13_fu_620_p3 = r_V_2_fu_608_p2[32'd24];

assign tmp_17_fu_911_p3 = r_V_4_fu_899_p2[32'd24];

assign tmp_1_fu_766_p4 = {{r_V_1_fu_748_p2[55:24]}};

assign tmp_4_fu_632_p4 = {{r_V_3_fu_614_p2[55:24]}};

assign tmp_7_fu_923_p4 = {{r_V_5_fu_905_p2[55:24]}};

assign tmp_9_fu_754_p3 = r_V_fu_742_p2[32'd24];

assign trunc_ln15_fu_406_p1 = control[0:0];

assign ush_1_fu_580_p3 = ((isNeg_1_fu_562_p3[0:0] == 1'b1) ? sext_ln1512_1_fu_576_p1 : add_ln346_1_fu_556_p2);

assign ush_2_fu_871_p3 = ((isNeg_2_fu_853_p3[0:0] == 1'b1) ? sext_ln1512_2_fu_867_p1 : add_ln346_2_fu_847_p2);

assign ush_fu_714_p3 = ((isNeg_fu_696_p3[0:0] == 1'b1) ? sext_ln1512_fu_710_p1 : add_ln346_fu_690_p2);

assign val_1_fu_642_p3 = ((isNeg_1_reg_1145[0:0] == 1'b1) ? zext_ln818_1_fu_628_p1 : tmp_4_fu_632_p4);

assign val_2_fu_933_p3 = ((isNeg_2_reg_1225[0:0] == 1'b1) ? zext_ln818_2_fu_919_p1 : tmp_7_fu_923_p4);

assign val_fu_776_p3 = ((isNeg_reg_1176[0:0] == 1'b1) ? zext_ln818_fu_762_p1 : tmp_1_fu_766_p4);

assign xs_exp_V_1_fu_538_p4 = {{data_V_1_fu_526_p1[30:23]}};

assign xs_exp_V_2_fu_829_p4 = {{data_V_2_fu_817_p1[30:23]}};

assign xs_exp_V_fu_672_p4 = {{data_V_fu_660_p1[30:23]}};

assign zext_ln1488_1_fu_604_p1 = $unsigned(sext_ln1488_1_fu_601_p1);

assign zext_ln1488_2_fu_895_p1 = $unsigned(sext_ln1488_2_fu_892_p1);

assign zext_ln1488_fu_738_p1 = $unsigned(sext_ln1488_fu_735_p1);

assign zext_ln15_1_fu_597_p1 = mantissa_1_fu_588_p4;

assign zext_ln15_2_fu_888_p1 = mantissa_2_fu_879_p4;

assign zext_ln15_fu_731_p1 = mantissa_fu_722_p4;

assign zext_ln346_1_fu_552_p1 = xs_exp_V_1_fu_538_p4;

assign zext_ln346_2_fu_843_p1 = xs_exp_V_2_fu_829_p4;

assign zext_ln346_fu_686_p1 = xs_exp_V_fu_672_p4;

assign zext_ln818_1_fu_628_p1 = tmp_13_fu_620_p3;

assign zext_ln818_2_fu_919_p1 = tmp_17_fu_911_p3;

assign zext_ln818_fu_762_p1 = tmp_9_fu_754_p3;

always @ (posedge ap_clk) begin
    or_ln70_reg_1112[3] <= 1'b1;
end

endmodule //guitar_effects
