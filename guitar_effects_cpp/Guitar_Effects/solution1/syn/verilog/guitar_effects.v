// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="guitar_effects_guitar_effects,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=15.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.950000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=267,HLS_SYN_DSP=0,HLS_SYN_FF=10554,HLS_SYN_LUT=18673,HLS_VERSION=2022_1}" *)

module guitar_effects (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        INPUT_r_TDATA,
        INPUT_r_TVALID,
        INPUT_r_TREADY,
        INPUT_r_TKEEP,
        INPUT_r_TSTRB,
        INPUT_r_TUSER,
        INPUT_r_TLAST,
        INPUT_r_TID,
        INPUT_r_TDEST,
        OUTPUT_r_TDATA,
        OUTPUT_r_TVALID,
        OUTPUT_r_TREADY,
        OUTPUT_r_TKEEP,
        OUTPUT_r_TSTRB,
        OUTPUT_r_TUSER,
        OUTPUT_r_TLAST,
        OUTPUT_r_TID,
        OUTPUT_r_TDEST,
        s_axi_control_r_AWVALID,
        s_axi_control_r_AWREADY,
        s_axi_control_r_AWADDR,
        s_axi_control_r_WVALID,
        s_axi_control_r_WREADY,
        s_axi_control_r_WDATA,
        s_axi_control_r_WSTRB,
        s_axi_control_r_ARVALID,
        s_axi_control_r_ARREADY,
        s_axi_control_r_ARADDR,
        s_axi_control_r_RVALID,
        s_axi_control_r_RREADY,
        s_axi_control_r_RDATA,
        s_axi_control_r_RRESP,
        s_axi_control_r_BVALID,
        s_axi_control_r_BREADY,
        s_axi_control_r_BRESP
);

parameter    ap_ST_fsm_state1 = 266'd1;
parameter    ap_ST_fsm_state2 = 266'd2;
parameter    ap_ST_fsm_state3 = 266'd4;
parameter    ap_ST_fsm_state4 = 266'd8;
parameter    ap_ST_fsm_state5 = 266'd16;
parameter    ap_ST_fsm_state6 = 266'd32;
parameter    ap_ST_fsm_state7 = 266'd64;
parameter    ap_ST_fsm_state8 = 266'd128;
parameter    ap_ST_fsm_state9 = 266'd256;
parameter    ap_ST_fsm_state10 = 266'd512;
parameter    ap_ST_fsm_state11 = 266'd1024;
parameter    ap_ST_fsm_state12 = 266'd2048;
parameter    ap_ST_fsm_state13 = 266'd4096;
parameter    ap_ST_fsm_state14 = 266'd8192;
parameter    ap_ST_fsm_state15 = 266'd16384;
parameter    ap_ST_fsm_state16 = 266'd32768;
parameter    ap_ST_fsm_state17 = 266'd65536;
parameter    ap_ST_fsm_state18 = 266'd131072;
parameter    ap_ST_fsm_state19 = 266'd262144;
parameter    ap_ST_fsm_state20 = 266'd524288;
parameter    ap_ST_fsm_state21 = 266'd1048576;
parameter    ap_ST_fsm_state22 = 266'd2097152;
parameter    ap_ST_fsm_state23 = 266'd4194304;
parameter    ap_ST_fsm_state24 = 266'd8388608;
parameter    ap_ST_fsm_state25 = 266'd16777216;
parameter    ap_ST_fsm_state26 = 266'd33554432;
parameter    ap_ST_fsm_state27 = 266'd67108864;
parameter    ap_ST_fsm_state28 = 266'd134217728;
parameter    ap_ST_fsm_state29 = 266'd268435456;
parameter    ap_ST_fsm_state30 = 266'd536870912;
parameter    ap_ST_fsm_state31 = 266'd1073741824;
parameter    ap_ST_fsm_state32 = 266'd2147483648;
parameter    ap_ST_fsm_state33 = 266'd4294967296;
parameter    ap_ST_fsm_state34 = 266'd8589934592;
parameter    ap_ST_fsm_state35 = 266'd17179869184;
parameter    ap_ST_fsm_state36 = 266'd34359738368;
parameter    ap_ST_fsm_state37 = 266'd68719476736;
parameter    ap_ST_fsm_state38 = 266'd137438953472;
parameter    ap_ST_fsm_state39 = 266'd274877906944;
parameter    ap_ST_fsm_state40 = 266'd549755813888;
parameter    ap_ST_fsm_state41 = 266'd1099511627776;
parameter    ap_ST_fsm_state42 = 266'd2199023255552;
parameter    ap_ST_fsm_state43 = 266'd4398046511104;
parameter    ap_ST_fsm_state44 = 266'd8796093022208;
parameter    ap_ST_fsm_state45 = 266'd17592186044416;
parameter    ap_ST_fsm_state46 = 266'd35184372088832;
parameter    ap_ST_fsm_state47 = 266'd70368744177664;
parameter    ap_ST_fsm_state48 = 266'd140737488355328;
parameter    ap_ST_fsm_state49 = 266'd281474976710656;
parameter    ap_ST_fsm_state50 = 266'd562949953421312;
parameter    ap_ST_fsm_state51 = 266'd1125899906842624;
parameter    ap_ST_fsm_state52 = 266'd2251799813685248;
parameter    ap_ST_fsm_state53 = 266'd4503599627370496;
parameter    ap_ST_fsm_state54 = 266'd9007199254740992;
parameter    ap_ST_fsm_state55 = 266'd18014398509481984;
parameter    ap_ST_fsm_state56 = 266'd36028797018963968;
parameter    ap_ST_fsm_state57 = 266'd72057594037927936;
parameter    ap_ST_fsm_state58 = 266'd144115188075855872;
parameter    ap_ST_fsm_state59 = 266'd288230376151711744;
parameter    ap_ST_fsm_state60 = 266'd576460752303423488;
parameter    ap_ST_fsm_state61 = 266'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 266'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 266'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 266'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 266'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 266'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 266'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 266'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 266'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 266'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 266'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 266'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 266'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 266'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 266'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 266'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 266'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 266'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 266'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 266'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 266'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 266'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 266'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 266'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 266'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 266'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 266'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 266'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 266'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 266'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 266'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 266'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 266'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 266'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 266'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 266'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 266'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 266'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 266'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 266'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 266'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 266'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 266'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 266'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 266'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 266'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 266'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 266'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 266'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 266'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 266'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 266'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 266'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 266'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 266'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 266'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 266'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 266'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 266'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 266'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 266'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 266'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 266'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 266'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 266'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 266'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 266'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 266'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 266'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 266'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 266'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 266'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 266'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 266'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 266'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 266'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 266'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 266'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 266'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 266'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 266'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 266'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 266'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 266'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state145 = 266'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state146 = 266'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state147 = 266'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state148 = 266'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state149 = 266'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state150 = 266'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state151 = 266'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state152 = 266'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state153 = 266'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state154 = 266'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state155 = 266'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state156 = 266'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state157 = 266'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state158 = 266'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state159 = 266'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_state160 = 266'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state161 = 266'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state162 = 266'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_state163 = 266'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state164 = 266'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_state165 = 266'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_state166 = 266'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_state167 = 266'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_state168 = 266'd187072209578355573530071658587684226515959365500928;
parameter    ap_ST_fsm_state169 = 266'd374144419156711147060143317175368453031918731001856;
parameter    ap_ST_fsm_state170 = 266'd748288838313422294120286634350736906063837462003712;
parameter    ap_ST_fsm_state171 = 266'd1496577676626844588240573268701473812127674924007424;
parameter    ap_ST_fsm_state172 = 266'd2993155353253689176481146537402947624255349848014848;
parameter    ap_ST_fsm_state173 = 266'd5986310706507378352962293074805895248510699696029696;
parameter    ap_ST_fsm_state174 = 266'd11972621413014756705924586149611790497021399392059392;
parameter    ap_ST_fsm_state175 = 266'd23945242826029513411849172299223580994042798784118784;
parameter    ap_ST_fsm_state176 = 266'd47890485652059026823698344598447161988085597568237568;
parameter    ap_ST_fsm_state177 = 266'd95780971304118053647396689196894323976171195136475136;
parameter    ap_ST_fsm_state178 = 266'd191561942608236107294793378393788647952342390272950272;
parameter    ap_ST_fsm_state179 = 266'd383123885216472214589586756787577295904684780545900544;
parameter    ap_ST_fsm_state180 = 266'd766247770432944429179173513575154591809369561091801088;
parameter    ap_ST_fsm_state181 = 266'd1532495540865888858358347027150309183618739122183602176;
parameter    ap_ST_fsm_state182 = 266'd3064991081731777716716694054300618367237478244367204352;
parameter    ap_ST_fsm_state183 = 266'd6129982163463555433433388108601236734474956488734408704;
parameter    ap_ST_fsm_state184 = 266'd12259964326927110866866776217202473468949912977468817408;
parameter    ap_ST_fsm_state185 = 266'd24519928653854221733733552434404946937899825954937634816;
parameter    ap_ST_fsm_state186 = 266'd49039857307708443467467104868809893875799651909875269632;
parameter    ap_ST_fsm_state187 = 266'd98079714615416886934934209737619787751599303819750539264;
parameter    ap_ST_fsm_state188 = 266'd196159429230833773869868419475239575503198607639501078528;
parameter    ap_ST_fsm_state189 = 266'd392318858461667547739736838950479151006397215279002157056;
parameter    ap_ST_fsm_state190 = 266'd784637716923335095479473677900958302012794430558004314112;
parameter    ap_ST_fsm_state191 = 266'd1569275433846670190958947355801916604025588861116008628224;
parameter    ap_ST_fsm_state192 = 266'd3138550867693340381917894711603833208051177722232017256448;
parameter    ap_ST_fsm_state193 = 266'd6277101735386680763835789423207666416102355444464034512896;
parameter    ap_ST_fsm_state194 = 266'd12554203470773361527671578846415332832204710888928069025792;
parameter    ap_ST_fsm_state195 = 266'd25108406941546723055343157692830665664409421777856138051584;
parameter    ap_ST_fsm_state196 = 266'd50216813883093446110686315385661331328818843555712276103168;
parameter    ap_ST_fsm_state197 = 266'd100433627766186892221372630771322662657637687111424552206336;
parameter    ap_ST_fsm_state198 = 266'd200867255532373784442745261542645325315275374222849104412672;
parameter    ap_ST_fsm_state199 = 266'd401734511064747568885490523085290650630550748445698208825344;
parameter    ap_ST_fsm_state200 = 266'd803469022129495137770981046170581301261101496891396417650688;
parameter    ap_ST_fsm_state201 = 266'd1606938044258990275541962092341162602522202993782792835301376;
parameter    ap_ST_fsm_state202 = 266'd3213876088517980551083924184682325205044405987565585670602752;
parameter    ap_ST_fsm_state203 = 266'd6427752177035961102167848369364650410088811975131171341205504;
parameter    ap_ST_fsm_state204 = 266'd12855504354071922204335696738729300820177623950262342682411008;
parameter    ap_ST_fsm_state205 = 266'd25711008708143844408671393477458601640355247900524685364822016;
parameter    ap_ST_fsm_state206 = 266'd51422017416287688817342786954917203280710495801049370729644032;
parameter    ap_ST_fsm_state207 = 266'd102844034832575377634685573909834406561420991602098741459288064;
parameter    ap_ST_fsm_state208 = 266'd205688069665150755269371147819668813122841983204197482918576128;
parameter    ap_ST_fsm_state209 = 266'd411376139330301510538742295639337626245683966408394965837152256;
parameter    ap_ST_fsm_state210 = 266'd822752278660603021077484591278675252491367932816789931674304512;
parameter    ap_ST_fsm_state211 = 266'd1645504557321206042154969182557350504982735865633579863348609024;
parameter    ap_ST_fsm_state212 = 266'd3291009114642412084309938365114701009965471731267159726697218048;
parameter    ap_ST_fsm_state213 = 266'd6582018229284824168619876730229402019930943462534319453394436096;
parameter    ap_ST_fsm_state214 = 266'd13164036458569648337239753460458804039861886925068638906788872192;
parameter    ap_ST_fsm_state215 = 266'd26328072917139296674479506920917608079723773850137277813577744384;
parameter    ap_ST_fsm_state216 = 266'd52656145834278593348959013841835216159447547700274555627155488768;
parameter    ap_ST_fsm_state217 = 266'd105312291668557186697918027683670432318895095400549111254310977536;
parameter    ap_ST_fsm_state218 = 266'd210624583337114373395836055367340864637790190801098222508621955072;
parameter    ap_ST_fsm_state219 = 266'd421249166674228746791672110734681729275580381602196445017243910144;
parameter    ap_ST_fsm_state220 = 266'd842498333348457493583344221469363458551160763204392890034487820288;
parameter    ap_ST_fsm_state221 = 266'd1684996666696914987166688442938726917102321526408785780068975640576;
parameter    ap_ST_fsm_state222 = 266'd3369993333393829974333376885877453834204643052817571560137951281152;
parameter    ap_ST_fsm_state223 = 266'd6739986666787659948666753771754907668409286105635143120275902562304;
parameter    ap_ST_fsm_state224 = 266'd13479973333575319897333507543509815336818572211270286240551805124608;
parameter    ap_ST_fsm_state225 = 266'd26959946667150639794667015087019630673637144422540572481103610249216;
parameter    ap_ST_fsm_state226 = 266'd53919893334301279589334030174039261347274288845081144962207220498432;
parameter    ap_ST_fsm_state227 = 266'd107839786668602559178668060348078522694548577690162289924414440996864;
parameter    ap_ST_fsm_state228 = 266'd215679573337205118357336120696157045389097155380324579848828881993728;
parameter    ap_ST_fsm_state229 = 266'd431359146674410236714672241392314090778194310760649159697657763987456;
parameter    ap_ST_fsm_state230 = 266'd862718293348820473429344482784628181556388621521298319395315527974912;
parameter    ap_ST_fsm_state231 = 266'd1725436586697640946858688965569256363112777243042596638790631055949824;
parameter    ap_ST_fsm_state232 = 266'd3450873173395281893717377931138512726225554486085193277581262111899648;
parameter    ap_ST_fsm_state233 = 266'd6901746346790563787434755862277025452451108972170386555162524223799296;
parameter    ap_ST_fsm_state234 = 266'd13803492693581127574869511724554050904902217944340773110325048447598592;
parameter    ap_ST_fsm_state235 = 266'd27606985387162255149739023449108101809804435888681546220650096895197184;
parameter    ap_ST_fsm_state236 = 266'd55213970774324510299478046898216203619608871777363092441300193790394368;
parameter    ap_ST_fsm_state237 = 266'd110427941548649020598956093796432407239217743554726184882600387580788736;
parameter    ap_ST_fsm_state238 = 266'd220855883097298041197912187592864814478435487109452369765200775161577472;
parameter    ap_ST_fsm_state239 = 266'd441711766194596082395824375185729628956870974218904739530401550323154944;
parameter    ap_ST_fsm_state240 = 266'd883423532389192164791648750371459257913741948437809479060803100646309888;
parameter    ap_ST_fsm_state241 = 266'd1766847064778384329583297500742918515827483896875618958121606201292619776;
parameter    ap_ST_fsm_state242 = 266'd3533694129556768659166595001485837031654967793751237916243212402585239552;
parameter    ap_ST_fsm_state243 = 266'd7067388259113537318333190002971674063309935587502475832486424805170479104;
parameter    ap_ST_fsm_state244 = 266'd14134776518227074636666380005943348126619871175004951664972849610340958208;
parameter    ap_ST_fsm_state245 = 266'd28269553036454149273332760011886696253239742350009903329945699220681916416;
parameter    ap_ST_fsm_state246 = 266'd56539106072908298546665520023773392506479484700019806659891398441363832832;
parameter    ap_ST_fsm_state247 = 266'd113078212145816597093331040047546785012958969400039613319782796882727665664;
parameter    ap_ST_fsm_state248 = 266'd226156424291633194186662080095093570025917938800079226639565593765455331328;
parameter    ap_ST_fsm_state249 = 266'd452312848583266388373324160190187140051835877600158453279131187530910662656;
parameter    ap_ST_fsm_state250 = 266'd904625697166532776746648320380374280103671755200316906558262375061821325312;
parameter    ap_ST_fsm_state251 = 266'd1809251394333065553493296640760748560207343510400633813116524750123642650624;
parameter    ap_ST_fsm_state252 = 266'd3618502788666131106986593281521497120414687020801267626233049500247285301248;
parameter    ap_ST_fsm_state253 = 266'd7237005577332262213973186563042994240829374041602535252466099000494570602496;
parameter    ap_ST_fsm_state254 = 266'd14474011154664524427946373126085988481658748083205070504932198000989141204992;
parameter    ap_ST_fsm_state255 = 266'd28948022309329048855892746252171976963317496166410141009864396001978282409984;
parameter    ap_ST_fsm_state256 = 266'd57896044618658097711785492504343953926634992332820282019728792003956564819968;
parameter    ap_ST_fsm_state257 = 266'd115792089237316195423570985008687907853269984665640564039457584007913129639936;
parameter    ap_ST_fsm_state258 = 266'd231584178474632390847141970017375815706539969331281128078915168015826259279872;
parameter    ap_ST_fsm_state259 = 266'd463168356949264781694283940034751631413079938662562256157830336031652518559744;
parameter    ap_ST_fsm_state260 = 266'd926336713898529563388567880069503262826159877325124512315660672063305037119488;
parameter    ap_ST_fsm_state261 = 266'd1852673427797059126777135760139006525652319754650249024631321344126610074238976;
parameter    ap_ST_fsm_state262 = 266'd3705346855594118253554271520278013051304639509300498049262642688253220148477952;
parameter    ap_ST_fsm_state263 = 266'd7410693711188236507108543040556026102609279018600996098525285376506440296955904;
parameter    ap_ST_fsm_state264 = 266'd14821387422376473014217086081112052205218558037201992197050570753012880593911808;
parameter    ap_ST_fsm_state265 = 266'd29642774844752946028434172162224104410437116074403984394101141506025761187823616;
parameter    ap_ST_fsm_state266 = 266'd59285549689505892056868344324448208820874232148807968788202283012051522375647232;
parameter    C_S_AXI_CONTROL_R_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_R_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_R_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input  [31:0] INPUT_r_TDATA;
input   INPUT_r_TVALID;
output   INPUT_r_TREADY;
input  [3:0] INPUT_r_TKEEP;
input  [3:0] INPUT_r_TSTRB;
input  [1:0] INPUT_r_TUSER;
input  [0:0] INPUT_r_TLAST;
input  [4:0] INPUT_r_TID;
input  [5:0] INPUT_r_TDEST;
output  [31:0] OUTPUT_r_TDATA;
output   OUTPUT_r_TVALID;
input   OUTPUT_r_TREADY;
output  [3:0] OUTPUT_r_TKEEP;
output  [3:0] OUTPUT_r_TSTRB;
output  [1:0] OUTPUT_r_TUSER;
output  [0:0] OUTPUT_r_TLAST;
output  [4:0] OUTPUT_r_TID;
output  [5:0] OUTPUT_r_TDEST;
input   s_axi_control_r_AWVALID;
output   s_axi_control_r_AWREADY;
input  [C_S_AXI_CONTROL_R_ADDR_WIDTH - 1:0] s_axi_control_r_AWADDR;
input   s_axi_control_r_WVALID;
output   s_axi_control_r_WREADY;
input  [C_S_AXI_CONTROL_R_DATA_WIDTH - 1:0] s_axi_control_r_WDATA;
input  [C_S_AXI_CONTROL_R_WSTRB_WIDTH - 1:0] s_axi_control_r_WSTRB;
input   s_axi_control_r_ARVALID;
output   s_axi_control_r_ARREADY;
input  [C_S_AXI_CONTROL_R_ADDR_WIDTH - 1:0] s_axi_control_r_ARADDR;
output   s_axi_control_r_RVALID;
input   s_axi_control_r_RREADY;
output  [C_S_AXI_CONTROL_R_DATA_WIDTH - 1:0] s_axi_control_r_RDATA;
output  [1:0] s_axi_control_r_RRESP;
output   s_axi_control_r_BVALID;
input   s_axi_control_r_BREADY;
output  [1:0] s_axi_control_r_BRESP;

 reg    ap_rst_n_inv;
reg    axilite_out_ap_vld;
wire   [7:0] control;
wire   [31:0] distortion_threshold;
wire   [7:0] distortion_clip_factor;
wire   [31:0] compression_min_threshold;
wire   [31:0] compression_max_threshold;
wire   [31:0] compression_zero_threshold;
wire   [31:0] delay_mult;
wire   [31:0] delay_samples;
wire   [31:0] tempo;
wire   [63:0] wah_coeffs;
reg    debug_output_ap_vld;
wire   [8:0] lpf_coefficients_address0;
reg    lpf_coefficients_ce0;
wire   [31:0] lpf_coefficients_q0;
reg    gmem_blk_n_AR;
(* fsm_encoding = "none" *) reg   [265:0] ap_CS_fsm;
wire    ap_CS_fsm_state5;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state232;
wire    ap_CS_fsm_state252;
wire    ap_CS_fsm_state255;
wire    ap_CS_fsm_state262;
reg    INPUT_r_TDATA_blk_n;
wire    ap_CS_fsm_state14;
reg    OUTPUT_r_TDATA_blk_n;
wire    ap_CS_fsm_state264;
reg   [0:0] tmp_last_V_reg_2607;
wire    ap_CS_fsm_state265;
wire    ap_CS_fsm_state266;
wire   [31:0] grp_fu_839_p1;
reg   [31:0] reg_867;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state96;
wire    ap_CS_fsm_state105;
wire    ap_CS_fsm_state117;
wire    ap_CS_fsm_state161;
wire   [31:0] grp_fu_831_p2;
reg   [31:0] reg_874;
wire    ap_CS_fsm_state99;
wire    ap_CS_fsm_state120;
wire    ap_CS_fsm_state164;
wire   [31:0] grp_fu_835_p2;
reg   [31:0] reg_879;
wire   [63:0] grp_fu_852_p2;
reg   [63:0] reg_884;
wire    ap_CS_fsm_state175;
wire    ap_CS_fsm_state180;
wire    ap_CS_fsm_state218;
wire    ap_CS_fsm_state228;
reg  signed [15:0] reg_891;
reg   [63:0] wah_coeffs_read_reg_2388;
wire    ap_CS_fsm_state1;
reg   [31:0] tempo_read_reg_2394;
reg   [31:0] delay_samples_read_reg_2399;
reg   [31:0] delay_mult_read_reg_2404;
reg   [31:0] compression_zero_threshold_read_reg_2409;
reg   [31:0] compression_max_threshold_read_reg_2414;
reg   [31:0] compression_min_threshold_read_reg_2420;
reg   [7:0] distortion_clip_factor_read_reg_2427;
reg   [31:0] distortion_threshold_read_reg_2432;
reg   [7:0] control_read_reg_2442;
wire   [0:0] trunc_ln23_fu_895_p1;
reg   [0:0] trunc_ln23_reg_2449;
reg   [0:0] tmp_reg_2528;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond3554_fu_972_p2;
reg   [0:0] tmp_11_reg_2532;
reg   [0:0] tmp_13_reg_2536;
reg   [15:0] gmem_addr_read_reg_2546;
wire   [31:0] negative_threshold_fu_1060_p2;
reg   [31:0] negative_threshold_reg_2551;
wire    ap_CS_fsm_state13;
wire  signed [39:0] conv7_i_i_i_fu_1065_p1;
reg  signed [39:0] conv7_i_i_i_reg_2556;
wire   [63:0] grp_fu_864_p1;
reg   [63:0] conv2_i_reg_2562;
reg   [31:0] conv18_i_reg_2567;
wire   [31:0] grp_fu_842_p1;
reg   [31:0] conv30_i_reg_2572;
reg   [3:0] tmp_keep_V_reg_2592;
reg   [3:0] tmp_strb_V_reg_2597;
reg   [1:0] tmp_user_V_reg_2602;
reg   [4:0] tmp_id_V_reg_2611;
reg   [5:0] tmp_dest_V_reg_2616;
wire   [31:0] current_sample_fu_1109_p2;
reg   [31:0] current_sample_reg_2621;
wire   [31:0] or_ln96_fu_1115_p2;
reg   [31:0] or_ln96_reg_2626;
wire   [0:0] icmp_ln141_fu_1121_p2;
reg   [0:0] icmp_ln141_reg_2636;
wire   [0:0] icmp_ln143_fu_1126_p2;
reg   [0:0] icmp_ln143_reg_2640;
wire   [31:0] r_V_fu_1131_p2;
reg  signed [31:0] r_V_reg_2644;
wire   [31:0] r_V_21_fu_1136_p2;
reg  signed [31:0] r_V_21_reg_2649;
wire   [39:0] r_V_49_fu_1144_p2;
reg   [39:0] r_V_49_reg_2654;
wire    ap_CS_fsm_state15;
reg   [31:0] ret_V_9_cast_reg_2659;
wire   [0:0] icmp_ln1049_1_fu_1163_p2;
reg   [0:0] icmp_ln1049_1_reg_2666;
wire    ap_CS_fsm_state16;
wire   [39:0] r_V_48_fu_1249_p2;
reg   [39:0] r_V_48_reg_2679;
wire    ap_CS_fsm_state17;
reg   [31:0] ret_V_cast_reg_2684;
wire   [0:0] icmp_ln1049_fu_1268_p2;
reg   [0:0] icmp_ln1049_reg_2691;
wire   [31:0] or_ln101_fu_1301_p2;
reg   [31:0] or_ln101_reg_2696;
wire    ap_CS_fsm_state52;
wire   [31:0] grp_fu_1240_p2;
reg   [31:0] compression_buffer_index_1_reg_2708;
wire  signed [10:0] sext_ln65_fu_1311_p1;
reg  signed [10:0] sext_ln65_reg_2716;
wire   [8:0] add_ln165_fu_1326_p2;
reg   [8:0] add_ln165_reg_2724;
wire    ap_CS_fsm_state53;
wire   [0:0] icmp_ln165_fu_1320_p2;
wire   [31:0] current_level_fu_1352_p3;
reg   [31:0] current_level_reg_2739;
wire   [0:0] icmp_ln179_fu_1359_p2;
reg   [0:0] icmp_ln179_reg_2744;
wire   [0:0] icmp_ln189_fu_1364_p2;
reg   [0:0] icmp_ln189_reg_2748;
wire   [0:0] and_ln188_1_fu_1386_p2;
reg   [0:0] and_ln188_1_reg_2752;
reg   [31:0] lpf_coefficients_load_reg_2756;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state67;
wire   [31:0] compression_buffer_q0;
reg   [31:0] compression_buffer_load_reg_2766;
wire    ap_CS_fsm_state68;
wire   [31:0] grp_fu_827_p2;
reg   [31:0] dc_reg_2771;
wire    ap_CS_fsm_state79;
wire   [31:0] result_V_18_fu_1548_p3;
wire    ap_CS_fsm_state80;
wire   [31:0] result_V_fu_1688_p3;
reg   [31:0] result_V_reg_2781;
wire    ap_CS_fsm_state100;
reg   [31:0] delay_buffer_index_load_reg_2786;
wire    ap_CS_fsm_state101;
wire   [31:0] result_V_19_fu_1854_p3;
reg   [31:0] result_V_19_reg_2801;
wire    ap_CS_fsm_state121;
wire    ap_CS_fsm_state156;
wire   [31:0] delay_buffer_q0;
reg   [31:0] delay_buffer_load_reg_2811;
wire    ap_CS_fsm_state157;
wire   [31:0] data_V_3_fu_1876_p1;
reg   [31:0] data_V_3_reg_2816;
wire    ap_CS_fsm_state165;
wire   [31:0] val_3_fu_1986_p3;
reg   [31:0] val_3_reg_2821;
wire   [31:0] shl_ln227_fu_2033_p2;
wire    ap_CS_fsm_state166;
reg   [63:0] conv_i2_reg_2832;
wire    ap_CS_fsm_state170;
wire    ap_CS_fsm_state203;
wire   [63:0] grp_fu_859_p2;
reg   [63:0] x_assign_reg_2842;
wire    ap_CS_fsm_state211;
wire   [63:0] grp_sin_or_cos_double_s_fu_810_ap_return;
reg   [63:0] tmp_2_reg_2847;
wire    ap_CS_fsm_state213;
wire   [63:0] grp_fu_847_p2;
reg   [63:0] add5_i_reg_2852;
wire    ap_CS_fsm_state223;
wire   [31:0] result_V_21_fu_2191_p3;
reg  signed [31:0] result_V_21_reg_2857;
wire    ap_CS_fsm_state229;
wire   [40:0] mul_ln234_fu_2202_p2;
reg   [40:0] mul_ln234_reg_2862;
wire    ap_CS_fsm_state230;
reg   [63:0] gmem_addr_1_reg_2867;
wire    ap_CS_fsm_state231;
wire   [31:0] or_ln111_fu_2236_p2;
reg   [31:0] or_ln111_reg_2873;
wire    ap_CS_fsm_state238;
wire   [31:0] grp_fu_2053_p2;
reg   [31:0] wah_buffer_index_1_reg_2879;
wire  signed [8:0] sext_ln77_fu_2246_p1;
reg  signed [8:0] sext_ln77_reg_2884;
wire   [6:0] add_ln234_1_fu_2256_p2;
reg   [6:0] add_ln234_1_reg_2892;
wire    ap_CS_fsm_state239;
wire   [0:0] icmp_ln234_fu_2250_p2;
wire    ap_CS_fsm_state251;
wire   [31:0] wah_values_buffer_q0;
reg  signed [31:0] r_V_46_reg_2907;
wire   [47:0] r_V_50_fu_2297_p2;
reg   [47:0] r_V_50_reg_2912;
wire    ap_CS_fsm_state253;
reg   [15:0] ret_V_12_reg_2917;
wire   [31:0] trunc_ln1049_2_fu_2313_p1;
reg   [31:0] trunc_ln1049_2_reg_2924;
wire   [31:0] result_3_fu_2352_p2;
wire    ap_CS_fsm_state254;
reg   [8:0] compression_buffer_address0;
reg    compression_buffer_ce0;
reg    compression_buffer_we0;
reg   [31:0] compression_buffer_d0;
reg   [16:0] delay_buffer_address0;
reg    delay_buffer_ce0;
reg    delay_buffer_we0;
reg   [31:0] delay_buffer_d0;
reg   [6:0] wah_values_buffer_address0;
reg    wah_values_buffer_ce0;
reg    wah_values_buffer_we0;
reg   [31:0] wah_values_buffer_d0;
wire    grp_sin_or_cos_double_s_fu_810_ap_start;
wire    grp_sin_or_cos_double_s_fu_810_ap_done;
wire    grp_sin_or_cos_double_s_fu_810_ap_idle;
wire    grp_sin_or_cos_double_s_fu_810_ap_ready;
wire    gmem_AWREADY;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [15:0] gmem_RDATA;
wire   [9:0] gmem_RFIFONUM;
wire    gmem_BVALID;
reg   [31:0] ap_phi_mux_axilite_out_local_1_phi_fu_603_p8;
reg   [31:0] axilite_out_local_1_reg_600;
reg   [31:0] ap_phi_mux_empty_80_phi_fu_617_p8;
reg   [31:0] empty_80_reg_614;
reg   [31:0] ap_phi_mux_tmp_int_7_phi_fu_631_p8;
reg   [31:0] tmp_int_7_reg_628;
wire   [31:0] result_fu_1225_p2;
wire   [31:0] result_1_fu_1194_p2;
reg   [8:0] i_reg_642;
reg   [31:0] empty_81_reg_653;
reg   [31:0] ap_phi_mux_axilite_out_local_2_phi_fu_668_p10;
reg   [31:0] axilite_out_local_2_reg_665;
reg   [31:0] ap_phi_mux_empty_83_phi_fu_685_p10;
reg   [31:0] empty_83_reg_682;
reg   [31:0] ap_phi_mux_tmp_int_3_phi_fu_702_p10;
reg   [31:0] tmp_int_3_reg_699;
reg   [31:0] ap_phi_mux_axilite_out_local_3_phi_fu_721_p4;
reg   [31:0] axilite_out_local_3_reg_718;
wire   [31:0] or_ln106_fu_1994_p2;
reg   [31:0] ap_phi_mux_empty_84_phi_fu_732_p4;
reg   [31:0] empty_84_reg_729;
reg   [31:0] ap_phi_mux_tmp_int_phi_fu_744_p4;
reg   [31:0] tmp_int_reg_740;
wire   [31:0] output_fu_2021_p2;
reg   [6:0] i_7_reg_752;
reg   [31:0] result_2_reg_763;
reg   [31:0] axilite_out_local_4_reg_775;
wire    ap_CS_fsm_state263;
reg   [31:0] empty_87_reg_786;
reg   [31:0] tmp_int_8_reg_796;
reg    grp_sin_or_cos_double_s_fu_810_ap_start_reg;
wire    ap_CS_fsm_state212;
wire   [63:0] p_cast_fu_907_p1;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond3618_fu_912_p2;
wire   [63:0] p_cast5_fu_937_p1;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond3565_fu_942_p2;
wire   [63:0] p_cast6_fu_967_p1;
wire   [63:0] zext_ln161_fu_1297_p1;
wire    ap_CS_fsm_state18;
wire   [63:0] zext_ln165_fu_1315_p1;
wire   [63:0] zext_ln168_fu_1412_p1;
wire   [63:0] zext_ln207_fu_1866_p1;
wire   [63:0] zext_ln210_fu_2029_p1;
wire   [63:0] zext_ln223_fu_2042_p1;
wire   [63:0] zext_ln237_fu_2285_p1;
wire  signed [63:0] sext_ln85_fu_1049_p1;
wire  signed [63:0] sext_ln234_fu_2226_p1;
reg   [8:0] empty_fu_308;
wire   [8:0] empty_71_fu_918_p2;
reg   [16:0] empty_72_fu_324;
wire   [16:0] empty_74_fu_948_p2;
reg   [6:0] empty_75_fu_328;
wire   [6:0] empty_77_fu_978_p2;
reg   [31:0] current_sample_1_fu_332;
reg    ap_block_state264;
reg    ap_block_state264_io;
reg   [31:0] empty_78_fu_336;
reg   [31:0] wah_buffer_index_fu_340;
reg   [31:0] delay_buffer_index_fu_344;
wire   [31:0] grp_fu_1716_p2;
reg   [31:0] compression_buffer_index_fu_348;
reg   [15:0] debug_output_local_0_fu_352;
reg   [31:0] axilite_out_local_0_fu_356;
wire   [31:0] abs_in_1_fu_1288_p3;
wire    ap_CS_fsm_state76;
reg   [31:0] grp_fu_831_p1;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state97;
wire    ap_CS_fsm_state118;
wire    ap_CS_fsm_state162;
reg   [31:0] grp_fu_835_p0;
wire    ap_CS_fsm_state85;
wire    ap_CS_fsm_state106;
reg   [31:0] grp_fu_839_p0;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state93;
wire    ap_CS_fsm_state102;
wire    ap_CS_fsm_state114;
wire    ap_CS_fsm_state158;
wire    ap_CS_fsm_state219;
reg   [63:0] grp_fu_852_p0;
reg   [63:0] grp_fu_852_p1;
wire    ap_CS_fsm_state171;
wire    ap_CS_fsm_state176;
wire    ap_CS_fsm_state214;
wire    ap_CS_fsm_state224;
wire    ap_CS_fsm_state181;
reg   [31:0] grp_fu_864_p0;
wire    ap_CS_fsm_state9;
wire   [62:0] trunc_ln6_fu_1040_p4;
wire  signed [7:0] r_V_49_fu_1144_p1;
wire   [6:0] trunc_ln1049_1_fu_1159_p1;
wire   [31:0] ret_V_10_fu_1176_p2;
wire   [0:0] p_Result_28_fu_1169_p3;
wire   [31:0] select_ln1048_1_fu_1181_p3;
wire   [31:0] ret_V_11_fu_1187_p3;
wire   [31:0] ret_V_fu_1207_p2;
wire   [0:0] p_Result_s_fu_1200_p3;
wire   [31:0] select_ln1048_fu_1212_p3;
wire   [31:0] ret_V_9_fu_1218_p3;
wire   [31:0] grp_fu_1240_p0;
wire   [9:0] grp_fu_1240_p1;
wire  signed [7:0] r_V_48_fu_1249_p1;
wire   [6:0] trunc_ln1049_fu_1264_p1;
wire   [0:0] tmp_17_fu_1274_p3;
wire   [31:0] sub_ln157_fu_1282_p2;
wire   [9:0] trunc_ln65_fu_1307_p1;
wire   [10:0] zext_ln167_fu_1332_p1;
wire   [10:0] grp_fu_1341_p0;
wire   [9:0] grp_fu_1341_p1;
wire   [0:0] icmp_ln171_fu_1347_p2;
wire   [0:0] icmp_ln188_1_fu_1375_p2;
wire   [0:0] and_ln188_fu_1380_p2;
wire   [0:0] icmp_ln188_fu_1370_p2;
wire   [8:0] grp_fu_1341_p2;
wire   [8:0] trunc_ln168_fu_1408_p1;
wire   [31:0] data_V_fu_1417_p1;
wire   [22:0] p_Result_46_fu_1438_p1;
wire   [24:0] mantissa_fu_1442_p4;
wire   [7:0] xs_exp_V_fu_1428_p4;
wire   [8:0] zext_ln346_fu_1456_p1;
wire   [8:0] add_ln346_fu_1460_p2;
wire   [7:0] sub_ln1512_3_fu_1474_p2;
wire   [0:0] isNeg_fu_1466_p3;
wire  signed [8:0] sext_ln1512_fu_1480_p1;
wire   [8:0] ush_fu_1484_p3;
wire  signed [31:0] sext_ln1488_fu_1492_p1;
wire   [78:0] zext_ln15_fu_1452_p1;
wire   [78:0] zext_ln1488_fu_1496_p1;
wire   [78:0] r_V_35_fu_1500_p2;
wire   [0:0] tmp_22_fu_1512_p3;
wire   [78:0] r_V_36_fu_1506_p2;
wire   [31:0] zext_ln818_fu_1520_p1;
wire   [31:0] tmp_6_fu_1524_p4;
wire   [31:0] val_fu_1534_p3;
wire   [0:0] p_Result_45_fu_1420_p3;
wire   [31:0] result_V_2_fu_1542_p2;
wire   [31:0] data_V_2_fu_1556_p1;
wire   [22:0] p_Result_50_fu_1578_p1;
wire   [24:0] mantissa_2_fu_1582_p4;
wire   [7:0] xs_exp_V_2_fu_1568_p4;
wire   [8:0] zext_ln346_2_fu_1596_p1;
wire   [8:0] add_ln346_2_fu_1600_p2;
wire   [7:0] sub_ln1512_5_fu_1614_p2;
wire   [0:0] isNeg_3_fu_1606_p3;
wire  signed [8:0] sext_ln1512_2_fu_1620_p1;
wire   [8:0] ush_3_fu_1624_p3;
wire  signed [31:0] sext_ln1488_2_fu_1632_p1;
wire   [78:0] zext_ln15_2_fu_1592_p1;
wire   [78:0] zext_ln1488_3_fu_1636_p1;
wire   [78:0] r_V_40_fu_1640_p2;
wire   [0:0] tmp_30_fu_1652_p3;
wire   [78:0] r_V_41_fu_1646_p2;
wire   [31:0] zext_ln818_2_fu_1660_p1;
wire   [31:0] tmp_s_fu_1664_p4;
wire   [31:0] val_2_fu_1674_p3;
wire   [0:0] p_Result_49_fu_1560_p3;
wire   [31:0] result_V_8_fu_1682_p2;
wire   [31:0] grp_fu_1704_p0;
wire   [17:0] grp_fu_1704_p1;
wire   [31:0] grp_fu_1716_p0;
wire   [17:0] grp_fu_1716_p1;
wire   [31:0] data_V_1_fu_1722_p1;
wire   [22:0] p_Result_48_fu_1744_p1;
wire   [24:0] mantissa_1_fu_1748_p4;
wire   [7:0] xs_exp_V_1_fu_1734_p4;
wire   [8:0] zext_ln346_1_fu_1762_p1;
wire   [8:0] add_ln346_1_fu_1766_p2;
wire   [7:0] sub_ln1512_4_fu_1780_p2;
wire   [0:0] isNeg_2_fu_1772_p3;
wire  signed [8:0] sext_ln1512_1_fu_1786_p1;
wire   [8:0] ush_2_fu_1790_p3;
wire  signed [31:0] sext_ln1488_1_fu_1798_p1;
wire   [78:0] zext_ln15_1_fu_1758_p1;
wire   [78:0] zext_ln1488_2_fu_1802_p1;
wire   [78:0] r_V_38_fu_1806_p2;
wire   [0:0] tmp_26_fu_1818_p3;
wire   [78:0] r_V_39_fu_1812_p2;
wire   [31:0] zext_ln818_1_fu_1826_p1;
wire   [31:0] tmp_9_fu_1830_p4;
wire   [31:0] val_1_fu_1840_p3;
wire   [0:0] p_Result_47_fu_1726_p3;
wire   [31:0] result_V_7_fu_1848_p2;
wire   [16:0] grp_fu_1704_p2;
wire   [16:0] trunc_ln207_fu_1862_p1;
wire   [22:0] p_Result_52_fu_1890_p1;
wire   [24:0] mantissa_3_fu_1894_p4;
wire   [7:0] xs_exp_V_4_fu_1880_p4;
wire   [8:0] zext_ln346_3_fu_1908_p1;
wire   [8:0] add_ln346_3_fu_1912_p2;
wire   [7:0] sub_ln1512_fu_1926_p2;
wire   [0:0] isNeg_4_fu_1918_p3;
wire  signed [8:0] sext_ln1512_3_fu_1932_p1;
wire   [8:0] ush_4_fu_1936_p3;
wire  signed [31:0] sext_ln1488_3_fu_1944_p1;
wire   [78:0] zext_ln15_3_fu_1904_p1;
wire   [78:0] zext_ln1488_4_fu_1948_p1;
wire   [78:0] r_V_42_fu_1952_p2;
wire   [0:0] tmp_34_fu_1964_p3;
wire   [78:0] r_V_43_fu_1958_p2;
wire   [31:0] zext_ln818_3_fu_1972_p1;
wire   [31:0] tmp_3_fu_1976_p4;
wire   [0:0] p_Result_51_fu_2002_p3;
wire   [31:0] result_V_13_fu_2009_p2;
wire   [31:0] result_V_20_fu_2014_p3;
wire   [31:0] grp_fu_2053_p0;
wire   [7:0] grp_fu_2053_p1;
wire   [63:0] data_V_4_fu_2059_p1;
wire   [51:0] p_Result_54_fu_2081_p1;
wire   [53:0] mantissa_4_fu_2085_p4;
wire   [10:0] xs_exp_V_5_fu_2071_p4;
wire   [11:0] zext_ln515_fu_2099_p1;
wire   [11:0] add_ln515_fu_2103_p2;
wire   [10:0] sub_ln1512_2_fu_2117_p2;
wire   [0:0] isNeg_5_fu_2109_p3;
wire  signed [11:0] sext_ln1512_4_fu_2123_p1;
wire   [11:0] ush_5_fu_2127_p3;
wire  signed [31:0] sext_ln1488_4_fu_2135_p1;
wire   [136:0] zext_ln15_4_fu_2095_p1;
wire   [136:0] zext_ln1488_5_fu_2139_p1;
wire   [136:0] r_V_44_fu_2143_p2;
wire   [0:0] tmp_38_fu_2155_p3;
wire   [136:0] r_V_45_fu_2149_p2;
wire   [31:0] zext_ln818_4_fu_2163_p1;
wire   [31:0] tmp_4_fu_2167_p4;
wire   [31:0] val_4_fu_2177_p3;
wire   [0:0] p_Result_53_fu_2063_p3;
wire   [31:0] result_V_16_fu_2185_p2;
wire   [8:0] mul_ln234_fu_2202_p1;
wire  signed [63:0] sext_ln234_2_fu_2208_p1;
wire   [63:0] add_ln234_fu_2211_p2;
wire   [62:0] trunc_ln_fu_2216_p4;
wire   [7:0] trunc_ln77_fu_2242_p1;
wire   [8:0] zext_ln236_fu_2262_p1;
wire   [8:0] grp_fu_2271_p0;
wire   [7:0] grp_fu_2271_p1;
wire   [6:0] grp_fu_2271_p2;
wire   [6:0] trunc_ln237_fu_2281_p1;
wire   [0:0] icmp_ln1049_2_fu_2324_p2;
wire   [15:0] ret_V_13_fu_2329_p2;
wire   [0:0] p_Result_44_fu_2317_p3;
wire   [15:0] select_ln1048_2_fu_2334_p3;
wire   [15:0] ret_V_14_fu_2341_p3;
wire  signed [31:0] sext_ln598_fu_2348_p1;
reg    grp_fu_839_ce;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state83;
wire    ap_CS_fsm_state94;
wire    ap_CS_fsm_state95;
wire    ap_CS_fsm_state103;
wire    ap_CS_fsm_state104;
wire    ap_CS_fsm_state115;
wire    ap_CS_fsm_state116;
wire    ap_CS_fsm_state159;
wire    ap_CS_fsm_state160;
reg    grp_fu_842_ce;
reg    grp_fu_864_ce;
wire    ap_CS_fsm_state167;
wire    ap_CS_fsm_state168;
wire    ap_CS_fsm_state169;
reg    grp_fu_1240_ap_start;
wire    grp_fu_1240_ap_done;
reg    grp_fu_1341_ap_start;
wire    grp_fu_1341_ap_done;
reg    grp_fu_1704_ap_start;
wire    grp_fu_1704_ap_done;
reg    grp_fu_1716_ap_start;
wire    grp_fu_1716_ap_done;
reg    grp_fu_2053_ap_start;
wire    grp_fu_2053_ap_done;
reg    grp_fu_2053_ce;
wire    ap_CS_fsm_state204;
wire    ap_CS_fsm_state205;
wire    ap_CS_fsm_state206;
wire    ap_CS_fsm_state207;
wire    ap_CS_fsm_state208;
wire    ap_CS_fsm_state209;
wire    ap_CS_fsm_state210;
wire    ap_CS_fsm_state215;
wire    ap_CS_fsm_state216;
wire    ap_CS_fsm_state217;
wire    ap_CS_fsm_state220;
wire    ap_CS_fsm_state221;
wire    ap_CS_fsm_state222;
wire    ap_CS_fsm_state225;
wire    ap_CS_fsm_state226;
wire    ap_CS_fsm_state227;
wire    ap_CS_fsm_state233;
wire    ap_CS_fsm_state234;
wire    ap_CS_fsm_state235;
wire    ap_CS_fsm_state236;
wire    ap_CS_fsm_state237;
reg    grp_fu_2271_ap_start;
wire    grp_fu_2271_ap_done;
reg   [265:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
wire    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
wire    ap_ST_fsm_state80_blk;
wire    ap_ST_fsm_state81_blk;
wire    ap_ST_fsm_state82_blk;
wire    ap_ST_fsm_state83_blk;
wire    ap_ST_fsm_state84_blk;
wire    ap_ST_fsm_state85_blk;
wire    ap_ST_fsm_state86_blk;
wire    ap_ST_fsm_state87_blk;
wire    ap_ST_fsm_state88_blk;
wire    ap_ST_fsm_state89_blk;
wire    ap_ST_fsm_state90_blk;
wire    ap_ST_fsm_state91_blk;
wire    ap_ST_fsm_state92_blk;
wire    ap_ST_fsm_state93_blk;
wire    ap_ST_fsm_state94_blk;
wire    ap_ST_fsm_state95_blk;
wire    ap_ST_fsm_state96_blk;
wire    ap_ST_fsm_state97_blk;
wire    ap_ST_fsm_state98_blk;
wire    ap_ST_fsm_state99_blk;
wire    ap_ST_fsm_state100_blk;
wire    ap_ST_fsm_state101_blk;
wire    ap_ST_fsm_state102_blk;
wire    ap_ST_fsm_state103_blk;
wire    ap_ST_fsm_state104_blk;
wire    ap_ST_fsm_state105_blk;
wire    ap_ST_fsm_state106_blk;
wire    ap_ST_fsm_state107_blk;
wire    ap_ST_fsm_state108_blk;
wire    ap_ST_fsm_state109_blk;
wire    ap_ST_fsm_state110_blk;
wire    ap_ST_fsm_state111_blk;
wire    ap_ST_fsm_state112_blk;
wire    ap_ST_fsm_state113_blk;
wire    ap_ST_fsm_state114_blk;
wire    ap_ST_fsm_state115_blk;
wire    ap_ST_fsm_state116_blk;
wire    ap_ST_fsm_state117_blk;
wire    ap_ST_fsm_state118_blk;
wire    ap_ST_fsm_state119_blk;
wire    ap_ST_fsm_state120_blk;
wire    ap_ST_fsm_state121_blk;
wire    ap_ST_fsm_state122_blk;
wire    ap_ST_fsm_state123_blk;
wire    ap_ST_fsm_state124_blk;
wire    ap_ST_fsm_state125_blk;
wire    ap_ST_fsm_state126_blk;
wire    ap_ST_fsm_state127_blk;
wire    ap_ST_fsm_state128_blk;
wire    ap_ST_fsm_state129_blk;
wire    ap_ST_fsm_state130_blk;
wire    ap_ST_fsm_state131_blk;
wire    ap_ST_fsm_state132_blk;
wire    ap_ST_fsm_state133_blk;
wire    ap_ST_fsm_state134_blk;
wire    ap_ST_fsm_state135_blk;
wire    ap_ST_fsm_state136_blk;
wire    ap_ST_fsm_state137_blk;
wire    ap_ST_fsm_state138_blk;
wire    ap_ST_fsm_state139_blk;
wire    ap_ST_fsm_state140_blk;
wire    ap_ST_fsm_state141_blk;
wire    ap_ST_fsm_state142_blk;
wire    ap_ST_fsm_state143_blk;
wire    ap_ST_fsm_state144_blk;
wire    ap_ST_fsm_state145_blk;
wire    ap_ST_fsm_state146_blk;
wire    ap_ST_fsm_state147_blk;
wire    ap_ST_fsm_state148_blk;
wire    ap_ST_fsm_state149_blk;
wire    ap_ST_fsm_state150_blk;
wire    ap_ST_fsm_state151_blk;
wire    ap_ST_fsm_state152_blk;
wire    ap_ST_fsm_state153_blk;
wire    ap_ST_fsm_state154_blk;
wire    ap_ST_fsm_state155_blk;
wire    ap_ST_fsm_state156_blk;
wire    ap_ST_fsm_state157_blk;
wire    ap_ST_fsm_state158_blk;
wire    ap_ST_fsm_state159_blk;
wire    ap_ST_fsm_state160_blk;
wire    ap_ST_fsm_state161_blk;
wire    ap_ST_fsm_state162_blk;
wire    ap_ST_fsm_state163_blk;
wire    ap_ST_fsm_state164_blk;
wire    ap_ST_fsm_state165_blk;
wire    ap_ST_fsm_state166_blk;
wire    ap_ST_fsm_state167_blk;
wire    ap_ST_fsm_state168_blk;
wire    ap_ST_fsm_state169_blk;
wire    ap_ST_fsm_state170_blk;
wire    ap_ST_fsm_state171_blk;
wire    ap_ST_fsm_state172_blk;
wire    ap_ST_fsm_state173_blk;
wire    ap_ST_fsm_state174_blk;
wire    ap_ST_fsm_state175_blk;
wire    ap_ST_fsm_state176_blk;
wire    ap_ST_fsm_state177_blk;
wire    ap_ST_fsm_state178_blk;
wire    ap_ST_fsm_state179_blk;
wire    ap_ST_fsm_state180_blk;
wire    ap_ST_fsm_state181_blk;
wire    ap_ST_fsm_state182_blk;
wire    ap_ST_fsm_state183_blk;
wire    ap_ST_fsm_state184_blk;
wire    ap_ST_fsm_state185_blk;
wire    ap_ST_fsm_state186_blk;
wire    ap_ST_fsm_state187_blk;
wire    ap_ST_fsm_state188_blk;
wire    ap_ST_fsm_state189_blk;
wire    ap_ST_fsm_state190_blk;
wire    ap_ST_fsm_state191_blk;
wire    ap_ST_fsm_state192_blk;
wire    ap_ST_fsm_state193_blk;
wire    ap_ST_fsm_state194_blk;
wire    ap_ST_fsm_state195_blk;
wire    ap_ST_fsm_state196_blk;
wire    ap_ST_fsm_state197_blk;
wire    ap_ST_fsm_state198_blk;
wire    ap_ST_fsm_state199_blk;
wire    ap_ST_fsm_state200_blk;
wire    ap_ST_fsm_state201_blk;
wire    ap_ST_fsm_state202_blk;
wire    ap_ST_fsm_state203_blk;
wire    ap_ST_fsm_state204_blk;
wire    ap_ST_fsm_state205_blk;
wire    ap_ST_fsm_state206_blk;
wire    ap_ST_fsm_state207_blk;
wire    ap_ST_fsm_state208_blk;
wire    ap_ST_fsm_state209_blk;
wire    ap_ST_fsm_state210_blk;
wire    ap_ST_fsm_state211_blk;
wire    ap_ST_fsm_state212_blk;
reg    ap_ST_fsm_state213_blk;
wire    ap_ST_fsm_state214_blk;
wire    ap_ST_fsm_state215_blk;
wire    ap_ST_fsm_state216_blk;
wire    ap_ST_fsm_state217_blk;
wire    ap_ST_fsm_state218_blk;
wire    ap_ST_fsm_state219_blk;
wire    ap_ST_fsm_state220_blk;
wire    ap_ST_fsm_state221_blk;
wire    ap_ST_fsm_state222_blk;
wire    ap_ST_fsm_state223_blk;
wire    ap_ST_fsm_state224_blk;
wire    ap_ST_fsm_state225_blk;
wire    ap_ST_fsm_state226_blk;
wire    ap_ST_fsm_state227_blk;
wire    ap_ST_fsm_state228_blk;
wire    ap_ST_fsm_state229_blk;
wire    ap_ST_fsm_state230_blk;
wire    ap_ST_fsm_state231_blk;
reg    ap_ST_fsm_state232_blk;
wire    ap_ST_fsm_state233_blk;
wire    ap_ST_fsm_state234_blk;
wire    ap_ST_fsm_state235_blk;
wire    ap_ST_fsm_state236_blk;
wire    ap_ST_fsm_state237_blk;
wire    ap_ST_fsm_state238_blk;
wire    ap_ST_fsm_state239_blk;
wire    ap_ST_fsm_state240_blk;
wire    ap_ST_fsm_state241_blk;
wire    ap_ST_fsm_state242_blk;
wire    ap_ST_fsm_state243_blk;
wire    ap_ST_fsm_state244_blk;
wire    ap_ST_fsm_state245_blk;
wire    ap_ST_fsm_state246_blk;
wire    ap_ST_fsm_state247_blk;
wire    ap_ST_fsm_state248_blk;
wire    ap_ST_fsm_state249_blk;
wire    ap_ST_fsm_state250_blk;
wire    ap_ST_fsm_state251_blk;
reg    ap_ST_fsm_state252_blk;
wire    ap_ST_fsm_state253_blk;
wire    ap_ST_fsm_state254_blk;
reg    ap_ST_fsm_state255_blk;
wire    ap_ST_fsm_state256_blk;
wire    ap_ST_fsm_state257_blk;
wire    ap_ST_fsm_state258_blk;
wire    ap_ST_fsm_state259_blk;
wire    ap_ST_fsm_state260_blk;
wire    ap_ST_fsm_state261_blk;
reg    ap_ST_fsm_state262_blk;
wire    ap_ST_fsm_state263_blk;
reg    ap_ST_fsm_state264_blk;
reg    ap_ST_fsm_state265_blk;
reg    ap_ST_fsm_state266_blk;
wire    regslice_both_OUTPUT_r_V_data_V_U_apdone_blk;
reg    ap_block_state266;
wire    regslice_both_INPUT_r_V_data_V_U_apdone_blk;
wire   [31:0] INPUT_r_TDATA_int_regslice;
wire    INPUT_r_TVALID_int_regslice;
reg    INPUT_r_TREADY_int_regslice;
wire    regslice_both_INPUT_r_V_data_V_U_ack_in;
wire    regslice_both_INPUT_r_V_keep_V_U_apdone_blk;
wire   [3:0] INPUT_r_TKEEP_int_regslice;
wire    regslice_both_INPUT_r_V_keep_V_U_vld_out;
wire    regslice_both_INPUT_r_V_keep_V_U_ack_in;
wire    regslice_both_INPUT_r_V_strb_V_U_apdone_blk;
wire   [3:0] INPUT_r_TSTRB_int_regslice;
wire    regslice_both_INPUT_r_V_strb_V_U_vld_out;
wire    regslice_both_INPUT_r_V_strb_V_U_ack_in;
wire    regslice_both_INPUT_r_V_user_V_U_apdone_blk;
wire   [1:0] INPUT_r_TUSER_int_regslice;
wire    regslice_both_INPUT_r_V_user_V_U_vld_out;
wire    regslice_both_INPUT_r_V_user_V_U_ack_in;
wire    regslice_both_INPUT_r_V_last_V_U_apdone_blk;
wire   [0:0] INPUT_r_TLAST_int_regslice;
wire    regslice_both_INPUT_r_V_last_V_U_vld_out;
wire    regslice_both_INPUT_r_V_last_V_U_ack_in;
wire    regslice_both_INPUT_r_V_id_V_U_apdone_blk;
wire   [4:0] INPUT_r_TID_int_regslice;
wire    regslice_both_INPUT_r_V_id_V_U_vld_out;
wire    regslice_both_INPUT_r_V_id_V_U_ack_in;
wire    regslice_both_INPUT_r_V_dest_V_U_apdone_blk;
wire   [5:0] INPUT_r_TDEST_int_regslice;
wire    regslice_both_INPUT_r_V_dest_V_U_vld_out;
wire    regslice_both_INPUT_r_V_dest_V_U_ack_in;
reg    OUTPUT_r_TVALID_int_regslice;
wire    OUTPUT_r_TREADY_int_regslice;
wire    regslice_both_OUTPUT_r_V_data_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_keep_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_keep_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_keep_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_strb_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_strb_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_strb_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_user_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_user_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_user_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_last_V_U_apdone_blk;
reg   [0:0] OUTPUT_r_TLAST_int_regslice;
wire    regslice_both_OUTPUT_r_V_last_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_last_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_id_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_id_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_id_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_dest_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_dest_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_dest_V_U_vld_out;
reg    ap_condition_4073;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 266'd1;
#0 grp_sin_or_cos_double_s_fu_810_ap_start_reg = 1'b0;
end

guitar_effects_lpf_coefficients_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 441 ),
    .AddressWidth( 9 ))
lpf_coefficients_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lpf_coefficients_address0),
    .ce0(lpf_coefficients_ce0),
    .q0(lpf_coefficients_q0)
);

guitar_effects_compression_buffer_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 441 ),
    .AddressWidth( 9 ))
compression_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(compression_buffer_address0),
    .ce0(compression_buffer_ce0),
    .we0(compression_buffer_we0),
    .d0(compression_buffer_d0),
    .q0(compression_buffer_q0)
);

guitar_effects_delay_buffer_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 88200 ),
    .AddressWidth( 17 ))
delay_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(delay_buffer_address0),
    .ce0(delay_buffer_ce0),
    .we0(delay_buffer_we0),
    .d0(delay_buffer_d0),
    .q0(delay_buffer_q0)
);

guitar_effects_wah_values_buffer_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
wah_values_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(wah_values_buffer_address0),
    .ce0(wah_values_buffer_ce0),
    .we0(wah_values_buffer_we0),
    .d0(wah_values_buffer_d0),
    .q0(wah_values_buffer_q0)
);

guitar_effects_sin_or_cos_double_s grp_sin_or_cos_double_s_fu_810(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sin_or_cos_double_s_fu_810_ap_start),
    .ap_done(grp_sin_or_cos_double_s_fu_810_ap_done),
    .ap_idle(grp_sin_or_cos_double_s_fu_810_ap_idle),
    .ap_ready(grp_sin_or_cos_double_s_fu_810_ap_ready),
    .t_in(x_assign_reg_2842),
    .ap_return(grp_sin_or_cos_double_s_fu_810_ap_return)
);

guitar_effects_control_r_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_R_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_R_DATA_WIDTH ))
control_r_s_axi_U(
    .AWVALID(s_axi_control_r_AWVALID),
    .AWREADY(s_axi_control_r_AWREADY),
    .AWADDR(s_axi_control_r_AWADDR),
    .WVALID(s_axi_control_r_WVALID),
    .WREADY(s_axi_control_r_WREADY),
    .WDATA(s_axi_control_r_WDATA),
    .WSTRB(s_axi_control_r_WSTRB),
    .ARVALID(s_axi_control_r_ARVALID),
    .ARREADY(s_axi_control_r_ARREADY),
    .ARADDR(s_axi_control_r_ARADDR),
    .RVALID(s_axi_control_r_RVALID),
    .RREADY(s_axi_control_r_RREADY),
    .RDATA(s_axi_control_r_RDATA),
    .RRESP(s_axi_control_r_RRESP),
    .BVALID(s_axi_control_r_BVALID),
    .BREADY(s_axi_control_r_BREADY),
    .BRESP(s_axi_control_r_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .axilite_out(axilite_out_local_4_reg_775),
    .axilite_out_ap_vld(axilite_out_ap_vld),
    .control(control),
    .distortion_threshold(distortion_threshold),
    .distortion_clip_factor(distortion_clip_factor),
    .compression_min_threshold(compression_min_threshold),
    .compression_max_threshold(compression_max_threshold),
    .compression_zero_threshold(compression_zero_threshold),
    .delay_mult(delay_mult),
    .delay_samples(delay_samples),
    .tempo(tempo),
    .wah_coeffs(wah_coeffs),
    .debug_output(debug_output_local_0_fu_352),
    .debug_output_ap_vld(debug_output_ap_vld)
);

guitar_effects_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .USER_RFIFONUM_WIDTH( 10 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .USER_DW( 16 ),
    .USER_AW( 64 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARLEN(gmem_ARLEN),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RFIFONUM(gmem_RFIFONUM),
    .I_AWVALID(1'b0),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWLEN(32'd0),
    .I_WVALID(1'b0),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(16'd0),
    .I_WSTRB(2'd0),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(1'b0)
);

guitar_effects_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U33(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_867),
    .din1(reg_874),
    .ce(1'b1),
    .dout(grp_fu_827_p2)
);

guitar_effects_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U34(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_867),
    .din1(grp_fu_831_p1),
    .ce(1'b1),
    .dout(grp_fu_831_p2)
);

guitar_effects_fdiv_32ns_32ns_32_12_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_12_no_dsp_1_U35(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_835_p0),
    .din1(reg_867),
    .ce(1'b1),
    .dout(grp_fu_835_p2)
);

guitar_effects_sitofp_32ns_32_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32ns_32_4_no_dsp_1_U36(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_839_p0),
    .ce(grp_fu_839_ce),
    .dout(grp_fu_839_p1)
);

guitar_effects_sitofp_32ns_32_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32ns_32_4_no_dsp_1_U37(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(compression_min_threshold_read_reg_2420),
    .ce(grp_fu_842_ce),
    .dout(grp_fu_842_p1)
);

guitar_effects_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U38(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_884),
    .din1(64'd4602678819172646912),
    .ce(1'b1),
    .dout(grp_fu_847_p2)
);

guitar_effects_dmul_64ns_64ns_64_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_max_dsp_1_U39(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_852_p0),
    .din1(grp_fu_852_p1),
    .ce(1'b1),
    .dout(grp_fu_852_p2)
);

guitar_effects_ddiv_64ns_64ns_64_31_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_31_no_dsp_1_U40(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_884),
    .din1(64'd4680797471058690048),
    .ce(1'b1),
    .dout(grp_fu_859_p2)
);

guitar_effects_sitodp_32ns_64_5_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sitodp_32ns_64_5_no_dsp_1_U41(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_864_p0),
    .ce(grp_fu_864_ce),
    .dout(grp_fu_864_p1)
);

guitar_effects_mul_32s_8s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 40 ))
mul_32s_8s_40_1_1_U42(
    .din0(r_V_reg_2644),
    .din1(r_V_49_fu_1144_p1),
    .dout(r_V_49_fu_1144_p2)
);

guitar_effects_srem_32ns_10ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 32 ))
srem_32ns_10ns_32_36_seq_1_U43(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_1240_ap_start),
    .done(grp_fu_1240_ap_done),
    .din0(grp_fu_1240_p0),
    .din1(grp_fu_1240_p1),
    .ce(1'b1),
    .dout(grp_fu_1240_p2)
);

guitar_effects_mul_32s_8s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 40 ))
mul_32s_8s_40_1_1_U44(
    .din0(r_V_21_reg_2649),
    .din1(r_V_48_fu_1249_p1),
    .dout(r_V_48_fu_1249_p2)
);

guitar_effects_srem_11ns_10ns_9_15_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 15 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 9 ))
srem_11ns_10ns_9_15_seq_1_U45(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_1341_ap_start),
    .done(grp_fu_1341_ap_done),
    .din0(grp_fu_1341_p0),
    .din1(grp_fu_1341_p1),
    .ce(1'b1),
    .dout(grp_fu_1341_p2)
);

guitar_effects_srem_32ns_18ns_17_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 17 ))
srem_32ns_18ns_17_36_seq_1_U46(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_1704_ap_start),
    .done(grp_fu_1704_ap_done),
    .din0(grp_fu_1704_p0),
    .din1(grp_fu_1704_p1),
    .ce(1'b1),
    .dout(grp_fu_1704_p2)
);

guitar_effects_srem_32ns_18ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 32 ))
srem_32ns_18ns_32_36_seq_1_U47(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_1716_ap_start),
    .done(grp_fu_1716_ap_done),
    .din0(grp_fu_1716_p0),
    .din1(grp_fu_1716_p1),
    .ce(1'b1),
    .dout(grp_fu_1716_p2)
);

guitar_effects_srem_32ns_8ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 32 ))
srem_32ns_8ns_32_36_seq_1_U48(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_2053_ap_start),
    .done(grp_fu_2053_ap_done),
    .din0(grp_fu_2053_p0),
    .din1(grp_fu_2053_p1),
    .ce(grp_fu_2053_ce),
    .dout(grp_fu_2053_p2)
);

guitar_effects_mul_32s_9ns_41_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 41 ))
mul_32s_9ns_41_1_1_U49(
    .din0(result_V_21_reg_2857),
    .din1(mul_ln234_fu_2202_p1),
    .dout(mul_ln234_fu_2202_p2)
);

guitar_effects_srem_9ns_8ns_7_13_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 7 ))
srem_9ns_8ns_7_13_seq_1_U50(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_2271_ap_start),
    .done(grp_fu_2271_ap_done),
    .din0(grp_fu_2271_p0),
    .din1(grp_fu_2271_p1),
    .ce(1'b1),
    .dout(grp_fu_2271_p2)
);

guitar_effects_mul_32s_16s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 48 ))
mul_32s_16s_48_1_1_U51(
    .din0(r_V_46_reg_2907),
    .din1(reg_891),
    .dout(r_V_50_fu_2297_p2)
);

guitar_effects_regslice_both #(
    .DataWidth( 32 ))
regslice_both_INPUT_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TDATA),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_data_V_U_ack_in),
    .data_out(INPUT_r_TDATA_int_regslice),
    .vld_out(INPUT_r_TVALID_int_regslice),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_data_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 4 ))
regslice_both_INPUT_r_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TKEEP),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_keep_V_U_ack_in),
    .data_out(INPUT_r_TKEEP_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_keep_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_keep_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 4 ))
regslice_both_INPUT_r_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TSTRB),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_strb_V_U_ack_in),
    .data_out(INPUT_r_TSTRB_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_strb_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_strb_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 2 ))
regslice_both_INPUT_r_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TUSER),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_user_V_U_ack_in),
    .data_out(INPUT_r_TUSER_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_user_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_user_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 1 ))
regslice_both_INPUT_r_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TLAST),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_last_V_U_ack_in),
    .data_out(INPUT_r_TLAST_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_last_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_last_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 5 ))
regslice_both_INPUT_r_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TID),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_id_V_U_ack_in),
    .data_out(INPUT_r_TID_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_id_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_id_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 6 ))
regslice_both_INPUT_r_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TDEST),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_dest_V_U_ack_in),
    .data_out(INPUT_r_TDEST_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_dest_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_dest_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 32 ))
regslice_both_OUTPUT_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_int_8_reg_796),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(OUTPUT_r_TREADY_int_regslice),
    .data_out(OUTPUT_r_TDATA),
    .vld_out(regslice_both_OUTPUT_r_V_data_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_data_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 4 ))
regslice_both_OUTPUT_r_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_keep_V_reg_2592),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_keep_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TKEEP),
    .vld_out(regslice_both_OUTPUT_r_V_keep_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_keep_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 4 ))
regslice_both_OUTPUT_r_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_strb_V_reg_2597),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_strb_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TSTRB),
    .vld_out(regslice_both_OUTPUT_r_V_strb_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_strb_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 2 ))
regslice_both_OUTPUT_r_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_user_V_reg_2602),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_user_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TUSER),
    .vld_out(regslice_both_OUTPUT_r_V_user_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_user_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 1 ))
regslice_both_OUTPUT_r_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(OUTPUT_r_TLAST_int_regslice),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_last_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TLAST),
    .vld_out(regslice_both_OUTPUT_r_V_last_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_last_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 5 ))
regslice_both_OUTPUT_r_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_id_V_reg_2611),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_id_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TID),
    .vld_out(regslice_both_OUTPUT_r_V_id_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_id_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 6 ))
regslice_both_OUTPUT_r_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_dest_V_reg_2616),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_dest_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TDEST),
    .vld_out(regslice_both_OUTPUT_r_V_dest_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_sin_or_cos_double_s_fu_810_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state212)) begin
            grp_sin_or_cos_double_s_fu_810_ap_start_reg <= 1'b1;
        end else if ((grp_sin_or_cos_double_s_fu_810_ap_ready == 1'b1)) begin
            grp_sin_or_cos_double_s_fu_810_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3554_fu_972_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        axilite_out_local_0_fu_356 <= 32'd0;
    end else if ((~((1'b1 == ap_block_state264_io) | ((tmp_last_V_reg_2607 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2607 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice))) & (tmp_last_V_reg_2607 == 1'd0) & (1'b1 == ap_CS_fsm_state264))) begin
        axilite_out_local_0_fu_356 <= axilite_out_local_4_reg_775;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln143_fu_1126_p2 == 1'd0) & (icmp_ln141_fu_1121_p2 == 1'd0) & (tmp_reg_2528 == 1'd1) & (1'b1 == ap_CS_fsm_state14) & (1'b1 == INPUT_r_TVALID_int_regslice))) begin
        axilite_out_local_1_reg_600 <= or_ln96_fu_1115_p2;
    end else if ((((icmp_ln143_reg_2640 == 1'd1) & (icmp_ln141_reg_2636 == 1'd0) & (tmp_reg_2528 == 1'd1) & (1'b1 == ap_CS_fsm_state16)) | ((icmp_ln141_reg_2636 == 1'd1) & (tmp_reg_2528 == 1'd1) & (1'b1 == ap_CS_fsm_state16)))) begin
        axilite_out_local_1_reg_600 <= or_ln96_reg_2626;
    end else if (((tmp_reg_2528 == 1'd0) & (1'b1 == ap_CS_fsm_state14) & (1'b1 == INPUT_r_TVALID_int_regslice))) begin
        axilite_out_local_1_reg_600 <= axilite_out_local_0_fu_356;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln179_fu_1359_p2 == 1'd0) & (icmp_ln165_fu_1320_p2 == 1'd1) & (1'd0 == and_ln188_1_fu_1386_p2) & (1'b1 == ap_CS_fsm_state53)) | ((icmp_ln179_reg_2744 == 1'd0) & (tmp_11_reg_2532 == 1'd1) & (1'd1 == and_ln188_1_reg_2752) & (1'b1 == ap_CS_fsm_state101)) | ((icmp_ln189_fu_1364_p2 == 1'd0) & (icmp_ln179_fu_1359_p2 == 1'd1) & (icmp_ln165_fu_1320_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53)) | ((icmp_ln189_reg_2748 == 1'd1) & (icmp_ln179_reg_2744 == 1'd1) & (tmp_11_reg_2532 == 1'd1) & (1'b1 == ap_CS_fsm_state101)))) begin
        axilite_out_local_2_reg_665 <= or_ln101_reg_2696;
    end else if (((tmp_11_reg_2532 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        axilite_out_local_2_reg_665 <= ap_phi_mux_axilite_out_local_1_phi_fu_603_p8;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_13_reg_2536 == 1'd1) & (1'b1 == ap_CS_fsm_state166))) begin
        axilite_out_local_3_reg_718 <= or_ln106_fu_1994_p2;
    end else if (((tmp_13_reg_2536 == 1'd0) & (1'b1 == ap_CS_fsm_state101))) begin
        axilite_out_local_3_reg_718 <= ap_phi_mux_axilite_out_local_2_phi_fu_668_p10;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln23_reg_2449 == 1'd0) & (1'b1 == ap_CS_fsm_state166))) begin
        axilite_out_local_4_reg_775 <= ap_phi_mux_axilite_out_local_3_phi_fu_721_p4;
    end else if ((1'b1 == ap_CS_fsm_state263)) begin
        axilite_out_local_4_reg_775 <= or_ln111_reg_2873;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3554_fu_972_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        compression_buffer_index_fu_348 <= 32'd0;
    end else if ((((icmp_ln179_fu_1359_p2 == 1'd0) & (icmp_ln165_fu_1320_p2 == 1'd1) & (1'd1 == and_ln188_1_fu_1386_p2) & (1'b1 == ap_CS_fsm_state53)) | ((icmp_ln179_fu_1359_p2 == 1'd0) & (icmp_ln165_fu_1320_p2 == 1'd1) & (1'd0 == and_ln188_1_fu_1386_p2) & (1'b1 == ap_CS_fsm_state53)) | ((icmp_ln189_fu_1364_p2 == 1'd1) & (icmp_ln179_fu_1359_p2 == 1'd1) & (icmp_ln165_fu_1320_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53)) | ((icmp_ln189_fu_1364_p2 == 1'd0) & (icmp_ln179_fu_1359_p2 == 1'd1) & (icmp_ln165_fu_1320_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53)))) begin
        compression_buffer_index_fu_348 <= compression_buffer_index_1_reg_2708;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3554_fu_972_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        current_sample_1_fu_332 <= 32'd0;
    end else if ((~((1'b1 == ap_block_state264_io) | ((tmp_last_V_reg_2607 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2607 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice))) & (tmp_last_V_reg_2607 == 1'd0) & (1'b1 == ap_CS_fsm_state264))) begin
        current_sample_1_fu_332 <= current_sample_reg_2621;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        debug_output_local_0_fu_352 <= gmem_addr_read_reg_2546;
    end else if ((1'b1 == ap_CS_fsm_state263)) begin
        debug_output_local_0_fu_352 <= reg_891;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3554_fu_972_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        delay_buffer_index_fu_344 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state156)) begin
        delay_buffer_index_fu_344 <= grp_fu_1716_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3618_fu_912_p2 == 1'd1))) begin
        empty_72_fu_324 <= 17'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond3565_fu_942_p2 == 1'd0))) begin
        empty_72_fu_324 <= empty_74_fu_948_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond3565_fu_942_p2 == 1'd1))) begin
        empty_75_fu_328 <= 7'd0;
    end else if (((exitcond3554_fu_972_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        empty_75_fu_328 <= empty_77_fu_978_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3554_fu_972_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        empty_78_fu_336 <= 32'd0;
    end else if ((~((1'b1 == ap_block_state264_io) | ((tmp_last_V_reg_2607 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2607 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice))) & (tmp_last_V_reg_2607 == 1'd0) & (1'b1 == ap_CS_fsm_state264))) begin
        empty_78_fu_336 <= empty_87_reg_786;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln143_fu_1126_p2 == 1'd0) & (icmp_ln141_fu_1121_p2 == 1'd0) & (tmp_reg_2528 == 1'd1) & (1'b1 == ap_CS_fsm_state14) & (1'b1 == INPUT_r_TVALID_int_regslice))) begin
        empty_80_reg_614 <= or_ln96_fu_1115_p2;
    end else if ((((icmp_ln143_reg_2640 == 1'd1) & (icmp_ln141_reg_2636 == 1'd0) & (tmp_reg_2528 == 1'd1) & (1'b1 == ap_CS_fsm_state16)) | ((icmp_ln141_reg_2636 == 1'd1) & (tmp_reg_2528 == 1'd1) & (1'b1 == ap_CS_fsm_state16)))) begin
        empty_80_reg_614 <= or_ln96_reg_2626;
    end else if (((tmp_reg_2528 == 1'd0) & (1'b1 == ap_CS_fsm_state14) & (1'b1 == INPUT_r_TVALID_int_regslice))) begin
        empty_80_reg_614 <= empty_78_fu_336;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        empty_81_reg_653 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        empty_81_reg_653 <= result_V_18_fu_1548_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln179_fu_1359_p2 == 1'd0) & (icmp_ln165_fu_1320_p2 == 1'd1) & (1'd0 == and_ln188_1_fu_1386_p2) & (1'b1 == ap_CS_fsm_state53)) | ((icmp_ln179_reg_2744 == 1'd0) & (tmp_11_reg_2532 == 1'd1) & (1'd1 == and_ln188_1_reg_2752) & (1'b1 == ap_CS_fsm_state101)) | ((icmp_ln189_fu_1364_p2 == 1'd0) & (icmp_ln179_fu_1359_p2 == 1'd1) & (icmp_ln165_fu_1320_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53)) | ((icmp_ln189_reg_2748 == 1'd1) & (icmp_ln179_reg_2744 == 1'd1) & (tmp_11_reg_2532 == 1'd1) & (1'b1 == ap_CS_fsm_state101)))) begin
        empty_83_reg_682 <= or_ln101_reg_2696;
    end else if (((tmp_11_reg_2532 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        empty_83_reg_682 <= ap_phi_mux_empty_80_phi_fu_617_p8;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_13_reg_2536 == 1'd1) & (1'b1 == ap_CS_fsm_state166))) begin
        empty_84_reg_729 <= or_ln106_fu_1994_p2;
    end else if (((tmp_13_reg_2536 == 1'd0) & (1'b1 == ap_CS_fsm_state101))) begin
        empty_84_reg_729 <= ap_phi_mux_empty_83_phi_fu_685_p10;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln23_reg_2449 == 1'd0) & (1'b1 == ap_CS_fsm_state166))) begin
        empty_87_reg_786 <= ap_phi_mux_empty_84_phi_fu_732_p4;
    end else if ((1'b1 == ap_CS_fsm_state263)) begin
        empty_87_reg_786 <= or_ln111_reg_2873;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_fu_308 <= 9'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond3618_fu_912_p2 == 1'd0))) begin
        empty_fu_308 <= empty_71_fu_918_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state238)) begin
        i_7_reg_752 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state254)) begin
        i_7_reg_752 <= add_ln234_1_reg_2892;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        i_reg_642 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        i_reg_642 <= add_ln165_reg_2724;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln179_reg_2744 == 1'd0) & (tmp_11_reg_2532 == 1'd1) & (1'd1 == and_ln188_1_reg_2752) & (1'b1 == ap_CS_fsm_state101))) begin
        tmp_int_3_reg_699 <= result_V_reg_2781;
    end else if ((((icmp_ln179_fu_1359_p2 == 1'd0) & (icmp_ln165_fu_1320_p2 == 1'd1) & (1'd0 == and_ln188_1_fu_1386_p2) & (1'b1 == ap_CS_fsm_state53)) | ((icmp_ln189_fu_1364_p2 == 1'd0) & (icmp_ln179_fu_1359_p2 == 1'd1) & (icmp_ln165_fu_1320_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53)))) begin
        tmp_int_3_reg_699 <= tmp_int_7_reg_628;
    end else if (((icmp_ln189_reg_2748 == 1'd1) & (icmp_ln179_reg_2744 == 1'd1) & (tmp_11_reg_2532 == 1'd1) & (1'b1 == ap_CS_fsm_state101))) begin
        tmp_int_3_reg_699 <= result_V_19_reg_2801;
    end else if (((tmp_11_reg_2532 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        tmp_int_3_reg_699 <= ap_phi_mux_tmp_int_7_phi_fu_631_p8;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln143_reg_2640 == 1'd1) & (icmp_ln141_reg_2636 == 1'd0) & (tmp_reg_2528 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        tmp_int_7_reg_628 <= result_1_fu_1194_p2;
    end else if (((icmp_ln141_reg_2636 == 1'd1) & (tmp_reg_2528 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        tmp_int_7_reg_628 <= result_fu_1225_p2;
    end else if ((((icmp_ln143_fu_1126_p2 == 1'd0) & (icmp_ln141_fu_1121_p2 == 1'd0) & (tmp_reg_2528 == 1'd1) & (1'b1 == ap_CS_fsm_state14) & (1'b1 == INPUT_r_TVALID_int_regslice)) | ((tmp_reg_2528 == 1'd0) & (1'b1 == ap_CS_fsm_state14) & (1'b1 == INPUT_r_TVALID_int_regslice)))) begin
        tmp_int_7_reg_628 <= INPUT_r_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln23_reg_2449 == 1'd0) & (1'b1 == ap_CS_fsm_state166))) begin
        tmp_int_8_reg_796 <= ap_phi_mux_tmp_int_phi_fu_744_p4;
    end else if ((1'b1 == ap_CS_fsm_state263)) begin
        tmp_int_8_reg_796 <= result_2_reg_763;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_13_reg_2536 == 1'd1) & (1'b1 == ap_CS_fsm_state166))) begin
        tmp_int_reg_740 <= output_fu_2021_p2;
    end else if (((tmp_13_reg_2536 == 1'd0) & (1'b1 == ap_CS_fsm_state101))) begin
        tmp_int_reg_740 <= ap_phi_mux_tmp_int_3_phi_fu_702_p10;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3554_fu_972_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        wah_buffer_index_fu_340 <= 32'd0;
    end else if (((icmp_ln234_fu_2250_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state239))) begin
        wah_buffer_index_fu_340 <= wah_buffer_index_1_reg_2879;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state223)) begin
        add5_i_reg_2852 <= grp_fu_847_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        add_ln165_reg_2724 <= add_ln165_fu_1326_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state239)) begin
        add_ln234_1_reg_2892 <= add_ln234_1_fu_2256_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln179_fu_1359_p2 == 1'd0) & (icmp_ln165_fu_1320_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
        and_ln188_1_reg_2752 <= and_ln188_1_fu_1386_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        compression_buffer_index_1_reg_2708 <= grp_fu_1240_p2;
        or_ln101_reg_2696[1 : 0] <= or_ln101_fu_1301_p2[1 : 0];
or_ln101_reg_2696[31 : 3] <= or_ln101_fu_1301_p2[31 : 3];
        sext_ln65_reg_2716 <= sext_ln65_fu_1311_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        compression_buffer_load_reg_2766 <= compression_buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        compression_max_threshold_read_reg_2414 <= compression_max_threshold;
        compression_min_threshold_read_reg_2420 <= compression_min_threshold;
        compression_zero_threshold_read_reg_2409 <= compression_zero_threshold;
        control_read_reg_2442 <= control;
        delay_mult_read_reg_2404 <= delay_mult;
        delay_samples_read_reg_2399 <= delay_samples;
        distortion_clip_factor_read_reg_2427 <= distortion_clip_factor;
        distortion_threshold_read_reg_2432 <= distortion_threshold;
        tempo_read_reg_2394 <= tempo;
        trunc_ln23_reg_2449 <= trunc_ln23_fu_895_p1;
        wah_coeffs_read_reg_2388 <= wah_coeffs;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        conv18_i_reg_2567 <= grp_fu_839_p1;
        conv2_i_reg_2562 <= grp_fu_864_p1;
        conv30_i_reg_2572 <= grp_fu_842_p1;
        conv7_i_i_i_reg_2556 <= conv7_i_i_i_fu_1065_p1;
        negative_threshold_reg_2551 <= negative_threshold_fu_1060_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state170)) begin
        conv_i2_reg_2832 <= grp_fu_864_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln165_fu_1320_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
        current_level_reg_2739 <= current_level_fu_1352_p3;
        icmp_ln179_reg_2744 <= icmp_ln179_fu_1359_p2;
        icmp_ln189_reg_2748 <= icmp_ln189_fu_1364_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        current_sample_reg_2621 <= current_sample_fu_1109_p2;
        tmp_dest_V_reg_2616 <= INPUT_r_TDEST_int_regslice;
        tmp_id_V_reg_2611 <= INPUT_r_TID_int_regslice;
        tmp_keep_V_reg_2592 <= INPUT_r_TKEEP_int_regslice;
        tmp_last_V_reg_2607 <= INPUT_r_TLAST_int_regslice;
        tmp_strb_V_reg_2597 <= INPUT_r_TSTRB_int_regslice;
        tmp_user_V_reg_2602 <= INPUT_r_TUSER_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state165)) begin
        data_V_3_reg_2816 <= data_V_3_fu_1876_p1;
        val_3_reg_2821 <= val_3_fu_1986_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        dc_reg_2771 <= grp_fu_827_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_13_reg_2536 == 1'd1) & (1'b1 == ap_CS_fsm_state101))) begin
        delay_buffer_index_load_reg_2786 <= delay_buffer_index_fu_344;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state157)) begin
        delay_buffer_load_reg_2811 <= delay_buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state231)) begin
        gmem_addr_1_reg_2867 <= sext_ln234_fu_2226_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        gmem_addr_read_reg_2546 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        icmp_ln1049_1_reg_2666 <= icmp_ln1049_1_fu_1163_p2;
        r_V_49_reg_2654 <= r_V_49_fu_1144_p2;
        ret_V_9_cast_reg_2659 <= {{r_V_49_fu_1144_p2[38:7]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        icmp_ln1049_reg_2691 <= icmp_ln1049_fu_1268_p2;
        r_V_48_reg_2679 <= r_V_48_fu_1249_p2;
        ret_V_cast_reg_2684 <= {{r_V_48_fu_1249_p2[38:7]}};
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_2528 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        icmp_ln141_reg_2636 <= icmp_ln141_fu_1121_p2;
        or_ln96_reg_2626[2 : 0] <= or_ln96_fu_1115_p2[2 : 0];
or_ln96_reg_2626[31 : 4] <= or_ln96_fu_1115_p2[31 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln141_fu_1121_p2 == 1'd0) & (tmp_reg_2528 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        icmp_ln143_reg_2640 <= icmp_ln143_fu_1126_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        lpf_coefficients_load_reg_2756 <= lpf_coefficients_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state230)) begin
        mul_ln234_reg_2862 <= mul_ln234_fu_2202_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state238)) begin
        or_ln111_reg_2873[31 : 1] <= or_ln111_fu_2236_p2[31 : 1];
        sext_ln77_reg_2884 <= sext_ln77_fu_2246_p1;
        wah_buffer_index_1_reg_2879 <= grp_fu_2053_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln141_fu_1121_p2 == 1'd1) & (tmp_reg_2528 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        r_V_21_reg_2649 <= r_V_21_fu_1136_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state252)) begin
        r_V_46_reg_2907 <= wah_values_buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state253)) begin
        r_V_50_reg_2912 <= r_V_50_fu_2297_p2;
        ret_V_12_reg_2917 <= {{r_V_50_fu_2297_p2[47:32]}};
        trunc_ln1049_2_reg_2924 <= trunc_ln1049_2_fu_2313_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln143_fu_1126_p2 == 1'd1) & (icmp_ln141_fu_1121_p2 == 1'd0) & (tmp_reg_2528 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        r_V_reg_2644 <= r_V_fu_1131_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state161) | (1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state72))) begin
        reg_867 <= grp_fu_839_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state164) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state75))) begin
        reg_874 <= grp_fu_831_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state96))) begin
        reg_879 <= grp_fu_835_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state228) | (1'b1 == ap_CS_fsm_state218) | (1'b1 == ap_CS_fsm_state180) | (1'b1 == ap_CS_fsm_state175))) begin
        reg_884 <= grp_fu_852_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state262) | (1'b1 == ap_CS_fsm_state252))) begin
        reg_891 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state254)) begin
        result_2_reg_763 <= result_3_fu_2352_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state121)) begin
        result_V_19_reg_2801 <= result_V_19_fu_1854_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state229)) begin
        result_V_21_reg_2857 <= result_V_21_fu_2191_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state100)) begin
        result_V_reg_2781 <= result_V_fu_1688_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3554_fu_972_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_11_reg_2532 <= control_read_reg_2442[32'd2];
        tmp_13_reg_2536 <= control_read_reg_2442[32'd1];
        tmp_reg_2528 <= control_read_reg_2442[32'd3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state213)) begin
        tmp_2_reg_2847 <= grp_sin_or_cos_double_s_fu_810_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state211)) begin
        x_assign_reg_2842 <= grp_fu_859_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        INPUT_r_TDATA_blk_n = INPUT_r_TVALID_int_regslice;
    end else begin
        INPUT_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'b1 == INPUT_r_TVALID_int_regslice))) begin
        INPUT_r_TREADY_int_regslice = 1'b1;
    end else begin
        INPUT_r_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state266) | (1'b1 == ap_CS_fsm_state265) | ((tmp_last_V_reg_2607 == 1'd1) & (1'b1 == ap_CS_fsm_state264)) | ((tmp_last_V_reg_2607 == 1'd0) & (1'b1 == ap_CS_fsm_state264)))) begin
        OUTPUT_r_TDATA_blk_n = OUTPUT_r_TREADY_int_regslice;
    end else begin
        OUTPUT_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_4073)) begin
        if ((tmp_last_V_reg_2607 == 1'd1)) begin
            OUTPUT_r_TLAST_int_regslice = 1'd1;
        end else if ((tmp_last_V_reg_2607 == 1'd0)) begin
            OUTPUT_r_TLAST_int_regslice = 1'd0;
        end else begin
            OUTPUT_r_TLAST_int_regslice = 'bx;
        end
    end else begin
        OUTPUT_r_TLAST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state264_io) | ((tmp_last_V_reg_2607 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2607 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice))) & (tmp_last_V_reg_2607 == 1'd1) & (1'b1 == ap_CS_fsm_state264)) | (~((1'b1 == ap_block_state264_io) | ((tmp_last_V_reg_2607 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2607 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice))) & (tmp_last_V_reg_2607 == 1'd0) & (1'b1 == ap_CS_fsm_state264)))) begin
        OUTPUT_r_TVALID_int_regslice = 1'b1;
    end else begin
        OUTPUT_r_TVALID_int_regslice = 1'b0;
    end
end

assign ap_ST_fsm_state100_blk = 1'b0;

assign ap_ST_fsm_state101_blk = 1'b0;

assign ap_ST_fsm_state102_blk = 1'b0;

assign ap_ST_fsm_state103_blk = 1'b0;

assign ap_ST_fsm_state104_blk = 1'b0;

assign ap_ST_fsm_state105_blk = 1'b0;

assign ap_ST_fsm_state106_blk = 1'b0;

assign ap_ST_fsm_state107_blk = 1'b0;

assign ap_ST_fsm_state108_blk = 1'b0;

assign ap_ST_fsm_state109_blk = 1'b0;

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state110_blk = 1'b0;

assign ap_ST_fsm_state111_blk = 1'b0;

assign ap_ST_fsm_state112_blk = 1'b0;

assign ap_ST_fsm_state113_blk = 1'b0;

assign ap_ST_fsm_state114_blk = 1'b0;

assign ap_ST_fsm_state115_blk = 1'b0;

assign ap_ST_fsm_state116_blk = 1'b0;

assign ap_ST_fsm_state117_blk = 1'b0;

assign ap_ST_fsm_state118_blk = 1'b0;

assign ap_ST_fsm_state119_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state120_blk = 1'b0;

assign ap_ST_fsm_state121_blk = 1'b0;

assign ap_ST_fsm_state122_blk = 1'b0;

assign ap_ST_fsm_state123_blk = 1'b0;

assign ap_ST_fsm_state124_blk = 1'b0;

assign ap_ST_fsm_state125_blk = 1'b0;

assign ap_ST_fsm_state126_blk = 1'b0;

assign ap_ST_fsm_state127_blk = 1'b0;

assign ap_ST_fsm_state128_blk = 1'b0;

assign ap_ST_fsm_state129_blk = 1'b0;

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

assign ap_ST_fsm_state130_blk = 1'b0;

assign ap_ST_fsm_state131_blk = 1'b0;

assign ap_ST_fsm_state132_blk = 1'b0;

assign ap_ST_fsm_state133_blk = 1'b0;

assign ap_ST_fsm_state134_blk = 1'b0;

assign ap_ST_fsm_state135_blk = 1'b0;

assign ap_ST_fsm_state136_blk = 1'b0;

assign ap_ST_fsm_state137_blk = 1'b0;

assign ap_ST_fsm_state138_blk = 1'b0;

assign ap_ST_fsm_state139_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state140_blk = 1'b0;

assign ap_ST_fsm_state141_blk = 1'b0;

assign ap_ST_fsm_state142_blk = 1'b0;

assign ap_ST_fsm_state143_blk = 1'b0;

assign ap_ST_fsm_state144_blk = 1'b0;

assign ap_ST_fsm_state145_blk = 1'b0;

assign ap_ST_fsm_state146_blk = 1'b0;

assign ap_ST_fsm_state147_blk = 1'b0;

assign ap_ST_fsm_state148_blk = 1'b0;

assign ap_ST_fsm_state149_blk = 1'b0;

always @ (*) begin
    if ((1'b0 == INPUT_r_TVALID_int_regslice)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

assign ap_ST_fsm_state150_blk = 1'b0;

assign ap_ST_fsm_state151_blk = 1'b0;

assign ap_ST_fsm_state152_blk = 1'b0;

assign ap_ST_fsm_state153_blk = 1'b0;

assign ap_ST_fsm_state154_blk = 1'b0;

assign ap_ST_fsm_state155_blk = 1'b0;

assign ap_ST_fsm_state156_blk = 1'b0;

assign ap_ST_fsm_state157_blk = 1'b0;

assign ap_ST_fsm_state158_blk = 1'b0;

assign ap_ST_fsm_state159_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state160_blk = 1'b0;

assign ap_ST_fsm_state161_blk = 1'b0;

assign ap_ST_fsm_state162_blk = 1'b0;

assign ap_ST_fsm_state163_blk = 1'b0;

assign ap_ST_fsm_state164_blk = 1'b0;

assign ap_ST_fsm_state165_blk = 1'b0;

assign ap_ST_fsm_state166_blk = 1'b0;

assign ap_ST_fsm_state167_blk = 1'b0;

assign ap_ST_fsm_state168_blk = 1'b0;

assign ap_ST_fsm_state169_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state170_blk = 1'b0;

assign ap_ST_fsm_state171_blk = 1'b0;

assign ap_ST_fsm_state172_blk = 1'b0;

assign ap_ST_fsm_state173_blk = 1'b0;

assign ap_ST_fsm_state174_blk = 1'b0;

assign ap_ST_fsm_state175_blk = 1'b0;

assign ap_ST_fsm_state176_blk = 1'b0;

assign ap_ST_fsm_state177_blk = 1'b0;

assign ap_ST_fsm_state178_blk = 1'b0;

assign ap_ST_fsm_state179_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state180_blk = 1'b0;

assign ap_ST_fsm_state181_blk = 1'b0;

assign ap_ST_fsm_state182_blk = 1'b0;

assign ap_ST_fsm_state183_blk = 1'b0;

assign ap_ST_fsm_state184_blk = 1'b0;

assign ap_ST_fsm_state185_blk = 1'b0;

assign ap_ST_fsm_state186_blk = 1'b0;

assign ap_ST_fsm_state187_blk = 1'b0;

assign ap_ST_fsm_state188_blk = 1'b0;

assign ap_ST_fsm_state189_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state190_blk = 1'b0;

assign ap_ST_fsm_state191_blk = 1'b0;

assign ap_ST_fsm_state192_blk = 1'b0;

assign ap_ST_fsm_state193_blk = 1'b0;

assign ap_ST_fsm_state194_blk = 1'b0;

assign ap_ST_fsm_state195_blk = 1'b0;

assign ap_ST_fsm_state196_blk = 1'b0;

assign ap_ST_fsm_state197_blk = 1'b0;

assign ap_ST_fsm_state198_blk = 1'b0;

assign ap_ST_fsm_state199_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

assign ap_ST_fsm_state1_blk = 1'b0;

assign ap_ST_fsm_state200_blk = 1'b0;

assign ap_ST_fsm_state201_blk = 1'b0;

assign ap_ST_fsm_state202_blk = 1'b0;

assign ap_ST_fsm_state203_blk = 1'b0;

assign ap_ST_fsm_state204_blk = 1'b0;

assign ap_ST_fsm_state205_blk = 1'b0;

assign ap_ST_fsm_state206_blk = 1'b0;

assign ap_ST_fsm_state207_blk = 1'b0;

assign ap_ST_fsm_state208_blk = 1'b0;

assign ap_ST_fsm_state209_blk = 1'b0;

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state210_blk = 1'b0;

assign ap_ST_fsm_state211_blk = 1'b0;

assign ap_ST_fsm_state212_blk = 1'b0;

always @ (*) begin
    if ((grp_sin_or_cos_double_s_fu_810_ap_done == 1'b0)) begin
        ap_ST_fsm_state213_blk = 1'b1;
    end else begin
        ap_ST_fsm_state213_blk = 1'b0;
    end
end

assign ap_ST_fsm_state214_blk = 1'b0;

assign ap_ST_fsm_state215_blk = 1'b0;

assign ap_ST_fsm_state216_blk = 1'b0;

assign ap_ST_fsm_state217_blk = 1'b0;

assign ap_ST_fsm_state218_blk = 1'b0;

assign ap_ST_fsm_state219_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state220_blk = 1'b0;

assign ap_ST_fsm_state221_blk = 1'b0;

assign ap_ST_fsm_state222_blk = 1'b0;

assign ap_ST_fsm_state223_blk = 1'b0;

assign ap_ST_fsm_state224_blk = 1'b0;

assign ap_ST_fsm_state225_blk = 1'b0;

assign ap_ST_fsm_state226_blk = 1'b0;

assign ap_ST_fsm_state227_blk = 1'b0;

assign ap_ST_fsm_state228_blk = 1'b0;

assign ap_ST_fsm_state229_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state230_blk = 1'b0;

assign ap_ST_fsm_state231_blk = 1'b0;

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state232_blk = 1'b1;
    end else begin
        ap_ST_fsm_state232_blk = 1'b0;
    end
end

assign ap_ST_fsm_state233_blk = 1'b0;

assign ap_ST_fsm_state234_blk = 1'b0;

assign ap_ST_fsm_state235_blk = 1'b0;

assign ap_ST_fsm_state236_blk = 1'b0;

assign ap_ST_fsm_state237_blk = 1'b0;

assign ap_ST_fsm_state238_blk = 1'b0;

assign ap_ST_fsm_state239_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state240_blk = 1'b0;

assign ap_ST_fsm_state241_blk = 1'b0;

assign ap_ST_fsm_state242_blk = 1'b0;

assign ap_ST_fsm_state243_blk = 1'b0;

assign ap_ST_fsm_state244_blk = 1'b0;

assign ap_ST_fsm_state245_blk = 1'b0;

assign ap_ST_fsm_state246_blk = 1'b0;

assign ap_ST_fsm_state247_blk = 1'b0;

assign ap_ST_fsm_state248_blk = 1'b0;

assign ap_ST_fsm_state249_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state250_blk = 1'b0;

assign ap_ST_fsm_state251_blk = 1'b0;

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state252_blk = 1'b1;
    end else begin
        ap_ST_fsm_state252_blk = 1'b0;
    end
end

assign ap_ST_fsm_state253_blk = 1'b0;

assign ap_ST_fsm_state254_blk = 1'b0;

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state255_blk = 1'b1;
    end else begin
        ap_ST_fsm_state255_blk = 1'b0;
    end
end

assign ap_ST_fsm_state256_blk = 1'b0;

assign ap_ST_fsm_state257_blk = 1'b0;

assign ap_ST_fsm_state258_blk = 1'b0;

assign ap_ST_fsm_state259_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state260_blk = 1'b0;

assign ap_ST_fsm_state261_blk = 1'b0;

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state262_blk = 1'b1;
    end else begin
        ap_ST_fsm_state262_blk = 1'b0;
    end
end

assign ap_ST_fsm_state263_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_block_state264_io) | ((tmp_last_V_reg_2607 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2607 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice)))) begin
        ap_ST_fsm_state264_blk = 1'b1;
    end else begin
        ap_ST_fsm_state264_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == OUTPUT_r_TREADY_int_regslice)) begin
        ap_ST_fsm_state265_blk = 1'b1;
    end else begin
        ap_ST_fsm_state265_blk = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_OUTPUT_r_V_data_V_U_apdone_blk == 1'b1) | (1'b0 == OUTPUT_r_TREADY_int_regslice))) begin
        ap_ST_fsm_state266_blk = 1'b1;
    end else begin
        ap_ST_fsm_state266_blk = 1'b0;
    end
end

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

assign ap_ST_fsm_state75_blk = 1'b0;

assign ap_ST_fsm_state76_blk = 1'b0;

assign ap_ST_fsm_state77_blk = 1'b0;

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state80_blk = 1'b0;

assign ap_ST_fsm_state81_blk = 1'b0;

assign ap_ST_fsm_state82_blk = 1'b0;

assign ap_ST_fsm_state83_blk = 1'b0;

assign ap_ST_fsm_state84_blk = 1'b0;

assign ap_ST_fsm_state85_blk = 1'b0;

assign ap_ST_fsm_state86_blk = 1'b0;

assign ap_ST_fsm_state87_blk = 1'b0;

assign ap_ST_fsm_state88_blk = 1'b0;

assign ap_ST_fsm_state89_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state90_blk = 1'b0;

assign ap_ST_fsm_state91_blk = 1'b0;

assign ap_ST_fsm_state92_blk = 1'b0;

assign ap_ST_fsm_state93_blk = 1'b0;

assign ap_ST_fsm_state94_blk = 1'b0;

assign ap_ST_fsm_state95_blk = 1'b0;

assign ap_ST_fsm_state96_blk = 1'b0;

assign ap_ST_fsm_state97_blk = 1'b0;

assign ap_ST_fsm_state98_blk = 1'b0;

assign ap_ST_fsm_state99_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((icmp_ln143_reg_2640 == 1'd1) & (icmp_ln141_reg_2636 == 1'd0) & (tmp_reg_2528 == 1'd1) & (1'b1 == ap_CS_fsm_state16)) | ((icmp_ln141_reg_2636 == 1'd1) & (tmp_reg_2528 == 1'd1) & (1'b1 == ap_CS_fsm_state16)))) begin
        ap_phi_mux_axilite_out_local_1_phi_fu_603_p8 = or_ln96_reg_2626;
    end else begin
        ap_phi_mux_axilite_out_local_1_phi_fu_603_p8 = axilite_out_local_1_reg_600;
    end
end

always @ (*) begin
    if ((((icmp_ln179_reg_2744 == 1'd0) & (tmp_11_reg_2532 == 1'd1) & (1'd1 == and_ln188_1_reg_2752) & (1'b1 == ap_CS_fsm_state101)) | ((icmp_ln189_reg_2748 == 1'd1) & (icmp_ln179_reg_2744 == 1'd1) & (tmp_11_reg_2532 == 1'd1) & (1'b1 == ap_CS_fsm_state101)))) begin
        ap_phi_mux_axilite_out_local_2_phi_fu_668_p10 = or_ln101_reg_2696;
    end else begin
        ap_phi_mux_axilite_out_local_2_phi_fu_668_p10 = axilite_out_local_2_reg_665;
    end
end

always @ (*) begin
    if (((tmp_13_reg_2536 == 1'd1) & (1'b1 == ap_CS_fsm_state166))) begin
        ap_phi_mux_axilite_out_local_3_phi_fu_721_p4 = or_ln106_fu_1994_p2;
    end else begin
        ap_phi_mux_axilite_out_local_3_phi_fu_721_p4 = axilite_out_local_3_reg_718;
    end
end

always @ (*) begin
    if ((((icmp_ln143_reg_2640 == 1'd1) & (icmp_ln141_reg_2636 == 1'd0) & (tmp_reg_2528 == 1'd1) & (1'b1 == ap_CS_fsm_state16)) | ((icmp_ln141_reg_2636 == 1'd1) & (tmp_reg_2528 == 1'd1) & (1'b1 == ap_CS_fsm_state16)))) begin
        ap_phi_mux_empty_80_phi_fu_617_p8 = or_ln96_reg_2626;
    end else begin
        ap_phi_mux_empty_80_phi_fu_617_p8 = empty_80_reg_614;
    end
end

always @ (*) begin
    if ((((icmp_ln179_reg_2744 == 1'd0) & (tmp_11_reg_2532 == 1'd1) & (1'd1 == and_ln188_1_reg_2752) & (1'b1 == ap_CS_fsm_state101)) | ((icmp_ln189_reg_2748 == 1'd1) & (icmp_ln179_reg_2744 == 1'd1) & (tmp_11_reg_2532 == 1'd1) & (1'b1 == ap_CS_fsm_state101)))) begin
        ap_phi_mux_empty_83_phi_fu_685_p10 = or_ln101_reg_2696;
    end else begin
        ap_phi_mux_empty_83_phi_fu_685_p10 = empty_83_reg_682;
    end
end

always @ (*) begin
    if (((tmp_13_reg_2536 == 1'd1) & (1'b1 == ap_CS_fsm_state166))) begin
        ap_phi_mux_empty_84_phi_fu_732_p4 = or_ln106_fu_1994_p2;
    end else begin
        ap_phi_mux_empty_84_phi_fu_732_p4 = empty_84_reg_729;
    end
end

always @ (*) begin
    if (((tmp_11_reg_2532 == 1'd1) & (1'b1 == ap_CS_fsm_state101))) begin
        if (((icmp_ln179_reg_2744 == 1'd0) & (1'd1 == and_ln188_1_reg_2752))) begin
            ap_phi_mux_tmp_int_3_phi_fu_702_p10 = result_V_reg_2781;
        end else if (((icmp_ln189_reg_2748 == 1'd1) & (icmp_ln179_reg_2744 == 1'd1))) begin
            ap_phi_mux_tmp_int_3_phi_fu_702_p10 = result_V_19_reg_2801;
        end else begin
            ap_phi_mux_tmp_int_3_phi_fu_702_p10 = tmp_int_3_reg_699;
        end
    end else begin
        ap_phi_mux_tmp_int_3_phi_fu_702_p10 = tmp_int_3_reg_699;
    end
end

always @ (*) begin
    if (((tmp_reg_2528 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        if (((icmp_ln143_reg_2640 == 1'd1) & (icmp_ln141_reg_2636 == 1'd0))) begin
            ap_phi_mux_tmp_int_7_phi_fu_631_p8 = result_1_fu_1194_p2;
        end else if ((icmp_ln141_reg_2636 == 1'd1)) begin
            ap_phi_mux_tmp_int_7_phi_fu_631_p8 = result_fu_1225_p2;
        end else begin
            ap_phi_mux_tmp_int_7_phi_fu_631_p8 = tmp_int_7_reg_628;
        end
    end else begin
        ap_phi_mux_tmp_int_7_phi_fu_631_p8 = tmp_int_7_reg_628;
    end
end

always @ (*) begin
    if (((tmp_13_reg_2536 == 1'd1) & (1'b1 == ap_CS_fsm_state166))) begin
        ap_phi_mux_tmp_int_phi_fu_744_p4 = output_fu_2021_p2;
    end else begin
        ap_phi_mux_tmp_int_phi_fu_744_p4 = tmp_int_reg_740;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state264_io) | ((tmp_last_V_reg_2607 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2607 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice))) & (tmp_last_V_reg_2607 == 1'd1) & (1'b1 == ap_CS_fsm_state264))) begin
        axilite_out_ap_vld = 1'b1;
    end else begin
        axilite_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        compression_buffer_address0 = zext_ln168_fu_1412_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        compression_buffer_address0 = zext_ln161_fu_1297_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        compression_buffer_address0 = p_cast_fu_907_p1;
    end else begin
        compression_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state2))) begin
        compression_buffer_ce0 = 1'b1;
    end else begin
        compression_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        compression_buffer_d0 = abs_in_1_fu_1288_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        compression_buffer_d0 = 32'd0;
    end else begin
        compression_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | ((1'b1 == ap_CS_fsm_state2) & (exitcond3618_fu_912_p2 == 1'd0)))) begin
        compression_buffer_we0 = 1'b1;
    end else begin
        compression_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state264_io) | ((tmp_last_V_reg_2607 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2607 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice))) & (tmp_last_V_reg_2607 == 1'd1) & (1'b1 == ap_CS_fsm_state264))) begin
        debug_output_ap_vld = 1'b1;
    end else begin
        debug_output_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state166)) begin
        delay_buffer_address0 = zext_ln210_fu_2029_p1;
    end else if ((1'b1 == ap_CS_fsm_state156)) begin
        delay_buffer_address0 = zext_ln207_fu_1866_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        delay_buffer_address0 = p_cast5_fu_937_p1;
    end else begin
        delay_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state166) | (1'b1 == ap_CS_fsm_state156) | (1'b1 == ap_CS_fsm_state3))) begin
        delay_buffer_ce0 = 1'b1;
    end else begin
        delay_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state166)) begin
        delay_buffer_d0 = output_fu_2021_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        delay_buffer_d0 = 32'd0;
    end else begin
        delay_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_13_reg_2536 == 1'd1) & (1'b1 == ap_CS_fsm_state166)) | ((1'b1 == ap_CS_fsm_state3) & (exitcond3565_fu_942_p2 == 1'd0)))) begin
        delay_buffer_we0 = 1'b1;
    end else begin
        delay_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state255) & (gmem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state232) & (gmem_ARREADY == 1'b1)))) begin
        gmem_ARADDR = gmem_addr_1_reg_2867;
    end else if (((1'b1 == ap_CS_fsm_state5) & (gmem_ARREADY == 1'b1))) begin
        gmem_ARADDR = sext_ln85_fu_1049_p1;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state232) & (gmem_ARREADY == 1'b1))) begin
        gmem_ARLEN = 32'd100;
    end else if ((((1'b1 == ap_CS_fsm_state255) & (gmem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state5) & (gmem_ARREADY == 1'b1)))) begin
        gmem_ARLEN = 32'd1;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state255) & (gmem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state232) & (gmem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state5) & (gmem_ARREADY == 1'b1)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state262) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state252) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state12) & (gmem_RVALID == 1'b1)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state255) | (1'b1 == ap_CS_fsm_state232) | (1'b1 == ap_CS_fsm_state5))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state262) | (1'b1 == ap_CS_fsm_state252) | (1'b1 == ap_CS_fsm_state12))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_11_reg_2532 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        grp_fu_1240_ap_start = 1'b1;
    end else begin
        grp_fu_1240_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln165_fu_1320_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state53))) begin
        grp_fu_1341_ap_start = 1'b1;
    end else begin
        grp_fu_1341_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_13_reg_2536 == 1'd1) & (1'b1 == ap_CS_fsm_state101))) begin
        grp_fu_1704_ap_start = 1'b1;
    end else begin
        grp_fu_1704_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_13_reg_2536 == 1'd1) & (1'b1 == ap_CS_fsm_state101))) begin
        grp_fu_1716_ap_start = 1'b1;
    end else begin
        grp_fu_1716_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state203)) begin
        grp_fu_2053_ap_start = 1'b1;
    end else begin
        grp_fu_2053_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state238) | (1'b1 == ap_CS_fsm_state231) | (1'b1 == ap_CS_fsm_state230) | (1'b1 == ap_CS_fsm_state229) | (1'b1 == ap_CS_fsm_state223) | (1'b1 == ap_CS_fsm_state213) | (1'b1 == ap_CS_fsm_state211) | (1'b1 == ap_CS_fsm_state203) | (1'b1 == ap_CS_fsm_state228) | (1'b1 == ap_CS_fsm_state218) | (1'b1 == ap_CS_fsm_state232) | (1'b1 == ap_CS_fsm_state237) | (1'b1 == ap_CS_fsm_state236) | (1'b1 == ap_CS_fsm_state235) | (1'b1 == ap_CS_fsm_state234) | (1'b1 == ap_CS_fsm_state233) | (1'b1 == ap_CS_fsm_state227) | (1'b1 == ap_CS_fsm_state226) | (1'b1 == ap_CS_fsm_state225) | (1'b1 == ap_CS_fsm_state222) | (1'b1 == ap_CS_fsm_state221) | (1'b1 == ap_CS_fsm_state220) | (1'b1 == ap_CS_fsm_state217) | (1'b1 == ap_CS_fsm_state216) | (1'b1 == ap_CS_fsm_state215) | (1'b1 == ap_CS_fsm_state210) | (1'b1 == ap_CS_fsm_state209) | (1'b1 == ap_CS_fsm_state208) | (1'b1 == ap_CS_fsm_state207) | (1'b1 == ap_CS_fsm_state206) | (1'b1 == ap_CS_fsm_state205) | (1'b1 == ap_CS_fsm_state204) | (1'b1 == ap_CS_fsm_state224) | (1'b1 == ap_CS_fsm_state214) | (1'b1 == ap_CS_fsm_state219) | (1'b1 == ap_CS_fsm_state212))) begin
        grp_fu_2053_ce = 1'b1;
    end else begin
        grp_fu_2053_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln234_fu_2250_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state239))) begin
        grp_fu_2271_ap_start = 1'b1;
    end else begin
        grp_fu_2271_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state162)) begin
        grp_fu_831_p1 = delay_mult_read_reg_2404;
    end else if (((1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state97))) begin
        grp_fu_831_p1 = reg_879;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        grp_fu_831_p1 = lpf_coefficients_load_reg_2756;
    end else begin
        grp_fu_831_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state106)) begin
        grp_fu_835_p0 = conv18_i_reg_2567;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        grp_fu_835_p0 = conv30_i_reg_2572;
    end else begin
        grp_fu_835_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state161) | (1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state160) | (1'b1 == ap_CS_fsm_state159) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state158) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state73) | ((1'b1 == ap_CS_fsm_state12) & (gmem_RVALID == 1'b1)))) begin
        grp_fu_839_ce = 1'b1;
    end else begin
        grp_fu_839_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state158)) begin
        grp_fu_839_p0 = delay_buffer_load_reg_2811;
    end else if (((1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state93))) begin
        grp_fu_839_p0 = tmp_int_7_reg_628;
    end else if (((1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state81))) begin
        grp_fu_839_p0 = current_level_reg_2739;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        grp_fu_839_p0 = empty_81_reg_653;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        grp_fu_839_p0 = compression_buffer_load_reg_2766;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_839_p0 = compression_max_threshold_read_reg_2414;
    end else begin
        grp_fu_839_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state12) & (gmem_RVALID == 1'b1)))) begin
        grp_fu_842_ce = 1'b1;
    end else begin
        grp_fu_842_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state224)) begin
        grp_fu_852_p0 = add5_i_reg_2852;
    end else if ((1'b1 == ap_CS_fsm_state214)) begin
        grp_fu_852_p0 = tmp_2_reg_2847;
    end else if ((1'b1 == ap_CS_fsm_state176)) begin
        grp_fu_852_p0 = reg_884;
    end else if ((1'b1 == ap_CS_fsm_state171)) begin
        grp_fu_852_p0 = conv_i2_reg_2832;
    end else begin
        grp_fu_852_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state224)) begin
        grp_fu_852_p1 = 64'd4626322717216342016;
    end else if ((1'b1 == ap_CS_fsm_state214)) begin
        grp_fu_852_p1 = 64'd4602678819172646912;
    end else if ((1'b1 == ap_CS_fsm_state176)) begin
        grp_fu_852_p1 = conv2_i_reg_2562;
    end else if ((1'b1 == ap_CS_fsm_state171)) begin
        grp_fu_852_p1 = 64'd4614256650576692846;
    end else begin
        grp_fu_852_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state166) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state169) | (1'b1 == ap_CS_fsm_state168) | (1'b1 == ap_CS_fsm_state167) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state12) & (gmem_RVALID == 1'b1)))) begin
        grp_fu_864_ce = 1'b1;
    end else begin
        grp_fu_864_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state166)) begin
        grp_fu_864_p0 = shl_ln227_fu_2033_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_864_p0 = tempo_read_reg_2394;
    end else begin
        grp_fu_864_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        lpf_coefficients_ce0 = 1'b1;
    end else begin
        lpf_coefficients_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state251)) begin
        wah_values_buffer_address0 = zext_ln237_fu_2285_p1;
    end else if ((1'b1 == ap_CS_fsm_state203)) begin
        wah_values_buffer_address0 = zext_ln223_fu_2042_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        wah_values_buffer_address0 = p_cast6_fu_967_p1;
    end else begin
        wah_values_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state251) | (1'b1 == ap_CS_fsm_state203) | (1'b1 == ap_CS_fsm_state4))) begin
        wah_values_buffer_ce0 = 1'b1;
    end else begin
        wah_values_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state203)) begin
        wah_values_buffer_d0 = tmp_int_reg_740;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        wah_values_buffer_d0 = 32'd0;
    end else begin
        wah_values_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state203) | ((exitcond3554_fu_972_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        wah_values_buffer_we0 = 1'b1;
    end else begin
        wah_values_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond3618_fu_912_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond3565_fu_942_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond3554_fu_972_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((icmp_ln143_fu_1126_p2 == 1'd1) & (icmp_ln141_fu_1121_p2 == 1'd0) & (tmp_reg_2528 == 1'd1) & (1'b1 == ap_CS_fsm_state14) & (1'b1 == INPUT_r_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else if (((icmp_ln141_fu_1121_p2 == 1'd1) & (tmp_reg_2528 == 1'd1) & (1'b1 == ap_CS_fsm_state14) & (1'b1 == INPUT_r_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else if (((1'b1 == ap_CS_fsm_state14) & (1'b1 == INPUT_r_TVALID_int_regslice) & ((tmp_reg_2528 == 1'd0) | ((icmp_ln143_fu_1126_p2 == 1'd0) & (icmp_ln141_fu_1121_p2 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((tmp_11_reg_2532 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state101;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            if (((icmp_ln189_fu_1364_p2 == 1'd1) & (icmp_ln179_fu_1359_p2 == 1'd1) & (icmp_ln165_fu_1320_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state102;
            end else if (((1'b1 == ap_CS_fsm_state53) & (((icmp_ln179_fu_1359_p2 == 1'd0) & (icmp_ln165_fu_1320_p2 == 1'd1) & (1'd0 == and_ln188_1_fu_1386_p2)) | ((icmp_ln189_fu_1364_p2 == 1'd0) & (icmp_ln179_fu_1359_p2 == 1'd1) & (icmp_ln165_fu_1320_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state101;
            end else if (((icmp_ln179_fu_1359_p2 == 1'd0) & (icmp_ln165_fu_1320_p2 == 1'd1) & (1'd1 == and_ln188_1_fu_1386_p2) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            if (((tmp_13_reg_2536 == 1'd0) & (1'b1 == ap_CS_fsm_state101))) begin
                ap_NS_fsm = ap_ST_fsm_state166;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state122;
            end
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        ap_ST_fsm_state154 : begin
            ap_NS_fsm = ap_ST_fsm_state155;
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_state156;
        end
        ap_ST_fsm_state156 : begin
            ap_NS_fsm = ap_ST_fsm_state157;
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state158 : begin
            ap_NS_fsm = ap_ST_fsm_state159;
        end
        ap_ST_fsm_state159 : begin
            ap_NS_fsm = ap_ST_fsm_state160;
        end
        ap_ST_fsm_state160 : begin
            ap_NS_fsm = ap_ST_fsm_state161;
        end
        ap_ST_fsm_state161 : begin
            ap_NS_fsm = ap_ST_fsm_state162;
        end
        ap_ST_fsm_state162 : begin
            ap_NS_fsm = ap_ST_fsm_state163;
        end
        ap_ST_fsm_state163 : begin
            ap_NS_fsm = ap_ST_fsm_state164;
        end
        ap_ST_fsm_state164 : begin
            ap_NS_fsm = ap_ST_fsm_state165;
        end
        ap_ST_fsm_state165 : begin
            ap_NS_fsm = ap_ST_fsm_state166;
        end
        ap_ST_fsm_state166 : begin
            if (((trunc_ln23_reg_2449 == 1'd0) & (1'b1 == ap_CS_fsm_state166))) begin
                ap_NS_fsm = ap_ST_fsm_state264;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state167;
            end
        end
        ap_ST_fsm_state167 : begin
            ap_NS_fsm = ap_ST_fsm_state168;
        end
        ap_ST_fsm_state168 : begin
            ap_NS_fsm = ap_ST_fsm_state169;
        end
        ap_ST_fsm_state169 : begin
            ap_NS_fsm = ap_ST_fsm_state170;
        end
        ap_ST_fsm_state170 : begin
            ap_NS_fsm = ap_ST_fsm_state171;
        end
        ap_ST_fsm_state171 : begin
            ap_NS_fsm = ap_ST_fsm_state172;
        end
        ap_ST_fsm_state172 : begin
            ap_NS_fsm = ap_ST_fsm_state173;
        end
        ap_ST_fsm_state173 : begin
            ap_NS_fsm = ap_ST_fsm_state174;
        end
        ap_ST_fsm_state174 : begin
            ap_NS_fsm = ap_ST_fsm_state175;
        end
        ap_ST_fsm_state175 : begin
            ap_NS_fsm = ap_ST_fsm_state176;
        end
        ap_ST_fsm_state176 : begin
            ap_NS_fsm = ap_ST_fsm_state177;
        end
        ap_ST_fsm_state177 : begin
            ap_NS_fsm = ap_ST_fsm_state178;
        end
        ap_ST_fsm_state178 : begin
            ap_NS_fsm = ap_ST_fsm_state179;
        end
        ap_ST_fsm_state179 : begin
            ap_NS_fsm = ap_ST_fsm_state180;
        end
        ap_ST_fsm_state180 : begin
            ap_NS_fsm = ap_ST_fsm_state181;
        end
        ap_ST_fsm_state181 : begin
            ap_NS_fsm = ap_ST_fsm_state182;
        end
        ap_ST_fsm_state182 : begin
            ap_NS_fsm = ap_ST_fsm_state183;
        end
        ap_ST_fsm_state183 : begin
            ap_NS_fsm = ap_ST_fsm_state184;
        end
        ap_ST_fsm_state184 : begin
            ap_NS_fsm = ap_ST_fsm_state185;
        end
        ap_ST_fsm_state185 : begin
            ap_NS_fsm = ap_ST_fsm_state186;
        end
        ap_ST_fsm_state186 : begin
            ap_NS_fsm = ap_ST_fsm_state187;
        end
        ap_ST_fsm_state187 : begin
            ap_NS_fsm = ap_ST_fsm_state188;
        end
        ap_ST_fsm_state188 : begin
            ap_NS_fsm = ap_ST_fsm_state189;
        end
        ap_ST_fsm_state189 : begin
            ap_NS_fsm = ap_ST_fsm_state190;
        end
        ap_ST_fsm_state190 : begin
            ap_NS_fsm = ap_ST_fsm_state191;
        end
        ap_ST_fsm_state191 : begin
            ap_NS_fsm = ap_ST_fsm_state192;
        end
        ap_ST_fsm_state192 : begin
            ap_NS_fsm = ap_ST_fsm_state193;
        end
        ap_ST_fsm_state193 : begin
            ap_NS_fsm = ap_ST_fsm_state194;
        end
        ap_ST_fsm_state194 : begin
            ap_NS_fsm = ap_ST_fsm_state195;
        end
        ap_ST_fsm_state195 : begin
            ap_NS_fsm = ap_ST_fsm_state196;
        end
        ap_ST_fsm_state196 : begin
            ap_NS_fsm = ap_ST_fsm_state197;
        end
        ap_ST_fsm_state197 : begin
            ap_NS_fsm = ap_ST_fsm_state198;
        end
        ap_ST_fsm_state198 : begin
            ap_NS_fsm = ap_ST_fsm_state199;
        end
        ap_ST_fsm_state199 : begin
            ap_NS_fsm = ap_ST_fsm_state200;
        end
        ap_ST_fsm_state200 : begin
            ap_NS_fsm = ap_ST_fsm_state201;
        end
        ap_ST_fsm_state201 : begin
            ap_NS_fsm = ap_ST_fsm_state202;
        end
        ap_ST_fsm_state202 : begin
            ap_NS_fsm = ap_ST_fsm_state203;
        end
        ap_ST_fsm_state203 : begin
            ap_NS_fsm = ap_ST_fsm_state204;
        end
        ap_ST_fsm_state204 : begin
            ap_NS_fsm = ap_ST_fsm_state205;
        end
        ap_ST_fsm_state205 : begin
            ap_NS_fsm = ap_ST_fsm_state206;
        end
        ap_ST_fsm_state206 : begin
            ap_NS_fsm = ap_ST_fsm_state207;
        end
        ap_ST_fsm_state207 : begin
            ap_NS_fsm = ap_ST_fsm_state208;
        end
        ap_ST_fsm_state208 : begin
            ap_NS_fsm = ap_ST_fsm_state209;
        end
        ap_ST_fsm_state209 : begin
            ap_NS_fsm = ap_ST_fsm_state210;
        end
        ap_ST_fsm_state210 : begin
            ap_NS_fsm = ap_ST_fsm_state211;
        end
        ap_ST_fsm_state211 : begin
            ap_NS_fsm = ap_ST_fsm_state212;
        end
        ap_ST_fsm_state212 : begin
            ap_NS_fsm = ap_ST_fsm_state213;
        end
        ap_ST_fsm_state213 : begin
            if (((grp_sin_or_cos_double_s_fu_810_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state213))) begin
                ap_NS_fsm = ap_ST_fsm_state214;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state213;
            end
        end
        ap_ST_fsm_state214 : begin
            ap_NS_fsm = ap_ST_fsm_state215;
        end
        ap_ST_fsm_state215 : begin
            ap_NS_fsm = ap_ST_fsm_state216;
        end
        ap_ST_fsm_state216 : begin
            ap_NS_fsm = ap_ST_fsm_state217;
        end
        ap_ST_fsm_state217 : begin
            ap_NS_fsm = ap_ST_fsm_state218;
        end
        ap_ST_fsm_state218 : begin
            ap_NS_fsm = ap_ST_fsm_state219;
        end
        ap_ST_fsm_state219 : begin
            ap_NS_fsm = ap_ST_fsm_state220;
        end
        ap_ST_fsm_state220 : begin
            ap_NS_fsm = ap_ST_fsm_state221;
        end
        ap_ST_fsm_state221 : begin
            ap_NS_fsm = ap_ST_fsm_state222;
        end
        ap_ST_fsm_state222 : begin
            ap_NS_fsm = ap_ST_fsm_state223;
        end
        ap_ST_fsm_state223 : begin
            ap_NS_fsm = ap_ST_fsm_state224;
        end
        ap_ST_fsm_state224 : begin
            ap_NS_fsm = ap_ST_fsm_state225;
        end
        ap_ST_fsm_state225 : begin
            ap_NS_fsm = ap_ST_fsm_state226;
        end
        ap_ST_fsm_state226 : begin
            ap_NS_fsm = ap_ST_fsm_state227;
        end
        ap_ST_fsm_state227 : begin
            ap_NS_fsm = ap_ST_fsm_state228;
        end
        ap_ST_fsm_state228 : begin
            ap_NS_fsm = ap_ST_fsm_state229;
        end
        ap_ST_fsm_state229 : begin
            ap_NS_fsm = ap_ST_fsm_state230;
        end
        ap_ST_fsm_state230 : begin
            ap_NS_fsm = ap_ST_fsm_state231;
        end
        ap_ST_fsm_state231 : begin
            ap_NS_fsm = ap_ST_fsm_state232;
        end
        ap_ST_fsm_state232 : begin
            if (((1'b1 == ap_CS_fsm_state232) & (gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state233;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state232;
            end
        end
        ap_ST_fsm_state233 : begin
            ap_NS_fsm = ap_ST_fsm_state234;
        end
        ap_ST_fsm_state234 : begin
            ap_NS_fsm = ap_ST_fsm_state235;
        end
        ap_ST_fsm_state235 : begin
            ap_NS_fsm = ap_ST_fsm_state236;
        end
        ap_ST_fsm_state236 : begin
            ap_NS_fsm = ap_ST_fsm_state237;
        end
        ap_ST_fsm_state237 : begin
            ap_NS_fsm = ap_ST_fsm_state238;
        end
        ap_ST_fsm_state238 : begin
            ap_NS_fsm = ap_ST_fsm_state239;
        end
        ap_ST_fsm_state239 : begin
            if (((icmp_ln234_fu_2250_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state239))) begin
                ap_NS_fsm = ap_ST_fsm_state255;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state240;
            end
        end
        ap_ST_fsm_state240 : begin
            ap_NS_fsm = ap_ST_fsm_state241;
        end
        ap_ST_fsm_state241 : begin
            ap_NS_fsm = ap_ST_fsm_state242;
        end
        ap_ST_fsm_state242 : begin
            ap_NS_fsm = ap_ST_fsm_state243;
        end
        ap_ST_fsm_state243 : begin
            ap_NS_fsm = ap_ST_fsm_state244;
        end
        ap_ST_fsm_state244 : begin
            ap_NS_fsm = ap_ST_fsm_state245;
        end
        ap_ST_fsm_state245 : begin
            ap_NS_fsm = ap_ST_fsm_state246;
        end
        ap_ST_fsm_state246 : begin
            ap_NS_fsm = ap_ST_fsm_state247;
        end
        ap_ST_fsm_state247 : begin
            ap_NS_fsm = ap_ST_fsm_state248;
        end
        ap_ST_fsm_state248 : begin
            ap_NS_fsm = ap_ST_fsm_state249;
        end
        ap_ST_fsm_state249 : begin
            ap_NS_fsm = ap_ST_fsm_state250;
        end
        ap_ST_fsm_state250 : begin
            ap_NS_fsm = ap_ST_fsm_state251;
        end
        ap_ST_fsm_state251 : begin
            ap_NS_fsm = ap_ST_fsm_state252;
        end
        ap_ST_fsm_state252 : begin
            if (((1'b1 == ap_CS_fsm_state252) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state253;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state252;
            end
        end
        ap_ST_fsm_state253 : begin
            ap_NS_fsm = ap_ST_fsm_state254;
        end
        ap_ST_fsm_state254 : begin
            ap_NS_fsm = ap_ST_fsm_state239;
        end
        ap_ST_fsm_state255 : begin
            if (((1'b1 == ap_CS_fsm_state255) & (gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state256;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state255;
            end
        end
        ap_ST_fsm_state256 : begin
            ap_NS_fsm = ap_ST_fsm_state257;
        end
        ap_ST_fsm_state257 : begin
            ap_NS_fsm = ap_ST_fsm_state258;
        end
        ap_ST_fsm_state258 : begin
            ap_NS_fsm = ap_ST_fsm_state259;
        end
        ap_ST_fsm_state259 : begin
            ap_NS_fsm = ap_ST_fsm_state260;
        end
        ap_ST_fsm_state260 : begin
            ap_NS_fsm = ap_ST_fsm_state261;
        end
        ap_ST_fsm_state261 : begin
            ap_NS_fsm = ap_ST_fsm_state262;
        end
        ap_ST_fsm_state262 : begin
            if (((1'b1 == ap_CS_fsm_state262) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state263;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state262;
            end
        end
        ap_ST_fsm_state263 : begin
            ap_NS_fsm = ap_ST_fsm_state264;
        end
        ap_ST_fsm_state264 : begin
            if ((~((1'b1 == ap_block_state264_io) | ((tmp_last_V_reg_2607 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2607 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice))) & (tmp_last_V_reg_2607 == 1'd1) & (1'b1 == ap_CS_fsm_state264))) begin
                ap_NS_fsm = ap_ST_fsm_state266;
            end else if ((~((1'b1 == ap_block_state264_io) | ((tmp_last_V_reg_2607 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2607 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice))) & (tmp_last_V_reg_2607 == 1'd0) & (1'b1 == ap_CS_fsm_state264))) begin
                ap_NS_fsm = ap_ST_fsm_state265;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state264;
            end
        end
        ap_ST_fsm_state265 : begin
            if (((1'b1 == ap_CS_fsm_state265) & (1'b1 == OUTPUT_r_TREADY_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state265;
            end
        end
        ap_ST_fsm_state266 : begin
            if ((~((regslice_both_OUTPUT_r_V_data_V_U_apdone_blk == 1'b1) | (1'b0 == OUTPUT_r_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state266))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state266;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign INPUT_r_TREADY = regslice_both_INPUT_r_V_data_V_U_ack_in;

assign OUTPUT_r_TVALID = regslice_both_OUTPUT_r_V_data_V_U_vld_out;

assign abs_in_1_fu_1288_p3 = ((tmp_17_fu_1274_p3[0:0] == 1'b1) ? sub_ln157_fu_1282_p2 : tmp_int_7_reg_628);

assign add_ln165_fu_1326_p2 = (i_reg_642 + 9'd1);

assign add_ln234_1_fu_2256_p2 = (i_7_reg_752 + 7'd1);

assign add_ln234_fu_2211_p2 = ($signed(sext_ln234_2_fu_2208_p1) + $signed(wah_coeffs_read_reg_2388));

assign add_ln346_1_fu_1766_p2 = ($signed(zext_ln346_1_fu_1762_p1) + $signed(9'd385));

assign add_ln346_2_fu_1600_p2 = ($signed(zext_ln346_2_fu_1596_p1) + $signed(9'd385));

assign add_ln346_3_fu_1912_p2 = ($signed(zext_ln346_3_fu_1908_p1) + $signed(9'd385));

assign add_ln346_fu_1460_p2 = ($signed(zext_ln346_fu_1456_p1) + $signed(9'd385));

assign add_ln515_fu_2103_p2 = ($signed(zext_ln515_fu_2099_p1) + $signed(12'd3073));

assign and_ln188_1_fu_1386_p2 = (icmp_ln188_fu_1370_p2 & and_ln188_fu_1380_p2);

assign and_ln188_fu_1380_p2 = (icmp_ln189_fu_1364_p2 & icmp_ln188_1_fu_1375_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd116];

assign ap_CS_fsm_state118 = ap_CS_fsm[32'd117];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state120 = ap_CS_fsm[32'd119];

assign ap_CS_fsm_state121 = ap_CS_fsm[32'd120];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state156 = ap_CS_fsm[32'd155];

assign ap_CS_fsm_state157 = ap_CS_fsm[32'd156];

assign ap_CS_fsm_state158 = ap_CS_fsm[32'd157];

assign ap_CS_fsm_state159 = ap_CS_fsm[32'd158];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state160 = ap_CS_fsm[32'd159];

assign ap_CS_fsm_state161 = ap_CS_fsm[32'd160];

assign ap_CS_fsm_state162 = ap_CS_fsm[32'd161];

assign ap_CS_fsm_state164 = ap_CS_fsm[32'd163];

assign ap_CS_fsm_state165 = ap_CS_fsm[32'd164];

assign ap_CS_fsm_state166 = ap_CS_fsm[32'd165];

assign ap_CS_fsm_state167 = ap_CS_fsm[32'd166];

assign ap_CS_fsm_state168 = ap_CS_fsm[32'd167];

assign ap_CS_fsm_state169 = ap_CS_fsm[32'd168];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state170 = ap_CS_fsm[32'd169];

assign ap_CS_fsm_state171 = ap_CS_fsm[32'd170];

assign ap_CS_fsm_state175 = ap_CS_fsm[32'd174];

assign ap_CS_fsm_state176 = ap_CS_fsm[32'd175];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state180 = ap_CS_fsm[32'd179];

assign ap_CS_fsm_state181 = ap_CS_fsm[32'd180];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state203 = ap_CS_fsm[32'd202];

assign ap_CS_fsm_state204 = ap_CS_fsm[32'd203];

assign ap_CS_fsm_state205 = ap_CS_fsm[32'd204];

assign ap_CS_fsm_state206 = ap_CS_fsm[32'd205];

assign ap_CS_fsm_state207 = ap_CS_fsm[32'd206];

assign ap_CS_fsm_state208 = ap_CS_fsm[32'd207];

assign ap_CS_fsm_state209 = ap_CS_fsm[32'd208];

assign ap_CS_fsm_state210 = ap_CS_fsm[32'd209];

assign ap_CS_fsm_state211 = ap_CS_fsm[32'd210];

assign ap_CS_fsm_state212 = ap_CS_fsm[32'd211];

assign ap_CS_fsm_state213 = ap_CS_fsm[32'd212];

assign ap_CS_fsm_state214 = ap_CS_fsm[32'd213];

assign ap_CS_fsm_state215 = ap_CS_fsm[32'd214];

assign ap_CS_fsm_state216 = ap_CS_fsm[32'd215];

assign ap_CS_fsm_state217 = ap_CS_fsm[32'd216];

assign ap_CS_fsm_state218 = ap_CS_fsm[32'd217];

assign ap_CS_fsm_state219 = ap_CS_fsm[32'd218];

assign ap_CS_fsm_state220 = ap_CS_fsm[32'd219];

assign ap_CS_fsm_state221 = ap_CS_fsm[32'd220];

assign ap_CS_fsm_state222 = ap_CS_fsm[32'd221];

assign ap_CS_fsm_state223 = ap_CS_fsm[32'd222];

assign ap_CS_fsm_state224 = ap_CS_fsm[32'd223];

assign ap_CS_fsm_state225 = ap_CS_fsm[32'd224];

assign ap_CS_fsm_state226 = ap_CS_fsm[32'd225];

assign ap_CS_fsm_state227 = ap_CS_fsm[32'd226];

assign ap_CS_fsm_state228 = ap_CS_fsm[32'd227];

assign ap_CS_fsm_state229 = ap_CS_fsm[32'd228];

assign ap_CS_fsm_state230 = ap_CS_fsm[32'd229];

assign ap_CS_fsm_state231 = ap_CS_fsm[32'd230];

assign ap_CS_fsm_state232 = ap_CS_fsm[32'd231];

assign ap_CS_fsm_state233 = ap_CS_fsm[32'd232];

assign ap_CS_fsm_state234 = ap_CS_fsm[32'd233];

assign ap_CS_fsm_state235 = ap_CS_fsm[32'd234];

assign ap_CS_fsm_state236 = ap_CS_fsm[32'd235];

assign ap_CS_fsm_state237 = ap_CS_fsm[32'd236];

assign ap_CS_fsm_state238 = ap_CS_fsm[32'd237];

assign ap_CS_fsm_state239 = ap_CS_fsm[32'd238];

assign ap_CS_fsm_state251 = ap_CS_fsm[32'd250];

assign ap_CS_fsm_state252 = ap_CS_fsm[32'd251];

assign ap_CS_fsm_state253 = ap_CS_fsm[32'd252];

assign ap_CS_fsm_state254 = ap_CS_fsm[32'd253];

assign ap_CS_fsm_state255 = ap_CS_fsm[32'd254];

assign ap_CS_fsm_state262 = ap_CS_fsm[32'd261];

assign ap_CS_fsm_state263 = ap_CS_fsm[32'd262];

assign ap_CS_fsm_state264 = ap_CS_fsm[32'd263];

assign ap_CS_fsm_state265 = ap_CS_fsm[32'd264];

assign ap_CS_fsm_state266 = ap_CS_fsm[32'd265];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

always @ (*) begin
    ap_block_state264 = (((tmp_last_V_reg_2607 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2607 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice)));
end

always @ (*) begin
    ap_block_state264_io = (((tmp_last_V_reg_2607 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2607 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice)));
end

always @ (*) begin
    ap_block_state266 = ((regslice_both_OUTPUT_r_V_data_V_U_apdone_blk == 1'b1) | (1'b0 == OUTPUT_r_TREADY_int_regslice));
end

always @ (*) begin
    ap_condition_4073 = (~(((tmp_last_V_reg_2607 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2607 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice))) & (1'b1 == ap_CS_fsm_state264));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign conv7_i_i_i_fu_1065_p1 = $signed(distortion_clip_factor_read_reg_2427);

assign current_level_fu_1352_p3 = ((icmp_ln171_fu_1347_p2[0:0] == 1'b1) ? compression_min_threshold_read_reg_2420 : empty_81_reg_653);

assign current_sample_fu_1109_p2 = (current_sample_1_fu_332 + 32'd1);

assign data_V_1_fu_1722_p1 = reg_874;

assign data_V_2_fu_1556_p1 = reg_874;

assign data_V_3_fu_1876_p1 = reg_874;

assign data_V_4_fu_2059_p1 = reg_884;

assign data_V_fu_1417_p1 = dc_reg_2771;

assign empty_71_fu_918_p2 = (empty_fu_308 + 9'd1);

assign empty_74_fu_948_p2 = (empty_72_fu_324 + 17'd1);

assign empty_77_fu_978_p2 = (empty_75_fu_328 + 7'd1);

assign exitcond3554_fu_972_p2 = ((empty_75_fu_328 == 7'd100) ? 1'b1 : 1'b0);

assign exitcond3565_fu_942_p2 = ((empty_72_fu_324 == 17'd88200) ? 1'b1 : 1'b0);

assign exitcond3618_fu_912_p2 = ((empty_fu_308 == 9'd441) ? 1'b1 : 1'b0);

assign grp_fu_1240_p0 = (compression_buffer_index_fu_348 + 32'd1);

assign grp_fu_1240_p1 = 32'd441;

assign grp_fu_1341_p0 = ($signed(zext_ln167_fu_1332_p1) + $signed(sext_ln65_reg_2716));

assign grp_fu_1341_p1 = 11'd441;

assign grp_fu_1704_p0 = (delay_buffer_index_fu_344 - delay_samples_read_reg_2399);

assign grp_fu_1704_p1 = 32'd88200;

assign grp_fu_1716_p0 = (delay_buffer_index_fu_344 + 32'd1);

assign grp_fu_1716_p1 = 32'd88200;

assign grp_fu_2053_p0 = (wah_buffer_index_fu_340 + 32'd1);

assign grp_fu_2053_p1 = 32'd100;

assign grp_fu_2271_p0 = ($signed(sext_ln77_reg_2884) - $signed(zext_ln236_fu_2262_p1));

assign grp_fu_2271_p1 = 9'd100;

assign grp_sin_or_cos_double_s_fu_810_ap_start = grp_sin_or_cos_double_s_fu_810_ap_start_reg;

assign icmp_ln1049_1_fu_1163_p2 = ((trunc_ln1049_1_fu_1159_p1 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln1049_2_fu_2324_p2 = ((trunc_ln1049_2_reg_2924 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1049_fu_1268_p2 = ((trunc_ln1049_fu_1264_p1 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln141_fu_1121_p2 = (($signed(INPUT_r_TDATA_int_regslice) > $signed(distortion_threshold_read_reg_2432)) ? 1'b1 : 1'b0);

assign icmp_ln143_fu_1126_p2 = (($signed(INPUT_r_TDATA_int_regslice) < $signed(negative_threshold_reg_2551)) ? 1'b1 : 1'b0);

assign icmp_ln165_fu_1320_p2 = ((i_reg_642 == 9'd441) ? 1'b1 : 1'b0);

assign icmp_ln171_fu_1347_p2 = (($signed(current_sample_1_fu_332) < $signed(32'd441)) ? 1'b1 : 1'b0);

assign icmp_ln179_fu_1359_p2 = (($signed(current_level_fu_1352_p3) > $signed(compression_max_threshold_read_reg_2414)) ? 1'b1 : 1'b0);

assign icmp_ln188_1_fu_1375_p2 = (($signed(current_level_fu_1352_p3) > $signed(compression_zero_threshold_read_reg_2409)) ? 1'b1 : 1'b0);

assign icmp_ln188_fu_1370_p2 = (($signed(current_level_fu_1352_p3) < $signed(compression_min_threshold_read_reg_2420)) ? 1'b1 : 1'b0);

assign icmp_ln189_fu_1364_p2 = (($signed(current_level_fu_1352_p3) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln234_fu_2250_p2 = ((i_7_reg_752 == 7'd100) ? 1'b1 : 1'b0);

assign isNeg_2_fu_1772_p3 = add_ln346_1_fu_1766_p2[32'd8];

assign isNeg_3_fu_1606_p3 = add_ln346_2_fu_1600_p2[32'd8];

assign isNeg_4_fu_1918_p3 = add_ln346_3_fu_1912_p2[32'd8];

assign isNeg_5_fu_2109_p3 = add_ln515_fu_2103_p2[32'd11];

assign isNeg_fu_1466_p3 = add_ln346_fu_1460_p2[32'd8];

assign lpf_coefficients_address0 = zext_ln165_fu_1315_p1;

assign mantissa_1_fu_1748_p4 = {{{{1'd1}, {p_Result_48_fu_1744_p1}}}, {1'd0}};

assign mantissa_2_fu_1582_p4 = {{{{1'd1}, {p_Result_50_fu_1578_p1}}}, {1'd0}};

assign mantissa_3_fu_1894_p4 = {{{{1'd1}, {p_Result_52_fu_1890_p1}}}, {1'd0}};

assign mantissa_4_fu_2085_p4 = {{{{1'd1}, {p_Result_54_fu_2081_p1}}}, {1'd0}};

assign mantissa_fu_1442_p4 = {{{{1'd1}, {p_Result_46_fu_1438_p1}}}, {1'd0}};

assign mul_ln234_fu_2202_p1 = 41'd200;

assign negative_threshold_fu_1060_p2 = (32'd0 - distortion_threshold_read_reg_2432);

assign or_ln101_fu_1301_p2 = (empty_80_reg_614 | 32'd4);

assign or_ln106_fu_1994_p2 = (empty_83_reg_682 | 32'd2);

assign or_ln111_fu_2236_p2 = (empty_84_reg_729 | 32'd1);

assign or_ln96_fu_1115_p2 = (empty_78_fu_336 | 32'd8);

assign output_fu_2021_p2 = (result_V_20_fu_2014_p3 + tmp_int_3_reg_699);

assign p_Result_28_fu_1169_p3 = r_V_49_reg_2654[32'd39];

assign p_Result_44_fu_2317_p3 = r_V_50_reg_2912[32'd47];

assign p_Result_45_fu_1420_p3 = data_V_fu_1417_p1[32'd31];

assign p_Result_46_fu_1438_p1 = data_V_fu_1417_p1[22:0];

assign p_Result_47_fu_1726_p3 = data_V_1_fu_1722_p1[32'd31];

assign p_Result_48_fu_1744_p1 = data_V_1_fu_1722_p1[22:0];

assign p_Result_49_fu_1560_p3 = data_V_2_fu_1556_p1[32'd31];

assign p_Result_50_fu_1578_p1 = data_V_2_fu_1556_p1[22:0];

assign p_Result_51_fu_2002_p3 = data_V_3_reg_2816[32'd31];

assign p_Result_52_fu_1890_p1 = data_V_3_fu_1876_p1[22:0];

assign p_Result_53_fu_2063_p3 = data_V_4_fu_2059_p1[32'd63];

assign p_Result_54_fu_2081_p1 = data_V_4_fu_2059_p1[51:0];

assign p_Result_s_fu_1200_p3 = r_V_48_reg_2679[32'd39];

assign p_cast5_fu_937_p1 = empty_72_fu_324;

assign p_cast6_fu_967_p1 = empty_75_fu_328;

assign p_cast_fu_907_p1 = empty_fu_308;

assign r_V_21_fu_1136_p2 = (INPUT_r_TDATA_int_regslice - distortion_threshold_read_reg_2432);

assign r_V_35_fu_1500_p2 = zext_ln15_fu_1452_p1 >> zext_ln1488_fu_1496_p1;

assign r_V_36_fu_1506_p2 = zext_ln15_fu_1452_p1 << zext_ln1488_fu_1496_p1;

assign r_V_38_fu_1806_p2 = zext_ln15_1_fu_1758_p1 >> zext_ln1488_2_fu_1802_p1;

assign r_V_39_fu_1812_p2 = zext_ln15_1_fu_1758_p1 << zext_ln1488_2_fu_1802_p1;

assign r_V_40_fu_1640_p2 = zext_ln15_2_fu_1592_p1 >> zext_ln1488_3_fu_1636_p1;

assign r_V_41_fu_1646_p2 = zext_ln15_2_fu_1592_p1 << zext_ln1488_3_fu_1636_p1;

assign r_V_42_fu_1952_p2 = zext_ln15_3_fu_1904_p1 >> zext_ln1488_4_fu_1948_p1;

assign r_V_43_fu_1958_p2 = zext_ln15_3_fu_1904_p1 << zext_ln1488_4_fu_1948_p1;

assign r_V_44_fu_2143_p2 = zext_ln15_4_fu_2095_p1 >> zext_ln1488_5_fu_2139_p1;

assign r_V_45_fu_2149_p2 = zext_ln15_4_fu_2095_p1 << zext_ln1488_5_fu_2139_p1;

assign r_V_48_fu_1249_p1 = conv7_i_i_i_reg_2556;

assign r_V_49_fu_1144_p1 = conv7_i_i_i_reg_2556;

assign r_V_fu_1131_p2 = (INPUT_r_TDATA_int_regslice + distortion_threshold_read_reg_2432);

assign result_1_fu_1194_p2 = (ret_V_11_fu_1187_p3 - distortion_threshold_read_reg_2432);

assign result_3_fu_2352_p2 = ($signed(sext_ln598_fu_2348_p1) + $signed(result_2_reg_763));

assign result_V_13_fu_2009_p2 = (32'd0 - val_3_reg_2821);

assign result_V_16_fu_2185_p2 = (32'd0 - val_4_fu_2177_p3);

assign result_V_18_fu_1548_p3 = ((p_Result_45_fu_1420_p3[0:0] == 1'b1) ? result_V_2_fu_1542_p2 : val_fu_1534_p3);

assign result_V_19_fu_1854_p3 = ((p_Result_47_fu_1726_p3[0:0] == 1'b1) ? result_V_7_fu_1848_p2 : val_1_fu_1840_p3);

assign result_V_20_fu_2014_p3 = ((p_Result_51_fu_2002_p3[0:0] == 1'b1) ? result_V_13_fu_2009_p2 : val_3_reg_2821);

assign result_V_21_fu_2191_p3 = ((p_Result_53_fu_2063_p3[0:0] == 1'b1) ? result_V_16_fu_2185_p2 : val_4_fu_2177_p3);

assign result_V_2_fu_1542_p2 = (32'd0 - val_fu_1534_p3);

assign result_V_7_fu_1848_p2 = (32'd0 - val_1_fu_1840_p3);

assign result_V_8_fu_1682_p2 = (32'd0 - val_2_fu_1674_p3);

assign result_V_fu_1688_p3 = ((p_Result_49_fu_1560_p3[0:0] == 1'b1) ? result_V_8_fu_1682_p2 : val_2_fu_1674_p3);

assign result_fu_1225_p2 = (ret_V_9_fu_1218_p3 + distortion_threshold_read_reg_2432);

assign ret_V_10_fu_1176_p2 = (ret_V_9_cast_reg_2659 + 32'd1);

assign ret_V_11_fu_1187_p3 = ((p_Result_28_fu_1169_p3[0:0] == 1'b1) ? select_ln1048_1_fu_1181_p3 : ret_V_9_cast_reg_2659);

assign ret_V_13_fu_2329_p2 = (ret_V_12_reg_2917 + 16'd1);

assign ret_V_14_fu_2341_p3 = ((p_Result_44_fu_2317_p3[0:0] == 1'b1) ? select_ln1048_2_fu_2334_p3 : ret_V_12_reg_2917);

assign ret_V_9_fu_1218_p3 = ((p_Result_s_fu_1200_p3[0:0] == 1'b1) ? select_ln1048_fu_1212_p3 : ret_V_cast_reg_2684);

assign ret_V_fu_1207_p2 = (ret_V_cast_reg_2684 + 32'd1);

assign select_ln1048_1_fu_1181_p3 = ((icmp_ln1049_1_reg_2666[0:0] == 1'b1) ? ret_V_9_cast_reg_2659 : ret_V_10_fu_1176_p2);

assign select_ln1048_2_fu_2334_p3 = ((icmp_ln1049_2_fu_2324_p2[0:0] == 1'b1) ? ret_V_12_reg_2917 : ret_V_13_fu_2329_p2);

assign select_ln1048_fu_1212_p3 = ((icmp_ln1049_reg_2691[0:0] == 1'b1) ? ret_V_cast_reg_2684 : ret_V_fu_1207_p2);

assign sext_ln1488_1_fu_1798_p1 = $signed(ush_2_fu_1790_p3);

assign sext_ln1488_2_fu_1632_p1 = $signed(ush_3_fu_1624_p3);

assign sext_ln1488_3_fu_1944_p1 = $signed(ush_4_fu_1936_p3);

assign sext_ln1488_4_fu_2135_p1 = $signed(ush_5_fu_2127_p3);

assign sext_ln1488_fu_1492_p1 = $signed(ush_fu_1484_p3);

assign sext_ln1512_1_fu_1786_p1 = $signed(sub_ln1512_4_fu_1780_p2);

assign sext_ln1512_2_fu_1620_p1 = $signed(sub_ln1512_5_fu_1614_p2);

assign sext_ln1512_3_fu_1932_p1 = $signed(sub_ln1512_fu_1926_p2);

assign sext_ln1512_4_fu_2123_p1 = $signed(sub_ln1512_2_fu_2117_p2);

assign sext_ln1512_fu_1480_p1 = $signed(sub_ln1512_3_fu_1474_p2);

assign sext_ln234_2_fu_2208_p1 = $signed(mul_ln234_reg_2862);

assign sext_ln234_fu_2226_p1 = $signed(trunc_ln_fu_2216_p4);

assign sext_ln598_fu_2348_p1 = $signed(ret_V_14_fu_2341_p3);

assign sext_ln65_fu_1311_p1 = $signed(trunc_ln65_fu_1307_p1);

assign sext_ln77_fu_2246_p1 = $signed(trunc_ln77_fu_2242_p1);

assign sext_ln85_fu_1049_p1 = $signed(trunc_ln6_fu_1040_p4);

assign shl_ln227_fu_2033_p2 = current_sample_1_fu_332 << 32'd1;

assign sub_ln1512_2_fu_2117_p2 = (11'd1023 - xs_exp_V_5_fu_2071_p4);

assign sub_ln1512_3_fu_1474_p2 = (8'd127 - xs_exp_V_fu_1428_p4);

assign sub_ln1512_4_fu_1780_p2 = (8'd127 - xs_exp_V_1_fu_1734_p4);

assign sub_ln1512_5_fu_1614_p2 = (8'd127 - xs_exp_V_2_fu_1568_p4);

assign sub_ln1512_fu_1926_p2 = (8'd127 - xs_exp_V_4_fu_1880_p4);

assign sub_ln157_fu_1282_p2 = (32'd0 - tmp_int_7_reg_628);

assign tmp_17_fu_1274_p3 = tmp_int_7_reg_628[32'd31];

assign tmp_22_fu_1512_p3 = r_V_35_fu_1500_p2[32'd24];

assign tmp_26_fu_1818_p3 = r_V_38_fu_1806_p2[32'd24];

assign tmp_30_fu_1652_p3 = r_V_40_fu_1640_p2[32'd24];

assign tmp_34_fu_1964_p3 = r_V_42_fu_1952_p2[32'd24];

assign tmp_38_fu_2155_p3 = r_V_44_fu_2143_p2[32'd53];

assign tmp_3_fu_1976_p4 = {{r_V_43_fu_1958_p2[55:24]}};

assign tmp_4_fu_2167_p4 = {{r_V_45_fu_2149_p2[84:53]}};

assign tmp_6_fu_1524_p4 = {{r_V_36_fu_1506_p2[55:24]}};

assign tmp_9_fu_1830_p4 = {{r_V_39_fu_1812_p2[55:24]}};

assign tmp_s_fu_1664_p4 = {{r_V_41_fu_1646_p2[55:24]}};

assign trunc_ln1049_1_fu_1159_p1 = r_V_49_fu_1144_p2[6:0];

assign trunc_ln1049_2_fu_2313_p1 = r_V_50_fu_2297_p2[31:0];

assign trunc_ln1049_fu_1264_p1 = r_V_48_fu_1249_p2[6:0];

assign trunc_ln168_fu_1408_p1 = grp_fu_1341_p2[8:0];

assign trunc_ln207_fu_1862_p1 = grp_fu_1704_p2[16:0];

assign trunc_ln237_fu_2281_p1 = grp_fu_2271_p2[6:0];

assign trunc_ln23_fu_895_p1 = control[0:0];

assign trunc_ln65_fu_1307_p1 = grp_fu_1240_p2[9:0];

assign trunc_ln6_fu_1040_p4 = {{wah_coeffs_read_reg_2388[63:1]}};

assign trunc_ln77_fu_2242_p1 = grp_fu_2053_p2[7:0];

assign trunc_ln_fu_2216_p4 = {{add_ln234_fu_2211_p2[63:1]}};

assign ush_2_fu_1790_p3 = ((isNeg_2_fu_1772_p3[0:0] == 1'b1) ? sext_ln1512_1_fu_1786_p1 : add_ln346_1_fu_1766_p2);

assign ush_3_fu_1624_p3 = ((isNeg_3_fu_1606_p3[0:0] == 1'b1) ? sext_ln1512_2_fu_1620_p1 : add_ln346_2_fu_1600_p2);

assign ush_4_fu_1936_p3 = ((isNeg_4_fu_1918_p3[0:0] == 1'b1) ? sext_ln1512_3_fu_1932_p1 : add_ln346_3_fu_1912_p2);

assign ush_5_fu_2127_p3 = ((isNeg_5_fu_2109_p3[0:0] == 1'b1) ? sext_ln1512_4_fu_2123_p1 : add_ln515_fu_2103_p2);

assign ush_fu_1484_p3 = ((isNeg_fu_1466_p3[0:0] == 1'b1) ? sext_ln1512_fu_1480_p1 : add_ln346_fu_1460_p2);

assign val_1_fu_1840_p3 = ((isNeg_2_fu_1772_p3[0:0] == 1'b1) ? zext_ln818_1_fu_1826_p1 : tmp_9_fu_1830_p4);

assign val_2_fu_1674_p3 = ((isNeg_3_fu_1606_p3[0:0] == 1'b1) ? zext_ln818_2_fu_1660_p1 : tmp_s_fu_1664_p4);

assign val_3_fu_1986_p3 = ((isNeg_4_fu_1918_p3[0:0] == 1'b1) ? zext_ln818_3_fu_1972_p1 : tmp_3_fu_1976_p4);

assign val_4_fu_2177_p3 = ((isNeg_5_fu_2109_p3[0:0] == 1'b1) ? zext_ln818_4_fu_2163_p1 : tmp_4_fu_2167_p4);

assign val_fu_1534_p3 = ((isNeg_fu_1466_p3[0:0] == 1'b1) ? zext_ln818_fu_1520_p1 : tmp_6_fu_1524_p4);

assign xs_exp_V_1_fu_1734_p4 = {{data_V_1_fu_1722_p1[30:23]}};

assign xs_exp_V_2_fu_1568_p4 = {{data_V_2_fu_1556_p1[30:23]}};

assign xs_exp_V_4_fu_1880_p4 = {{data_V_3_fu_1876_p1[30:23]}};

assign xs_exp_V_5_fu_2071_p4 = {{data_V_4_fu_2059_p1[62:52]}};

assign xs_exp_V_fu_1428_p4 = {{data_V_fu_1417_p1[30:23]}};

assign zext_ln1488_2_fu_1802_p1 = $unsigned(sext_ln1488_1_fu_1798_p1);

assign zext_ln1488_3_fu_1636_p1 = $unsigned(sext_ln1488_2_fu_1632_p1);

assign zext_ln1488_4_fu_1948_p1 = $unsigned(sext_ln1488_3_fu_1944_p1);

assign zext_ln1488_5_fu_2139_p1 = $unsigned(sext_ln1488_4_fu_2135_p1);

assign zext_ln1488_fu_1496_p1 = $unsigned(sext_ln1488_fu_1492_p1);

assign zext_ln15_1_fu_1758_p1 = mantissa_1_fu_1748_p4;

assign zext_ln15_2_fu_1592_p1 = mantissa_2_fu_1582_p4;

assign zext_ln15_3_fu_1904_p1 = mantissa_3_fu_1894_p4;

assign zext_ln15_4_fu_2095_p1 = mantissa_4_fu_2085_p4;

assign zext_ln15_fu_1452_p1 = mantissa_fu_1442_p4;

assign zext_ln161_fu_1297_p1 = compression_buffer_index_fu_348;

assign zext_ln165_fu_1315_p1 = i_reg_642;

assign zext_ln167_fu_1332_p1 = i_reg_642;

assign zext_ln168_fu_1412_p1 = trunc_ln168_fu_1408_p1;

assign zext_ln207_fu_1866_p1 = trunc_ln207_fu_1862_p1;

assign zext_ln210_fu_2029_p1 = delay_buffer_index_load_reg_2786;

assign zext_ln223_fu_2042_p1 = wah_buffer_index_fu_340;

assign zext_ln236_fu_2262_p1 = i_7_reg_752;

assign zext_ln237_fu_2285_p1 = trunc_ln237_fu_2281_p1;

assign zext_ln346_1_fu_1762_p1 = xs_exp_V_1_fu_1734_p4;

assign zext_ln346_2_fu_1596_p1 = xs_exp_V_2_fu_1568_p4;

assign zext_ln346_3_fu_1908_p1 = xs_exp_V_4_fu_1880_p4;

assign zext_ln346_fu_1456_p1 = xs_exp_V_fu_1428_p4;

assign zext_ln515_fu_2099_p1 = xs_exp_V_5_fu_2071_p4;

assign zext_ln818_1_fu_1826_p1 = tmp_26_fu_1818_p3;

assign zext_ln818_2_fu_1660_p1 = tmp_30_fu_1652_p3;

assign zext_ln818_3_fu_1972_p1 = tmp_34_fu_1964_p3;

assign zext_ln818_4_fu_2163_p1 = tmp_38_fu_2155_p3;

assign zext_ln818_fu_1520_p1 = tmp_22_fu_1512_p3;

always @ (posedge ap_clk) begin
    or_ln96_reg_2626[3] <= 1'b1;
    or_ln101_reg_2696[2] <= 1'b1;
    or_ln111_reg_2873[0] <= 1'b1;
end

endmodule //guitar_effects
