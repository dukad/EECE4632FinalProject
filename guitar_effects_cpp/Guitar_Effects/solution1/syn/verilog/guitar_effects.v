// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="guitar_effects_guitar_effects,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=65,HLS_SYN_DSP=0,HLS_SYN_FF=2086,HLS_SYN_LUT=4883,HLS_VERSION=2022_1}" *)

module guitar_effects (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        INPUT_r_TDATA,
        INPUT_r_TVALID,
        INPUT_r_TREADY,
        INPUT_r_TKEEP,
        INPUT_r_TSTRB,
        INPUT_r_TUSER,
        INPUT_r_TLAST,
        INPUT_r_TID,
        INPUT_r_TDEST,
        OUTPUT_r_TDATA,
        OUTPUT_r_TVALID,
        OUTPUT_r_TREADY,
        OUTPUT_r_TKEEP,
        OUTPUT_r_TSTRB,
        OUTPUT_r_TUSER,
        OUTPUT_r_TLAST,
        OUTPUT_r_TID,
        OUTPUT_r_TDEST,
        s_axi_control_r_AWVALID,
        s_axi_control_r_AWREADY,
        s_axi_control_r_AWADDR,
        s_axi_control_r_WVALID,
        s_axi_control_r_WREADY,
        s_axi_control_r_WDATA,
        s_axi_control_r_WSTRB,
        s_axi_control_r_ARVALID,
        s_axi_control_r_ARREADY,
        s_axi_control_r_ARADDR,
        s_axi_control_r_RVALID,
        s_axi_control_r_RREADY,
        s_axi_control_r_RDATA,
        s_axi_control_r_RRESP,
        s_axi_control_r_BVALID,
        s_axi_control_r_BREADY,
        s_axi_control_r_BRESP
);

parameter    ap_ST_fsm_state1 = 80'd1;
parameter    ap_ST_fsm_state2 = 80'd2;
parameter    ap_ST_fsm_state3 = 80'd4;
parameter    ap_ST_fsm_state4 = 80'd8;
parameter    ap_ST_fsm_state5 = 80'd16;
parameter    ap_ST_fsm_state6 = 80'd32;
parameter    ap_ST_fsm_state7 = 80'd64;
parameter    ap_ST_fsm_state8 = 80'd128;
parameter    ap_ST_fsm_state9 = 80'd256;
parameter    ap_ST_fsm_state10 = 80'd512;
parameter    ap_ST_fsm_state11 = 80'd1024;
parameter    ap_ST_fsm_state12 = 80'd2048;
parameter    ap_ST_fsm_state13 = 80'd4096;
parameter    ap_ST_fsm_state14 = 80'd8192;
parameter    ap_ST_fsm_state15 = 80'd16384;
parameter    ap_ST_fsm_state16 = 80'd32768;
parameter    ap_ST_fsm_state17 = 80'd65536;
parameter    ap_ST_fsm_state18 = 80'd131072;
parameter    ap_ST_fsm_state19 = 80'd262144;
parameter    ap_ST_fsm_state20 = 80'd524288;
parameter    ap_ST_fsm_state21 = 80'd1048576;
parameter    ap_ST_fsm_state22 = 80'd2097152;
parameter    ap_ST_fsm_state23 = 80'd4194304;
parameter    ap_ST_fsm_state24 = 80'd8388608;
parameter    ap_ST_fsm_state25 = 80'd16777216;
parameter    ap_ST_fsm_state26 = 80'd33554432;
parameter    ap_ST_fsm_state27 = 80'd67108864;
parameter    ap_ST_fsm_state28 = 80'd134217728;
parameter    ap_ST_fsm_state29 = 80'd268435456;
parameter    ap_ST_fsm_state30 = 80'd536870912;
parameter    ap_ST_fsm_state31 = 80'd1073741824;
parameter    ap_ST_fsm_state32 = 80'd2147483648;
parameter    ap_ST_fsm_state33 = 80'd4294967296;
parameter    ap_ST_fsm_state34 = 80'd8589934592;
parameter    ap_ST_fsm_state35 = 80'd17179869184;
parameter    ap_ST_fsm_state36 = 80'd34359738368;
parameter    ap_ST_fsm_state37 = 80'd68719476736;
parameter    ap_ST_fsm_state38 = 80'd137438953472;
parameter    ap_ST_fsm_state39 = 80'd274877906944;
parameter    ap_ST_fsm_state40 = 80'd549755813888;
parameter    ap_ST_fsm_state41 = 80'd1099511627776;
parameter    ap_ST_fsm_state42 = 80'd2199023255552;
parameter    ap_ST_fsm_state43 = 80'd4398046511104;
parameter    ap_ST_fsm_state44 = 80'd8796093022208;
parameter    ap_ST_fsm_state45 = 80'd17592186044416;
parameter    ap_ST_fsm_state46 = 80'd35184372088832;
parameter    ap_ST_fsm_state47 = 80'd70368744177664;
parameter    ap_ST_fsm_state48 = 80'd140737488355328;
parameter    ap_ST_fsm_state49 = 80'd281474976710656;
parameter    ap_ST_fsm_state50 = 80'd562949953421312;
parameter    ap_ST_fsm_state51 = 80'd1125899906842624;
parameter    ap_ST_fsm_state52 = 80'd2251799813685248;
parameter    ap_ST_fsm_state53 = 80'd4503599627370496;
parameter    ap_ST_fsm_state54 = 80'd9007199254740992;
parameter    ap_ST_fsm_state55 = 80'd18014398509481984;
parameter    ap_ST_fsm_state56 = 80'd36028797018963968;
parameter    ap_ST_fsm_state57 = 80'd72057594037927936;
parameter    ap_ST_fsm_state58 = 80'd144115188075855872;
parameter    ap_ST_fsm_state59 = 80'd288230376151711744;
parameter    ap_ST_fsm_state60 = 80'd576460752303423488;
parameter    ap_ST_fsm_state61 = 80'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 80'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 80'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 80'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 80'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 80'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 80'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 80'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 80'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 80'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 80'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 80'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 80'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 80'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 80'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 80'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 80'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 80'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 80'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 80'd604462909807314587353088;
parameter    C_S_AXI_CONTROL_R_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_R_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_R_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] INPUT_r_TDATA;
input   INPUT_r_TVALID;
output   INPUT_r_TREADY;
input  [1:0] INPUT_r_TKEEP;
input  [1:0] INPUT_r_TSTRB;
input  [1:0] INPUT_r_TUSER;
input  [0:0] INPUT_r_TLAST;
input  [4:0] INPUT_r_TID;
input  [5:0] INPUT_r_TDEST;
output  [15:0] OUTPUT_r_TDATA;
output   OUTPUT_r_TVALID;
input   OUTPUT_r_TREADY;
output  [1:0] OUTPUT_r_TKEEP;
output  [1:0] OUTPUT_r_TSTRB;
output  [1:0] OUTPUT_r_TUSER;
output  [0:0] OUTPUT_r_TLAST;
output  [4:0] OUTPUT_r_TID;
output  [5:0] OUTPUT_r_TDEST;
input   s_axi_control_r_AWVALID;
output   s_axi_control_r_AWREADY;
input  [C_S_AXI_CONTROL_R_ADDR_WIDTH - 1:0] s_axi_control_r_AWADDR;
input   s_axi_control_r_WVALID;
output   s_axi_control_r_WREADY;
input  [C_S_AXI_CONTROL_R_DATA_WIDTH - 1:0] s_axi_control_r_WDATA;
input  [C_S_AXI_CONTROL_R_WSTRB_WIDTH - 1:0] s_axi_control_r_WSTRB;
input   s_axi_control_r_ARVALID;
output   s_axi_control_r_ARREADY;
input  [C_S_AXI_CONTROL_R_ADDR_WIDTH - 1:0] s_axi_control_r_ARADDR;
output   s_axi_control_r_RVALID;
input   s_axi_control_r_RREADY;
output  [C_S_AXI_CONTROL_R_DATA_WIDTH - 1:0] s_axi_control_r_RDATA;
output  [1:0] s_axi_control_r_RRESP;
output   s_axi_control_r_BVALID;
input   s_axi_control_r_BREADY;
output  [1:0] s_axi_control_r_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [79:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] control;
wire   [15:0] distortion_threshold;
wire   [31:0] distortion_clip_factor;
wire   [15:0] compression_min_threshold;
wire   [15:0] compression_max_threshold;
wire   [15:0] compression_zero_threshold;
wire   [31:0] delay_mult;
wire   [31:0] delay_samples;
reg    INPUT_r_TDATA_blk_n;
wire    ap_CS_fsm_state22;
reg    OUTPUT_r_TDATA_blk_n;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state80;
wire   [31:0] grp_fu_321_p1;
reg   [31:0] reg_324;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state71;
wire   [31:0] grp_fu_317_p2;
reg   [31:0] reg_330;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state50;
wire   [31:0] grp_fu_313_p2;
reg   [31:0] reg_336;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state76;
reg   [0:0] tmp_reg_902;
reg  signed [15:0] distortion_threshold_read_reg_906;
reg   [31:0] distortion_clip_factor_read_reg_914;
reg   [15:0] compression_min_threshold_read_reg_919;
reg   [15:0] compression_max_threshold_read_reg_924;
reg   [15:0] compression_zero_threshold_read_reg_929;
reg   [0:0] tmp_2_reg_934;
wire   [31:0] delay_mult_assign_fu_360_p1;
reg   [31:0] delay_mult_assign_reg_938;
wire  signed [31:0] conv5_i42_fu_385_p1;
wire    ap_CS_fsm_state16;
wire  signed [16:0] distortion_threshold_load_cast_fu_389_p1;
reg  signed [16:0] distortion_threshold_load_cast_reg_953;
wire    ap_CS_fsm_state21;
wire   [31:0] clip_factor_assign_fu_392_p1;
reg   [31:0] clip_factor_assign_reg_959;
wire   [15:0] negative_threshold_fu_395_p2;
reg   [15:0] negative_threshold_reg_969;
reg   [31:0] conv5_i_reg_974;
reg   [15:0] delay_buffer_addr_1_reg_979;
reg   [15:0] tmp_data_V_reg_984;
reg   [1:0] tmp_keep_V_reg_991;
reg   [1:0] tmp_strb_V_reg_996;
reg   [1:0] tmp_user_V_reg_1001;
reg   [0:0] tmp_last_V_reg_1006;
reg   [4:0] tmp_id_V_reg_1011;
reg   [5:0] tmp_dest_V_reg_1016;
wire   [16:0] add_ln97_fu_447_p2;
reg   [16:0] add_ln97_reg_1027;
wire   [0:0] icmp_ln94_fu_437_p2;
wire   [0:0] icmp_ln96_fu_442_p2;
wire   [16:0] sub_ln95_fu_452_p2;
reg   [16:0] sub_ln95_reg_1032;
wire  signed [31:0] sext_ln97_fu_457_p1;
wire    ap_CS_fsm_state23;
reg   [0:0] p_Result_2_reg_1042;
wire    ap_CS_fsm_state38;
wire   [22:0] p_Result_3_fu_483_p1;
reg   [22:0] p_Result_3_reg_1047;
wire   [0:0] isNeg_1_fu_497_p3;
reg   [0:0] isNeg_1_reg_1052;
wire   [8:0] ush_1_fu_515_p3;
reg   [8:0] ush_1_reg_1057;
wire   [15:0] val_1_fu_577_p3;
reg   [15:0] val_1_reg_1062;
wire    ap_CS_fsm_state39;
wire   [15:0] result_V_9_fu_589_p3;
wire    ap_CS_fsm_state40;
wire  signed [31:0] sext_ln95_fu_595_p1;
wire    ap_CS_fsm_state41;
reg   [0:0] p_Result_s_reg_1078;
wire    ap_CS_fsm_state56;
wire   [22:0] p_Result_1_fu_621_p1;
reg   [22:0] p_Result_1_reg_1083;
wire   [0:0] isNeg_fu_635_p3;
reg   [0:0] isNeg_reg_1088;
wire   [8:0] ush_fu_653_p3;
reg   [8:0] ush_reg_1093;
wire   [15:0] val_fu_715_p3;
reg   [15:0] val_reg_1098;
wire    ap_CS_fsm_state57;
wire   [15:0] result_V_fu_727_p3;
wire    ap_CS_fsm_state58;
wire   [15:0] delay_buffer_q0;
reg  signed [15:0] delay_buffer_load_reg_1112;
wire    ap_CS_fsm_state61;
wire  signed [31:0] sext_ln157_1_fu_751_p1;
wire    ap_CS_fsm_state62;
wire  signed [31:0] sext_ln157_fu_755_p1;
wire    ap_CS_fsm_state66;
reg   [0:0] p_Result_4_reg_1127;
wire    ap_CS_fsm_state77;
wire   [22:0] p_Result_5_fu_782_p1;
reg   [22:0] p_Result_5_reg_1132;
wire   [0:0] isNeg_2_fu_796_p3;
reg   [0:0] isNeg_2_reg_1137;
wire   [8:0] ush_2_fu_814_p3;
reg   [8:0] ush_2_reg_1142;
wire   [15:0] val_2_fu_876_p3;
reg   [15:0] val_2_reg_1147;
wire    ap_CS_fsm_state78;
reg   [15:0] delay_buffer_address0;
reg    delay_buffer_ce0;
reg    delay_buffer_we0;
reg   [15:0] delay_buffer_d0;
wire    grp_guitar_effects_Pipeline_2_fu_296_ap_start;
wire    grp_guitar_effects_Pipeline_2_fu_296_ap_done;
wire    grp_guitar_effects_Pipeline_2_fu_296_ap_idle;
wire    grp_guitar_effects_Pipeline_2_fu_296_ap_ready;
wire   [15:0] grp_guitar_effects_Pipeline_2_fu_296_delay_buffer_address0;
wire    grp_guitar_effects_Pipeline_2_fu_296_delay_buffer_ce0;
wire    grp_guitar_effects_Pipeline_2_fu_296_delay_buffer_we0;
wire   [15:0] grp_guitar_effects_Pipeline_2_fu_296_delay_buffer_d0;
wire    grp_compression_fu_301_ap_start;
wire    grp_compression_fu_301_ap_done;
wire    grp_compression_fu_301_ap_idle;
wire    grp_compression_fu_301_ap_ready;
wire   [8:0] grp_compression_fu_301_values_buffer_address0;
wire    grp_compression_fu_301_values_buffer_ce0;
wire    grp_compression_fu_301_values_buffer_we0;
wire   [15:0] grp_compression_fu_301_values_buffer_d0;
wire   [15:0] grp_compression_fu_301_ap_return_0;
wire   [15:0] grp_compression_fu_301_ap_return_1;
wire   [31:0] grp_compression_fu_301_grp_fu_317_p_din0;
wire   [31:0] grp_compression_fu_301_grp_fu_317_p_din1;
wire    grp_compression_fu_301_grp_fu_317_p_ce;
reg   [15:0] tmp_short_reg_271;
reg   [15:0] tmp_short_3_reg_285;
wire    ap_CS_fsm_state60;
reg    ap_block_state60_on_subcall_done;
wire    ap_CS_fsm_state59;
reg    grp_guitar_effects_Pipeline_2_fu_296_ap_start_reg;
wire    ap_CS_fsm_state20;
reg    grp_compression_fu_301_ap_start_reg;
wire   [63:0] idxprom_i_fu_400_p1;
reg   [15:0] current_level_1_fu_154;
wire   [15:0] result_V_10_fu_888_p3;
reg   [31:0] grp_fu_313_p0;
reg   [31:0] grp_fu_313_p1;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state72;
reg   [31:0] grp_fu_317_p0;
reg   [31:0] grp_fu_317_p1;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state68;
reg  signed [31:0] grp_fu_321_p0;
wire   [15:0] empty_fu_356_p1;
wire  signed [16:0] delay_samples_assign_cast_fu_364_p1;
wire   [16:0] grp_fu_374_p0;
wire   [16:0] grp_fu_374_p2;
wire  signed [15:0] sext_ln94_fu_433_p0;
wire  signed [15:0] icmp_ln94_fu_437_p0;
wire  signed [15:0] icmp_ln96_fu_442_p0;
wire  signed [16:0] sext_ln94_fu_433_p1;
wire   [31:0] data_V_1_fu_461_p1;
wire   [7:0] xs_exp_V_1_fu_473_p4;
wire   [8:0] zext_ln346_1_fu_487_p1;
wire   [8:0] add_ln346_1_fu_491_p2;
wire   [7:0] sub_ln1512_1_fu_505_p2;
wire  signed [8:0] sext_ln1512_1_fu_511_p1;
wire   [24:0] mantissa_1_fu_523_p4;
wire  signed [31:0] sext_ln1488_1_fu_536_p1;
wire   [62:0] zext_ln15_1_fu_532_p1;
wire   [62:0] zext_ln1488_1_fu_539_p1;
wire   [62:0] r_V_2_fu_543_p2;
wire   [0:0] tmp_12_fu_555_p3;
wire   [62:0] r_V_3_fu_549_p2;
wire   [15:0] zext_ln818_1_fu_563_p1;
wire   [15:0] tmp_4_fu_567_p4;
wire   [15:0] result_V_5_fu_584_p2;
wire   [31:0] data_V_fu_599_p1;
wire   [7:0] xs_exp_V_fu_611_p4;
wire   [8:0] zext_ln346_fu_625_p1;
wire   [8:0] add_ln346_fu_629_p2;
wire   [7:0] sub_ln1512_fu_643_p2;
wire  signed [8:0] sext_ln1512_fu_649_p1;
wire   [24:0] mantissa_fu_661_p4;
wire  signed [31:0] sext_ln1488_fu_674_p1;
wire   [62:0] zext_ln15_fu_670_p1;
wire   [62:0] zext_ln1488_fu_677_p1;
wire   [62:0] r_V_fu_681_p2;
wire   [0:0] tmp_8_fu_693_p3;
wire   [62:0] r_V_1_fu_687_p2;
wire   [15:0] zext_ln818_fu_701_p1;
wire   [15:0] tmp_1_fu_705_p4;
wire   [15:0] result_V_2_fu_722_p2;
wire   [31:0] data_V_2_fu_760_p1;
wire   [7:0] xs_exp_V_2_fu_772_p4;
wire   [8:0] zext_ln346_2_fu_786_p1;
wire   [8:0] add_ln346_2_fu_790_p2;
wire   [7:0] sub_ln1512_2_fu_804_p2;
wire  signed [8:0] sext_ln1512_2_fu_810_p1;
wire   [24:0] mantissa_2_fu_822_p4;
wire  signed [31:0] sext_ln1488_2_fu_835_p1;
wire   [62:0] zext_ln15_2_fu_831_p1;
wire   [62:0] zext_ln1488_2_fu_838_p1;
wire   [62:0] r_V_4_fu_842_p2;
wire   [0:0] tmp_16_fu_854_p3;
wire   [62:0] r_V_5_fu_848_p2;
wire   [15:0] zext_ln818_2_fu_862_p1;
wire   [15:0] tmp_7_fu_866_p4;
wire   [15:0] result_V_8_fu_883_p2;
reg   [1:0] grp_fu_313_opcode;
reg    grp_fu_317_ce;
reg    grp_fu_321_ce;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state70;
reg    grp_fu_374_ap_start;
wire    grp_fu_374_ap_done;
reg    grp_fu_374_ce;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    regslice_both_OUTPUT_r_V_data_V_U_apdone_blk;
reg    ap_block_state80;
reg   [79:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
reg    ap_ST_fsm_state21_blk;
reg    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
reg    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
wire    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
reg    ap_ST_fsm_state79_blk;
reg    ap_ST_fsm_state80_blk;
wire    regslice_both_INPUT_r_V_data_V_U_apdone_blk;
wire   [15:0] INPUT_r_TDATA_int_regslice;
wire    INPUT_r_TVALID_int_regslice;
reg    INPUT_r_TREADY_int_regslice;
wire    regslice_both_INPUT_r_V_data_V_U_ack_in;
wire    regslice_both_INPUT_r_V_keep_V_U_apdone_blk;
wire   [1:0] INPUT_r_TKEEP_int_regslice;
wire    regslice_both_INPUT_r_V_keep_V_U_vld_out;
wire    regslice_both_INPUT_r_V_keep_V_U_ack_in;
wire    regslice_both_INPUT_r_V_strb_V_U_apdone_blk;
wire   [1:0] INPUT_r_TSTRB_int_regslice;
wire    regslice_both_INPUT_r_V_strb_V_U_vld_out;
wire    regslice_both_INPUT_r_V_strb_V_U_ack_in;
wire    regslice_both_INPUT_r_V_user_V_U_apdone_blk;
wire   [1:0] INPUT_r_TUSER_int_regslice;
wire    regslice_both_INPUT_r_V_user_V_U_vld_out;
wire    regslice_both_INPUT_r_V_user_V_U_ack_in;
wire    regslice_both_INPUT_r_V_last_V_U_apdone_blk;
wire   [0:0] INPUT_r_TLAST_int_regslice;
wire    regslice_both_INPUT_r_V_last_V_U_vld_out;
wire    regslice_both_INPUT_r_V_last_V_U_ack_in;
wire    regslice_both_INPUT_r_V_id_V_U_apdone_blk;
wire   [4:0] INPUT_r_TID_int_regslice;
wire    regslice_both_INPUT_r_V_id_V_U_vld_out;
wire    regslice_both_INPUT_r_V_id_V_U_ack_in;
wire    regslice_both_INPUT_r_V_dest_V_U_apdone_blk;
wire   [5:0] INPUT_r_TDEST_int_regslice;
wire    regslice_both_INPUT_r_V_dest_V_U_vld_out;
wire    regslice_both_INPUT_r_V_dest_V_U_ack_in;
reg    OUTPUT_r_TVALID_int_regslice;
wire    OUTPUT_r_TREADY_int_regslice;
wire    regslice_both_OUTPUT_r_V_data_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_keep_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_keep_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_keep_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_strb_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_strb_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_strb_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_user_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_user_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_user_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_last_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_last_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_last_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_id_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_id_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_id_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_dest_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_dest_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_dest_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 80'd1;
#0 grp_guitar_effects_Pipeline_2_fu_296_ap_start_reg = 1'b0;
#0 grp_compression_fu_301_ap_start_reg = 1'b0;
end

guitar_effects_compression_buffer_RAM_AUTO_0R0W #(
    .DataWidth( 16 ),
    .AddressRange( 441 ),
    .AddressWidth( 9 ))
compression_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_compression_fu_301_values_buffer_address0),
    .ce0(grp_compression_fu_301_values_buffer_ce0),
    .we0(grp_compression_fu_301_values_buffer_we0),
    .d0(grp_compression_fu_301_values_buffer_d0)
);

guitar_effects_delay_buffer_RAM_AUTO_1R1W #(
    .DataWidth( 16 ),
    .AddressRange( 44100 ),
    .AddressWidth( 16 ))
delay_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(delay_buffer_address0),
    .ce0(delay_buffer_ce0),
    .we0(delay_buffer_we0),
    .d0(delay_buffer_d0),
    .q0(delay_buffer_q0)
);

guitar_effects_guitar_effects_Pipeline_2 grp_guitar_effects_Pipeline_2_fu_296(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_guitar_effects_Pipeline_2_fu_296_ap_start),
    .ap_done(grp_guitar_effects_Pipeline_2_fu_296_ap_done),
    .ap_idle(grp_guitar_effects_Pipeline_2_fu_296_ap_idle),
    .ap_ready(grp_guitar_effects_Pipeline_2_fu_296_ap_ready),
    .delay_buffer_address0(grp_guitar_effects_Pipeline_2_fu_296_delay_buffer_address0),
    .delay_buffer_ce0(grp_guitar_effects_Pipeline_2_fu_296_delay_buffer_ce0),
    .delay_buffer_we0(grp_guitar_effects_Pipeline_2_fu_296_delay_buffer_we0),
    .delay_buffer_d0(grp_guitar_effects_Pipeline_2_fu_296_delay_buffer_d0)
);

guitar_effects_compression grp_compression_fu_301(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_compression_fu_301_ap_start),
    .ap_done(grp_compression_fu_301_ap_done),
    .ap_idle(grp_compression_fu_301_ap_idle),
    .ap_ready(grp_compression_fu_301_ap_ready),
    .input_r(tmp_short_reg_271),
    .min_threshold(compression_min_threshold_read_reg_919),
    .max_threshold(compression_max_threshold_read_reg_924),
    .zero_threshold(compression_zero_threshold_read_reg_929),
    .current_level_read(current_level_1_fu_154),
    .values_buffer_address0(grp_compression_fu_301_values_buffer_address0),
    .values_buffer_ce0(grp_compression_fu_301_values_buffer_ce0),
    .values_buffer_we0(grp_compression_fu_301_values_buffer_we0),
    .values_buffer_d0(grp_compression_fu_301_values_buffer_d0),
    .ap_return_0(grp_compression_fu_301_ap_return_0),
    .ap_return_1(grp_compression_fu_301_ap_return_1),
    .grp_fu_317_p_din0(grp_compression_fu_301_grp_fu_317_p_din0),
    .grp_fu_317_p_din1(grp_compression_fu_301_grp_fu_317_p_din1),
    .grp_fu_317_p_dout0(grp_fu_317_p2),
    .grp_fu_317_p_ce(grp_compression_fu_301_grp_fu_317_p_ce)
);

guitar_effects_control_r_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_R_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_R_DATA_WIDTH ))
control_r_s_axi_U(
    .AWVALID(s_axi_control_r_AWVALID),
    .AWREADY(s_axi_control_r_AWREADY),
    .AWADDR(s_axi_control_r_AWADDR),
    .WVALID(s_axi_control_r_WVALID),
    .WREADY(s_axi_control_r_WREADY),
    .WDATA(s_axi_control_r_WDATA),
    .WSTRB(s_axi_control_r_WSTRB),
    .ARVALID(s_axi_control_r_ARVALID),
    .ARREADY(s_axi_control_r_ARREADY),
    .ARADDR(s_axi_control_r_ARADDR),
    .RVALID(s_axi_control_r_RVALID),
    .RREADY(s_axi_control_r_RREADY),
    .RDATA(s_axi_control_r_RDATA),
    .RRESP(s_axi_control_r_RRESP),
    .BVALID(s_axi_control_r_BVALID),
    .BREADY(s_axi_control_r_BREADY),
    .BRESP(s_axi_control_r_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .control(control),
    .distortion_threshold(distortion_threshold),
    .distortion_clip_factor(distortion_clip_factor),
    .compression_min_threshold(compression_min_threshold),
    .compression_max_threshold(compression_max_threshold),
    .compression_zero_threshold(compression_zero_threshold),
    .delay_mult(delay_mult),
    .delay_samples(delay_samples)
);

guitar_effects_faddfsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_5_full_dsp_1_U16(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_313_p0),
    .din1(grp_fu_313_p1),
    .opcode(grp_fu_313_opcode),
    .ce(1'b1),
    .dout(grp_fu_313_p2)
);

guitar_effects_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U17(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_317_p0),
    .din1(grp_fu_317_p1),
    .ce(grp_fu_317_ce),
    .dout(grp_fu_317_p2)
);

guitar_effects_sitofp_32s_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32s_32_6_no_dsp_1_U18(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_321_p0),
    .ce(grp_fu_321_ce),
    .dout(grp_fu_321_p1)
);

guitar_effects_srem_17ns_17ns_17_21_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 21 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
srem_17ns_17ns_17_21_seq_1_U19(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_374_ap_start),
    .done(grp_fu_374_ap_done),
    .din0(grp_fu_374_p0),
    .din1(17'd44100),
    .ce(grp_fu_374_ce),
    .dout(grp_fu_374_p2)
);

guitar_effects_regslice_both #(
    .DataWidth( 16 ))
regslice_both_INPUT_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TDATA),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_data_V_U_ack_in),
    .data_out(INPUT_r_TDATA_int_regslice),
    .vld_out(INPUT_r_TVALID_int_regslice),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_data_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 2 ))
regslice_both_INPUT_r_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TKEEP),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_keep_V_U_ack_in),
    .data_out(INPUT_r_TKEEP_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_keep_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_keep_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 2 ))
regslice_both_INPUT_r_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TSTRB),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_strb_V_U_ack_in),
    .data_out(INPUT_r_TSTRB_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_strb_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_strb_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 2 ))
regslice_both_INPUT_r_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TUSER),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_user_V_U_ack_in),
    .data_out(INPUT_r_TUSER_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_user_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_user_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 1 ))
regslice_both_INPUT_r_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TLAST),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_last_V_U_ack_in),
    .data_out(INPUT_r_TLAST_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_last_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_last_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 5 ))
regslice_both_INPUT_r_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TID),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_id_V_U_ack_in),
    .data_out(INPUT_r_TID_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_id_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_id_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 6 ))
regslice_both_INPUT_r_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TDEST),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_dest_V_U_ack_in),
    .data_out(INPUT_r_TDEST_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_dest_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_dest_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 16 ))
regslice_both_OUTPUT_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_data_V_reg_984),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(OUTPUT_r_TREADY_int_regslice),
    .data_out(OUTPUT_r_TDATA),
    .vld_out(regslice_both_OUTPUT_r_V_data_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_data_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 2 ))
regslice_both_OUTPUT_r_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_keep_V_reg_991),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_keep_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TKEEP),
    .vld_out(regslice_both_OUTPUT_r_V_keep_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_keep_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 2 ))
regslice_both_OUTPUT_r_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_strb_V_reg_996),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_strb_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TSTRB),
    .vld_out(regslice_both_OUTPUT_r_V_strb_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_strb_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 2 ))
regslice_both_OUTPUT_r_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_user_V_reg_1001),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_user_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TUSER),
    .vld_out(regslice_both_OUTPUT_r_V_user_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_user_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 1 ))
regslice_both_OUTPUT_r_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_last_V_reg_1006),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_last_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TLAST),
    .vld_out(regslice_both_OUTPUT_r_V_last_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_last_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 5 ))
regslice_both_OUTPUT_r_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_id_V_reg_1011),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_id_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TID),
    .vld_out(regslice_both_OUTPUT_r_V_id_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_id_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 6 ))
regslice_both_OUTPUT_r_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_dest_V_reg_1016),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_dest_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TDEST),
    .vld_out(regslice_both_OUTPUT_r_V_dest_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_compression_fu_301_ap_start_reg <= 1'b0;
    end else begin
        if (((tmp_reg_902 == 1'd1) & (1'b1 == ap_CS_fsm_state59))) begin
            grp_compression_fu_301_ap_start_reg <= 1'b1;
        end else if ((grp_compression_fu_301_ap_ready == 1'b1)) begin
            grp_compression_fu_301_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_guitar_effects_Pipeline_2_fu_296_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state20)) begin
            grp_guitar_effects_Pipeline_2_fu_296_ap_start_reg <= 1'b1;
        end else if ((grp_guitar_effects_Pipeline_2_fu_296_ap_ready == 1'b1)) begin
            grp_guitar_effects_Pipeline_2_fu_296_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        current_level_1_fu_154 <= 16'd0;
    end else if (((1'b0 == ap_block_state60_on_subcall_done) & (tmp_reg_902 == 1'd1) & (1'b1 == ap_CS_fsm_state60))) begin
        current_level_1_fu_154 <= grp_compression_fu_301_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_902 == 1'd0) & (1'b1 == ap_CS_fsm_state59))) begin
        tmp_short_3_reg_285 <= tmp_short_reg_271;
    end else if (((1'b0 == ap_block_state60_on_subcall_done) & (tmp_reg_902 == 1'd1) & (1'b1 == ap_CS_fsm_state60))) begin
        tmp_short_3_reg_285 <= grp_compression_fu_301_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln96_fu_442_p2 == 1'd0) & (icmp_ln94_fu_437_p2 == 1'd0) & (tmp_reg_902 == 1'd1) & (1'b1 == INPUT_r_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state22)) | ((tmp_reg_902 == 1'd0) & (1'b1 == INPUT_r_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state22)))) begin
        tmp_short_reg_271 <= INPUT_r_TDATA_int_regslice;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        tmp_short_reg_271 <= result_V_9_fu_589_p3;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        tmp_short_reg_271 <= result_V_fu_727_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln96_fu_442_p2 == 1'd1) & (icmp_ln94_fu_437_p2 == 1'd0) & (tmp_reg_902 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        add_ln97_reg_1027 <= add_ln97_fu_447_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        clip_factor_assign_reg_959 <= clip_factor_assign_fu_392_p1;
        conv5_i_reg_974 <= grp_fu_321_p1;
        delay_buffer_addr_1_reg_979 <= idxprom_i_fu_400_p1;
        distortion_threshold_load_cast_reg_953 <= distortion_threshold_load_cast_fu_389_p1;
        negative_threshold_reg_969 <= negative_threshold_fu_395_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        compression_max_threshold_read_reg_924 <= compression_max_threshold;
        compression_min_threshold_read_reg_919 <= compression_min_threshold;
        compression_zero_threshold_read_reg_929 <= compression_zero_threshold;
        delay_mult_assign_reg_938 <= delay_mult_assign_fu_360_p1;
        distortion_clip_factor_read_reg_914 <= distortion_clip_factor;
        distortion_threshold_read_reg_906 <= distortion_threshold;
        tmp_2_reg_934 <= control[32'd4];
        tmp_reg_902 <= control[32'd7];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        delay_buffer_load_reg_1112 <= delay_buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        isNeg_1_reg_1052 <= add_ln346_1_fu_491_p2[32'd8];
        p_Result_2_reg_1042 <= data_V_1_fu_461_p1[32'd31];
        p_Result_3_reg_1047 <= p_Result_3_fu_483_p1;
        ush_1_reg_1057 <= ush_1_fu_515_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        isNeg_2_reg_1137 <= add_ln346_2_fu_790_p2[32'd8];
        p_Result_4_reg_1127 <= data_V_2_fu_760_p1[32'd31];
        p_Result_5_reg_1132 <= p_Result_5_fu_782_p1;
        ush_2_reg_1142 <= ush_2_fu_814_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        isNeg_reg_1088 <= add_ln346_fu_629_p2[32'd8];
        p_Result_1_reg_1083 <= p_Result_1_fu_621_p1;
        p_Result_s_reg_1078 <= data_V_fu_599_p1[32'd31];
        ush_reg_1093 <= ush_fu_653_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state28))) begin
        reg_324 <= grp_fu_321_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state71))) begin
        reg_330 <= grp_fu_317_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state37))) begin
        reg_336 <= grp_fu_313_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln94_fu_437_p2 == 1'd1) & (tmp_reg_902 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        sub_ln95_reg_1032 <= sub_ln95_fu_452_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_data_V_reg_984 <= INPUT_r_TDATA_int_regslice;
        tmp_dest_V_reg_1016 <= INPUT_r_TDEST_int_regslice;
        tmp_id_V_reg_1011 <= INPUT_r_TID_int_regslice;
        tmp_keep_V_reg_991 <= INPUT_r_TKEEP_int_regslice;
        tmp_last_V_reg_1006 <= INPUT_r_TLAST_int_regslice;
        tmp_strb_V_reg_996 <= INPUT_r_TSTRB_int_regslice;
        tmp_user_V_reg_1001 <= INPUT_r_TUSER_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        val_1_reg_1062 <= val_1_fu_577_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        val_2_reg_1147 <= val_2_fu_876_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        val_reg_1098 <= val_fu_715_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        INPUT_r_TDATA_blk_n = INPUT_r_TVALID_int_regslice;
    end else begin
        INPUT_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == INPUT_r_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state22))) begin
        INPUT_r_TREADY_int_regslice = 1'b1;
    end else begin
        INPUT_r_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79))) begin
        OUTPUT_r_TDATA_blk_n = OUTPUT_r_TREADY_int_regslice;
    end else begin
        OUTPUT_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == OUTPUT_r_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state79))) begin
        OUTPUT_r_TVALID_int_regslice = 1'b1;
    end else begin
        OUTPUT_r_TVALID_int_regslice = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

always @ (*) begin
    if ((grp_guitar_effects_Pipeline_2_fu_296_ap_done == 1'b0)) begin
        ap_ST_fsm_state21_blk = 1'b1;
    end else begin
        ap_ST_fsm_state21_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == INPUT_r_TVALID_int_regslice)) begin
        ap_ST_fsm_state22_blk = 1'b1;
    end else begin
        ap_ST_fsm_state22_blk = 1'b0;
    end
end

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state60_on_subcall_done)) begin
        ap_ST_fsm_state60_blk = 1'b1;
    end else begin
        ap_ST_fsm_state60_blk = 1'b0;
    end
end

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

assign ap_ST_fsm_state75_blk = 1'b0;

assign ap_ST_fsm_state76_blk = 1'b0;

assign ap_ST_fsm_state77_blk = 1'b0;

assign ap_ST_fsm_state78_blk = 1'b0;

always @ (*) begin
    if ((1'b0 == OUTPUT_r_TREADY_int_regslice)) begin
        ap_ST_fsm_state79_blk = 1'b1;
    end else begin
        ap_ST_fsm_state79_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if (((1'b0 == OUTPUT_r_TREADY_int_regslice) | (regslice_both_OUTPUT_r_V_data_V_U_apdone_blk == 1'b1))) begin
        ap_ST_fsm_state80_blk = 1'b1;
    end else begin
        ap_ST_fsm_state80_blk = 1'b0;
    end
end

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((~((1'b0 == OUTPUT_r_TREADY_int_regslice) | (regslice_both_OUTPUT_r_V_data_V_U_apdone_blk == 1'b1)) & (tmp_last_V_reg_1006 == 1'd1) & (1'b1 == ap_CS_fsm_state80))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_r_TREADY_int_regslice) | (regslice_both_OUTPUT_r_V_data_V_U_apdone_blk == 1'b1)) & (tmp_last_V_reg_1006 == 1'd1) & (1'b1 == ap_CS_fsm_state80))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        delay_buffer_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        delay_buffer_address0 = delay_buffer_addr_1_reg_979;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        delay_buffer_address0 = grp_guitar_effects_Pipeline_2_fu_296_delay_buffer_address0;
    end else begin
        delay_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state60_on_subcall_done) & (1'b1 == ap_CS_fsm_state60)) | ((1'b1 == OUTPUT_r_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state79)))) begin
        delay_buffer_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        delay_buffer_ce0 = grp_guitar_effects_Pipeline_2_fu_296_delay_buffer_ce0;
    end else begin
        delay_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        delay_buffer_d0 = result_V_10_fu_888_p3;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        delay_buffer_d0 = grp_guitar_effects_Pipeline_2_fu_296_delay_buffer_d0;
    end else begin
        delay_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if (((tmp_2_reg_934 == 1'd1) & (1'b1 == OUTPUT_r_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state79))) begin
        delay_buffer_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        delay_buffer_we0 = grp_guitar_effects_Pipeline_2_fu_296_delay_buffer_we0;
    end else begin
        delay_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_313_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state51))) begin
        grp_fu_313_opcode = 2'd0;
    end else begin
        grp_fu_313_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        grp_fu_313_p0 = reg_324;
    end else if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state33))) begin
        grp_fu_313_p0 = reg_330;
    end else begin
        grp_fu_313_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        grp_fu_313_p1 = reg_330;
    end else if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state33))) begin
        grp_fu_313_p1 = conv5_i_reg_974;
    end else begin
        grp_fu_313_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        grp_fu_317_ce = grp_compression_fu_301_grp_fu_317_p_ce;
    end else begin
        grp_fu_317_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        grp_fu_317_p0 = grp_compression_fu_301_grp_fu_317_p_din0;
    end else if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state29))) begin
        grp_fu_317_p0 = reg_324;
    end else begin
        grp_fu_317_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        grp_fu_317_p1 = grp_compression_fu_301_grp_fu_317_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        grp_fu_317_p1 = delay_mult_assign_reg_938;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state29))) begin
        grp_fu_317_p1 = clip_factor_assign_reg_959;
    end else begin
        grp_fu_317_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state28) | ((grp_guitar_effects_Pipeline_2_fu_296_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state21)))) begin
        grp_fu_321_ce = 1'b1;
    end else begin
        grp_fu_321_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        grp_fu_321_p0 = sext_ln157_fu_755_p1;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        grp_fu_321_p0 = sext_ln157_1_fu_751_p1;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_321_p0 = sext_ln95_fu_595_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_321_p0 = sext_ln97_fu_457_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_321_p0 = conv5_i42_fu_385_p1;
    end else begin
        grp_fu_321_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_374_ap_start = 1'b1;
    end else begin
        grp_fu_374_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        grp_fu_374_ce = 1'b1;
    end else begin
        grp_fu_374_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((grp_guitar_effects_Pipeline_2_fu_296_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((icmp_ln96_fu_442_p2 == 1'd1) & (icmp_ln94_fu_437_p2 == 1'd0) & (tmp_reg_902 == 1'd1) & (1'b1 == INPUT_r_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else if (((icmp_ln94_fu_437_p2 == 1'd1) & (tmp_reg_902 == 1'd1) & (1'b1 == INPUT_r_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else if (((1'b1 == INPUT_r_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state22) & ((tmp_reg_902 == 1'd0) | ((icmp_ln96_fu_442_p2 == 1'd0) & (icmp_ln94_fu_437_p2 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            if (((1'b0 == ap_block_state60_on_subcall_done) & (tmp_2_reg_934 == 1'd0) & (1'b1 == ap_CS_fsm_state60))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else if (((1'b0 == ap_block_state60_on_subcall_done) & (tmp_2_reg_934 == 1'd1) & (1'b1 == ap_CS_fsm_state60))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            if (((1'b1 == OUTPUT_r_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state79))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end
        end
        ap_ST_fsm_state80 : begin
            if ((~((1'b0 == OUTPUT_r_TREADY_int_regslice) | (regslice_both_OUTPUT_r_V_data_V_U_apdone_blk == 1'b1)) & (tmp_last_V_reg_1006 == 1'd1) & (1'b1 == ap_CS_fsm_state80))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((1'b0 == OUTPUT_r_TREADY_int_regslice) | (regslice_both_OUTPUT_r_V_data_V_U_apdone_blk == 1'b1)) & (tmp_last_V_reg_1006 == 1'd0) & (1'b1 == ap_CS_fsm_state80))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign INPUT_r_TREADY = regslice_both_INPUT_r_V_data_V_U_ack_in;

assign OUTPUT_r_TVALID = regslice_both_OUTPUT_r_V_data_V_U_vld_out;

assign add_ln346_1_fu_491_p2 = ($signed(zext_ln346_1_fu_487_p1) + $signed(9'd385));

assign add_ln346_2_fu_790_p2 = ($signed(zext_ln346_2_fu_786_p1) + $signed(9'd385));

assign add_ln346_fu_629_p2 = ($signed(zext_ln346_fu_625_p1) + $signed(9'd385));

assign add_ln97_fu_447_p2 = ($signed(sext_ln94_fu_433_p1) + $signed(distortion_threshold_load_cast_reg_953));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state60_on_subcall_done = ((grp_compression_fu_301_ap_done == 1'b0) & (tmp_reg_902 == 1'd1));
end

always @ (*) begin
    ap_block_state80 = ((1'b0 == OUTPUT_r_TREADY_int_regslice) | (regslice_both_OUTPUT_r_V_data_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign clip_factor_assign_fu_392_p1 = distortion_clip_factor_read_reg_914;

assign conv5_i42_fu_385_p1 = distortion_threshold_read_reg_906;

assign data_V_1_fu_461_p1 = reg_336;

assign data_V_2_fu_760_p1 = reg_336;

assign data_V_fu_599_p1 = reg_336;

assign delay_mult_assign_fu_360_p1 = delay_mult;

assign delay_samples_assign_cast_fu_364_p1 = $signed(empty_fu_356_p1);

assign distortion_threshold_load_cast_fu_389_p1 = distortion_threshold_read_reg_906;

assign empty_fu_356_p1 = delay_samples[15:0];

assign grp_compression_fu_301_ap_start = grp_compression_fu_301_ap_start_reg;

assign grp_fu_374_p0 = ($signed(17'd0) - $signed(delay_samples_assign_cast_fu_364_p1));

assign grp_guitar_effects_Pipeline_2_fu_296_ap_start = grp_guitar_effects_Pipeline_2_fu_296_ap_start_reg;

assign icmp_ln94_fu_437_p0 = INPUT_r_TDATA_int_regslice;

assign icmp_ln94_fu_437_p2 = (($signed(icmp_ln94_fu_437_p0) > $signed(distortion_threshold_read_reg_906)) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_442_p0 = INPUT_r_TDATA_int_regslice;

assign icmp_ln96_fu_442_p2 = (($signed(icmp_ln96_fu_442_p0) < $signed(negative_threshold_reg_969)) ? 1'b1 : 1'b0);

assign idxprom_i_fu_400_p1 = grp_fu_374_p2;

assign isNeg_1_fu_497_p3 = add_ln346_1_fu_491_p2[32'd8];

assign isNeg_2_fu_796_p3 = add_ln346_2_fu_790_p2[32'd8];

assign isNeg_fu_635_p3 = add_ln346_fu_629_p2[32'd8];

assign mantissa_1_fu_523_p4 = {{{{1'd1}, {p_Result_3_reg_1047}}}, {1'd0}};

assign mantissa_2_fu_822_p4 = {{{{1'd1}, {p_Result_5_reg_1132}}}, {1'd0}};

assign mantissa_fu_661_p4 = {{{{1'd1}, {p_Result_1_reg_1083}}}, {1'd0}};

assign negative_threshold_fu_395_p2 = ($signed(16'd0) - $signed(distortion_threshold_read_reg_906));

assign p_Result_1_fu_621_p1 = data_V_fu_599_p1[22:0];

assign p_Result_3_fu_483_p1 = data_V_1_fu_461_p1[22:0];

assign p_Result_5_fu_782_p1 = data_V_2_fu_760_p1[22:0];

assign r_V_1_fu_687_p2 = zext_ln15_fu_670_p1 << zext_ln1488_fu_677_p1;

assign r_V_2_fu_543_p2 = zext_ln15_1_fu_532_p1 >> zext_ln1488_1_fu_539_p1;

assign r_V_3_fu_549_p2 = zext_ln15_1_fu_532_p1 << zext_ln1488_1_fu_539_p1;

assign r_V_4_fu_842_p2 = zext_ln15_2_fu_831_p1 >> zext_ln1488_2_fu_838_p1;

assign r_V_5_fu_848_p2 = zext_ln15_2_fu_831_p1 << zext_ln1488_2_fu_838_p1;

assign r_V_fu_681_p2 = zext_ln15_fu_670_p1 >> zext_ln1488_fu_677_p1;

assign result_V_10_fu_888_p3 = ((p_Result_4_reg_1127[0:0] == 1'b1) ? result_V_8_fu_883_p2 : val_2_reg_1147);

assign result_V_2_fu_722_p2 = (16'd0 - val_reg_1098);

assign result_V_5_fu_584_p2 = (16'd0 - val_1_reg_1062);

assign result_V_8_fu_883_p2 = (16'd0 - val_2_reg_1147);

assign result_V_9_fu_589_p3 = ((p_Result_2_reg_1042[0:0] == 1'b1) ? result_V_5_fu_584_p2 : val_1_reg_1062);

assign result_V_fu_727_p3 = ((p_Result_s_reg_1078[0:0] == 1'b1) ? result_V_2_fu_722_p2 : val_reg_1098);

assign sext_ln1488_1_fu_536_p1 = $signed(ush_1_reg_1057);

assign sext_ln1488_2_fu_835_p1 = $signed(ush_2_reg_1142);

assign sext_ln1488_fu_674_p1 = $signed(ush_reg_1093);

assign sext_ln1512_1_fu_511_p1 = $signed(sub_ln1512_1_fu_505_p2);

assign sext_ln1512_2_fu_810_p1 = $signed(sub_ln1512_2_fu_804_p2);

assign sext_ln1512_fu_649_p1 = $signed(sub_ln1512_fu_643_p2);

assign sext_ln157_1_fu_751_p1 = delay_buffer_load_reg_1112;

assign sext_ln157_fu_755_p1 = $signed(tmp_short_3_reg_285);

assign sext_ln94_fu_433_p0 = INPUT_r_TDATA_int_regslice;

assign sext_ln94_fu_433_p1 = sext_ln94_fu_433_p0;

assign sext_ln95_fu_595_p1 = $signed(sub_ln95_reg_1032);

assign sext_ln97_fu_457_p1 = $signed(add_ln97_reg_1027);

assign sub_ln1512_1_fu_505_p2 = (8'd127 - xs_exp_V_1_fu_473_p4);

assign sub_ln1512_2_fu_804_p2 = (8'd127 - xs_exp_V_2_fu_772_p4);

assign sub_ln1512_fu_643_p2 = (8'd127 - xs_exp_V_fu_611_p4);

assign sub_ln95_fu_452_p2 = ($signed(sext_ln94_fu_433_p1) - $signed(distortion_threshold_load_cast_reg_953));

assign tmp_12_fu_555_p3 = r_V_2_fu_543_p2[32'd24];

assign tmp_16_fu_854_p3 = r_V_4_fu_842_p2[32'd24];

assign tmp_1_fu_705_p4 = {{r_V_1_fu_687_p2[39:24]}};

assign tmp_4_fu_567_p4 = {{r_V_3_fu_549_p2[39:24]}};

assign tmp_7_fu_866_p4 = {{r_V_5_fu_848_p2[39:24]}};

assign tmp_8_fu_693_p3 = r_V_fu_681_p2[32'd24];

assign ush_1_fu_515_p3 = ((isNeg_1_fu_497_p3[0:0] == 1'b1) ? sext_ln1512_1_fu_511_p1 : add_ln346_1_fu_491_p2);

assign ush_2_fu_814_p3 = ((isNeg_2_fu_796_p3[0:0] == 1'b1) ? sext_ln1512_2_fu_810_p1 : add_ln346_2_fu_790_p2);

assign ush_fu_653_p3 = ((isNeg_fu_635_p3[0:0] == 1'b1) ? sext_ln1512_fu_649_p1 : add_ln346_fu_629_p2);

assign val_1_fu_577_p3 = ((isNeg_1_reg_1052[0:0] == 1'b1) ? zext_ln818_1_fu_563_p1 : tmp_4_fu_567_p4);

assign val_2_fu_876_p3 = ((isNeg_2_reg_1137[0:0] == 1'b1) ? zext_ln818_2_fu_862_p1 : tmp_7_fu_866_p4);

assign val_fu_715_p3 = ((isNeg_reg_1088[0:0] == 1'b1) ? zext_ln818_fu_701_p1 : tmp_1_fu_705_p4);

assign xs_exp_V_1_fu_473_p4 = {{data_V_1_fu_461_p1[30:23]}};

assign xs_exp_V_2_fu_772_p4 = {{data_V_2_fu_760_p1[30:23]}};

assign xs_exp_V_fu_611_p4 = {{data_V_fu_599_p1[30:23]}};

assign zext_ln1488_1_fu_539_p1 = $unsigned(sext_ln1488_1_fu_536_p1);

assign zext_ln1488_2_fu_838_p1 = $unsigned(sext_ln1488_2_fu_835_p1);

assign zext_ln1488_fu_677_p1 = $unsigned(sext_ln1488_fu_674_p1);

assign zext_ln15_1_fu_532_p1 = mantissa_1_fu_523_p4;

assign zext_ln15_2_fu_831_p1 = mantissa_2_fu_822_p4;

assign zext_ln15_fu_670_p1 = mantissa_fu_661_p4;

assign zext_ln346_1_fu_487_p1 = xs_exp_V_1_fu_473_p4;

assign zext_ln346_2_fu_786_p1 = xs_exp_V_2_fu_772_p4;

assign zext_ln346_fu_625_p1 = xs_exp_V_fu_611_p4;

assign zext_ln818_1_fu_563_p1 = tmp_12_fu_555_p3;

assign zext_ln818_2_fu_862_p1 = tmp_16_fu_854_p3;

assign zext_ln818_fu_701_p1 = tmp_8_fu_693_p3;

endmodule //guitar_effects
