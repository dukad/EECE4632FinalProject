-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity guitar_effects_compression is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r : IN STD_LOGIC_VECTOR (15 downto 0);
    min_threshold : IN STD_LOGIC_VECTOR (15 downto 0);
    max_threshold : IN STD_LOGIC_VECTOR (15 downto 0);
    zero_threshold : IN STD_LOGIC_VECTOR (15 downto 0);
    current_level_read : IN STD_LOGIC_VECTOR (15 downto 0);
    values_buffer_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    values_buffer_ce0 : OUT STD_LOGIC;
    values_buffer_we0 : OUT STD_LOGIC;
    values_buffer_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    grp_fu_317_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_317_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_317_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_317_p_ce : OUT STD_LOGIC );
end;


architecture behav of guitar_effects_compression is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (60 downto 0) := "0000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (60 downto 0) := "0000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (60 downto 0) := "0000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (60 downto 0) := "0000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (60 downto 0) := "0000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (60 downto 0) := "0000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (60 downto 0) := "0001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (60 downto 0) := "0010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (60 downto 0) := "0100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (60 downto 0) := "1000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_121_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_127 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal grp_fu_124_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal icmp_ln128_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln128_reg_530 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln137_1_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln137_1_reg_537 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln131_fu_209_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln129_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln131_1_fu_214_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_203_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sdiv_ln139_reg_551 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal sext_ln139_fu_219_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal sext_ln140_fu_223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_7_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal p_Result_8_fu_249_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_8_reg_571 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_3_fu_263_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_3_reg_576 : STD_LOGIC_VECTOR (0 downto 0);
    signal ush_3_fu_281_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_3_reg_581 : STD_LOGIC_VECTOR (8 downto 0);
    signal val_3_fu_343_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal val_3_reg_586 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal sext_ln132_fu_373_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_fu_117_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_factor_reg_597 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_602 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal p_Result_6_fu_399_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_6_reg_607 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_fu_413_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_612 : STD_LOGIC_VECTOR (0 downto 0);
    signal ush_fu_431_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_reg_617 : STD_LOGIC_VECTOR (8 downto 0);
    signal val_fu_493_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal val_reg_622 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal result_V_fu_505_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_phi_mux_output_2_phi_fu_103_p8 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_2_reg_100 : STD_LOGIC_VECTOR (15 downto 0);
    signal result_V_17_fu_355_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_fu_113_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_113_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_fu_121_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_124_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_144_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal abs_in_fu_152_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_144_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal abs_in_fu_152_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal abs_in_1_fu_158_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln128_fu_167_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln128_fu_167_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln129_fu_173_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln137_fu_179_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln137_1_fu_185_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln137_1_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln137_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln131_fu_209_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln131_1_fu_214_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln140_fu_223_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_3_fu_227_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xs_exp_V_3_fu_239_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln346_3_fu_253_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_3_fu_257_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1512_3_fu_271_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1512_3_fu_277_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mantissa_3_fu_289_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1488_3_fu_302_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_3_fu_298_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1488_3_fu_305_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_7_fu_309_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_24_fu_321_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_8_fu_315_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln818_3_fu_329_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_333_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal result_V_16_fu_350_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln132_fu_373_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_fu_377_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xs_exp_V_fu_389_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln346_fu_403_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_fu_407_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1512_fu_421_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1512_fu_427_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mantissa_fu_439_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1488_fu_452_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_448_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1488_fu_455_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_fu_459_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_20_fu_471_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_6_fu_465_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln818_fu_479_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_483_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal result_V_12_fu_500_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_203_ap_start : STD_LOGIC;
    signal grp_fu_203_ap_done : STD_LOGIC;
    signal ap_return_0_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (60 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component guitar_effects_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_fdiv_32ns_32ns_32_16_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_sitofp_32s_32_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_sdiv_16ns_16s_16_20_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    fdiv_32ns_32ns_32_16_no_dsp_1_U3 : component guitar_effects_fdiv_32ns_32ns_32_16_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_127,
        din1 => reg_134,
        ce => ap_const_logic_1,
        dout => grp_fu_117_p2);

    sitofp_32s_32_6_no_dsp_1_U4 : component guitar_effects_sitofp_32s_32_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_121_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_121_p1);

    sitofp_32s_32_6_no_dsp_1_U5 : component guitar_effects_sitofp_32s_32_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_124_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_124_p1);

    sdiv_16ns_16s_16_20_seq_1_U6 : component guitar_effects_sdiv_16ns_16s_16_20_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_203_ap_start,
        done => grp_fu_203_ap_done,
        din0 => min_threshold,
        din1 => current_level_read,
        ce => ap_const_logic_1,
        dout => grp_fu_203_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                    ap_return_0_preg <= ap_phi_mux_output_2_phi_fu_103_p8;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                    ap_return_1_preg <= current_level_read;
                end if; 
            end if;
        end if;
    end process;


    output_2_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv1_0 = and_ln137_1_fu_197_p2) and (icmp_ln128_fu_167_p2 = ap_const_lv1_0)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln129_fu_173_p2 = ap_const_lv1_0) and (icmp_ln128_fu_167_p2 = ap_const_lv1_1)))) then 
                output_2_reg_100 <= input_r;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_1 = and_ln137_1_reg_537) and (icmp_ln128_reg_530 = ap_const_lv1_0))) then 
                output_2_reg_100 <= result_V_17_fu_355_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
                output_2_reg_100 <= result_V_fu_505_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln128_fu_167_p2 = ap_const_lv1_0))) then
                and_ln137_1_reg_537 <= and_ln137_1_fu_197_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                compression_factor_reg_597 <= grp_fu_117_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln128_reg_530 <= icmp_ln128_fu_167_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                isNeg_3_reg_576 <= add_ln346_3_fu_257_p2(8 downto 8);
                p_Result_7_reg_566 <= data_V_3_fu_227_p1(31 downto 31);
                p_Result_8_reg_571 <= p_Result_8_fu_249_p1;
                ush_3_reg_581 <= ush_3_fu_281_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                isNeg_reg_612 <= add_ln346_fu_407_p2(8 downto 8);
                p_Result_6_reg_607 <= p_Result_6_fu_399_p1;
                p_Result_s_reg_602 <= data_V_fu_377_p1(31 downto 31);
                ush_reg_617 <= ush_fu_431_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state26))) then
                reg_127 <= grp_fu_121_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state26))) then
                reg_134 <= grp_fu_124_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state30))) then
                reg_140 <= grp_fu_317_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                sdiv_ln139_reg_551 <= grp_fu_203_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                val_3_reg_586 <= val_3_fu_343_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then
                val_reg_622 <= val_fu_493_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln128_fu_167_p2, and_ln137_1_fu_197_p2, icmp_ln129_fu_173_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln129_fu_173_p2 = ap_const_lv1_1) and (icmp_ln128_fu_167_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (((ap_const_lv1_0 = and_ln137_1_fu_197_p2) and (icmp_ln128_fu_167_p2 = ap_const_lv1_0)) or ((icmp_ln129_fu_173_p2 = ap_const_lv1_0) and (icmp_ln128_fu_167_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv1_1 = and_ln137_1_fu_197_p2) and (icmp_ln128_fu_167_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    abs_in_1_fu_158_p2 <= input_r;
    abs_in_fu_152_p1 <= input_r;
    abs_in_fu_152_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(abs_in_fu_152_p1));
    add_ln346_3_fu_257_p2 <= std_logic_vector(unsigned(zext_ln346_3_fu_253_p1) + unsigned(ap_const_lv9_181));
    add_ln346_fu_407_p2 <= std_logic_vector(unsigned(zext_ln346_fu_403_p1) + unsigned(ap_const_lv9_181));
    and_ln137_1_fu_197_p2 <= (icmp_ln137_fu_179_p2 and and_ln137_fu_191_p2);
    and_ln137_fu_191_p2 <= (icmp_ln137_1_fu_185_p2 and icmp_ln129_fu_173_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_output_2_phi_fu_103_p8_assign_proc : process(icmp_ln128_reg_530, and_ln137_1_reg_537, output_2_reg_100, result_V_17_fu_355_p3, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_1 = and_ln137_1_reg_537) and (icmp_ln128_reg_530 = ap_const_lv1_0))) then 
            ap_phi_mux_output_2_phi_fu_103_p8 <= result_V_17_fu_355_p3;
        else 
            ap_phi_mux_output_2_phi_fu_103_p8 <= output_2_reg_100;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_phi_mux_output_2_phi_fu_103_p8, ap_CS_fsm_state33, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            ap_return_0 <= ap_phi_mux_output_2_phi_fu_103_p8;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(current_level_read, ap_CS_fsm_state33, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            ap_return_1 <= current_level_read;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    data_V_3_fu_227_p1 <= reg_140;
    data_V_fu_377_p1 <= reg_140;

    grp_fu_113_p0_assign_proc : process(reg_127, reg_134, ap_CS_fsm_state27, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_113_p0 <= reg_127;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_113_p0 <= reg_134;
        else 
            grp_fu_113_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_113_p1_assign_proc : process(reg_127, compression_factor_reg_597, ap_CS_fsm_state27, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_113_p1 <= compression_factor_reg_597;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_113_p1 <= reg_127;
        else 
            grp_fu_113_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_121_p0_assign_proc : process(ap_CS_fsm_state1, sext_ln131_fu_209_p1, sext_ln139_fu_219_p1, ap_CS_fsm_state21, sext_ln132_fu_373_p1, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_121_p0 <= sext_ln132_fu_373_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_121_p0 <= sext_ln139_fu_219_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_121_p0 <= sext_ln131_fu_209_p1;
        else 
            grp_fu_121_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_124_p0_assign_proc : process(ap_CS_fsm_state1, sext_ln131_1_fu_214_p1, ap_CS_fsm_state21, sext_ln140_fu_223_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_124_p0 <= sext_ln140_fu_223_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_124_p0 <= sext_ln131_1_fu_214_p1;
        else 
            grp_fu_124_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_203_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln128_fu_167_p2, and_ln137_1_fu_197_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv1_1 = and_ln137_1_fu_197_p2) and (icmp_ln128_fu_167_p2 = ap_const_lv1_0))) then 
            grp_fu_203_ap_start <= ap_const_logic_1;
        else 
            grp_fu_203_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_317_p_ce <= ap_const_logic_1;
    grp_fu_317_p_din0 <= grp_fu_113_p0;
    grp_fu_317_p_din1 <= grp_fu_113_p1;
    icmp_ln128_fu_167_p0 <= current_level_read;
    icmp_ln128_fu_167_p1 <= max_threshold;
    icmp_ln128_fu_167_p2 <= "1" when (signed(icmp_ln128_fu_167_p0) > signed(icmp_ln128_fu_167_p1)) else "0";
    icmp_ln129_fu_173_p0 <= current_level_read;
    icmp_ln129_fu_173_p2 <= "1" when (signed(icmp_ln129_fu_173_p0) > signed(ap_const_lv16_0)) else "0";
    icmp_ln137_1_fu_185_p0 <= current_level_read;
    icmp_ln137_1_fu_185_p2 <= "1" when (signed(icmp_ln137_1_fu_185_p0) > signed(zero_threshold)) else "0";
    icmp_ln137_fu_179_p0 <= current_level_read;
    icmp_ln137_fu_179_p2 <= "1" when (signed(icmp_ln137_fu_179_p0) < signed(min_threshold)) else "0";
    isNeg_3_fu_263_p3 <= add_ln346_3_fu_257_p2(8 downto 8);
    isNeg_fu_413_p3 <= add_ln346_fu_407_p2(8 downto 8);
    mantissa_3_fu_289_p4 <= ((ap_const_lv1_1 & p_Result_8_reg_571) & ap_const_lv1_0);
    mantissa_fu_439_p4 <= ((ap_const_lv1_1 & p_Result_6_reg_607) & ap_const_lv1_0);
    p_Result_6_fu_399_p1 <= data_V_fu_377_p1(23 - 1 downto 0);
    p_Result_8_fu_249_p1 <= data_V_3_fu_227_p1(23 - 1 downto 0);
    r_V_6_fu_465_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_448_p1),to_integer(unsigned('0' & zext_ln1488_fu_455_p1(31-1 downto 0)))));
    r_V_7_fu_309_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_3_fu_298_p1),to_integer(unsigned('0' & zext_ln1488_3_fu_305_p1(31-1 downto 0)))));
    r_V_8_fu_315_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_3_fu_298_p1),to_integer(unsigned('0' & zext_ln1488_3_fu_305_p1(31-1 downto 0)))));
    r_V_fu_459_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_448_p1),to_integer(unsigned('0' & zext_ln1488_fu_455_p1(31-1 downto 0)))));
    result_V_12_fu_500_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(val_reg_622));
    result_V_16_fu_350_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(val_3_reg_586));
    result_V_17_fu_355_p3 <= 
        result_V_16_fu_350_p2 when (p_Result_7_reg_566(0) = '1') else 
        val_3_reg_586;
    result_V_fu_505_p3 <= 
        result_V_12_fu_500_p2 when (p_Result_s_reg_602(0) = '1') else 
        val_reg_622;
    sext_ln131_1_fu_214_p0 <= current_level_read;
        sext_ln131_1_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln131_1_fu_214_p0),32));

    sext_ln131_fu_209_p0 <= max_threshold;
        sext_ln131_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln131_fu_209_p0),32));

    sext_ln132_fu_373_p0 <= input_r;
        sext_ln132_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln132_fu_373_p0),32));

        sext_ln139_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sdiv_ln139_reg_551),32));

    sext_ln140_fu_223_p0 <= input_r;
        sext_ln140_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln140_fu_223_p0),32));

        sext_ln1488_3_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_3_reg_581),32));

        sext_ln1488_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_617),32));

        sext_ln1512_3_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_3_fu_271_p2),9));

        sext_ln1512_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_fu_421_p2),9));

    sub_ln1512_3_fu_271_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_V_3_fu_239_p4));
    sub_ln1512_fu_421_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_V_fu_389_p4));
    tmp_20_fu_471_p3 <= r_V_fu_459_p2(24 downto 24);
    tmp_24_fu_321_p3 <= r_V_7_fu_309_p2(24 downto 24);
    tmp_8_fu_483_p4 <= r_V_6_fu_465_p2(39 downto 24);
    tmp_fu_144_p1 <= input_r;
    tmp_fu_144_p3 <= tmp_fu_144_p1(15 downto 15);
    tmp_s_fu_333_p4 <= r_V_8_fu_315_p2(39 downto 24);
    ush_3_fu_281_p3 <= 
        sext_ln1512_3_fu_277_p1 when (isNeg_3_fu_263_p3(0) = '1') else 
        add_ln346_3_fu_257_p2;
    ush_fu_431_p3 <= 
        sext_ln1512_fu_427_p1 when (isNeg_fu_413_p3(0) = '1') else 
        add_ln346_fu_407_p2;
    val_3_fu_343_p3 <= 
        zext_ln818_3_fu_329_p1 when (isNeg_3_reg_576(0) = '1') else 
        tmp_s_fu_333_p4;
    val_fu_493_p3 <= 
        zext_ln818_fu_479_p1 when (isNeg_reg_612(0) = '1') else 
        tmp_8_fu_483_p4;
    values_buffer_address0 <= ap_const_lv64_0(9 - 1 downto 0);

    values_buffer_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            values_buffer_ce0 <= ap_const_logic_1;
        else 
            values_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    values_buffer_d0 <= 
        abs_in_fu_152_p2 when (tmp_fu_144_p3(0) = '1') else 
        abs_in_1_fu_158_p2;

    values_buffer_we0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            values_buffer_we0 <= ap_const_logic_1;
        else 
            values_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xs_exp_V_3_fu_239_p4 <= data_V_3_fu_227_p1(30 downto 23);
    xs_exp_V_fu_389_p4 <= data_V_fu_377_p1(30 downto 23);
    zext_ln1488_3_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_3_fu_302_p1),63));
    zext_ln1488_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_fu_452_p1),63));
    zext_ln15_3_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_3_fu_289_p4),63));
    zext_ln15_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_439_p4),63));
    zext_ln346_3_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_3_fu_239_p4),9));
    zext_ln346_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_fu_389_p4),9));
    zext_ln818_3_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_321_p3),16));
    zext_ln818_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_471_p3),16));
end behav;
