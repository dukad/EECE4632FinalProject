-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity guitar_effects is
generic (
    C_S_AXI_CONTROL_R_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_R_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    INPUT_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    INPUT_r_TVALID : IN STD_LOGIC;
    INPUT_r_TREADY : OUT STD_LOGIC;
    INPUT_r_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_r_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_r_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    INPUT_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_r_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    INPUT_r_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    OUTPUT_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUTPUT_r_TVALID : OUT STD_LOGIC;
    OUTPUT_r_TREADY : IN STD_LOGIC;
    OUTPUT_r_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_r_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_r_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    OUTPUT_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_r_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    OUTPUT_r_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_control_r_AWVALID : IN STD_LOGIC;
    s_axi_control_r_AWREADY : OUT STD_LOGIC;
    s_axi_control_r_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_ADDR_WIDTH-1 downto 0);
    s_axi_control_r_WVALID : IN STD_LOGIC;
    s_axi_control_r_WREADY : OUT STD_LOGIC;
    s_axi_control_r_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH-1 downto 0);
    s_axi_control_r_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH/8-1 downto 0);
    s_axi_control_r_ARVALID : IN STD_LOGIC;
    s_axi_control_r_ARREADY : OUT STD_LOGIC;
    s_axi_control_r_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_ADDR_WIDTH-1 downto 0);
    s_axi_control_r_RVALID : OUT STD_LOGIC;
    s_axi_control_r_RREADY : IN STD_LOGIC;
    s_axi_control_r_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH-1 downto 0);
    s_axi_control_r_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_r_BVALID : OUT STD_LOGIC;
    s_axi_control_r_BREADY : IN STD_LOGIC;
    s_axi_control_r_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of guitar_effects is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "guitar_effects_guitar_effects,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=129,HLS_SYN_DSP=0,HLS_SYN_FF=3222,HLS_SYN_LUT=5584,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (62 downto 0) := "000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (62 downto 0) := "000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (62 downto 0) := "000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (62 downto 0) := "000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (62 downto 0) := "000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (62 downto 0) := "000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (62 downto 0) := "000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (62 downto 0) := "000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (62 downto 0) := "000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (62 downto 0) := "001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (62 downto 0) := "010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (62 downto 0) := "100000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_AC44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001010110001000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal axilite_out : STD_LOGIC_VECTOR (31 downto 0);
    signal axilite_out_ap_vld : STD_LOGIC;
    signal control : STD_LOGIC_VECTOR (7 downto 0);
    signal distortion_threshold : STD_LOGIC_VECTOR (31 downto 0);
    signal distortion_clip_factor : STD_LOGIC_VECTOR (0 downto 0);
    signal compression_min_threshold : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_max_threshold : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_zero_threshold : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_mult : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_samples : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal OUTPUT_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal tmp_last_V_reg_884 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal grp_fu_396_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_400 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal delay_samples_read_reg_778 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal delay_mult_read_reg_783 : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_zero_threshold_read_reg_788 : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_max_threshold_read_reg_793 : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_min_threshold_read_reg_798 : STD_LOGIC_VECTOR (31 downto 0);
    signal distortion_clip_factor_read_reg_803 : STD_LOGIC_VECTOR (0 downto 0);
    signal distortion_threshold_read_reg_809 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln18_fu_406_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln18_reg_817 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln18_1_fu_410_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln18_1_reg_823 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_828 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_832 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_836 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal negative_threshold_fu_459_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal negative_threshold_reg_850 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_buffer_addr_1_reg_855 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_keep_V_reg_869 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_strb_V_reg_874 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_user_V_reg_879 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_id_V_reg_888 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_dest_V_reg_893 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln74_fu_508_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln74_reg_898 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_1_fu_550_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_1_reg_911 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln117_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_fu_575_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln79_fu_584_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal delay_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_buffer_load_reg_934 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal grp_fu_392_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_i_reg_939 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_388_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_reg_944 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal p_Result_s_reg_949 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal p_Result_1_fu_624_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_1_reg_954 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_fu_638_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_959 : STD_LOGIC_VECTOR (0 downto 0);
    signal ush_fu_656_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_reg_964 : STD_LOGIC_VECTOR (8 downto 0);
    signal val_fu_718_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_reg_969 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal delay_buffer_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_buffer_ce0 : STD_LOGIC;
    signal delay_buffer_we0 : STD_LOGIC;
    signal delay_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_guitar_effects_Pipeline_2_fu_371_ap_start : STD_LOGIC;
    signal grp_guitar_effects_Pipeline_2_fu_371_ap_done : STD_LOGIC;
    signal grp_guitar_effects_Pipeline_2_fu_371_ap_idle : STD_LOGIC;
    signal grp_guitar_effects_Pipeline_2_fu_371_ap_ready : STD_LOGIC;
    signal grp_guitar_effects_Pipeline_2_fu_371_delay_buffer_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_guitar_effects_Pipeline_2_fu_371_delay_buffer_ce0 : STD_LOGIC;
    signal grp_guitar_effects_Pipeline_2_fu_371_delay_buffer_we0 : STD_LOGIC;
    signal grp_guitar_effects_Pipeline_2_fu_371_delay_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compression_fu_376_ap_start : STD_LOGIC;
    signal grp_compression_fu_376_ap_done : STD_LOGIC;
    signal grp_compression_fu_376_ap_idle : STD_LOGIC;
    signal grp_compression_fu_376_ap_ready : STD_LOGIC;
    signal grp_compression_fu_376_values_buffer_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_compression_fu_376_values_buffer_ce0 : STD_LOGIC;
    signal grp_compression_fu_376_values_buffer_we0 : STD_LOGIC;
    signal grp_compression_fu_376_values_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compression_fu_376_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compression_fu_376_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compression_fu_376_grp_fu_392_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compression_fu_376_grp_fu_392_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compression_fu_376_grp_fu_392_p_ce : STD_LOGIC;
    signal grp_compression_fu_376_grp_fu_396_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compression_fu_376_grp_fu_396_p_ce : STD_LOGIC;
    signal empty_30_reg_298 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal tmp_int_reg_312 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_31_reg_326 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal tmp_int_3_reg_337 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln84_fu_725_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_empty_32_phi_fu_351_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_32_reg_348 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state61 : BOOLEAN;
    signal ap_block_state61_io : BOOLEAN;
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal result_V_fu_737_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_tmp_int_6_phi_fu_362_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_int_6_reg_358 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_guitar_effects_Pipeline_2_fu_371_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal grp_compression_fu_376_ap_start_reg : STD_LOGIC := '0';
    signal idxprom_i_cast_fu_468_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln87_fu_751_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_level_1_fu_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal grp_fu_392_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_392_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal grp_fu_396_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_fu_453_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_453_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_453_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_28_fu_464_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln283_fu_504_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_fu_524_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sub_ln1319_1_fu_529_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal select_ln1319_1_fu_535_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal lhs_1_fu_542_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1319_fu_555_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal select_ln1319_fu_560_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal lhs_fu_567_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_fu_603_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xs_exp_V_fu_614_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln346_fu_628_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_fu_632_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1512_fu_646_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1512_fu_652_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mantissa_fu_664_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1488_fu_677_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_673_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1488_fu_680_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_1_fu_684_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_7_fu_696_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_2_fu_690_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln818_fu_704_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_708_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_2_fu_732_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln89_fu_745_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_392_ce : STD_LOGIC;
    signal grp_fu_396_ce : STD_LOGIC;
    signal grp_fu_453_ap_start : STD_LOGIC;
    signal grp_fu_453_ap_done : STD_LOGIC;
    signal grp_fu_453_ce : STD_LOGIC;
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state63 : BOOLEAN;
    signal regslice_both_INPUT_r_V_data_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_r_TVALID_int_regslice : STD_LOGIC;
    signal INPUT_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_INPUT_r_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_r_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_INPUT_r_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_r_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_r_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_INPUT_r_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_r_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_r_V_user_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TUSER_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_INPUT_r_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_r_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_r_V_last_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_INPUT_r_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_r_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_r_V_id_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TID_int_regslice : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_INPUT_r_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_r_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_r_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TDEST_int_regslice : STD_LOGIC_VECTOR (5 downto 0);
    signal regslice_both_INPUT_r_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_r_V_dest_V_U_ack_in : STD_LOGIC;
    signal OUTPUT_r_TVALID_int_regslice : STD_LOGIC;
    signal OUTPUT_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_last_V_U_apdone_blk : STD_LOGIC;
    signal OUTPUT_r_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_OUTPUT_r_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_condition_1238 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component guitar_effects_guitar_effects_Pipeline_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        delay_buffer_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        delay_buffer_ce0 : OUT STD_LOGIC;
        delay_buffer_we0 : OUT STD_LOGIC;
        delay_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_compression IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r : IN STD_LOGIC_VECTOR (31 downto 0);
        min_threshold : IN STD_LOGIC_VECTOR (31 downto 0);
        max_threshold : IN STD_LOGIC_VECTOR (31 downto 0);
        zero_threshold : IN STD_LOGIC_VECTOR (31 downto 0);
        current_level_read : IN STD_LOGIC_VECTOR (31 downto 0);
        values_buffer_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        values_buffer_ce0 : OUT STD_LOGIC;
        values_buffer_we0 : OUT STD_LOGIC;
        values_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_392_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_392_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_392_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_392_p_ce : OUT STD_LOGIC;
        grp_fu_396_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_396_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_396_p_ce : OUT STD_LOGIC );
    end component;


    component guitar_effects_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_sitofp_32ns_32_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_srem_32ns_17ns_16_36_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component guitar_effects_compression_buffer_RAM_AUTO_0R0W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_delay_buffer_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_control_r_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        axilite_out : IN STD_LOGIC_VECTOR (31 downto 0);
        axilite_out_ap_vld : IN STD_LOGIC;
        control : OUT STD_LOGIC_VECTOR (7 downto 0);
        distortion_threshold : OUT STD_LOGIC_VECTOR (31 downto 0);
        distortion_clip_factor : OUT STD_LOGIC_VECTOR (0 downto 0);
        compression_min_threshold : OUT STD_LOGIC_VECTOR (31 downto 0);
        compression_max_threshold : OUT STD_LOGIC_VECTOR (31 downto 0);
        compression_zero_threshold : OUT STD_LOGIC_VECTOR (31 downto 0);
        delay_mult : OUT STD_LOGIC_VECTOR (31 downto 0);
        delay_samples : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    compression_buffer_U : component guitar_effects_compression_buffer_RAM_AUTO_0R0W
    generic map (
        DataWidth => 32,
        AddressRange => 441,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_compression_fu_376_values_buffer_address0,
        ce0 => grp_compression_fu_376_values_buffer_ce0,
        we0 => grp_compression_fu_376_values_buffer_we0,
        d0 => grp_compression_fu_376_values_buffer_d0);

    delay_buffer_U : component guitar_effects_delay_buffer_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 44100,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => delay_buffer_address0,
        ce0 => delay_buffer_ce0,
        we0 => delay_buffer_we0,
        d0 => delay_buffer_d0,
        q0 => delay_buffer_q0);

    grp_guitar_effects_Pipeline_2_fu_371 : component guitar_effects_guitar_effects_Pipeline_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_guitar_effects_Pipeline_2_fu_371_ap_start,
        ap_done => grp_guitar_effects_Pipeline_2_fu_371_ap_done,
        ap_idle => grp_guitar_effects_Pipeline_2_fu_371_ap_idle,
        ap_ready => grp_guitar_effects_Pipeline_2_fu_371_ap_ready,
        delay_buffer_address0 => grp_guitar_effects_Pipeline_2_fu_371_delay_buffer_address0,
        delay_buffer_ce0 => grp_guitar_effects_Pipeline_2_fu_371_delay_buffer_ce0,
        delay_buffer_we0 => grp_guitar_effects_Pipeline_2_fu_371_delay_buffer_we0,
        delay_buffer_d0 => grp_guitar_effects_Pipeline_2_fu_371_delay_buffer_d0);

    grp_compression_fu_376 : component guitar_effects_compression
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_compression_fu_376_ap_start,
        ap_done => grp_compression_fu_376_ap_done,
        ap_idle => grp_compression_fu_376_ap_idle,
        ap_ready => grp_compression_fu_376_ap_ready,
        input_r => tmp_int_reg_312,
        min_threshold => compression_min_threshold_read_reg_798,
        max_threshold => compression_max_threshold_read_reg_793,
        zero_threshold => compression_zero_threshold_read_reg_788,
        current_level_read => current_level_1_fu_172,
        values_buffer_address0 => grp_compression_fu_376_values_buffer_address0,
        values_buffer_ce0 => grp_compression_fu_376_values_buffer_ce0,
        values_buffer_we0 => grp_compression_fu_376_values_buffer_we0,
        values_buffer_d0 => grp_compression_fu_376_values_buffer_d0,
        ap_return_0 => grp_compression_fu_376_ap_return_0,
        ap_return_1 => grp_compression_fu_376_ap_return_1,
        grp_fu_392_p_din0 => grp_compression_fu_376_grp_fu_392_p_din0,
        grp_fu_392_p_din1 => grp_compression_fu_376_grp_fu_392_p_din1,
        grp_fu_392_p_dout0 => grp_fu_392_p2,
        grp_fu_392_p_ce => grp_compression_fu_376_grp_fu_392_p_ce,
        grp_fu_396_p_din0 => grp_compression_fu_376_grp_fu_396_p_din0,
        grp_fu_396_p_dout0 => grp_fu_396_p1,
        grp_fu_396_p_ce => grp_compression_fu_376_grp_fu_396_p_ce);

    control_r_s_axi_U : component guitar_effects_control_r_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_R_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_R_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_r_AWVALID,
        AWREADY => s_axi_control_r_AWREADY,
        AWADDR => s_axi_control_r_AWADDR,
        WVALID => s_axi_control_r_WVALID,
        WREADY => s_axi_control_r_WREADY,
        WDATA => s_axi_control_r_WDATA,
        WSTRB => s_axi_control_r_WSTRB,
        ARVALID => s_axi_control_r_ARVALID,
        ARREADY => s_axi_control_r_ARREADY,
        ARADDR => s_axi_control_r_ARADDR,
        RVALID => s_axi_control_r_RVALID,
        RREADY => s_axi_control_r_RREADY,
        RDATA => s_axi_control_r_RDATA,
        RRESP => s_axi_control_r_RRESP,
        BVALID => s_axi_control_r_BVALID,
        BREADY => s_axi_control_r_BREADY,
        BRESP => s_axi_control_r_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        axilite_out => axilite_out,
        axilite_out_ap_vld => axilite_out_ap_vld,
        control => control,
        distortion_threshold => distortion_threshold,
        distortion_clip_factor => distortion_clip_factor,
        compression_min_threshold => compression_min_threshold,
        compression_max_threshold => compression_max_threshold,
        compression_zero_threshold => compression_zero_threshold,
        delay_mult => delay_mult,
        delay_samples => delay_samples);

    fadd_32ns_32ns_32_5_full_dsp_1_U15 : component guitar_effects_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_400,
        din1 => mul_i_reg_939,
        ce => ap_const_logic_1,
        dout => grp_fu_388_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U16 : component guitar_effects_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_392_p0,
        din1 => grp_fu_392_p1,
        ce => grp_fu_392_ce,
        dout => grp_fu_392_p2);

    sitofp_32ns_32_6_no_dsp_1_U17 : component guitar_effects_sitofp_32ns_32_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_396_p0,
        ce => grp_fu_396_ce,
        dout => grp_fu_396_p1);

    srem_32ns_17ns_16_36_seq_1_U18 : component guitar_effects_srem_32ns_17ns_16_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 17,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_453_ap_start,
        done => grp_fu_453_ap_done,
        din0 => grp_fu_453_p0,
        din1 => grp_fu_453_p1,
        ce => grp_fu_453_ce,
        dout => grp_fu_453_p2);

    regslice_both_INPUT_r_V_data_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TDATA,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_data_V_U_ack_in,
        data_out => INPUT_r_TDATA_int_regslice,
        vld_out => INPUT_r_TVALID_int_regslice,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_data_V_U_apdone_blk);

    regslice_both_INPUT_r_V_keep_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TKEEP,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_keep_V_U_ack_in,
        data_out => INPUT_r_TKEEP_int_regslice,
        vld_out => regslice_both_INPUT_r_V_keep_V_U_vld_out,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_keep_V_U_apdone_blk);

    regslice_both_INPUT_r_V_strb_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TSTRB,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_strb_V_U_ack_in,
        data_out => INPUT_r_TSTRB_int_regslice,
        vld_out => regslice_both_INPUT_r_V_strb_V_U_vld_out,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_strb_V_U_apdone_blk);

    regslice_both_INPUT_r_V_user_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TUSER,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_user_V_U_ack_in,
        data_out => INPUT_r_TUSER_int_regslice,
        vld_out => regslice_both_INPUT_r_V_user_V_U_vld_out,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_user_V_U_apdone_blk);

    regslice_both_INPUT_r_V_last_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TLAST,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_last_V_U_ack_in,
        data_out => INPUT_r_TLAST_int_regslice,
        vld_out => regslice_both_INPUT_r_V_last_V_U_vld_out,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_last_V_U_apdone_blk);

    regslice_both_INPUT_r_V_id_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TID,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_id_V_U_ack_in,
        data_out => INPUT_r_TID_int_regslice,
        vld_out => regslice_both_INPUT_r_V_id_V_U_vld_out,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_id_V_U_apdone_blk);

    regslice_both_INPUT_r_V_dest_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TDEST,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_dest_V_U_ack_in,
        data_out => INPUT_r_TDEST_int_regslice,
        vld_out => regslice_both_INPUT_r_V_dest_V_U_vld_out,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_dest_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_data_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_phi_mux_tmp_int_6_phi_fu_362_p4,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => OUTPUT_r_TREADY_int_regslice,
        data_out => OUTPUT_r_TDATA,
        vld_out => regslice_both_OUTPUT_r_V_data_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_data_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_keep_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_keep_V_reg_869,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_keep_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TKEEP,
        vld_out => regslice_both_OUTPUT_r_V_keep_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_keep_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_strb_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_strb_V_reg_874,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_strb_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TSTRB,
        vld_out => regslice_both_OUTPUT_r_V_strb_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_strb_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_user_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_user_V_reg_879,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_user_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TUSER,
        vld_out => regslice_both_OUTPUT_r_V_user_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_user_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_last_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => OUTPUT_r_TLAST_int_regslice,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_last_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TLAST,
        vld_out => regslice_both_OUTPUT_r_V_last_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_last_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_id_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_id_V_reg_888,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_id_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TID,
        vld_out => regslice_both_OUTPUT_r_V_id_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_id_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_dest_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_dest_V_reg_893,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_dest_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TDEST,
        vld_out => regslice_both_OUTPUT_r_V_dest_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_compression_fu_376_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_compression_fu_376_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state40) and (tmp_2_reg_832 = ap_const_lv1_1))) then 
                    grp_compression_fu_376_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_compression_fu_376_ap_ready = ap_const_logic_1)) then 
                    grp_compression_fu_376_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_guitar_effects_Pipeline_2_fu_371_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_guitar_effects_Pipeline_2_fu_371_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                    grp_guitar_effects_Pipeline_2_fu_371_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_guitar_effects_Pipeline_2_fu_371_ap_ready = ap_const_logic_1)) then 
                    grp_guitar_effects_Pipeline_2_fu_371_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    current_level_1_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                current_level_1_fu_172 <= ap_const_lv32_0;
            elsif (((grp_compression_fu_376_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                current_level_1_fu_172 <= grp_compression_fu_376_ap_return_1;
            end if; 
        end if;
    end process;

    empty_30_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice) and (tmp_reg_828 = ap_const_lv1_0))) then 
                empty_30_reg_298 <= empty_fu_168;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                empty_30_reg_298 <= or_ln74_reg_898;
            elsif ((((icmp_ln119_fu_519_p2 = ap_const_lv1_0) and (icmp_ln117_fu_514_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice) and (tmp_reg_828 = ap_const_lv1_1)) or ((icmp_ln117_fu_514_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice) and (tmp_reg_828 = ap_const_lv1_1)))) then 
                empty_30_reg_298 <= or_ln74_fu_508_p2;
            end if; 
        end if;
    end process;

    empty_31_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) and (tmp_2_reg_832 = ap_const_lv1_0))) then 
                empty_31_reg_326 <= empty_30_reg_298;
            elsif (((grp_compression_fu_376_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                empty_31_reg_326 <= or_ln79_fu_584_p2;
            end if; 
        end if;
    end process;

    empty_32_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) and (tmp_3_reg_836 = ap_const_lv1_0))) then 
                empty_32_reg_348 <= empty_31_reg_326;
            elsif ((not(((ap_const_boolean_1 = ap_block_state61_io) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_884 = ap_const_lv1_0)) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_884 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state61) and (tmp_3_reg_836 = ap_const_lv1_1))) then 
                empty_32_reg_348 <= or_ln84_fu_725_p2;
            end if; 
        end if;
    end process;

    empty_fu_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                empty_fu_168 <= ap_const_lv32_0;
            elsif ((not(((ap_const_boolean_1 = ap_block_state61_io) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_884 = ap_const_lv1_0)) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_884 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state61) and (tmp_last_V_reg_884 = ap_const_lv1_0))) then 
                empty_fu_168 <= select_ln87_fu_751_p3;
            end if; 
        end if;
    end process;

    tmp_int_3_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) and (tmp_2_reg_832 = ap_const_lv1_0))) then 
                tmp_int_3_reg_337 <= tmp_int_reg_312;
            elsif (((grp_compression_fu_376_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                tmp_int_3_reg_337 <= grp_compression_fu_376_ap_return_0;
            end if; 
        end if;
    end process;

    tmp_int_6_reg_358_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) and (tmp_3_reg_836 = ap_const_lv1_0))) then 
                tmp_int_6_reg_358 <= tmp_int_3_reg_337;
            elsif ((not(((ap_const_boolean_1 = ap_block_state61_io) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_884 = ap_const_lv1_0)) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_884 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state61) and (tmp_3_reg_836 = ap_const_lv1_1))) then 
                tmp_int_6_reg_358 <= result_V_fu_737_p3;
            end if; 
        end if;
    end process;

    tmp_int_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln119_fu_519_p2 = ap_const_lv1_0) and (icmp_ln117_fu_514_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice) and (tmp_reg_828 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state38) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice) and (tmp_reg_828 = ap_const_lv1_0)))) then 
                tmp_int_reg_312 <= INPUT_r_TDATA_int_regslice;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                tmp_int_reg_312 <= ret_V_1_reg_911;
            elsif (((icmp_ln117_fu_514_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice) and (tmp_reg_828 = ap_const_lv1_1))) then 
                tmp_int_reg_312 <= ret_V_fu_575_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                compression_max_threshold_read_reg_793 <= compression_max_threshold;
                compression_min_threshold_read_reg_798 <= compression_min_threshold;
                compression_zero_threshold_read_reg_788 <= compression_zero_threshold;
                delay_mult_read_reg_783 <= delay_mult;
                delay_samples_read_reg_778 <= delay_samples;
                distortion_clip_factor_read_reg_803 <= distortion_clip_factor;
                distortion_threshold_read_reg_809 <= distortion_threshold;
                tmp_2_reg_832 <= control(2 downto 2);
                tmp_3_reg_836 <= control(1 downto 1);
                tmp_reg_828 <= control(3 downto 3);
                trunc_ln18_1_reg_823 <= trunc_ln18_1_fu_410_p1;
                trunc_ln18_reg_817 <= trunc_ln18_fu_406_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then
                dc_reg_944 <= grp_fu_388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                delay_buffer_addr_1_reg_855 <= idxprom_i_cast_fu_468_p1(16 - 1 downto 0);
                negative_threshold_reg_850 <= negative_threshold_fu_459_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                delay_buffer_load_reg_934 <= delay_buffer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                isNeg_reg_959 <= add_ln346_fu_632_p2(8 downto 8);
                p_Result_1_reg_954 <= p_Result_1_fu_624_p1;
                p_Result_s_reg_949 <= data_V_fu_603_p1(31 downto 31);
                ush_reg_964 <= ush_fu_656_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                mul_i_reg_939 <= grp_fu_392_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) and (tmp_reg_828 = ap_const_lv1_1))) then
                    or_ln74_reg_898(2 downto 0) <= or_ln74_fu_508_p2(2 downto 0);    or_ln74_reg_898(31 downto 4) <= or_ln74_fu_508_p2(31 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state49))) then
                reg_400 <= grp_fu_396_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln119_fu_519_p2 = ap_const_lv1_1) and (icmp_ln117_fu_514_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38) and (tmp_reg_828 = ap_const_lv1_1))) then
                ret_V_1_reg_911 <= ret_V_1_fu_550_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                tmp_dest_V_reg_893 <= INPUT_r_TDEST_int_regslice;
                tmp_id_V_reg_888 <= INPUT_r_TID_int_regslice;
                tmp_keep_V_reg_869 <= INPUT_r_TKEEP_int_regslice;
                tmp_last_V_reg_884 <= INPUT_r_TLAST_int_regslice;
                tmp_strb_V_reg_874 <= INPUT_r_TSTRB_int_regslice;
                tmp_user_V_reg_879 <= INPUT_r_TUSER_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then
                val_reg_969 <= val_fu_718_p3;
            end if;
        end if;
    end process;
    or_ln74_reg_898(3) <= '1';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state38, ap_CS_fsm_state61, tmp_last_V_reg_884, ap_CS_fsm_state63, ap_CS_fsm_state62, tmp_reg_828, tmp_2_reg_832, tmp_3_reg_836, ap_CS_fsm_state37, icmp_ln117_fu_514_p2, icmp_ln119_fu_519_p2, ap_CS_fsm_state41, grp_guitar_effects_Pipeline_2_fu_371_ap_done, grp_compression_fu_376_ap_done, ap_CS_fsm_state40, ap_block_state61_io, ap_CS_fsm_state42, regslice_both_OUTPUT_r_V_data_V_U_apdone_blk, INPUT_r_TVALID_int_regslice, OUTPUT_r_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((grp_guitar_effects_Pipeline_2_fu_371_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                if (((icmp_ln119_fu_519_p2 = ap_const_lv1_1) and (icmp_ln117_fu_514_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice) and (tmp_reg_828 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state38) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice) and ((tmp_reg_828 = ap_const_lv1_0) or ((icmp_ln119_fu_519_p2 = ap_const_lv1_0) or (icmp_ln117_fu_514_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state40) and (tmp_2_reg_832 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state41 => 
                if (((grp_compression_fu_376_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state42) and (tmp_3_reg_836 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                if ((not(((ap_const_boolean_1 = ap_block_state61_io) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_884 = ap_const_lv1_0)) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_884 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state61) and (tmp_last_V_reg_884 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                elsif ((not(((ap_const_boolean_1 = ap_block_state61_io) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_884 = ap_const_lv1_0)) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_884 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state61) and (tmp_last_V_reg_884 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state62 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state62) and (ap_const_logic_1 = OUTPUT_r_TREADY_int_regslice))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state63 => 
                if ((not(((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) or (regslice_both_OUTPUT_r_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state63))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    INPUT_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state38, INPUT_r_TVALID_int_regslice)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            INPUT_r_TDATA_blk_n <= INPUT_r_TVALID_int_regslice;
        else 
            INPUT_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    INPUT_r_TREADY <= regslice_both_INPUT_r_V_data_V_U_ack_in;

    INPUT_r_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state38, INPUT_r_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice))) then 
            INPUT_r_TREADY_int_regslice <= ap_const_logic_1;
        else 
            INPUT_r_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state61, tmp_last_V_reg_884, ap_CS_fsm_state63, ap_CS_fsm_state62, OUTPUT_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state63) or ((ap_const_logic_1 = ap_CS_fsm_state61) and (tmp_last_V_reg_884 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state61) and (tmp_last_V_reg_884 = ap_const_lv1_1)))) then 
            OUTPUT_r_TDATA_blk_n <= OUTPUT_r_TREADY_int_regslice;
        else 
            OUTPUT_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    OUTPUT_r_TLAST_int_regslice_assign_proc : process(tmp_last_V_reg_884, ap_condition_1238)
    begin
        if ((ap_const_boolean_1 = ap_condition_1238)) then
            if ((tmp_last_V_reg_884 = ap_const_lv1_1)) then 
                OUTPUT_r_TLAST_int_regslice <= ap_const_lv1_1;
            elsif ((tmp_last_V_reg_884 = ap_const_lv1_0)) then 
                OUTPUT_r_TLAST_int_regslice <= ap_const_lv1_0;
            else 
                OUTPUT_r_TLAST_int_regslice <= "X";
            end if;
        else 
            OUTPUT_r_TLAST_int_regslice <= "X";
        end if; 
    end process;

    OUTPUT_r_TVALID <= regslice_both_OUTPUT_r_V_data_V_U_vld_out;

    OUTPUT_r_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state61, tmp_last_V_reg_884, ap_block_state61_io, OUTPUT_r_TREADY_int_regslice)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state61_io) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_884 = ap_const_lv1_0)) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_884 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state61) and (tmp_last_V_reg_884 = ap_const_lv1_0)) or (not(((ap_const_boolean_1 = ap_block_state61_io) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_884 = ap_const_lv1_0)) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_884 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state61) and (tmp_last_V_reg_884 = ap_const_lv1_1)))) then 
            OUTPUT_r_TVALID_int_regslice <= ap_const_logic_1;
        else 
            OUTPUT_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    add_ln346_fu_632_p2 <= std_logic_vector(unsigned(zext_ln346_fu_628_p1) + unsigned(ap_const_lv9_181));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;
    ap_ST_fsm_state1_blk <= ap_const_logic_0;
    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;

    ap_ST_fsm_state37_blk_assign_proc : process(grp_guitar_effects_Pipeline_2_fu_371_ap_done)
    begin
        if ((grp_guitar_effects_Pipeline_2_fu_371_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state37_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state37_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state38_blk_assign_proc : process(INPUT_r_TVALID_int_regslice)
    begin
        if ((ap_const_logic_0 = INPUT_r_TVALID_int_regslice)) then 
            ap_ST_fsm_state38_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state38_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;

    ap_ST_fsm_state41_blk_assign_proc : process(grp_compression_fu_376_ap_done)
    begin
        if ((grp_compression_fu_376_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state41_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state41_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;

    ap_ST_fsm_state61_blk_assign_proc : process(tmp_last_V_reg_884, ap_block_state61_io, OUTPUT_r_TREADY_int_regslice)
    begin
        if (((ap_const_boolean_1 = ap_block_state61_io) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_884 = ap_const_lv1_0)) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_884 = ap_const_lv1_1)))) then 
            ap_ST_fsm_state61_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state61_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state62_blk_assign_proc : process(OUTPUT_r_TREADY_int_regslice)
    begin
        if ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) then 
            ap_ST_fsm_state62_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state62_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state63_blk_assign_proc : process(regslice_both_OUTPUT_r_V_data_V_U_apdone_blk, OUTPUT_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) or (regslice_both_OUTPUT_r_V_data_V_U_apdone_blk = ap_const_logic_1))) then 
            ap_ST_fsm_state63_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state63_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state61_assign_proc : process(tmp_last_V_reg_884, OUTPUT_r_TREADY_int_regslice)
    begin
                ap_block_state61 <= (((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_884 = ap_const_lv1_0)) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_884 = ap_const_lv1_1)));
    end process;


    ap_block_state61_io_assign_proc : process(tmp_last_V_reg_884, OUTPUT_r_TREADY_int_regslice)
    begin
                ap_block_state61_io <= (((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_884 = ap_const_lv1_0)) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_884 = ap_const_lv1_1)));
    end process;


    ap_block_state63_assign_proc : process(regslice_both_OUTPUT_r_V_data_V_U_apdone_blk, OUTPUT_r_TREADY_int_regslice)
    begin
                ap_block_state63 <= ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) or (regslice_both_OUTPUT_r_V_data_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_condition_1238_assign_proc : process(ap_CS_fsm_state61, tmp_last_V_reg_884, OUTPUT_r_TREADY_int_regslice)
    begin
                ap_condition_1238 <= (not((((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_884 = ap_const_lv1_0)) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_884 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state61));
    end process;


    ap_phi_mux_empty_32_phi_fu_351_p4_assign_proc : process(ap_CS_fsm_state61, tmp_3_reg_836, or_ln84_fu_725_p2, empty_32_reg_348)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state61) and (tmp_3_reg_836 = ap_const_lv1_1))) then 
            ap_phi_mux_empty_32_phi_fu_351_p4 <= or_ln84_fu_725_p2;
        else 
            ap_phi_mux_empty_32_phi_fu_351_p4 <= empty_32_reg_348;
        end if; 
    end process;


    ap_phi_mux_tmp_int_6_phi_fu_362_p4_assign_proc : process(ap_CS_fsm_state61, tmp_3_reg_836, result_V_fu_737_p3, tmp_int_6_reg_358)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state61) and (tmp_3_reg_836 = ap_const_lv1_1))) then 
            ap_phi_mux_tmp_int_6_phi_fu_362_p4 <= result_V_fu_737_p3;
        else 
            ap_phi_mux_tmp_int_6_phi_fu_362_p4 <= tmp_int_6_reg_358;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    axilite_out <= 
        or_ln89_fu_745_p2 when (trunc_ln18_1_reg_823(0) = '1') else 
        ap_phi_mux_empty_32_phi_fu_351_p4;

    axilite_out_ap_vld_assign_proc : process(ap_CS_fsm_state61, tmp_last_V_reg_884, ap_block_state61_io, OUTPUT_r_TREADY_int_regslice)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state61_io) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_884 = ap_const_lv1_0)) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_884 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state61) and (tmp_last_V_reg_884 = ap_const_lv1_1))) then 
            axilite_out_ap_vld <= ap_const_logic_1;
        else 
            axilite_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    data_V_fu_603_p1 <= dc_reg_944;

    delay_buffer_address0_assign_proc : process(ap_CS_fsm_state61, ap_CS_fsm_state37, delay_buffer_addr_1_reg_855, grp_guitar_effects_Pipeline_2_fu_371_delay_buffer_address0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            delay_buffer_address0 <= ap_const_lv64_0(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            delay_buffer_address0 <= delay_buffer_addr_1_reg_855;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            delay_buffer_address0 <= grp_guitar_effects_Pipeline_2_fu_371_delay_buffer_address0;
        else 
            delay_buffer_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    delay_buffer_ce0_assign_proc : process(ap_CS_fsm_state61, tmp_last_V_reg_884, ap_CS_fsm_state37, grp_guitar_effects_Pipeline_2_fu_371_delay_buffer_ce0, ap_block_state61_io, ap_CS_fsm_state42, OUTPUT_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (not(((ap_const_boolean_1 = ap_block_state61_io) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_884 = ap_const_lv1_0)) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_884 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state61)))) then 
            delay_buffer_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            delay_buffer_ce0 <= grp_guitar_effects_Pipeline_2_fu_371_delay_buffer_ce0;
        else 
            delay_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_buffer_d0_assign_proc : process(ap_CS_fsm_state61, ap_CS_fsm_state37, grp_guitar_effects_Pipeline_2_fu_371_delay_buffer_d0, result_V_fu_737_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            delay_buffer_d0 <= result_V_fu_737_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            delay_buffer_d0 <= grp_guitar_effects_Pipeline_2_fu_371_delay_buffer_d0;
        else 
            delay_buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    delay_buffer_we0_assign_proc : process(ap_CS_fsm_state61, tmp_last_V_reg_884, tmp_3_reg_836, ap_CS_fsm_state37, grp_guitar_effects_Pipeline_2_fu_371_delay_buffer_we0, ap_block_state61_io, OUTPUT_r_TREADY_int_regslice)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state61_io) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_884 = ap_const_lv1_0)) or ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) and (tmp_last_V_reg_884 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state61) and (tmp_3_reg_836 = ap_const_lv1_1))) then 
            delay_buffer_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            delay_buffer_we0 <= grp_guitar_effects_Pipeline_2_fu_371_delay_buffer_we0;
        else 
            delay_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_28_fu_464_p1 <= grp_fu_453_p2(16 - 1 downto 0);
    grp_compression_fu_376_ap_start <= grp_compression_fu_376_ap_start_reg;

    grp_fu_392_ce_assign_proc : process(ap_CS_fsm_state41, grp_compression_fu_376_grp_fu_392_p_ce)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_392_ce <= grp_compression_fu_376_grp_fu_392_p_ce;
        else 
            grp_fu_392_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_392_p0_assign_proc : process(reg_400, ap_CS_fsm_state41, grp_compression_fu_376_grp_fu_392_p_din0, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_392_p0 <= grp_compression_fu_376_grp_fu_392_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_392_p0 <= reg_400;
        else 
            grp_fu_392_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_392_p1_assign_proc : process(delay_mult_read_reg_783, ap_CS_fsm_state41, grp_compression_fu_376_grp_fu_392_p_din1, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_392_p1 <= grp_compression_fu_376_grp_fu_392_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_392_p1 <= delay_mult_read_reg_783;
        else 
            grp_fu_392_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_396_ce_assign_proc : process(ap_CS_fsm_state41, grp_compression_fu_376_grp_fu_396_p_ce)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_396_ce <= grp_compression_fu_376_grp_fu_396_p_ce;
        else 
            grp_fu_396_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_396_p0_assign_proc : process(ap_CS_fsm_state41, delay_buffer_load_reg_934, grp_compression_fu_376_grp_fu_396_p_din0, tmp_int_3_reg_337, ap_CS_fsm_state44, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_396_p0 <= grp_compression_fu_376_grp_fu_396_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_396_p0 <= tmp_int_3_reg_337;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_396_p0 <= delay_buffer_load_reg_934;
        else 
            grp_fu_396_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_453_ap_start_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_453_ap_start <= ap_const_logic_1;
        else 
            grp_fu_453_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_453_ce_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state61, ap_CS_fsm_state63, ap_CS_fsm_state62, ap_CS_fsm_state49, ap_CS_fsm_state53, ap_CS_fsm_state1, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state54, ap_CS_fsm_state50, ap_CS_fsm_state44, ap_CS_fsm_state48, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            grp_fu_453_ce <= ap_const_logic_0;
        else 
            grp_fu_453_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_453_p0 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(delay_samples_read_reg_778));
    grp_fu_453_p1 <= ap_const_lv32_AC44(17 - 1 downto 0);
    grp_guitar_effects_Pipeline_2_fu_371_ap_start <= grp_guitar_effects_Pipeline_2_fu_371_ap_start_reg;
    icmp_ln117_fu_514_p2 <= "1" when (signed(INPUT_r_TDATA_int_regslice) > signed(distortion_threshold_read_reg_809)) else "0";
    icmp_ln119_fu_519_p2 <= "1" when (signed(INPUT_r_TDATA_int_regslice) < signed(negative_threshold_reg_850)) else "0";
    idxprom_i_cast_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_28_fu_464_p1),64));
    isNeg_fu_638_p3 <= add_ln346_fu_632_p2(8 downto 8);
    lhs_1_fu_542_p3 <= (select_ln1319_1_fu_535_p3 & ap_const_lv7_0);
    lhs_fu_567_p3 <= (select_ln1319_fu_560_p3 & ap_const_lv7_0);
    mantissa_fu_664_p4 <= ((ap_const_lv1_1 & p_Result_1_reg_954) & ap_const_lv1_0);
    negative_threshold_fu_459_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(distortion_threshold_read_reg_809));
    or_ln74_fu_508_p2 <= (empty_fu_168 or ap_const_lv32_8);
    or_ln79_fu_584_p2 <= (empty_30_reg_298 or ap_const_lv32_4);
    or_ln84_fu_725_p2 <= (empty_31_reg_326 or ap_const_lv32_2);
    or_ln89_fu_745_p2 <= (ap_phi_mux_empty_32_phi_fu_351_p4 or ap_const_lv32_1);
    p_Result_1_fu_624_p1 <= data_V_fu_603_p1(23 - 1 downto 0);
    r_V_1_fu_684_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_673_p1),to_integer(unsigned('0' & zext_ln1488_fu_680_p1(31-1 downto 0)))));
    r_V_2_fu_690_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_673_p1),to_integer(unsigned('0' & zext_ln1488_fu_680_p1(31-1 downto 0)))));
    r_V_fu_524_p2 <= std_logic_vector(unsigned(trunc_ln283_fu_504_p1) + unsigned(trunc_ln18_reg_817));
    result_V_2_fu_732_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_reg_969));
    result_V_fu_737_p3 <= 
        result_V_2_fu_732_p2 when (p_Result_s_reg_949(0) = '1') else 
        val_reg_969;
    ret_V_1_fu_550_p2 <= std_logic_vector(unsigned(lhs_1_fu_542_p3) - unsigned(distortion_threshold_read_reg_809));
    ret_V_fu_575_p2 <= std_logic_vector(unsigned(lhs_fu_567_p3) + unsigned(distortion_threshold_read_reg_809));
    select_ln1319_1_fu_535_p3 <= 
        sub_ln1319_1_fu_529_p2 when (distortion_clip_factor_read_reg_803(0) = '1') else 
        ap_const_lv25_0;
    select_ln1319_fu_560_p3 <= 
        sub_ln1319_fu_555_p2 when (distortion_clip_factor_read_reg_803(0) = '1') else 
        ap_const_lv25_0;
    select_ln87_fu_751_p3 <= 
        or_ln89_fu_745_p2 when (trunc_ln18_1_reg_823(0) = '1') else 
        ap_phi_mux_empty_32_phi_fu_351_p4;
        sext_ln1488_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_964),32));

        sext_ln1512_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_fu_646_p2),9));

    sub_ln1319_1_fu_529_p2 <= std_logic_vector(unsigned(ap_const_lv25_0) - unsigned(r_V_fu_524_p2));
    sub_ln1319_fu_555_p2 <= std_logic_vector(unsigned(trunc_ln18_reg_817) - unsigned(trunc_ln283_fu_504_p1));
    sub_ln1512_fu_646_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_V_fu_614_p4));
    tmp_1_fu_708_p4 <= r_V_2_fu_690_p2(55 downto 24);
    tmp_7_fu_696_p3 <= r_V_1_fu_684_p2(24 downto 24);
    trunc_ln18_1_fu_410_p1 <= control(1 - 1 downto 0);
    trunc_ln18_fu_406_p1 <= distortion_threshold(25 - 1 downto 0);
    trunc_ln283_fu_504_p1 <= INPUT_r_TDATA_int_regslice(25 - 1 downto 0);
    ush_fu_656_p3 <= 
        sext_ln1512_fu_652_p1 when (isNeg_fu_638_p3(0) = '1') else 
        add_ln346_fu_632_p2;
    val_fu_718_p3 <= 
        zext_ln818_fu_704_p1 when (isNeg_reg_959(0) = '1') else 
        tmp_1_fu_708_p4;
    xs_exp_V_fu_614_p4 <= data_V_fu_603_p1(30 downto 23);
    zext_ln1488_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_fu_677_p1),79));
    zext_ln15_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_664_p4),79));
    zext_ln346_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_fu_614_p4),9));
    zext_ln818_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_696_p3),32));
end behav;
