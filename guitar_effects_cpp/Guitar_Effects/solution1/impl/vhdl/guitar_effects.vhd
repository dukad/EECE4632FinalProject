-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity guitar_effects is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_R_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    INPUT_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    INPUT_r_TVALID : IN STD_LOGIC;
    INPUT_r_TREADY : OUT STD_LOGIC;
    INPUT_r_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_r_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_r_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    INPUT_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_r_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    INPUT_r_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    OUTPUT_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUTPUT_r_TVALID : OUT STD_LOGIC;
    OUTPUT_r_TREADY : IN STD_LOGIC;
    OUTPUT_r_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_r_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_r_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    OUTPUT_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_r_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    OUTPUT_r_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_control_r_AWVALID : IN STD_LOGIC;
    s_axi_control_r_AWREADY : OUT STD_LOGIC;
    s_axi_control_r_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_ADDR_WIDTH-1 downto 0);
    s_axi_control_r_WVALID : IN STD_LOGIC;
    s_axi_control_r_WREADY : OUT STD_LOGIC;
    s_axi_control_r_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH-1 downto 0);
    s_axi_control_r_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH/8-1 downto 0);
    s_axi_control_r_ARVALID : IN STD_LOGIC;
    s_axi_control_r_ARREADY : OUT STD_LOGIC;
    s_axi_control_r_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_ADDR_WIDTH-1 downto 0);
    s_axi_control_r_RVALID : OUT STD_LOGIC;
    s_axi_control_r_RREADY : IN STD_LOGIC;
    s_axi_control_r_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH-1 downto 0);
    s_axi_control_r_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_r_BVALID : OUT STD_LOGIC;
    s_axi_control_r_BREADY : IN STD_LOGIC;
    s_axi_control_r_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of guitar_effects is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "guitar_effects_guitar_effects,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=15.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.950000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=267,HLS_SYN_DSP=0,HLS_SYN_FF=10554,HLS_SYN_LUT=18673,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state137 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state138 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state139 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state140 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state141 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state142 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state143 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state144 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state145 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state146 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state147 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state148 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state149 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state150 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state151 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state152 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state153 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state154 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state155 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state156 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state157 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state158 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state159 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state160 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state161 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state162 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state163 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state164 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state165 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state166 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state167 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state168 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state169 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state170 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state171 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state172 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state173 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state174 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state175 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state176 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state177 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state178 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state179 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state180 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state181 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state182 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state183 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state184 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state185 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state186 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state187 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state188 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state189 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state190 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state191 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state192 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state193 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state194 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state195 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state196 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state197 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state198 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state199 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state200 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state201 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state202 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state203 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state204 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state205 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state206 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state207 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state208 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state209 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state210 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state211 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state212 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state213 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state214 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state215 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state216 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state217 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state218 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state219 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state220 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state221 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state222 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state223 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state224 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state225 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state226 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state227 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state228 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state229 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state230 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state231 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state232 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state233 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state234 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state235 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state236 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state237 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state238 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state239 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state240 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state241 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state242 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state243 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state244 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state245 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state246 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state247 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state248 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state249 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state250 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state251 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state252 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state253 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state254 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state255 : STD_LOGIC_VECTOR (265 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state256 : STD_LOGIC_VECTOR (265 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state257 : STD_LOGIC_VECTOR (265 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state258 : STD_LOGIC_VECTOR (265 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state259 : STD_LOGIC_VECTOR (265 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state260 : STD_LOGIC_VECTOR (265 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state261 : STD_LOGIC_VECTOR (265 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state262 : STD_LOGIC_VECTOR (265 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state263 : STD_LOGIC_VECTOR (265 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state264 : STD_LOGIC_VECTOR (265 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state265 : STD_LOGIC_VECTOR (265 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state266 : STD_LOGIC_VECTOR (265 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100111";
    constant ap_const_lv32_FB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111011";
    constant ap_const_lv32_FE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111110";
    constant ap_const_lv32_105 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_107 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_108 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_109 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001001";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_A3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100011";
    constant ap_const_lv32_AE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101110";
    constant ap_const_lv32_B3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110011";
    constant ap_const_lv32_D9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011001";
    constant ap_const_lv32_E3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100011";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_9B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011011";
    constant ap_const_lv32_9C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011100";
    constant ap_const_lv32_A4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100100";
    constant ap_const_lv32_A5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100101";
    constant ap_const_lv32_A9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101001";
    constant ap_const_lv32_CA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001010";
    constant ap_const_lv32_D2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010010";
    constant ap_const_lv32_D4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010100";
    constant ap_const_lv32_DE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011110";
    constant ap_const_lv32_E4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100100";
    constant ap_const_lv32_E5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100101";
    constant ap_const_lv32_E6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100110";
    constant ap_const_lv32_ED : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101101";
    constant ap_const_lv32_EE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101110";
    constant ap_const_lv32_FA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111010";
    constant ap_const_lv32_FC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111100";
    constant ap_const_lv32_FD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_106 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000110";
    constant ap_const_lv32_D3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_75 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110101";
    constant ap_const_lv32_A1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100001";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_9D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011101";
    constant ap_const_lv64_3FE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_DA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011010";
    constant ap_const_lv64_400921F9F01B866E : STD_LOGIC_VECTOR (63 downto 0) := "0100000000001001001000011111100111110000000110111000011001101110";
    constant ap_const_lv64_4034000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000110100000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_AA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101010";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_D5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010101";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv64_40F5888000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000011110101100010001000000000000000000000000000000000000000";
    constant ap_const_lv32_B4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_1B9 : STD_LOGIC_VECTOR (8 downto 0) := "110111001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv17_15888 : STD_LOGIC_VECTOR (16 downto 0) := "10101100010001000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_1B9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv11_1B9 : STD_LOGIC_VECTOR (10 downto 0) := "00110111001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_15888 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010101100010001000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv41_C8 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000011001000";
    constant ap_const_lv9_64 : STD_LOGIC_VECTOR (8 downto 0) := "001100100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_9E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011110";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100110";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_CB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001011";
    constant ap_const_lv32_CC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001100";
    constant ap_const_lv32_CD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001101";
    constant ap_const_lv32_CE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001110";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_D1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010001";
    constant ap_const_lv32_D6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010110";
    constant ap_const_lv32_D7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010111";
    constant ap_const_lv32_D8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011000";
    constant ap_const_lv32_DB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011011";
    constant ap_const_lv32_DC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011100";
    constant ap_const_lv32_DD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011101";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_E1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100001";
    constant ap_const_lv32_E2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100010";
    constant ap_const_lv32_E8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101000";
    constant ap_const_lv32_E9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101001";
    constant ap_const_lv32_EA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101010";
    constant ap_const_lv32_EB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101011";
    constant ap_const_lv32_EC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal axilite_out_ap_vld : STD_LOGIC;
    signal control : STD_LOGIC_VECTOR (7 downto 0);
    signal distortion_threshold : STD_LOGIC_VECTOR (31 downto 0);
    signal distortion_clip_factor : STD_LOGIC_VECTOR (7 downto 0);
    signal compression_min_threshold : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_max_threshold : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_zero_threshold : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_mult : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_samples : STD_LOGIC_VECTOR (31 downto 0);
    signal tempo : STD_LOGIC_VECTOR (31 downto 0);
    signal wah_coeffs : STD_LOGIC_VECTOR (63 downto 0);
    signal debug_output_ap_vld : STD_LOGIC;
    signal lpf_coefficients_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal lpf_coefficients_ce0 : STD_LOGIC;
    signal lpf_coefficients_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (265 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state232 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state232 : signal is "none";
    signal ap_CS_fsm_state252 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state252 : signal is "none";
    signal ap_CS_fsm_state255 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state255 : signal is "none";
    signal ap_CS_fsm_state262 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state262 : signal is "none";
    signal INPUT_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal OUTPUT_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state264 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state264 : signal is "none";
    signal tmp_last_V_reg_2607 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state265 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state265 : signal is "none";
    signal ap_CS_fsm_state266 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state266 : signal is "none";
    signal grp_fu_839_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_867 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal ap_CS_fsm_state161 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state161 : signal is "none";
    signal grp_fu_831_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_874 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal ap_CS_fsm_state120 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state120 : signal is "none";
    signal ap_CS_fsm_state164 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state164 : signal is "none";
    signal grp_fu_835_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_879 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_852_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_884 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state175 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state175 : signal is "none";
    signal ap_CS_fsm_state180 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state180 : signal is "none";
    signal ap_CS_fsm_state218 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state218 : signal is "none";
    signal ap_CS_fsm_state228 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state228 : signal is "none";
    signal reg_891 : STD_LOGIC_VECTOR (15 downto 0);
    signal wah_coeffs_read_reg_2388 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tempo_read_reg_2394 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_samples_read_reg_2399 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_mult_read_reg_2404 : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_zero_threshold_read_reg_2409 : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_max_threshold_read_reg_2414 : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_min_threshold_read_reg_2420 : STD_LOGIC_VECTOR (31 downto 0);
    signal distortion_clip_factor_read_reg_2427 : STD_LOGIC_VECTOR (7 downto 0);
    signal distortion_threshold_read_reg_2432 : STD_LOGIC_VECTOR (31 downto 0);
    signal control_read_reg_2442 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln23_fu_895_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln23_reg_2449 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_2528 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond3554_fu_972_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_2532 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_2536 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_read_reg_2546 : STD_LOGIC_VECTOR (15 downto 0);
    signal negative_threshold_fu_1060_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal negative_threshold_reg_2551 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal conv7_i_i_i_fu_1065_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal conv7_i_i_i_reg_2556 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_864_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv2_i_reg_2562 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv18_i_reg_2567 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_842_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv30_i_reg_2572 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_keep_V_reg_2592 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_strb_V_reg_2597 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_user_V_reg_2602 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_id_V_reg_2611 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_dest_V_reg_2616 : STD_LOGIC_VECTOR (5 downto 0);
    signal current_sample_fu_1109_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_sample_reg_2621 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln96_fu_1115_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln96_reg_2626 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln141_fu_1121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln141_reg_2636 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln143_fu_1126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln143_reg_2640 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_fu_1131_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_reg_2644 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_21_fu_1136_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_21_reg_2649 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_49_fu_1144_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal r_V_49_reg_2654 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ret_V_9_cast_reg_2659 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1049_1_fu_1163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_1_reg_2666 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal r_V_48_fu_1249_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal r_V_48_reg_2679 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ret_V_cast_reg_2684 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1049_fu_1268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_reg_2691 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln101_fu_1301_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln101_reg_2696 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal grp_fu_1240_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_buffer_index_1_reg_2708 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln65_fu_1311_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln65_reg_2716 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln165_fu_1326_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln165_reg_2724 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal icmp_ln165_fu_1320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal current_level_fu_1352_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_level_reg_2739 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln179_fu_1359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln179_reg_2744 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln189_fu_1364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln189_reg_2748 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln188_1_fu_1386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln188_1_reg_2752 : STD_LOGIC_VECTOR (0 downto 0);
    signal lpf_coefficients_load_reg_2756 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal compression_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_buffer_load_reg_2766 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal grp_fu_827_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_reg_2771 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal result_V_18_fu_1548_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal result_V_fu_1688_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_reg_2781 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal delay_buffer_index_load_reg_2786 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal result_V_19_fu_1854_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_19_reg_2801 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state121 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state121 : signal is "none";
    signal ap_CS_fsm_state156 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state156 : signal is "none";
    signal delay_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_buffer_load_reg_2811 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state157 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state157 : signal is "none";
    signal data_V_3_fu_1876_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_3_reg_2816 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state165 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state165 : signal is "none";
    signal val_3_fu_1986_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_3_reg_2821 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln227_fu_2033_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state166 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state166 : signal is "none";
    signal conv_i2_reg_2832 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state170 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state170 : signal is "none";
    signal ap_CS_fsm_state203 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state203 : signal is "none";
    signal grp_fu_859_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_2842 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state211 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state211 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_810_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_2847 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state213 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state213 : signal is "none";
    signal grp_fu_847_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add5_i_reg_2852 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state223 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state223 : signal is "none";
    signal result_V_21_fu_2191_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_21_reg_2857 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state229 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state229 : signal is "none";
    signal mul_ln234_fu_2202_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal mul_ln234_reg_2862 : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_CS_fsm_state230 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state230 : signal is "none";
    signal gmem_addr_1_reg_2867 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state231 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state231 : signal is "none";
    signal or_ln111_fu_2236_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln111_reg_2873 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state238 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state238 : signal is "none";
    signal grp_fu_2053_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal wah_buffer_index_1_reg_2879 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln77_fu_2246_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln77_reg_2884 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln234_1_fu_2256_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln234_1_reg_2892 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state239 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state239 : signal is "none";
    signal icmp_ln234_fu_2250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state251 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state251 : signal is "none";
    signal wah_values_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_46_reg_2907 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_50_fu_2297_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_50_reg_2912 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state253 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state253 : signal is "none";
    signal ret_V_12_reg_2917 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1049_2_fu_2313_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1049_2_reg_2924 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_3_fu_2352_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state254 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state254 : signal is "none";
    signal compression_buffer_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal compression_buffer_ce0 : STD_LOGIC;
    signal compression_buffer_we0 : STD_LOGIC;
    signal compression_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_buffer_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal delay_buffer_ce0 : STD_LOGIC;
    signal delay_buffer_we0 : STD_LOGIC;
    signal delay_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wah_values_buffer_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal wah_values_buffer_ce0 : STD_LOGIC;
    signal wah_values_buffer_we0 : STD_LOGIC;
    signal wah_values_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sin_or_cos_double_s_fu_810_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_810_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_810_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_810_ap_ready : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (9 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal ap_phi_mux_axilite_out_local_1_phi_fu_603_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal axilite_out_local_1_reg_600 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_empty_80_phi_fu_617_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_80_reg_614 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_tmp_int_7_phi_fu_631_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_int_7_reg_628 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_fu_1225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_1_fu_1194_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_642 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_81_reg_653 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_axilite_out_local_2_phi_fu_668_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal axilite_out_local_2_reg_665 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_empty_83_phi_fu_685_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_83_reg_682 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_tmp_int_3_phi_fu_702_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_int_3_reg_699 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_axilite_out_local_3_phi_fu_721_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal axilite_out_local_3_reg_718 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln106_fu_1994_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_empty_84_phi_fu_732_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_84_reg_729 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_tmp_int_phi_fu_744_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_int_reg_740 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fu_2021_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_7_reg_752 : STD_LOGIC_VECTOR (6 downto 0);
    signal result_2_reg_763 : STD_LOGIC_VECTOR (31 downto 0);
    signal axilite_out_local_4_reg_775 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state263 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state263 : signal is "none";
    signal empty_87_reg_786 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_int_8_reg_796 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sin_or_cos_double_s_fu_810_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state212 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state212 : signal is "none";
    signal p_cast_fu_907_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond3618_fu_912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast5_fu_937_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond3565_fu_942_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast6_fu_967_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_fu_1297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln165_fu_1315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln168_fu_1412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln207_fu_1866_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln210_fu_2029_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln223_fu_2042_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln237_fu_2285_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln85_fu_1049_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln234_fu_2226_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_308 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_71_fu_918_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_72_fu_324 : STD_LOGIC_VECTOR (16 downto 0);
    signal empty_74_fu_948_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal empty_75_fu_328 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_77_fu_978_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal current_sample_1_fu_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state264 : BOOLEAN;
    signal ap_block_state264_io : BOOLEAN;
    signal empty_78_fu_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal wah_buffer_index_fu_340 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_buffer_index_fu_344 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1716_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_buffer_index_fu_348 : STD_LOGIC_VECTOR (31 downto 0);
    signal debug_output_local_0_fu_352 : STD_LOGIC_VECTOR (15 downto 0);
    signal axilite_out_local_0_fu_356 : STD_LOGIC_VECTOR (31 downto 0);
    signal abs_in_1_fu_1288_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal grp_fu_831_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal ap_CS_fsm_state118 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state118 : signal is "none";
    signal ap_CS_fsm_state162 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state162 : signal is "none";
    signal grp_fu_835_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal grp_fu_839_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal ap_CS_fsm_state114 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state114 : signal is "none";
    signal ap_CS_fsm_state158 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state158 : signal is "none";
    signal ap_CS_fsm_state219 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state219 : signal is "none";
    signal grp_fu_852_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_852_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state171 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state171 : signal is "none";
    signal ap_CS_fsm_state176 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state176 : signal is "none";
    signal ap_CS_fsm_state214 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state214 : signal is "none";
    signal ap_CS_fsm_state224 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state224 : signal is "none";
    signal ap_CS_fsm_state181 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state181 : signal is "none";
    signal grp_fu_864_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln6_fu_1040_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_49_fu_1144_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1049_1_fu_1159_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ret_V_10_fu_1176_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_28_fu_1169_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1048_1_fu_1181_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_11_fu_1187_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_fu_1207_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_1200_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1048_fu_1212_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_9_fu_1218_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1240_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1240_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_48_fu_1249_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1049_fu_1264_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_17_fu_1274_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln157_fu_1282_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln65_fu_1307_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln167_fu_1332_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1341_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1341_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln171_fu_1347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln188_1_fu_1375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln188_fu_1380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln188_fu_1370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1341_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln168_fu_1408_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal data_V_fu_1417_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_46_fu_1438_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_fu_1442_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal xs_exp_V_fu_1428_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln346_fu_1456_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_fu_1460_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1512_3_fu_1474_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_1466_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1512_fu_1480_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_1484_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1488_fu_1492_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_1452_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1488_fu_1496_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_35_fu_1500_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_22_fu_1512_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_36_fu_1506_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln818_fu_1520_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1524_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_fu_1534_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_45_fu_1420_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_2_fu_1542_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_2_fu_1556_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_50_fu_1578_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_2_fu_1582_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal xs_exp_V_2_fu_1568_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln346_2_fu_1596_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_2_fu_1600_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1512_5_fu_1614_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_3_fu_1606_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1512_2_fu_1620_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_3_fu_1624_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1488_2_fu_1632_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_2_fu_1592_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1488_3_fu_1636_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_40_fu_1640_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_30_fu_1652_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_41_fu_1646_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln818_2_fu_1660_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_1664_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_2_fu_1674_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_49_fu_1560_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_8_fu_1682_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1704_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1704_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1716_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1716_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal data_V_1_fu_1722_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_48_fu_1744_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_1_fu_1748_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal xs_exp_V_1_fu_1734_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln346_1_fu_1762_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_1_fu_1766_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1512_4_fu_1780_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_2_fu_1772_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1512_1_fu_1786_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_2_fu_1790_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1488_1_fu_1798_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_1_fu_1758_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1488_2_fu_1802_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_38_fu_1806_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_26_fu_1818_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_39_fu_1812_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln818_1_fu_1826_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_1830_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_1_fu_1840_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_47_fu_1726_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_7_fu_1848_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1704_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln207_fu_1862_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_52_fu_1890_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_3_fu_1894_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal xs_exp_V_4_fu_1880_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln346_3_fu_1908_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_3_fu_1912_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1512_fu_1926_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_4_fu_1918_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1512_3_fu_1932_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_4_fu_1936_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1488_3_fu_1944_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_3_fu_1904_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1488_4_fu_1948_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_42_fu_1952_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_34_fu_1964_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_43_fu_1958_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln818_3_fu_1972_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_1976_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_51_fu_2002_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_13_fu_2009_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_20_fu_2014_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2053_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2053_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_V_4_fu_2059_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_54_fu_2081_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_4_fu_2085_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal xs_exp_V_5_fu_2071_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln515_fu_2099_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln515_fu_2103_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1512_2_fu_2117_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_5_fu_2109_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1512_4_fu_2123_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_5_fu_2127_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1488_4_fu_2135_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_4_fu_2095_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln1488_5_fu_2139_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_44_fu_2143_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_38_fu_2155_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_45_fu_2149_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln818_4_fu_2163_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_2167_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_4_fu_2177_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_53_fu_2063_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_16_fu_2185_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln234_fu_2202_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln234_2_fu_2208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln234_fu_2211_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_2216_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln77_fu_2242_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln236_fu_2262_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_2271_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_2271_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2271_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln237_fu_2281_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln1049_2_fu_2324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_13_fu_2329_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_44_fu_2317_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1048_2_fu_2334_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_14_fu_2341_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln598_fu_2348_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_839_ce : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal ap_CS_fsm_state115 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state115 : signal is "none";
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal ap_CS_fsm_state159 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state159 : signal is "none";
    signal ap_CS_fsm_state160 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state160 : signal is "none";
    signal grp_fu_842_ce : STD_LOGIC;
    signal grp_fu_864_ce : STD_LOGIC;
    signal ap_CS_fsm_state167 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state167 : signal is "none";
    signal ap_CS_fsm_state168 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state168 : signal is "none";
    signal ap_CS_fsm_state169 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state169 : signal is "none";
    signal grp_fu_1240_ap_start : STD_LOGIC;
    signal grp_fu_1240_ap_done : STD_LOGIC;
    signal grp_fu_1341_ap_start : STD_LOGIC;
    signal grp_fu_1341_ap_done : STD_LOGIC;
    signal grp_fu_1704_ap_start : STD_LOGIC;
    signal grp_fu_1704_ap_done : STD_LOGIC;
    signal grp_fu_1716_ap_start : STD_LOGIC;
    signal grp_fu_1716_ap_done : STD_LOGIC;
    signal grp_fu_2053_ap_start : STD_LOGIC;
    signal grp_fu_2053_ap_done : STD_LOGIC;
    signal grp_fu_2053_ce : STD_LOGIC;
    signal ap_CS_fsm_state204 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state204 : signal is "none";
    signal ap_CS_fsm_state205 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state205 : signal is "none";
    signal ap_CS_fsm_state206 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state206 : signal is "none";
    signal ap_CS_fsm_state207 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state207 : signal is "none";
    signal ap_CS_fsm_state208 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state208 : signal is "none";
    signal ap_CS_fsm_state209 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state209 : signal is "none";
    signal ap_CS_fsm_state210 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state210 : signal is "none";
    signal ap_CS_fsm_state215 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state215 : signal is "none";
    signal ap_CS_fsm_state216 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state216 : signal is "none";
    signal ap_CS_fsm_state217 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state217 : signal is "none";
    signal ap_CS_fsm_state220 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state220 : signal is "none";
    signal ap_CS_fsm_state221 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state221 : signal is "none";
    signal ap_CS_fsm_state222 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state222 : signal is "none";
    signal ap_CS_fsm_state225 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state225 : signal is "none";
    signal ap_CS_fsm_state226 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state226 : signal is "none";
    signal ap_CS_fsm_state227 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state227 : signal is "none";
    signal ap_CS_fsm_state233 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state233 : signal is "none";
    signal ap_CS_fsm_state234 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state234 : signal is "none";
    signal ap_CS_fsm_state235 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state235 : signal is "none";
    signal ap_CS_fsm_state236 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state236 : signal is "none";
    signal ap_CS_fsm_state237 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state237 : signal is "none";
    signal grp_fu_2271_ap_start : STD_LOGIC;
    signal grp_fu_2271_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (265 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ST_fsm_state85_blk : STD_LOGIC;
    signal ap_ST_fsm_state86_blk : STD_LOGIC;
    signal ap_ST_fsm_state87_blk : STD_LOGIC;
    signal ap_ST_fsm_state88_blk : STD_LOGIC;
    signal ap_ST_fsm_state89_blk : STD_LOGIC;
    signal ap_ST_fsm_state90_blk : STD_LOGIC;
    signal ap_ST_fsm_state91_blk : STD_LOGIC;
    signal ap_ST_fsm_state92_blk : STD_LOGIC;
    signal ap_ST_fsm_state93_blk : STD_LOGIC;
    signal ap_ST_fsm_state94_blk : STD_LOGIC;
    signal ap_ST_fsm_state95_blk : STD_LOGIC;
    signal ap_ST_fsm_state96_blk : STD_LOGIC;
    signal ap_ST_fsm_state97_blk : STD_LOGIC;
    signal ap_ST_fsm_state98_blk : STD_LOGIC;
    signal ap_ST_fsm_state99_blk : STD_LOGIC;
    signal ap_ST_fsm_state100_blk : STD_LOGIC;
    signal ap_ST_fsm_state101_blk : STD_LOGIC;
    signal ap_ST_fsm_state102_blk : STD_LOGIC;
    signal ap_ST_fsm_state103_blk : STD_LOGIC;
    signal ap_ST_fsm_state104_blk : STD_LOGIC;
    signal ap_ST_fsm_state105_blk : STD_LOGIC;
    signal ap_ST_fsm_state106_blk : STD_LOGIC;
    signal ap_ST_fsm_state107_blk : STD_LOGIC;
    signal ap_ST_fsm_state108_blk : STD_LOGIC;
    signal ap_ST_fsm_state109_blk : STD_LOGIC;
    signal ap_ST_fsm_state110_blk : STD_LOGIC;
    signal ap_ST_fsm_state111_blk : STD_LOGIC;
    signal ap_ST_fsm_state112_blk : STD_LOGIC;
    signal ap_ST_fsm_state113_blk : STD_LOGIC;
    signal ap_ST_fsm_state114_blk : STD_LOGIC;
    signal ap_ST_fsm_state115_blk : STD_LOGIC;
    signal ap_ST_fsm_state116_blk : STD_LOGIC;
    signal ap_ST_fsm_state117_blk : STD_LOGIC;
    signal ap_ST_fsm_state118_blk : STD_LOGIC;
    signal ap_ST_fsm_state119_blk : STD_LOGIC;
    signal ap_ST_fsm_state120_blk : STD_LOGIC;
    signal ap_ST_fsm_state121_blk : STD_LOGIC;
    signal ap_ST_fsm_state122_blk : STD_LOGIC;
    signal ap_ST_fsm_state123_blk : STD_LOGIC;
    signal ap_ST_fsm_state124_blk : STD_LOGIC;
    signal ap_ST_fsm_state125_blk : STD_LOGIC;
    signal ap_ST_fsm_state126_blk : STD_LOGIC;
    signal ap_ST_fsm_state127_blk : STD_LOGIC;
    signal ap_ST_fsm_state128_blk : STD_LOGIC;
    signal ap_ST_fsm_state129_blk : STD_LOGIC;
    signal ap_ST_fsm_state130_blk : STD_LOGIC;
    signal ap_ST_fsm_state131_blk : STD_LOGIC;
    signal ap_ST_fsm_state132_blk : STD_LOGIC;
    signal ap_ST_fsm_state133_blk : STD_LOGIC;
    signal ap_ST_fsm_state134_blk : STD_LOGIC;
    signal ap_ST_fsm_state135_blk : STD_LOGIC;
    signal ap_ST_fsm_state136_blk : STD_LOGIC;
    signal ap_ST_fsm_state137_blk : STD_LOGIC;
    signal ap_ST_fsm_state138_blk : STD_LOGIC;
    signal ap_ST_fsm_state139_blk : STD_LOGIC;
    signal ap_ST_fsm_state140_blk : STD_LOGIC;
    signal ap_ST_fsm_state141_blk : STD_LOGIC;
    signal ap_ST_fsm_state142_blk : STD_LOGIC;
    signal ap_ST_fsm_state143_blk : STD_LOGIC;
    signal ap_ST_fsm_state144_blk : STD_LOGIC;
    signal ap_ST_fsm_state145_blk : STD_LOGIC;
    signal ap_ST_fsm_state146_blk : STD_LOGIC;
    signal ap_ST_fsm_state147_blk : STD_LOGIC;
    signal ap_ST_fsm_state148_blk : STD_LOGIC;
    signal ap_ST_fsm_state149_blk : STD_LOGIC;
    signal ap_ST_fsm_state150_blk : STD_LOGIC;
    signal ap_ST_fsm_state151_blk : STD_LOGIC;
    signal ap_ST_fsm_state152_blk : STD_LOGIC;
    signal ap_ST_fsm_state153_blk : STD_LOGIC;
    signal ap_ST_fsm_state154_blk : STD_LOGIC;
    signal ap_ST_fsm_state155_blk : STD_LOGIC;
    signal ap_ST_fsm_state156_blk : STD_LOGIC;
    signal ap_ST_fsm_state157_blk : STD_LOGIC;
    signal ap_ST_fsm_state158_blk : STD_LOGIC;
    signal ap_ST_fsm_state159_blk : STD_LOGIC;
    signal ap_ST_fsm_state160_blk : STD_LOGIC;
    signal ap_ST_fsm_state161_blk : STD_LOGIC;
    signal ap_ST_fsm_state162_blk : STD_LOGIC;
    signal ap_ST_fsm_state163_blk : STD_LOGIC;
    signal ap_ST_fsm_state164_blk : STD_LOGIC;
    signal ap_ST_fsm_state165_blk : STD_LOGIC;
    signal ap_ST_fsm_state166_blk : STD_LOGIC;
    signal ap_ST_fsm_state167_blk : STD_LOGIC;
    signal ap_ST_fsm_state168_blk : STD_LOGIC;
    signal ap_ST_fsm_state169_blk : STD_LOGIC;
    signal ap_ST_fsm_state170_blk : STD_LOGIC;
    signal ap_ST_fsm_state171_blk : STD_LOGIC;
    signal ap_ST_fsm_state172_blk : STD_LOGIC;
    signal ap_ST_fsm_state173_blk : STD_LOGIC;
    signal ap_ST_fsm_state174_blk : STD_LOGIC;
    signal ap_ST_fsm_state175_blk : STD_LOGIC;
    signal ap_ST_fsm_state176_blk : STD_LOGIC;
    signal ap_ST_fsm_state177_blk : STD_LOGIC;
    signal ap_ST_fsm_state178_blk : STD_LOGIC;
    signal ap_ST_fsm_state179_blk : STD_LOGIC;
    signal ap_ST_fsm_state180_blk : STD_LOGIC;
    signal ap_ST_fsm_state181_blk : STD_LOGIC;
    signal ap_ST_fsm_state182_blk : STD_LOGIC;
    signal ap_ST_fsm_state183_blk : STD_LOGIC;
    signal ap_ST_fsm_state184_blk : STD_LOGIC;
    signal ap_ST_fsm_state185_blk : STD_LOGIC;
    signal ap_ST_fsm_state186_blk : STD_LOGIC;
    signal ap_ST_fsm_state187_blk : STD_LOGIC;
    signal ap_ST_fsm_state188_blk : STD_LOGIC;
    signal ap_ST_fsm_state189_blk : STD_LOGIC;
    signal ap_ST_fsm_state190_blk : STD_LOGIC;
    signal ap_ST_fsm_state191_blk : STD_LOGIC;
    signal ap_ST_fsm_state192_blk : STD_LOGIC;
    signal ap_ST_fsm_state193_blk : STD_LOGIC;
    signal ap_ST_fsm_state194_blk : STD_LOGIC;
    signal ap_ST_fsm_state195_blk : STD_LOGIC;
    signal ap_ST_fsm_state196_blk : STD_LOGIC;
    signal ap_ST_fsm_state197_blk : STD_LOGIC;
    signal ap_ST_fsm_state198_blk : STD_LOGIC;
    signal ap_ST_fsm_state199_blk : STD_LOGIC;
    signal ap_ST_fsm_state200_blk : STD_LOGIC;
    signal ap_ST_fsm_state201_blk : STD_LOGIC;
    signal ap_ST_fsm_state202_blk : STD_LOGIC;
    signal ap_ST_fsm_state203_blk : STD_LOGIC;
    signal ap_ST_fsm_state204_blk : STD_LOGIC;
    signal ap_ST_fsm_state205_blk : STD_LOGIC;
    signal ap_ST_fsm_state206_blk : STD_LOGIC;
    signal ap_ST_fsm_state207_blk : STD_LOGIC;
    signal ap_ST_fsm_state208_blk : STD_LOGIC;
    signal ap_ST_fsm_state209_blk : STD_LOGIC;
    signal ap_ST_fsm_state210_blk : STD_LOGIC;
    signal ap_ST_fsm_state211_blk : STD_LOGIC;
    signal ap_ST_fsm_state212_blk : STD_LOGIC;
    signal ap_ST_fsm_state213_blk : STD_LOGIC;
    signal ap_ST_fsm_state214_blk : STD_LOGIC;
    signal ap_ST_fsm_state215_blk : STD_LOGIC;
    signal ap_ST_fsm_state216_blk : STD_LOGIC;
    signal ap_ST_fsm_state217_blk : STD_LOGIC;
    signal ap_ST_fsm_state218_blk : STD_LOGIC;
    signal ap_ST_fsm_state219_blk : STD_LOGIC;
    signal ap_ST_fsm_state220_blk : STD_LOGIC;
    signal ap_ST_fsm_state221_blk : STD_LOGIC;
    signal ap_ST_fsm_state222_blk : STD_LOGIC;
    signal ap_ST_fsm_state223_blk : STD_LOGIC;
    signal ap_ST_fsm_state224_blk : STD_LOGIC;
    signal ap_ST_fsm_state225_blk : STD_LOGIC;
    signal ap_ST_fsm_state226_blk : STD_LOGIC;
    signal ap_ST_fsm_state227_blk : STD_LOGIC;
    signal ap_ST_fsm_state228_blk : STD_LOGIC;
    signal ap_ST_fsm_state229_blk : STD_LOGIC;
    signal ap_ST_fsm_state230_blk : STD_LOGIC;
    signal ap_ST_fsm_state231_blk : STD_LOGIC;
    signal ap_ST_fsm_state232_blk : STD_LOGIC;
    signal ap_ST_fsm_state233_blk : STD_LOGIC;
    signal ap_ST_fsm_state234_blk : STD_LOGIC;
    signal ap_ST_fsm_state235_blk : STD_LOGIC;
    signal ap_ST_fsm_state236_blk : STD_LOGIC;
    signal ap_ST_fsm_state237_blk : STD_LOGIC;
    signal ap_ST_fsm_state238_blk : STD_LOGIC;
    signal ap_ST_fsm_state239_blk : STD_LOGIC;
    signal ap_ST_fsm_state240_blk : STD_LOGIC;
    signal ap_ST_fsm_state241_blk : STD_LOGIC;
    signal ap_ST_fsm_state242_blk : STD_LOGIC;
    signal ap_ST_fsm_state243_blk : STD_LOGIC;
    signal ap_ST_fsm_state244_blk : STD_LOGIC;
    signal ap_ST_fsm_state245_blk : STD_LOGIC;
    signal ap_ST_fsm_state246_blk : STD_LOGIC;
    signal ap_ST_fsm_state247_blk : STD_LOGIC;
    signal ap_ST_fsm_state248_blk : STD_LOGIC;
    signal ap_ST_fsm_state249_blk : STD_LOGIC;
    signal ap_ST_fsm_state250_blk : STD_LOGIC;
    signal ap_ST_fsm_state251_blk : STD_LOGIC;
    signal ap_ST_fsm_state252_blk : STD_LOGIC;
    signal ap_ST_fsm_state253_blk : STD_LOGIC;
    signal ap_ST_fsm_state254_blk : STD_LOGIC;
    signal ap_ST_fsm_state255_blk : STD_LOGIC;
    signal ap_ST_fsm_state256_blk : STD_LOGIC;
    signal ap_ST_fsm_state257_blk : STD_LOGIC;
    signal ap_ST_fsm_state258_blk : STD_LOGIC;
    signal ap_ST_fsm_state259_blk : STD_LOGIC;
    signal ap_ST_fsm_state260_blk : STD_LOGIC;
    signal ap_ST_fsm_state261_blk : STD_LOGIC;
    signal ap_ST_fsm_state262_blk : STD_LOGIC;
    signal ap_ST_fsm_state263_blk : STD_LOGIC;
    signal ap_ST_fsm_state264_blk : STD_LOGIC;
    signal ap_ST_fsm_state265_blk : STD_LOGIC;
    signal ap_ST_fsm_state266_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state266 : BOOLEAN;
    signal regslice_both_INPUT_r_V_data_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_r_TVALID_int_regslice : STD_LOGIC;
    signal INPUT_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_INPUT_r_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_r_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_INPUT_r_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_r_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_r_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_INPUT_r_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_r_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_r_V_user_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TUSER_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_INPUT_r_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_r_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_r_V_last_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_INPUT_r_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_r_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_r_V_id_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TID_int_regslice : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_INPUT_r_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_r_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_r_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TDEST_int_regslice : STD_LOGIC_VECTOR (5 downto 0);
    signal regslice_both_INPUT_r_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_r_V_dest_V_U_ack_in : STD_LOGIC;
    signal OUTPUT_r_TVALID_int_regslice : STD_LOGIC;
    signal OUTPUT_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_last_V_U_apdone_blk : STD_LOGIC;
    signal OUTPUT_r_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_OUTPUT_r_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_condition_4073 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component guitar_effects_sin_or_cos_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component guitar_effects_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_fdiv_32ns_32ns_32_12_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_sitofp_32ns_32_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_dadd_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component guitar_effects_dmul_64ns_64ns_64_5_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component guitar_effects_ddiv_64ns_64ns_64_31_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component guitar_effects_sitodp_32ns_64_5_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component guitar_effects_mul_32s_8s_40_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component guitar_effects_srem_32ns_10ns_32_36_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_srem_11ns_10ns_9_15_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component guitar_effects_srem_32ns_18ns_17_36_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component guitar_effects_srem_32ns_18ns_32_36_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_srem_32ns_8ns_32_36_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_mul_32s_9ns_41_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (40 downto 0) );
    end component;


    component guitar_effects_srem_9ns_8ns_7_13_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component guitar_effects_mul_32s_16s_48_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component guitar_effects_lpf_coefficients_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_compression_buffer_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_delay_buffer_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_wah_values_buffer_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_control_r_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        axilite_out : IN STD_LOGIC_VECTOR (31 downto 0);
        axilite_out_ap_vld : IN STD_LOGIC;
        control : OUT STD_LOGIC_VECTOR (7 downto 0);
        distortion_threshold : OUT STD_LOGIC_VECTOR (31 downto 0);
        distortion_clip_factor : OUT STD_LOGIC_VECTOR (7 downto 0);
        compression_min_threshold : OUT STD_LOGIC_VECTOR (31 downto 0);
        compression_max_threshold : OUT STD_LOGIC_VECTOR (31 downto 0);
        compression_zero_threshold : OUT STD_LOGIC_VECTOR (31 downto 0);
        delay_mult : OUT STD_LOGIC_VECTOR (31 downto 0);
        delay_samples : OUT STD_LOGIC_VECTOR (31 downto 0);
        tempo : OUT STD_LOGIC_VECTOR (31 downto 0);
        wah_coeffs : OUT STD_LOGIC_VECTOR (63 downto 0);
        debug_output : IN STD_LOGIC_VECTOR (15 downto 0);
        debug_output_ap_vld : IN STD_LOGIC );
    end component;


    component guitar_effects_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (9 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component guitar_effects_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    lpf_coefficients_U : component guitar_effects_lpf_coefficients_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 441,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lpf_coefficients_address0,
        ce0 => lpf_coefficients_ce0,
        q0 => lpf_coefficients_q0);

    compression_buffer_U : component guitar_effects_compression_buffer_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 441,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => compression_buffer_address0,
        ce0 => compression_buffer_ce0,
        we0 => compression_buffer_we0,
        d0 => compression_buffer_d0,
        q0 => compression_buffer_q0);

    delay_buffer_U : component guitar_effects_delay_buffer_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 88200,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => delay_buffer_address0,
        ce0 => delay_buffer_ce0,
        we0 => delay_buffer_we0,
        d0 => delay_buffer_d0,
        q0 => delay_buffer_q0);

    wah_values_buffer_U : component guitar_effects_wah_values_buffer_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => wah_values_buffer_address0,
        ce0 => wah_values_buffer_ce0,
        we0 => wah_values_buffer_we0,
        d0 => wah_values_buffer_d0,
        q0 => wah_values_buffer_q0);

    grp_sin_or_cos_double_s_fu_810 : component guitar_effects_sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sin_or_cos_double_s_fu_810_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_810_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_810_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_810_ap_ready,
        t_in => x_assign_reg_2842,
        ap_return => grp_sin_or_cos_double_s_fu_810_ap_return);

    control_r_s_axi_U : component guitar_effects_control_r_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_R_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_R_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_r_AWVALID,
        AWREADY => s_axi_control_r_AWREADY,
        AWADDR => s_axi_control_r_AWADDR,
        WVALID => s_axi_control_r_WVALID,
        WREADY => s_axi_control_r_WREADY,
        WDATA => s_axi_control_r_WDATA,
        WSTRB => s_axi_control_r_WSTRB,
        ARVALID => s_axi_control_r_ARVALID,
        ARREADY => s_axi_control_r_ARREADY,
        ARADDR => s_axi_control_r_ARADDR,
        RVALID => s_axi_control_r_RVALID,
        RREADY => s_axi_control_r_RREADY,
        RDATA => s_axi_control_r_RDATA,
        RRESP => s_axi_control_r_RRESP,
        BVALID => s_axi_control_r_BVALID,
        BREADY => s_axi_control_r_BREADY,
        BRESP => s_axi_control_r_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        axilite_out => axilite_out_local_4_reg_775,
        axilite_out_ap_vld => axilite_out_ap_vld,
        control => control,
        distortion_threshold => distortion_threshold,
        distortion_clip_factor => distortion_clip_factor,
        compression_min_threshold => compression_min_threshold,
        compression_max_threshold => compression_max_threshold,
        compression_zero_threshold => compression_zero_threshold,
        delay_mult => delay_mult,
        delay_samples => delay_samples,
        tempo => tempo,
        wah_coeffs => wah_coeffs,
        debug_output => debug_output_local_0_fu_352,
        debug_output_ap_vld => debug_output_ap_vld);

    gmem_m_axi_U : component guitar_effects_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 10,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        USER_DW => 16,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARLEN => gmem_ARLEN,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => gmem_BVALID,
        I_BREADY => ap_const_logic_0);

    fadd_32ns_32ns_32_4_full_dsp_1_U33 : component guitar_effects_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_867,
        din1 => reg_874,
        ce => ap_const_logic_1,
        dout => grp_fu_827_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U34 : component guitar_effects_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_867,
        din1 => grp_fu_831_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_831_p2);

    fdiv_32ns_32ns_32_12_no_dsp_1_U35 : component guitar_effects_fdiv_32ns_32ns_32_12_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_835_p0,
        din1 => reg_867,
        ce => ap_const_logic_1,
        dout => grp_fu_835_p2);

    sitofp_32ns_32_4_no_dsp_1_U36 : component guitar_effects_sitofp_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_839_p0,
        ce => grp_fu_839_ce,
        dout => grp_fu_839_p1);

    sitofp_32ns_32_4_no_dsp_1_U37 : component guitar_effects_sitofp_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => compression_min_threshold_read_reg_2420,
        ce => grp_fu_842_ce,
        dout => grp_fu_842_p1);

    dadd_64ns_64ns_64_5_full_dsp_1_U38 : component guitar_effects_dadd_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_884,
        din1 => ap_const_lv64_3FE0000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_847_p2);

    dmul_64ns_64ns_64_5_max_dsp_1_U39 : component guitar_effects_dmul_64ns_64ns_64_5_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_852_p0,
        din1 => grp_fu_852_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_852_p2);

    ddiv_64ns_64ns_64_31_no_dsp_1_U40 : component guitar_effects_ddiv_64ns_64ns_64_31_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_884,
        din1 => ap_const_lv64_40F5888000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_859_p2);

    sitodp_32ns_64_5_no_dsp_1_U41 : component guitar_effects_sitodp_32ns_64_5_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_864_p0,
        ce => grp_fu_864_ce,
        dout => grp_fu_864_p1);

    mul_32s_8s_40_1_1_U42 : component guitar_effects_mul_32s_8s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 40)
    port map (
        din0 => r_V_reg_2644,
        din1 => r_V_49_fu_1144_p1,
        dout => r_V_49_fu_1144_p2);

    srem_32ns_10ns_32_36_seq_1_U43 : component guitar_effects_srem_32ns_10ns_32_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 10,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_1240_ap_start,
        done => grp_fu_1240_ap_done,
        din0 => grp_fu_1240_p0,
        din1 => grp_fu_1240_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1240_p2);

    mul_32s_8s_40_1_1_U44 : component guitar_effects_mul_32s_8s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 40)
    port map (
        din0 => r_V_21_reg_2649,
        din1 => r_V_48_fu_1249_p1,
        dout => r_V_48_fu_1249_p2);

    srem_11ns_10ns_9_15_seq_1_U45 : component guitar_effects_srem_11ns_10ns_9_15_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 11,
        din1_WIDTH => 10,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_1341_ap_start,
        done => grp_fu_1341_ap_done,
        din0 => grp_fu_1341_p0,
        din1 => grp_fu_1341_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1341_p2);

    srem_32ns_18ns_17_36_seq_1_U46 : component guitar_effects_srem_32ns_18ns_17_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 18,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_1704_ap_start,
        done => grp_fu_1704_ap_done,
        din0 => grp_fu_1704_p0,
        din1 => grp_fu_1704_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1704_p2);

    srem_32ns_18ns_32_36_seq_1_U47 : component guitar_effects_srem_32ns_18ns_32_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 18,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_1716_ap_start,
        done => grp_fu_1716_ap_done,
        din0 => grp_fu_1716_p0,
        din1 => grp_fu_1716_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1716_p2);

    srem_32ns_8ns_32_36_seq_1_U48 : component guitar_effects_srem_32ns_8ns_32_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_2053_ap_start,
        done => grp_fu_2053_ap_done,
        din0 => grp_fu_2053_p0,
        din1 => grp_fu_2053_p1,
        ce => grp_fu_2053_ce,
        dout => grp_fu_2053_p2);

    mul_32s_9ns_41_1_1_U49 : component guitar_effects_mul_32s_9ns_41_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 9,
        dout_WIDTH => 41)
    port map (
        din0 => result_V_21_reg_2857,
        din1 => mul_ln234_fu_2202_p1,
        dout => mul_ln234_fu_2202_p2);

    srem_9ns_8ns_7_13_seq_1_U50 : component guitar_effects_srem_9ns_8ns_7_13_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 9,
        din1_WIDTH => 8,
        dout_WIDTH => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_2271_ap_start,
        done => grp_fu_2271_ap_done,
        din0 => grp_fu_2271_p0,
        din1 => grp_fu_2271_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2271_p2);

    mul_32s_16s_48_1_1_U51 : component guitar_effects_mul_32s_16s_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 48)
    port map (
        din0 => r_V_46_reg_2907,
        din1 => reg_891,
        dout => r_V_50_fu_2297_p2);

    regslice_both_INPUT_r_V_data_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TDATA,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_data_V_U_ack_in,
        data_out => INPUT_r_TDATA_int_regslice,
        vld_out => INPUT_r_TVALID_int_regslice,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_data_V_U_apdone_blk);

    regslice_both_INPUT_r_V_keep_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TKEEP,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_keep_V_U_ack_in,
        data_out => INPUT_r_TKEEP_int_regslice,
        vld_out => regslice_both_INPUT_r_V_keep_V_U_vld_out,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_keep_V_U_apdone_blk);

    regslice_both_INPUT_r_V_strb_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TSTRB,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_strb_V_U_ack_in,
        data_out => INPUT_r_TSTRB_int_regslice,
        vld_out => regslice_both_INPUT_r_V_strb_V_U_vld_out,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_strb_V_U_apdone_blk);

    regslice_both_INPUT_r_V_user_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TUSER,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_user_V_U_ack_in,
        data_out => INPUT_r_TUSER_int_regslice,
        vld_out => regslice_both_INPUT_r_V_user_V_U_vld_out,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_user_V_U_apdone_blk);

    regslice_both_INPUT_r_V_last_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TLAST,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_last_V_U_ack_in,
        data_out => INPUT_r_TLAST_int_regslice,
        vld_out => regslice_both_INPUT_r_V_last_V_U_vld_out,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_last_V_U_apdone_blk);

    regslice_both_INPUT_r_V_id_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TID,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_id_V_U_ack_in,
        data_out => INPUT_r_TID_int_regslice,
        vld_out => regslice_both_INPUT_r_V_id_V_U_vld_out,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_id_V_U_apdone_blk);

    regslice_both_INPUT_r_V_dest_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TDEST,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_dest_V_U_ack_in,
        data_out => INPUT_r_TDEST_int_regslice,
        vld_out => regslice_both_INPUT_r_V_dest_V_U_vld_out,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_dest_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_data_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_int_8_reg_796,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => OUTPUT_r_TREADY_int_regslice,
        data_out => OUTPUT_r_TDATA,
        vld_out => regslice_both_OUTPUT_r_V_data_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_data_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_keep_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_keep_V_reg_2592,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_keep_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TKEEP,
        vld_out => regslice_both_OUTPUT_r_V_keep_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_keep_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_strb_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_strb_V_reg_2597,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_strb_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TSTRB,
        vld_out => regslice_both_OUTPUT_r_V_strb_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_strb_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_user_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_user_V_reg_2602,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_user_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TUSER,
        vld_out => regslice_both_OUTPUT_r_V_user_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_user_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_last_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => OUTPUT_r_TLAST_int_regslice,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_last_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TLAST,
        vld_out => regslice_both_OUTPUT_r_V_last_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_last_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_id_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_id_V_reg_2611,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_id_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TID,
        vld_out => regslice_both_OUTPUT_r_V_id_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_id_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_dest_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_dest_V_reg_2616,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_dest_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TDEST,
        vld_out => regslice_both_OUTPUT_r_V_dest_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_810_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sin_or_cos_double_s_fu_810_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state212)) then 
                    grp_sin_or_cos_double_s_fu_810_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_810_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_810_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    axilite_out_local_0_fu_356_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3554_fu_972_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                axilite_out_local_0_fu_356 <= ap_const_lv32_0;
            elsif ((not(((ap_const_boolean_1 = ap_block_state264_io) or ((tmp_last_V_reg_2607 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_2607 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) and (tmp_last_V_reg_2607 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state264))) then 
                axilite_out_local_0_fu_356 <= axilite_out_local_4_reg_775;
            end if; 
        end if;
    end process;

    axilite_out_local_1_reg_600_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln143_fu_1126_p2 = ap_const_lv1_0) and (icmp_ln141_fu_1121_p2 = ap_const_lv1_0) and (tmp_reg_2528 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice))) then 
                axilite_out_local_1_reg_600 <= or_ln96_fu_1115_p2;
            elsif ((((icmp_ln143_reg_2640 = ap_const_lv1_1) and (icmp_ln141_reg_2636 = ap_const_lv1_0) and (tmp_reg_2528 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((icmp_ln141_reg_2636 = ap_const_lv1_1) and (tmp_reg_2528 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
                axilite_out_local_1_reg_600 <= or_ln96_reg_2626;
            elsif (((tmp_reg_2528 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice))) then 
                axilite_out_local_1_reg_600 <= axilite_out_local_0_fu_356;
            end if; 
        end if;
    end process;

    axilite_out_local_2_reg_665_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln179_fu_1359_p2 = ap_const_lv1_0) and (icmp_ln165_fu_1320_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln188_1_fu_1386_p2) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((icmp_ln179_reg_2744 = ap_const_lv1_0) and (tmp_11_reg_2532 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln188_1_reg_2752) and (ap_const_logic_1 = ap_CS_fsm_state101)) or ((icmp_ln189_fu_1364_p2 = ap_const_lv1_0) and (icmp_ln179_fu_1359_p2 = ap_const_lv1_1) and (icmp_ln165_fu_1320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((icmp_ln189_reg_2748 = ap_const_lv1_1) and (icmp_ln179_reg_2744 = ap_const_lv1_1) and (tmp_11_reg_2532 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state101)))) then 
                axilite_out_local_2_reg_665 <= or_ln101_reg_2696;
            elsif (((tmp_11_reg_2532 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                axilite_out_local_2_reg_665 <= ap_phi_mux_axilite_out_local_1_phi_fu_603_p8;
            end if; 
        end if;
    end process;

    axilite_out_local_3_reg_718_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_13_reg_2536 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state166))) then 
                axilite_out_local_3_reg_718 <= or_ln106_fu_1994_p2;
            elsif (((tmp_13_reg_2536 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state101))) then 
                axilite_out_local_3_reg_718 <= ap_phi_mux_axilite_out_local_2_phi_fu_668_p10;
            end if; 
        end if;
    end process;

    axilite_out_local_4_reg_775_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln23_reg_2449 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state166))) then 
                axilite_out_local_4_reg_775 <= ap_phi_mux_axilite_out_local_3_phi_fu_721_p4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state263)) then 
                axilite_out_local_4_reg_775 <= or_ln111_reg_2873;
            end if; 
        end if;
    end process;

    compression_buffer_index_fu_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3554_fu_972_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                compression_buffer_index_fu_348 <= ap_const_lv32_0;
            elsif ((((icmp_ln179_fu_1359_p2 = ap_const_lv1_0) and (icmp_ln165_fu_1320_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln188_1_fu_1386_p2) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((icmp_ln179_fu_1359_p2 = ap_const_lv1_0) and (icmp_ln165_fu_1320_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln188_1_fu_1386_p2) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((icmp_ln189_fu_1364_p2 = ap_const_lv1_1) and (icmp_ln179_fu_1359_p2 = ap_const_lv1_1) and (icmp_ln165_fu_1320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((icmp_ln189_fu_1364_p2 = ap_const_lv1_0) and (icmp_ln179_fu_1359_p2 = ap_const_lv1_1) and (icmp_ln165_fu_1320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53)))) then 
                compression_buffer_index_fu_348 <= compression_buffer_index_1_reg_2708;
            end if; 
        end if;
    end process;

    current_sample_1_fu_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3554_fu_972_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                current_sample_1_fu_332 <= ap_const_lv32_0;
            elsif ((not(((ap_const_boolean_1 = ap_block_state264_io) or ((tmp_last_V_reg_2607 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_2607 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) and (tmp_last_V_reg_2607 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state264))) then 
                current_sample_1_fu_332 <= current_sample_reg_2621;
            end if; 
        end if;
    end process;

    debug_output_local_0_fu_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                debug_output_local_0_fu_352 <= gmem_addr_read_reg_2546;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state263)) then 
                debug_output_local_0_fu_352 <= reg_891;
            end if; 
        end if;
    end process;

    delay_buffer_index_fu_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3554_fu_972_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                delay_buffer_index_fu_344 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state156)) then 
                delay_buffer_index_fu_344 <= grp_fu_1716_p2;
            end if; 
        end if;
    end process;

    empty_72_fu_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3618_fu_912_p2 = ap_const_lv1_1))) then 
                empty_72_fu_324 <= ap_const_lv17_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3565_fu_942_p2 = ap_const_lv1_0))) then 
                empty_72_fu_324 <= empty_74_fu_948_p2;
            end if; 
        end if;
    end process;

    empty_75_fu_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3565_fu_942_p2 = ap_const_lv1_1))) then 
                empty_75_fu_328 <= ap_const_lv7_0;
            elsif (((exitcond3554_fu_972_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                empty_75_fu_328 <= empty_77_fu_978_p2;
            end if; 
        end if;
    end process;

    empty_78_fu_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3554_fu_972_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                empty_78_fu_336 <= ap_const_lv32_0;
            elsif ((not(((ap_const_boolean_1 = ap_block_state264_io) or ((tmp_last_V_reg_2607 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_2607 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) and (tmp_last_V_reg_2607 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state264))) then 
                empty_78_fu_336 <= empty_87_reg_786;
            end if; 
        end if;
    end process;

    empty_80_reg_614_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln143_fu_1126_p2 = ap_const_lv1_0) and (icmp_ln141_fu_1121_p2 = ap_const_lv1_0) and (tmp_reg_2528 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice))) then 
                empty_80_reg_614 <= or_ln96_fu_1115_p2;
            elsif ((((icmp_ln143_reg_2640 = ap_const_lv1_1) and (icmp_ln141_reg_2636 = ap_const_lv1_0) and (tmp_reg_2528 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((icmp_ln141_reg_2636 = ap_const_lv1_1) and (tmp_reg_2528 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
                empty_80_reg_614 <= or_ln96_reg_2626;
            elsif (((tmp_reg_2528 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice))) then 
                empty_80_reg_614 <= empty_78_fu_336;
            end if; 
        end if;
    end process;

    empty_81_reg_653_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                empty_81_reg_653 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
                empty_81_reg_653 <= result_V_18_fu_1548_p3;
            end if; 
        end if;
    end process;

    empty_83_reg_682_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln179_fu_1359_p2 = ap_const_lv1_0) and (icmp_ln165_fu_1320_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln188_1_fu_1386_p2) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((icmp_ln179_reg_2744 = ap_const_lv1_0) and (tmp_11_reg_2532 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln188_1_reg_2752) and (ap_const_logic_1 = ap_CS_fsm_state101)) or ((icmp_ln189_fu_1364_p2 = ap_const_lv1_0) and (icmp_ln179_fu_1359_p2 = ap_const_lv1_1) and (icmp_ln165_fu_1320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((icmp_ln189_reg_2748 = ap_const_lv1_1) and (icmp_ln179_reg_2744 = ap_const_lv1_1) and (tmp_11_reg_2532 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state101)))) then 
                empty_83_reg_682 <= or_ln101_reg_2696;
            elsif (((tmp_11_reg_2532 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                empty_83_reg_682 <= ap_phi_mux_empty_80_phi_fu_617_p8;
            end if; 
        end if;
    end process;

    empty_84_reg_729_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_13_reg_2536 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state166))) then 
                empty_84_reg_729 <= or_ln106_fu_1994_p2;
            elsif (((tmp_13_reg_2536 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state101))) then 
                empty_84_reg_729 <= ap_phi_mux_empty_83_phi_fu_685_p10;
            end if; 
        end if;
    end process;

    empty_87_reg_786_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln23_reg_2449 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state166))) then 
                empty_87_reg_786 <= ap_phi_mux_empty_84_phi_fu_732_p4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state263)) then 
                empty_87_reg_786 <= or_ln111_reg_2873;
            end if; 
        end if;
    end process;

    empty_fu_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                empty_fu_308 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3618_fu_912_p2 = ap_const_lv1_0))) then 
                empty_fu_308 <= empty_71_fu_918_p2;
            end if; 
        end if;
    end process;

    i_7_reg_752_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state238)) then 
                i_7_reg_752 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state254)) then 
                i_7_reg_752 <= add_ln234_1_reg_2892;
            end if; 
        end if;
    end process;

    i_reg_642_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                i_reg_642 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
                i_reg_642 <= add_ln165_reg_2724;
            end if; 
        end if;
    end process;

    tmp_int_3_reg_699_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln179_reg_2744 = ap_const_lv1_0) and (tmp_11_reg_2532 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln188_1_reg_2752) and (ap_const_logic_1 = ap_CS_fsm_state101))) then 
                tmp_int_3_reg_699 <= result_V_reg_2781;
            elsif ((((icmp_ln179_fu_1359_p2 = ap_const_lv1_0) and (icmp_ln165_fu_1320_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln188_1_fu_1386_p2) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((icmp_ln189_fu_1364_p2 = ap_const_lv1_0) and (icmp_ln179_fu_1359_p2 = ap_const_lv1_1) and (icmp_ln165_fu_1320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53)))) then 
                tmp_int_3_reg_699 <= tmp_int_7_reg_628;
            elsif (((icmp_ln189_reg_2748 = ap_const_lv1_1) and (icmp_ln179_reg_2744 = ap_const_lv1_1) and (tmp_11_reg_2532 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state101))) then 
                tmp_int_3_reg_699 <= result_V_19_reg_2801;
            elsif (((tmp_11_reg_2532 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                tmp_int_3_reg_699 <= ap_phi_mux_tmp_int_7_phi_fu_631_p8;
            end if; 
        end if;
    end process;

    tmp_int_7_reg_628_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln143_reg_2640 = ap_const_lv1_1) and (icmp_ln141_reg_2636 = ap_const_lv1_0) and (tmp_reg_2528 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                tmp_int_7_reg_628 <= result_1_fu_1194_p2;
            elsif (((icmp_ln141_reg_2636 = ap_const_lv1_1) and (tmp_reg_2528 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                tmp_int_7_reg_628 <= result_fu_1225_p2;
            elsif ((((icmp_ln143_fu_1126_p2 = ap_const_lv1_0) and (icmp_ln141_fu_1121_p2 = ap_const_lv1_0) and (tmp_reg_2528 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice)) or ((tmp_reg_2528 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice)))) then 
                tmp_int_7_reg_628 <= INPUT_r_TDATA_int_regslice;
            end if; 
        end if;
    end process;

    tmp_int_8_reg_796_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln23_reg_2449 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state166))) then 
                tmp_int_8_reg_796 <= ap_phi_mux_tmp_int_phi_fu_744_p4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state263)) then 
                tmp_int_8_reg_796 <= result_2_reg_763;
            end if; 
        end if;
    end process;

    tmp_int_reg_740_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_13_reg_2536 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state166))) then 
                tmp_int_reg_740 <= output_fu_2021_p2;
            elsif (((tmp_13_reg_2536 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state101))) then 
                tmp_int_reg_740 <= ap_phi_mux_tmp_int_3_phi_fu_702_p10;
            end if; 
        end if;
    end process;

    wah_buffer_index_fu_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3554_fu_972_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                wah_buffer_index_fu_340 <= ap_const_lv32_0;
            elsif (((icmp_ln234_fu_2250_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state239))) then 
                wah_buffer_index_fu_340 <= wah_buffer_index_1_reg_2879;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state223)) then
                add5_i_reg_2852 <= grp_fu_847_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                add_ln165_reg_2724 <= add_ln165_fu_1326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state239)) then
                add_ln234_1_reg_2892 <= add_ln234_1_fu_2256_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln179_fu_1359_p2 = ap_const_lv1_0) and (icmp_ln165_fu_1320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                and_ln188_1_reg_2752 <= and_ln188_1_fu_1386_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                compression_buffer_index_1_reg_2708 <= grp_fu_1240_p2;
                    or_ln101_reg_2696(1 downto 0) <= or_ln101_fu_1301_p2(1 downto 0);    or_ln101_reg_2696(31 downto 3) <= or_ln101_fu_1301_p2(31 downto 3);
                sext_ln65_reg_2716 <= sext_ln65_fu_1311_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state68)) then
                compression_buffer_load_reg_2766 <= compression_buffer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                compression_max_threshold_read_reg_2414 <= compression_max_threshold;
                compression_min_threshold_read_reg_2420 <= compression_min_threshold;
                compression_zero_threshold_read_reg_2409 <= compression_zero_threshold;
                control_read_reg_2442 <= control;
                delay_mult_read_reg_2404 <= delay_mult;
                delay_samples_read_reg_2399 <= delay_samples;
                distortion_clip_factor_read_reg_2427 <= distortion_clip_factor;
                distortion_threshold_read_reg_2432 <= distortion_threshold;
                tempo_read_reg_2394 <= tempo;
                trunc_ln23_reg_2449 <= trunc_ln23_fu_895_p1;
                wah_coeffs_read_reg_2388 <= wah_coeffs;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                conv18_i_reg_2567 <= grp_fu_839_p1;
                conv2_i_reg_2562 <= grp_fu_864_p1;
                conv30_i_reg_2572 <= grp_fu_842_p1;
                conv7_i_i_i_reg_2556 <= conv7_i_i_i_fu_1065_p1;
                negative_threshold_reg_2551 <= negative_threshold_fu_1060_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state170)) then
                conv_i2_reg_2832 <= grp_fu_864_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_fu_1320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                current_level_reg_2739 <= current_level_fu_1352_p3;
                icmp_ln179_reg_2744 <= icmp_ln179_fu_1359_p2;
                icmp_ln189_reg_2748 <= icmp_ln189_fu_1364_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                current_sample_reg_2621 <= current_sample_fu_1109_p2;
                tmp_dest_V_reg_2616 <= INPUT_r_TDEST_int_regslice;
                tmp_id_V_reg_2611 <= INPUT_r_TID_int_regslice;
                tmp_keep_V_reg_2592 <= INPUT_r_TKEEP_int_regslice;
                tmp_last_V_reg_2607 <= INPUT_r_TLAST_int_regslice;
                tmp_strb_V_reg_2597 <= INPUT_r_TSTRB_int_regslice;
                tmp_user_V_reg_2602 <= INPUT_r_TUSER_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state165)) then
                data_V_3_reg_2816 <= data_V_3_fu_1876_p1;
                val_3_reg_2821 <= val_3_fu_1986_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then
                dc_reg_2771 <= grp_fu_827_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_13_reg_2536 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state101))) then
                delay_buffer_index_load_reg_2786 <= delay_buffer_index_fu_344;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state157)) then
                delay_buffer_load_reg_2811 <= delay_buffer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state231)) then
                gmem_addr_1_reg_2867 <= sext_ln234_fu_2226_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                gmem_addr_read_reg_2546 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                icmp_ln1049_1_reg_2666 <= icmp_ln1049_1_fu_1163_p2;
                r_V_49_reg_2654 <= r_V_49_fu_1144_p2;
                ret_V_9_cast_reg_2659 <= r_V_49_fu_1144_p2(38 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                icmp_ln1049_reg_2691 <= icmp_ln1049_fu_1268_p2;
                r_V_48_reg_2679 <= r_V_48_fu_1249_p2;
                ret_V_cast_reg_2684 <= r_V_48_fu_1249_p2(38 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_2528 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                icmp_ln141_reg_2636 <= icmp_ln141_fu_1121_p2;
                    or_ln96_reg_2626(2 downto 0) <= or_ln96_fu_1115_p2(2 downto 0);    or_ln96_reg_2626(31 downto 4) <= or_ln96_fu_1115_p2(31 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln141_fu_1121_p2 = ap_const_lv1_0) and (tmp_reg_2528 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                icmp_ln143_reg_2640 <= icmp_ln143_fu_1126_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                lpf_coefficients_load_reg_2756 <= lpf_coefficients_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state230)) then
                mul_ln234_reg_2862 <= mul_ln234_fu_2202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state238)) then
                    or_ln111_reg_2873(31 downto 1) <= or_ln111_fu_2236_p2(31 downto 1);
                sext_ln77_reg_2884 <= sext_ln77_fu_2246_p1;
                wah_buffer_index_1_reg_2879 <= grp_fu_2053_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln141_fu_1121_p2 = ap_const_lv1_1) and (tmp_reg_2528 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                r_V_21_reg_2649 <= r_V_21_fu_1136_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state252)) then
                r_V_46_reg_2907 <= wah_values_buffer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state253)) then
                r_V_50_reg_2912 <= r_V_50_fu_2297_p2;
                ret_V_12_reg_2917 <= r_V_50_fu_2297_p2(47 downto 32);
                trunc_ln1049_2_reg_2924 <= trunc_ln1049_2_fu_2313_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln143_fu_1126_p2 = ap_const_lv1_1) and (icmp_ln141_fu_1121_p2 = ap_const_lv1_0) and (tmp_reg_2528 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                r_V_reg_2644 <= r_V_fu_1131_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state161) or (ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state72))) then
                reg_867 <= grp_fu_839_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state164) or (ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state75))) then
                reg_874 <= grp_fu_831_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state96))) then
                reg_879 <= grp_fu_835_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state228) or (ap_const_logic_1 = ap_CS_fsm_state218) or (ap_const_logic_1 = ap_CS_fsm_state180) or (ap_const_logic_1 = ap_CS_fsm_state175))) then
                reg_884 <= grp_fu_852_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state262) or (ap_const_logic_1 = ap_CS_fsm_state252))) then
                reg_891 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state254)) then
                result_2_reg_763 <= result_3_fu_2352_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state121)) then
                result_V_19_reg_2801 <= result_V_19_fu_1854_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state229)) then
                result_V_21_reg_2857 <= result_V_21_fu_2191_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state100)) then
                result_V_reg_2781 <= result_V_fu_1688_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3554_fu_972_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_11_reg_2532 <= control_read_reg_2442(2 downto 2);
                tmp_13_reg_2536 <= control_read_reg_2442(1 downto 1);
                tmp_reg_2528 <= control_read_reg_2442(3 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state213)) then
                tmp_2_reg_2847 <= grp_sin_or_cos_double_s_fu_810_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state211)) then
                x_assign_reg_2842 <= grp_fu_859_p2;
            end if;
        end if;
    end process;
    or_ln96_reg_2626(3) <= '1';
    or_ln101_reg_2696(2) <= '1';
    or_ln111_reg_2873(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state232, ap_CS_fsm_state252, ap_CS_fsm_state255, ap_CS_fsm_state262, ap_CS_fsm_state14, ap_CS_fsm_state264, tmp_last_V_reg_2607, ap_CS_fsm_state265, ap_CS_fsm_state266, trunc_ln23_reg_2449, tmp_reg_2528, ap_CS_fsm_state4, exitcond3554_fu_972_p2, tmp_11_reg_2532, tmp_13_reg_2536, icmp_ln141_fu_1121_p2, icmp_ln143_fu_1126_p2, ap_CS_fsm_state16, ap_CS_fsm_state53, icmp_ln165_fu_1320_p2, icmp_ln179_fu_1359_p2, icmp_ln189_fu_1364_p2, and_ln188_1_fu_1386_p2, ap_CS_fsm_state101, ap_CS_fsm_state166, ap_CS_fsm_state213, ap_CS_fsm_state239, icmp_ln234_fu_2250_p2, grp_sin_or_cos_double_s_fu_810_ap_done, gmem_ARREADY, gmem_RVALID, ap_CS_fsm_state2, exitcond3618_fu_912_p2, ap_CS_fsm_state3, exitcond3565_fu_942_p2, ap_block_state264_io, regslice_both_OUTPUT_r_V_data_V_U_apdone_blk, INPUT_r_TVALID_int_regslice, OUTPUT_r_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3618_fu_912_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3565_fu_942_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond3554_fu_972_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((icmp_ln143_fu_1126_p2 = ap_const_lv1_1) and (icmp_ln141_fu_1121_p2 = ap_const_lv1_0) and (tmp_reg_2528 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                elsif (((icmp_ln141_fu_1121_p2 = ap_const_lv1_1) and (tmp_reg_2528 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice) and ((tmp_reg_2528 = ap_const_lv1_0) or ((icmp_ln143_fu_1126_p2 = ap_const_lv1_0) and (icmp_ln141_fu_1121_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((tmp_11_reg_2532 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state101;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                if (((icmp_ln189_fu_1364_p2 = ap_const_lv1_1) and (icmp_ln179_fu_1359_p2 = ap_const_lv1_1) and (icmp_ln165_fu_1320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state102;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state53) and (((icmp_ln179_fu_1359_p2 = ap_const_lv1_0) and (icmp_ln165_fu_1320_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln188_1_fu_1386_p2)) or ((icmp_ln189_fu_1364_p2 = ap_const_lv1_0) and (icmp_ln179_fu_1359_p2 = ap_const_lv1_1) and (icmp_ln165_fu_1320_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state101;
                elsif (((icmp_ln179_fu_1359_p2 = ap_const_lv1_0) and (icmp_ln165_fu_1320_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln188_1_fu_1386_p2) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                if (((tmp_13_reg_2536 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state101))) then
                    ap_NS_fsm <= ap_ST_fsm_state166;
                else
                    ap_NS_fsm <= ap_ST_fsm_state122;
                end if;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state133;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_state134;
            when ap_ST_fsm_state134 => 
                ap_NS_fsm <= ap_ST_fsm_state135;
            when ap_ST_fsm_state135 => 
                ap_NS_fsm <= ap_ST_fsm_state136;
            when ap_ST_fsm_state136 => 
                ap_NS_fsm <= ap_ST_fsm_state137;
            when ap_ST_fsm_state137 => 
                ap_NS_fsm <= ap_ST_fsm_state138;
            when ap_ST_fsm_state138 => 
                ap_NS_fsm <= ap_ST_fsm_state139;
            when ap_ST_fsm_state139 => 
                ap_NS_fsm <= ap_ST_fsm_state140;
            when ap_ST_fsm_state140 => 
                ap_NS_fsm <= ap_ST_fsm_state141;
            when ap_ST_fsm_state141 => 
                ap_NS_fsm <= ap_ST_fsm_state142;
            when ap_ST_fsm_state142 => 
                ap_NS_fsm <= ap_ST_fsm_state143;
            when ap_ST_fsm_state143 => 
                ap_NS_fsm <= ap_ST_fsm_state144;
            when ap_ST_fsm_state144 => 
                ap_NS_fsm <= ap_ST_fsm_state145;
            when ap_ST_fsm_state145 => 
                ap_NS_fsm <= ap_ST_fsm_state146;
            when ap_ST_fsm_state146 => 
                ap_NS_fsm <= ap_ST_fsm_state147;
            when ap_ST_fsm_state147 => 
                ap_NS_fsm <= ap_ST_fsm_state148;
            when ap_ST_fsm_state148 => 
                ap_NS_fsm <= ap_ST_fsm_state149;
            when ap_ST_fsm_state149 => 
                ap_NS_fsm <= ap_ST_fsm_state150;
            when ap_ST_fsm_state150 => 
                ap_NS_fsm <= ap_ST_fsm_state151;
            when ap_ST_fsm_state151 => 
                ap_NS_fsm <= ap_ST_fsm_state152;
            when ap_ST_fsm_state152 => 
                ap_NS_fsm <= ap_ST_fsm_state153;
            when ap_ST_fsm_state153 => 
                ap_NS_fsm <= ap_ST_fsm_state154;
            when ap_ST_fsm_state154 => 
                ap_NS_fsm <= ap_ST_fsm_state155;
            when ap_ST_fsm_state155 => 
                ap_NS_fsm <= ap_ST_fsm_state156;
            when ap_ST_fsm_state156 => 
                ap_NS_fsm <= ap_ST_fsm_state157;
            when ap_ST_fsm_state157 => 
                ap_NS_fsm <= ap_ST_fsm_state158;
            when ap_ST_fsm_state158 => 
                ap_NS_fsm <= ap_ST_fsm_state159;
            when ap_ST_fsm_state159 => 
                ap_NS_fsm <= ap_ST_fsm_state160;
            when ap_ST_fsm_state160 => 
                ap_NS_fsm <= ap_ST_fsm_state161;
            when ap_ST_fsm_state161 => 
                ap_NS_fsm <= ap_ST_fsm_state162;
            when ap_ST_fsm_state162 => 
                ap_NS_fsm <= ap_ST_fsm_state163;
            when ap_ST_fsm_state163 => 
                ap_NS_fsm <= ap_ST_fsm_state164;
            when ap_ST_fsm_state164 => 
                ap_NS_fsm <= ap_ST_fsm_state165;
            when ap_ST_fsm_state165 => 
                ap_NS_fsm <= ap_ST_fsm_state166;
            when ap_ST_fsm_state166 => 
                if (((trunc_ln23_reg_2449 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state166))) then
                    ap_NS_fsm <= ap_ST_fsm_state264;
                else
                    ap_NS_fsm <= ap_ST_fsm_state167;
                end if;
            when ap_ST_fsm_state167 => 
                ap_NS_fsm <= ap_ST_fsm_state168;
            when ap_ST_fsm_state168 => 
                ap_NS_fsm <= ap_ST_fsm_state169;
            when ap_ST_fsm_state169 => 
                ap_NS_fsm <= ap_ST_fsm_state170;
            when ap_ST_fsm_state170 => 
                ap_NS_fsm <= ap_ST_fsm_state171;
            when ap_ST_fsm_state171 => 
                ap_NS_fsm <= ap_ST_fsm_state172;
            when ap_ST_fsm_state172 => 
                ap_NS_fsm <= ap_ST_fsm_state173;
            when ap_ST_fsm_state173 => 
                ap_NS_fsm <= ap_ST_fsm_state174;
            when ap_ST_fsm_state174 => 
                ap_NS_fsm <= ap_ST_fsm_state175;
            when ap_ST_fsm_state175 => 
                ap_NS_fsm <= ap_ST_fsm_state176;
            when ap_ST_fsm_state176 => 
                ap_NS_fsm <= ap_ST_fsm_state177;
            when ap_ST_fsm_state177 => 
                ap_NS_fsm <= ap_ST_fsm_state178;
            when ap_ST_fsm_state178 => 
                ap_NS_fsm <= ap_ST_fsm_state179;
            when ap_ST_fsm_state179 => 
                ap_NS_fsm <= ap_ST_fsm_state180;
            when ap_ST_fsm_state180 => 
                ap_NS_fsm <= ap_ST_fsm_state181;
            when ap_ST_fsm_state181 => 
                ap_NS_fsm <= ap_ST_fsm_state182;
            when ap_ST_fsm_state182 => 
                ap_NS_fsm <= ap_ST_fsm_state183;
            when ap_ST_fsm_state183 => 
                ap_NS_fsm <= ap_ST_fsm_state184;
            when ap_ST_fsm_state184 => 
                ap_NS_fsm <= ap_ST_fsm_state185;
            when ap_ST_fsm_state185 => 
                ap_NS_fsm <= ap_ST_fsm_state186;
            when ap_ST_fsm_state186 => 
                ap_NS_fsm <= ap_ST_fsm_state187;
            when ap_ST_fsm_state187 => 
                ap_NS_fsm <= ap_ST_fsm_state188;
            when ap_ST_fsm_state188 => 
                ap_NS_fsm <= ap_ST_fsm_state189;
            when ap_ST_fsm_state189 => 
                ap_NS_fsm <= ap_ST_fsm_state190;
            when ap_ST_fsm_state190 => 
                ap_NS_fsm <= ap_ST_fsm_state191;
            when ap_ST_fsm_state191 => 
                ap_NS_fsm <= ap_ST_fsm_state192;
            when ap_ST_fsm_state192 => 
                ap_NS_fsm <= ap_ST_fsm_state193;
            when ap_ST_fsm_state193 => 
                ap_NS_fsm <= ap_ST_fsm_state194;
            when ap_ST_fsm_state194 => 
                ap_NS_fsm <= ap_ST_fsm_state195;
            when ap_ST_fsm_state195 => 
                ap_NS_fsm <= ap_ST_fsm_state196;
            when ap_ST_fsm_state196 => 
                ap_NS_fsm <= ap_ST_fsm_state197;
            when ap_ST_fsm_state197 => 
                ap_NS_fsm <= ap_ST_fsm_state198;
            when ap_ST_fsm_state198 => 
                ap_NS_fsm <= ap_ST_fsm_state199;
            when ap_ST_fsm_state199 => 
                ap_NS_fsm <= ap_ST_fsm_state200;
            when ap_ST_fsm_state200 => 
                ap_NS_fsm <= ap_ST_fsm_state201;
            when ap_ST_fsm_state201 => 
                ap_NS_fsm <= ap_ST_fsm_state202;
            when ap_ST_fsm_state202 => 
                ap_NS_fsm <= ap_ST_fsm_state203;
            when ap_ST_fsm_state203 => 
                ap_NS_fsm <= ap_ST_fsm_state204;
            when ap_ST_fsm_state204 => 
                ap_NS_fsm <= ap_ST_fsm_state205;
            when ap_ST_fsm_state205 => 
                ap_NS_fsm <= ap_ST_fsm_state206;
            when ap_ST_fsm_state206 => 
                ap_NS_fsm <= ap_ST_fsm_state207;
            when ap_ST_fsm_state207 => 
                ap_NS_fsm <= ap_ST_fsm_state208;
            when ap_ST_fsm_state208 => 
                ap_NS_fsm <= ap_ST_fsm_state209;
            when ap_ST_fsm_state209 => 
                ap_NS_fsm <= ap_ST_fsm_state210;
            when ap_ST_fsm_state210 => 
                ap_NS_fsm <= ap_ST_fsm_state211;
            when ap_ST_fsm_state211 => 
                ap_NS_fsm <= ap_ST_fsm_state212;
            when ap_ST_fsm_state212 => 
                ap_NS_fsm <= ap_ST_fsm_state213;
            when ap_ST_fsm_state213 => 
                if (((grp_sin_or_cos_double_s_fu_810_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state213))) then
                    ap_NS_fsm <= ap_ST_fsm_state214;
                else
                    ap_NS_fsm <= ap_ST_fsm_state213;
                end if;
            when ap_ST_fsm_state214 => 
                ap_NS_fsm <= ap_ST_fsm_state215;
            when ap_ST_fsm_state215 => 
                ap_NS_fsm <= ap_ST_fsm_state216;
            when ap_ST_fsm_state216 => 
                ap_NS_fsm <= ap_ST_fsm_state217;
            when ap_ST_fsm_state217 => 
                ap_NS_fsm <= ap_ST_fsm_state218;
            when ap_ST_fsm_state218 => 
                ap_NS_fsm <= ap_ST_fsm_state219;
            when ap_ST_fsm_state219 => 
                ap_NS_fsm <= ap_ST_fsm_state220;
            when ap_ST_fsm_state220 => 
                ap_NS_fsm <= ap_ST_fsm_state221;
            when ap_ST_fsm_state221 => 
                ap_NS_fsm <= ap_ST_fsm_state222;
            when ap_ST_fsm_state222 => 
                ap_NS_fsm <= ap_ST_fsm_state223;
            when ap_ST_fsm_state223 => 
                ap_NS_fsm <= ap_ST_fsm_state224;
            when ap_ST_fsm_state224 => 
                ap_NS_fsm <= ap_ST_fsm_state225;
            when ap_ST_fsm_state225 => 
                ap_NS_fsm <= ap_ST_fsm_state226;
            when ap_ST_fsm_state226 => 
                ap_NS_fsm <= ap_ST_fsm_state227;
            when ap_ST_fsm_state227 => 
                ap_NS_fsm <= ap_ST_fsm_state228;
            when ap_ST_fsm_state228 => 
                ap_NS_fsm <= ap_ST_fsm_state229;
            when ap_ST_fsm_state229 => 
                ap_NS_fsm <= ap_ST_fsm_state230;
            when ap_ST_fsm_state230 => 
                ap_NS_fsm <= ap_ST_fsm_state231;
            when ap_ST_fsm_state231 => 
                ap_NS_fsm <= ap_ST_fsm_state232;
            when ap_ST_fsm_state232 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state232) and (gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state233;
                else
                    ap_NS_fsm <= ap_ST_fsm_state232;
                end if;
            when ap_ST_fsm_state233 => 
                ap_NS_fsm <= ap_ST_fsm_state234;
            when ap_ST_fsm_state234 => 
                ap_NS_fsm <= ap_ST_fsm_state235;
            when ap_ST_fsm_state235 => 
                ap_NS_fsm <= ap_ST_fsm_state236;
            when ap_ST_fsm_state236 => 
                ap_NS_fsm <= ap_ST_fsm_state237;
            when ap_ST_fsm_state237 => 
                ap_NS_fsm <= ap_ST_fsm_state238;
            when ap_ST_fsm_state238 => 
                ap_NS_fsm <= ap_ST_fsm_state239;
            when ap_ST_fsm_state239 => 
                if (((icmp_ln234_fu_2250_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state239))) then
                    ap_NS_fsm <= ap_ST_fsm_state255;
                else
                    ap_NS_fsm <= ap_ST_fsm_state240;
                end if;
            when ap_ST_fsm_state240 => 
                ap_NS_fsm <= ap_ST_fsm_state241;
            when ap_ST_fsm_state241 => 
                ap_NS_fsm <= ap_ST_fsm_state242;
            when ap_ST_fsm_state242 => 
                ap_NS_fsm <= ap_ST_fsm_state243;
            when ap_ST_fsm_state243 => 
                ap_NS_fsm <= ap_ST_fsm_state244;
            when ap_ST_fsm_state244 => 
                ap_NS_fsm <= ap_ST_fsm_state245;
            when ap_ST_fsm_state245 => 
                ap_NS_fsm <= ap_ST_fsm_state246;
            when ap_ST_fsm_state246 => 
                ap_NS_fsm <= ap_ST_fsm_state247;
            when ap_ST_fsm_state247 => 
                ap_NS_fsm <= ap_ST_fsm_state248;
            when ap_ST_fsm_state248 => 
                ap_NS_fsm <= ap_ST_fsm_state249;
            when ap_ST_fsm_state249 => 
                ap_NS_fsm <= ap_ST_fsm_state250;
            when ap_ST_fsm_state250 => 
                ap_NS_fsm <= ap_ST_fsm_state251;
            when ap_ST_fsm_state251 => 
                ap_NS_fsm <= ap_ST_fsm_state252;
            when ap_ST_fsm_state252 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state252) and (gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state253;
                else
                    ap_NS_fsm <= ap_ST_fsm_state252;
                end if;
            when ap_ST_fsm_state253 => 
                ap_NS_fsm <= ap_ST_fsm_state254;
            when ap_ST_fsm_state254 => 
                ap_NS_fsm <= ap_ST_fsm_state239;
            when ap_ST_fsm_state255 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state255) and (gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state256;
                else
                    ap_NS_fsm <= ap_ST_fsm_state255;
                end if;
            when ap_ST_fsm_state256 => 
                ap_NS_fsm <= ap_ST_fsm_state257;
            when ap_ST_fsm_state257 => 
                ap_NS_fsm <= ap_ST_fsm_state258;
            when ap_ST_fsm_state258 => 
                ap_NS_fsm <= ap_ST_fsm_state259;
            when ap_ST_fsm_state259 => 
                ap_NS_fsm <= ap_ST_fsm_state260;
            when ap_ST_fsm_state260 => 
                ap_NS_fsm <= ap_ST_fsm_state261;
            when ap_ST_fsm_state261 => 
                ap_NS_fsm <= ap_ST_fsm_state262;
            when ap_ST_fsm_state262 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state262) and (gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state263;
                else
                    ap_NS_fsm <= ap_ST_fsm_state262;
                end if;
            when ap_ST_fsm_state263 => 
                ap_NS_fsm <= ap_ST_fsm_state264;
            when ap_ST_fsm_state264 => 
                if ((not(((ap_const_boolean_1 = ap_block_state264_io) or ((tmp_last_V_reg_2607 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_2607 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) and (tmp_last_V_reg_2607 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state264))) then
                    ap_NS_fsm <= ap_ST_fsm_state266;
                elsif ((not(((ap_const_boolean_1 = ap_block_state264_io) or ((tmp_last_V_reg_2607 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_2607 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) and (tmp_last_V_reg_2607 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state264))) then
                    ap_NS_fsm <= ap_ST_fsm_state265;
                else
                    ap_NS_fsm <= ap_ST_fsm_state264;
                end if;
            when ap_ST_fsm_state265 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state265) and (ap_const_logic_1 = OUTPUT_r_TREADY_int_regslice))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state265;
                end if;
            when ap_ST_fsm_state266 => 
                if ((not(((regslice_both_OUTPUT_r_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice))) and (ap_const_logic_1 = ap_CS_fsm_state266))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state266;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    INPUT_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state14, INPUT_r_TVALID_int_regslice)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            INPUT_r_TDATA_blk_n <= INPUT_r_TVALID_int_regslice;
        else 
            INPUT_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    INPUT_r_TREADY <= regslice_both_INPUT_r_V_data_V_U_ack_in;

    INPUT_r_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state14, INPUT_r_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice))) then 
            INPUT_r_TREADY_int_regslice <= ap_const_logic_1;
        else 
            INPUT_r_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state264, tmp_last_V_reg_2607, ap_CS_fsm_state265, ap_CS_fsm_state266, OUTPUT_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state266) or (ap_const_logic_1 = ap_CS_fsm_state265) or ((tmp_last_V_reg_2607 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state264)) or ((tmp_last_V_reg_2607 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state264)))) then 
            OUTPUT_r_TDATA_blk_n <= OUTPUT_r_TREADY_int_regslice;
        else 
            OUTPUT_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    OUTPUT_r_TLAST_int_regslice_assign_proc : process(tmp_last_V_reg_2607, ap_condition_4073)
    begin
        if ((ap_const_boolean_1 = ap_condition_4073)) then
            if ((tmp_last_V_reg_2607 = ap_const_lv1_1)) then 
                OUTPUT_r_TLAST_int_regslice <= ap_const_lv1_1;
            elsif ((tmp_last_V_reg_2607 = ap_const_lv1_0)) then 
                OUTPUT_r_TLAST_int_regslice <= ap_const_lv1_0;
            else 
                OUTPUT_r_TLAST_int_regslice <= "X";
            end if;
        else 
            OUTPUT_r_TLAST_int_regslice <= "X";
        end if; 
    end process;

    OUTPUT_r_TVALID <= regslice_both_OUTPUT_r_V_data_V_U_vld_out;

    OUTPUT_r_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state264, tmp_last_V_reg_2607, ap_block_state264_io, OUTPUT_r_TREADY_int_regslice)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state264_io) or ((tmp_last_V_reg_2607 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_2607 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) and (tmp_last_V_reg_2607 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state264)) or (not(((ap_const_boolean_1 = ap_block_state264_io) or ((tmp_last_V_reg_2607 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_2607 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) and (tmp_last_V_reg_2607 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state264)))) then 
            OUTPUT_r_TVALID_int_regslice <= ap_const_logic_1;
        else 
            OUTPUT_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    abs_in_1_fu_1288_p3 <= 
        sub_ln157_fu_1282_p2 when (tmp_17_fu_1274_p3(0) = '1') else 
        tmp_int_7_reg_628;
    add_ln165_fu_1326_p2 <= std_logic_vector(unsigned(i_reg_642) + unsigned(ap_const_lv9_1));
    add_ln234_1_fu_2256_p2 <= std_logic_vector(unsigned(i_7_reg_752) + unsigned(ap_const_lv7_1));
    add_ln234_fu_2211_p2 <= std_logic_vector(signed(sext_ln234_2_fu_2208_p1) + signed(wah_coeffs_read_reg_2388));
    add_ln346_1_fu_1766_p2 <= std_logic_vector(unsigned(zext_ln346_1_fu_1762_p1) + unsigned(ap_const_lv9_181));
    add_ln346_2_fu_1600_p2 <= std_logic_vector(unsigned(zext_ln346_2_fu_1596_p1) + unsigned(ap_const_lv9_181));
    add_ln346_3_fu_1912_p2 <= std_logic_vector(unsigned(zext_ln346_3_fu_1908_p1) + unsigned(ap_const_lv9_181));
    add_ln346_fu_1460_p2 <= std_logic_vector(unsigned(zext_ln346_fu_1456_p1) + unsigned(ap_const_lv9_181));
    add_ln515_fu_2103_p2 <= std_logic_vector(unsigned(zext_ln515_fu_2099_p1) + unsigned(ap_const_lv12_C01));
    and_ln188_1_fu_1386_p2 <= (icmp_ln188_fu_1370_p2 and and_ln188_fu_1380_p2);
    and_ln188_fu_1380_p2 <= (icmp_ln189_fu_1364_p2 and icmp_ln188_1_fu_1375_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state106 <= ap_CS_fsm(105);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state114 <= ap_CS_fsm(113);
    ap_CS_fsm_state115 <= ap_CS_fsm(114);
    ap_CS_fsm_state116 <= ap_CS_fsm(115);
    ap_CS_fsm_state117 <= ap_CS_fsm(116);
    ap_CS_fsm_state118 <= ap_CS_fsm(117);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state120 <= ap_CS_fsm(119);
    ap_CS_fsm_state121 <= ap_CS_fsm(120);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state156 <= ap_CS_fsm(155);
    ap_CS_fsm_state157 <= ap_CS_fsm(156);
    ap_CS_fsm_state158 <= ap_CS_fsm(157);
    ap_CS_fsm_state159 <= ap_CS_fsm(158);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state160 <= ap_CS_fsm(159);
    ap_CS_fsm_state161 <= ap_CS_fsm(160);
    ap_CS_fsm_state162 <= ap_CS_fsm(161);
    ap_CS_fsm_state164 <= ap_CS_fsm(163);
    ap_CS_fsm_state165 <= ap_CS_fsm(164);
    ap_CS_fsm_state166 <= ap_CS_fsm(165);
    ap_CS_fsm_state167 <= ap_CS_fsm(166);
    ap_CS_fsm_state168 <= ap_CS_fsm(167);
    ap_CS_fsm_state169 <= ap_CS_fsm(168);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state170 <= ap_CS_fsm(169);
    ap_CS_fsm_state171 <= ap_CS_fsm(170);
    ap_CS_fsm_state175 <= ap_CS_fsm(174);
    ap_CS_fsm_state176 <= ap_CS_fsm(175);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state180 <= ap_CS_fsm(179);
    ap_CS_fsm_state181 <= ap_CS_fsm(180);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state203 <= ap_CS_fsm(202);
    ap_CS_fsm_state204 <= ap_CS_fsm(203);
    ap_CS_fsm_state205 <= ap_CS_fsm(204);
    ap_CS_fsm_state206 <= ap_CS_fsm(205);
    ap_CS_fsm_state207 <= ap_CS_fsm(206);
    ap_CS_fsm_state208 <= ap_CS_fsm(207);
    ap_CS_fsm_state209 <= ap_CS_fsm(208);
    ap_CS_fsm_state210 <= ap_CS_fsm(209);
    ap_CS_fsm_state211 <= ap_CS_fsm(210);
    ap_CS_fsm_state212 <= ap_CS_fsm(211);
    ap_CS_fsm_state213 <= ap_CS_fsm(212);
    ap_CS_fsm_state214 <= ap_CS_fsm(213);
    ap_CS_fsm_state215 <= ap_CS_fsm(214);
    ap_CS_fsm_state216 <= ap_CS_fsm(215);
    ap_CS_fsm_state217 <= ap_CS_fsm(216);
    ap_CS_fsm_state218 <= ap_CS_fsm(217);
    ap_CS_fsm_state219 <= ap_CS_fsm(218);
    ap_CS_fsm_state220 <= ap_CS_fsm(219);
    ap_CS_fsm_state221 <= ap_CS_fsm(220);
    ap_CS_fsm_state222 <= ap_CS_fsm(221);
    ap_CS_fsm_state223 <= ap_CS_fsm(222);
    ap_CS_fsm_state224 <= ap_CS_fsm(223);
    ap_CS_fsm_state225 <= ap_CS_fsm(224);
    ap_CS_fsm_state226 <= ap_CS_fsm(225);
    ap_CS_fsm_state227 <= ap_CS_fsm(226);
    ap_CS_fsm_state228 <= ap_CS_fsm(227);
    ap_CS_fsm_state229 <= ap_CS_fsm(228);
    ap_CS_fsm_state230 <= ap_CS_fsm(229);
    ap_CS_fsm_state231 <= ap_CS_fsm(230);
    ap_CS_fsm_state232 <= ap_CS_fsm(231);
    ap_CS_fsm_state233 <= ap_CS_fsm(232);
    ap_CS_fsm_state234 <= ap_CS_fsm(233);
    ap_CS_fsm_state235 <= ap_CS_fsm(234);
    ap_CS_fsm_state236 <= ap_CS_fsm(235);
    ap_CS_fsm_state237 <= ap_CS_fsm(236);
    ap_CS_fsm_state238 <= ap_CS_fsm(237);
    ap_CS_fsm_state239 <= ap_CS_fsm(238);
    ap_CS_fsm_state251 <= ap_CS_fsm(250);
    ap_CS_fsm_state252 <= ap_CS_fsm(251);
    ap_CS_fsm_state253 <= ap_CS_fsm(252);
    ap_CS_fsm_state254 <= ap_CS_fsm(253);
    ap_CS_fsm_state255 <= ap_CS_fsm(254);
    ap_CS_fsm_state262 <= ap_CS_fsm(261);
    ap_CS_fsm_state263 <= ap_CS_fsm(262);
    ap_CS_fsm_state264 <= ap_CS_fsm(263);
    ap_CS_fsm_state265 <= ap_CS_fsm(264);
    ap_CS_fsm_state266 <= ap_CS_fsm(265);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);
    ap_ST_fsm_state100_blk <= ap_const_logic_0;
    ap_ST_fsm_state101_blk <= ap_const_logic_0;
    ap_ST_fsm_state102_blk <= ap_const_logic_0;
    ap_ST_fsm_state103_blk <= ap_const_logic_0;
    ap_ST_fsm_state104_blk <= ap_const_logic_0;
    ap_ST_fsm_state105_blk <= ap_const_logic_0;
    ap_ST_fsm_state106_blk <= ap_const_logic_0;
    ap_ST_fsm_state107_blk <= ap_const_logic_0;
    ap_ST_fsm_state108_blk <= ap_const_logic_0;
    ap_ST_fsm_state109_blk <= ap_const_logic_0;
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state110_blk <= ap_const_logic_0;
    ap_ST_fsm_state111_blk <= ap_const_logic_0;
    ap_ST_fsm_state112_blk <= ap_const_logic_0;
    ap_ST_fsm_state113_blk <= ap_const_logic_0;
    ap_ST_fsm_state114_blk <= ap_const_logic_0;
    ap_ST_fsm_state115_blk <= ap_const_logic_0;
    ap_ST_fsm_state116_blk <= ap_const_logic_0;
    ap_ST_fsm_state117_blk <= ap_const_logic_0;
    ap_ST_fsm_state118_blk <= ap_const_logic_0;
    ap_ST_fsm_state119_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state120_blk <= ap_const_logic_0;
    ap_ST_fsm_state121_blk <= ap_const_logic_0;
    ap_ST_fsm_state122_blk <= ap_const_logic_0;
    ap_ST_fsm_state123_blk <= ap_const_logic_0;
    ap_ST_fsm_state124_blk <= ap_const_logic_0;
    ap_ST_fsm_state125_blk <= ap_const_logic_0;
    ap_ST_fsm_state126_blk <= ap_const_logic_0;
    ap_ST_fsm_state127_blk <= ap_const_logic_0;
    ap_ST_fsm_state128_blk <= ap_const_logic_0;
    ap_ST_fsm_state129_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state130_blk <= ap_const_logic_0;
    ap_ST_fsm_state131_blk <= ap_const_logic_0;
    ap_ST_fsm_state132_blk <= ap_const_logic_0;
    ap_ST_fsm_state133_blk <= ap_const_logic_0;
    ap_ST_fsm_state134_blk <= ap_const_logic_0;
    ap_ST_fsm_state135_blk <= ap_const_logic_0;
    ap_ST_fsm_state136_blk <= ap_const_logic_0;
    ap_ST_fsm_state137_blk <= ap_const_logic_0;
    ap_ST_fsm_state138_blk <= ap_const_logic_0;
    ap_ST_fsm_state139_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state140_blk <= ap_const_logic_0;
    ap_ST_fsm_state141_blk <= ap_const_logic_0;
    ap_ST_fsm_state142_blk <= ap_const_logic_0;
    ap_ST_fsm_state143_blk <= ap_const_logic_0;
    ap_ST_fsm_state144_blk <= ap_const_logic_0;
    ap_ST_fsm_state145_blk <= ap_const_logic_0;
    ap_ST_fsm_state146_blk <= ap_const_logic_0;
    ap_ST_fsm_state147_blk <= ap_const_logic_0;
    ap_ST_fsm_state148_blk <= ap_const_logic_0;
    ap_ST_fsm_state149_blk <= ap_const_logic_0;

    ap_ST_fsm_state14_blk_assign_proc : process(INPUT_r_TVALID_int_regslice)
    begin
        if ((ap_const_logic_0 = INPUT_r_TVALID_int_regslice)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state150_blk <= ap_const_logic_0;
    ap_ST_fsm_state151_blk <= ap_const_logic_0;
    ap_ST_fsm_state152_blk <= ap_const_logic_0;
    ap_ST_fsm_state153_blk <= ap_const_logic_0;
    ap_ST_fsm_state154_blk <= ap_const_logic_0;
    ap_ST_fsm_state155_blk <= ap_const_logic_0;
    ap_ST_fsm_state156_blk <= ap_const_logic_0;
    ap_ST_fsm_state157_blk <= ap_const_logic_0;
    ap_ST_fsm_state158_blk <= ap_const_logic_0;
    ap_ST_fsm_state159_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state160_blk <= ap_const_logic_0;
    ap_ST_fsm_state161_blk <= ap_const_logic_0;
    ap_ST_fsm_state162_blk <= ap_const_logic_0;
    ap_ST_fsm_state163_blk <= ap_const_logic_0;
    ap_ST_fsm_state164_blk <= ap_const_logic_0;
    ap_ST_fsm_state165_blk <= ap_const_logic_0;
    ap_ST_fsm_state166_blk <= ap_const_logic_0;
    ap_ST_fsm_state167_blk <= ap_const_logic_0;
    ap_ST_fsm_state168_blk <= ap_const_logic_0;
    ap_ST_fsm_state169_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state170_blk <= ap_const_logic_0;
    ap_ST_fsm_state171_blk <= ap_const_logic_0;
    ap_ST_fsm_state172_blk <= ap_const_logic_0;
    ap_ST_fsm_state173_blk <= ap_const_logic_0;
    ap_ST_fsm_state174_blk <= ap_const_logic_0;
    ap_ST_fsm_state175_blk <= ap_const_logic_0;
    ap_ST_fsm_state176_blk <= ap_const_logic_0;
    ap_ST_fsm_state177_blk <= ap_const_logic_0;
    ap_ST_fsm_state178_blk <= ap_const_logic_0;
    ap_ST_fsm_state179_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state180_blk <= ap_const_logic_0;
    ap_ST_fsm_state181_blk <= ap_const_logic_0;
    ap_ST_fsm_state182_blk <= ap_const_logic_0;
    ap_ST_fsm_state183_blk <= ap_const_logic_0;
    ap_ST_fsm_state184_blk <= ap_const_logic_0;
    ap_ST_fsm_state185_blk <= ap_const_logic_0;
    ap_ST_fsm_state186_blk <= ap_const_logic_0;
    ap_ST_fsm_state187_blk <= ap_const_logic_0;
    ap_ST_fsm_state188_blk <= ap_const_logic_0;
    ap_ST_fsm_state189_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state190_blk <= ap_const_logic_0;
    ap_ST_fsm_state191_blk <= ap_const_logic_0;
    ap_ST_fsm_state192_blk <= ap_const_logic_0;
    ap_ST_fsm_state193_blk <= ap_const_logic_0;
    ap_ST_fsm_state194_blk <= ap_const_logic_0;
    ap_ST_fsm_state195_blk <= ap_const_logic_0;
    ap_ST_fsm_state196_blk <= ap_const_logic_0;
    ap_ST_fsm_state197_blk <= ap_const_logic_0;
    ap_ST_fsm_state198_blk <= ap_const_logic_0;
    ap_ST_fsm_state199_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;
    ap_ST_fsm_state1_blk <= ap_const_logic_0;
    ap_ST_fsm_state200_blk <= ap_const_logic_0;
    ap_ST_fsm_state201_blk <= ap_const_logic_0;
    ap_ST_fsm_state202_blk <= ap_const_logic_0;
    ap_ST_fsm_state203_blk <= ap_const_logic_0;
    ap_ST_fsm_state204_blk <= ap_const_logic_0;
    ap_ST_fsm_state205_blk <= ap_const_logic_0;
    ap_ST_fsm_state206_blk <= ap_const_logic_0;
    ap_ST_fsm_state207_blk <= ap_const_logic_0;
    ap_ST_fsm_state208_blk <= ap_const_logic_0;
    ap_ST_fsm_state209_blk <= ap_const_logic_0;
    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state210_blk <= ap_const_logic_0;
    ap_ST_fsm_state211_blk <= ap_const_logic_0;
    ap_ST_fsm_state212_blk <= ap_const_logic_0;

    ap_ST_fsm_state213_blk_assign_proc : process(grp_sin_or_cos_double_s_fu_810_ap_done)
    begin
        if ((grp_sin_or_cos_double_s_fu_810_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state213_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state213_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state214_blk <= ap_const_logic_0;
    ap_ST_fsm_state215_blk <= ap_const_logic_0;
    ap_ST_fsm_state216_blk <= ap_const_logic_0;
    ap_ST_fsm_state217_blk <= ap_const_logic_0;
    ap_ST_fsm_state218_blk <= ap_const_logic_0;
    ap_ST_fsm_state219_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state220_blk <= ap_const_logic_0;
    ap_ST_fsm_state221_blk <= ap_const_logic_0;
    ap_ST_fsm_state222_blk <= ap_const_logic_0;
    ap_ST_fsm_state223_blk <= ap_const_logic_0;
    ap_ST_fsm_state224_blk <= ap_const_logic_0;
    ap_ST_fsm_state225_blk <= ap_const_logic_0;
    ap_ST_fsm_state226_blk <= ap_const_logic_0;
    ap_ST_fsm_state227_blk <= ap_const_logic_0;
    ap_ST_fsm_state228_blk <= ap_const_logic_0;
    ap_ST_fsm_state229_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state230_blk <= ap_const_logic_0;
    ap_ST_fsm_state231_blk <= ap_const_logic_0;

    ap_ST_fsm_state232_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state232_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state232_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state233_blk <= ap_const_logic_0;
    ap_ST_fsm_state234_blk <= ap_const_logic_0;
    ap_ST_fsm_state235_blk <= ap_const_logic_0;
    ap_ST_fsm_state236_blk <= ap_const_logic_0;
    ap_ST_fsm_state237_blk <= ap_const_logic_0;
    ap_ST_fsm_state238_blk <= ap_const_logic_0;
    ap_ST_fsm_state239_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state240_blk <= ap_const_logic_0;
    ap_ST_fsm_state241_blk <= ap_const_logic_0;
    ap_ST_fsm_state242_blk <= ap_const_logic_0;
    ap_ST_fsm_state243_blk <= ap_const_logic_0;
    ap_ST_fsm_state244_blk <= ap_const_logic_0;
    ap_ST_fsm_state245_blk <= ap_const_logic_0;
    ap_ST_fsm_state246_blk <= ap_const_logic_0;
    ap_ST_fsm_state247_blk <= ap_const_logic_0;
    ap_ST_fsm_state248_blk <= ap_const_logic_0;
    ap_ST_fsm_state249_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state250_blk <= ap_const_logic_0;
    ap_ST_fsm_state251_blk <= ap_const_logic_0;

    ap_ST_fsm_state252_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state252_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state252_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state253_blk <= ap_const_logic_0;
    ap_ST_fsm_state254_blk <= ap_const_logic_0;

    ap_ST_fsm_state255_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state255_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state255_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state256_blk <= ap_const_logic_0;
    ap_ST_fsm_state257_blk <= ap_const_logic_0;
    ap_ST_fsm_state258_blk <= ap_const_logic_0;
    ap_ST_fsm_state259_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state260_blk <= ap_const_logic_0;
    ap_ST_fsm_state261_blk <= ap_const_logic_0;

    ap_ST_fsm_state262_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state262_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state262_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state263_blk <= ap_const_logic_0;

    ap_ST_fsm_state264_blk_assign_proc : process(tmp_last_V_reg_2607, ap_block_state264_io, OUTPUT_r_TREADY_int_regslice)
    begin
        if (((ap_const_boolean_1 = ap_block_state264_io) or ((tmp_last_V_reg_2607 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_2607 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) then 
            ap_ST_fsm_state264_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state264_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state265_blk_assign_proc : process(OUTPUT_r_TREADY_int_regslice)
    begin
        if ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) then 
            ap_ST_fsm_state265_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state265_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state266_blk_assign_proc : process(regslice_both_OUTPUT_r_V_data_V_U_apdone_blk, OUTPUT_r_TREADY_int_regslice)
    begin
        if (((regslice_both_OUTPUT_r_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice))) then 
            ap_ST_fsm_state266_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state266_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;
    ap_ST_fsm_state76_blk <= ap_const_logic_0;
    ap_ST_fsm_state77_blk <= ap_const_logic_0;
    ap_ST_fsm_state78_blk <= ap_const_logic_0;
    ap_ST_fsm_state79_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state80_blk <= ap_const_logic_0;
    ap_ST_fsm_state81_blk <= ap_const_logic_0;
    ap_ST_fsm_state82_blk <= ap_const_logic_0;
    ap_ST_fsm_state83_blk <= ap_const_logic_0;
    ap_ST_fsm_state84_blk <= ap_const_logic_0;
    ap_ST_fsm_state85_blk <= ap_const_logic_0;
    ap_ST_fsm_state86_blk <= ap_const_logic_0;
    ap_ST_fsm_state87_blk <= ap_const_logic_0;
    ap_ST_fsm_state88_blk <= ap_const_logic_0;
    ap_ST_fsm_state89_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state90_blk <= ap_const_logic_0;
    ap_ST_fsm_state91_blk <= ap_const_logic_0;
    ap_ST_fsm_state92_blk <= ap_const_logic_0;
    ap_ST_fsm_state93_blk <= ap_const_logic_0;
    ap_ST_fsm_state94_blk <= ap_const_logic_0;
    ap_ST_fsm_state95_blk <= ap_const_logic_0;
    ap_ST_fsm_state96_blk <= ap_const_logic_0;
    ap_ST_fsm_state97_blk <= ap_const_logic_0;
    ap_ST_fsm_state98_blk <= ap_const_logic_0;
    ap_ST_fsm_state99_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state264_assign_proc : process(tmp_last_V_reg_2607, OUTPUT_r_TREADY_int_regslice)
    begin
                ap_block_state264 <= (((tmp_last_V_reg_2607 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_2607 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)));
    end process;


    ap_block_state264_io_assign_proc : process(tmp_last_V_reg_2607, OUTPUT_r_TREADY_int_regslice)
    begin
                ap_block_state264_io <= (((tmp_last_V_reg_2607 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_2607 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)));
    end process;


    ap_block_state266_assign_proc : process(regslice_both_OUTPUT_r_V_data_V_U_apdone_blk, OUTPUT_r_TREADY_int_regslice)
    begin
                ap_block_state266 <= ((regslice_both_OUTPUT_r_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice));
    end process;


    ap_condition_4073_assign_proc : process(ap_CS_fsm_state264, tmp_last_V_reg_2607, OUTPUT_r_TREADY_int_regslice)
    begin
                ap_condition_4073 <= (not((((tmp_last_V_reg_2607 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_2607 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) and (ap_const_logic_1 = ap_CS_fsm_state264));
    end process;


    ap_phi_mux_axilite_out_local_1_phi_fu_603_p8_assign_proc : process(tmp_reg_2528, or_ln96_reg_2626, icmp_ln141_reg_2636, icmp_ln143_reg_2640, ap_CS_fsm_state16, axilite_out_local_1_reg_600)
    begin
        if ((((icmp_ln143_reg_2640 = ap_const_lv1_1) and (icmp_ln141_reg_2636 = ap_const_lv1_0) and (tmp_reg_2528 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((icmp_ln141_reg_2636 = ap_const_lv1_1) and (tmp_reg_2528 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            ap_phi_mux_axilite_out_local_1_phi_fu_603_p8 <= or_ln96_reg_2626;
        else 
            ap_phi_mux_axilite_out_local_1_phi_fu_603_p8 <= axilite_out_local_1_reg_600;
        end if; 
    end process;


    ap_phi_mux_axilite_out_local_2_phi_fu_668_p10_assign_proc : process(tmp_11_reg_2532, or_ln101_reg_2696, icmp_ln179_reg_2744, icmp_ln189_reg_2748, and_ln188_1_reg_2752, ap_CS_fsm_state101, axilite_out_local_2_reg_665)
    begin
        if ((((icmp_ln179_reg_2744 = ap_const_lv1_0) and (tmp_11_reg_2532 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln188_1_reg_2752) and (ap_const_logic_1 = ap_CS_fsm_state101)) or ((icmp_ln189_reg_2748 = ap_const_lv1_1) and (icmp_ln179_reg_2744 = ap_const_lv1_1) and (tmp_11_reg_2532 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state101)))) then 
            ap_phi_mux_axilite_out_local_2_phi_fu_668_p10 <= or_ln101_reg_2696;
        else 
            ap_phi_mux_axilite_out_local_2_phi_fu_668_p10 <= axilite_out_local_2_reg_665;
        end if; 
    end process;


    ap_phi_mux_axilite_out_local_3_phi_fu_721_p4_assign_proc : process(tmp_13_reg_2536, ap_CS_fsm_state166, axilite_out_local_3_reg_718, or_ln106_fu_1994_p2)
    begin
        if (((tmp_13_reg_2536 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state166))) then 
            ap_phi_mux_axilite_out_local_3_phi_fu_721_p4 <= or_ln106_fu_1994_p2;
        else 
            ap_phi_mux_axilite_out_local_3_phi_fu_721_p4 <= axilite_out_local_3_reg_718;
        end if; 
    end process;


    ap_phi_mux_empty_80_phi_fu_617_p8_assign_proc : process(tmp_reg_2528, or_ln96_reg_2626, icmp_ln141_reg_2636, icmp_ln143_reg_2640, ap_CS_fsm_state16, empty_80_reg_614)
    begin
        if ((((icmp_ln143_reg_2640 = ap_const_lv1_1) and (icmp_ln141_reg_2636 = ap_const_lv1_0) and (tmp_reg_2528 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((icmp_ln141_reg_2636 = ap_const_lv1_1) and (tmp_reg_2528 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            ap_phi_mux_empty_80_phi_fu_617_p8 <= or_ln96_reg_2626;
        else 
            ap_phi_mux_empty_80_phi_fu_617_p8 <= empty_80_reg_614;
        end if; 
    end process;


    ap_phi_mux_empty_83_phi_fu_685_p10_assign_proc : process(tmp_11_reg_2532, or_ln101_reg_2696, icmp_ln179_reg_2744, icmp_ln189_reg_2748, and_ln188_1_reg_2752, ap_CS_fsm_state101, empty_83_reg_682)
    begin
        if ((((icmp_ln179_reg_2744 = ap_const_lv1_0) and (tmp_11_reg_2532 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln188_1_reg_2752) and (ap_const_logic_1 = ap_CS_fsm_state101)) or ((icmp_ln189_reg_2748 = ap_const_lv1_1) and (icmp_ln179_reg_2744 = ap_const_lv1_1) and (tmp_11_reg_2532 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state101)))) then 
            ap_phi_mux_empty_83_phi_fu_685_p10 <= or_ln101_reg_2696;
        else 
            ap_phi_mux_empty_83_phi_fu_685_p10 <= empty_83_reg_682;
        end if; 
    end process;


    ap_phi_mux_empty_84_phi_fu_732_p4_assign_proc : process(tmp_13_reg_2536, ap_CS_fsm_state166, or_ln106_fu_1994_p2, empty_84_reg_729)
    begin
        if (((tmp_13_reg_2536 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state166))) then 
            ap_phi_mux_empty_84_phi_fu_732_p4 <= or_ln106_fu_1994_p2;
        else 
            ap_phi_mux_empty_84_phi_fu_732_p4 <= empty_84_reg_729;
        end if; 
    end process;


    ap_phi_mux_tmp_int_3_phi_fu_702_p10_assign_proc : process(tmp_11_reg_2532, icmp_ln179_reg_2744, icmp_ln189_reg_2748, and_ln188_1_reg_2752, result_V_reg_2781, ap_CS_fsm_state101, result_V_19_reg_2801, tmp_int_3_reg_699)
    begin
        if (((tmp_11_reg_2532 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state101))) then
            if (((icmp_ln179_reg_2744 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln188_1_reg_2752))) then 
                ap_phi_mux_tmp_int_3_phi_fu_702_p10 <= result_V_reg_2781;
            elsif (((icmp_ln189_reg_2748 = ap_const_lv1_1) and (icmp_ln179_reg_2744 = ap_const_lv1_1))) then 
                ap_phi_mux_tmp_int_3_phi_fu_702_p10 <= result_V_19_reg_2801;
            else 
                ap_phi_mux_tmp_int_3_phi_fu_702_p10 <= tmp_int_3_reg_699;
            end if;
        else 
            ap_phi_mux_tmp_int_3_phi_fu_702_p10 <= tmp_int_3_reg_699;
        end if; 
    end process;


    ap_phi_mux_tmp_int_7_phi_fu_631_p8_assign_proc : process(tmp_reg_2528, icmp_ln141_reg_2636, icmp_ln143_reg_2640, ap_CS_fsm_state16, tmp_int_7_reg_628, result_fu_1225_p2, result_1_fu_1194_p2)
    begin
        if (((tmp_reg_2528 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
            if (((icmp_ln143_reg_2640 = ap_const_lv1_1) and (icmp_ln141_reg_2636 = ap_const_lv1_0))) then 
                ap_phi_mux_tmp_int_7_phi_fu_631_p8 <= result_1_fu_1194_p2;
            elsif ((icmp_ln141_reg_2636 = ap_const_lv1_1)) then 
                ap_phi_mux_tmp_int_7_phi_fu_631_p8 <= result_fu_1225_p2;
            else 
                ap_phi_mux_tmp_int_7_phi_fu_631_p8 <= tmp_int_7_reg_628;
            end if;
        else 
            ap_phi_mux_tmp_int_7_phi_fu_631_p8 <= tmp_int_7_reg_628;
        end if; 
    end process;


    ap_phi_mux_tmp_int_phi_fu_744_p4_assign_proc : process(tmp_13_reg_2536, ap_CS_fsm_state166, tmp_int_reg_740, output_fu_2021_p2)
    begin
        if (((tmp_13_reg_2536 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state166))) then 
            ap_phi_mux_tmp_int_phi_fu_744_p4 <= output_fu_2021_p2;
        else 
            ap_phi_mux_tmp_int_phi_fu_744_p4 <= tmp_int_reg_740;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    axilite_out_ap_vld_assign_proc : process(ap_CS_fsm_state264, tmp_last_V_reg_2607, ap_block_state264_io, OUTPUT_r_TREADY_int_regslice)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state264_io) or ((tmp_last_V_reg_2607 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_2607 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) and (tmp_last_V_reg_2607 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state264))) then 
            axilite_out_ap_vld <= ap_const_logic_1;
        else 
            axilite_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    compression_buffer_address0_assign_proc : process(ap_CS_fsm_state67, p_cast_fu_907_p1, ap_CS_fsm_state2, zext_ln161_fu_1297_p1, ap_CS_fsm_state18, zext_ln168_fu_1412_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            compression_buffer_address0 <= zext_ln168_fu_1412_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            compression_buffer_address0 <= zext_ln161_fu_1297_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            compression_buffer_address0 <= p_cast_fu_907_p1(9 - 1 downto 0);
        else 
            compression_buffer_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    compression_buffer_ce0_assign_proc : process(ap_CS_fsm_state67, ap_CS_fsm_state2, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            compression_buffer_ce0 <= ap_const_logic_1;
        else 
            compression_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    compression_buffer_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state18, abs_in_1_fu_1288_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            compression_buffer_d0 <= abs_in_1_fu_1288_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            compression_buffer_d0 <= ap_const_lv32_0;
        else 
            compression_buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    compression_buffer_we0_assign_proc : process(ap_CS_fsm_state2, exitcond3618_fu_912_p2, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3618_fu_912_p2 = ap_const_lv1_0)))) then 
            compression_buffer_we0 <= ap_const_logic_1;
        else 
            compression_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

        conv7_i_i_i_fu_1065_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(distortion_clip_factor_read_reg_2427),40));

    current_level_fu_1352_p3 <= 
        compression_min_threshold_read_reg_2420 when (icmp_ln171_fu_1347_p2(0) = '1') else 
        empty_81_reg_653;
    current_sample_fu_1109_p2 <= std_logic_vector(unsigned(current_sample_1_fu_332) + unsigned(ap_const_lv32_1));
    data_V_1_fu_1722_p1 <= reg_874;
    data_V_2_fu_1556_p1 <= reg_874;
    data_V_3_fu_1876_p1 <= reg_874;
    data_V_4_fu_2059_p1 <= reg_884;
    data_V_fu_1417_p1 <= dc_reg_2771;

    debug_output_ap_vld_assign_proc : process(ap_CS_fsm_state264, tmp_last_V_reg_2607, ap_block_state264_io, OUTPUT_r_TREADY_int_regslice)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state264_io) or ((tmp_last_V_reg_2607 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_2607 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) and (tmp_last_V_reg_2607 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state264))) then 
            debug_output_ap_vld <= ap_const_logic_1;
        else 
            debug_output_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    delay_buffer_address0_assign_proc : process(ap_CS_fsm_state156, ap_CS_fsm_state166, p_cast5_fu_937_p1, ap_CS_fsm_state3, zext_ln207_fu_1866_p1, zext_ln210_fu_2029_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state166)) then 
            delay_buffer_address0 <= zext_ln210_fu_2029_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state156)) then 
            delay_buffer_address0 <= zext_ln207_fu_1866_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            delay_buffer_address0 <= p_cast5_fu_937_p1(17 - 1 downto 0);
        else 
            delay_buffer_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    delay_buffer_ce0_assign_proc : process(ap_CS_fsm_state156, ap_CS_fsm_state166, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state166) or (ap_const_logic_1 = ap_CS_fsm_state156) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            delay_buffer_ce0 <= ap_const_logic_1;
        else 
            delay_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_buffer_d0_assign_proc : process(ap_CS_fsm_state166, output_fu_2021_p2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state166)) then 
            delay_buffer_d0 <= output_fu_2021_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            delay_buffer_d0 <= ap_const_lv32_0;
        else 
            delay_buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    delay_buffer_we0_assign_proc : process(tmp_13_reg_2536, ap_CS_fsm_state166, ap_CS_fsm_state3, exitcond3565_fu_942_p2)
    begin
        if ((((tmp_13_reg_2536 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state166)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3565_fu_942_p2 = ap_const_lv1_0)))) then 
            delay_buffer_we0 <= ap_const_logic_1;
        else 
            delay_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_71_fu_918_p2 <= std_logic_vector(unsigned(empty_fu_308) + unsigned(ap_const_lv9_1));
    empty_74_fu_948_p2 <= std_logic_vector(unsigned(empty_72_fu_324) + unsigned(ap_const_lv17_1));
    empty_77_fu_978_p2 <= std_logic_vector(unsigned(empty_75_fu_328) + unsigned(ap_const_lv7_1));
    exitcond3554_fu_972_p2 <= "1" when (empty_75_fu_328 = ap_const_lv7_64) else "0";
    exitcond3565_fu_942_p2 <= "1" when (empty_72_fu_324 = ap_const_lv17_15888) else "0";
    exitcond3618_fu_912_p2 <= "1" when (empty_fu_308 = ap_const_lv9_1B9) else "0";

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state232, ap_CS_fsm_state255, gmem_addr_1_reg_2867, gmem_ARREADY, sext_ln85_fu_1049_p1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state255) and (gmem_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state232) and (gmem_ARREADY = ap_const_logic_1)))) then 
            gmem_ARADDR <= gmem_addr_1_reg_2867;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (gmem_ARREADY = ap_const_logic_1))) then 
            gmem_ARADDR <= sext_ln85_fu_1049_p1;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state232, ap_CS_fsm_state255, gmem_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state232) and (gmem_ARREADY = ap_const_logic_1))) then 
            gmem_ARLEN <= ap_const_lv32_64;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state255) and (gmem_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (gmem_ARREADY = ap_const_logic_1)))) then 
            gmem_ARLEN <= ap_const_lv32_1;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state232, ap_CS_fsm_state255, gmem_ARREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state255) and (gmem_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state232) and (gmem_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (gmem_ARREADY = ap_const_logic_1)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state252, ap_CS_fsm_state262, gmem_RVALID)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state262) and (gmem_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state252) and (gmem_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (gmem_RVALID = ap_const_logic_1)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state5, ap_CS_fsm_state232, ap_CS_fsm_state255)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state255) or (ap_const_logic_1 = ap_CS_fsm_state232) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state12, ap_CS_fsm_state252, ap_CS_fsm_state262)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state262) or (ap_const_logic_1 = ap_CS_fsm_state252) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_1240_ap_start_assign_proc : process(tmp_11_reg_2532, ap_CS_fsm_state16)
    begin
        if (((tmp_11_reg_2532 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_fu_1240_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1240_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1240_p0 <= std_logic_vector(unsigned(compression_buffer_index_fu_348) + unsigned(ap_const_lv32_1));
    grp_fu_1240_p1 <= ap_const_lv32_1B9(10 - 1 downto 0);

    grp_fu_1341_ap_start_assign_proc : process(ap_CS_fsm_state53, icmp_ln165_fu_1320_p2)
    begin
        if (((icmp_ln165_fu_1320_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            grp_fu_1341_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1341_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1341_p0 <= std_logic_vector(unsigned(zext_ln167_fu_1332_p1) + unsigned(sext_ln65_reg_2716));
    grp_fu_1341_p1 <= ap_const_lv11_1B9(10 - 1 downto 0);

    grp_fu_1704_ap_start_assign_proc : process(tmp_13_reg_2536, ap_CS_fsm_state101)
    begin
        if (((tmp_13_reg_2536 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state101))) then 
            grp_fu_1704_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1704_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1704_p0 <= std_logic_vector(unsigned(delay_buffer_index_fu_344) - unsigned(delay_samples_read_reg_2399));
    grp_fu_1704_p1 <= ap_const_lv32_15888(18 - 1 downto 0);

    grp_fu_1716_ap_start_assign_proc : process(tmp_13_reg_2536, ap_CS_fsm_state101)
    begin
        if (((tmp_13_reg_2536 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state101))) then 
            grp_fu_1716_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1716_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1716_p0 <= std_logic_vector(unsigned(delay_buffer_index_fu_344) + unsigned(ap_const_lv32_1));
    grp_fu_1716_p1 <= ap_const_lv32_15888(18 - 1 downto 0);

    grp_fu_2053_ap_start_assign_proc : process(ap_CS_fsm_state203)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state203)) then 
            grp_fu_2053_ap_start <= ap_const_logic_1;
        else 
            grp_fu_2053_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_2053_ce_assign_proc : process(ap_CS_fsm_state232, ap_CS_fsm_state218, ap_CS_fsm_state228, ap_CS_fsm_state203, ap_CS_fsm_state211, ap_CS_fsm_state213, ap_CS_fsm_state223, ap_CS_fsm_state229, ap_CS_fsm_state230, ap_CS_fsm_state231, ap_CS_fsm_state238, ap_CS_fsm_state212, ap_CS_fsm_state219, ap_CS_fsm_state214, ap_CS_fsm_state224, ap_CS_fsm_state204, ap_CS_fsm_state205, ap_CS_fsm_state206, ap_CS_fsm_state207, ap_CS_fsm_state208, ap_CS_fsm_state209, ap_CS_fsm_state210, ap_CS_fsm_state215, ap_CS_fsm_state216, ap_CS_fsm_state217, ap_CS_fsm_state220, ap_CS_fsm_state221, ap_CS_fsm_state222, ap_CS_fsm_state225, ap_CS_fsm_state226, ap_CS_fsm_state227, ap_CS_fsm_state233, ap_CS_fsm_state234, ap_CS_fsm_state235, ap_CS_fsm_state236, ap_CS_fsm_state237)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state238) or (ap_const_logic_1 = ap_CS_fsm_state231) or (ap_const_logic_1 = ap_CS_fsm_state230) or (ap_const_logic_1 = ap_CS_fsm_state229) or (ap_const_logic_1 = ap_CS_fsm_state223) or (ap_const_logic_1 = ap_CS_fsm_state213) or (ap_const_logic_1 = ap_CS_fsm_state211) or (ap_const_logic_1 = ap_CS_fsm_state203) or (ap_const_logic_1 = ap_CS_fsm_state228) or (ap_const_logic_1 = ap_CS_fsm_state218) or (ap_const_logic_1 = ap_CS_fsm_state232) or (ap_const_logic_1 = ap_CS_fsm_state237) or (ap_const_logic_1 = ap_CS_fsm_state236) or (ap_const_logic_1 = ap_CS_fsm_state235) or (ap_const_logic_1 = ap_CS_fsm_state234) or (ap_const_logic_1 = ap_CS_fsm_state233) or (ap_const_logic_1 = ap_CS_fsm_state227) or (ap_const_logic_1 = ap_CS_fsm_state226) or (ap_const_logic_1 = ap_CS_fsm_state225) or (ap_const_logic_1 = ap_CS_fsm_state222) or (ap_const_logic_1 = ap_CS_fsm_state221) or (ap_const_logic_1 = ap_CS_fsm_state220) or (ap_const_logic_1 = ap_CS_fsm_state217) or (ap_const_logic_1 = ap_CS_fsm_state216) or (ap_const_logic_1 = ap_CS_fsm_state215) or (ap_const_logic_1 = ap_CS_fsm_state210) or (ap_const_logic_1 = ap_CS_fsm_state209) or (ap_const_logic_1 = ap_CS_fsm_state208) or (ap_const_logic_1 = ap_CS_fsm_state207) or (ap_const_logic_1 = ap_CS_fsm_state206) or (ap_const_logic_1 = ap_CS_fsm_state205) or (ap_const_logic_1 = ap_CS_fsm_state204) or (ap_const_logic_1 = ap_CS_fsm_state224) or (ap_const_logic_1 = ap_CS_fsm_state214) or (ap_const_logic_1 = ap_CS_fsm_state219) or (ap_const_logic_1 = ap_CS_fsm_state212))) then 
            grp_fu_2053_ce <= ap_const_logic_1;
        else 
            grp_fu_2053_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_2053_p0 <= std_logic_vector(unsigned(wah_buffer_index_fu_340) + unsigned(ap_const_lv32_1));
    grp_fu_2053_p1 <= ap_const_lv32_64(8 - 1 downto 0);

    grp_fu_2271_ap_start_assign_proc : process(ap_CS_fsm_state239, icmp_ln234_fu_2250_p2)
    begin
        if (((icmp_ln234_fu_2250_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state239))) then 
            grp_fu_2271_ap_start <= ap_const_logic_1;
        else 
            grp_fu_2271_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_2271_p0 <= std_logic_vector(signed(sext_ln77_reg_2884) - signed(zext_ln236_fu_2262_p1));
    grp_fu_2271_p1 <= ap_const_lv9_64(8 - 1 downto 0);

    grp_fu_831_p1_assign_proc : process(reg_879, delay_mult_read_reg_2404, lpf_coefficients_load_reg_2756, ap_CS_fsm_state73, ap_CS_fsm_state97, ap_CS_fsm_state118, ap_CS_fsm_state162)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state162)) then 
            grp_fu_831_p1 <= delay_mult_read_reg_2404;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state118) or (ap_const_logic_1 = ap_CS_fsm_state97))) then 
            grp_fu_831_p1 <= reg_879;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            grp_fu_831_p1 <= lpf_coefficients_load_reg_2756;
        else 
            grp_fu_831_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_835_p0_assign_proc : process(conv18_i_reg_2567, conv30_i_reg_2572, ap_CS_fsm_state85, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_fu_835_p0 <= conv18_i_reg_2567;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            grp_fu_835_p0 <= conv30_i_reg_2572;
        else 
            grp_fu_835_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_839_ce_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state72, ap_CS_fsm_state75, ap_CS_fsm_state84, ap_CS_fsm_state96, ap_CS_fsm_state105, ap_CS_fsm_state117, ap_CS_fsm_state161, ap_CS_fsm_state13, gmem_RVALID, ap_CS_fsm_state73, ap_CS_fsm_state10, ap_CS_fsm_state69, ap_CS_fsm_state81, ap_CS_fsm_state93, ap_CS_fsm_state102, ap_CS_fsm_state114, ap_CS_fsm_state158, ap_CS_fsm_state11, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state74, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state103, ap_CS_fsm_state104, ap_CS_fsm_state115, ap_CS_fsm_state116, ap_CS_fsm_state159, ap_CS_fsm_state160)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state161) or (ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state160) or (ap_const_logic_1 = ap_CS_fsm_state159) or (ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state158) or (ap_const_logic_1 = ap_CS_fsm_state114) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state73) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (gmem_RVALID = ap_const_logic_1)))) then 
            grp_fu_839_ce <= ap_const_logic_1;
        else 
            grp_fu_839_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_839_p0_assign_proc : process(ap_CS_fsm_state72, compression_max_threshold_read_reg_2414, current_level_reg_2739, compression_buffer_load_reg_2766, delay_buffer_load_reg_2811, tmp_int_7_reg_628, empty_81_reg_653, ap_CS_fsm_state10, ap_CS_fsm_state69, ap_CS_fsm_state81, ap_CS_fsm_state93, ap_CS_fsm_state102, ap_CS_fsm_state114, ap_CS_fsm_state158)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state158)) then 
            grp_fu_839_p0 <= delay_buffer_load_reg_2811;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state114) or (ap_const_logic_1 = ap_CS_fsm_state93))) then 
            grp_fu_839_p0 <= tmp_int_7_reg_628;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            grp_fu_839_p0 <= current_level_reg_2739;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            grp_fu_839_p0 <= empty_81_reg_653;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_fu_839_p0 <= compression_buffer_load_reg_2766;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_839_p0 <= compression_max_threshold_read_reg_2414;
        else 
            grp_fu_839_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_842_ce_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, gmem_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (gmem_RVALID = ap_const_logic_1)))) then 
            grp_fu_842_ce <= ap_const_logic_1;
        else 
            grp_fu_842_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_852_p0_assign_proc : process(reg_884, conv_i2_reg_2832, tmp_2_reg_2847, add5_i_reg_2852, ap_CS_fsm_state171, ap_CS_fsm_state176, ap_CS_fsm_state214, ap_CS_fsm_state224)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state224)) then 
            grp_fu_852_p0 <= add5_i_reg_2852;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state214)) then 
            grp_fu_852_p0 <= tmp_2_reg_2847;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state176)) then 
            grp_fu_852_p0 <= reg_884;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state171)) then 
            grp_fu_852_p0 <= conv_i2_reg_2832;
        else 
            grp_fu_852_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_852_p1_assign_proc : process(conv2_i_reg_2562, ap_CS_fsm_state171, ap_CS_fsm_state176, ap_CS_fsm_state214, ap_CS_fsm_state224)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state224)) then 
            grp_fu_852_p1 <= ap_const_lv64_4034000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state214)) then 
            grp_fu_852_p1 <= ap_const_lv64_3FE0000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state176)) then 
            grp_fu_852_p1 <= conv2_i_reg_2562;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state171)) then 
            grp_fu_852_p1 <= ap_const_lv64_400921F9F01B866E;
        else 
            grp_fu_852_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_864_ce_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state166, ap_CS_fsm_state170, gmem_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state167, ap_CS_fsm_state168, ap_CS_fsm_state169)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state170) or (ap_const_logic_1 = ap_CS_fsm_state166) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state169) or (ap_const_logic_1 = ap_CS_fsm_state168) or (ap_const_logic_1 = ap_CS_fsm_state167) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (gmem_RVALID = ap_const_logic_1)))) then 
            grp_fu_864_ce <= ap_const_logic_1;
        else 
            grp_fu_864_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_864_p0_assign_proc : process(tempo_read_reg_2394, shl_ln227_fu_2033_p2, ap_CS_fsm_state166, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state166)) then 
            grp_fu_864_p0 <= shl_ln227_fu_2033_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_864_p0 <= tempo_read_reg_2394;
        else 
            grp_fu_864_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_sin_or_cos_double_s_fu_810_ap_start <= grp_sin_or_cos_double_s_fu_810_ap_start_reg;
    icmp_ln1049_1_fu_1163_p2 <= "1" when (trunc_ln1049_1_fu_1159_p1 = ap_const_lv7_0) else "0";
    icmp_ln1049_2_fu_2324_p2 <= "1" when (trunc_ln1049_2_reg_2924 = ap_const_lv32_0) else "0";
    icmp_ln1049_fu_1268_p2 <= "1" when (trunc_ln1049_fu_1264_p1 = ap_const_lv7_0) else "0";
    icmp_ln141_fu_1121_p2 <= "1" when (signed(INPUT_r_TDATA_int_regslice) > signed(distortion_threshold_read_reg_2432)) else "0";
    icmp_ln143_fu_1126_p2 <= "1" when (signed(INPUT_r_TDATA_int_regslice) < signed(negative_threshold_reg_2551)) else "0";
    icmp_ln165_fu_1320_p2 <= "1" when (i_reg_642 = ap_const_lv9_1B9) else "0";
    icmp_ln171_fu_1347_p2 <= "1" when (signed(current_sample_1_fu_332) < signed(ap_const_lv32_1B9)) else "0";
    icmp_ln179_fu_1359_p2 <= "1" when (signed(current_level_fu_1352_p3) > signed(compression_max_threshold_read_reg_2414)) else "0";
    icmp_ln188_1_fu_1375_p2 <= "1" when (signed(current_level_fu_1352_p3) > signed(compression_zero_threshold_read_reg_2409)) else "0";
    icmp_ln188_fu_1370_p2 <= "1" when (signed(current_level_fu_1352_p3) < signed(compression_min_threshold_read_reg_2420)) else "0";
    icmp_ln189_fu_1364_p2 <= "1" when (signed(current_level_fu_1352_p3) > signed(ap_const_lv32_0)) else "0";
    icmp_ln234_fu_2250_p2 <= "1" when (i_7_reg_752 = ap_const_lv7_64) else "0";
    isNeg_2_fu_1772_p3 <= add_ln346_1_fu_1766_p2(8 downto 8);
    isNeg_3_fu_1606_p3 <= add_ln346_2_fu_1600_p2(8 downto 8);
    isNeg_4_fu_1918_p3 <= add_ln346_3_fu_1912_p2(8 downto 8);
    isNeg_5_fu_2109_p3 <= add_ln515_fu_2103_p2(11 downto 11);
    isNeg_fu_1466_p3 <= add_ln346_fu_1460_p2(8 downto 8);
    lpf_coefficients_address0 <= zext_ln165_fu_1315_p1(9 - 1 downto 0);

    lpf_coefficients_ce0_assign_proc : process(ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            lpf_coefficients_ce0 <= ap_const_logic_1;
        else 
            lpf_coefficients_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mantissa_1_fu_1748_p4 <= ((ap_const_lv1_1 & p_Result_48_fu_1744_p1) & ap_const_lv1_0);
    mantissa_2_fu_1582_p4 <= ((ap_const_lv1_1 & p_Result_50_fu_1578_p1) & ap_const_lv1_0);
    mantissa_3_fu_1894_p4 <= ((ap_const_lv1_1 & p_Result_52_fu_1890_p1) & ap_const_lv1_0);
    mantissa_4_fu_2085_p4 <= ((ap_const_lv1_1 & p_Result_54_fu_2081_p1) & ap_const_lv1_0);
    mantissa_fu_1442_p4 <= ((ap_const_lv1_1 & p_Result_46_fu_1438_p1) & ap_const_lv1_0);
    mul_ln234_fu_2202_p1 <= ap_const_lv41_C8(9 - 1 downto 0);
    negative_threshold_fu_1060_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(distortion_threshold_read_reg_2432));
    or_ln101_fu_1301_p2 <= (empty_80_reg_614 or ap_const_lv32_4);
    or_ln106_fu_1994_p2 <= (empty_83_reg_682 or ap_const_lv32_2);
    or_ln111_fu_2236_p2 <= (empty_84_reg_729 or ap_const_lv32_1);
    or_ln96_fu_1115_p2 <= (empty_78_fu_336 or ap_const_lv32_8);
    output_fu_2021_p2 <= std_logic_vector(unsigned(result_V_20_fu_2014_p3) + unsigned(tmp_int_3_reg_699));
    p_Result_28_fu_1169_p3 <= r_V_49_reg_2654(39 downto 39);
    p_Result_44_fu_2317_p3 <= r_V_50_reg_2912(47 downto 47);
    p_Result_45_fu_1420_p3 <= data_V_fu_1417_p1(31 downto 31);
    p_Result_46_fu_1438_p1 <= data_V_fu_1417_p1(23 - 1 downto 0);
    p_Result_47_fu_1726_p3 <= data_V_1_fu_1722_p1(31 downto 31);
    p_Result_48_fu_1744_p1 <= data_V_1_fu_1722_p1(23 - 1 downto 0);
    p_Result_49_fu_1560_p3 <= data_V_2_fu_1556_p1(31 downto 31);
    p_Result_50_fu_1578_p1 <= data_V_2_fu_1556_p1(23 - 1 downto 0);
    p_Result_51_fu_2002_p3 <= data_V_3_reg_2816(31 downto 31);
    p_Result_52_fu_1890_p1 <= data_V_3_fu_1876_p1(23 - 1 downto 0);
    p_Result_53_fu_2063_p3 <= data_V_4_fu_2059_p1(63 downto 63);
    p_Result_54_fu_2081_p1 <= data_V_4_fu_2059_p1(52 - 1 downto 0);
    p_Result_s_fu_1200_p3 <= r_V_48_reg_2679(39 downto 39);
    p_cast5_fu_937_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_72_fu_324),64));
    p_cast6_fu_967_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_75_fu_328),64));
    p_cast_fu_907_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_308),64));
    r_V_21_fu_1136_p2 <= std_logic_vector(unsigned(INPUT_r_TDATA_int_regslice) - unsigned(distortion_threshold_read_reg_2432));
    r_V_35_fu_1500_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_1452_p1),to_integer(unsigned('0' & zext_ln1488_fu_1496_p1(31-1 downto 0)))));
    r_V_36_fu_1506_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_1452_p1),to_integer(unsigned('0' & zext_ln1488_fu_1496_p1(31-1 downto 0)))));
    r_V_38_fu_1806_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_1_fu_1758_p1),to_integer(unsigned('0' & zext_ln1488_2_fu_1802_p1(31-1 downto 0)))));
    r_V_39_fu_1812_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_1_fu_1758_p1),to_integer(unsigned('0' & zext_ln1488_2_fu_1802_p1(31-1 downto 0)))));
    r_V_40_fu_1640_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_2_fu_1592_p1),to_integer(unsigned('0' & zext_ln1488_3_fu_1636_p1(31-1 downto 0)))));
    r_V_41_fu_1646_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_2_fu_1592_p1),to_integer(unsigned('0' & zext_ln1488_3_fu_1636_p1(31-1 downto 0)))));
    r_V_42_fu_1952_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_3_fu_1904_p1),to_integer(unsigned('0' & zext_ln1488_4_fu_1948_p1(31-1 downto 0)))));
    r_V_43_fu_1958_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_3_fu_1904_p1),to_integer(unsigned('0' & zext_ln1488_4_fu_1948_p1(31-1 downto 0)))));
    r_V_44_fu_2143_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_4_fu_2095_p1),to_integer(unsigned('0' & zext_ln1488_5_fu_2139_p1(31-1 downto 0)))));
    r_V_45_fu_2149_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_4_fu_2095_p1),to_integer(unsigned('0' & zext_ln1488_5_fu_2139_p1(31-1 downto 0)))));
    r_V_48_fu_1249_p1 <= conv7_i_i_i_reg_2556(8 - 1 downto 0);
    r_V_49_fu_1144_p1 <= conv7_i_i_i_reg_2556(8 - 1 downto 0);
    r_V_fu_1131_p2 <= std_logic_vector(unsigned(INPUT_r_TDATA_int_regslice) + unsigned(distortion_threshold_read_reg_2432));
    result_1_fu_1194_p2 <= std_logic_vector(unsigned(ret_V_11_fu_1187_p3) - unsigned(distortion_threshold_read_reg_2432));
    result_3_fu_2352_p2 <= std_logic_vector(signed(sext_ln598_fu_2348_p1) + signed(result_2_reg_763));
    result_V_13_fu_2009_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_3_reg_2821));
    result_V_16_fu_2185_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_4_fu_2177_p3));
    result_V_18_fu_1548_p3 <= 
        result_V_2_fu_1542_p2 when (p_Result_45_fu_1420_p3(0) = '1') else 
        val_fu_1534_p3;
    result_V_19_fu_1854_p3 <= 
        result_V_7_fu_1848_p2 when (p_Result_47_fu_1726_p3(0) = '1') else 
        val_1_fu_1840_p3;
    result_V_20_fu_2014_p3 <= 
        result_V_13_fu_2009_p2 when (p_Result_51_fu_2002_p3(0) = '1') else 
        val_3_reg_2821;
    result_V_21_fu_2191_p3 <= 
        result_V_16_fu_2185_p2 when (p_Result_53_fu_2063_p3(0) = '1') else 
        val_4_fu_2177_p3;
    result_V_2_fu_1542_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_fu_1534_p3));
    result_V_7_fu_1848_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_1_fu_1840_p3));
    result_V_8_fu_1682_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_2_fu_1674_p3));
    result_V_fu_1688_p3 <= 
        result_V_8_fu_1682_p2 when (p_Result_49_fu_1560_p3(0) = '1') else 
        val_2_fu_1674_p3;
    result_fu_1225_p2 <= std_logic_vector(unsigned(ret_V_9_fu_1218_p3) + unsigned(distortion_threshold_read_reg_2432));
    ret_V_10_fu_1176_p2 <= std_logic_vector(unsigned(ret_V_9_cast_reg_2659) + unsigned(ap_const_lv32_1));
    ret_V_11_fu_1187_p3 <= 
        select_ln1048_1_fu_1181_p3 when (p_Result_28_fu_1169_p3(0) = '1') else 
        ret_V_9_cast_reg_2659;
    ret_V_13_fu_2329_p2 <= std_logic_vector(unsigned(ret_V_12_reg_2917) + unsigned(ap_const_lv16_1));
    ret_V_14_fu_2341_p3 <= 
        select_ln1048_2_fu_2334_p3 when (p_Result_44_fu_2317_p3(0) = '1') else 
        ret_V_12_reg_2917;
    ret_V_9_fu_1218_p3 <= 
        select_ln1048_fu_1212_p3 when (p_Result_s_fu_1200_p3(0) = '1') else 
        ret_V_cast_reg_2684;
    ret_V_fu_1207_p2 <= std_logic_vector(unsigned(ret_V_cast_reg_2684) + unsigned(ap_const_lv32_1));
    select_ln1048_1_fu_1181_p3 <= 
        ret_V_9_cast_reg_2659 when (icmp_ln1049_1_reg_2666(0) = '1') else 
        ret_V_10_fu_1176_p2;
    select_ln1048_2_fu_2334_p3 <= 
        ret_V_12_reg_2917 when (icmp_ln1049_2_fu_2324_p2(0) = '1') else 
        ret_V_13_fu_2329_p2;
    select_ln1048_fu_1212_p3 <= 
        ret_V_cast_reg_2684 when (icmp_ln1049_reg_2691(0) = '1') else 
        ret_V_fu_1207_p2;
        sext_ln1488_1_fu_1798_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_2_fu_1790_p3),32));

        sext_ln1488_2_fu_1632_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_3_fu_1624_p3),32));

        sext_ln1488_3_fu_1944_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_4_fu_1936_p3),32));

        sext_ln1488_4_fu_2135_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_5_fu_2127_p3),32));

        sext_ln1488_fu_1492_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_1484_p3),32));

        sext_ln1512_1_fu_1786_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_4_fu_1780_p2),9));

        sext_ln1512_2_fu_1620_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_5_fu_1614_p2),9));

        sext_ln1512_3_fu_1932_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_fu_1926_p2),9));

        sext_ln1512_4_fu_2123_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_2_fu_2117_p2),12));

        sext_ln1512_fu_1480_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_3_fu_1474_p2),9));

        sext_ln234_2_fu_2208_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln234_reg_2862),64));

        sext_ln234_fu_2226_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_2216_p4),64));

        sext_ln598_fu_2348_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_14_fu_2341_p3),32));

        sext_ln65_fu_1311_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln65_fu_1307_p1),11));

        sext_ln77_fu_2246_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln77_fu_2242_p1),9));

        sext_ln85_fu_1049_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln6_fu_1040_p4),64));

    shl_ln227_fu_2033_p2 <= std_logic_vector(shift_left(unsigned(current_sample_1_fu_332),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    sub_ln1512_2_fu_2117_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(xs_exp_V_5_fu_2071_p4));
    sub_ln1512_3_fu_1474_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_V_fu_1428_p4));
    sub_ln1512_4_fu_1780_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_V_1_fu_1734_p4));
    sub_ln1512_5_fu_1614_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_V_2_fu_1568_p4));
    sub_ln1512_fu_1926_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_V_4_fu_1880_p4));
    sub_ln157_fu_1282_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_int_7_reg_628));
    tmp_17_fu_1274_p3 <= tmp_int_7_reg_628(31 downto 31);
    tmp_22_fu_1512_p3 <= r_V_35_fu_1500_p2(24 downto 24);
    tmp_26_fu_1818_p3 <= r_V_38_fu_1806_p2(24 downto 24);
    tmp_30_fu_1652_p3 <= r_V_40_fu_1640_p2(24 downto 24);
    tmp_34_fu_1964_p3 <= r_V_42_fu_1952_p2(24 downto 24);
    tmp_38_fu_2155_p3 <= r_V_44_fu_2143_p2(53 downto 53);
    tmp_3_fu_1976_p4 <= r_V_43_fu_1958_p2(55 downto 24);
    tmp_4_fu_2167_p4 <= r_V_45_fu_2149_p2(84 downto 53);
    tmp_6_fu_1524_p4 <= r_V_36_fu_1506_p2(55 downto 24);
    tmp_9_fu_1830_p4 <= r_V_39_fu_1812_p2(55 downto 24);
    tmp_s_fu_1664_p4 <= r_V_41_fu_1646_p2(55 downto 24);
    trunc_ln1049_1_fu_1159_p1 <= r_V_49_fu_1144_p2(7 - 1 downto 0);
    trunc_ln1049_2_fu_2313_p1 <= r_V_50_fu_2297_p2(32 - 1 downto 0);
    trunc_ln1049_fu_1264_p1 <= r_V_48_fu_1249_p2(7 - 1 downto 0);
    trunc_ln168_fu_1408_p1 <= grp_fu_1341_p2(9 - 1 downto 0);
    trunc_ln207_fu_1862_p1 <= grp_fu_1704_p2(17 - 1 downto 0);
    trunc_ln237_fu_2281_p1 <= grp_fu_2271_p2(7 - 1 downto 0);
    trunc_ln23_fu_895_p1 <= control(1 - 1 downto 0);
    trunc_ln65_fu_1307_p1 <= grp_fu_1240_p2(10 - 1 downto 0);
    trunc_ln6_fu_1040_p4 <= wah_coeffs_read_reg_2388(63 downto 1);
    trunc_ln77_fu_2242_p1 <= grp_fu_2053_p2(8 - 1 downto 0);
    trunc_ln_fu_2216_p4 <= add_ln234_fu_2211_p2(63 downto 1);
    ush_2_fu_1790_p3 <= 
        sext_ln1512_1_fu_1786_p1 when (isNeg_2_fu_1772_p3(0) = '1') else 
        add_ln346_1_fu_1766_p2;
    ush_3_fu_1624_p3 <= 
        sext_ln1512_2_fu_1620_p1 when (isNeg_3_fu_1606_p3(0) = '1') else 
        add_ln346_2_fu_1600_p2;
    ush_4_fu_1936_p3 <= 
        sext_ln1512_3_fu_1932_p1 when (isNeg_4_fu_1918_p3(0) = '1') else 
        add_ln346_3_fu_1912_p2;
    ush_5_fu_2127_p3 <= 
        sext_ln1512_4_fu_2123_p1 when (isNeg_5_fu_2109_p3(0) = '1') else 
        add_ln515_fu_2103_p2;
    ush_fu_1484_p3 <= 
        sext_ln1512_fu_1480_p1 when (isNeg_fu_1466_p3(0) = '1') else 
        add_ln346_fu_1460_p2;
    val_1_fu_1840_p3 <= 
        zext_ln818_1_fu_1826_p1 when (isNeg_2_fu_1772_p3(0) = '1') else 
        tmp_9_fu_1830_p4;
    val_2_fu_1674_p3 <= 
        zext_ln818_2_fu_1660_p1 when (isNeg_3_fu_1606_p3(0) = '1') else 
        tmp_s_fu_1664_p4;
    val_3_fu_1986_p3 <= 
        zext_ln818_3_fu_1972_p1 when (isNeg_4_fu_1918_p3(0) = '1') else 
        tmp_3_fu_1976_p4;
    val_4_fu_2177_p3 <= 
        zext_ln818_4_fu_2163_p1 when (isNeg_5_fu_2109_p3(0) = '1') else 
        tmp_4_fu_2167_p4;
    val_fu_1534_p3 <= 
        zext_ln818_fu_1520_p1 when (isNeg_fu_1466_p3(0) = '1') else 
        tmp_6_fu_1524_p4;

    wah_values_buffer_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state203, ap_CS_fsm_state251, p_cast6_fu_967_p1, zext_ln223_fu_2042_p1, zext_ln237_fu_2285_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state251)) then 
            wah_values_buffer_address0 <= zext_ln237_fu_2285_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state203)) then 
            wah_values_buffer_address0 <= zext_ln223_fu_2042_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            wah_values_buffer_address0 <= p_cast6_fu_967_p1(7 - 1 downto 0);
        else 
            wah_values_buffer_address0 <= "XXXXXXX";
        end if; 
    end process;


    wah_values_buffer_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state203, ap_CS_fsm_state251)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state251) or (ap_const_logic_1 = ap_CS_fsm_state203) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            wah_values_buffer_ce0 <= ap_const_logic_1;
        else 
            wah_values_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wah_values_buffer_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state203, tmp_int_reg_740)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state203)) then 
            wah_values_buffer_d0 <= tmp_int_reg_740;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            wah_values_buffer_d0 <= ap_const_lv32_0;
        else 
            wah_values_buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    wah_values_buffer_we0_assign_proc : process(ap_CS_fsm_state4, exitcond3554_fu_972_p2, ap_CS_fsm_state203)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state203) or ((exitcond3554_fu_972_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            wah_values_buffer_we0 <= ap_const_logic_1;
        else 
            wah_values_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xs_exp_V_1_fu_1734_p4 <= data_V_1_fu_1722_p1(30 downto 23);
    xs_exp_V_2_fu_1568_p4 <= data_V_2_fu_1556_p1(30 downto 23);
    xs_exp_V_4_fu_1880_p4 <= data_V_3_fu_1876_p1(30 downto 23);
    xs_exp_V_5_fu_2071_p4 <= data_V_4_fu_2059_p1(62 downto 52);
    xs_exp_V_fu_1428_p4 <= data_V_fu_1417_p1(30 downto 23);
    zext_ln1488_2_fu_1802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_1_fu_1798_p1),79));
    zext_ln1488_3_fu_1636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_2_fu_1632_p1),79));
    zext_ln1488_4_fu_1948_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_3_fu_1944_p1),79));
    zext_ln1488_5_fu_2139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_4_fu_2135_p1),137));
    zext_ln1488_fu_1496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_fu_1492_p1),79));
    zext_ln15_1_fu_1758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_1_fu_1748_p4),79));
    zext_ln15_2_fu_1592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_2_fu_1582_p4),79));
    zext_ln15_3_fu_1904_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_3_fu_1894_p4),79));
    zext_ln15_4_fu_2095_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_4_fu_2085_p4),137));
    zext_ln15_fu_1452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_1442_p4),79));
    zext_ln161_fu_1297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(compression_buffer_index_fu_348),64));
    zext_ln165_fu_1315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_642),64));
    zext_ln167_fu_1332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_642),11));
    zext_ln168_fu_1412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln168_fu_1408_p1),64));
    zext_ln207_fu_1866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln207_fu_1862_p1),64));
    zext_ln210_fu_2029_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(delay_buffer_index_load_reg_2786),64));
    zext_ln223_fu_2042_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wah_buffer_index_fu_340),64));
    zext_ln236_fu_2262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_7_reg_752),9));
    zext_ln237_fu_2285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln237_fu_2281_p1),64));
    zext_ln346_1_fu_1762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_1_fu_1734_p4),9));
    zext_ln346_2_fu_1596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_2_fu_1568_p4),9));
    zext_ln346_3_fu_1908_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_4_fu_1880_p4),9));
    zext_ln346_fu_1456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_fu_1428_p4),9));
    zext_ln515_fu_2099_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_5_fu_2071_p4),12));
    zext_ln818_1_fu_1826_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_1818_p3),32));
    zext_ln818_2_fu_1660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_1652_p3),32));
    zext_ln818_3_fu_1972_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_1964_p3),32));
    zext_ln818_4_fu_2163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_fu_2155_p3),32));
    zext_ln818_fu_1520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_1512_p3),32));
end behav;
