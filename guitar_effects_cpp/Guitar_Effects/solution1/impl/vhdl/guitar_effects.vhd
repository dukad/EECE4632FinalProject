-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity guitar_effects is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_R_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    INPUT_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    INPUT_r_TVALID : IN STD_LOGIC;
    INPUT_r_TREADY : OUT STD_LOGIC;
    INPUT_r_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_r_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_r_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    INPUT_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_r_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    INPUT_r_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    OUTPUT_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUTPUT_r_TVALID : OUT STD_LOGIC;
    OUTPUT_r_TREADY : IN STD_LOGIC;
    OUTPUT_r_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_r_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_r_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    OUTPUT_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_r_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    OUTPUT_r_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_control_r_AWVALID : IN STD_LOGIC;
    s_axi_control_r_AWREADY : OUT STD_LOGIC;
    s_axi_control_r_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_ADDR_WIDTH-1 downto 0);
    s_axi_control_r_WVALID : IN STD_LOGIC;
    s_axi_control_r_WREADY : OUT STD_LOGIC;
    s_axi_control_r_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH-1 downto 0);
    s_axi_control_r_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH/8-1 downto 0);
    s_axi_control_r_ARVALID : IN STD_LOGIC;
    s_axi_control_r_ARREADY : OUT STD_LOGIC;
    s_axi_control_r_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_ADDR_WIDTH-1 downto 0);
    s_axi_control_r_RVALID : OUT STD_LOGIC;
    s_axi_control_r_RREADY : IN STD_LOGIC;
    s_axi_control_r_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH-1 downto 0);
    s_axi_control_r_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_r_BVALID : OUT STD_LOGIC;
    s_axi_control_r_BREADY : IN STD_LOGIC;
    s_axi_control_r_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of guitar_effects is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "guitar_effects_guitar_effects,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=15.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.950000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=267,HLS_SYN_DSP=0,HLS_SYN_FF=10454,HLS_SYN_LUT=18531,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state137 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state138 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state139 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state140 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state141 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state142 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state143 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state144 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state145 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state146 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state147 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state148 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state149 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state150 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state151 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state152 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state153 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state154 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state155 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state156 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state157 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state158 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state159 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state160 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state161 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state162 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state163 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state164 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state165 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state166 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state167 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state168 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state169 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state170 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state171 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state172 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state173 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state174 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state175 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state176 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state177 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state178 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state179 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state180 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state181 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state182 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state183 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state184 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state185 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state186 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state187 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state188 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state189 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state190 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state191 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state192 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state193 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state194 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state195 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state196 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state197 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state198 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state199 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state200 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state201 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state202 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state203 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state204 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state205 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state206 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state207 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state208 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state209 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state210 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state211 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state212 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state213 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state214 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state215 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state216 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state217 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state218 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state219 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state220 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state221 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state222 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state223 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state224 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state225 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state226 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state227 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state228 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state229 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state230 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state231 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state232 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state233 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state234 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state235 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state236 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state237 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state238 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state239 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state240 : STD_LOGIC_VECTOR (251 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state241 : STD_LOGIC_VECTOR (251 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state242 : STD_LOGIC_VECTOR (251 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state243 : STD_LOGIC_VECTOR (251 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state244 : STD_LOGIC_VECTOR (251 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state245 : STD_LOGIC_VECTOR (251 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state246 : STD_LOGIC_VECTOR (251 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state247 : STD_LOGIC_VECTOR (251 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state248 : STD_LOGIC_VECTOR (251 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state249 : STD_LOGIC_VECTOR (251 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state250 : STD_LOGIC_VECTOR (251 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state251 : STD_LOGIC_VECTOR (251 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state252 : STD_LOGIC_VECTOR (251 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_E2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100010";
    constant ap_const_lv32_F6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_FA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_FB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111011";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_9B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011011";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_9E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011110";
    constant ap_const_lv32_A9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101001";
    constant ap_const_lv32_AE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101110";
    constant ap_const_lv32_D4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010100";
    constant ap_const_lv32_DE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011110";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010110";
    constant ap_const_lv32_97 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010111";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_A4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100100";
    constant ap_const_lv32_C5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000101";
    constant ap_const_lv32_CD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001101";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011001";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_E1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100001";
    constant ap_const_lv32_E8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101000";
    constant ap_const_lv32_E9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101001";
    constant ap_const_lv32_F5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110101";
    constant ap_const_lv32_F7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110111";
    constant ap_const_lv32_F8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_CE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_9C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011100";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011000";
    constant ap_const_lv64_3FE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_D5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010101";
    constant ap_const_lv64_400921F9F01B866E : STD_LOGIC_VECTOR (63 downto 0) := "0100000000001001001000011111100111110000000110111000011001101110";
    constant ap_const_lv64_4034000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000110100000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_A5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100101";
    constant ap_const_lv32_AA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101010";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_DA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011010";
    constant ap_const_lv64_40F5888000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000011110101100010001000000000000000000000000000000000000000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv9_1B9 : STD_LOGIC_VECTOR (8 downto 0) := "110111001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv17_15888 : STD_LOGIC_VECTOR (16 downto 0) := "10101100010001000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_1B9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv11_1B9 : STD_LOGIC_VECTOR (10 downto 0) := "00110111001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_15888 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010101100010001000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv41_C8 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000011001000";
    constant ap_const_lv9_64 : STD_LOGIC_VECTOR (8 downto 0) := "001100100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_C6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000110";
    constant ap_const_lv32_C7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000111";
    constant ap_const_lv32_C8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001000";
    constant ap_const_lv32_C9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001001";
    constant ap_const_lv32_CA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001010";
    constant ap_const_lv32_CB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001011";
    constant ap_const_lv32_CC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001100";
    constant ap_const_lv32_D1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010001";
    constant ap_const_lv32_D2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010010";
    constant ap_const_lv32_D3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010011";
    constant ap_const_lv32_D6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010110";
    constant ap_const_lv32_D7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010111";
    constant ap_const_lv32_D8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011000";
    constant ap_const_lv32_DB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011011";
    constant ap_const_lv32_DC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011100";
    constant ap_const_lv32_DD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011101";
    constant ap_const_lv32_E3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100011";
    constant ap_const_lv32_E4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100100";
    constant ap_const_lv32_E5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100101";
    constant ap_const_lv32_E6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100110";
    constant ap_const_lv32_E7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal axilite_out_ap_vld : STD_LOGIC;
    signal control : STD_LOGIC_VECTOR (7 downto 0);
    signal distortion_threshold : STD_LOGIC_VECTOR (31 downto 0);
    signal distortion_clip_factor : STD_LOGIC_VECTOR (7 downto 0);
    signal compression_min_threshold : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_max_threshold : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_zero_threshold : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_mult : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_samples : STD_LOGIC_VECTOR (31 downto 0);
    signal tempo : STD_LOGIC_VECTOR (31 downto 0);
    signal wah_coeffs : STD_LOGIC_VECTOR (63 downto 0);
    signal lpf_coefficients_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal lpf_coefficients_ce0 : STD_LOGIC;
    signal lpf_coefficients_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (251 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state227 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state227 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state247 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state247 : signal is "none";
    signal INPUT_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal OUTPUT_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state250 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state250 : signal is "none";
    signal tmp_last_V_reg_2513 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state251 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state251 : signal is "none";
    signal ap_CS_fsm_state252 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state252 : signal is "none";
    signal grp_fu_803_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_831 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal ap_CS_fsm_state156 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state156 : signal is "none";
    signal grp_fu_795_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_838 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal ap_CS_fsm_state115 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state115 : signal is "none";
    signal ap_CS_fsm_state159 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state159 : signal is "none";
    signal grp_fu_799_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_843 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_816_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_848 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state170 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state170 : signal is "none";
    signal ap_CS_fsm_state175 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state175 : signal is "none";
    signal ap_CS_fsm_state213 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state213 : signal is "none";
    signal ap_CS_fsm_state223 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state223 : signal is "none";
    signal wah_coeffs_read_reg_2313 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tempo_read_reg_2318 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_samples_read_reg_2323 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_mult_read_reg_2328 : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_zero_threshold_read_reg_2333 : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_max_threshold_read_reg_2338 : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_min_threshold_read_reg_2344 : STD_LOGIC_VECTOR (31 downto 0);
    signal distortion_clip_factor_read_reg_2351 : STD_LOGIC_VECTOR (7 downto 0);
    signal distortion_threshold_read_reg_2356 : STD_LOGIC_VECTOR (31 downto 0);
    signal control_read_reg_2366 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln23_fu_855_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln23_reg_2373 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_2445 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond3524_fu_932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_2449 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_2453 : STD_LOGIC_VECTOR (0 downto 0);
    signal negative_threshold_fu_1000_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal negative_threshold_reg_2457 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal conv7_i_i_i_fu_1005_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal conv7_i_i_i_reg_2462 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_828_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv2_i_reg_2468 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv18_i_reg_2473 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_806_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv30_i_reg_2478 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_keep_V_reg_2498 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_strb_V_reg_2503 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_user_V_reg_2508 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_id_V_reg_2517 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_dest_V_reg_2522 : STD_LOGIC_VECTOR (5 downto 0);
    signal current_sample_fu_1045_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_sample_reg_2527 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln90_fu_1051_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln90_reg_2532 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln135_fu_1057_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln135_reg_2542 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_fu_1062_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_2546 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_fu_1067_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_reg_2550 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_21_fu_1072_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_21_reg_2555 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_49_fu_1080_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal r_V_49_reg_2560 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ret_V_9_cast_reg_2565 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1049_1_fu_1099_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_1_reg_2572 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal r_V_48_fu_1185_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal r_V_48_reg_2585 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ret_V_cast_reg_2590 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1049_fu_1204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_reg_2597 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln95_fu_1237_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln95_reg_2602 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_fu_1176_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_buffer_index_1_reg_2614 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln61_fu_1247_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln61_reg_2622 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln159_fu_1262_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln159_reg_2630 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal icmp_ln159_fu_1256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal current_level_fu_1288_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_level_reg_2645 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln173_fu_1295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln173_reg_2650 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln183_fu_1300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln183_reg_2654 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln182_1_fu_1322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln182_1_reg_2658 : STD_LOGIC_VECTOR (0 downto 0);
    signal lpf_coefficients_load_reg_2662 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal compression_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_buffer_load_reg_2672 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal grp_fu_791_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_reg_2677 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal result_V_18_fu_1484_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal result_V_fu_1624_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_reg_2687 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal result_V_19_fu_1778_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_19_reg_2700 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal ap_CS_fsm_state126 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state126 : signal is "none";
    signal ap_CS_fsm_state151 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state151 : signal is "none";
    signal delay_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_buffer_load_reg_2715 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state152 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state152 : signal is "none";
    signal data_V_3_fu_1806_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_3_reg_2720 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state160 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state160 : signal is "none";
    signal val_3_fu_1916_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_3_reg_2725 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln221_fu_1968_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state161 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state161 : signal is "none";
    signal conv_i2_reg_2736 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state165 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state165 : signal is "none";
    signal ap_CS_fsm_state198 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state198 : signal is "none";
    signal grp_fu_823_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_2746 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state206 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state206 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_774_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_2751 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state208 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state208 : signal is "none";
    signal grp_fu_811_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add5_i_reg_2756 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state218 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state218 : signal is "none";
    signal result_V_21_fu_2126_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_21_reg_2761 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state224 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state224 : signal is "none";
    signal mul_ln226_fu_2137_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal mul_ln226_reg_2766 : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_CS_fsm_state225 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state225 : signal is "none";
    signal gmem_addr_reg_2771 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state226 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state226 : signal is "none";
    signal or_ln105_fu_2171_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln105_reg_2777 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state233 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state233 : signal is "none";
    signal grp_fu_1988_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal wah_buffer_index_1_reg_2783 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln73_fu_2181_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln73_reg_2788 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln226_1_fu_2191_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln226_1_reg_2796 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state234 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state234 : signal is "none";
    signal icmp_ln226_fu_2185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state246 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state246 : signal is "none";
    signal wah_values_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_46_reg_2811 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_read_reg_2816 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_50_fu_2231_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_50_reg_2821 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state248 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state248 : signal is "none";
    signal ret_V_12_reg_2826 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1049_2_fu_2247_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1049_2_reg_2833 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_3_fu_2286_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state249 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state249 : signal is "none";
    signal compression_buffer_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal compression_buffer_ce0 : STD_LOGIC;
    signal compression_buffer_we0 : STD_LOGIC;
    signal compression_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_buffer_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal delay_buffer_ce0 : STD_LOGIC;
    signal delay_buffer_we0 : STD_LOGIC;
    signal delay_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wah_values_buffer_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal wah_values_buffer_ce0 : STD_LOGIC;
    signal wah_values_buffer_we0 : STD_LOGIC;
    signal wah_values_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sin_or_cos_double_s_fu_774_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_774_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_774_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_774_ap_ready : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (9 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal ap_phi_mux_axilite_out_local_1_phi_fu_567_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal axilite_out_local_1_reg_564 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_empty_79_phi_fu_581_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_79_reg_578 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_tmp_int_6_phi_fu_595_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_int_6_reg_592 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_fu_1161_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_1_fu_1130_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_606 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_80_reg_617 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_axilite_out_local_2_phi_fu_632_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal axilite_out_local_2_reg_629 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_empty_82_phi_fu_649_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_82_reg_646 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_tmp_int_3_phi_fu_666_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_int_3_reg_663 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_axilite_out_local_3_phi_fu_685_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal axilite_out_local_3_reg_682 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln100_fu_1924_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_empty_83_phi_fu_696_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_83_reg_693 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_tmp_int_phi_fu_708_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_int_reg_704 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fu_1951_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_7_reg_716 : STD_LOGIC_VECTOR (6 downto 0);
    signal result_2_reg_727 : STD_LOGIC_VECTOR (31 downto 0);
    signal axilite_out_local_4_reg_739 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_86_reg_750 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_int_7_reg_760 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sin_or_cos_double_s_fu_774_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state207 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state207 : signal is "none";
    signal p_cast_fu_867_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond3588_fu_872_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast5_fu_897_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond3535_fu_902_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast6_fu_927_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln155_fu_1233_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln159_fu_1251_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln162_fu_1348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln201_fu_1801_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln204_fu_1959_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln217_fu_1977_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln229_fu_2220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln226_fu_2161_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_298 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_70_fu_878_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_71_fu_314 : STD_LOGIC_VECTOR (16 downto 0);
    signal empty_73_fu_908_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal empty_74_fu_318 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_76_fu_938_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal current_sample_1_fu_322 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state250 : BOOLEAN;
    signal ap_block_state250_io : BOOLEAN;
    signal empty_77_fu_326 : STD_LOGIC_VECTOR (31 downto 0);
    signal wah_buffer_index_fu_330 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_buffer_index_fu_334 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1791_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_buffer_index_fu_338 : STD_LOGIC_VECTOR (31 downto 0);
    signal axilite_out_local_0_fu_342 : STD_LOGIC_VECTOR (31 downto 0);
    signal abs_in_1_fu_1224_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal grp_fu_795_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal ap_CS_fsm_state113 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state113 : signal is "none";
    signal ap_CS_fsm_state157 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state157 : signal is "none";
    signal grp_fu_799_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal grp_fu_803_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal ap_CS_fsm_state153 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state153 : signal is "none";
    signal ap_CS_fsm_state214 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state214 : signal is "none";
    signal grp_fu_816_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_816_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state166 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state166 : signal is "none";
    signal ap_CS_fsm_state171 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state171 : signal is "none";
    signal ap_CS_fsm_state209 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state209 : signal is "none";
    signal ap_CS_fsm_state219 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state219 : signal is "none";
    signal ap_CS_fsm_state176 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state176 : signal is "none";
    signal grp_fu_828_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_49_fu_1080_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1049_1_fu_1095_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ret_V_10_fu_1112_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_28_fu_1105_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1048_1_fu_1117_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_11_fu_1123_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_fu_1143_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_1136_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1048_fu_1148_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_9_fu_1154_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1176_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1176_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_48_fu_1185_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1049_fu_1200_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_17_fu_1210_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln151_fu_1218_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln61_fu_1243_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln161_fu_1268_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1277_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1277_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln165_fu_1283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln182_1_fu_1311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln182_fu_1316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln182_fu_1306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1277_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln162_fu_1344_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal data_V_fu_1353_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_46_fu_1374_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_fu_1378_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal xs_exp_V_fu_1364_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln346_fu_1392_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_fu_1396_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1512_3_fu_1410_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_1402_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1512_fu_1416_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_1420_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1488_fu_1428_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_1388_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1488_fu_1432_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_35_fu_1436_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_22_fu_1448_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_36_fu_1442_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln818_fu_1456_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1460_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_fu_1470_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_45_fu_1356_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_2_fu_1478_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_2_fu_1492_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_50_fu_1514_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_2_fu_1518_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal xs_exp_V_2_fu_1504_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln346_2_fu_1532_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_2_fu_1536_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1512_5_fu_1550_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_3_fu_1542_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1512_2_fu_1556_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_3_fu_1560_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1488_2_fu_1568_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_2_fu_1528_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1488_3_fu_1572_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_40_fu_1576_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_30_fu_1588_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_41_fu_1582_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln818_2_fu_1596_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_1600_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_2_fu_1610_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_49_fu_1496_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_8_fu_1618_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1640_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1640_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal data_V_1_fu_1646_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_48_fu_1668_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_1_fu_1672_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal xs_exp_V_1_fu_1658_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln346_1_fu_1686_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_1_fu_1690_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1512_4_fu_1704_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_2_fu_1696_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1512_1_fu_1710_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_2_fu_1714_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1488_1_fu_1722_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_1_fu_1682_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1488_2_fu_1726_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_38_fu_1730_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_26_fu_1742_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_39_fu_1736_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln818_1_fu_1750_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_1754_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_1_fu_1764_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_47_fu_1650_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_7_fu_1772_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1791_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1791_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1640_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln201_fu_1797_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_52_fu_1820_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_3_fu_1824_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal xs_exp_V_4_fu_1810_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln346_3_fu_1838_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_3_fu_1842_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1512_fu_1856_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_4_fu_1848_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1512_3_fu_1862_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_4_fu_1866_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1488_3_fu_1874_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_3_fu_1834_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1488_4_fu_1878_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_42_fu_1882_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_34_fu_1894_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_43_fu_1888_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln818_3_fu_1902_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_1906_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_51_fu_1932_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_13_fu_1939_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_20_fu_1944_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1988_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1988_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_V_4_fu_1994_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_54_fu_2016_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_4_fu_2020_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal xs_exp_V_5_fu_2006_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln515_fu_2034_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln515_fu_2038_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1512_2_fu_2052_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_5_fu_2044_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1512_4_fu_2058_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_5_fu_2062_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1488_4_fu_2070_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_4_fu_2030_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln1488_5_fu_2074_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_44_fu_2078_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_38_fu_2090_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_45_fu_2084_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln818_4_fu_2098_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_2102_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_4_fu_2112_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_53_fu_1998_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_16_fu_2120_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln226_fu_2137_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln226_2_fu_2143_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln226_fu_2146_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_2151_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln73_fu_2177_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln228_fu_2197_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_2206_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_2206_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2206_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln229_fu_2216_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln1049_2_fu_2258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_13_fu_2263_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_44_fu_2251_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1048_2_fu_2268_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_14_fu_2275_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln598_fu_2282_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1176_ap_start : STD_LOGIC;
    signal grp_fu_1176_ap_done : STD_LOGIC;
    signal grp_fu_1277_ap_start : STD_LOGIC;
    signal grp_fu_1277_ap_done : STD_LOGIC;
    signal grp_fu_1640_ap_start : STD_LOGIC;
    signal grp_fu_1640_ap_done : STD_LOGIC;
    signal grp_fu_1791_ap_start : STD_LOGIC;
    signal grp_fu_1791_ap_done : STD_LOGIC;
    signal grp_fu_1988_ap_start : STD_LOGIC;
    signal grp_fu_1988_ap_done : STD_LOGIC;
    signal grp_fu_1988_ce : STD_LOGIC;
    signal ap_CS_fsm_state199 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state199 : signal is "none";
    signal ap_CS_fsm_state200 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state200 : signal is "none";
    signal ap_CS_fsm_state201 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state201 : signal is "none";
    signal ap_CS_fsm_state202 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state202 : signal is "none";
    signal ap_CS_fsm_state203 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state203 : signal is "none";
    signal ap_CS_fsm_state204 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state204 : signal is "none";
    signal ap_CS_fsm_state205 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state205 : signal is "none";
    signal ap_CS_fsm_state210 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state210 : signal is "none";
    signal ap_CS_fsm_state211 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state211 : signal is "none";
    signal ap_CS_fsm_state212 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state212 : signal is "none";
    signal ap_CS_fsm_state215 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state215 : signal is "none";
    signal ap_CS_fsm_state216 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state216 : signal is "none";
    signal ap_CS_fsm_state217 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state217 : signal is "none";
    signal ap_CS_fsm_state220 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state220 : signal is "none";
    signal ap_CS_fsm_state221 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state221 : signal is "none";
    signal ap_CS_fsm_state222 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state222 : signal is "none";
    signal ap_CS_fsm_state228 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state228 : signal is "none";
    signal ap_CS_fsm_state229 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state229 : signal is "none";
    signal ap_CS_fsm_state230 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state230 : signal is "none";
    signal ap_CS_fsm_state231 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state231 : signal is "none";
    signal ap_CS_fsm_state232 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state232 : signal is "none";
    signal grp_fu_2206_ap_start : STD_LOGIC;
    signal grp_fu_2206_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (251 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ST_fsm_state85_blk : STD_LOGIC;
    signal ap_ST_fsm_state86_blk : STD_LOGIC;
    signal ap_ST_fsm_state87_blk : STD_LOGIC;
    signal ap_ST_fsm_state88_blk : STD_LOGIC;
    signal ap_ST_fsm_state89_blk : STD_LOGIC;
    signal ap_ST_fsm_state90_blk : STD_LOGIC;
    signal ap_ST_fsm_state91_blk : STD_LOGIC;
    signal ap_ST_fsm_state92_blk : STD_LOGIC;
    signal ap_ST_fsm_state93_blk : STD_LOGIC;
    signal ap_ST_fsm_state94_blk : STD_LOGIC;
    signal ap_ST_fsm_state95_blk : STD_LOGIC;
    signal ap_ST_fsm_state96_blk : STD_LOGIC;
    signal ap_ST_fsm_state97_blk : STD_LOGIC;
    signal ap_ST_fsm_state98_blk : STD_LOGIC;
    signal ap_ST_fsm_state99_blk : STD_LOGIC;
    signal ap_ST_fsm_state100_blk : STD_LOGIC;
    signal ap_ST_fsm_state101_blk : STD_LOGIC;
    signal ap_ST_fsm_state102_blk : STD_LOGIC;
    signal ap_ST_fsm_state103_blk : STD_LOGIC;
    signal ap_ST_fsm_state104_blk : STD_LOGIC;
    signal ap_ST_fsm_state105_blk : STD_LOGIC;
    signal ap_ST_fsm_state106_blk : STD_LOGIC;
    signal ap_ST_fsm_state107_blk : STD_LOGIC;
    signal ap_ST_fsm_state108_blk : STD_LOGIC;
    signal ap_ST_fsm_state109_blk : STD_LOGIC;
    signal ap_ST_fsm_state110_blk : STD_LOGIC;
    signal ap_ST_fsm_state111_blk : STD_LOGIC;
    signal ap_ST_fsm_state112_blk : STD_LOGIC;
    signal ap_ST_fsm_state113_blk : STD_LOGIC;
    signal ap_ST_fsm_state114_blk : STD_LOGIC;
    signal ap_ST_fsm_state115_blk : STD_LOGIC;
    signal ap_ST_fsm_state116_blk : STD_LOGIC;
    signal ap_ST_fsm_state117_blk : STD_LOGIC;
    signal ap_ST_fsm_state118_blk : STD_LOGIC;
    signal ap_ST_fsm_state119_blk : STD_LOGIC;
    signal ap_ST_fsm_state120_blk : STD_LOGIC;
    signal ap_ST_fsm_state121_blk : STD_LOGIC;
    signal ap_ST_fsm_state122_blk : STD_LOGIC;
    signal ap_ST_fsm_state123_blk : STD_LOGIC;
    signal ap_ST_fsm_state124_blk : STD_LOGIC;
    signal ap_ST_fsm_state125_blk : STD_LOGIC;
    signal ap_ST_fsm_state126_blk : STD_LOGIC;
    signal ap_ST_fsm_state127_blk : STD_LOGIC;
    signal ap_ST_fsm_state128_blk : STD_LOGIC;
    signal ap_ST_fsm_state129_blk : STD_LOGIC;
    signal ap_ST_fsm_state130_blk : STD_LOGIC;
    signal ap_ST_fsm_state131_blk : STD_LOGIC;
    signal ap_ST_fsm_state132_blk : STD_LOGIC;
    signal ap_ST_fsm_state133_blk : STD_LOGIC;
    signal ap_ST_fsm_state134_blk : STD_LOGIC;
    signal ap_ST_fsm_state135_blk : STD_LOGIC;
    signal ap_ST_fsm_state136_blk : STD_LOGIC;
    signal ap_ST_fsm_state137_blk : STD_LOGIC;
    signal ap_ST_fsm_state138_blk : STD_LOGIC;
    signal ap_ST_fsm_state139_blk : STD_LOGIC;
    signal ap_ST_fsm_state140_blk : STD_LOGIC;
    signal ap_ST_fsm_state141_blk : STD_LOGIC;
    signal ap_ST_fsm_state142_blk : STD_LOGIC;
    signal ap_ST_fsm_state143_blk : STD_LOGIC;
    signal ap_ST_fsm_state144_blk : STD_LOGIC;
    signal ap_ST_fsm_state145_blk : STD_LOGIC;
    signal ap_ST_fsm_state146_blk : STD_LOGIC;
    signal ap_ST_fsm_state147_blk : STD_LOGIC;
    signal ap_ST_fsm_state148_blk : STD_LOGIC;
    signal ap_ST_fsm_state149_blk : STD_LOGIC;
    signal ap_ST_fsm_state150_blk : STD_LOGIC;
    signal ap_ST_fsm_state151_blk : STD_LOGIC;
    signal ap_ST_fsm_state152_blk : STD_LOGIC;
    signal ap_ST_fsm_state153_blk : STD_LOGIC;
    signal ap_ST_fsm_state154_blk : STD_LOGIC;
    signal ap_ST_fsm_state155_blk : STD_LOGIC;
    signal ap_ST_fsm_state156_blk : STD_LOGIC;
    signal ap_ST_fsm_state157_blk : STD_LOGIC;
    signal ap_ST_fsm_state158_blk : STD_LOGIC;
    signal ap_ST_fsm_state159_blk : STD_LOGIC;
    signal ap_ST_fsm_state160_blk : STD_LOGIC;
    signal ap_ST_fsm_state161_blk : STD_LOGIC;
    signal ap_ST_fsm_state162_blk : STD_LOGIC;
    signal ap_ST_fsm_state163_blk : STD_LOGIC;
    signal ap_ST_fsm_state164_blk : STD_LOGIC;
    signal ap_ST_fsm_state165_blk : STD_LOGIC;
    signal ap_ST_fsm_state166_blk : STD_LOGIC;
    signal ap_ST_fsm_state167_blk : STD_LOGIC;
    signal ap_ST_fsm_state168_blk : STD_LOGIC;
    signal ap_ST_fsm_state169_blk : STD_LOGIC;
    signal ap_ST_fsm_state170_blk : STD_LOGIC;
    signal ap_ST_fsm_state171_blk : STD_LOGIC;
    signal ap_ST_fsm_state172_blk : STD_LOGIC;
    signal ap_ST_fsm_state173_blk : STD_LOGIC;
    signal ap_ST_fsm_state174_blk : STD_LOGIC;
    signal ap_ST_fsm_state175_blk : STD_LOGIC;
    signal ap_ST_fsm_state176_blk : STD_LOGIC;
    signal ap_ST_fsm_state177_blk : STD_LOGIC;
    signal ap_ST_fsm_state178_blk : STD_LOGIC;
    signal ap_ST_fsm_state179_blk : STD_LOGIC;
    signal ap_ST_fsm_state180_blk : STD_LOGIC;
    signal ap_ST_fsm_state181_blk : STD_LOGIC;
    signal ap_ST_fsm_state182_blk : STD_LOGIC;
    signal ap_ST_fsm_state183_blk : STD_LOGIC;
    signal ap_ST_fsm_state184_blk : STD_LOGIC;
    signal ap_ST_fsm_state185_blk : STD_LOGIC;
    signal ap_ST_fsm_state186_blk : STD_LOGIC;
    signal ap_ST_fsm_state187_blk : STD_LOGIC;
    signal ap_ST_fsm_state188_blk : STD_LOGIC;
    signal ap_ST_fsm_state189_blk : STD_LOGIC;
    signal ap_ST_fsm_state190_blk : STD_LOGIC;
    signal ap_ST_fsm_state191_blk : STD_LOGIC;
    signal ap_ST_fsm_state192_blk : STD_LOGIC;
    signal ap_ST_fsm_state193_blk : STD_LOGIC;
    signal ap_ST_fsm_state194_blk : STD_LOGIC;
    signal ap_ST_fsm_state195_blk : STD_LOGIC;
    signal ap_ST_fsm_state196_blk : STD_LOGIC;
    signal ap_ST_fsm_state197_blk : STD_LOGIC;
    signal ap_ST_fsm_state198_blk : STD_LOGIC;
    signal ap_ST_fsm_state199_blk : STD_LOGIC;
    signal ap_ST_fsm_state200_blk : STD_LOGIC;
    signal ap_ST_fsm_state201_blk : STD_LOGIC;
    signal ap_ST_fsm_state202_blk : STD_LOGIC;
    signal ap_ST_fsm_state203_blk : STD_LOGIC;
    signal ap_ST_fsm_state204_blk : STD_LOGIC;
    signal ap_ST_fsm_state205_blk : STD_LOGIC;
    signal ap_ST_fsm_state206_blk : STD_LOGIC;
    signal ap_ST_fsm_state207_blk : STD_LOGIC;
    signal ap_ST_fsm_state208_blk : STD_LOGIC;
    signal ap_ST_fsm_state209_blk : STD_LOGIC;
    signal ap_ST_fsm_state210_blk : STD_LOGIC;
    signal ap_ST_fsm_state211_blk : STD_LOGIC;
    signal ap_ST_fsm_state212_blk : STD_LOGIC;
    signal ap_ST_fsm_state213_blk : STD_LOGIC;
    signal ap_ST_fsm_state214_blk : STD_LOGIC;
    signal ap_ST_fsm_state215_blk : STD_LOGIC;
    signal ap_ST_fsm_state216_blk : STD_LOGIC;
    signal ap_ST_fsm_state217_blk : STD_LOGIC;
    signal ap_ST_fsm_state218_blk : STD_LOGIC;
    signal ap_ST_fsm_state219_blk : STD_LOGIC;
    signal ap_ST_fsm_state220_blk : STD_LOGIC;
    signal ap_ST_fsm_state221_blk : STD_LOGIC;
    signal ap_ST_fsm_state222_blk : STD_LOGIC;
    signal ap_ST_fsm_state223_blk : STD_LOGIC;
    signal ap_ST_fsm_state224_blk : STD_LOGIC;
    signal ap_ST_fsm_state225_blk : STD_LOGIC;
    signal ap_ST_fsm_state226_blk : STD_LOGIC;
    signal ap_ST_fsm_state227_blk : STD_LOGIC;
    signal ap_ST_fsm_state228_blk : STD_LOGIC;
    signal ap_ST_fsm_state229_blk : STD_LOGIC;
    signal ap_ST_fsm_state230_blk : STD_LOGIC;
    signal ap_ST_fsm_state231_blk : STD_LOGIC;
    signal ap_ST_fsm_state232_blk : STD_LOGIC;
    signal ap_ST_fsm_state233_blk : STD_LOGIC;
    signal ap_ST_fsm_state234_blk : STD_LOGIC;
    signal ap_ST_fsm_state235_blk : STD_LOGIC;
    signal ap_ST_fsm_state236_blk : STD_LOGIC;
    signal ap_ST_fsm_state237_blk : STD_LOGIC;
    signal ap_ST_fsm_state238_blk : STD_LOGIC;
    signal ap_ST_fsm_state239_blk : STD_LOGIC;
    signal ap_ST_fsm_state240_blk : STD_LOGIC;
    signal ap_ST_fsm_state241_blk : STD_LOGIC;
    signal ap_ST_fsm_state242_blk : STD_LOGIC;
    signal ap_ST_fsm_state243_blk : STD_LOGIC;
    signal ap_ST_fsm_state244_blk : STD_LOGIC;
    signal ap_ST_fsm_state245_blk : STD_LOGIC;
    signal ap_ST_fsm_state246_blk : STD_LOGIC;
    signal ap_ST_fsm_state247_blk : STD_LOGIC;
    signal ap_ST_fsm_state248_blk : STD_LOGIC;
    signal ap_ST_fsm_state249_blk : STD_LOGIC;
    signal ap_ST_fsm_state250_blk : STD_LOGIC;
    signal ap_ST_fsm_state251_blk : STD_LOGIC;
    signal ap_ST_fsm_state252_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state252 : BOOLEAN;
    signal regslice_both_INPUT_r_V_data_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_r_TVALID_int_regslice : STD_LOGIC;
    signal INPUT_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_INPUT_r_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_r_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_INPUT_r_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_r_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_r_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_INPUT_r_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_r_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_r_V_user_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TUSER_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_INPUT_r_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_r_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_r_V_last_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_INPUT_r_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_r_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_r_V_id_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TID_int_regslice : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_INPUT_r_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_r_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_r_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TDEST_int_regslice : STD_LOGIC_VECTOR (5 downto 0);
    signal regslice_both_INPUT_r_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_r_V_dest_V_U_ack_in : STD_LOGIC;
    signal OUTPUT_r_TVALID_int_regslice : STD_LOGIC;
    signal OUTPUT_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_last_V_U_apdone_blk : STD_LOGIC;
    signal OUTPUT_r_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_OUTPUT_r_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_condition_3887 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component guitar_effects_sin_or_cos_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component guitar_effects_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_fdiv_32ns_32ns_32_12_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_sitofp_32ns_32_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_dadd_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component guitar_effects_dmul_64ns_64ns_64_5_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component guitar_effects_ddiv_64ns_64ns_64_31_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component guitar_effects_sitodp_32ns_64_5_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component guitar_effects_mul_32s_8s_40_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component guitar_effects_srem_32ns_10ns_32_36_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_srem_11ns_10ns_9_15_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component guitar_effects_srem_32ns_18ns_17_36_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component guitar_effects_srem_32ns_18ns_32_36_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_srem_32ns_8ns_32_36_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_mul_32s_9ns_41_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (40 downto 0) );
    end component;


    component guitar_effects_srem_9ns_8ns_7_13_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component guitar_effects_mul_32s_16s_48_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component guitar_effects_lpf_coefficients_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_compression_buffer_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_delay_buffer_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_wah_values_buffer_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_control_r_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        axilite_out : IN STD_LOGIC_VECTOR (31 downto 0);
        axilite_out_ap_vld : IN STD_LOGIC;
        control : OUT STD_LOGIC_VECTOR (7 downto 0);
        distortion_threshold : OUT STD_LOGIC_VECTOR (31 downto 0);
        distortion_clip_factor : OUT STD_LOGIC_VECTOR (7 downto 0);
        compression_min_threshold : OUT STD_LOGIC_VECTOR (31 downto 0);
        compression_max_threshold : OUT STD_LOGIC_VECTOR (31 downto 0);
        compression_zero_threshold : OUT STD_LOGIC_VECTOR (31 downto 0);
        delay_mult : OUT STD_LOGIC_VECTOR (31 downto 0);
        delay_samples : OUT STD_LOGIC_VECTOR (31 downto 0);
        tempo : OUT STD_LOGIC_VECTOR (31 downto 0);
        wah_coeffs : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component guitar_effects_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (9 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component guitar_effects_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    lpf_coefficients_U : component guitar_effects_lpf_coefficients_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 441,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lpf_coefficients_address0,
        ce0 => lpf_coefficients_ce0,
        q0 => lpf_coefficients_q0);

    compression_buffer_U : component guitar_effects_compression_buffer_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 441,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => compression_buffer_address0,
        ce0 => compression_buffer_ce0,
        we0 => compression_buffer_we0,
        d0 => compression_buffer_d0,
        q0 => compression_buffer_q0);

    delay_buffer_U : component guitar_effects_delay_buffer_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 88200,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => delay_buffer_address0,
        ce0 => delay_buffer_ce0,
        we0 => delay_buffer_we0,
        d0 => delay_buffer_d0,
        q0 => delay_buffer_q0);

    wah_values_buffer_U : component guitar_effects_wah_values_buffer_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => wah_values_buffer_address0,
        ce0 => wah_values_buffer_ce0,
        we0 => wah_values_buffer_we0,
        d0 => wah_values_buffer_d0,
        q0 => wah_values_buffer_q0);

    grp_sin_or_cos_double_s_fu_774 : component guitar_effects_sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sin_or_cos_double_s_fu_774_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_774_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_774_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_774_ap_ready,
        t_in => x_assign_reg_2746,
        ap_return => grp_sin_or_cos_double_s_fu_774_ap_return);

    control_r_s_axi_U : component guitar_effects_control_r_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_R_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_R_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_r_AWVALID,
        AWREADY => s_axi_control_r_AWREADY,
        AWADDR => s_axi_control_r_AWADDR,
        WVALID => s_axi_control_r_WVALID,
        WREADY => s_axi_control_r_WREADY,
        WDATA => s_axi_control_r_WDATA,
        WSTRB => s_axi_control_r_WSTRB,
        ARVALID => s_axi_control_r_ARVALID,
        ARREADY => s_axi_control_r_ARREADY,
        ARADDR => s_axi_control_r_ARADDR,
        RVALID => s_axi_control_r_RVALID,
        RREADY => s_axi_control_r_RREADY,
        RDATA => s_axi_control_r_RDATA,
        RRESP => s_axi_control_r_RRESP,
        BVALID => s_axi_control_r_BVALID,
        BREADY => s_axi_control_r_BREADY,
        BRESP => s_axi_control_r_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        axilite_out => axilite_out_local_4_reg_739,
        axilite_out_ap_vld => axilite_out_ap_vld,
        control => control,
        distortion_threshold => distortion_threshold,
        distortion_clip_factor => distortion_clip_factor,
        compression_min_threshold => compression_min_threshold,
        compression_max_threshold => compression_max_threshold,
        compression_zero_threshold => compression_zero_threshold,
        delay_mult => delay_mult,
        delay_samples => delay_samples,
        tempo => tempo,
        wah_coeffs => wah_coeffs);

    gmem_m_axi_U : component guitar_effects_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 10,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        USER_DW => 16,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_addr_reg_2771,
        I_ARLEN => ap_const_lv32_64,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => gmem_BVALID,
        I_BREADY => ap_const_logic_0);

    fadd_32ns_32ns_32_4_full_dsp_1_U33 : component guitar_effects_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_831,
        din1 => reg_838,
        ce => ap_const_logic_1,
        dout => grp_fu_791_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U34 : component guitar_effects_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_831,
        din1 => grp_fu_795_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_795_p2);

    fdiv_32ns_32ns_32_12_no_dsp_1_U35 : component guitar_effects_fdiv_32ns_32ns_32_12_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_799_p0,
        din1 => reg_831,
        ce => ap_const_logic_1,
        dout => grp_fu_799_p2);

    sitofp_32ns_32_4_no_dsp_1_U36 : component guitar_effects_sitofp_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_803_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_803_p1);

    sitofp_32ns_32_4_no_dsp_1_U37 : component guitar_effects_sitofp_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => compression_min_threshold_read_reg_2344,
        ce => ap_const_logic_1,
        dout => grp_fu_806_p1);

    dadd_64ns_64ns_64_5_full_dsp_1_U38 : component guitar_effects_dadd_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_848,
        din1 => ap_const_lv64_3FE0000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_811_p2);

    dmul_64ns_64ns_64_5_max_dsp_1_U39 : component guitar_effects_dmul_64ns_64ns_64_5_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_816_p0,
        din1 => grp_fu_816_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_816_p2);

    ddiv_64ns_64ns_64_31_no_dsp_1_U40 : component guitar_effects_ddiv_64ns_64ns_64_31_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_848,
        din1 => ap_const_lv64_40F5888000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_823_p2);

    sitodp_32ns_64_5_no_dsp_1_U41 : component guitar_effects_sitodp_32ns_64_5_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_828_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_828_p1);

    mul_32s_8s_40_1_1_U42 : component guitar_effects_mul_32s_8s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 40)
    port map (
        din0 => r_V_reg_2550,
        din1 => r_V_49_fu_1080_p1,
        dout => r_V_49_fu_1080_p2);

    srem_32ns_10ns_32_36_seq_1_U43 : component guitar_effects_srem_32ns_10ns_32_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 10,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_1176_ap_start,
        done => grp_fu_1176_ap_done,
        din0 => grp_fu_1176_p0,
        din1 => grp_fu_1176_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1176_p2);

    mul_32s_8s_40_1_1_U44 : component guitar_effects_mul_32s_8s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 40)
    port map (
        din0 => r_V_21_reg_2555,
        din1 => r_V_48_fu_1185_p1,
        dout => r_V_48_fu_1185_p2);

    srem_11ns_10ns_9_15_seq_1_U45 : component guitar_effects_srem_11ns_10ns_9_15_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 11,
        din1_WIDTH => 10,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_1277_ap_start,
        done => grp_fu_1277_ap_done,
        din0 => grp_fu_1277_p0,
        din1 => grp_fu_1277_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1277_p2);

    srem_32ns_18ns_17_36_seq_1_U46 : component guitar_effects_srem_32ns_18ns_17_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 18,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_1640_ap_start,
        done => grp_fu_1640_ap_done,
        din0 => grp_fu_1640_p0,
        din1 => grp_fu_1640_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1640_p2);

    srem_32ns_18ns_32_36_seq_1_U47 : component guitar_effects_srem_32ns_18ns_32_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 18,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_1791_ap_start,
        done => grp_fu_1791_ap_done,
        din0 => grp_fu_1791_p0,
        din1 => grp_fu_1791_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1791_p2);

    srem_32ns_8ns_32_36_seq_1_U48 : component guitar_effects_srem_32ns_8ns_32_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_1988_ap_start,
        done => grp_fu_1988_ap_done,
        din0 => grp_fu_1988_p0,
        din1 => grp_fu_1988_p1,
        ce => grp_fu_1988_ce,
        dout => grp_fu_1988_p2);

    mul_32s_9ns_41_1_1_U49 : component guitar_effects_mul_32s_9ns_41_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 9,
        dout_WIDTH => 41)
    port map (
        din0 => result_V_21_reg_2761,
        din1 => mul_ln226_fu_2137_p1,
        dout => mul_ln226_fu_2137_p2);

    srem_9ns_8ns_7_13_seq_1_U50 : component guitar_effects_srem_9ns_8ns_7_13_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 9,
        din1_WIDTH => 8,
        dout_WIDTH => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_2206_ap_start,
        done => grp_fu_2206_ap_done,
        din0 => grp_fu_2206_p0,
        din1 => grp_fu_2206_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2206_p2);

    mul_32s_16s_48_1_1_U51 : component guitar_effects_mul_32s_16s_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 48)
    port map (
        din0 => r_V_46_reg_2811,
        din1 => gmem_addr_read_reg_2816,
        dout => r_V_50_fu_2231_p2);

    regslice_both_INPUT_r_V_data_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TDATA,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_data_V_U_ack_in,
        data_out => INPUT_r_TDATA_int_regslice,
        vld_out => INPUT_r_TVALID_int_regslice,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_data_V_U_apdone_blk);

    regslice_both_INPUT_r_V_keep_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TKEEP,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_keep_V_U_ack_in,
        data_out => INPUT_r_TKEEP_int_regslice,
        vld_out => regslice_both_INPUT_r_V_keep_V_U_vld_out,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_keep_V_U_apdone_blk);

    regslice_both_INPUT_r_V_strb_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TSTRB,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_strb_V_U_ack_in,
        data_out => INPUT_r_TSTRB_int_regslice,
        vld_out => regslice_both_INPUT_r_V_strb_V_U_vld_out,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_strb_V_U_apdone_blk);

    regslice_both_INPUT_r_V_user_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TUSER,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_user_V_U_ack_in,
        data_out => INPUT_r_TUSER_int_regslice,
        vld_out => regslice_both_INPUT_r_V_user_V_U_vld_out,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_user_V_U_apdone_blk);

    regslice_both_INPUT_r_V_last_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TLAST,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_last_V_U_ack_in,
        data_out => INPUT_r_TLAST_int_regslice,
        vld_out => regslice_both_INPUT_r_V_last_V_U_vld_out,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_last_V_U_apdone_blk);

    regslice_both_INPUT_r_V_id_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TID,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_id_V_U_ack_in,
        data_out => INPUT_r_TID_int_regslice,
        vld_out => regslice_both_INPUT_r_V_id_V_U_vld_out,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_id_V_U_apdone_blk);

    regslice_both_INPUT_r_V_dest_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TDEST,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_dest_V_U_ack_in,
        data_out => INPUT_r_TDEST_int_regslice,
        vld_out => regslice_both_INPUT_r_V_dest_V_U_vld_out,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_dest_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_data_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_int_7_reg_760,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => OUTPUT_r_TREADY_int_regslice,
        data_out => OUTPUT_r_TDATA,
        vld_out => regslice_both_OUTPUT_r_V_data_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_data_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_keep_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_keep_V_reg_2498,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_keep_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TKEEP,
        vld_out => regslice_both_OUTPUT_r_V_keep_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_keep_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_strb_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_strb_V_reg_2503,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_strb_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TSTRB,
        vld_out => regslice_both_OUTPUT_r_V_strb_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_strb_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_user_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_user_V_reg_2508,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_user_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TUSER,
        vld_out => regslice_both_OUTPUT_r_V_user_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_user_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_last_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => OUTPUT_r_TLAST_int_regslice,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_last_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TLAST,
        vld_out => regslice_both_OUTPUT_r_V_last_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_last_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_id_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_id_V_reg_2517,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_id_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TID,
        vld_out => regslice_both_OUTPUT_r_V_id_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_id_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_dest_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_dest_V_reg_2522,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_dest_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TDEST,
        vld_out => regslice_both_OUTPUT_r_V_dest_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_774_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sin_or_cos_double_s_fu_774_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state207)) then 
                    grp_sin_or_cos_double_s_fu_774_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_774_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_774_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    axilite_out_local_0_fu_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3524_fu_932_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                axilite_out_local_0_fu_342 <= ap_const_lv32_0;
            elsif ((not(((ap_const_boolean_1 = ap_block_state250_io) or ((tmp_last_V_reg_2513 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_2513 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) and (tmp_last_V_reg_2513 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state250))) then 
                axilite_out_local_0_fu_342 <= axilite_out_local_4_reg_739;
            end if; 
        end if;
    end process;

    axilite_out_local_1_reg_564_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln137_fu_1062_p2 = ap_const_lv1_0) and (icmp_ln135_fu_1057_p2 = ap_const_lv1_0) and (tmp_reg_2445 = ap_const_lv1_1) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                axilite_out_local_1_reg_564 <= or_ln90_fu_1051_p2;
            elsif ((((icmp_ln137_reg_2546 = ap_const_lv1_1) and (icmp_ln135_reg_2542 = ap_const_lv1_0) and (tmp_reg_2445 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((icmp_ln135_reg_2542 = ap_const_lv1_1) and (tmp_reg_2445 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
                axilite_out_local_1_reg_564 <= or_ln90_reg_2532;
            elsif (((tmp_reg_2445 = ap_const_lv1_0) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                axilite_out_local_1_reg_564 <= axilite_out_local_0_fu_342;
            end if; 
        end if;
    end process;

    axilite_out_local_2_reg_629_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln173_fu_1295_p2 = ap_const_lv1_0) and (icmp_ln159_fu_1256_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln182_1_fu_1322_p2) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((icmp_ln173_reg_2650 = ap_const_lv1_0) and (tmp_11_reg_2449 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln182_1_reg_2658) and (ap_const_logic_1 = ap_CS_fsm_state96)) or ((icmp_ln183_fu_1300_p2 = ap_const_lv1_0) and (icmp_ln173_fu_1295_p2 = ap_const_lv1_1) and (icmp_ln159_fu_1256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((icmp_ln183_reg_2654 = ap_const_lv1_1) and (icmp_ln173_reg_2650 = ap_const_lv1_1) and (tmp_11_reg_2449 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state96)))) then 
                axilite_out_local_2_reg_629 <= or_ln95_reg_2602;
            elsif (((tmp_11_reg_2449 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                axilite_out_local_2_reg_629 <= ap_phi_mux_axilite_out_local_1_phi_fu_567_p8;
            end if; 
        end if;
    end process;

    axilite_out_local_3_reg_682_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_13_reg_2453 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state161))) then 
                axilite_out_local_3_reg_682 <= or_ln100_fu_1924_p2;
            elsif (((tmp_13_reg_2453 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state96))) then 
                axilite_out_local_3_reg_682 <= ap_phi_mux_axilite_out_local_2_phi_fu_632_p10;
            end if; 
        end if;
    end process;

    axilite_out_local_4_reg_739_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln226_fu_2185_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state234))) then 
                axilite_out_local_4_reg_739 <= or_ln105_reg_2777;
            elsif (((trunc_ln23_reg_2373 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state161))) then 
                axilite_out_local_4_reg_739 <= ap_phi_mux_axilite_out_local_3_phi_fu_685_p4;
            end if; 
        end if;
    end process;

    compression_buffer_index_fu_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3524_fu_932_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                compression_buffer_index_fu_338 <= ap_const_lv32_0;
            elsif ((((icmp_ln173_fu_1295_p2 = ap_const_lv1_0) and (icmp_ln159_fu_1256_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln182_1_fu_1322_p2) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((icmp_ln173_fu_1295_p2 = ap_const_lv1_0) and (icmp_ln159_fu_1256_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln182_1_fu_1322_p2) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((icmp_ln183_fu_1300_p2 = ap_const_lv1_1) and (icmp_ln173_fu_1295_p2 = ap_const_lv1_1) and (icmp_ln159_fu_1256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((icmp_ln183_fu_1300_p2 = ap_const_lv1_0) and (icmp_ln173_fu_1295_p2 = ap_const_lv1_1) and (icmp_ln159_fu_1256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48)))) then 
                compression_buffer_index_fu_338 <= compression_buffer_index_1_reg_2614;
            end if; 
        end if;
    end process;

    current_sample_1_fu_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3524_fu_932_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                current_sample_1_fu_322 <= ap_const_lv32_0;
            elsif ((not(((ap_const_boolean_1 = ap_block_state250_io) or ((tmp_last_V_reg_2513 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_2513 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) and (tmp_last_V_reg_2513 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state250))) then 
                current_sample_1_fu_322 <= current_sample_reg_2527;
            end if; 
        end if;
    end process;

    delay_buffer_index_fu_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3524_fu_932_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                delay_buffer_index_fu_334 <= ap_const_lv32_0;
            elsif (((tmp_13_reg_2453 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state161))) then 
                delay_buffer_index_fu_334 <= grp_fu_1791_p2;
            end if; 
        end if;
    end process;

    empty_71_fu_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3588_fu_872_p2 = ap_const_lv1_1))) then 
                empty_71_fu_314 <= ap_const_lv17_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3535_fu_902_p2 = ap_const_lv1_0))) then 
                empty_71_fu_314 <= empty_73_fu_908_p2;
            end if; 
        end if;
    end process;

    empty_74_fu_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3535_fu_902_p2 = ap_const_lv1_1))) then 
                empty_74_fu_318 <= ap_const_lv7_0;
            elsif (((exitcond3524_fu_932_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                empty_74_fu_318 <= empty_76_fu_938_p2;
            end if; 
        end if;
    end process;

    empty_77_fu_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3524_fu_932_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                empty_77_fu_326 <= ap_const_lv32_0;
            elsif ((not(((ap_const_boolean_1 = ap_block_state250_io) or ((tmp_last_V_reg_2513 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_2513 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) and (tmp_last_V_reg_2513 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state250))) then 
                empty_77_fu_326 <= empty_86_reg_750;
            end if; 
        end if;
    end process;

    empty_79_reg_578_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln137_fu_1062_p2 = ap_const_lv1_0) and (icmp_ln135_fu_1057_p2 = ap_const_lv1_0) and (tmp_reg_2445 = ap_const_lv1_1) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                empty_79_reg_578 <= or_ln90_fu_1051_p2;
            elsif ((((icmp_ln137_reg_2546 = ap_const_lv1_1) and (icmp_ln135_reg_2542 = ap_const_lv1_0) and (tmp_reg_2445 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((icmp_ln135_reg_2542 = ap_const_lv1_1) and (tmp_reg_2445 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
                empty_79_reg_578 <= or_ln90_reg_2532;
            elsif (((tmp_reg_2445 = ap_const_lv1_0) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                empty_79_reg_578 <= empty_77_fu_326;
            end if; 
        end if;
    end process;

    empty_80_reg_617_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                empty_80_reg_617 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                empty_80_reg_617 <= result_V_18_fu_1484_p3;
            end if; 
        end if;
    end process;

    empty_82_reg_646_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln173_fu_1295_p2 = ap_const_lv1_0) and (icmp_ln159_fu_1256_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln182_1_fu_1322_p2) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((icmp_ln173_reg_2650 = ap_const_lv1_0) and (tmp_11_reg_2449 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln182_1_reg_2658) and (ap_const_logic_1 = ap_CS_fsm_state96)) or ((icmp_ln183_fu_1300_p2 = ap_const_lv1_0) and (icmp_ln173_fu_1295_p2 = ap_const_lv1_1) and (icmp_ln159_fu_1256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((icmp_ln183_reg_2654 = ap_const_lv1_1) and (icmp_ln173_reg_2650 = ap_const_lv1_1) and (tmp_11_reg_2449 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state96)))) then 
                empty_82_reg_646 <= or_ln95_reg_2602;
            elsif (((tmp_11_reg_2449 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                empty_82_reg_646 <= ap_phi_mux_empty_79_phi_fu_581_p8;
            end if; 
        end if;
    end process;

    empty_83_reg_693_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_13_reg_2453 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state161))) then 
                empty_83_reg_693 <= or_ln100_fu_1924_p2;
            elsif (((tmp_13_reg_2453 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state96))) then 
                empty_83_reg_693 <= ap_phi_mux_empty_82_phi_fu_649_p10;
            end if; 
        end if;
    end process;

    empty_86_reg_750_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln226_fu_2185_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state234))) then 
                empty_86_reg_750 <= or_ln105_reg_2777;
            elsif (((trunc_ln23_reg_2373 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state161))) then 
                empty_86_reg_750 <= ap_phi_mux_empty_83_phi_fu_696_p4;
            end if; 
        end if;
    end process;

    empty_fu_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                empty_fu_298 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3588_fu_872_p2 = ap_const_lv1_0))) then 
                empty_fu_298 <= empty_70_fu_878_p2;
            end if; 
        end if;
    end process;

    i_7_reg_716_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state233)) then 
                i_7_reg_716 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state249)) then 
                i_7_reg_716 <= add_ln226_1_reg_2796;
            end if; 
        end if;
    end process;

    i_reg_606_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                i_reg_606 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                i_reg_606 <= add_ln159_reg_2630;
            end if; 
        end if;
    end process;

    tmp_int_3_reg_663_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln173_reg_2650 = ap_const_lv1_0) and (tmp_11_reg_2449 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln182_1_reg_2658) and (ap_const_logic_1 = ap_CS_fsm_state96))) then 
                tmp_int_3_reg_663 <= result_V_reg_2687;
            elsif ((((icmp_ln173_fu_1295_p2 = ap_const_lv1_0) and (icmp_ln159_fu_1256_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln182_1_fu_1322_p2) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((icmp_ln183_fu_1300_p2 = ap_const_lv1_0) and (icmp_ln173_fu_1295_p2 = ap_const_lv1_1) and (icmp_ln159_fu_1256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48)))) then 
                tmp_int_3_reg_663 <= tmp_int_6_reg_592;
            elsif (((icmp_ln183_reg_2654 = ap_const_lv1_1) and (icmp_ln173_reg_2650 = ap_const_lv1_1) and (tmp_11_reg_2449 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state96))) then 
                tmp_int_3_reg_663 <= result_V_19_reg_2700;
            elsif (((tmp_11_reg_2449 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                tmp_int_3_reg_663 <= ap_phi_mux_tmp_int_6_phi_fu_595_p8;
            end if; 
        end if;
    end process;

    tmp_int_6_reg_592_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln137_reg_2546 = ap_const_lv1_1) and (icmp_ln135_reg_2542 = ap_const_lv1_0) and (tmp_reg_2445 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                tmp_int_6_reg_592 <= result_1_fu_1130_p2;
            elsif (((icmp_ln135_reg_2542 = ap_const_lv1_1) and (tmp_reg_2445 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                tmp_int_6_reg_592 <= result_fu_1161_p2;
            elsif ((((icmp_ln137_fu_1062_p2 = ap_const_lv1_0) and (icmp_ln135_fu_1057_p2 = ap_const_lv1_0) and (tmp_reg_2445 = ap_const_lv1_1) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((tmp_reg_2445 = ap_const_lv1_0) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
                tmp_int_6_reg_592 <= INPUT_r_TDATA_int_regslice;
            end if; 
        end if;
    end process;

    tmp_int_7_reg_760_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln226_fu_2185_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state234))) then 
                tmp_int_7_reg_760 <= result_2_reg_727;
            elsif (((trunc_ln23_reg_2373 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state161))) then 
                tmp_int_7_reg_760 <= ap_phi_mux_tmp_int_phi_fu_708_p4;
            end if; 
        end if;
    end process;

    tmp_int_reg_704_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_13_reg_2453 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state161))) then 
                tmp_int_reg_704 <= output_fu_1951_p2;
            elsif (((tmp_13_reg_2453 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state96))) then 
                tmp_int_reg_704 <= ap_phi_mux_tmp_int_3_phi_fu_666_p10;
            end if; 
        end if;
    end process;

    wah_buffer_index_fu_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3524_fu_932_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                wah_buffer_index_fu_330 <= ap_const_lv32_0;
            elsif (((icmp_ln226_fu_2185_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state234))) then 
                wah_buffer_index_fu_330 <= wah_buffer_index_1_reg_2783;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state218)) then
                add5_i_reg_2756 <= grp_fu_811_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                add_ln159_reg_2630 <= add_ln159_fu_1262_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state234)) then
                add_ln226_1_reg_2796 <= add_ln226_1_fu_2191_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln173_fu_1295_p2 = ap_const_lv1_0) and (icmp_ln159_fu_1256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                and_ln182_1_reg_2658 <= and_ln182_1_fu_1322_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                compression_buffer_index_1_reg_2614 <= grp_fu_1176_p2;
                    or_ln95_reg_2602(1 downto 0) <= or_ln95_fu_1237_p2(1 downto 0);    or_ln95_reg_2602(31 downto 3) <= or_ln95_fu_1237_p2(31 downto 3);
                sext_ln61_reg_2622 <= sext_ln61_fu_1247_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                compression_buffer_load_reg_2672 <= compression_buffer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                compression_max_threshold_read_reg_2338 <= compression_max_threshold;
                compression_min_threshold_read_reg_2344 <= compression_min_threshold;
                compression_zero_threshold_read_reg_2333 <= compression_zero_threshold;
                control_read_reg_2366 <= control;
                delay_mult_read_reg_2328 <= delay_mult;
                delay_samples_read_reg_2323 <= delay_samples;
                distortion_clip_factor_read_reg_2351 <= distortion_clip_factor;
                distortion_threshold_read_reg_2356 <= distortion_threshold;
                tempo_read_reg_2318 <= tempo;
                trunc_ln23_reg_2373 <= trunc_ln23_fu_855_p1;
                wah_coeffs_read_reg_2313 <= wah_coeffs;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                conv18_i_reg_2473 <= grp_fu_803_p1;
                conv2_i_reg_2468 <= grp_fu_828_p1;
                conv30_i_reg_2478 <= grp_fu_806_p1;
                conv7_i_i_i_reg_2462 <= conv7_i_i_i_fu_1005_p1;
                negative_threshold_reg_2457 <= negative_threshold_fu_1000_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state165)) then
                conv_i2_reg_2736 <= grp_fu_828_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln159_fu_1256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                current_level_reg_2645 <= current_level_fu_1288_p3;
                icmp_ln173_reg_2650 <= icmp_ln173_fu_1295_p2;
                icmp_ln183_reg_2654 <= icmp_ln183_fu_1300_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                current_sample_reg_2527 <= current_sample_fu_1045_p2;
                tmp_dest_V_reg_2522 <= INPUT_r_TDEST_int_regslice;
                tmp_id_V_reg_2517 <= INPUT_r_TID_int_regslice;
                tmp_keep_V_reg_2498 <= INPUT_r_TKEEP_int_regslice;
                tmp_last_V_reg_2513 <= INPUT_r_TLAST_int_regslice;
                tmp_strb_V_reg_2503 <= INPUT_r_TSTRB_int_regslice;
                tmp_user_V_reg_2508 <= INPUT_r_TUSER_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state160)) then
                data_V_3_reg_2720 <= data_V_3_fu_1806_p1;
                val_3_reg_2725 <= val_3_fu_1916_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                dc_reg_2677 <= grp_fu_791_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state152)) then
                delay_buffer_load_reg_2715 <= delay_buffer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state247)) then
                gmem_addr_read_reg_2816 <= gmem_RDATA;
                r_V_46_reg_2811 <= wah_values_buffer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state226)) then
                gmem_addr_reg_2771 <= sext_ln226_fu_2161_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                icmp_ln1049_1_reg_2572 <= icmp_ln1049_1_fu_1099_p2;
                r_V_49_reg_2560 <= r_V_49_fu_1080_p2;
                ret_V_9_cast_reg_2565 <= r_V_49_fu_1080_p2(38 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                icmp_ln1049_reg_2597 <= icmp_ln1049_fu_1204_p2;
                r_V_48_reg_2585 <= r_V_48_fu_1185_p2;
                ret_V_cast_reg_2590 <= r_V_48_fu_1185_p2(38 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_2445 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                icmp_ln135_reg_2542 <= icmp_ln135_fu_1057_p2;
                    or_ln90_reg_2532(2 downto 0) <= or_ln90_fu_1051_p2(2 downto 0);    or_ln90_reg_2532(31 downto 4) <= or_ln90_fu_1051_p2(31 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln135_fu_1057_p2 = ap_const_lv1_0) and (tmp_reg_2445 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                icmp_ln137_reg_2546 <= icmp_ln137_fu_1062_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                lpf_coefficients_load_reg_2662 <= lpf_coefficients_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state225)) then
                mul_ln226_reg_2766 <= mul_ln226_fu_2137_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state233)) then
                    or_ln105_reg_2777(31 downto 1) <= or_ln105_fu_2171_p2(31 downto 1);
                sext_ln73_reg_2788 <= sext_ln73_fu_2181_p1;
                wah_buffer_index_1_reg_2783 <= grp_fu_1988_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln135_fu_1057_p2 = ap_const_lv1_1) and (tmp_reg_2445 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                r_V_21_reg_2555 <= r_V_21_fu_1072_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state248)) then
                r_V_50_reg_2821 <= r_V_50_fu_2231_p2;
                ret_V_12_reg_2826 <= r_V_50_fu_2231_p2(47 downto 32);
                trunc_ln1049_2_reg_2833 <= trunc_ln1049_2_fu_2247_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln137_fu_1062_p2 = ap_const_lv1_1) and (icmp_ln135_fu_1057_p2 = ap_const_lv1_0) and (tmp_reg_2445 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                r_V_reg_2550 <= r_V_fu_1067_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state156) or (ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state67))) then
                reg_831 <= grp_fu_803_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state159) or (ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state70))) then
                reg_838 <= grp_fu_795_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state91))) then
                reg_843 <= grp_fu_799_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state223) or (ap_const_logic_1 = ap_CS_fsm_state213) or (ap_const_logic_1 = ap_CS_fsm_state175) or (ap_const_logic_1 = ap_CS_fsm_state170))) then
                reg_848 <= grp_fu_816_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state249)) then
                result_2_reg_727 <= result_3_fu_2286_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state116)) then
                result_V_19_reg_2700 <= result_V_19_fu_1778_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state224)) then
                result_V_21_reg_2761 <= result_V_21_fu_2126_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state95)) then
                result_V_reg_2687 <= result_V_fu_1624_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3524_fu_932_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_11_reg_2449 <= control_read_reg_2366(2 downto 2);
                tmp_13_reg_2453 <= control_read_reg_2366(1 downto 1);
                tmp_reg_2445 <= control_read_reg_2366(3 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state208)) then
                tmp_2_reg_2751 <= grp_sin_or_cos_double_s_fu_774_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state206)) then
                x_assign_reg_2746 <= grp_fu_823_p2;
            end if;
        end if;
    end process;
    or_ln90_reg_2532(3) <= '1';
    or_ln95_reg_2602(2) <= '1';
    or_ln105_reg_2777(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state227, ap_CS_fsm_state247, ap_CS_fsm_state9, ap_CS_fsm_state250, tmp_last_V_reg_2513, ap_CS_fsm_state251, ap_CS_fsm_state252, trunc_ln23_reg_2373, tmp_reg_2445, ap_CS_fsm_state4, exitcond3524_fu_932_p2, tmp_11_reg_2449, tmp_13_reg_2453, icmp_ln135_fu_1057_p2, icmp_ln137_fu_1062_p2, ap_CS_fsm_state11, ap_CS_fsm_state48, icmp_ln159_fu_1256_p2, icmp_ln173_fu_1295_p2, icmp_ln183_fu_1300_p2, and_ln182_1_fu_1322_p2, ap_CS_fsm_state96, ap_CS_fsm_state161, ap_CS_fsm_state208, ap_CS_fsm_state234, icmp_ln226_fu_2185_p2, grp_sin_or_cos_double_s_fu_774_ap_done, gmem_ARREADY, gmem_RVALID, ap_CS_fsm_state2, exitcond3588_fu_872_p2, ap_CS_fsm_state3, exitcond3535_fu_902_p2, ap_block_state250_io, regslice_both_OUTPUT_r_V_data_V_U_apdone_blk, INPUT_r_TVALID_int_regslice, OUTPUT_r_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3588_fu_872_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3535_fu_902_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond3524_fu_932_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln137_fu_1062_p2 = ap_const_lv1_1) and (icmp_ln135_fu_1057_p2 = ap_const_lv1_0) and (tmp_reg_2445 = ap_const_lv1_1) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif (((icmp_ln135_fu_1057_p2 = ap_const_lv1_1) and (tmp_reg_2445 = ap_const_lv1_1) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif (((ap_const_logic_1 = INPUT_r_TVALID_int_regslice) and (ap_const_logic_1 = ap_CS_fsm_state9) and ((tmp_reg_2445 = ap_const_lv1_0) or ((icmp_ln137_fu_1062_p2 = ap_const_lv1_0) and (icmp_ln135_fu_1057_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((tmp_11_reg_2449 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state96;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                if (((icmp_ln183_fu_1300_p2 = ap_const_lv1_1) and (icmp_ln173_fu_1295_p2 = ap_const_lv1_1) and (icmp_ln159_fu_1256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state97;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state48) and (((icmp_ln173_fu_1295_p2 = ap_const_lv1_0) and (icmp_ln159_fu_1256_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln182_1_fu_1322_p2)) or ((icmp_ln183_fu_1300_p2 = ap_const_lv1_0) and (icmp_ln173_fu_1295_p2 = ap_const_lv1_1) and (icmp_ln159_fu_1256_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state96;
                elsif (((icmp_ln173_fu_1295_p2 = ap_const_lv1_0) and (icmp_ln159_fu_1256_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln182_1_fu_1322_p2) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                if (((tmp_13_reg_2453 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state96))) then
                    ap_NS_fsm <= ap_ST_fsm_state161;
                else
                    ap_NS_fsm <= ap_ST_fsm_state117;
                end if;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state133;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_state134;
            when ap_ST_fsm_state134 => 
                ap_NS_fsm <= ap_ST_fsm_state135;
            when ap_ST_fsm_state135 => 
                ap_NS_fsm <= ap_ST_fsm_state136;
            when ap_ST_fsm_state136 => 
                ap_NS_fsm <= ap_ST_fsm_state137;
            when ap_ST_fsm_state137 => 
                ap_NS_fsm <= ap_ST_fsm_state138;
            when ap_ST_fsm_state138 => 
                ap_NS_fsm <= ap_ST_fsm_state139;
            when ap_ST_fsm_state139 => 
                ap_NS_fsm <= ap_ST_fsm_state140;
            when ap_ST_fsm_state140 => 
                ap_NS_fsm <= ap_ST_fsm_state141;
            when ap_ST_fsm_state141 => 
                ap_NS_fsm <= ap_ST_fsm_state142;
            when ap_ST_fsm_state142 => 
                ap_NS_fsm <= ap_ST_fsm_state143;
            when ap_ST_fsm_state143 => 
                ap_NS_fsm <= ap_ST_fsm_state144;
            when ap_ST_fsm_state144 => 
                ap_NS_fsm <= ap_ST_fsm_state145;
            when ap_ST_fsm_state145 => 
                ap_NS_fsm <= ap_ST_fsm_state146;
            when ap_ST_fsm_state146 => 
                ap_NS_fsm <= ap_ST_fsm_state147;
            when ap_ST_fsm_state147 => 
                ap_NS_fsm <= ap_ST_fsm_state148;
            when ap_ST_fsm_state148 => 
                ap_NS_fsm <= ap_ST_fsm_state149;
            when ap_ST_fsm_state149 => 
                ap_NS_fsm <= ap_ST_fsm_state150;
            when ap_ST_fsm_state150 => 
                ap_NS_fsm <= ap_ST_fsm_state151;
            when ap_ST_fsm_state151 => 
                ap_NS_fsm <= ap_ST_fsm_state152;
            when ap_ST_fsm_state152 => 
                ap_NS_fsm <= ap_ST_fsm_state153;
            when ap_ST_fsm_state153 => 
                ap_NS_fsm <= ap_ST_fsm_state154;
            when ap_ST_fsm_state154 => 
                ap_NS_fsm <= ap_ST_fsm_state155;
            when ap_ST_fsm_state155 => 
                ap_NS_fsm <= ap_ST_fsm_state156;
            when ap_ST_fsm_state156 => 
                ap_NS_fsm <= ap_ST_fsm_state157;
            when ap_ST_fsm_state157 => 
                ap_NS_fsm <= ap_ST_fsm_state158;
            when ap_ST_fsm_state158 => 
                ap_NS_fsm <= ap_ST_fsm_state159;
            when ap_ST_fsm_state159 => 
                ap_NS_fsm <= ap_ST_fsm_state160;
            when ap_ST_fsm_state160 => 
                ap_NS_fsm <= ap_ST_fsm_state161;
            when ap_ST_fsm_state161 => 
                if (((trunc_ln23_reg_2373 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state161))) then
                    ap_NS_fsm <= ap_ST_fsm_state250;
                else
                    ap_NS_fsm <= ap_ST_fsm_state162;
                end if;
            when ap_ST_fsm_state162 => 
                ap_NS_fsm <= ap_ST_fsm_state163;
            when ap_ST_fsm_state163 => 
                ap_NS_fsm <= ap_ST_fsm_state164;
            when ap_ST_fsm_state164 => 
                ap_NS_fsm <= ap_ST_fsm_state165;
            when ap_ST_fsm_state165 => 
                ap_NS_fsm <= ap_ST_fsm_state166;
            when ap_ST_fsm_state166 => 
                ap_NS_fsm <= ap_ST_fsm_state167;
            when ap_ST_fsm_state167 => 
                ap_NS_fsm <= ap_ST_fsm_state168;
            when ap_ST_fsm_state168 => 
                ap_NS_fsm <= ap_ST_fsm_state169;
            when ap_ST_fsm_state169 => 
                ap_NS_fsm <= ap_ST_fsm_state170;
            when ap_ST_fsm_state170 => 
                ap_NS_fsm <= ap_ST_fsm_state171;
            when ap_ST_fsm_state171 => 
                ap_NS_fsm <= ap_ST_fsm_state172;
            when ap_ST_fsm_state172 => 
                ap_NS_fsm <= ap_ST_fsm_state173;
            when ap_ST_fsm_state173 => 
                ap_NS_fsm <= ap_ST_fsm_state174;
            when ap_ST_fsm_state174 => 
                ap_NS_fsm <= ap_ST_fsm_state175;
            when ap_ST_fsm_state175 => 
                ap_NS_fsm <= ap_ST_fsm_state176;
            when ap_ST_fsm_state176 => 
                ap_NS_fsm <= ap_ST_fsm_state177;
            when ap_ST_fsm_state177 => 
                ap_NS_fsm <= ap_ST_fsm_state178;
            when ap_ST_fsm_state178 => 
                ap_NS_fsm <= ap_ST_fsm_state179;
            when ap_ST_fsm_state179 => 
                ap_NS_fsm <= ap_ST_fsm_state180;
            when ap_ST_fsm_state180 => 
                ap_NS_fsm <= ap_ST_fsm_state181;
            when ap_ST_fsm_state181 => 
                ap_NS_fsm <= ap_ST_fsm_state182;
            when ap_ST_fsm_state182 => 
                ap_NS_fsm <= ap_ST_fsm_state183;
            when ap_ST_fsm_state183 => 
                ap_NS_fsm <= ap_ST_fsm_state184;
            when ap_ST_fsm_state184 => 
                ap_NS_fsm <= ap_ST_fsm_state185;
            when ap_ST_fsm_state185 => 
                ap_NS_fsm <= ap_ST_fsm_state186;
            when ap_ST_fsm_state186 => 
                ap_NS_fsm <= ap_ST_fsm_state187;
            when ap_ST_fsm_state187 => 
                ap_NS_fsm <= ap_ST_fsm_state188;
            when ap_ST_fsm_state188 => 
                ap_NS_fsm <= ap_ST_fsm_state189;
            when ap_ST_fsm_state189 => 
                ap_NS_fsm <= ap_ST_fsm_state190;
            when ap_ST_fsm_state190 => 
                ap_NS_fsm <= ap_ST_fsm_state191;
            when ap_ST_fsm_state191 => 
                ap_NS_fsm <= ap_ST_fsm_state192;
            when ap_ST_fsm_state192 => 
                ap_NS_fsm <= ap_ST_fsm_state193;
            when ap_ST_fsm_state193 => 
                ap_NS_fsm <= ap_ST_fsm_state194;
            when ap_ST_fsm_state194 => 
                ap_NS_fsm <= ap_ST_fsm_state195;
            when ap_ST_fsm_state195 => 
                ap_NS_fsm <= ap_ST_fsm_state196;
            when ap_ST_fsm_state196 => 
                ap_NS_fsm <= ap_ST_fsm_state197;
            when ap_ST_fsm_state197 => 
                ap_NS_fsm <= ap_ST_fsm_state198;
            when ap_ST_fsm_state198 => 
                ap_NS_fsm <= ap_ST_fsm_state199;
            when ap_ST_fsm_state199 => 
                ap_NS_fsm <= ap_ST_fsm_state200;
            when ap_ST_fsm_state200 => 
                ap_NS_fsm <= ap_ST_fsm_state201;
            when ap_ST_fsm_state201 => 
                ap_NS_fsm <= ap_ST_fsm_state202;
            when ap_ST_fsm_state202 => 
                ap_NS_fsm <= ap_ST_fsm_state203;
            when ap_ST_fsm_state203 => 
                ap_NS_fsm <= ap_ST_fsm_state204;
            when ap_ST_fsm_state204 => 
                ap_NS_fsm <= ap_ST_fsm_state205;
            when ap_ST_fsm_state205 => 
                ap_NS_fsm <= ap_ST_fsm_state206;
            when ap_ST_fsm_state206 => 
                ap_NS_fsm <= ap_ST_fsm_state207;
            when ap_ST_fsm_state207 => 
                ap_NS_fsm <= ap_ST_fsm_state208;
            when ap_ST_fsm_state208 => 
                if (((grp_sin_or_cos_double_s_fu_774_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state208))) then
                    ap_NS_fsm <= ap_ST_fsm_state209;
                else
                    ap_NS_fsm <= ap_ST_fsm_state208;
                end if;
            when ap_ST_fsm_state209 => 
                ap_NS_fsm <= ap_ST_fsm_state210;
            when ap_ST_fsm_state210 => 
                ap_NS_fsm <= ap_ST_fsm_state211;
            when ap_ST_fsm_state211 => 
                ap_NS_fsm <= ap_ST_fsm_state212;
            when ap_ST_fsm_state212 => 
                ap_NS_fsm <= ap_ST_fsm_state213;
            when ap_ST_fsm_state213 => 
                ap_NS_fsm <= ap_ST_fsm_state214;
            when ap_ST_fsm_state214 => 
                ap_NS_fsm <= ap_ST_fsm_state215;
            when ap_ST_fsm_state215 => 
                ap_NS_fsm <= ap_ST_fsm_state216;
            when ap_ST_fsm_state216 => 
                ap_NS_fsm <= ap_ST_fsm_state217;
            when ap_ST_fsm_state217 => 
                ap_NS_fsm <= ap_ST_fsm_state218;
            when ap_ST_fsm_state218 => 
                ap_NS_fsm <= ap_ST_fsm_state219;
            when ap_ST_fsm_state219 => 
                ap_NS_fsm <= ap_ST_fsm_state220;
            when ap_ST_fsm_state220 => 
                ap_NS_fsm <= ap_ST_fsm_state221;
            when ap_ST_fsm_state221 => 
                ap_NS_fsm <= ap_ST_fsm_state222;
            when ap_ST_fsm_state222 => 
                ap_NS_fsm <= ap_ST_fsm_state223;
            when ap_ST_fsm_state223 => 
                ap_NS_fsm <= ap_ST_fsm_state224;
            when ap_ST_fsm_state224 => 
                ap_NS_fsm <= ap_ST_fsm_state225;
            when ap_ST_fsm_state225 => 
                ap_NS_fsm <= ap_ST_fsm_state226;
            when ap_ST_fsm_state226 => 
                ap_NS_fsm <= ap_ST_fsm_state227;
            when ap_ST_fsm_state227 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state227))) then
                    ap_NS_fsm <= ap_ST_fsm_state228;
                else
                    ap_NS_fsm <= ap_ST_fsm_state227;
                end if;
            when ap_ST_fsm_state228 => 
                ap_NS_fsm <= ap_ST_fsm_state229;
            when ap_ST_fsm_state229 => 
                ap_NS_fsm <= ap_ST_fsm_state230;
            when ap_ST_fsm_state230 => 
                ap_NS_fsm <= ap_ST_fsm_state231;
            when ap_ST_fsm_state231 => 
                ap_NS_fsm <= ap_ST_fsm_state232;
            when ap_ST_fsm_state232 => 
                ap_NS_fsm <= ap_ST_fsm_state233;
            when ap_ST_fsm_state233 => 
                ap_NS_fsm <= ap_ST_fsm_state234;
            when ap_ST_fsm_state234 => 
                if (((icmp_ln226_fu_2185_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state234))) then
                    ap_NS_fsm <= ap_ST_fsm_state250;
                else
                    ap_NS_fsm <= ap_ST_fsm_state235;
                end if;
            when ap_ST_fsm_state235 => 
                ap_NS_fsm <= ap_ST_fsm_state236;
            when ap_ST_fsm_state236 => 
                ap_NS_fsm <= ap_ST_fsm_state237;
            when ap_ST_fsm_state237 => 
                ap_NS_fsm <= ap_ST_fsm_state238;
            when ap_ST_fsm_state238 => 
                ap_NS_fsm <= ap_ST_fsm_state239;
            when ap_ST_fsm_state239 => 
                ap_NS_fsm <= ap_ST_fsm_state240;
            when ap_ST_fsm_state240 => 
                ap_NS_fsm <= ap_ST_fsm_state241;
            when ap_ST_fsm_state241 => 
                ap_NS_fsm <= ap_ST_fsm_state242;
            when ap_ST_fsm_state242 => 
                ap_NS_fsm <= ap_ST_fsm_state243;
            when ap_ST_fsm_state243 => 
                ap_NS_fsm <= ap_ST_fsm_state244;
            when ap_ST_fsm_state244 => 
                ap_NS_fsm <= ap_ST_fsm_state245;
            when ap_ST_fsm_state245 => 
                ap_NS_fsm <= ap_ST_fsm_state246;
            when ap_ST_fsm_state246 => 
                ap_NS_fsm <= ap_ST_fsm_state247;
            when ap_ST_fsm_state247 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state247))) then
                    ap_NS_fsm <= ap_ST_fsm_state248;
                else
                    ap_NS_fsm <= ap_ST_fsm_state247;
                end if;
            when ap_ST_fsm_state248 => 
                ap_NS_fsm <= ap_ST_fsm_state249;
            when ap_ST_fsm_state249 => 
                ap_NS_fsm <= ap_ST_fsm_state234;
            when ap_ST_fsm_state250 => 
                if ((not(((ap_const_boolean_1 = ap_block_state250_io) or ((tmp_last_V_reg_2513 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_2513 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) and (tmp_last_V_reg_2513 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state250))) then
                    ap_NS_fsm <= ap_ST_fsm_state252;
                elsif ((not(((ap_const_boolean_1 = ap_block_state250_io) or ((tmp_last_V_reg_2513 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_2513 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) and (tmp_last_V_reg_2513 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state250))) then
                    ap_NS_fsm <= ap_ST_fsm_state251;
                else
                    ap_NS_fsm <= ap_ST_fsm_state250;
                end if;
            when ap_ST_fsm_state251 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state251) and (ap_const_logic_1 = OUTPUT_r_TREADY_int_regslice))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state251;
                end if;
            when ap_ST_fsm_state252 => 
                if ((not(((regslice_both_OUTPUT_r_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice))) and (ap_const_logic_1 = ap_CS_fsm_state252))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state252;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    INPUT_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state9, INPUT_r_TVALID_int_regslice)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            INPUT_r_TDATA_blk_n <= INPUT_r_TVALID_int_regslice;
        else 
            INPUT_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    INPUT_r_TREADY <= regslice_both_INPUT_r_V_data_V_U_ack_in;

    INPUT_r_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state9, INPUT_r_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = INPUT_r_TVALID_int_regslice) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            INPUT_r_TREADY_int_regslice <= ap_const_logic_1;
        else 
            INPUT_r_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state250, tmp_last_V_reg_2513, ap_CS_fsm_state251, ap_CS_fsm_state252, OUTPUT_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state252) or (ap_const_logic_1 = ap_CS_fsm_state251) or ((tmp_last_V_reg_2513 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state250)) or ((tmp_last_V_reg_2513 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state250)))) then 
            OUTPUT_r_TDATA_blk_n <= OUTPUT_r_TREADY_int_regslice;
        else 
            OUTPUT_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    OUTPUT_r_TLAST_int_regslice_assign_proc : process(tmp_last_V_reg_2513, ap_condition_3887)
    begin
        if ((ap_const_boolean_1 = ap_condition_3887)) then
            if ((tmp_last_V_reg_2513 = ap_const_lv1_1)) then 
                OUTPUT_r_TLAST_int_regslice <= ap_const_lv1_1;
            elsif ((tmp_last_V_reg_2513 = ap_const_lv1_0)) then 
                OUTPUT_r_TLAST_int_regslice <= ap_const_lv1_0;
            else 
                OUTPUT_r_TLAST_int_regslice <= "X";
            end if;
        else 
            OUTPUT_r_TLAST_int_regslice <= "X";
        end if; 
    end process;

    OUTPUT_r_TVALID <= regslice_both_OUTPUT_r_V_data_V_U_vld_out;

    OUTPUT_r_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state250, tmp_last_V_reg_2513, ap_block_state250_io, OUTPUT_r_TREADY_int_regslice)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state250_io) or ((tmp_last_V_reg_2513 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_2513 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) and (tmp_last_V_reg_2513 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state250)) or (not(((ap_const_boolean_1 = ap_block_state250_io) or ((tmp_last_V_reg_2513 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_2513 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) and (tmp_last_V_reg_2513 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state250)))) then 
            OUTPUT_r_TVALID_int_regslice <= ap_const_logic_1;
        else 
            OUTPUT_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    abs_in_1_fu_1224_p3 <= 
        sub_ln151_fu_1218_p2 when (tmp_17_fu_1210_p3(0) = '1') else 
        tmp_int_6_reg_592;
    add_ln159_fu_1262_p2 <= std_logic_vector(unsigned(i_reg_606) + unsigned(ap_const_lv9_1));
    add_ln226_1_fu_2191_p2 <= std_logic_vector(unsigned(i_7_reg_716) + unsigned(ap_const_lv7_1));
    add_ln226_fu_2146_p2 <= std_logic_vector(signed(sext_ln226_2_fu_2143_p1) + signed(wah_coeffs_read_reg_2313));
    add_ln346_1_fu_1690_p2 <= std_logic_vector(unsigned(zext_ln346_1_fu_1686_p1) + unsigned(ap_const_lv9_181));
    add_ln346_2_fu_1536_p2 <= std_logic_vector(unsigned(zext_ln346_2_fu_1532_p1) + unsigned(ap_const_lv9_181));
    add_ln346_3_fu_1842_p2 <= std_logic_vector(unsigned(zext_ln346_3_fu_1838_p1) + unsigned(ap_const_lv9_181));
    add_ln346_fu_1396_p2 <= std_logic_vector(unsigned(zext_ln346_fu_1392_p1) + unsigned(ap_const_lv9_181));
    add_ln515_fu_2038_p2 <= std_logic_vector(unsigned(zext_ln515_fu_2034_p1) + unsigned(ap_const_lv12_C01));
    and_ln182_1_fu_1322_p2 <= (icmp_ln182_fu_1306_p2 and and_ln182_fu_1316_p2);
    and_ln182_fu_1316_p2 <= (icmp_ln183_fu_1300_p2 and icmp_ln182_1_fu_1311_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state109 <= ap_CS_fsm(108);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state112 <= ap_CS_fsm(111);
    ap_CS_fsm_state113 <= ap_CS_fsm(112);
    ap_CS_fsm_state115 <= ap_CS_fsm(114);
    ap_CS_fsm_state116 <= ap_CS_fsm(115);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state126 <= ap_CS_fsm(125);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state151 <= ap_CS_fsm(150);
    ap_CS_fsm_state152 <= ap_CS_fsm(151);
    ap_CS_fsm_state153 <= ap_CS_fsm(152);
    ap_CS_fsm_state156 <= ap_CS_fsm(155);
    ap_CS_fsm_state157 <= ap_CS_fsm(156);
    ap_CS_fsm_state159 <= ap_CS_fsm(158);
    ap_CS_fsm_state160 <= ap_CS_fsm(159);
    ap_CS_fsm_state161 <= ap_CS_fsm(160);
    ap_CS_fsm_state165 <= ap_CS_fsm(164);
    ap_CS_fsm_state166 <= ap_CS_fsm(165);
    ap_CS_fsm_state170 <= ap_CS_fsm(169);
    ap_CS_fsm_state171 <= ap_CS_fsm(170);
    ap_CS_fsm_state175 <= ap_CS_fsm(174);
    ap_CS_fsm_state176 <= ap_CS_fsm(175);
    ap_CS_fsm_state198 <= ap_CS_fsm(197);
    ap_CS_fsm_state199 <= ap_CS_fsm(198);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state200 <= ap_CS_fsm(199);
    ap_CS_fsm_state201 <= ap_CS_fsm(200);
    ap_CS_fsm_state202 <= ap_CS_fsm(201);
    ap_CS_fsm_state203 <= ap_CS_fsm(202);
    ap_CS_fsm_state204 <= ap_CS_fsm(203);
    ap_CS_fsm_state205 <= ap_CS_fsm(204);
    ap_CS_fsm_state206 <= ap_CS_fsm(205);
    ap_CS_fsm_state207 <= ap_CS_fsm(206);
    ap_CS_fsm_state208 <= ap_CS_fsm(207);
    ap_CS_fsm_state209 <= ap_CS_fsm(208);
    ap_CS_fsm_state210 <= ap_CS_fsm(209);
    ap_CS_fsm_state211 <= ap_CS_fsm(210);
    ap_CS_fsm_state212 <= ap_CS_fsm(211);
    ap_CS_fsm_state213 <= ap_CS_fsm(212);
    ap_CS_fsm_state214 <= ap_CS_fsm(213);
    ap_CS_fsm_state215 <= ap_CS_fsm(214);
    ap_CS_fsm_state216 <= ap_CS_fsm(215);
    ap_CS_fsm_state217 <= ap_CS_fsm(216);
    ap_CS_fsm_state218 <= ap_CS_fsm(217);
    ap_CS_fsm_state219 <= ap_CS_fsm(218);
    ap_CS_fsm_state220 <= ap_CS_fsm(219);
    ap_CS_fsm_state221 <= ap_CS_fsm(220);
    ap_CS_fsm_state222 <= ap_CS_fsm(221);
    ap_CS_fsm_state223 <= ap_CS_fsm(222);
    ap_CS_fsm_state224 <= ap_CS_fsm(223);
    ap_CS_fsm_state225 <= ap_CS_fsm(224);
    ap_CS_fsm_state226 <= ap_CS_fsm(225);
    ap_CS_fsm_state227 <= ap_CS_fsm(226);
    ap_CS_fsm_state228 <= ap_CS_fsm(227);
    ap_CS_fsm_state229 <= ap_CS_fsm(228);
    ap_CS_fsm_state230 <= ap_CS_fsm(229);
    ap_CS_fsm_state231 <= ap_CS_fsm(230);
    ap_CS_fsm_state232 <= ap_CS_fsm(231);
    ap_CS_fsm_state233 <= ap_CS_fsm(232);
    ap_CS_fsm_state234 <= ap_CS_fsm(233);
    ap_CS_fsm_state246 <= ap_CS_fsm(245);
    ap_CS_fsm_state247 <= ap_CS_fsm(246);
    ap_CS_fsm_state248 <= ap_CS_fsm(247);
    ap_CS_fsm_state249 <= ap_CS_fsm(248);
    ap_CS_fsm_state250 <= ap_CS_fsm(249);
    ap_CS_fsm_state251 <= ap_CS_fsm(250);
    ap_CS_fsm_state252 <= ap_CS_fsm(251);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_ST_fsm_state100_blk <= ap_const_logic_0;
    ap_ST_fsm_state101_blk <= ap_const_logic_0;
    ap_ST_fsm_state102_blk <= ap_const_logic_0;
    ap_ST_fsm_state103_blk <= ap_const_logic_0;
    ap_ST_fsm_state104_blk <= ap_const_logic_0;
    ap_ST_fsm_state105_blk <= ap_const_logic_0;
    ap_ST_fsm_state106_blk <= ap_const_logic_0;
    ap_ST_fsm_state107_blk <= ap_const_logic_0;
    ap_ST_fsm_state108_blk <= ap_const_logic_0;
    ap_ST_fsm_state109_blk <= ap_const_logic_0;
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state110_blk <= ap_const_logic_0;
    ap_ST_fsm_state111_blk <= ap_const_logic_0;
    ap_ST_fsm_state112_blk <= ap_const_logic_0;
    ap_ST_fsm_state113_blk <= ap_const_logic_0;
    ap_ST_fsm_state114_blk <= ap_const_logic_0;
    ap_ST_fsm_state115_blk <= ap_const_logic_0;
    ap_ST_fsm_state116_blk <= ap_const_logic_0;
    ap_ST_fsm_state117_blk <= ap_const_logic_0;
    ap_ST_fsm_state118_blk <= ap_const_logic_0;
    ap_ST_fsm_state119_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state120_blk <= ap_const_logic_0;
    ap_ST_fsm_state121_blk <= ap_const_logic_0;
    ap_ST_fsm_state122_blk <= ap_const_logic_0;
    ap_ST_fsm_state123_blk <= ap_const_logic_0;
    ap_ST_fsm_state124_blk <= ap_const_logic_0;
    ap_ST_fsm_state125_blk <= ap_const_logic_0;
    ap_ST_fsm_state126_blk <= ap_const_logic_0;
    ap_ST_fsm_state127_blk <= ap_const_logic_0;
    ap_ST_fsm_state128_blk <= ap_const_logic_0;
    ap_ST_fsm_state129_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state130_blk <= ap_const_logic_0;
    ap_ST_fsm_state131_blk <= ap_const_logic_0;
    ap_ST_fsm_state132_blk <= ap_const_logic_0;
    ap_ST_fsm_state133_blk <= ap_const_logic_0;
    ap_ST_fsm_state134_blk <= ap_const_logic_0;
    ap_ST_fsm_state135_blk <= ap_const_logic_0;
    ap_ST_fsm_state136_blk <= ap_const_logic_0;
    ap_ST_fsm_state137_blk <= ap_const_logic_0;
    ap_ST_fsm_state138_blk <= ap_const_logic_0;
    ap_ST_fsm_state139_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state140_blk <= ap_const_logic_0;
    ap_ST_fsm_state141_blk <= ap_const_logic_0;
    ap_ST_fsm_state142_blk <= ap_const_logic_0;
    ap_ST_fsm_state143_blk <= ap_const_logic_0;
    ap_ST_fsm_state144_blk <= ap_const_logic_0;
    ap_ST_fsm_state145_blk <= ap_const_logic_0;
    ap_ST_fsm_state146_blk <= ap_const_logic_0;
    ap_ST_fsm_state147_blk <= ap_const_logic_0;
    ap_ST_fsm_state148_blk <= ap_const_logic_0;
    ap_ST_fsm_state149_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state150_blk <= ap_const_logic_0;
    ap_ST_fsm_state151_blk <= ap_const_logic_0;
    ap_ST_fsm_state152_blk <= ap_const_logic_0;
    ap_ST_fsm_state153_blk <= ap_const_logic_0;
    ap_ST_fsm_state154_blk <= ap_const_logic_0;
    ap_ST_fsm_state155_blk <= ap_const_logic_0;
    ap_ST_fsm_state156_blk <= ap_const_logic_0;
    ap_ST_fsm_state157_blk <= ap_const_logic_0;
    ap_ST_fsm_state158_blk <= ap_const_logic_0;
    ap_ST_fsm_state159_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state160_blk <= ap_const_logic_0;
    ap_ST_fsm_state161_blk <= ap_const_logic_0;
    ap_ST_fsm_state162_blk <= ap_const_logic_0;
    ap_ST_fsm_state163_blk <= ap_const_logic_0;
    ap_ST_fsm_state164_blk <= ap_const_logic_0;
    ap_ST_fsm_state165_blk <= ap_const_logic_0;
    ap_ST_fsm_state166_blk <= ap_const_logic_0;
    ap_ST_fsm_state167_blk <= ap_const_logic_0;
    ap_ST_fsm_state168_blk <= ap_const_logic_0;
    ap_ST_fsm_state169_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state170_blk <= ap_const_logic_0;
    ap_ST_fsm_state171_blk <= ap_const_logic_0;
    ap_ST_fsm_state172_blk <= ap_const_logic_0;
    ap_ST_fsm_state173_blk <= ap_const_logic_0;
    ap_ST_fsm_state174_blk <= ap_const_logic_0;
    ap_ST_fsm_state175_blk <= ap_const_logic_0;
    ap_ST_fsm_state176_blk <= ap_const_logic_0;
    ap_ST_fsm_state177_blk <= ap_const_logic_0;
    ap_ST_fsm_state178_blk <= ap_const_logic_0;
    ap_ST_fsm_state179_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state180_blk <= ap_const_logic_0;
    ap_ST_fsm_state181_blk <= ap_const_logic_0;
    ap_ST_fsm_state182_blk <= ap_const_logic_0;
    ap_ST_fsm_state183_blk <= ap_const_logic_0;
    ap_ST_fsm_state184_blk <= ap_const_logic_0;
    ap_ST_fsm_state185_blk <= ap_const_logic_0;
    ap_ST_fsm_state186_blk <= ap_const_logic_0;
    ap_ST_fsm_state187_blk <= ap_const_logic_0;
    ap_ST_fsm_state188_blk <= ap_const_logic_0;
    ap_ST_fsm_state189_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state190_blk <= ap_const_logic_0;
    ap_ST_fsm_state191_blk <= ap_const_logic_0;
    ap_ST_fsm_state192_blk <= ap_const_logic_0;
    ap_ST_fsm_state193_blk <= ap_const_logic_0;
    ap_ST_fsm_state194_blk <= ap_const_logic_0;
    ap_ST_fsm_state195_blk <= ap_const_logic_0;
    ap_ST_fsm_state196_blk <= ap_const_logic_0;
    ap_ST_fsm_state197_blk <= ap_const_logic_0;
    ap_ST_fsm_state198_blk <= ap_const_logic_0;
    ap_ST_fsm_state199_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;
    ap_ST_fsm_state1_blk <= ap_const_logic_0;
    ap_ST_fsm_state200_blk <= ap_const_logic_0;
    ap_ST_fsm_state201_blk <= ap_const_logic_0;
    ap_ST_fsm_state202_blk <= ap_const_logic_0;
    ap_ST_fsm_state203_blk <= ap_const_logic_0;
    ap_ST_fsm_state204_blk <= ap_const_logic_0;
    ap_ST_fsm_state205_blk <= ap_const_logic_0;
    ap_ST_fsm_state206_blk <= ap_const_logic_0;
    ap_ST_fsm_state207_blk <= ap_const_logic_0;

    ap_ST_fsm_state208_blk_assign_proc : process(grp_sin_or_cos_double_s_fu_774_ap_done)
    begin
        if ((grp_sin_or_cos_double_s_fu_774_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state208_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state208_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state209_blk <= ap_const_logic_0;
    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state210_blk <= ap_const_logic_0;
    ap_ST_fsm_state211_blk <= ap_const_logic_0;
    ap_ST_fsm_state212_blk <= ap_const_logic_0;
    ap_ST_fsm_state213_blk <= ap_const_logic_0;
    ap_ST_fsm_state214_blk <= ap_const_logic_0;
    ap_ST_fsm_state215_blk <= ap_const_logic_0;
    ap_ST_fsm_state216_blk <= ap_const_logic_0;
    ap_ST_fsm_state217_blk <= ap_const_logic_0;
    ap_ST_fsm_state218_blk <= ap_const_logic_0;
    ap_ST_fsm_state219_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state220_blk <= ap_const_logic_0;
    ap_ST_fsm_state221_blk <= ap_const_logic_0;
    ap_ST_fsm_state222_blk <= ap_const_logic_0;
    ap_ST_fsm_state223_blk <= ap_const_logic_0;
    ap_ST_fsm_state224_blk <= ap_const_logic_0;
    ap_ST_fsm_state225_blk <= ap_const_logic_0;
    ap_ST_fsm_state226_blk <= ap_const_logic_0;

    ap_ST_fsm_state227_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state227_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state227_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state228_blk <= ap_const_logic_0;
    ap_ST_fsm_state229_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state230_blk <= ap_const_logic_0;
    ap_ST_fsm_state231_blk <= ap_const_logic_0;
    ap_ST_fsm_state232_blk <= ap_const_logic_0;
    ap_ST_fsm_state233_blk <= ap_const_logic_0;
    ap_ST_fsm_state234_blk <= ap_const_logic_0;
    ap_ST_fsm_state235_blk <= ap_const_logic_0;
    ap_ST_fsm_state236_blk <= ap_const_logic_0;
    ap_ST_fsm_state237_blk <= ap_const_logic_0;
    ap_ST_fsm_state238_blk <= ap_const_logic_0;
    ap_ST_fsm_state239_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state240_blk <= ap_const_logic_0;
    ap_ST_fsm_state241_blk <= ap_const_logic_0;
    ap_ST_fsm_state242_blk <= ap_const_logic_0;
    ap_ST_fsm_state243_blk <= ap_const_logic_0;
    ap_ST_fsm_state244_blk <= ap_const_logic_0;
    ap_ST_fsm_state245_blk <= ap_const_logic_0;
    ap_ST_fsm_state246_blk <= ap_const_logic_0;

    ap_ST_fsm_state247_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state247_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state247_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state248_blk <= ap_const_logic_0;
    ap_ST_fsm_state249_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;

    ap_ST_fsm_state250_blk_assign_proc : process(tmp_last_V_reg_2513, ap_block_state250_io, OUTPUT_r_TREADY_int_regslice)
    begin
        if (((ap_const_boolean_1 = ap_block_state250_io) or ((tmp_last_V_reg_2513 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_2513 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) then 
            ap_ST_fsm_state250_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state250_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state251_blk_assign_proc : process(OUTPUT_r_TREADY_int_regslice)
    begin
        if ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) then 
            ap_ST_fsm_state251_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state251_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state252_blk_assign_proc : process(regslice_both_OUTPUT_r_V_data_V_U_apdone_blk, OUTPUT_r_TREADY_int_regslice)
    begin
        if (((regslice_both_OUTPUT_r_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice))) then 
            ap_ST_fsm_state252_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state252_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;
    ap_ST_fsm_state76_blk <= ap_const_logic_0;
    ap_ST_fsm_state77_blk <= ap_const_logic_0;
    ap_ST_fsm_state78_blk <= ap_const_logic_0;
    ap_ST_fsm_state79_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state80_blk <= ap_const_logic_0;
    ap_ST_fsm_state81_blk <= ap_const_logic_0;
    ap_ST_fsm_state82_blk <= ap_const_logic_0;
    ap_ST_fsm_state83_blk <= ap_const_logic_0;
    ap_ST_fsm_state84_blk <= ap_const_logic_0;
    ap_ST_fsm_state85_blk <= ap_const_logic_0;
    ap_ST_fsm_state86_blk <= ap_const_logic_0;
    ap_ST_fsm_state87_blk <= ap_const_logic_0;
    ap_ST_fsm_state88_blk <= ap_const_logic_0;
    ap_ST_fsm_state89_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state90_blk <= ap_const_logic_0;
    ap_ST_fsm_state91_blk <= ap_const_logic_0;
    ap_ST_fsm_state92_blk <= ap_const_logic_0;
    ap_ST_fsm_state93_blk <= ap_const_logic_0;
    ap_ST_fsm_state94_blk <= ap_const_logic_0;
    ap_ST_fsm_state95_blk <= ap_const_logic_0;
    ap_ST_fsm_state96_blk <= ap_const_logic_0;
    ap_ST_fsm_state97_blk <= ap_const_logic_0;
    ap_ST_fsm_state98_blk <= ap_const_logic_0;
    ap_ST_fsm_state99_blk <= ap_const_logic_0;

    ap_ST_fsm_state9_blk_assign_proc : process(INPUT_r_TVALID_int_regslice)
    begin
        if ((ap_const_logic_0 = INPUT_r_TVALID_int_regslice)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state250_assign_proc : process(tmp_last_V_reg_2513, OUTPUT_r_TREADY_int_regslice)
    begin
                ap_block_state250 <= (((tmp_last_V_reg_2513 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_2513 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)));
    end process;


    ap_block_state250_io_assign_proc : process(tmp_last_V_reg_2513, OUTPUT_r_TREADY_int_regslice)
    begin
                ap_block_state250_io <= (((tmp_last_V_reg_2513 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_2513 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)));
    end process;


    ap_block_state252_assign_proc : process(regslice_both_OUTPUT_r_V_data_V_U_apdone_blk, OUTPUT_r_TREADY_int_regslice)
    begin
                ap_block_state252 <= ((regslice_both_OUTPUT_r_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice));
    end process;


    ap_condition_3887_assign_proc : process(ap_CS_fsm_state250, tmp_last_V_reg_2513, OUTPUT_r_TREADY_int_regslice)
    begin
                ap_condition_3887 <= (not((((tmp_last_V_reg_2513 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_2513 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) and (ap_const_logic_1 = ap_CS_fsm_state250));
    end process;


    ap_phi_mux_axilite_out_local_1_phi_fu_567_p8_assign_proc : process(tmp_reg_2445, or_ln90_reg_2532, icmp_ln135_reg_2542, icmp_ln137_reg_2546, ap_CS_fsm_state11, axilite_out_local_1_reg_564)
    begin
        if ((((icmp_ln137_reg_2546 = ap_const_lv1_1) and (icmp_ln135_reg_2542 = ap_const_lv1_0) and (tmp_reg_2445 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((icmp_ln135_reg_2542 = ap_const_lv1_1) and (tmp_reg_2445 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            ap_phi_mux_axilite_out_local_1_phi_fu_567_p8 <= or_ln90_reg_2532;
        else 
            ap_phi_mux_axilite_out_local_1_phi_fu_567_p8 <= axilite_out_local_1_reg_564;
        end if; 
    end process;


    ap_phi_mux_axilite_out_local_2_phi_fu_632_p10_assign_proc : process(tmp_11_reg_2449, or_ln95_reg_2602, icmp_ln173_reg_2650, icmp_ln183_reg_2654, and_ln182_1_reg_2658, ap_CS_fsm_state96, axilite_out_local_2_reg_629)
    begin
        if ((((icmp_ln173_reg_2650 = ap_const_lv1_0) and (tmp_11_reg_2449 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln182_1_reg_2658) and (ap_const_logic_1 = ap_CS_fsm_state96)) or ((icmp_ln183_reg_2654 = ap_const_lv1_1) and (icmp_ln173_reg_2650 = ap_const_lv1_1) and (tmp_11_reg_2449 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state96)))) then 
            ap_phi_mux_axilite_out_local_2_phi_fu_632_p10 <= or_ln95_reg_2602;
        else 
            ap_phi_mux_axilite_out_local_2_phi_fu_632_p10 <= axilite_out_local_2_reg_629;
        end if; 
    end process;


    ap_phi_mux_axilite_out_local_3_phi_fu_685_p4_assign_proc : process(tmp_13_reg_2453, ap_CS_fsm_state161, axilite_out_local_3_reg_682, or_ln100_fu_1924_p2)
    begin
        if (((tmp_13_reg_2453 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state161))) then 
            ap_phi_mux_axilite_out_local_3_phi_fu_685_p4 <= or_ln100_fu_1924_p2;
        else 
            ap_phi_mux_axilite_out_local_3_phi_fu_685_p4 <= axilite_out_local_3_reg_682;
        end if; 
    end process;


    ap_phi_mux_empty_79_phi_fu_581_p8_assign_proc : process(tmp_reg_2445, or_ln90_reg_2532, icmp_ln135_reg_2542, icmp_ln137_reg_2546, ap_CS_fsm_state11, empty_79_reg_578)
    begin
        if ((((icmp_ln137_reg_2546 = ap_const_lv1_1) and (icmp_ln135_reg_2542 = ap_const_lv1_0) and (tmp_reg_2445 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((icmp_ln135_reg_2542 = ap_const_lv1_1) and (tmp_reg_2445 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            ap_phi_mux_empty_79_phi_fu_581_p8 <= or_ln90_reg_2532;
        else 
            ap_phi_mux_empty_79_phi_fu_581_p8 <= empty_79_reg_578;
        end if; 
    end process;


    ap_phi_mux_empty_82_phi_fu_649_p10_assign_proc : process(tmp_11_reg_2449, or_ln95_reg_2602, icmp_ln173_reg_2650, icmp_ln183_reg_2654, and_ln182_1_reg_2658, ap_CS_fsm_state96, empty_82_reg_646)
    begin
        if ((((icmp_ln173_reg_2650 = ap_const_lv1_0) and (tmp_11_reg_2449 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln182_1_reg_2658) and (ap_const_logic_1 = ap_CS_fsm_state96)) or ((icmp_ln183_reg_2654 = ap_const_lv1_1) and (icmp_ln173_reg_2650 = ap_const_lv1_1) and (tmp_11_reg_2449 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state96)))) then 
            ap_phi_mux_empty_82_phi_fu_649_p10 <= or_ln95_reg_2602;
        else 
            ap_phi_mux_empty_82_phi_fu_649_p10 <= empty_82_reg_646;
        end if; 
    end process;


    ap_phi_mux_empty_83_phi_fu_696_p4_assign_proc : process(tmp_13_reg_2453, ap_CS_fsm_state161, or_ln100_fu_1924_p2, empty_83_reg_693)
    begin
        if (((tmp_13_reg_2453 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state161))) then 
            ap_phi_mux_empty_83_phi_fu_696_p4 <= or_ln100_fu_1924_p2;
        else 
            ap_phi_mux_empty_83_phi_fu_696_p4 <= empty_83_reg_693;
        end if; 
    end process;


    ap_phi_mux_tmp_int_3_phi_fu_666_p10_assign_proc : process(tmp_11_reg_2449, icmp_ln173_reg_2650, icmp_ln183_reg_2654, and_ln182_1_reg_2658, result_V_reg_2687, ap_CS_fsm_state96, result_V_19_reg_2700, tmp_int_3_reg_663)
    begin
        if (((tmp_11_reg_2449 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state96))) then
            if (((icmp_ln173_reg_2650 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln182_1_reg_2658))) then 
                ap_phi_mux_tmp_int_3_phi_fu_666_p10 <= result_V_reg_2687;
            elsif (((icmp_ln183_reg_2654 = ap_const_lv1_1) and (icmp_ln173_reg_2650 = ap_const_lv1_1))) then 
                ap_phi_mux_tmp_int_3_phi_fu_666_p10 <= result_V_19_reg_2700;
            else 
                ap_phi_mux_tmp_int_3_phi_fu_666_p10 <= tmp_int_3_reg_663;
            end if;
        else 
            ap_phi_mux_tmp_int_3_phi_fu_666_p10 <= tmp_int_3_reg_663;
        end if; 
    end process;


    ap_phi_mux_tmp_int_6_phi_fu_595_p8_assign_proc : process(tmp_reg_2445, icmp_ln135_reg_2542, icmp_ln137_reg_2546, ap_CS_fsm_state11, tmp_int_6_reg_592, result_fu_1161_p2, result_1_fu_1130_p2)
    begin
        if (((tmp_reg_2445 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
            if (((icmp_ln137_reg_2546 = ap_const_lv1_1) and (icmp_ln135_reg_2542 = ap_const_lv1_0))) then 
                ap_phi_mux_tmp_int_6_phi_fu_595_p8 <= result_1_fu_1130_p2;
            elsif ((icmp_ln135_reg_2542 = ap_const_lv1_1)) then 
                ap_phi_mux_tmp_int_6_phi_fu_595_p8 <= result_fu_1161_p2;
            else 
                ap_phi_mux_tmp_int_6_phi_fu_595_p8 <= tmp_int_6_reg_592;
            end if;
        else 
            ap_phi_mux_tmp_int_6_phi_fu_595_p8 <= tmp_int_6_reg_592;
        end if; 
    end process;


    ap_phi_mux_tmp_int_phi_fu_708_p4_assign_proc : process(tmp_13_reg_2453, ap_CS_fsm_state161, tmp_int_reg_704, output_fu_1951_p2)
    begin
        if (((tmp_13_reg_2453 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state161))) then 
            ap_phi_mux_tmp_int_phi_fu_708_p4 <= output_fu_1951_p2;
        else 
            ap_phi_mux_tmp_int_phi_fu_708_p4 <= tmp_int_reg_704;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    axilite_out_ap_vld_assign_proc : process(ap_CS_fsm_state250, tmp_last_V_reg_2513, ap_block_state250_io, OUTPUT_r_TREADY_int_regslice)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state250_io) or ((tmp_last_V_reg_2513 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_2513 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) and (tmp_last_V_reg_2513 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state250))) then 
            axilite_out_ap_vld <= ap_const_logic_1;
        else 
            axilite_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    compression_buffer_address0_assign_proc : process(ap_CS_fsm_state62, p_cast_fu_867_p1, ap_CS_fsm_state2, zext_ln155_fu_1233_p1, ap_CS_fsm_state13, zext_ln162_fu_1348_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            compression_buffer_address0 <= zext_ln162_fu_1348_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            compression_buffer_address0 <= zext_ln155_fu_1233_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            compression_buffer_address0 <= p_cast_fu_867_p1(9 - 1 downto 0);
        else 
            compression_buffer_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    compression_buffer_ce0_assign_proc : process(ap_CS_fsm_state62, ap_CS_fsm_state2, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            compression_buffer_ce0 <= ap_const_logic_1;
        else 
            compression_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    compression_buffer_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state13, abs_in_1_fu_1224_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            compression_buffer_d0 <= abs_in_1_fu_1224_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            compression_buffer_d0 <= ap_const_lv32_0;
        else 
            compression_buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    compression_buffer_we0_assign_proc : process(ap_CS_fsm_state2, exitcond3588_fu_872_p2, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3588_fu_872_p2 = ap_const_lv1_0)))) then 
            compression_buffer_we0 <= ap_const_logic_1;
        else 
            compression_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

        conv7_i_i_i_fu_1005_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(distortion_clip_factor_read_reg_2351),40));

    current_level_fu_1288_p3 <= 
        compression_min_threshold_read_reg_2344 when (icmp_ln165_fu_1283_p2(0) = '1') else 
        empty_80_reg_617;
    current_sample_fu_1045_p2 <= std_logic_vector(unsigned(current_sample_1_fu_322) + unsigned(ap_const_lv32_1));
    data_V_1_fu_1646_p1 <= reg_838;
    data_V_2_fu_1492_p1 <= reg_838;
    data_V_3_fu_1806_p1 <= reg_838;
    data_V_4_fu_1994_p1 <= reg_848;
    data_V_fu_1353_p1 <= dc_reg_2677;

    delay_buffer_address0_assign_proc : process(ap_CS_fsm_state151, ap_CS_fsm_state161, p_cast5_fu_897_p1, ap_CS_fsm_state3, zext_ln201_fu_1801_p1, zext_ln204_fu_1959_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state161)) then 
            delay_buffer_address0 <= zext_ln204_fu_1959_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state151)) then 
            delay_buffer_address0 <= zext_ln201_fu_1801_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            delay_buffer_address0 <= p_cast5_fu_897_p1(17 - 1 downto 0);
        else 
            delay_buffer_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    delay_buffer_ce0_assign_proc : process(ap_CS_fsm_state151, ap_CS_fsm_state161, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state161) or (ap_const_logic_1 = ap_CS_fsm_state151) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            delay_buffer_ce0 <= ap_const_logic_1;
        else 
            delay_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_buffer_d0_assign_proc : process(ap_CS_fsm_state161, output_fu_1951_p2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state161)) then 
            delay_buffer_d0 <= output_fu_1951_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            delay_buffer_d0 <= ap_const_lv32_0;
        else 
            delay_buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    delay_buffer_we0_assign_proc : process(tmp_13_reg_2453, ap_CS_fsm_state161, ap_CS_fsm_state3, exitcond3535_fu_902_p2)
    begin
        if ((((tmp_13_reg_2453 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state161)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3535_fu_902_p2 = ap_const_lv1_0)))) then 
            delay_buffer_we0 <= ap_const_logic_1;
        else 
            delay_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_70_fu_878_p2 <= std_logic_vector(unsigned(empty_fu_298) + unsigned(ap_const_lv9_1));
    empty_73_fu_908_p2 <= std_logic_vector(unsigned(empty_71_fu_314) + unsigned(ap_const_lv17_1));
    empty_76_fu_938_p2 <= std_logic_vector(unsigned(empty_74_fu_318) + unsigned(ap_const_lv7_1));
    exitcond3524_fu_932_p2 <= "1" when (empty_74_fu_318 = ap_const_lv7_64) else "0";
    exitcond3535_fu_902_p2 <= "1" when (empty_71_fu_314 = ap_const_lv17_15888) else "0";
    exitcond3588_fu_872_p2 <= "1" when (empty_fu_298 = ap_const_lv9_1B9) else "0";

    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state227, gmem_ARREADY)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state227))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state247, gmem_RVALID)
    begin
        if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state247))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state227)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state227)) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state247)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state247)) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_1176_ap_start_assign_proc : process(tmp_11_reg_2449, ap_CS_fsm_state11)
    begin
        if (((tmp_11_reg_2449 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_1176_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1176_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1176_p0 <= std_logic_vector(unsigned(compression_buffer_index_fu_338) + unsigned(ap_const_lv32_1));
    grp_fu_1176_p1 <= ap_const_lv32_1B9(10 - 1 downto 0);

    grp_fu_1277_ap_start_assign_proc : process(ap_CS_fsm_state48, icmp_ln159_fu_1256_p2)
    begin
        if (((icmp_ln159_fu_1256_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            grp_fu_1277_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1277_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1277_p0 <= std_logic_vector(unsigned(zext_ln161_fu_1268_p1) + unsigned(sext_ln61_reg_2622));
    grp_fu_1277_p1 <= ap_const_lv11_1B9(10 - 1 downto 0);

    grp_fu_1640_ap_start_assign_proc : process(tmp_13_reg_2453, ap_CS_fsm_state96)
    begin
        if (((tmp_13_reg_2453 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state96))) then 
            grp_fu_1640_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1640_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1640_p0 <= std_logic_vector(unsigned(delay_buffer_index_fu_334) - unsigned(delay_samples_read_reg_2323));
    grp_fu_1640_p1 <= ap_const_lv32_15888(18 - 1 downto 0);

    grp_fu_1791_ap_start_assign_proc : process(ap_CS_fsm_state126)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state126)) then 
            grp_fu_1791_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1791_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1791_p0 <= std_logic_vector(unsigned(delay_buffer_index_fu_334) + unsigned(ap_const_lv32_1));
    grp_fu_1791_p1 <= ap_const_lv32_15888(18 - 1 downto 0);

    grp_fu_1988_ap_start_assign_proc : process(ap_CS_fsm_state198)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state198)) then 
            grp_fu_1988_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1988_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1988_ce_assign_proc : process(ap_CS_fsm_state227, ap_CS_fsm_state213, ap_CS_fsm_state223, ap_CS_fsm_state198, ap_CS_fsm_state206, ap_CS_fsm_state208, ap_CS_fsm_state218, ap_CS_fsm_state224, ap_CS_fsm_state225, ap_CS_fsm_state226, ap_CS_fsm_state233, ap_CS_fsm_state207, ap_CS_fsm_state214, ap_CS_fsm_state209, ap_CS_fsm_state219, ap_CS_fsm_state199, ap_CS_fsm_state200, ap_CS_fsm_state201, ap_CS_fsm_state202, ap_CS_fsm_state203, ap_CS_fsm_state204, ap_CS_fsm_state205, ap_CS_fsm_state210, ap_CS_fsm_state211, ap_CS_fsm_state212, ap_CS_fsm_state215, ap_CS_fsm_state216, ap_CS_fsm_state217, ap_CS_fsm_state220, ap_CS_fsm_state221, ap_CS_fsm_state222, ap_CS_fsm_state228, ap_CS_fsm_state229, ap_CS_fsm_state230, ap_CS_fsm_state231, ap_CS_fsm_state232)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state233) or (ap_const_logic_1 = ap_CS_fsm_state226) or (ap_const_logic_1 = ap_CS_fsm_state225) or (ap_const_logic_1 = ap_CS_fsm_state224) or (ap_const_logic_1 = ap_CS_fsm_state218) or (ap_const_logic_1 = ap_CS_fsm_state208) or (ap_const_logic_1 = ap_CS_fsm_state206) or (ap_const_logic_1 = ap_CS_fsm_state198) or (ap_const_logic_1 = ap_CS_fsm_state223) or (ap_const_logic_1 = ap_CS_fsm_state213) or (ap_const_logic_1 = ap_CS_fsm_state227) or (ap_const_logic_1 = ap_CS_fsm_state232) or (ap_const_logic_1 = ap_CS_fsm_state231) or (ap_const_logic_1 = ap_CS_fsm_state230) or (ap_const_logic_1 = ap_CS_fsm_state229) or (ap_const_logic_1 = ap_CS_fsm_state228) or (ap_const_logic_1 = ap_CS_fsm_state222) or (ap_const_logic_1 = ap_CS_fsm_state221) or (ap_const_logic_1 = ap_CS_fsm_state220) or (ap_const_logic_1 = ap_CS_fsm_state217) or (ap_const_logic_1 = ap_CS_fsm_state216) or (ap_const_logic_1 = ap_CS_fsm_state215) or (ap_const_logic_1 = ap_CS_fsm_state212) or (ap_const_logic_1 = ap_CS_fsm_state211) or (ap_const_logic_1 = ap_CS_fsm_state210) or (ap_const_logic_1 = ap_CS_fsm_state205) or (ap_const_logic_1 = ap_CS_fsm_state204) or (ap_const_logic_1 = ap_CS_fsm_state203) or (ap_const_logic_1 = ap_CS_fsm_state202) or (ap_const_logic_1 = ap_CS_fsm_state201) or (ap_const_logic_1 = ap_CS_fsm_state200) or (ap_const_logic_1 = ap_CS_fsm_state199) or (ap_const_logic_1 = ap_CS_fsm_state219) or (ap_const_logic_1 = ap_CS_fsm_state209) or (ap_const_logic_1 = ap_CS_fsm_state214) or (ap_const_logic_1 = ap_CS_fsm_state207))) then 
            grp_fu_1988_ce <= ap_const_logic_1;
        else 
            grp_fu_1988_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1988_p0 <= std_logic_vector(unsigned(wah_buffer_index_fu_330) + unsigned(ap_const_lv32_1));
    grp_fu_1988_p1 <= ap_const_lv32_64(8 - 1 downto 0);

    grp_fu_2206_ap_start_assign_proc : process(ap_CS_fsm_state234, icmp_ln226_fu_2185_p2)
    begin
        if (((icmp_ln226_fu_2185_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state234))) then 
            grp_fu_2206_ap_start <= ap_const_logic_1;
        else 
            grp_fu_2206_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_2206_p0 <= std_logic_vector(signed(sext_ln73_reg_2788) - signed(zext_ln228_fu_2197_p1));
    grp_fu_2206_p1 <= ap_const_lv9_64(8 - 1 downto 0);

    grp_fu_795_p1_assign_proc : process(reg_843, delay_mult_read_reg_2328, lpf_coefficients_load_reg_2662, ap_CS_fsm_state68, ap_CS_fsm_state92, ap_CS_fsm_state113, ap_CS_fsm_state157)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state157)) then 
            grp_fu_795_p1 <= delay_mult_read_reg_2328;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state92))) then 
            grp_fu_795_p1 <= reg_843;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_fu_795_p1 <= lpf_coefficients_load_reg_2662;
        else 
            grp_fu_795_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_799_p0_assign_proc : process(conv18_i_reg_2473, conv30_i_reg_2478, ap_CS_fsm_state80, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_fu_799_p0 <= conv18_i_reg_2473;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            grp_fu_799_p0 <= conv30_i_reg_2478;
        else 
            grp_fu_799_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_803_p0_assign_proc : process(ap_CS_fsm_state67, compression_max_threshold_read_reg_2338, current_level_reg_2645, compression_buffer_load_reg_2672, delay_buffer_load_reg_2715, tmp_int_6_reg_592, empty_80_reg_617, ap_CS_fsm_state5, ap_CS_fsm_state64, ap_CS_fsm_state76, ap_CS_fsm_state88, ap_CS_fsm_state97, ap_CS_fsm_state109, ap_CS_fsm_state153)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state153)) then 
            grp_fu_803_p0 <= delay_buffer_load_reg_2715;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state88))) then 
            grp_fu_803_p0 <= tmp_int_6_reg_592;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state76))) then 
            grp_fu_803_p0 <= current_level_reg_2645;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            grp_fu_803_p0 <= empty_80_reg_617;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_fu_803_p0 <= compression_buffer_load_reg_2672;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_803_p0 <= compression_max_threshold_read_reg_2338;
        else 
            grp_fu_803_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_816_p0_assign_proc : process(reg_848, conv_i2_reg_2736, tmp_2_reg_2751, add5_i_reg_2756, ap_CS_fsm_state166, ap_CS_fsm_state171, ap_CS_fsm_state209, ap_CS_fsm_state219)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state219)) then 
            grp_fu_816_p0 <= add5_i_reg_2756;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state209)) then 
            grp_fu_816_p0 <= tmp_2_reg_2751;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state171)) then 
            grp_fu_816_p0 <= reg_848;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state166)) then 
            grp_fu_816_p0 <= conv_i2_reg_2736;
        else 
            grp_fu_816_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_816_p1_assign_proc : process(conv2_i_reg_2468, ap_CS_fsm_state166, ap_CS_fsm_state171, ap_CS_fsm_state209, ap_CS_fsm_state219)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state219)) then 
            grp_fu_816_p1 <= ap_const_lv64_4034000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state209)) then 
            grp_fu_816_p1 <= ap_const_lv64_3FE0000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state171)) then 
            grp_fu_816_p1 <= conv2_i_reg_2468;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state166)) then 
            grp_fu_816_p1 <= ap_const_lv64_400921F9F01B866E;
        else 
            grp_fu_816_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_828_p0_assign_proc : process(tempo_read_reg_2318, ap_CS_fsm_state4, shl_ln221_fu_1968_p2, ap_CS_fsm_state161)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state161)) then 
            grp_fu_828_p0 <= shl_ln221_fu_1968_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_828_p0 <= tempo_read_reg_2318;
        else 
            grp_fu_828_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_sin_or_cos_double_s_fu_774_ap_start <= grp_sin_or_cos_double_s_fu_774_ap_start_reg;
    icmp_ln1049_1_fu_1099_p2 <= "1" when (trunc_ln1049_1_fu_1095_p1 = ap_const_lv7_0) else "0";
    icmp_ln1049_2_fu_2258_p2 <= "1" when (trunc_ln1049_2_reg_2833 = ap_const_lv32_0) else "0";
    icmp_ln1049_fu_1204_p2 <= "1" when (trunc_ln1049_fu_1200_p1 = ap_const_lv7_0) else "0";
    icmp_ln135_fu_1057_p2 <= "1" when (signed(INPUT_r_TDATA_int_regslice) > signed(distortion_threshold_read_reg_2356)) else "0";
    icmp_ln137_fu_1062_p2 <= "1" when (signed(INPUT_r_TDATA_int_regslice) < signed(negative_threshold_reg_2457)) else "0";
    icmp_ln159_fu_1256_p2 <= "1" when (i_reg_606 = ap_const_lv9_1B9) else "0";
    icmp_ln165_fu_1283_p2 <= "1" when (signed(current_sample_1_fu_322) < signed(ap_const_lv32_1B9)) else "0";
    icmp_ln173_fu_1295_p2 <= "1" when (signed(current_level_fu_1288_p3) > signed(compression_max_threshold_read_reg_2338)) else "0";
    icmp_ln182_1_fu_1311_p2 <= "1" when (signed(current_level_fu_1288_p3) > signed(compression_zero_threshold_read_reg_2333)) else "0";
    icmp_ln182_fu_1306_p2 <= "1" when (signed(current_level_fu_1288_p3) < signed(compression_min_threshold_read_reg_2344)) else "0";
    icmp_ln183_fu_1300_p2 <= "1" when (signed(current_level_fu_1288_p3) > signed(ap_const_lv32_0)) else "0";
    icmp_ln226_fu_2185_p2 <= "1" when (i_7_reg_716 = ap_const_lv7_64) else "0";
    isNeg_2_fu_1696_p3 <= add_ln346_1_fu_1690_p2(8 downto 8);
    isNeg_3_fu_1542_p3 <= add_ln346_2_fu_1536_p2(8 downto 8);
    isNeg_4_fu_1848_p3 <= add_ln346_3_fu_1842_p2(8 downto 8);
    isNeg_5_fu_2044_p3 <= add_ln515_fu_2038_p2(11 downto 11);
    isNeg_fu_1402_p3 <= add_ln346_fu_1396_p2(8 downto 8);
    lpf_coefficients_address0 <= zext_ln159_fu_1251_p1(9 - 1 downto 0);

    lpf_coefficients_ce0_assign_proc : process(ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            lpf_coefficients_ce0 <= ap_const_logic_1;
        else 
            lpf_coefficients_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mantissa_1_fu_1672_p4 <= ((ap_const_lv1_1 & p_Result_48_fu_1668_p1) & ap_const_lv1_0);
    mantissa_2_fu_1518_p4 <= ((ap_const_lv1_1 & p_Result_50_fu_1514_p1) & ap_const_lv1_0);
    mantissa_3_fu_1824_p4 <= ((ap_const_lv1_1 & p_Result_52_fu_1820_p1) & ap_const_lv1_0);
    mantissa_4_fu_2020_p4 <= ((ap_const_lv1_1 & p_Result_54_fu_2016_p1) & ap_const_lv1_0);
    mantissa_fu_1378_p4 <= ((ap_const_lv1_1 & p_Result_46_fu_1374_p1) & ap_const_lv1_0);
    mul_ln226_fu_2137_p1 <= ap_const_lv41_C8(9 - 1 downto 0);
    negative_threshold_fu_1000_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(distortion_threshold_read_reg_2356));
    or_ln100_fu_1924_p2 <= (empty_82_reg_646 or ap_const_lv32_2);
    or_ln105_fu_2171_p2 <= (empty_83_reg_693 or ap_const_lv32_1);
    or_ln90_fu_1051_p2 <= (empty_77_fu_326 or ap_const_lv32_8);
    or_ln95_fu_1237_p2 <= (empty_79_reg_578 or ap_const_lv32_4);
    output_fu_1951_p2 <= std_logic_vector(unsigned(result_V_20_fu_1944_p3) + unsigned(tmp_int_3_reg_663));
    p_Result_28_fu_1105_p3 <= r_V_49_reg_2560(39 downto 39);
    p_Result_44_fu_2251_p3 <= r_V_50_reg_2821(47 downto 47);
    p_Result_45_fu_1356_p3 <= data_V_fu_1353_p1(31 downto 31);
    p_Result_46_fu_1374_p1 <= data_V_fu_1353_p1(23 - 1 downto 0);
    p_Result_47_fu_1650_p3 <= data_V_1_fu_1646_p1(31 downto 31);
    p_Result_48_fu_1668_p1 <= data_V_1_fu_1646_p1(23 - 1 downto 0);
    p_Result_49_fu_1496_p3 <= data_V_2_fu_1492_p1(31 downto 31);
    p_Result_50_fu_1514_p1 <= data_V_2_fu_1492_p1(23 - 1 downto 0);
    p_Result_51_fu_1932_p3 <= data_V_3_reg_2720(31 downto 31);
    p_Result_52_fu_1820_p1 <= data_V_3_fu_1806_p1(23 - 1 downto 0);
    p_Result_53_fu_1998_p3 <= data_V_4_fu_1994_p1(63 downto 63);
    p_Result_54_fu_2016_p1 <= data_V_4_fu_1994_p1(52 - 1 downto 0);
    p_Result_s_fu_1136_p3 <= r_V_48_reg_2585(39 downto 39);
    p_cast5_fu_897_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_71_fu_314),64));
    p_cast6_fu_927_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_74_fu_318),64));
    p_cast_fu_867_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_298),64));
    r_V_21_fu_1072_p2 <= std_logic_vector(unsigned(INPUT_r_TDATA_int_regslice) - unsigned(distortion_threshold_read_reg_2356));
    r_V_35_fu_1436_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_1388_p1),to_integer(unsigned('0' & zext_ln1488_fu_1432_p1(31-1 downto 0)))));
    r_V_36_fu_1442_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_1388_p1),to_integer(unsigned('0' & zext_ln1488_fu_1432_p1(31-1 downto 0)))));
    r_V_38_fu_1730_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_1_fu_1682_p1),to_integer(unsigned('0' & zext_ln1488_2_fu_1726_p1(31-1 downto 0)))));
    r_V_39_fu_1736_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_1_fu_1682_p1),to_integer(unsigned('0' & zext_ln1488_2_fu_1726_p1(31-1 downto 0)))));
    r_V_40_fu_1576_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_2_fu_1528_p1),to_integer(unsigned('0' & zext_ln1488_3_fu_1572_p1(31-1 downto 0)))));
    r_V_41_fu_1582_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_2_fu_1528_p1),to_integer(unsigned('0' & zext_ln1488_3_fu_1572_p1(31-1 downto 0)))));
    r_V_42_fu_1882_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_3_fu_1834_p1),to_integer(unsigned('0' & zext_ln1488_4_fu_1878_p1(31-1 downto 0)))));
    r_V_43_fu_1888_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_3_fu_1834_p1),to_integer(unsigned('0' & zext_ln1488_4_fu_1878_p1(31-1 downto 0)))));
    r_V_44_fu_2078_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_4_fu_2030_p1),to_integer(unsigned('0' & zext_ln1488_5_fu_2074_p1(31-1 downto 0)))));
    r_V_45_fu_2084_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_4_fu_2030_p1),to_integer(unsigned('0' & zext_ln1488_5_fu_2074_p1(31-1 downto 0)))));
    r_V_48_fu_1185_p1 <= conv7_i_i_i_reg_2462(8 - 1 downto 0);
    r_V_49_fu_1080_p1 <= conv7_i_i_i_reg_2462(8 - 1 downto 0);
    r_V_fu_1067_p2 <= std_logic_vector(unsigned(INPUT_r_TDATA_int_regslice) + unsigned(distortion_threshold_read_reg_2356));
    result_1_fu_1130_p2 <= std_logic_vector(unsigned(ret_V_11_fu_1123_p3) - unsigned(distortion_threshold_read_reg_2356));
    result_3_fu_2286_p2 <= std_logic_vector(signed(sext_ln598_fu_2282_p1) + signed(result_2_reg_727));
    result_V_13_fu_1939_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_3_reg_2725));
    result_V_16_fu_2120_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_4_fu_2112_p3));
    result_V_18_fu_1484_p3 <= 
        result_V_2_fu_1478_p2 when (p_Result_45_fu_1356_p3(0) = '1') else 
        val_fu_1470_p3;
    result_V_19_fu_1778_p3 <= 
        result_V_7_fu_1772_p2 when (p_Result_47_fu_1650_p3(0) = '1') else 
        val_1_fu_1764_p3;
    result_V_20_fu_1944_p3 <= 
        result_V_13_fu_1939_p2 when (p_Result_51_fu_1932_p3(0) = '1') else 
        val_3_reg_2725;
    result_V_21_fu_2126_p3 <= 
        result_V_16_fu_2120_p2 when (p_Result_53_fu_1998_p3(0) = '1') else 
        val_4_fu_2112_p3;
    result_V_2_fu_1478_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_fu_1470_p3));
    result_V_7_fu_1772_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_1_fu_1764_p3));
    result_V_8_fu_1618_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_2_fu_1610_p3));
    result_V_fu_1624_p3 <= 
        result_V_8_fu_1618_p2 when (p_Result_49_fu_1496_p3(0) = '1') else 
        val_2_fu_1610_p3;
    result_fu_1161_p2 <= std_logic_vector(unsigned(ret_V_9_fu_1154_p3) + unsigned(distortion_threshold_read_reg_2356));
    ret_V_10_fu_1112_p2 <= std_logic_vector(unsigned(ret_V_9_cast_reg_2565) + unsigned(ap_const_lv32_1));
    ret_V_11_fu_1123_p3 <= 
        select_ln1048_1_fu_1117_p3 when (p_Result_28_fu_1105_p3(0) = '1') else 
        ret_V_9_cast_reg_2565;
    ret_V_13_fu_2263_p2 <= std_logic_vector(unsigned(ret_V_12_reg_2826) + unsigned(ap_const_lv16_1));
    ret_V_14_fu_2275_p3 <= 
        select_ln1048_2_fu_2268_p3 when (p_Result_44_fu_2251_p3(0) = '1') else 
        ret_V_12_reg_2826;
    ret_V_9_fu_1154_p3 <= 
        select_ln1048_fu_1148_p3 when (p_Result_s_fu_1136_p3(0) = '1') else 
        ret_V_cast_reg_2590;
    ret_V_fu_1143_p2 <= std_logic_vector(unsigned(ret_V_cast_reg_2590) + unsigned(ap_const_lv32_1));
    select_ln1048_1_fu_1117_p3 <= 
        ret_V_9_cast_reg_2565 when (icmp_ln1049_1_reg_2572(0) = '1') else 
        ret_V_10_fu_1112_p2;
    select_ln1048_2_fu_2268_p3 <= 
        ret_V_12_reg_2826 when (icmp_ln1049_2_fu_2258_p2(0) = '1') else 
        ret_V_13_fu_2263_p2;
    select_ln1048_fu_1148_p3 <= 
        ret_V_cast_reg_2590 when (icmp_ln1049_reg_2597(0) = '1') else 
        ret_V_fu_1143_p2;
        sext_ln1488_1_fu_1722_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_2_fu_1714_p3),32));

        sext_ln1488_2_fu_1568_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_3_fu_1560_p3),32));

        sext_ln1488_3_fu_1874_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_4_fu_1866_p3),32));

        sext_ln1488_4_fu_2070_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_5_fu_2062_p3),32));

        sext_ln1488_fu_1428_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_1420_p3),32));

        sext_ln1512_1_fu_1710_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_4_fu_1704_p2),9));

        sext_ln1512_2_fu_1556_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_5_fu_1550_p2),9));

        sext_ln1512_3_fu_1862_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_fu_1856_p2),9));

        sext_ln1512_4_fu_2058_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_2_fu_2052_p2),12));

        sext_ln1512_fu_1416_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_3_fu_1410_p2),9));

        sext_ln226_2_fu_2143_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln226_reg_2766),64));

        sext_ln226_fu_2161_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_2151_p4),64));

        sext_ln598_fu_2282_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_14_fu_2275_p3),32));

        sext_ln61_fu_1247_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln61_fu_1243_p1),11));

        sext_ln73_fu_2181_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln73_fu_2177_p1),9));

    shl_ln221_fu_1968_p2 <= std_logic_vector(shift_left(unsigned(current_sample_1_fu_322),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    sub_ln1512_2_fu_2052_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(xs_exp_V_5_fu_2006_p4));
    sub_ln1512_3_fu_1410_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_V_fu_1364_p4));
    sub_ln1512_4_fu_1704_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_V_1_fu_1658_p4));
    sub_ln1512_5_fu_1550_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_V_2_fu_1504_p4));
    sub_ln1512_fu_1856_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_V_4_fu_1810_p4));
    sub_ln151_fu_1218_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_int_6_reg_592));
    tmp_17_fu_1210_p3 <= tmp_int_6_reg_592(31 downto 31);
    tmp_22_fu_1448_p3 <= r_V_35_fu_1436_p2(24 downto 24);
    tmp_26_fu_1742_p3 <= r_V_38_fu_1730_p2(24 downto 24);
    tmp_30_fu_1588_p3 <= r_V_40_fu_1576_p2(24 downto 24);
    tmp_34_fu_1894_p3 <= r_V_42_fu_1882_p2(24 downto 24);
    tmp_38_fu_2090_p3 <= r_V_44_fu_2078_p2(53 downto 53);
    tmp_3_fu_1906_p4 <= r_V_43_fu_1888_p2(55 downto 24);
    tmp_4_fu_2102_p4 <= r_V_45_fu_2084_p2(84 downto 53);
    tmp_6_fu_1460_p4 <= r_V_36_fu_1442_p2(55 downto 24);
    tmp_9_fu_1754_p4 <= r_V_39_fu_1736_p2(55 downto 24);
    tmp_s_fu_1600_p4 <= r_V_41_fu_1582_p2(55 downto 24);
    trunc_ln1049_1_fu_1095_p1 <= r_V_49_fu_1080_p2(7 - 1 downto 0);
    trunc_ln1049_2_fu_2247_p1 <= r_V_50_fu_2231_p2(32 - 1 downto 0);
    trunc_ln1049_fu_1200_p1 <= r_V_48_fu_1185_p2(7 - 1 downto 0);
    trunc_ln162_fu_1344_p1 <= grp_fu_1277_p2(9 - 1 downto 0);
    trunc_ln201_fu_1797_p1 <= grp_fu_1640_p2(17 - 1 downto 0);
    trunc_ln229_fu_2216_p1 <= grp_fu_2206_p2(7 - 1 downto 0);
    trunc_ln23_fu_855_p1 <= control(1 - 1 downto 0);
    trunc_ln61_fu_1243_p1 <= grp_fu_1176_p2(10 - 1 downto 0);
    trunc_ln73_fu_2177_p1 <= grp_fu_1988_p2(8 - 1 downto 0);
    trunc_ln_fu_2151_p4 <= add_ln226_fu_2146_p2(63 downto 1);
    ush_2_fu_1714_p3 <= 
        sext_ln1512_1_fu_1710_p1 when (isNeg_2_fu_1696_p3(0) = '1') else 
        add_ln346_1_fu_1690_p2;
    ush_3_fu_1560_p3 <= 
        sext_ln1512_2_fu_1556_p1 when (isNeg_3_fu_1542_p3(0) = '1') else 
        add_ln346_2_fu_1536_p2;
    ush_4_fu_1866_p3 <= 
        sext_ln1512_3_fu_1862_p1 when (isNeg_4_fu_1848_p3(0) = '1') else 
        add_ln346_3_fu_1842_p2;
    ush_5_fu_2062_p3 <= 
        sext_ln1512_4_fu_2058_p1 when (isNeg_5_fu_2044_p3(0) = '1') else 
        add_ln515_fu_2038_p2;
    ush_fu_1420_p3 <= 
        sext_ln1512_fu_1416_p1 when (isNeg_fu_1402_p3(0) = '1') else 
        add_ln346_fu_1396_p2;
    val_1_fu_1764_p3 <= 
        zext_ln818_1_fu_1750_p1 when (isNeg_2_fu_1696_p3(0) = '1') else 
        tmp_9_fu_1754_p4;
    val_2_fu_1610_p3 <= 
        zext_ln818_2_fu_1596_p1 when (isNeg_3_fu_1542_p3(0) = '1') else 
        tmp_s_fu_1600_p4;
    val_3_fu_1916_p3 <= 
        zext_ln818_3_fu_1902_p1 when (isNeg_4_fu_1848_p3(0) = '1') else 
        tmp_3_fu_1906_p4;
    val_4_fu_2112_p3 <= 
        zext_ln818_4_fu_2098_p1 when (isNeg_5_fu_2044_p3(0) = '1') else 
        tmp_4_fu_2102_p4;
    val_fu_1470_p3 <= 
        zext_ln818_fu_1456_p1 when (isNeg_fu_1402_p3(0) = '1') else 
        tmp_6_fu_1460_p4;

    wah_values_buffer_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state198, ap_CS_fsm_state246, p_cast6_fu_927_p1, zext_ln217_fu_1977_p1, zext_ln229_fu_2220_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state246)) then 
            wah_values_buffer_address0 <= zext_ln229_fu_2220_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state198)) then 
            wah_values_buffer_address0 <= zext_ln217_fu_1977_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            wah_values_buffer_address0 <= p_cast6_fu_927_p1(7 - 1 downto 0);
        else 
            wah_values_buffer_address0 <= "XXXXXXX";
        end if; 
    end process;


    wah_values_buffer_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state198, ap_CS_fsm_state246)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state246) or (ap_const_logic_1 = ap_CS_fsm_state198) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            wah_values_buffer_ce0 <= ap_const_logic_1;
        else 
            wah_values_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wah_values_buffer_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state198, tmp_int_reg_704)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state198)) then 
            wah_values_buffer_d0 <= tmp_int_reg_704;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            wah_values_buffer_d0 <= ap_const_lv32_0;
        else 
            wah_values_buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    wah_values_buffer_we0_assign_proc : process(ap_CS_fsm_state4, exitcond3524_fu_932_p2, ap_CS_fsm_state198)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state198) or ((exitcond3524_fu_932_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            wah_values_buffer_we0 <= ap_const_logic_1;
        else 
            wah_values_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xs_exp_V_1_fu_1658_p4 <= data_V_1_fu_1646_p1(30 downto 23);
    xs_exp_V_2_fu_1504_p4 <= data_V_2_fu_1492_p1(30 downto 23);
    xs_exp_V_4_fu_1810_p4 <= data_V_3_fu_1806_p1(30 downto 23);
    xs_exp_V_5_fu_2006_p4 <= data_V_4_fu_1994_p1(62 downto 52);
    xs_exp_V_fu_1364_p4 <= data_V_fu_1353_p1(30 downto 23);
    zext_ln1488_2_fu_1726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_1_fu_1722_p1),79));
    zext_ln1488_3_fu_1572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_2_fu_1568_p1),79));
    zext_ln1488_4_fu_1878_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_3_fu_1874_p1),79));
    zext_ln1488_5_fu_2074_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_4_fu_2070_p1),137));
    zext_ln1488_fu_1432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_fu_1428_p1),79));
    zext_ln155_fu_1233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(compression_buffer_index_fu_338),64));
    zext_ln159_fu_1251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_606),64));
    zext_ln15_1_fu_1682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_1_fu_1672_p4),79));
    zext_ln15_2_fu_1528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_2_fu_1518_p4),79));
    zext_ln15_3_fu_1834_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_3_fu_1824_p4),79));
    zext_ln15_4_fu_2030_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_4_fu_2020_p4),137));
    zext_ln15_fu_1388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_1378_p4),79));
    zext_ln161_fu_1268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_606),11));
    zext_ln162_fu_1348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln162_fu_1344_p1),64));
    zext_ln201_fu_1801_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln201_fu_1797_p1),64));
    zext_ln204_fu_1959_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(delay_buffer_index_fu_334),64));
    zext_ln217_fu_1977_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wah_buffer_index_fu_330),64));
    zext_ln228_fu_2197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_7_reg_716),9));
    zext_ln229_fu_2220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln229_fu_2216_p1),64));
    zext_ln346_1_fu_1686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_1_fu_1658_p4),9));
    zext_ln346_2_fu_1532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_2_fu_1504_p4),9));
    zext_ln346_3_fu_1838_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_4_fu_1810_p4),9));
    zext_ln346_fu_1392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_fu_1364_p4),9));
    zext_ln515_fu_2034_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_5_fu_2006_p4),12));
    zext_ln818_1_fu_1750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_1742_p3),32));
    zext_ln818_2_fu_1596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_1588_p3),32));
    zext_ln818_3_fu_1902_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_1894_p3),32));
    zext_ln818_4_fu_2098_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_fu_2090_p3),32));
    zext_ln818_fu_1456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_1448_p3),32));
end behav;
