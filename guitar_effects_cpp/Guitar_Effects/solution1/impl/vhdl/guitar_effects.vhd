-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity guitar_effects is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_R_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    INPUT_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    INPUT_r_TVALID : IN STD_LOGIC;
    INPUT_r_TREADY : OUT STD_LOGIC;
    INPUT_r_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_r_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_r_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    INPUT_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_r_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    INPUT_r_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    OUTPUT_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUTPUT_r_TVALID : OUT STD_LOGIC;
    OUTPUT_r_TREADY : IN STD_LOGIC;
    OUTPUT_r_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_r_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_r_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    OUTPUT_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_r_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    OUTPUT_r_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_control_r_AWVALID : IN STD_LOGIC;
    s_axi_control_r_AWREADY : OUT STD_LOGIC;
    s_axi_control_r_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_ADDR_WIDTH-1 downto 0);
    s_axi_control_r_WVALID : IN STD_LOGIC;
    s_axi_control_r_WREADY : OUT STD_LOGIC;
    s_axi_control_r_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH-1 downto 0);
    s_axi_control_r_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH/8-1 downto 0);
    s_axi_control_r_ARVALID : IN STD_LOGIC;
    s_axi_control_r_ARREADY : OUT STD_LOGIC;
    s_axi_control_r_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_ADDR_WIDTH-1 downto 0);
    s_axi_control_r_RVALID : OUT STD_LOGIC;
    s_axi_control_r_RREADY : IN STD_LOGIC;
    s_axi_control_r_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH-1 downto 0);
    s_axi_control_r_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_r_BVALID : OUT STD_LOGIC;
    s_axi_control_r_BREADY : IN STD_LOGIC;
    s_axi_control_r_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of guitar_effects is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "guitar_effects_guitar_effects,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=138,HLS_SYN_DSP=0,HLS_SYN_FF=13223,HLS_SYN_LUT=18263,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state137 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state138 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state139 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state140 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state141 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state142 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state143 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state144 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state145 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state146 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state147 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state148 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state149 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state150 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state151 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state152 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state153 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state154 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state155 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state156 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state157 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state158 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state159 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state160 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state161 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state162 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state163 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state164 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state165 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state166 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state167 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state168 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state169 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state170 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state171 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state172 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state173 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state174 : STD_LOGIC_VECTOR (183 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state175 : STD_LOGIC_VECTOR (183 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state176 : STD_LOGIC_VECTOR (183 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state177 : STD_LOGIC_VECTOR (183 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state178 : STD_LOGIC_VECTOR (183 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state179 : STD_LOGIC_VECTOR (183 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state180 : STD_LOGIC_VECTOR (183 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state181 : STD_LOGIC_VECTOR (183 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state182 : STD_LOGIC_VECTOR (183 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state183 : STD_LOGIC_VECTOR (183 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state184 : STD_LOGIC_VECTOR (183 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_AC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_B5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011000";
    constant ap_const_lv32_A6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100110";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_91 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010001";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_A9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101001";
    constant ap_const_lv32_AA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101010";
    constant ap_const_lv32_AB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_B3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110011";
    constant ap_const_lv32_B4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv64_3FE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_99 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011001";
    constant ap_const_lv64_400921F9F01B866E : STD_LOGIC_VECTOR (63 downto 0) := "0100000000001001001000011111100111110000000110111000011001101110";
    constant ap_const_lv64_4034000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000110100000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_92 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010010";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv64_40F5888000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000011110101100010001000000000000000000000000000000000000000";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_AC44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001010110001000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv41_C8 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000011001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal axilite_out_ap_vld : STD_LOGIC;
    signal control : STD_LOGIC_VECTOR (7 downto 0);
    signal distortion_threshold : STD_LOGIC_VECTOR (31 downto 0);
    signal distortion_clip_factor : STD_LOGIC_VECTOR (7 downto 0);
    signal compression_min_threshold : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_max_threshold : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_zero_threshold : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_mult : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_samples : STD_LOGIC_VECTOR (31 downto 0);
    signal tempo : STD_LOGIC_VECTOR (31 downto 0);
    signal wah_coeffs : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (183 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state173 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state173 : signal is "none";
    signal INPUT_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal OUTPUT_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state182 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state182 : signal is "none";
    signal tmp_last_V_reg_1473 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state183 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state183 : signal is "none";
    signal ap_CS_fsm_state184 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state184 : signal is "none";
    signal grp_fu_637_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_661 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal grp_fu_646_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_667 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_CS_fsm_state153 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state153 : signal is "none";
    signal ap_CS_fsm_state167 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state167 : signal is "none";
    signal wah_coeffs_read_reg_1335 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tempo_read_reg_1340 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_samples_read_reg_1345 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_mult_read_reg_1350 : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_zero_threshold_read_reg_1355 : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_max_threshold_read_reg_1360 : STD_LOGIC_VECTOR (31 downto 0);
    signal compression_min_threshold_read_reg_1365 : STD_LOGIC_VECTOR (31 downto 0);
    signal distortion_clip_factor_read_reg_1370 : STD_LOGIC_VECTOR (7 downto 0);
    signal distortion_threshold_read_reg_1375 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln23_fu_674_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln23_reg_1391 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1395 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_1399 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_1403 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal negative_threshold_fu_733_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal negative_threshold_reg_1422 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv7_i_i_i_fu_738_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal conv7_i_i_i_reg_1427 : STD_LOGIC_VECTOR (39 downto 0);
    signal delay_buffer_addr_1_reg_1433 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_658_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv2_i_reg_1438 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_keep_V_reg_1458 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_strb_V_reg_1463 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_user_V_reg_1468 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_id_V_reg_1477 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_dest_V_reg_1482 : STD_LOGIC_VECTOR (5 downto 0);
    signal current_sample_fu_787_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_sample_reg_1487 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln90_fu_793_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln90_reg_1492 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_fu_809_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_reg_1508 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln135_fu_799_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_fu_804_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_27_fu_814_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_27_reg_1513 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_fu_822_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal r_V_35_reg_1523 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ret_V_9_cast_reg_1528 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1049_1_fu_837_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln1049_1_reg_1535 : STD_LOGIC_VECTOR (6 downto 0);
    signal result_2_fu_872_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_fu_880_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal r_V_34_reg_1550 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ret_V_cast_reg_1555 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1049_fu_895_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln1049_reg_1562 : STD_LOGIC_VECTOR (6 downto 0);
    signal result_fu_930_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal or_ln95_fu_939_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal delay_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_buffer_load_reg_1586 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_fu_633_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_i_reg_1591 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_629_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_reg_1596 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal p_Result_35_reg_1601 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal p_Result_36_fu_979_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_36_reg_1606 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_fu_993_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_1611 : STD_LOGIC_VECTOR (0 downto 0);
    signal ush_fu_1011_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_reg_1616 : STD_LOGIC_VECTOR (8 downto 0);
    signal val_fu_1073_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_reg_1621 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal shl_ln222_fu_1101_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal conv_i1_reg_1632 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal grp_fu_653_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_1637 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state144 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state144 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_603_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_1642 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state146 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state146 : signal is "none";
    signal grp_fu_641_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add5_i_reg_1647 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state160 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state160 : signal is "none";
    signal p_Result_37_reg_1652 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state168 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state168 : signal is "none";
    signal val_1_fu_1225_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_1_reg_1657 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_7_fu_1238_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_7_reg_1663 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state169 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state169 : signal is "none";
    signal ap_CS_fsm_state170 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state170 : signal is "none";
    signal grp_fu_1247_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal mul_ln227_reg_1673 : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_CS_fsm_state171 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state171 : signal is "none";
    signal trunc_ln6_reg_1678 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state172 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state172 : signal is "none";
    signal delay_buffer_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_buffer_ce0 : STD_LOGIC;
    signal delay_buffer_we0 : STD_LOGIC;
    signal delay_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wah_values_buffer_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal wah_values_buffer_ce0 : STD_LOGIC;
    signal wah_values_buffer_we0 : STD_LOGIC;
    signal wah_values_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wah_values_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_guitar_effects_Pipeline_2_fu_578_ap_start : STD_LOGIC;
    signal grp_guitar_effects_Pipeline_2_fu_578_ap_done : STD_LOGIC;
    signal grp_guitar_effects_Pipeline_2_fu_578_ap_idle : STD_LOGIC;
    signal grp_guitar_effects_Pipeline_2_fu_578_ap_ready : STD_LOGIC;
    signal grp_guitar_effects_Pipeline_2_fu_578_delay_buffer_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_guitar_effects_Pipeline_2_fu_578_delay_buffer_ce0 : STD_LOGIC;
    signal grp_guitar_effects_Pipeline_2_fu_578_delay_buffer_we0 : STD_LOGIC;
    signal grp_guitar_effects_Pipeline_2_fu_578_delay_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_guitar_effects_Pipeline_3_fu_584_ap_start : STD_LOGIC;
    signal grp_guitar_effects_Pipeline_3_fu_584_ap_done : STD_LOGIC;
    signal grp_guitar_effects_Pipeline_3_fu_584_ap_idle : STD_LOGIC;
    signal grp_guitar_effects_Pipeline_3_fu_584_ap_ready : STD_LOGIC;
    signal grp_guitar_effects_Pipeline_3_fu_584_wah_values_buffer_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_guitar_effects_Pipeline_3_fu_584_wah_values_buffer_ce0 : STD_LOGIC;
    signal grp_guitar_effects_Pipeline_3_fu_584_wah_values_buffer_we0 : STD_LOGIC;
    signal grp_guitar_effects_Pipeline_3_fu_584_wah_values_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compression_fu_590_ap_start : STD_LOGIC;
    signal grp_compression_fu_590_ap_done : STD_LOGIC;
    signal grp_compression_fu_590_ap_idle : STD_LOGIC;
    signal grp_compression_fu_590_ap_ready : STD_LOGIC;
    signal grp_compression_fu_590_values_buffer_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_compression_fu_590_values_buffer_ce0 : STD_LOGIC;
    signal grp_compression_fu_590_values_buffer_we0 : STD_LOGIC;
    signal grp_compression_fu_590_values_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compression_fu_590_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compression_fu_590_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compression_fu_590_grp_fu_633_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compression_fu_590_grp_fu_633_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compression_fu_590_grp_fu_633_p_ce : STD_LOGIC;
    signal grp_compression_fu_590_grp_fu_637_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compression_fu_590_grp_fu_637_p_ce : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_603_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_603_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_603_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_603_ap_ready : STD_LOGIC;
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_ap_start : STD_LOGIC;
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_ap_done : STD_LOGIC;
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_ap_idle : STD_LOGIC;
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_ap_ready : STD_LOGIC;
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_wah_values_buffer_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_wah_values_buffer_ce0 : STD_LOGIC;
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_result_2_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_result_2_out_ap_vld : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (9 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal axilite_out_local_1_reg_435 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_77_reg_449 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_int_reg_463 : STD_LOGIC_VECTOR (31 downto 0);
    signal axilite_out_local_2_reg_477 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal empty_78_reg_488 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_int_3_reg_499 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln100_fu_1080_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_axilite_out_local_3_phi_fu_513_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal axilite_out_local_3_reg_510 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_phi_mux_empty_79_phi_fu_524_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_79_reg_521 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_fu_1093_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_tmp_int_5_phi_fu_536_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_int_5_reg_532 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln105_fu_1281_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_axilite_out_local_4_phi_fu_547_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal axilite_out_local_4_reg_544 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state182 : BOOLEAN;
    signal ap_block_state182_io : BOOLEAN;
    signal ap_phi_mux_empty_81_phi_fu_558_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_81_reg_555 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_tmp_int_7_phi_fu_569_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_int_7_reg_565 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_guitar_effects_Pipeline_2_fu_578_ap_start_reg : STD_LOGIC := '0';
    signal grp_guitar_effects_Pipeline_3_fu_584_ap_start_reg : STD_LOGIC := '0';
    signal grp_compression_fu_590_ap_start_reg : STD_LOGIC := '0';
    signal grp_sin_or_cos_double_s_fu_603_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state145 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state145 : signal is "none";
    signal grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state180 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state180 : signal is "none";
    signal ap_CS_fsm_state181 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state181 : signal is "none";
    signal idxprom_i_cast_fu_745_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln227_fu_1271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal current_sample_1_fu_258 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_262 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_level_1_fu_266 : STD_LOGIC_VECTOR (31 downto 0);
    signal axilite_out_local_0_fu_270 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal grp_fu_633_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_633_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal grp_fu_637_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state154 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state154 : signal is "none";
    signal grp_fu_646_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_646_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state147 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state147 : signal is "none";
    signal ap_CS_fsm_state161 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state161 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal grp_fu_658_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_fu_727_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_727_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_727_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_75_fu_741_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_822_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1049_1_fu_848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_12_fu_853_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_28_fu_841_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1048_1_fu_858_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_13_fu_865_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_880_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1049_fu_906_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_fu_911_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_899_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1048_fu_916_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_11_fu_923_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_fu_958_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xs_exp_V_fu_969_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln346_fu_983_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_fu_987_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1512_fu_1001_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1512_fu_1007_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mantissa_fu_1019_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1488_fu_1032_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_1028_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1488_fu_1035_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_30_fu_1039_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_18_fu_1051_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_31_fu_1045_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln818_fu_1059_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_1063_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_2_fu_1088_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_1_fu_1107_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_38_fu_1129_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_1_fu_1133_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal xs_exp_V_1_fu_1119_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln515_fu_1147_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln515_fu_1151_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1512_2_fu_1165_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_2_fu_1157_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1512_1_fu_1171_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_2_fu_1175_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1488_1_fu_1183_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_1_fu_1143_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln1488_2_fu_1187_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_32_fu_1191_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_22_fu_1203_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_33_fu_1197_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln818_1_fu_1211_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_1215_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_6_fu_1233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1247_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln227_2_fu_1253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln227_fu_1256_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_633_ce : STD_LOGIC;
    signal grp_fu_637_ce : STD_LOGIC;
    signal grp_fu_727_ap_start : STD_LOGIC;
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal grp_fu_727_ap_done : STD_LOGIC;
    signal grp_fu_727_ce : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (183 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ST_fsm_state85_blk : STD_LOGIC;
    signal ap_ST_fsm_state86_blk : STD_LOGIC;
    signal ap_ST_fsm_state87_blk : STD_LOGIC;
    signal ap_ST_fsm_state88_blk : STD_LOGIC;
    signal ap_ST_fsm_state89_blk : STD_LOGIC;
    signal ap_ST_fsm_state90_blk : STD_LOGIC;
    signal ap_ST_fsm_state91_blk : STD_LOGIC;
    signal ap_ST_fsm_state92_blk : STD_LOGIC;
    signal ap_ST_fsm_state93_blk : STD_LOGIC;
    signal ap_ST_fsm_state94_blk : STD_LOGIC;
    signal ap_ST_fsm_state95_blk : STD_LOGIC;
    signal ap_ST_fsm_state96_blk : STD_LOGIC;
    signal ap_ST_fsm_state97_blk : STD_LOGIC;
    signal ap_ST_fsm_state98_blk : STD_LOGIC;
    signal ap_ST_fsm_state99_blk : STD_LOGIC;
    signal ap_ST_fsm_state100_blk : STD_LOGIC;
    signal ap_ST_fsm_state101_blk : STD_LOGIC;
    signal ap_ST_fsm_state102_blk : STD_LOGIC;
    signal ap_ST_fsm_state103_blk : STD_LOGIC;
    signal ap_ST_fsm_state104_blk : STD_LOGIC;
    signal ap_ST_fsm_state105_blk : STD_LOGIC;
    signal ap_ST_fsm_state106_blk : STD_LOGIC;
    signal ap_ST_fsm_state107_blk : STD_LOGIC;
    signal ap_ST_fsm_state108_blk : STD_LOGIC;
    signal ap_ST_fsm_state109_blk : STD_LOGIC;
    signal ap_ST_fsm_state110_blk : STD_LOGIC;
    signal ap_ST_fsm_state111_blk : STD_LOGIC;
    signal ap_ST_fsm_state112_blk : STD_LOGIC;
    signal ap_ST_fsm_state113_blk : STD_LOGIC;
    signal ap_ST_fsm_state114_blk : STD_LOGIC;
    signal ap_ST_fsm_state115_blk : STD_LOGIC;
    signal ap_ST_fsm_state116_blk : STD_LOGIC;
    signal ap_ST_fsm_state117_blk : STD_LOGIC;
    signal ap_ST_fsm_state118_blk : STD_LOGIC;
    signal ap_ST_fsm_state119_blk : STD_LOGIC;
    signal ap_ST_fsm_state120_blk : STD_LOGIC;
    signal ap_ST_fsm_state121_blk : STD_LOGIC;
    signal ap_ST_fsm_state122_blk : STD_LOGIC;
    signal ap_ST_fsm_state123_blk : STD_LOGIC;
    signal ap_ST_fsm_state124_blk : STD_LOGIC;
    signal ap_ST_fsm_state125_blk : STD_LOGIC;
    signal ap_ST_fsm_state126_blk : STD_LOGIC;
    signal ap_ST_fsm_state127_blk : STD_LOGIC;
    signal ap_ST_fsm_state128_blk : STD_LOGIC;
    signal ap_ST_fsm_state129_blk : STD_LOGIC;
    signal ap_ST_fsm_state130_blk : STD_LOGIC;
    signal ap_ST_fsm_state131_blk : STD_LOGIC;
    signal ap_ST_fsm_state132_blk : STD_LOGIC;
    signal ap_ST_fsm_state133_blk : STD_LOGIC;
    signal ap_ST_fsm_state134_blk : STD_LOGIC;
    signal ap_ST_fsm_state135_blk : STD_LOGIC;
    signal ap_ST_fsm_state136_blk : STD_LOGIC;
    signal ap_ST_fsm_state137_blk : STD_LOGIC;
    signal ap_ST_fsm_state138_blk : STD_LOGIC;
    signal ap_ST_fsm_state139_blk : STD_LOGIC;
    signal ap_ST_fsm_state140_blk : STD_LOGIC;
    signal ap_ST_fsm_state141_blk : STD_LOGIC;
    signal ap_ST_fsm_state142_blk : STD_LOGIC;
    signal ap_ST_fsm_state143_blk : STD_LOGIC;
    signal ap_ST_fsm_state144_blk : STD_LOGIC;
    signal ap_ST_fsm_state145_blk : STD_LOGIC;
    signal ap_ST_fsm_state146_blk : STD_LOGIC;
    signal ap_ST_fsm_state147_blk : STD_LOGIC;
    signal ap_ST_fsm_state148_blk : STD_LOGIC;
    signal ap_ST_fsm_state149_blk : STD_LOGIC;
    signal ap_ST_fsm_state150_blk : STD_LOGIC;
    signal ap_ST_fsm_state151_blk : STD_LOGIC;
    signal ap_ST_fsm_state152_blk : STD_LOGIC;
    signal ap_ST_fsm_state153_blk : STD_LOGIC;
    signal ap_ST_fsm_state154_blk : STD_LOGIC;
    signal ap_ST_fsm_state155_blk : STD_LOGIC;
    signal ap_ST_fsm_state156_blk : STD_LOGIC;
    signal ap_ST_fsm_state157_blk : STD_LOGIC;
    signal ap_ST_fsm_state158_blk : STD_LOGIC;
    signal ap_ST_fsm_state159_blk : STD_LOGIC;
    signal ap_ST_fsm_state160_blk : STD_LOGIC;
    signal ap_ST_fsm_state161_blk : STD_LOGIC;
    signal ap_ST_fsm_state162_blk : STD_LOGIC;
    signal ap_ST_fsm_state163_blk : STD_LOGIC;
    signal ap_ST_fsm_state164_blk : STD_LOGIC;
    signal ap_ST_fsm_state165_blk : STD_LOGIC;
    signal ap_ST_fsm_state166_blk : STD_LOGIC;
    signal ap_ST_fsm_state167_blk : STD_LOGIC;
    signal ap_ST_fsm_state168_blk : STD_LOGIC;
    signal ap_ST_fsm_state169_blk : STD_LOGIC;
    signal ap_ST_fsm_state170_blk : STD_LOGIC;
    signal ap_ST_fsm_state171_blk : STD_LOGIC;
    signal ap_ST_fsm_state172_blk : STD_LOGIC;
    signal ap_ST_fsm_state173_blk : STD_LOGIC;
    signal ap_ST_fsm_state174_blk : STD_LOGIC;
    signal ap_ST_fsm_state175_blk : STD_LOGIC;
    signal ap_ST_fsm_state176_blk : STD_LOGIC;
    signal ap_ST_fsm_state177_blk : STD_LOGIC;
    signal ap_ST_fsm_state178_blk : STD_LOGIC;
    signal ap_ST_fsm_state179_blk : STD_LOGIC;
    signal ap_ST_fsm_state180_blk : STD_LOGIC;
    signal ap_ST_fsm_state181_blk : STD_LOGIC;
    signal ap_ST_fsm_state182_blk : STD_LOGIC;
    signal ap_ST_fsm_state183_blk : STD_LOGIC;
    signal ap_ST_fsm_state184_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state184 : BOOLEAN;
    signal regslice_both_INPUT_r_V_data_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_r_TVALID_int_regslice : STD_LOGIC;
    signal INPUT_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_INPUT_r_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_r_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_INPUT_r_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_r_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_r_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_INPUT_r_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_r_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_r_V_user_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TUSER_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_INPUT_r_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_r_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_r_V_last_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_INPUT_r_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_r_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_r_V_id_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TID_int_regslice : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_INPUT_r_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_r_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_r_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_r_TDEST_int_regslice : STD_LOGIC_VECTOR (5 downto 0);
    signal regslice_both_INPUT_r_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_r_V_dest_V_U_ack_in : STD_LOGIC;
    signal OUTPUT_r_TVALID_int_regslice : STD_LOGIC;
    signal OUTPUT_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_last_V_U_apdone_blk : STD_LOGIC;
    signal OUTPUT_r_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_OUTPUT_r_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_condition_2783 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component guitar_effects_guitar_effects_Pipeline_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        delay_buffer_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        delay_buffer_ce0 : OUT STD_LOGIC;
        delay_buffer_we0 : OUT STD_LOGIC;
        delay_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_guitar_effects_Pipeline_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        wah_values_buffer_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        wah_values_buffer_ce0 : OUT STD_LOGIC;
        wah_values_buffer_we0 : OUT STD_LOGIC;
        wah_values_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_compression IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r : IN STD_LOGIC_VECTOR (31 downto 0);
        min_threshold : IN STD_LOGIC_VECTOR (31 downto 0);
        max_threshold : IN STD_LOGIC_VECTOR (31 downto 0);
        zero_threshold : IN STD_LOGIC_VECTOR (31 downto 0);
        current_level_read : IN STD_LOGIC_VECTOR (31 downto 0);
        values_buffer_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        values_buffer_ce0 : OUT STD_LOGIC;
        values_buffer_we0 : OUT STD_LOGIC;
        values_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        current_sample : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_633_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_633_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_633_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_633_p_ce : OUT STD_LOGIC;
        grp_fu_637_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_637_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_637_p_ce : OUT STD_LOGIC );
    end component;


    component guitar_effects_sin_or_cos_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component guitar_effects_guitar_effects_Pipeline_WAH_LOOP IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln227 : IN STD_LOGIC_VECTOR (62 downto 0);
        wah_values_buffer_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        wah_values_buffer_ce0 : OUT STD_LOGIC;
        wah_values_buffer_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        result_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        result_2_out_ap_vld : OUT STD_LOGIC );
    end component;


    component guitar_effects_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_sitofp_32ns_32_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_dadd_64ns_64ns_64_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component guitar_effects_dmul_64ns_64ns_64_7_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component guitar_effects_ddiv_64ns_64ns_64_59_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component guitar_effects_sitodp_32ns_64_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component guitar_effects_srem_32ns_17ns_16_36_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component guitar_effects_mul_32s_8s_40_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component guitar_effects_mul_32s_9ns_41_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (40 downto 0) );
    end component;


    component guitar_effects_compression_buffer_RAM_AUTO_0R0W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_delay_buffer_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_wah_values_buffer_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_control_r_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        axilite_out : IN STD_LOGIC_VECTOR (31 downto 0);
        axilite_out_ap_vld : IN STD_LOGIC;
        control : OUT STD_LOGIC_VECTOR (7 downto 0);
        distortion_threshold : OUT STD_LOGIC_VECTOR (31 downto 0);
        distortion_clip_factor : OUT STD_LOGIC_VECTOR (7 downto 0);
        compression_min_threshold : OUT STD_LOGIC_VECTOR (31 downto 0);
        compression_max_threshold : OUT STD_LOGIC_VECTOR (31 downto 0);
        compression_zero_threshold : OUT STD_LOGIC_VECTOR (31 downto 0);
        delay_mult : OUT STD_LOGIC_VECTOR (31 downto 0);
        delay_samples : OUT STD_LOGIC_VECTOR (31 downto 0);
        tempo : OUT STD_LOGIC_VECTOR (31 downto 0);
        wah_coeffs : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component guitar_effects_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (9 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component guitar_effects_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    compression_buffer_U : component guitar_effects_compression_buffer_RAM_AUTO_0R0W
    generic map (
        DataWidth => 32,
        AddressRange => 441,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_compression_fu_590_values_buffer_address0,
        ce0 => grp_compression_fu_590_values_buffer_ce0,
        we0 => grp_compression_fu_590_values_buffer_we0,
        d0 => grp_compression_fu_590_values_buffer_d0);

    delay_buffer_U : component guitar_effects_delay_buffer_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 44100,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => delay_buffer_address0,
        ce0 => delay_buffer_ce0,
        we0 => delay_buffer_we0,
        d0 => delay_buffer_d0,
        q0 => delay_buffer_q0);

    wah_values_buffer_U : component guitar_effects_wah_values_buffer_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => wah_values_buffer_address0,
        ce0 => wah_values_buffer_ce0,
        we0 => wah_values_buffer_we0,
        d0 => wah_values_buffer_d0,
        q0 => wah_values_buffer_q0);

    grp_guitar_effects_Pipeline_2_fu_578 : component guitar_effects_guitar_effects_Pipeline_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_guitar_effects_Pipeline_2_fu_578_ap_start,
        ap_done => grp_guitar_effects_Pipeline_2_fu_578_ap_done,
        ap_idle => grp_guitar_effects_Pipeline_2_fu_578_ap_idle,
        ap_ready => grp_guitar_effects_Pipeline_2_fu_578_ap_ready,
        delay_buffer_address0 => grp_guitar_effects_Pipeline_2_fu_578_delay_buffer_address0,
        delay_buffer_ce0 => grp_guitar_effects_Pipeline_2_fu_578_delay_buffer_ce0,
        delay_buffer_we0 => grp_guitar_effects_Pipeline_2_fu_578_delay_buffer_we0,
        delay_buffer_d0 => grp_guitar_effects_Pipeline_2_fu_578_delay_buffer_d0);

    grp_guitar_effects_Pipeline_3_fu_584 : component guitar_effects_guitar_effects_Pipeline_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_guitar_effects_Pipeline_3_fu_584_ap_start,
        ap_done => grp_guitar_effects_Pipeline_3_fu_584_ap_done,
        ap_idle => grp_guitar_effects_Pipeline_3_fu_584_ap_idle,
        ap_ready => grp_guitar_effects_Pipeline_3_fu_584_ap_ready,
        wah_values_buffer_address0 => grp_guitar_effects_Pipeline_3_fu_584_wah_values_buffer_address0,
        wah_values_buffer_ce0 => grp_guitar_effects_Pipeline_3_fu_584_wah_values_buffer_ce0,
        wah_values_buffer_we0 => grp_guitar_effects_Pipeline_3_fu_584_wah_values_buffer_we0,
        wah_values_buffer_d0 => grp_guitar_effects_Pipeline_3_fu_584_wah_values_buffer_d0);

    grp_compression_fu_590 : component guitar_effects_compression
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_compression_fu_590_ap_start,
        ap_done => grp_compression_fu_590_ap_done,
        ap_idle => grp_compression_fu_590_ap_idle,
        ap_ready => grp_compression_fu_590_ap_ready,
        input_r => tmp_int_reg_463,
        min_threshold => compression_min_threshold_read_reg_1365,
        max_threshold => compression_max_threshold_read_reg_1360,
        zero_threshold => compression_zero_threshold_read_reg_1355,
        current_level_read => current_level_1_fu_266,
        values_buffer_address0 => grp_compression_fu_590_values_buffer_address0,
        values_buffer_ce0 => grp_compression_fu_590_values_buffer_ce0,
        values_buffer_we0 => grp_compression_fu_590_values_buffer_we0,
        values_buffer_d0 => grp_compression_fu_590_values_buffer_d0,
        current_sample => current_sample_1_fu_258,
        ap_return_0 => grp_compression_fu_590_ap_return_0,
        ap_return_1 => grp_compression_fu_590_ap_return_1,
        grp_fu_633_p_din0 => grp_compression_fu_590_grp_fu_633_p_din0,
        grp_fu_633_p_din1 => grp_compression_fu_590_grp_fu_633_p_din1,
        grp_fu_633_p_dout0 => grp_fu_633_p2,
        grp_fu_633_p_ce => grp_compression_fu_590_grp_fu_633_p_ce,
        grp_fu_637_p_din0 => grp_compression_fu_590_grp_fu_637_p_din0,
        grp_fu_637_p_dout0 => grp_fu_637_p1,
        grp_fu_637_p_ce => grp_compression_fu_590_grp_fu_637_p_ce);

    grp_sin_or_cos_double_s_fu_603 : component guitar_effects_sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sin_or_cos_double_s_fu_603_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_603_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_603_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_603_ap_ready,
        t_in => x_assign_reg_1637,
        ap_return => grp_sin_or_cos_double_s_fu_603_ap_return);

    grp_guitar_effects_Pipeline_WAH_LOOP_fu_620 : component guitar_effects_guitar_effects_Pipeline_WAH_LOOP
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_ap_start,
        ap_done => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_ap_done,
        ap_idle => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_ap_idle,
        ap_ready => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_ap_ready,
        m_axi_gmem_AWVALID => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => gmem_RFIFONUM,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        sext_ln227 => trunc_ln6_reg_1678,
        wah_values_buffer_address0 => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_wah_values_buffer_address0,
        wah_values_buffer_ce0 => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_wah_values_buffer_ce0,
        wah_values_buffer_q0 => wah_values_buffer_q0,
        result_2_out => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_result_2_out,
        result_2_out_ap_vld => grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_result_2_out_ap_vld);

    control_r_s_axi_U : component guitar_effects_control_r_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_R_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_R_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_r_AWVALID,
        AWREADY => s_axi_control_r_AWREADY,
        AWADDR => s_axi_control_r_AWADDR,
        WVALID => s_axi_control_r_WVALID,
        WREADY => s_axi_control_r_WREADY,
        WDATA => s_axi_control_r_WDATA,
        WSTRB => s_axi_control_r_WSTRB,
        ARVALID => s_axi_control_r_ARVALID,
        ARREADY => s_axi_control_r_ARREADY,
        ARADDR => s_axi_control_r_ARADDR,
        RVALID => s_axi_control_r_RVALID,
        RREADY => s_axi_control_r_RREADY,
        RDATA => s_axi_control_r_RDATA,
        RRESP => s_axi_control_r_RRESP,
        BVALID => s_axi_control_r_BVALID,
        BREADY => s_axi_control_r_BREADY,
        BRESP => s_axi_control_r_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        axilite_out => ap_phi_mux_axilite_out_local_4_phi_fu_547_p4,
        axilite_out_ap_vld => axilite_out_ap_vld,
        control => control,
        distortion_threshold => distortion_threshold,
        distortion_clip_factor => distortion_clip_factor,
        compression_min_threshold => compression_min_threshold,
        compression_max_threshold => compression_max_threshold,
        compression_zero_threshold => compression_zero_threshold,
        delay_mult => delay_mult,
        delay_samples => delay_samples,
        tempo => tempo,
        wah_coeffs => wah_coeffs);

    gmem_m_axi_U : component guitar_effects_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 10,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        USER_DW => 16,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARLEN => gmem_ARLEN,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => gmem_BVALID,
        I_BREADY => ap_const_logic_0);

    fadd_32ns_32ns_32_5_full_dsp_1_U55 : component guitar_effects_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_661,
        din1 => mul_i_reg_1591,
        ce => ap_const_logic_1,
        dout => grp_fu_629_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U56 : component guitar_effects_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_633_p0,
        din1 => grp_fu_633_p1,
        ce => grp_fu_633_ce,
        dout => grp_fu_633_p2);

    sitofp_32ns_32_6_no_dsp_1_U57 : component guitar_effects_sitofp_32ns_32_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_637_p0,
        ce => grp_fu_637_ce,
        dout => grp_fu_637_p1);

    dadd_64ns_64ns_64_7_full_dsp_1_U58 : component guitar_effects_dadd_64ns_64ns_64_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_667,
        din1 => ap_const_lv64_3FE0000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_641_p2);

    dmul_64ns_64ns_64_7_max_dsp_1_U59 : component guitar_effects_dmul_64ns_64ns_64_7_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_646_p0,
        din1 => grp_fu_646_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_646_p2);

    ddiv_64ns_64ns_64_59_no_dsp_1_U60 : component guitar_effects_ddiv_64ns_64ns_64_59_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 59,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_667,
        din1 => ap_const_lv64_40F5888000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_653_p2);

    sitodp_32ns_64_6_no_dsp_1_U61 : component guitar_effects_sitodp_32ns_64_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_658_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_658_p1);

    srem_32ns_17ns_16_36_seq_1_U62 : component guitar_effects_srem_32ns_17ns_16_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 17,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_727_ap_start,
        done => grp_fu_727_ap_done,
        din0 => grp_fu_727_p0,
        din1 => grp_fu_727_p1,
        ce => grp_fu_727_ce,
        dout => grp_fu_727_p2);

    mul_32s_8s_40_2_1_U63 : component guitar_effects_mul_32s_8s_40_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => r_V_reg_1508,
        din1 => grp_fu_822_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_822_p2);

    mul_32s_8s_40_2_1_U64 : component guitar_effects_mul_32s_8s_40_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => r_V_27_reg_1513,
        din1 => grp_fu_880_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_880_p2);

    mul_32s_9ns_41_2_1_U65 : component guitar_effects_mul_32s_9ns_41_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 9,
        dout_WIDTH => 41)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => result_V_7_reg_1663,
        din1 => grp_fu_1247_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1247_p2);

    regslice_both_INPUT_r_V_data_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TDATA,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_data_V_U_ack_in,
        data_out => INPUT_r_TDATA_int_regslice,
        vld_out => INPUT_r_TVALID_int_regslice,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_data_V_U_apdone_blk);

    regslice_both_INPUT_r_V_keep_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TKEEP,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_keep_V_U_ack_in,
        data_out => INPUT_r_TKEEP_int_regslice,
        vld_out => regslice_both_INPUT_r_V_keep_V_U_vld_out,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_keep_V_U_apdone_blk);

    regslice_both_INPUT_r_V_strb_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TSTRB,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_strb_V_U_ack_in,
        data_out => INPUT_r_TSTRB_int_regslice,
        vld_out => regslice_both_INPUT_r_V_strb_V_U_vld_out,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_strb_V_U_apdone_blk);

    regslice_both_INPUT_r_V_user_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TUSER,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_user_V_U_ack_in,
        data_out => INPUT_r_TUSER_int_regslice,
        vld_out => regslice_both_INPUT_r_V_user_V_U_vld_out,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_user_V_U_apdone_blk);

    regslice_both_INPUT_r_V_last_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TLAST,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_last_V_U_ack_in,
        data_out => INPUT_r_TLAST_int_regslice,
        vld_out => regslice_both_INPUT_r_V_last_V_U_vld_out,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_last_V_U_apdone_blk);

    regslice_both_INPUT_r_V_id_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TID,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_id_V_U_ack_in,
        data_out => INPUT_r_TID_int_regslice,
        vld_out => regslice_both_INPUT_r_V_id_V_U_vld_out,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_id_V_U_apdone_blk);

    regslice_both_INPUT_r_V_dest_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_r_TDEST,
        vld_in => INPUT_r_TVALID,
        ack_in => regslice_both_INPUT_r_V_dest_V_U_ack_in,
        data_out => INPUT_r_TDEST_int_regslice,
        vld_out => regslice_both_INPUT_r_V_dest_V_U_vld_out,
        ack_out => INPUT_r_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_r_V_dest_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_data_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_phi_mux_tmp_int_7_phi_fu_569_p4,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => OUTPUT_r_TREADY_int_regslice,
        data_out => OUTPUT_r_TDATA,
        vld_out => regslice_both_OUTPUT_r_V_data_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_data_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_keep_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_keep_V_reg_1458,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_keep_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TKEEP,
        vld_out => regslice_both_OUTPUT_r_V_keep_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_keep_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_strb_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_strb_V_reg_1463,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_strb_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TSTRB,
        vld_out => regslice_both_OUTPUT_r_V_strb_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_strb_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_user_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_user_V_reg_1468,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_user_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TUSER,
        vld_out => regslice_both_OUTPUT_r_V_user_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_user_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_last_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => OUTPUT_r_TLAST_int_regslice,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_last_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TLAST,
        vld_out => regslice_both_OUTPUT_r_V_last_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_last_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_id_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_id_V_reg_1477,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_id_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TID,
        vld_out => regslice_both_OUTPUT_r_V_id_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_id_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_dest_V_U : component guitar_effects_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_dest_V_reg_1482,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_dest_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TDEST,
        vld_out => regslice_both_OUTPUT_r_V_dest_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_compression_fu_590_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_compression_fu_590_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_11_reg_1399 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                    grp_compression_fu_590_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_compression_fu_590_ap_ready = ap_const_logic_1)) then 
                    grp_compression_fu_590_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_guitar_effects_Pipeline_2_fu_578_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_guitar_effects_Pipeline_2_fu_578_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    grp_guitar_effects_Pipeline_2_fu_578_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_guitar_effects_Pipeline_2_fu_578_ap_ready = ap_const_logic_1)) then 
                    grp_guitar_effects_Pipeline_2_fu_578_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_guitar_effects_Pipeline_3_fu_584_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_guitar_effects_Pipeline_3_fu_584_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    grp_guitar_effects_Pipeline_3_fu_584_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_guitar_effects_Pipeline_3_fu_584_ap_ready = ap_const_logic_1)) then 
                    grp_guitar_effects_Pipeline_3_fu_584_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state180)) then 
                    grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_ap_ready = ap_const_logic_1)) then 
                    grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_603_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sin_or_cos_double_s_fu_603_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state145)) then 
                    grp_sin_or_cos_double_s_fu_603_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_603_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_603_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    axilite_out_local_0_fu_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                axilite_out_local_0_fu_270 <= ap_const_lv32_0;
            elsif ((not(((ap_const_boolean_1 = ap_block_state182_io) or ((tmp_last_V_reg_1473 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_1473 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) and (tmp_last_V_reg_1473 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state182))) then 
                axilite_out_local_0_fu_270 <= ap_phi_mux_axilite_out_local_4_phi_fu_547_p4;
            end if; 
        end if;
    end process;

    axilite_out_local_1_reg_435_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln137_fu_804_p2 = ap_const_lv1_0) and (icmp_ln135_fu_799_p2 = ap_const_lv1_0) and (tmp_reg_1395 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice))) then 
                axilite_out_local_1_reg_435 <= or_ln90_fu_793_p2;
            elsif (((tmp_reg_1395 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice))) then 
                axilite_out_local_1_reg_435 <= axilite_out_local_0_fu_270;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                axilite_out_local_1_reg_435 <= or_ln90_reg_1492;
            end if; 
        end if;
    end process;

    axilite_out_local_2_reg_477_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_11_reg_1399 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                axilite_out_local_2_reg_477 <= axilite_out_local_1_reg_435;
            elsif (((grp_compression_fu_590_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                axilite_out_local_2_reg_477 <= or_ln95_fu_939_p2;
            end if; 
        end if;
    end process;

    axilite_out_local_3_reg_510_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_12_reg_1403 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                axilite_out_local_3_reg_510 <= axilite_out_local_2_reg_477;
            elsif (((tmp_12_reg_1403 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
                axilite_out_local_3_reg_510 <= or_ln100_fu_1080_p2;
            end if; 
        end if;
    end process;

    axilite_out_local_4_reg_544_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln23_reg_1391 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
                axilite_out_local_4_reg_544 <= ap_phi_mux_axilite_out_local_3_phi_fu_513_p4;
            elsif ((not(((ap_const_boolean_1 = ap_block_state182_io) or ((tmp_last_V_reg_1473 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_1473 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) and (trunc_ln23_reg_1391 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state182))) then 
                axilite_out_local_4_reg_544 <= or_ln105_fu_1281_p2;
            end if; 
        end if;
    end process;

    current_level_1_fu_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                current_level_1_fu_266 <= ap_const_lv32_0;
            elsif (((grp_compression_fu_590_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                current_level_1_fu_266 <= grp_compression_fu_590_ap_return_1;
            end if; 
        end if;
    end process;

    current_sample_1_fu_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                current_sample_1_fu_258 <= ap_const_lv32_0;
            elsif ((not(((ap_const_boolean_1 = ap_block_state182_io) or ((tmp_last_V_reg_1473 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_1473 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) and (tmp_last_V_reg_1473 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state182))) then 
                current_sample_1_fu_258 <= current_sample_reg_1487;
            end if; 
        end if;
    end process;

    empty_77_reg_449_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln137_fu_804_p2 = ap_const_lv1_0) and (icmp_ln135_fu_799_p2 = ap_const_lv1_0) and (tmp_reg_1395 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice))) then 
                empty_77_reg_449 <= or_ln90_fu_793_p2;
            elsif (((tmp_reg_1395 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice))) then 
                empty_77_reg_449 <= empty_fu_262;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                empty_77_reg_449 <= or_ln90_reg_1492;
            end if; 
        end if;
    end process;

    empty_78_reg_488_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_11_reg_1399 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                empty_78_reg_488 <= empty_77_reg_449;
            elsif (((grp_compression_fu_590_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                empty_78_reg_488 <= or_ln95_fu_939_p2;
            end if; 
        end if;
    end process;

    empty_79_reg_521_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_12_reg_1403 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                empty_79_reg_521 <= empty_78_reg_488;
            elsif (((tmp_12_reg_1403 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
                empty_79_reg_521 <= or_ln100_fu_1080_p2;
            end if; 
        end if;
    end process;

    empty_81_reg_555_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln23_reg_1391 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
                empty_81_reg_555 <= ap_phi_mux_empty_79_phi_fu_524_p4;
            elsif ((not(((ap_const_boolean_1 = ap_block_state182_io) or ((tmp_last_V_reg_1473 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_1473 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) and (trunc_ln23_reg_1391 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state182))) then 
                empty_81_reg_555 <= or_ln105_fu_1281_p2;
            end if; 
        end if;
    end process;

    empty_fu_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                empty_fu_262 <= ap_const_lv32_0;
            elsif ((not(((ap_const_boolean_1 = ap_block_state182_io) or ((tmp_last_V_reg_1473 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_1473 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) and (tmp_last_V_reg_1473 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state182))) then 
                empty_fu_262 <= ap_phi_mux_empty_81_phi_fu_558_p4;
            end if; 
        end if;
    end process;

    tmp_int_3_reg_499_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_11_reg_1399 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                tmp_int_3_reg_499 <= tmp_int_reg_463;
            elsif (((grp_compression_fu_590_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                tmp_int_3_reg_499 <= grp_compression_fu_590_ap_return_0;
            end if; 
        end if;
    end process;

    tmp_int_5_reg_532_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_12_reg_1403 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                tmp_int_5_reg_532 <= tmp_int_3_reg_499;
            elsif (((tmp_12_reg_1403 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
                tmp_int_5_reg_532 <= result_V_fu_1093_p3;
            end if; 
        end if;
    end process;

    tmp_int_7_reg_565_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln23_reg_1391 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
                tmp_int_7_reg_565 <= ap_phi_mux_tmp_int_5_phi_fu_536_p4;
            elsif ((not(((ap_const_boolean_1 = ap_block_state182_io) or ((tmp_last_V_reg_1473 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_1473 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) and (trunc_ln23_reg_1391 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state182))) then 
                tmp_int_7_reg_565 <= grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_result_2_out;
            end if; 
        end if;
    end process;

    tmp_int_reg_463_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln137_fu_804_p2 = ap_const_lv1_0) and (icmp_ln135_fu_799_p2 = ap_const_lv1_0) and (tmp_reg_1395 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice)) or ((tmp_reg_1395 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice)))) then 
                tmp_int_reg_463 <= INPUT_r_TDATA_int_regslice;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                tmp_int_reg_463 <= result_2_fu_872_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                tmp_int_reg_463 <= result_fu_930_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state160)) then
                add5_i_reg_1647 <= grp_fu_641_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                compression_max_threshold_read_reg_1360 <= compression_max_threshold;
                compression_min_threshold_read_reg_1365 <= compression_min_threshold;
                compression_zero_threshold_read_reg_1355 <= compression_zero_threshold;
                delay_mult_read_reg_1350 <= delay_mult;
                delay_samples_read_reg_1345 <= delay_samples;
                distortion_clip_factor_read_reg_1370 <= distortion_clip_factor;
                distortion_threshold_read_reg_1375 <= distortion_threshold;
                tempo_read_reg_1340 <= tempo;
                tmp_11_reg_1399 <= control(2 downto 2);
                tmp_12_reg_1403 <= control(1 downto 1);
                tmp_reg_1395 <= control(3 downto 3);
                trunc_ln23_reg_1391 <= trunc_ln23_fu_674_p1;
                wah_coeffs_read_reg_1335 <= wah_coeffs;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                conv2_i_reg_1438 <= grp_fu_658_p1;
                conv7_i_i_i_reg_1427 <= conv7_i_i_i_fu_738_p1;
                delay_buffer_addr_1_reg_1433 <= idxprom_i_cast_fu_745_p1(16 - 1 downto 0);
                negative_threshold_reg_1422 <= negative_threshold_fu_733_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                conv_i1_reg_1632 <= grp_fu_658_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                current_sample_reg_1487 <= current_sample_fu_787_p2;
                tmp_dest_V_reg_1482 <= INPUT_r_TDEST_int_regslice;
                tmp_id_V_reg_1477 <= INPUT_r_TID_int_regslice;
                tmp_keep_V_reg_1458 <= INPUT_r_TKEEP_int_regslice;
                tmp_last_V_reg_1473 <= INPUT_r_TLAST_int_regslice;
                tmp_strb_V_reg_1463 <= INPUT_r_TSTRB_int_regslice;
                tmp_user_V_reg_1468 <= INPUT_r_TUSER_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                dc_reg_1596 <= grp_fu_629_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                delay_buffer_load_reg_1586 <= delay_buffer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                isNeg_reg_1611 <= add_ln346_fu_987_p2(8 downto 8);
                p_Result_35_reg_1601 <= data_V_fu_958_p1(31 downto 31);
                p_Result_36_reg_1606 <= p_Result_36_fu_979_p1;
                ush_reg_1616 <= ush_fu_1011_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then
                mul_i_reg_1591 <= grp_fu_633_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state171)) then
                mul_ln227_reg_1673 <= grp_fu_1247_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_1395 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    or_ln90_reg_1492(2 downto 0) <= or_ln90_fu_793_p2(2 downto 0);    or_ln90_reg_1492(31 downto 4) <= or_ln90_fu_793_p2(31 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state168)) then
                p_Result_37_reg_1652 <= data_V_1_fu_1107_p1(63 downto 63);
                val_1_reg_1657 <= val_1_fu_1225_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln135_fu_799_p2 = ap_const_lv1_1) and (tmp_reg_1395 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                r_V_27_reg_1513 <= r_V_27_fu_814_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                r_V_34_reg_1550 <= grp_fu_880_p2;
                ret_V_cast_reg_1555 <= grp_fu_880_p2(38 downto 7);
                trunc_ln1049_reg_1562 <= trunc_ln1049_fu_895_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                r_V_35_reg_1523 <= grp_fu_822_p2;
                ret_V_9_cast_reg_1528 <= grp_fu_822_p2(38 downto 7);
                trunc_ln1049_1_reg_1535 <= trunc_ln1049_1_fu_837_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln137_fu_804_p2 = ap_const_lv1_1) and (icmp_ln135_fu_799_p2 = ap_const_lv1_0) and (tmp_reg_1395 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                r_V_reg_1508 <= r_V_fu_809_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state54))) then
                reg_661 <= grp_fu_637_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state167) or (ap_const_logic_1 = ap_CS_fsm_state153) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state78))) then
                reg_667 <= grp_fu_646_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state169)) then
                result_V_7_reg_1663 <= result_V_7_fu_1238_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state146)) then
                tmp_1_reg_1642 <= grp_sin_or_cos_double_s_fu_603_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state172)) then
                trunc_ln6_reg_1678 <= add_ln227_fu_1256_p2(63 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then
                val_reg_1621 <= val_fu_1073_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state144)) then
                x_assign_reg_1637 <= grp_fu_653_p2;
            end if;
        end if;
    end process;
    or_ln90_reg_1492(3) <= '1';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state173, ap_CS_fsm_state38, ap_CS_fsm_state182, tmp_last_V_reg_1473, ap_CS_fsm_state183, ap_CS_fsm_state184, trunc_ln23_reg_1391, tmp_reg_1395, tmp_11_reg_1399, tmp_12_reg_1403, ap_CS_fsm_state2, icmp_ln135_fu_799_p2, icmp_ln137_fu_804_p2, ap_CS_fsm_state46, ap_CS_fsm_state66, ap_CS_fsm_state146, grp_compression_fu_590_ap_done, grp_sin_or_cos_double_s_fu_603_ap_done, grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_ap_done, gmem_ARREADY, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_block_state182_io, ap_CS_fsm_state181, ap_block_state2_on_subcall_done, regslice_both_OUTPUT_r_V_data_V_U_apdone_blk, INPUT_r_TVALID_int_regslice, OUTPUT_r_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((icmp_ln137_fu_804_p2 = ap_const_lv1_1) and (icmp_ln135_fu_799_p2 = ap_const_lv1_0) and (tmp_reg_1395 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                elsif (((icmp_ln135_fu_799_p2 = ap_const_lv1_1) and (tmp_reg_1395 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state38) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice) and ((tmp_reg_1395 = ap_const_lv1_0) or ((icmp_ln137_fu_804_p2 = ap_const_lv1_0) and (icmp_ln135_fu_799_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                if (((tmp_11_reg_1399 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state46 => 
                if (((grp_compression_fu_590_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                if (((tmp_12_reg_1403 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                if (((trunc_ln23_reg_1391 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                    ap_NS_fsm <= ap_ST_fsm_state182;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state133;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_state134;
            when ap_ST_fsm_state134 => 
                ap_NS_fsm <= ap_ST_fsm_state135;
            when ap_ST_fsm_state135 => 
                ap_NS_fsm <= ap_ST_fsm_state136;
            when ap_ST_fsm_state136 => 
                ap_NS_fsm <= ap_ST_fsm_state137;
            when ap_ST_fsm_state137 => 
                ap_NS_fsm <= ap_ST_fsm_state138;
            when ap_ST_fsm_state138 => 
                ap_NS_fsm <= ap_ST_fsm_state139;
            when ap_ST_fsm_state139 => 
                ap_NS_fsm <= ap_ST_fsm_state140;
            when ap_ST_fsm_state140 => 
                ap_NS_fsm <= ap_ST_fsm_state141;
            when ap_ST_fsm_state141 => 
                ap_NS_fsm <= ap_ST_fsm_state142;
            when ap_ST_fsm_state142 => 
                ap_NS_fsm <= ap_ST_fsm_state143;
            when ap_ST_fsm_state143 => 
                ap_NS_fsm <= ap_ST_fsm_state144;
            when ap_ST_fsm_state144 => 
                ap_NS_fsm <= ap_ST_fsm_state145;
            when ap_ST_fsm_state145 => 
                ap_NS_fsm <= ap_ST_fsm_state146;
            when ap_ST_fsm_state146 => 
                if (((grp_sin_or_cos_double_s_fu_603_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state146))) then
                    ap_NS_fsm <= ap_ST_fsm_state147;
                else
                    ap_NS_fsm <= ap_ST_fsm_state146;
                end if;
            when ap_ST_fsm_state147 => 
                ap_NS_fsm <= ap_ST_fsm_state148;
            when ap_ST_fsm_state148 => 
                ap_NS_fsm <= ap_ST_fsm_state149;
            when ap_ST_fsm_state149 => 
                ap_NS_fsm <= ap_ST_fsm_state150;
            when ap_ST_fsm_state150 => 
                ap_NS_fsm <= ap_ST_fsm_state151;
            when ap_ST_fsm_state151 => 
                ap_NS_fsm <= ap_ST_fsm_state152;
            when ap_ST_fsm_state152 => 
                ap_NS_fsm <= ap_ST_fsm_state153;
            when ap_ST_fsm_state153 => 
                ap_NS_fsm <= ap_ST_fsm_state154;
            when ap_ST_fsm_state154 => 
                ap_NS_fsm <= ap_ST_fsm_state155;
            when ap_ST_fsm_state155 => 
                ap_NS_fsm <= ap_ST_fsm_state156;
            when ap_ST_fsm_state156 => 
                ap_NS_fsm <= ap_ST_fsm_state157;
            when ap_ST_fsm_state157 => 
                ap_NS_fsm <= ap_ST_fsm_state158;
            when ap_ST_fsm_state158 => 
                ap_NS_fsm <= ap_ST_fsm_state159;
            when ap_ST_fsm_state159 => 
                ap_NS_fsm <= ap_ST_fsm_state160;
            when ap_ST_fsm_state160 => 
                ap_NS_fsm <= ap_ST_fsm_state161;
            when ap_ST_fsm_state161 => 
                ap_NS_fsm <= ap_ST_fsm_state162;
            when ap_ST_fsm_state162 => 
                ap_NS_fsm <= ap_ST_fsm_state163;
            when ap_ST_fsm_state163 => 
                ap_NS_fsm <= ap_ST_fsm_state164;
            when ap_ST_fsm_state164 => 
                ap_NS_fsm <= ap_ST_fsm_state165;
            when ap_ST_fsm_state165 => 
                ap_NS_fsm <= ap_ST_fsm_state166;
            when ap_ST_fsm_state166 => 
                ap_NS_fsm <= ap_ST_fsm_state167;
            when ap_ST_fsm_state167 => 
                ap_NS_fsm <= ap_ST_fsm_state168;
            when ap_ST_fsm_state168 => 
                ap_NS_fsm <= ap_ST_fsm_state169;
            when ap_ST_fsm_state169 => 
                ap_NS_fsm <= ap_ST_fsm_state170;
            when ap_ST_fsm_state170 => 
                ap_NS_fsm <= ap_ST_fsm_state171;
            when ap_ST_fsm_state171 => 
                ap_NS_fsm <= ap_ST_fsm_state172;
            when ap_ST_fsm_state172 => 
                ap_NS_fsm <= ap_ST_fsm_state173;
            when ap_ST_fsm_state173 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state173))) then
                    ap_NS_fsm <= ap_ST_fsm_state174;
                else
                    ap_NS_fsm <= ap_ST_fsm_state173;
                end if;
            when ap_ST_fsm_state174 => 
                ap_NS_fsm <= ap_ST_fsm_state175;
            when ap_ST_fsm_state175 => 
                ap_NS_fsm <= ap_ST_fsm_state176;
            when ap_ST_fsm_state176 => 
                ap_NS_fsm <= ap_ST_fsm_state177;
            when ap_ST_fsm_state177 => 
                ap_NS_fsm <= ap_ST_fsm_state178;
            when ap_ST_fsm_state178 => 
                ap_NS_fsm <= ap_ST_fsm_state179;
            when ap_ST_fsm_state179 => 
                ap_NS_fsm <= ap_ST_fsm_state180;
            when ap_ST_fsm_state180 => 
                ap_NS_fsm <= ap_ST_fsm_state181;
            when ap_ST_fsm_state181 => 
                if (((grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state181))) then
                    ap_NS_fsm <= ap_ST_fsm_state182;
                else
                    ap_NS_fsm <= ap_ST_fsm_state181;
                end if;
            when ap_ST_fsm_state182 => 
                if ((not(((ap_const_boolean_1 = ap_block_state182_io) or ((tmp_last_V_reg_1473 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_1473 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) and (tmp_last_V_reg_1473 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state182))) then
                    ap_NS_fsm <= ap_ST_fsm_state184;
                elsif ((not(((ap_const_boolean_1 = ap_block_state182_io) or ((tmp_last_V_reg_1473 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_1473 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) and (tmp_last_V_reg_1473 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state182))) then
                    ap_NS_fsm <= ap_ST_fsm_state183;
                else
                    ap_NS_fsm <= ap_ST_fsm_state182;
                end if;
            when ap_ST_fsm_state183 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state183) and (ap_const_logic_1 = OUTPUT_r_TREADY_int_regslice))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state183;
                end if;
            when ap_ST_fsm_state184 => 
                if ((not(((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) or (regslice_both_OUTPUT_r_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state184))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state184;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    INPUT_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state38, INPUT_r_TVALID_int_regslice)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            INPUT_r_TDATA_blk_n <= INPUT_r_TVALID_int_regslice;
        else 
            INPUT_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    INPUT_r_TREADY <= regslice_both_INPUT_r_V_data_V_U_ack_in;

    INPUT_r_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state38, INPUT_r_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) and (ap_const_logic_1 = INPUT_r_TVALID_int_regslice))) then 
            INPUT_r_TREADY_int_regslice <= ap_const_logic_1;
        else 
            INPUT_r_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state182, tmp_last_V_reg_1473, ap_CS_fsm_state183, ap_CS_fsm_state184, OUTPUT_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state184) or (ap_const_logic_1 = ap_CS_fsm_state183) or ((tmp_last_V_reg_1473 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state182)) or ((tmp_last_V_reg_1473 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state182)))) then 
            OUTPUT_r_TDATA_blk_n <= OUTPUT_r_TREADY_int_regslice;
        else 
            OUTPUT_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    OUTPUT_r_TLAST_int_regslice_assign_proc : process(tmp_last_V_reg_1473, ap_condition_2783)
    begin
        if ((ap_const_boolean_1 = ap_condition_2783)) then
            if ((tmp_last_V_reg_1473 = ap_const_lv1_1)) then 
                OUTPUT_r_TLAST_int_regslice <= ap_const_lv1_1;
            elsif ((tmp_last_V_reg_1473 = ap_const_lv1_0)) then 
                OUTPUT_r_TLAST_int_regslice <= ap_const_lv1_0;
            else 
                OUTPUT_r_TLAST_int_regslice <= "X";
            end if;
        else 
            OUTPUT_r_TLAST_int_regslice <= "X";
        end if; 
    end process;

    OUTPUT_r_TVALID <= regslice_both_OUTPUT_r_V_data_V_U_vld_out;

    OUTPUT_r_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state182, tmp_last_V_reg_1473, ap_block_state182_io, OUTPUT_r_TREADY_int_regslice)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state182_io) or ((tmp_last_V_reg_1473 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_1473 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) and (tmp_last_V_reg_1473 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state182)) or (not(((ap_const_boolean_1 = ap_block_state182_io) or ((tmp_last_V_reg_1473 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_1473 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) and (tmp_last_V_reg_1473 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state182)))) then 
            OUTPUT_r_TVALID_int_regslice <= ap_const_logic_1;
        else 
            OUTPUT_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    add_ln227_fu_1256_p2 <= std_logic_vector(signed(sext_ln227_2_fu_1253_p1) + signed(wah_coeffs_read_reg_1335));
    add_ln346_fu_987_p2 <= std_logic_vector(unsigned(zext_ln346_fu_983_p1) + unsigned(ap_const_lv9_181));
    add_ln515_fu_1151_p2 <= std_logic_vector(unsigned(zext_ln515_fu_1147_p1) + unsigned(ap_const_lv12_C01));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state144 <= ap_CS_fsm(143);
    ap_CS_fsm_state145 <= ap_CS_fsm(144);
    ap_CS_fsm_state146 <= ap_CS_fsm(145);
    ap_CS_fsm_state147 <= ap_CS_fsm(146);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state153 <= ap_CS_fsm(152);
    ap_CS_fsm_state154 <= ap_CS_fsm(153);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state160 <= ap_CS_fsm(159);
    ap_CS_fsm_state161 <= ap_CS_fsm(160);
    ap_CS_fsm_state167 <= ap_CS_fsm(166);
    ap_CS_fsm_state168 <= ap_CS_fsm(167);
    ap_CS_fsm_state169 <= ap_CS_fsm(168);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state170 <= ap_CS_fsm(169);
    ap_CS_fsm_state171 <= ap_CS_fsm(170);
    ap_CS_fsm_state172 <= ap_CS_fsm(171);
    ap_CS_fsm_state173 <= ap_CS_fsm(172);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state180 <= ap_CS_fsm(179);
    ap_CS_fsm_state181 <= ap_CS_fsm(180);
    ap_CS_fsm_state182 <= ap_CS_fsm(181);
    ap_CS_fsm_state183 <= ap_CS_fsm(182);
    ap_CS_fsm_state184 <= ap_CS_fsm(183);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state100_blk <= ap_const_logic_0;
    ap_ST_fsm_state101_blk <= ap_const_logic_0;
    ap_ST_fsm_state102_blk <= ap_const_logic_0;
    ap_ST_fsm_state103_blk <= ap_const_logic_0;
    ap_ST_fsm_state104_blk <= ap_const_logic_0;
    ap_ST_fsm_state105_blk <= ap_const_logic_0;
    ap_ST_fsm_state106_blk <= ap_const_logic_0;
    ap_ST_fsm_state107_blk <= ap_const_logic_0;
    ap_ST_fsm_state108_blk <= ap_const_logic_0;
    ap_ST_fsm_state109_blk <= ap_const_logic_0;
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state110_blk <= ap_const_logic_0;
    ap_ST_fsm_state111_blk <= ap_const_logic_0;
    ap_ST_fsm_state112_blk <= ap_const_logic_0;
    ap_ST_fsm_state113_blk <= ap_const_logic_0;
    ap_ST_fsm_state114_blk <= ap_const_logic_0;
    ap_ST_fsm_state115_blk <= ap_const_logic_0;
    ap_ST_fsm_state116_blk <= ap_const_logic_0;
    ap_ST_fsm_state117_blk <= ap_const_logic_0;
    ap_ST_fsm_state118_blk <= ap_const_logic_0;
    ap_ST_fsm_state119_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state120_blk <= ap_const_logic_0;
    ap_ST_fsm_state121_blk <= ap_const_logic_0;
    ap_ST_fsm_state122_blk <= ap_const_logic_0;
    ap_ST_fsm_state123_blk <= ap_const_logic_0;
    ap_ST_fsm_state124_blk <= ap_const_logic_0;
    ap_ST_fsm_state125_blk <= ap_const_logic_0;
    ap_ST_fsm_state126_blk <= ap_const_logic_0;
    ap_ST_fsm_state127_blk <= ap_const_logic_0;
    ap_ST_fsm_state128_blk <= ap_const_logic_0;
    ap_ST_fsm_state129_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state130_blk <= ap_const_logic_0;
    ap_ST_fsm_state131_blk <= ap_const_logic_0;
    ap_ST_fsm_state132_blk <= ap_const_logic_0;
    ap_ST_fsm_state133_blk <= ap_const_logic_0;
    ap_ST_fsm_state134_blk <= ap_const_logic_0;
    ap_ST_fsm_state135_blk <= ap_const_logic_0;
    ap_ST_fsm_state136_blk <= ap_const_logic_0;
    ap_ST_fsm_state137_blk <= ap_const_logic_0;
    ap_ST_fsm_state138_blk <= ap_const_logic_0;
    ap_ST_fsm_state139_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state140_blk <= ap_const_logic_0;
    ap_ST_fsm_state141_blk <= ap_const_logic_0;
    ap_ST_fsm_state142_blk <= ap_const_logic_0;
    ap_ST_fsm_state143_blk <= ap_const_logic_0;
    ap_ST_fsm_state144_blk <= ap_const_logic_0;
    ap_ST_fsm_state145_blk <= ap_const_logic_0;

    ap_ST_fsm_state146_blk_assign_proc : process(grp_sin_or_cos_double_s_fu_603_ap_done)
    begin
        if ((grp_sin_or_cos_double_s_fu_603_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state146_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state146_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state147_blk <= ap_const_logic_0;
    ap_ST_fsm_state148_blk <= ap_const_logic_0;
    ap_ST_fsm_state149_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state150_blk <= ap_const_logic_0;
    ap_ST_fsm_state151_blk <= ap_const_logic_0;
    ap_ST_fsm_state152_blk <= ap_const_logic_0;
    ap_ST_fsm_state153_blk <= ap_const_logic_0;
    ap_ST_fsm_state154_blk <= ap_const_logic_0;
    ap_ST_fsm_state155_blk <= ap_const_logic_0;
    ap_ST_fsm_state156_blk <= ap_const_logic_0;
    ap_ST_fsm_state157_blk <= ap_const_logic_0;
    ap_ST_fsm_state158_blk <= ap_const_logic_0;
    ap_ST_fsm_state159_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state160_blk <= ap_const_logic_0;
    ap_ST_fsm_state161_blk <= ap_const_logic_0;
    ap_ST_fsm_state162_blk <= ap_const_logic_0;
    ap_ST_fsm_state163_blk <= ap_const_logic_0;
    ap_ST_fsm_state164_blk <= ap_const_logic_0;
    ap_ST_fsm_state165_blk <= ap_const_logic_0;
    ap_ST_fsm_state166_blk <= ap_const_logic_0;
    ap_ST_fsm_state167_blk <= ap_const_logic_0;
    ap_ST_fsm_state168_blk <= ap_const_logic_0;
    ap_ST_fsm_state169_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state170_blk <= ap_const_logic_0;
    ap_ST_fsm_state171_blk <= ap_const_logic_0;
    ap_ST_fsm_state172_blk <= ap_const_logic_0;

    ap_ST_fsm_state173_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state173_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state173_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state174_blk <= ap_const_logic_0;
    ap_ST_fsm_state175_blk <= ap_const_logic_0;
    ap_ST_fsm_state176_blk <= ap_const_logic_0;
    ap_ST_fsm_state177_blk <= ap_const_logic_0;
    ap_ST_fsm_state178_blk <= ap_const_logic_0;
    ap_ST_fsm_state179_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state180_blk <= ap_const_logic_0;

    ap_ST_fsm_state181_blk_assign_proc : process(grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_ap_done)
    begin
        if ((grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state181_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state181_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state182_blk_assign_proc : process(tmp_last_V_reg_1473, ap_block_state182_io, OUTPUT_r_TREADY_int_regslice)
    begin
        if (((ap_const_boolean_1 = ap_block_state182_io) or ((tmp_last_V_reg_1473 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_1473 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) then 
            ap_ST_fsm_state182_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state182_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state183_blk_assign_proc : process(OUTPUT_r_TREADY_int_regslice)
    begin
        if ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) then 
            ap_ST_fsm_state183_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state183_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state184_blk_assign_proc : process(regslice_both_OUTPUT_r_V_data_V_U_apdone_blk, OUTPUT_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) or (regslice_both_OUTPUT_r_V_data_V_U_apdone_blk = ap_const_logic_1))) then 
            ap_ST_fsm_state184_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state184_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;
    ap_ST_fsm_state1_blk <= ap_const_logic_0;
    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state2_on_subcall_done)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;

    ap_ST_fsm_state38_blk_assign_proc : process(INPUT_r_TVALID_int_regslice)
    begin
        if ((ap_const_logic_0 = INPUT_r_TVALID_int_regslice)) then 
            ap_ST_fsm_state38_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state38_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;

    ap_ST_fsm_state46_blk_assign_proc : process(grp_compression_fu_590_ap_done)
    begin
        if ((grp_compression_fu_590_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state46_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state46_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;
    ap_ST_fsm_state76_blk <= ap_const_logic_0;
    ap_ST_fsm_state77_blk <= ap_const_logic_0;
    ap_ST_fsm_state78_blk <= ap_const_logic_0;
    ap_ST_fsm_state79_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state80_blk <= ap_const_logic_0;
    ap_ST_fsm_state81_blk <= ap_const_logic_0;
    ap_ST_fsm_state82_blk <= ap_const_logic_0;
    ap_ST_fsm_state83_blk <= ap_const_logic_0;
    ap_ST_fsm_state84_blk <= ap_const_logic_0;
    ap_ST_fsm_state85_blk <= ap_const_logic_0;
    ap_ST_fsm_state86_blk <= ap_const_logic_0;
    ap_ST_fsm_state87_blk <= ap_const_logic_0;
    ap_ST_fsm_state88_blk <= ap_const_logic_0;
    ap_ST_fsm_state89_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state90_blk <= ap_const_logic_0;
    ap_ST_fsm_state91_blk <= ap_const_logic_0;
    ap_ST_fsm_state92_blk <= ap_const_logic_0;
    ap_ST_fsm_state93_blk <= ap_const_logic_0;
    ap_ST_fsm_state94_blk <= ap_const_logic_0;
    ap_ST_fsm_state95_blk <= ap_const_logic_0;
    ap_ST_fsm_state96_blk <= ap_const_logic_0;
    ap_ST_fsm_state97_blk <= ap_const_logic_0;
    ap_ST_fsm_state98_blk <= ap_const_logic_0;
    ap_ST_fsm_state99_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state182_assign_proc : process(tmp_last_V_reg_1473, OUTPUT_r_TREADY_int_regslice)
    begin
                ap_block_state182 <= (((tmp_last_V_reg_1473 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_1473 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)));
    end process;


    ap_block_state182_io_assign_proc : process(tmp_last_V_reg_1473, OUTPUT_r_TREADY_int_regslice)
    begin
                ap_block_state182_io <= (((tmp_last_V_reg_1473 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_1473 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)));
    end process;


    ap_block_state184_assign_proc : process(regslice_both_OUTPUT_r_V_data_V_U_apdone_blk, OUTPUT_r_TREADY_int_regslice)
    begin
                ap_block_state184 <= ((ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice) or (regslice_both_OUTPUT_r_V_data_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_block_state2_on_subcall_done_assign_proc : process(grp_guitar_effects_Pipeline_2_fu_578_ap_done, grp_guitar_effects_Pipeline_3_fu_584_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((grp_guitar_effects_Pipeline_3_fu_584_ap_done = ap_const_logic_0) or (grp_guitar_effects_Pipeline_2_fu_578_ap_done = ap_const_logic_0));
    end process;


    ap_condition_2783_assign_proc : process(ap_CS_fsm_state182, tmp_last_V_reg_1473, OUTPUT_r_TREADY_int_regslice)
    begin
                ap_condition_2783 <= (not((((tmp_last_V_reg_1473 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_1473 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) and (ap_const_logic_1 = ap_CS_fsm_state182));
    end process;


    ap_phi_mux_axilite_out_local_3_phi_fu_513_p4_assign_proc : process(tmp_12_reg_1403, ap_CS_fsm_state66, or_ln100_fu_1080_p2, axilite_out_local_3_reg_510)
    begin
        if (((tmp_12_reg_1403 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            ap_phi_mux_axilite_out_local_3_phi_fu_513_p4 <= or_ln100_fu_1080_p2;
        else 
            ap_phi_mux_axilite_out_local_3_phi_fu_513_p4 <= axilite_out_local_3_reg_510;
        end if; 
    end process;


    ap_phi_mux_axilite_out_local_4_phi_fu_547_p4_assign_proc : process(ap_CS_fsm_state182, trunc_ln23_reg_1391, or_ln105_fu_1281_p2, axilite_out_local_4_reg_544)
    begin
        if (((trunc_ln23_reg_1391 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state182))) then 
            ap_phi_mux_axilite_out_local_4_phi_fu_547_p4 <= or_ln105_fu_1281_p2;
        else 
            ap_phi_mux_axilite_out_local_4_phi_fu_547_p4 <= axilite_out_local_4_reg_544;
        end if; 
    end process;


    ap_phi_mux_empty_79_phi_fu_524_p4_assign_proc : process(tmp_12_reg_1403, ap_CS_fsm_state66, or_ln100_fu_1080_p2, empty_79_reg_521)
    begin
        if (((tmp_12_reg_1403 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            ap_phi_mux_empty_79_phi_fu_524_p4 <= or_ln100_fu_1080_p2;
        else 
            ap_phi_mux_empty_79_phi_fu_524_p4 <= empty_79_reg_521;
        end if; 
    end process;


    ap_phi_mux_empty_81_phi_fu_558_p4_assign_proc : process(ap_CS_fsm_state182, trunc_ln23_reg_1391, or_ln105_fu_1281_p2, empty_81_reg_555)
    begin
        if (((trunc_ln23_reg_1391 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state182))) then 
            ap_phi_mux_empty_81_phi_fu_558_p4 <= or_ln105_fu_1281_p2;
        else 
            ap_phi_mux_empty_81_phi_fu_558_p4 <= empty_81_reg_555;
        end if; 
    end process;


    ap_phi_mux_tmp_int_5_phi_fu_536_p4_assign_proc : process(tmp_12_reg_1403, ap_CS_fsm_state66, result_V_fu_1093_p3, tmp_int_5_reg_532)
    begin
        if (((tmp_12_reg_1403 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            ap_phi_mux_tmp_int_5_phi_fu_536_p4 <= result_V_fu_1093_p3;
        else 
            ap_phi_mux_tmp_int_5_phi_fu_536_p4 <= tmp_int_5_reg_532;
        end if; 
    end process;


    ap_phi_mux_tmp_int_7_phi_fu_569_p4_assign_proc : process(ap_CS_fsm_state182, trunc_ln23_reg_1391, grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_result_2_out, tmp_int_7_reg_565)
    begin
        if (((trunc_ln23_reg_1391 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state182))) then 
            ap_phi_mux_tmp_int_7_phi_fu_569_p4 <= grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_result_2_out;
        else 
            ap_phi_mux_tmp_int_7_phi_fu_569_p4 <= tmp_int_7_reg_565;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    axilite_out_ap_vld_assign_proc : process(ap_CS_fsm_state182, tmp_last_V_reg_1473, ap_block_state182_io, OUTPUT_r_TREADY_int_regslice)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state182_io) or ((tmp_last_V_reg_1473 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((tmp_last_V_reg_1473 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)))) and (tmp_last_V_reg_1473 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state182))) then 
            axilite_out_ap_vld <= ap_const_logic_1;
        else 
            axilite_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        conv7_i_i_i_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(distortion_clip_factor_read_reg_1370),40));

    current_sample_fu_787_p2 <= std_logic_vector(unsigned(current_sample_1_fu_258) + unsigned(ap_const_lv32_1));
    data_V_1_fu_1107_p1 <= reg_667;
    data_V_fu_958_p1 <= dc_reg_1596;

    delay_buffer_address0_assign_proc : process(ap_CS_fsm_state2, delay_buffer_addr_1_reg_1433, ap_CS_fsm_state66, grp_guitar_effects_Pipeline_2_fu_578_delay_buffer_address0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            delay_buffer_address0 <= ap_const_lv64_0(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            delay_buffer_address0 <= delay_buffer_addr_1_reg_1433;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            delay_buffer_address0 <= grp_guitar_effects_Pipeline_2_fu_578_delay_buffer_address0;
        else 
            delay_buffer_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    delay_buffer_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state66, grp_guitar_effects_Pipeline_2_fu_578_delay_buffer_ce0, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            delay_buffer_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            delay_buffer_ce0 <= grp_guitar_effects_Pipeline_2_fu_578_delay_buffer_ce0;
        else 
            delay_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_buffer_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state66, grp_guitar_effects_Pipeline_2_fu_578_delay_buffer_d0, result_V_fu_1093_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            delay_buffer_d0 <= result_V_fu_1093_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            delay_buffer_d0 <= grp_guitar_effects_Pipeline_2_fu_578_delay_buffer_d0;
        else 
            delay_buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    delay_buffer_we0_assign_proc : process(tmp_12_reg_1403, ap_CS_fsm_state2, ap_CS_fsm_state66, grp_guitar_effects_Pipeline_2_fu_578_delay_buffer_we0)
    begin
        if (((tmp_12_reg_1403 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            delay_buffer_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            delay_buffer_we0 <= grp_guitar_effects_Pipeline_2_fu_578_delay_buffer_we0;
        else 
            delay_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_75_fu_741_p1 <= grp_fu_727_p2(16 - 1 downto 0);

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state173, grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_ARADDR, gmem_ARREADY, ap_CS_fsm_state180, ap_CS_fsm_state181, sext_ln227_fu_1271_p1)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state173))) then 
            gmem_ARADDR <= sext_ln227_fu_1271_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state181) or (ap_const_logic_1 = ap_CS_fsm_state180))) then 
            gmem_ARADDR <= grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_ARADDR;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state173, grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_ARLEN, gmem_ARREADY, ap_CS_fsm_state180, ap_CS_fsm_state181)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state173))) then 
            gmem_ARLEN <= ap_const_lv32_64;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state181) or (ap_const_logic_1 = ap_CS_fsm_state180))) then 
            gmem_ARLEN <= grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_ARLEN;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state173, grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_ARVALID, gmem_ARREADY, ap_CS_fsm_state180, ap_CS_fsm_state181)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state173))) then 
            gmem_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state181) or (ap_const_logic_1 = ap_CS_fsm_state180))) then 
            gmem_ARVALID <= grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_RREADY, ap_CS_fsm_state180, ap_CS_fsm_state181)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state181) or (ap_const_logic_1 = ap_CS_fsm_state180))) then 
            gmem_RREADY <= grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_m_axi_gmem_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state173)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state173)) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;

    grp_compression_fu_590_ap_start <= grp_compression_fu_590_ap_start_reg;
    grp_fu_1247_p1 <= ap_const_lv41_C8(9 - 1 downto 0);

    grp_fu_633_ce_assign_proc : process(ap_CS_fsm_state46, grp_compression_fu_590_grp_fu_633_p_ce)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_633_ce <= grp_compression_fu_590_grp_fu_633_p_ce;
        else 
            grp_fu_633_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_633_p0_assign_proc : process(reg_661, ap_CS_fsm_state46, grp_compression_fu_590_grp_fu_633_p_din0, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_633_p0 <= grp_compression_fu_590_grp_fu_633_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_633_p0 <= reg_661;
        else 
            grp_fu_633_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_633_p1_assign_proc : process(delay_mult_read_reg_1350, ap_CS_fsm_state46, grp_compression_fu_590_grp_fu_633_p_din1, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_633_p1 <= grp_compression_fu_590_grp_fu_633_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_633_p1 <= delay_mult_read_reg_1350;
        else 
            grp_fu_633_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_637_ce_assign_proc : process(ap_CS_fsm_state46, grp_compression_fu_590_grp_fu_637_p_ce)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_637_ce <= grp_compression_fu_590_grp_fu_637_p_ce;
        else 
            grp_fu_637_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_637_p0_assign_proc : process(ap_CS_fsm_state46, delay_buffer_load_reg_1586, grp_compression_fu_590_grp_fu_637_p_din0, tmp_int_3_reg_499, ap_CS_fsm_state49, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_637_p0 <= grp_compression_fu_590_grp_fu_637_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            grp_fu_637_p0 <= tmp_int_3_reg_499;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_637_p0 <= delay_buffer_load_reg_1586;
        else 
            grp_fu_637_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_646_p0_assign_proc : process(reg_667, conv_i1_reg_1632, tmp_1_reg_1642, add5_i_reg_1647, ap_CS_fsm_state72, ap_CS_fsm_state79, ap_CS_fsm_state147, ap_CS_fsm_state161)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state161)) then 
            grp_fu_646_p0 <= add5_i_reg_1647;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state147)) then 
            grp_fu_646_p0 <= tmp_1_reg_1642;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_fu_646_p0 <= reg_667;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            grp_fu_646_p0 <= conv_i1_reg_1632;
        else 
            grp_fu_646_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_646_p1_assign_proc : process(conv2_i_reg_1438, ap_CS_fsm_state72, ap_CS_fsm_state79, ap_CS_fsm_state147, ap_CS_fsm_state161)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state161)) then 
            grp_fu_646_p1 <= ap_const_lv64_4034000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state147)) then 
            grp_fu_646_p1 <= ap_const_lv64_3FE0000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_fu_646_p1 <= conv2_i_reg_1438;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            grp_fu_646_p1 <= ap_const_lv64_400921F9F01B866E;
        else 
            grp_fu_646_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_658_p0_assign_proc : process(tempo_read_reg_1340, shl_ln222_fu_1101_p2, ap_CS_fsm_state66, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            grp_fu_658_p0 <= shl_ln222_fu_1101_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_658_p0 <= tempo_read_reg_1340;
        else 
            grp_fu_658_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_727_ap_start_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
            grp_fu_727_ap_start <= ap_const_logic_1;
        else 
            grp_fu_727_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_727_ce_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state37, ap_CS_fsm_state32, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            grp_fu_727_ce <= ap_const_logic_1;
        else 
            grp_fu_727_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_727_p0 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(delay_samples_read_reg_1345));
    grp_fu_727_p1 <= ap_const_lv32_AC44(17 - 1 downto 0);
    grp_fu_822_p1 <= conv7_i_i_i_reg_1427(8 - 1 downto 0);
    grp_fu_880_p1 <= conv7_i_i_i_reg_1427(8 - 1 downto 0);
    grp_guitar_effects_Pipeline_2_fu_578_ap_start <= grp_guitar_effects_Pipeline_2_fu_578_ap_start_reg;
    grp_guitar_effects_Pipeline_3_fu_584_ap_start <= grp_guitar_effects_Pipeline_3_fu_584_ap_start_reg;
    grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_ap_start <= grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_ap_start_reg;
    grp_sin_or_cos_double_s_fu_603_ap_start <= grp_sin_or_cos_double_s_fu_603_ap_start_reg;
    icmp_ln1049_1_fu_848_p2 <= "1" when (trunc_ln1049_1_reg_1535 = ap_const_lv7_0) else "0";
    icmp_ln1049_fu_906_p2 <= "1" when (trunc_ln1049_reg_1562 = ap_const_lv7_0) else "0";
    icmp_ln135_fu_799_p2 <= "1" when (signed(INPUT_r_TDATA_int_regslice) > signed(distortion_threshold_read_reg_1375)) else "0";
    icmp_ln137_fu_804_p2 <= "1" when (signed(INPUT_r_TDATA_int_regslice) < signed(negative_threshold_reg_1422)) else "0";
    idxprom_i_cast_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_75_fu_741_p1),64));
    isNeg_2_fu_1157_p3 <= add_ln515_fu_1151_p2(11 downto 11);
    isNeg_fu_993_p3 <= add_ln346_fu_987_p2(8 downto 8);
    mantissa_1_fu_1133_p4 <= ((ap_const_lv1_1 & p_Result_38_fu_1129_p1) & ap_const_lv1_0);
    mantissa_fu_1019_p4 <= ((ap_const_lv1_1 & p_Result_36_reg_1606) & ap_const_lv1_0);
    negative_threshold_fu_733_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(distortion_threshold_read_reg_1375));
    or_ln100_fu_1080_p2 <= (empty_78_reg_488 or ap_const_lv32_2);
    or_ln105_fu_1281_p2 <= (empty_79_reg_521 or ap_const_lv32_1);
    or_ln90_fu_793_p2 <= (empty_fu_262 or ap_const_lv32_8);
    or_ln95_fu_939_p2 <= (empty_77_reg_449 or ap_const_lv32_4);
    p_Result_28_fu_841_p3 <= r_V_35_reg_1523(39 downto 39);
    p_Result_36_fu_979_p1 <= data_V_fu_958_p1(23 - 1 downto 0);
    p_Result_38_fu_1129_p1 <= data_V_1_fu_1107_p1(52 - 1 downto 0);
    p_Result_s_fu_899_p3 <= r_V_34_reg_1550(39 downto 39);
    r_V_27_fu_814_p2 <= std_logic_vector(unsigned(INPUT_r_TDATA_int_regslice) - unsigned(distortion_threshold_read_reg_1375));
    r_V_30_fu_1039_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_1028_p1),to_integer(unsigned('0' & zext_ln1488_fu_1035_p1(31-1 downto 0)))));
    r_V_31_fu_1045_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_1028_p1),to_integer(unsigned('0' & zext_ln1488_fu_1035_p1(31-1 downto 0)))));
    r_V_32_fu_1191_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_1_fu_1143_p1),to_integer(unsigned('0' & zext_ln1488_2_fu_1187_p1(31-1 downto 0)))));
    r_V_33_fu_1197_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_1_fu_1143_p1),to_integer(unsigned('0' & zext_ln1488_2_fu_1187_p1(31-1 downto 0)))));
    r_V_fu_809_p2 <= std_logic_vector(unsigned(INPUT_r_TDATA_int_regslice) + unsigned(distortion_threshold_read_reg_1375));
    result_2_fu_872_p2 <= std_logic_vector(unsigned(ret_V_13_fu_865_p3) - unsigned(distortion_threshold_read_reg_1375));
    result_V_2_fu_1088_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_reg_1621));
    result_V_6_fu_1233_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_1_reg_1657));
    result_V_7_fu_1238_p3 <= 
        result_V_6_fu_1233_p2 when (p_Result_37_reg_1652(0) = '1') else 
        val_1_reg_1657;
    result_V_fu_1093_p3 <= 
        result_V_2_fu_1088_p2 when (p_Result_35_reg_1601(0) = '1') else 
        val_reg_1621;
    result_fu_930_p2 <= std_logic_vector(unsigned(ret_V_11_fu_923_p3) + unsigned(distortion_threshold_read_reg_1375));
    ret_V_11_fu_923_p3 <= 
        select_ln1048_fu_916_p3 when (p_Result_s_fu_899_p3(0) = '1') else 
        ret_V_cast_reg_1555;
    ret_V_12_fu_853_p2 <= std_logic_vector(unsigned(ret_V_9_cast_reg_1528) + unsigned(ap_const_lv32_1));
    ret_V_13_fu_865_p3 <= 
        select_ln1048_1_fu_858_p3 when (p_Result_28_fu_841_p3(0) = '1') else 
        ret_V_9_cast_reg_1528;
    ret_V_fu_911_p2 <= std_logic_vector(unsigned(ret_V_cast_reg_1555) + unsigned(ap_const_lv32_1));
    select_ln1048_1_fu_858_p3 <= 
        ret_V_9_cast_reg_1528 when (icmp_ln1049_1_fu_848_p2(0) = '1') else 
        ret_V_12_fu_853_p2;
    select_ln1048_fu_916_p3 <= 
        ret_V_cast_reg_1555 when (icmp_ln1049_fu_906_p2(0) = '1') else 
        ret_V_fu_911_p2;
        sext_ln1488_1_fu_1183_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_2_fu_1175_p3),32));

        sext_ln1488_fu_1032_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_1616),32));

        sext_ln1512_1_fu_1171_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_2_fu_1165_p2),12));

        sext_ln1512_fu_1007_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_fu_1001_p2),9));

        sext_ln227_2_fu_1253_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln227_reg_1673),64));

        sext_ln227_fu_1271_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln6_reg_1678),64));

    shl_ln222_fu_1101_p2 <= std_logic_vector(shift_left(unsigned(current_sample_1_fu_258),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    sub_ln1512_2_fu_1165_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(xs_exp_V_1_fu_1119_p4));
    sub_ln1512_fu_1001_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_V_fu_969_p4));
    tmp_18_fu_1051_p3 <= r_V_30_fu_1039_p2(24 downto 24);
    tmp_22_fu_1203_p3 <= r_V_32_fu_1191_p2(53 downto 53);
    tmp_5_fu_1063_p4 <= r_V_31_fu_1045_p2(55 downto 24);
    tmp_9_fu_1215_p4 <= r_V_33_fu_1197_p2(84 downto 53);
    trunc_ln1049_1_fu_837_p1 <= grp_fu_822_p2(7 - 1 downto 0);
    trunc_ln1049_fu_895_p1 <= grp_fu_880_p2(7 - 1 downto 0);
    trunc_ln23_fu_674_p1 <= control(1 - 1 downto 0);
    ush_2_fu_1175_p3 <= 
        sext_ln1512_1_fu_1171_p1 when (isNeg_2_fu_1157_p3(0) = '1') else 
        add_ln515_fu_1151_p2;
    ush_fu_1011_p3 <= 
        sext_ln1512_fu_1007_p1 when (isNeg_fu_993_p3(0) = '1') else 
        add_ln346_fu_987_p2;
    val_1_fu_1225_p3 <= 
        zext_ln818_1_fu_1211_p1 when (isNeg_2_fu_1157_p3(0) = '1') else 
        tmp_9_fu_1215_p4;
    val_fu_1073_p3 <= 
        zext_ln818_fu_1059_p1 when (isNeg_reg_1611(0) = '1') else 
        tmp_5_fu_1063_p4;

    wah_values_buffer_address0_assign_proc : process(ap_CS_fsm_state2, grp_guitar_effects_Pipeline_3_fu_584_wah_values_buffer_address0, grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_wah_values_buffer_address0, ap_CS_fsm_state181, ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            wah_values_buffer_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state181)) then 
            wah_values_buffer_address0 <= grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_wah_values_buffer_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wah_values_buffer_address0 <= grp_guitar_effects_Pipeline_3_fu_584_wah_values_buffer_address0;
        else 
            wah_values_buffer_address0 <= "XXXXXXX";
        end if; 
    end process;


    wah_values_buffer_ce0_assign_proc : process(ap_CS_fsm_state2, grp_guitar_effects_Pipeline_3_fu_584_wah_values_buffer_ce0, grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_wah_values_buffer_ce0, ap_CS_fsm_state181, ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            wah_values_buffer_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state181)) then 
            wah_values_buffer_ce0 <= grp_guitar_effects_Pipeline_WAH_LOOP_fu_620_wah_values_buffer_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wah_values_buffer_ce0 <= grp_guitar_effects_Pipeline_3_fu_584_wah_values_buffer_ce0;
        else 
            wah_values_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wah_values_buffer_d0_assign_proc : process(ap_CS_fsm_state2, grp_guitar_effects_Pipeline_3_fu_584_wah_values_buffer_d0, tmp_int_5_reg_532, ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            wah_values_buffer_d0 <= tmp_int_5_reg_532;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wah_values_buffer_d0 <= grp_guitar_effects_Pipeline_3_fu_584_wah_values_buffer_d0;
        else 
            wah_values_buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    wah_values_buffer_we0_assign_proc : process(ap_CS_fsm_state2, grp_guitar_effects_Pipeline_3_fu_584_wah_values_buffer_we0, ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            wah_values_buffer_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wah_values_buffer_we0 <= grp_guitar_effects_Pipeline_3_fu_584_wah_values_buffer_we0;
        else 
            wah_values_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xs_exp_V_1_fu_1119_p4 <= data_V_1_fu_1107_p1(62 downto 52);
    xs_exp_V_fu_969_p4 <= data_V_fu_958_p1(30 downto 23);
    zext_ln1488_2_fu_1187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_1_fu_1183_p1),137));
    zext_ln1488_fu_1035_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_fu_1032_p1),79));
    zext_ln15_1_fu_1143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_1_fu_1133_p4),137));
    zext_ln15_fu_1028_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_1019_p4),79));
    zext_ln346_fu_983_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_fu_969_p4),9));
    zext_ln515_fu_1147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_1_fu_1119_p4),12));
    zext_ln818_1_fu_1211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_1203_p3),32));
    zext_ln818_fu_1059_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_1051_p3),32));
end behav;
