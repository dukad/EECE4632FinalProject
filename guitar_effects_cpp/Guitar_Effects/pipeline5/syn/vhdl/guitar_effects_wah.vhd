-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity guitar_effects_wah is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read : IN STD_LOGIC_VECTOR (30 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    wah_values_buffer_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    wah_values_buffer_ce0 : OUT STD_LOGIC;
    wah_values_buffer_we0 : OUT STD_LOGIC;
    wah_values_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    wah_values_buffer_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    bandpass_coeffs : IN STD_LOGIC_VECTOR (63 downto 0);
    control_signal_buffer_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    control_signal_buffer_ce0 : OUT STD_LOGIC;
    control_signal_buffer_we0 : OUT STD_LOGIC;
    control_signal_buffer_d0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    control_signal_buffer_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2119_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2119_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2119_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_2119_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2119_p_ce : OUT STD_LOGIC;
    grp_fu_594_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_594_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_594_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_594_p_ce : OUT STD_LOGIC;
    grp_fu_602_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_602_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_602_p_ce : OUT STD_LOGIC );
end;


architecture behav of guitar_effects_wah is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (40 downto 0) := "00000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (40 downto 0) := "00000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (40 downto 0) := "00000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (40 downto 0) := "00000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (40 downto 0) := "00000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (40 downto 0) := "00000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (40 downto 0) := "00001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (40 downto 0) := "00010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (40 downto 0) := "00100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (40 downto 0) := "01000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (40 downto 0) := "10000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv65_17C6F8C76 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000101111100011011111000110001110110";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_A : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_64 : STD_LOGIC_VECTOR (7 downto 0) := "01100100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sub_ln226_fu_193_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln226_reg_455 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_460 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_222_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln226_reg_476 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_5_reg_481 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln226_1_fu_265_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln226_1_reg_487 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_213_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal srem_ln230_reg_492 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal add_ln239_fu_290_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln239_reg_497 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal p_Result_s_reg_507 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal p_Result_7_fu_321_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_7_reg_512 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_fu_335_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_517 : STD_LOGIC_VECTOR (0 downto 0);
    signal ush_fu_353_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_reg_522 : STD_LOGIC_VECTOR (8 downto 0);
    signal val_fu_415_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_reg_527 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_ap_start : STD_LOGIC;
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_ap_done : STD_LOGIC;
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_ap_idle : STD_LOGIC;
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_ap_ready : STD_LOGIC;
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_wah_values_buffer_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_wah_values_buffer_ce0 : STD_LOGIC;
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_control_signal_buffer_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_control_signal_buffer_ce0 : STD_LOGIC;
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_temp_result_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_temp_result_out_ap_vld : STD_LOGIC;
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_grp_fu_533_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_grp_fu_533_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_grp_fu_533_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_grp_fu_533_p_ce : STD_LOGIC;
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_grp_fu_537_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_grp_fu_537_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_grp_fu_537_p_ce : STD_LOGIC;
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_grp_fu_541_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_grp_fu_541_p_ce : STD_LOGIC;
    signal grp_wah_Pipeline_WAH_LOOP_fu_159_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal zext_ln224_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal trunc_ln226_fu_173_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal shl_ln_fu_177_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln226_1_fu_185_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_213_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_213_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_222_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sub_ln226_1_fu_238_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_4_fu_243_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln226_fu_253_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln226_2_fu_259_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_271_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_271_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln239_fu_286_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_V_fu_299_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xs_exp_V_fu_311_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln346_fu_325_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_fu_329_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1512_fu_343_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1512_fu_349_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mantissa_fu_361_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1488_fu_374_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_370_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1488_fu_377_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_381_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_10_fu_393_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_387_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln818_fu_401_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_405_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal result_V_2_fu_422_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_fu_427_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_213_ap_start : STD_LOGIC;
    signal grp_fu_213_ap_done : STD_LOGIC;
    signal grp_fu_271_ap_start : STD_LOGIC;
    signal grp_fu_271_ap_done : STD_LOGIC;
    signal grp_fu_533_ce : STD_LOGIC;
    signal grp_fu_537_ce : STD_LOGIC;
    signal grp_fu_541_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component guitar_effects_wah_Pipeline_WAH_LOOP IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        zext_ln237 : IN STD_LOGIC_VECTOR (7 downto 0);
        wah_values_buffer_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        wah_values_buffer_ce0 : OUT STD_LOGIC;
        wah_values_buffer_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        control_signal_buffer_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        control_signal_buffer_ce0 : OUT STD_LOGIC;
        control_signal_buffer_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
        bandpass_coeffs : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        temp_result_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        temp_result_out_ap_vld : OUT STD_LOGIC;
        grp_fu_533_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_533_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_533_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_533_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_533_p_ce : OUT STD_LOGIC;
        grp_fu_537_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_537_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_537_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_537_p_ce : OUT STD_LOGIC;
        grp_fu_541_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_541_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_541_p_ce : OUT STD_LOGIC );
    end component;


    component guitar_effects_srem_32ns_8ns_32_36_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_mul_32s_34ns_65_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (33 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (64 downto 0) );
    end component;


    component guitar_effects_srem_16ns_5ns_5_20_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component guitar_effects_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guitar_effects_sitofp_32ns_32_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_wah_Pipeline_WAH_LOOP_fu_159 : component guitar_effects_wah_Pipeline_WAH_LOOP
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_wah_Pipeline_WAH_LOOP_fu_159_ap_start,
        ap_done => grp_wah_Pipeline_WAH_LOOP_fu_159_ap_done,
        ap_idle => grp_wah_Pipeline_WAH_LOOP_fu_159_ap_idle,
        ap_ready => grp_wah_Pipeline_WAH_LOOP_fu_159_ap_ready,
        zext_ln237 => add_ln239_reg_497,
        wah_values_buffer_address0 => grp_wah_Pipeline_WAH_LOOP_fu_159_wah_values_buffer_address0,
        wah_values_buffer_ce0 => grp_wah_Pipeline_WAH_LOOP_fu_159_wah_values_buffer_ce0,
        wah_values_buffer_q0 => wah_values_buffer_q0,
        control_signal_buffer_address0 => grp_wah_Pipeline_WAH_LOOP_fu_159_control_signal_buffer_address0,
        control_signal_buffer_ce0 => grp_wah_Pipeline_WAH_LOOP_fu_159_control_signal_buffer_ce0,
        control_signal_buffer_q0 => control_signal_buffer_q0,
        bandpass_coeffs => bandpass_coeffs,
        m_axi_gmem_AWVALID => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => m_axi_gmem_RVALID,
        m_axi_gmem_RREADY => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => m_axi_gmem_RDATA,
        m_axi_gmem_RLAST => m_axi_gmem_RLAST,
        m_axi_gmem_RID => m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM => m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER => m_axi_gmem_RUSER,
        m_axi_gmem_RRESP => m_axi_gmem_RRESP,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        temp_result_out => grp_wah_Pipeline_WAH_LOOP_fu_159_temp_result_out,
        temp_result_out_ap_vld => grp_wah_Pipeline_WAH_LOOP_fu_159_temp_result_out_ap_vld,
        grp_fu_533_p_din0 => grp_wah_Pipeline_WAH_LOOP_fu_159_grp_fu_533_p_din0,
        grp_fu_533_p_din1 => grp_wah_Pipeline_WAH_LOOP_fu_159_grp_fu_533_p_din1,
        grp_fu_533_p_opcode => grp_wah_Pipeline_WAH_LOOP_fu_159_grp_fu_533_p_opcode,
        grp_fu_533_p_dout0 => grp_fu_2119_p_dout0,
        grp_fu_533_p_ce => grp_wah_Pipeline_WAH_LOOP_fu_159_grp_fu_533_p_ce,
        grp_fu_537_p_din0 => grp_wah_Pipeline_WAH_LOOP_fu_159_grp_fu_537_p_din0,
        grp_fu_537_p_din1 => grp_wah_Pipeline_WAH_LOOP_fu_159_grp_fu_537_p_din1,
        grp_fu_537_p_dout0 => grp_fu_594_p_dout0,
        grp_fu_537_p_ce => grp_wah_Pipeline_WAH_LOOP_fu_159_grp_fu_537_p_ce,
        grp_fu_541_p_din0 => grp_wah_Pipeline_WAH_LOOP_fu_159_grp_fu_541_p_din0,
        grp_fu_541_p_dout0 => grp_fu_602_p_dout0,
        grp_fu_541_p_ce => grp_wah_Pipeline_WAH_LOOP_fu_159_grp_fu_541_p_ce);

    srem_32ns_8ns_32_36_seq_1_U23 : component guitar_effects_srem_32ns_8ns_32_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_213_ap_start,
        done => grp_fu_213_ap_done,
        din0 => grp_fu_213_p0,
        din1 => grp_fu_213_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_213_p2);

    mul_32s_34ns_65_2_1_U24 : component guitar_effects_mul_32s_34ns_65_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 34,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln226_reg_455,
        din1 => grp_fu_222_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_222_p2);

    srem_16ns_5ns_5_20_seq_1_U25 : component guitar_effects_srem_16ns_5ns_5_20_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_271_ap_start,
        done => grp_fu_271_ap_done,
        din0 => select_ln226_1_reg_487,
        din1 => grp_fu_271_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_271_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_wah_Pipeline_WAH_LOOP_fu_159_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_wah_Pipeline_WAH_LOOP_fu_159_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                    grp_wah_Pipeline_WAH_LOOP_fu_159_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_wah_Pipeline_WAH_LOOP_fu_159_ap_ready = ap_const_logic_1)) then 
                    grp_wah_Pipeline_WAH_LOOP_fu_159_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                add_ln239_reg_497 <= add_ln239_fu_290_p2;
                srem_ln230_reg_492 <= grp_fu_213_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                isNeg_reg_517 <= add_ln346_fu_329_p2(8 downto 8);
                p_Result_7_reg_512 <= p_Result_7_fu_321_p1;
                p_Result_s_reg_507 <= data_V_fu_299_p1(31 downto 31);
                ush_reg_522 <= ush_fu_353_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                mul_ln226_reg_476 <= grp_fu_222_p2;
                tmp_5_reg_481 <= grp_fu_222_p2(64 downto 49);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                select_ln226_1_reg_487 <= select_ln226_1_fu_265_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    sub_ln226_reg_455(31 downto 1) <= sub_ln226_fu_193_p2(31 downto 1);
                tmp_reg_460 <= sub_ln226_fu_193_p2(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                val_reg_527 <= val_fu_415_p3;
            end if;
        end if;
    end process;
    sub_ln226_reg_455(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_wah_Pipeline_WAH_LOOP_fu_159_ap_done, ap_CS_fsm_state38)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((grp_wah_Pipeline_WAH_LOOP_fu_159_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln239_fu_290_p2 <= std_logic_vector(unsigned(trunc_ln239_fu_286_p1) + unsigned(ap_const_lv8_64));
    add_ln346_fu_329_p2 <= std_logic_vector(unsigned(zext_ln346_fu_325_p1) + unsigned(ap_const_lv9_181));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;

    ap_ST_fsm_state38_blk_assign_proc : process(grp_wah_Pipeline_WAH_LOOP_fu_159_ap_done)
    begin
        if ((grp_wah_Pipeline_WAH_LOOP_fu_159_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state38_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state38_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= result_V_fu_427_p3;
    ap_return_1 <= srem_ln230_reg_492;

    control_signal_buffer_address0_assign_proc : process(grp_wah_Pipeline_WAH_LOOP_fu_159_control_signal_buffer_address0, ap_CS_fsm_state38, zext_ln224_fu_276_p1, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            control_signal_buffer_address0 <= zext_ln224_fu_276_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            control_signal_buffer_address0 <= grp_wah_Pipeline_WAH_LOOP_fu_159_control_signal_buffer_address0;
        else 
            control_signal_buffer_address0 <= "XXXXXXX";
        end if; 
    end process;


    control_signal_buffer_ce0_assign_proc : process(grp_wah_Pipeline_WAH_LOOP_fu_159_control_signal_buffer_ce0, ap_CS_fsm_state38, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            control_signal_buffer_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            control_signal_buffer_ce0 <= grp_wah_Pipeline_WAH_LOOP_fu_159_control_signal_buffer_ce0;
        else 
            control_signal_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    control_signal_buffer_d0 <= grp_fu_271_p2(5 - 1 downto 0);

    control_signal_buffer_we0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            control_signal_buffer_we0 <= ap_const_logic_1;
        else 
            control_signal_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    data_V_fu_299_p1 <= grp_wah_Pipeline_WAH_LOOP_fu_159_temp_result_out;
    grp_fu_2119_p_ce <= grp_fu_533_ce;
    grp_fu_2119_p_din0 <= grp_wah_Pipeline_WAH_LOOP_fu_159_grp_fu_533_p_din0;
    grp_fu_2119_p_din1 <= grp_wah_Pipeline_WAH_LOOP_fu_159_grp_fu_533_p_din1;
    grp_fu_2119_p_opcode <= ap_const_lv2_0;

    grp_fu_213_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_213_ap_start <= ap_const_logic_1;
        else 
            grp_fu_213_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_213_p0 <= std_logic_vector(unsigned(p_read1) + unsigned(ap_const_lv32_1));
    grp_fu_213_p1 <= ap_const_lv32_64(8 - 1 downto 0);
    grp_fu_222_p1 <= ap_const_lv65_17C6F8C76(34 - 1 downto 0);

    grp_fu_271_ap_start_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_271_ap_start <= ap_const_logic_1;
        else 
            grp_fu_271_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_271_p1 <= ap_const_lv16_A(5 - 1 downto 0);

    grp_fu_533_ce_assign_proc : process(grp_wah_Pipeline_WAH_LOOP_fu_159_grp_fu_533_p_ce, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_533_ce <= grp_wah_Pipeline_WAH_LOOP_fu_159_grp_fu_533_p_ce;
        else 
            grp_fu_533_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_537_ce_assign_proc : process(grp_wah_Pipeline_WAH_LOOP_fu_159_grp_fu_537_p_ce, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_537_ce <= grp_wah_Pipeline_WAH_LOOP_fu_159_grp_fu_537_p_ce;
        else 
            grp_fu_537_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_541_ce_assign_proc : process(grp_wah_Pipeline_WAH_LOOP_fu_159_grp_fu_541_p_ce, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_541_ce <= grp_wah_Pipeline_WAH_LOOP_fu_159_grp_fu_541_p_ce;
        else 
            grp_fu_541_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_594_p_ce <= grp_fu_537_ce;
    grp_fu_594_p_din0 <= grp_wah_Pipeline_WAH_LOOP_fu_159_grp_fu_537_p_din0;
    grp_fu_594_p_din1 <= grp_wah_Pipeline_WAH_LOOP_fu_159_grp_fu_537_p_din1;
    grp_fu_602_p_ce <= grp_fu_541_ce;
    grp_fu_602_p_din0 <= grp_wah_Pipeline_WAH_LOOP_fu_159_grp_fu_541_p_din0;
    grp_wah_Pipeline_WAH_LOOP_fu_159_ap_start <= grp_wah_Pipeline_WAH_LOOP_fu_159_ap_start_reg;
    isNeg_fu_335_p3 <= add_ln346_fu_329_p2(8 downto 8);
    m_axi_gmem_ARADDR <= grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARADDR;
    m_axi_gmem_ARBURST <= grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARBURST;
    m_axi_gmem_ARCACHE <= grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARCACHE;
    m_axi_gmem_ARID <= grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARID;
    m_axi_gmem_ARLEN <= grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARLEN;
    m_axi_gmem_ARLOCK <= grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARLOCK;
    m_axi_gmem_ARPROT <= grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARPROT;
    m_axi_gmem_ARQOS <= grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARQOS;
    m_axi_gmem_ARREGION <= grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARREGION;
    m_axi_gmem_ARSIZE <= grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARSIZE;
    m_axi_gmem_ARUSER <= grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARUSER;

    m_axi_gmem_ARVALID_assign_proc : process(ap_CS_fsm_state37, grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARVALID, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            m_axi_gmem_ARVALID <= grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_ARVALID;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;

    m_axi_gmem_RREADY_assign_proc : process(ap_CS_fsm_state37, grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_RREADY, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            m_axi_gmem_RREADY <= grp_wah_Pipeline_WAH_LOOP_fu_159_m_axi_gmem_RREADY;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_const_lv32_0;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    mantissa_fu_361_p4 <= ((ap_const_lv1_1 & p_Result_7_reg_512) & ap_const_lv1_0);
    p_Result_7_fu_321_p1 <= data_V_fu_299_p1(23 - 1 downto 0);
    r_V_1_fu_387_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_370_p1),to_integer(unsigned('0' & zext_ln1488_fu_377_p1(31-1 downto 0)))));
    r_V_fu_381_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_370_p1),to_integer(unsigned('0' & zext_ln1488_fu_377_p1(31-1 downto 0)))));
    result_V_2_fu_422_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_reg_527));
    result_V_fu_427_p3 <= 
        result_V_2_fu_422_p2 when (p_Result_s_reg_507(0) = '1') else 
        val_reg_527;
    select_ln226_1_fu_265_p3 <= 
        sub_ln226_2_fu_259_p2 when (tmp_reg_460(0) = '1') else 
        tmp_5_reg_481;
    select_ln226_fu_253_p3 <= 
        tmp_4_fu_243_p4 when (tmp_reg_460(0) = '1') else 
        tmp_5_reg_481;
        sext_ln1488_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_522),32));

        sext_ln1512_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_fu_343_p2),9));

    shl_ln226_1_fu_185_p3 <= (p_read & ap_const_lv1_0);
    shl_ln_fu_177_p3 <= (trunc_ln226_fu_173_p1 & ap_const_lv4_0);
    sub_ln1512_fu_343_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_V_fu_311_p4));
    sub_ln226_1_fu_238_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_ln226_reg_476));
    sub_ln226_2_fu_259_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(select_ln226_fu_253_p3));
    sub_ln226_fu_193_p2 <= std_logic_vector(unsigned(shl_ln_fu_177_p3) - unsigned(shl_ln226_1_fu_185_p3));
    tmp_10_fu_393_p3 <= r_V_fu_381_p2(24 downto 24);
    tmp_4_fu_243_p4 <= sub_ln226_1_fu_238_p2(64 downto 49);
    tmp_8_fu_405_p4 <= r_V_1_fu_387_p2(55 downto 24);
    trunc_ln226_fu_173_p1 <= p_read(28 - 1 downto 0);
    trunc_ln239_fu_286_p1 <= grp_fu_213_p2(8 - 1 downto 0);
    ush_fu_353_p3 <= 
        sext_ln1512_fu_349_p1 when (isNeg_fu_335_p3(0) = '1') else 
        add_ln346_fu_329_p2;
    val_fu_415_p3 <= 
        zext_ln818_fu_401_p1 when (isNeg_reg_517(0) = '1') else 
        tmp_8_fu_405_p4;

    wah_values_buffer_address0_assign_proc : process(grp_wah_Pipeline_WAH_LOOP_fu_159_wah_values_buffer_address0, ap_CS_fsm_state38, zext_ln224_fu_276_p1, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            wah_values_buffer_address0 <= zext_ln224_fu_276_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            wah_values_buffer_address0 <= grp_wah_Pipeline_WAH_LOOP_fu_159_wah_values_buffer_address0;
        else 
            wah_values_buffer_address0 <= "XXXXXXX";
        end if; 
    end process;


    wah_values_buffer_ce0_assign_proc : process(grp_wah_Pipeline_WAH_LOOP_fu_159_wah_values_buffer_ce0, ap_CS_fsm_state38, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            wah_values_buffer_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            wah_values_buffer_ce0 <= grp_wah_Pipeline_WAH_LOOP_fu_159_wah_values_buffer_ce0;
        else 
            wah_values_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    wah_values_buffer_d0 <= input_r;

    wah_values_buffer_we0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            wah_values_buffer_we0 <= ap_const_logic_1;
        else 
            wah_values_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xs_exp_V_fu_311_p4 <= data_V_fu_299_p1(30 downto 23);
    zext_ln1488_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_fu_374_p1),79));
    zext_ln15_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_361_p4),79));
    zext_ln224_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read1),64));
    zext_ln346_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_fu_311_p4),9));
    zext_ln818_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_393_p3),32));
end behav;
