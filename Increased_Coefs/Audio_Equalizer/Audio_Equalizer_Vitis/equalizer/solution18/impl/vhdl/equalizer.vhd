-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity equalizer is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    output_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_TVALID : OUT STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC;
    output_r_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_TVALID : IN STD_LOGIC;
    input_r_TREADY : OUT STD_LOGIC;
    input_r_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    input_r_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    input_r_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of equalizer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "equalizer_equalizer,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=2239,HLS_SYN_LUT=3080,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_BEEF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001011111011101111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_ABBA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001010101110111010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal coefs : STD_LOGIC_VECTOR (63 downto 0);
    signal signal_shift_reg_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal signal_shift_reg_ce0 : STD_LOGIC;
    signal signal_shift_reg_we0 : STD_LOGIC;
    signal signal_shift_reg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal signal_shift_reg_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal output_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal state_1_reg_694 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_last_V_reg_727 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_1_reg_365 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal input_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal coefs_read_reg_657 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem_addr_reg_670 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_1_load_fu_482_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_698 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_keep_V_reg_706 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_strb_V_reg_713 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_user_V_reg_720 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_430_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_V_reg_733 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_V_reg_740 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_read_reg_750 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_527_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln88_reg_755 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal accumulate_fu_534_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulate_reg_760 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln54_fu_575_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln54_reg_770 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_ap_start : STD_LOGIC;
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_ap_done : STD_LOGIC;
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_ap_idle : STD_LOGIC;
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_ap_ready : STD_LOGIC;
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_accumulate_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_accumulate_out_ap_vld : STD_LOGIC;
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_signal_shift_reg_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_signal_shift_reg_ce0 : STD_LOGIC;
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_signal_shift_reg_we0 : STD_LOGIC;
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_signal_shift_reg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_signal_shift_reg_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_signal_shift_reg_ce1 : STD_LOGIC;
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_grp_fu_527_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_grp_fu_527_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_grp_fu_527_p_ce : STD_LOGIC;
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_ap_start : STD_LOGIC;
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_ap_done : STD_LOGIC;
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_ap_idle : STD_LOGIC;
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_ap_ready : STD_LOGIC;
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_ap_start : STD_LOGIC;
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_ap_done : STD_LOGIC;
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_ap_idle : STD_LOGIC;
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_ap_ready : STD_LOGIC;
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_input_r_TREADY : STD_LOGIC;
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_grp_fu_527_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_grp_fu_527_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_grp_fu_527_p_ce : STD_LOGIC;
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal ap_phi_mux_tmp_dest_V_1_phi_fu_240_p8 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_V_1_reg_236 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op119_write_state15 : BOOLEAN;
    signal ap_block_state15 : BOOLEAN;
    signal ap_block_state15_io : BOOLEAN;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_phi_mux_tmp_last_V_1_phi_fu_368_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_tmp_id_V_1_phi_fu_256_p8 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_V_1_reg_252 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_tmp_user_V_1_phi_fu_272_p8 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_1_reg_268 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_tmp_strb_V_1_phi_fu_288_p8 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_strb_V_1_reg_284 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_tmp_keep_V_1_phi_fu_304_p8 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_keep_V_1_reg_300 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_tmp_data_V_5_phi_fu_320_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_5_reg_316 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_332 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal coef_scale_reg_343 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_4_0_0_0132_phi_reg_353 : STD_LOGIC_VECTOR (0 downto 0);
    signal read_coefs_load_load_fu_505_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_V_2_reg_376 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_ap_start_reg : STD_LOGIC := '0';
    signal grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal sext_ln88_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_out_data_V_fu_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_out_keep_V_fu_136 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_out_strb_V_fu_140 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_out_user_V_fu_144 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_out_id_V_fu_148 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_out_dest_V_fu_152 : STD_LOGIC_VECTOR (0 downto 0);
    signal read_coefs_fu_156 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_fu_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln16_1_fu_587_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln16_fu_514_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_fu_434_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln35_fu_508_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln35_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_527_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_527_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln71_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_527_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal regslice_both_output_r_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state21 : BOOLEAN;
    signal output_r_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r_TVALID_int_regslice : STD_LOGIC;
    signal output_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_output_r_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_r_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal output_r_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_output_r_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_r_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_r_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal output_r_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_output_r_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_r_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_r_V_user_V_U_apdone_blk : STD_LOGIC;
    signal output_r_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_output_r_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_r_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_r_V_last_V_U_apdone_blk : STD_LOGIC;
    signal output_r_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_output_r_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_r_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_r_V_id_V_U_apdone_blk : STD_LOGIC;
    signal output_r_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_output_r_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_r_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_r_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal output_r_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_output_r_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_r_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_data_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal input_r_TVALID_int_regslice : STD_LOGIC;
    signal input_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_input_r_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_r_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_input_r_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_r_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_input_r_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_r_V_user_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_r_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_r_V_last_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_r_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_r_V_id_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_r_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_r_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_r_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_dest_V_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component equalizer_equalizer_Pipeline_Shift_Accumulate_Loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        coefs : IN STD_LOGIC_VECTOR (63 downto 0);
        accumulate_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        accumulate_out_ap_vld : OUT STD_LOGIC;
        signal_shift_reg_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        signal_shift_reg_ce0 : OUT STD_LOGIC;
        signal_shift_reg_we0 : OUT STD_LOGIC;
        signal_shift_reg_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        signal_shift_reg_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        signal_shift_reg_ce1 : OUT STD_LOGIC;
        signal_shift_reg_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_527_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_527_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_527_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_527_p_ce : OUT STD_LOGIC );
    end component;


    component equalizer_equalizer_Pipeline_Coef_Clear_Loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        coefs : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component equalizer_equalizer_Pipeline_VITIS_LOOP_57_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_TVALID : IN STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r_TREADY : OUT STD_LOGIC;
        input_r_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        input_r_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        input_r_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        coef_scale : IN STD_LOGIC_VECTOR (31 downto 0);
        coefs : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_527_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_527_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_527_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_527_p_ce : OUT STD_LOGIC );
    end component;


    component equalizer_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component equalizer_signal_shift_reg_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component equalizer_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        coefs : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component equalizer_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component equalizer_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    signal_shift_reg_U : component equalizer_signal_shift_reg_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 99,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => signal_shift_reg_address0,
        ce0 => signal_shift_reg_ce0,
        we0 => signal_shift_reg_we0,
        d0 => signal_shift_reg_d0,
        address1 => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_signal_shift_reg_address1,
        ce1 => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_signal_shift_reg_ce1,
        q1 => signal_shift_reg_q1);

    grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386 : component equalizer_equalizer_Pipeline_Shift_Accumulate_Loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_ap_start,
        ap_done => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_ap_done,
        ap_idle => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_ap_idle,
        ap_ready => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_ap_ready,
        m_axi_gmem_AWVALID => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => gmem_RFIFONUM,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        coefs => coefs_read_reg_657,
        accumulate_out => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_accumulate_out,
        accumulate_out_ap_vld => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_accumulate_out_ap_vld,
        signal_shift_reg_address0 => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_signal_shift_reg_address0,
        signal_shift_reg_ce0 => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_signal_shift_reg_ce0,
        signal_shift_reg_we0 => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_signal_shift_reg_we0,
        signal_shift_reg_d0 => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_signal_shift_reg_d0,
        signal_shift_reg_address1 => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_signal_shift_reg_address1,
        signal_shift_reg_ce1 => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_signal_shift_reg_ce1,
        signal_shift_reg_q1 => signal_shift_reg_q1,
        grp_fu_527_p_din0 => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_grp_fu_527_p_din0,
        grp_fu_527_p_din1 => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_grp_fu_527_p_din1,
        grp_fu_527_p_dout0 => grp_fu_527_p2,
        grp_fu_527_p_ce => grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_grp_fu_527_p_ce);

    grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396 : component equalizer_equalizer_Pipeline_Coef_Clear_Loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_ap_start,
        ap_done => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_ap_done,
        ap_idle => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_ap_idle,
        ap_ready => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_ap_ready,
        m_axi_gmem_AWVALID => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => gmem_AWREADY,
        m_axi_gmem_AWADDR => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => gmem_WREADY,
        m_axi_gmem_WDATA => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => ap_const_logic_0,
        m_axi_gmem_ARADDR => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => ap_const_logic_0,
        m_axi_gmem_RREADY => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => ap_const_lv32_0,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => ap_const_lv9_0,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => gmem_BVALID,
        m_axi_gmem_BREADY => grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        coefs => coefs_read_reg_657);

    grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403 : component equalizer_equalizer_Pipeline_VITIS_LOOP_57_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_ap_start,
        ap_done => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_ap_done,
        ap_idle => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_ap_idle,
        ap_ready => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_ap_ready,
        input_r_TVALID => input_r_TVALID_int_regslice,
        m_axi_gmem_AWVALID => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => gmem_AWREADY,
        m_axi_gmem_AWADDR => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => gmem_WREADY,
        m_axi_gmem_WDATA => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => gmem_RFIFONUM,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => gmem_BVALID,
        m_axi_gmem_BREADY => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        input_r_TDATA => input_r_TDATA_int_regslice,
        input_r_TREADY => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_input_r_TREADY,
        input_r_TKEEP => input_r_TKEEP_int_regslice,
        input_r_TSTRB => input_r_TSTRB_int_regslice,
        input_r_TUSER => input_r_TUSER_int_regslice,
        input_r_TLAST => input_r_TLAST_int_regslice,
        input_r_TID => input_r_TID_int_regslice,
        input_r_TDEST => input_r_TDEST_int_regslice,
        coef_scale => coef_scale_reg_343,
        coefs => coefs_read_reg_657,
        grp_fu_527_p_din0 => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_grp_fu_527_p_din0,
        grp_fu_527_p_din1 => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_grp_fu_527_p_din1,
        grp_fu_527_p_dout0 => grp_fu_527_p2,
        grp_fu_527_p_ce => grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_grp_fu_527_p_ce);

    control_s_axi_U : component equalizer_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        coefs => coefs);

    gmem_m_axi_U : component equalizer_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 9,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        USER_DW => 32,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARLEN => gmem_ARLEN,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_AWADDR,
        I_AWLEN => gmem_AWLEN,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => gmem_WDATA,
        I_WSTRB => gmem_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY);

    mul_32s_32s_32_2_1_U19 : component equalizer_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_527_p0,
        din1 => grp_fu_527_p1,
        ce => grp_fu_527_ce,
        dout => grp_fu_527_p2);

    regslice_both_output_r_V_data_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TDATA_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => output_r_TREADY_int_regslice,
        data_out => output_r_TDATA,
        vld_out => regslice_both_output_r_V_data_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_data_V_U_apdone_blk);

    regslice_both_output_r_V_keep_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TKEEP_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_r_V_keep_V_U_ack_in_dummy,
        data_out => output_r_TKEEP,
        vld_out => regslice_both_output_r_V_keep_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_keep_V_U_apdone_blk);

    regslice_both_output_r_V_strb_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TSTRB_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_r_V_strb_V_U_ack_in_dummy,
        data_out => output_r_TSTRB,
        vld_out => regslice_both_output_r_V_strb_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_strb_V_U_apdone_blk);

    regslice_both_output_r_V_user_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TUSER_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_r_V_user_V_U_ack_in_dummy,
        data_out => output_r_TUSER,
        vld_out => regslice_both_output_r_V_user_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_user_V_U_apdone_blk);

    regslice_both_output_r_V_last_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TLAST_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_r_V_last_V_U_ack_in_dummy,
        data_out => output_r_TLAST,
        vld_out => regslice_both_output_r_V_last_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_last_V_U_apdone_blk);

    regslice_both_output_r_V_id_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TID_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_r_V_id_V_U_ack_in_dummy,
        data_out => output_r_TID,
        vld_out => regslice_both_output_r_V_id_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_id_V_U_apdone_blk);

    regslice_both_output_r_V_dest_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TDEST_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_r_V_dest_V_U_ack_in_dummy,
        data_out => output_r_TDEST,
        vld_out => regslice_both_output_r_V_dest_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_dest_V_U_apdone_blk);

    regslice_both_input_r_V_data_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TDATA,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_data_V_U_ack_in,
        data_out => input_r_TDATA_int_regslice,
        vld_out => input_r_TVALID_int_regslice,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_data_V_U_apdone_blk);

    regslice_both_input_r_V_keep_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TKEEP,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_keep_V_U_ack_in,
        data_out => input_r_TKEEP_int_regslice,
        vld_out => regslice_both_input_r_V_keep_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_keep_V_U_apdone_blk);

    regslice_both_input_r_V_strb_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TSTRB,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_strb_V_U_ack_in,
        data_out => input_r_TSTRB_int_regslice,
        vld_out => regslice_both_input_r_V_strb_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_strb_V_U_apdone_blk);

    regslice_both_input_r_V_user_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TUSER,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_user_V_U_ack_in,
        data_out => input_r_TUSER_int_regslice,
        vld_out => regslice_both_input_r_V_user_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_user_V_U_apdone_blk);

    regslice_both_input_r_V_last_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TLAST,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_last_V_U_ack_in,
        data_out => input_r_TLAST_int_regslice,
        vld_out => regslice_both_input_r_V_last_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_last_V_U_apdone_blk);

    regslice_both_input_r_V_id_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TID,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_id_V_U_ack_in,
        data_out => input_r_TID_int_regslice,
        vld_out => regslice_both_input_r_V_id_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_id_V_U_apdone_blk);

    regslice_both_input_r_V_dest_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TDEST,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_dest_V_U_ack_in,
        data_out => input_r_TDEST_int_regslice,
        vld_out => regslice_both_input_r_V_dest_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_ap_start_reg <= ap_const_logic_0;
            else
                if (((input_r_TVALID_int_regslice = ap_const_logic_1) and (read_coefs_load_load_fu_505_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (state_1_load_fu_482_p1 = ap_const_lv32_10))) then 
                    grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_ap_ready = ap_const_logic_1)) then 
                    grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_ap_start_reg <= ap_const_logic_0;
            else
                if (((input_r_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (state_1_load_fu_482_p1 = ap_const_lv32_100))) then 
                    grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_ap_ready = ap_const_logic_1)) then 
                    grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln54_fu_569_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                    grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_ap_ready = ap_const_logic_1)) then 
                    grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    coef_scale_reg_343_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                coef_scale_reg_343 <= tmp_data_V_reg_698;
            elsif (((input_r_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                coef_scale_reg_343 <= input_r_TDATA_int_regslice;
            end if; 
        end if;
    end process;

    j_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                j_reg_332 <= ap_const_lv2_0;
            elsif (((input_r_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                j_reg_332 <= add_ln54_reg_770;
            end if; 
        end if;
    end process;

    read_coefs_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                read_coefs_fu_156 <= ap_const_lv1_0;
            elsif (((ap_phi_mux_tmp_last_V_1_phi_fu_368_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                read_coefs_fu_156 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    state_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                state_fu_160(4) <= '0';
                state_fu_160(8) <= '0';
            elsif (((input_r_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_430_p1 = ap_const_lv1_0) and (state_1_load_fu_482_p1 = ap_const_lv32_0))) then 
                                state_fu_160(4) <= select_ln16_fu_514_p3(4);                state_fu_160(8) <= select_ln16_fu_514_p3(8);
            elsif ((not(((ap_const_boolean_1 = ap_block_state15_io) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op119_write_state15 = ap_const_boolean_1)) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_1_reg_694 = ap_const_lv32_100)))) and (ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_last_V_reg_727 = ap_const_lv1_0) and (state_1_reg_694 = ap_const_lv32_100))) then 
                state_fu_160(4) <= '0';
                state_fu_160(8) <= '1';
            elsif (((ap_phi_mux_tmp_last_V_1_phi_fu_368_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                                state_fu_160(4) <= select_ln16_1_fu_587_p3(4);                state_fu_160(8) <= select_ln16_1_fu_587_p3(8);
            end if; 
        end if;
    end process;

    tmp_data_V_2_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_fu_569_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                tmp_data_V_2_reg_376 <= coef_scale_reg_343;
            elsif (((input_r_TVALID_int_regslice = ap_const_logic_1) and (read_coefs_load_load_fu_505_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (state_1_load_fu_482_p1 = ap_const_lv32_10))) then 
                tmp_data_V_2_reg_376 <= input_r_TDATA_int_regslice;
            end if; 
        end if;
    end process;

    tmp_data_V_5_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state15_io) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op119_write_state15 = ap_const_boolean_1)) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_1_reg_694 = ap_const_lv32_100)))) and (ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_last_V_reg_727 = ap_const_lv1_1) and (state_1_reg_694 = ap_const_lv32_100))) then 
                tmp_data_V_5_reg_316 <= accumulate_reg_760;
            elsif ((((input_r_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_430_p1 = ap_const_lv1_1) and (state_1_load_fu_482_p1 = ap_const_lv32_0)) or ((ap_phi_mux_tmp_last_V_1_phi_fu_368_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or (not((state_1_load_fu_482_p1 = ap_const_lv32_100)) and not((state_1_load_fu_482_p1 = ap_const_lv32_10)) and not((state_1_load_fu_482_p1 = ap_const_lv32_0)) and (input_r_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_430_p1 = ap_const_lv1_1)))) then 
                tmp_data_V_5_reg_316 <= tmp_out_data_V_fu_132;
            end if; 
        end if;
    end process;

    tmp_dest_V_1_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state15_io) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op119_write_state15 = ap_const_boolean_1)) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_1_reg_694 = ap_const_lv32_100)))) and (ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_last_V_reg_727 = ap_const_lv1_1) and (state_1_reg_694 = ap_const_lv32_100))) then 
                tmp_dest_V_1_reg_236 <= tmp_dest_V_reg_740;
            elsif ((((input_r_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_430_p1 = ap_const_lv1_1) and (state_1_load_fu_482_p1 = ap_const_lv32_0)) or ((ap_phi_mux_tmp_last_V_1_phi_fu_368_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or (not((state_1_load_fu_482_p1 = ap_const_lv32_100)) and not((state_1_load_fu_482_p1 = ap_const_lv32_10)) and not((state_1_load_fu_482_p1 = ap_const_lv32_0)) and (input_r_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_430_p1 = ap_const_lv1_1)))) then 
                tmp_dest_V_1_reg_236 <= tmp_out_dest_V_fu_152;
            end if; 
        end if;
    end process;

    tmp_id_V_1_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state15_io) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op119_write_state15 = ap_const_boolean_1)) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_1_reg_694 = ap_const_lv32_100)))) and (ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_last_V_reg_727 = ap_const_lv1_1) and (state_1_reg_694 = ap_const_lv32_100))) then 
                tmp_id_V_1_reg_252 <= tmp_id_V_reg_733;
            elsif ((((input_r_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_430_p1 = ap_const_lv1_1) and (state_1_load_fu_482_p1 = ap_const_lv32_0)) or ((ap_phi_mux_tmp_last_V_1_phi_fu_368_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or (not((state_1_load_fu_482_p1 = ap_const_lv32_100)) and not((state_1_load_fu_482_p1 = ap_const_lv32_10)) and not((state_1_load_fu_482_p1 = ap_const_lv32_0)) and (input_r_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_430_p1 = ap_const_lv1_1)))) then 
                tmp_id_V_1_reg_252 <= tmp_out_id_V_fu_148;
            end if; 
        end if;
    end process;

    tmp_keep_V_1_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state15_io) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op119_write_state15 = ap_const_boolean_1)) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_1_reg_694 = ap_const_lv32_100)))) and (ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_last_V_reg_727 = ap_const_lv1_1) and (state_1_reg_694 = ap_const_lv32_100))) then 
                tmp_keep_V_1_reg_300 <= tmp_keep_V_reg_706;
            elsif ((((input_r_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_430_p1 = ap_const_lv1_1) and (state_1_load_fu_482_p1 = ap_const_lv32_0)) or ((ap_phi_mux_tmp_last_V_1_phi_fu_368_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or (not((state_1_load_fu_482_p1 = ap_const_lv32_100)) and not((state_1_load_fu_482_p1 = ap_const_lv32_10)) and not((state_1_load_fu_482_p1 = ap_const_lv32_0)) and (input_r_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_430_p1 = ap_const_lv1_1)))) then 
                tmp_keep_V_1_reg_300 <= tmp_out_keep_V_fu_136;
            end if; 
        end if;
    end process;

    tmp_last_V_1_reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_fu_569_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                tmp_last_V_1_reg_365 <= p_4_0_0_0132_phi_reg_353;
            elsif (((input_r_TVALID_int_regslice = ap_const_logic_1) and (read_coefs_load_load_fu_505_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (state_1_load_fu_482_p1 = ap_const_lv32_10))) then 
                tmp_last_V_1_reg_365 <= input_r_TLAST_int_regslice;
            end if; 
        end if;
    end process;

    tmp_strb_V_1_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state15_io) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op119_write_state15 = ap_const_boolean_1)) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_1_reg_694 = ap_const_lv32_100)))) and (ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_last_V_reg_727 = ap_const_lv1_1) and (state_1_reg_694 = ap_const_lv32_100))) then 
                tmp_strb_V_1_reg_284 <= tmp_strb_V_reg_713;
            elsif ((((input_r_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_430_p1 = ap_const_lv1_1) and (state_1_load_fu_482_p1 = ap_const_lv32_0)) or ((ap_phi_mux_tmp_last_V_1_phi_fu_368_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or (not((state_1_load_fu_482_p1 = ap_const_lv32_100)) and not((state_1_load_fu_482_p1 = ap_const_lv32_10)) and not((state_1_load_fu_482_p1 = ap_const_lv32_0)) and (input_r_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_430_p1 = ap_const_lv1_1)))) then 
                tmp_strb_V_1_reg_284 <= tmp_out_strb_V_fu_140;
            end if; 
        end if;
    end process;

    tmp_user_V_1_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state15_io) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op119_write_state15 = ap_const_boolean_1)) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_1_reg_694 = ap_const_lv32_100)))) and (ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_last_V_reg_727 = ap_const_lv1_1) and (state_1_reg_694 = ap_const_lv32_100))) then 
                tmp_user_V_1_reg_268 <= tmp_user_V_reg_720;
            elsif ((((input_r_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_430_p1 = ap_const_lv1_1) and (state_1_load_fu_482_p1 = ap_const_lv32_0)) or ((ap_phi_mux_tmp_last_V_1_phi_fu_368_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or (not((state_1_load_fu_482_p1 = ap_const_lv32_100)) and not((state_1_load_fu_482_p1 = ap_const_lv32_10)) and not((state_1_load_fu_482_p1 = ap_const_lv32_0)) and (input_r_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_430_p1 = ap_const_lv1_1)))) then 
                tmp_user_V_1_reg_268 <= tmp_out_user_V_fu_144;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                accumulate_reg_760 <= accumulate_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                add_ln54_reg_770 <= add_ln54_fu_575_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                coefs_read_reg_657 <= coefs;
                gmem_addr_reg_670 <= sext_ln88_fu_444_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                gmem_addr_read_reg_750 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                mul_ln88_reg_755 <= grp_fu_527_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((input_r_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                p_4_0_0_0132_phi_reg_353 <= input_r_TLAST_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    state_1_reg_694(4) <= state_fu_160(4);    state_1_reg_694(8) <= state_fu_160(8);
                tmp_data_V_reg_698 <= input_r_TDATA_int_regslice;
                tmp_dest_V_reg_740 <= input_r_TDEST_int_regslice;
                tmp_id_V_reg_733 <= input_r_TID_int_regslice;
                tmp_keep_V_reg_706 <= input_r_TKEEP_int_regslice;
                tmp_last_V_reg_727 <= input_r_TLAST_int_regslice;
                tmp_strb_V_reg_713 <= input_r_TSTRB_int_regslice;
                tmp_user_V_reg_720 <= input_r_TUSER_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state15_io) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op119_write_state15 = ap_const_boolean_1)) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_1_reg_694 = ap_const_lv32_100)))) and (ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_last_V_reg_727 = ap_const_lv1_0) and (state_1_reg_694 = ap_const_lv32_100))) then
                tmp_out_data_V_fu_132 <= accumulate_reg_760;
                tmp_out_dest_V_fu_152 <= tmp_dest_V_reg_740;
                tmp_out_id_V_fu_148 <= tmp_id_V_reg_733;
                tmp_out_keep_V_fu_136 <= tmp_keep_V_reg_706;
                tmp_out_strb_V_fu_140 <= tmp_strb_V_reg_713;
                tmp_out_user_V_fu_144 <= tmp_user_V_reg_720;
            end if;
        end if;
    end process;
    state_1_reg_694(3 downto 0) <= "0000";
    state_1_reg_694(7 downto 5) <= "000";
    state_1_reg_694(31 downto 9) <= "00000000000000000000000";
    state_fu_160(3 downto 0) <= "0000";
    state_fu_160(7 downto 5) <= "000";
    state_fu_160(31 downto 9) <= "00000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state15, state_1_reg_694, tmp_last_V_reg_727, tmp_last_V_1_reg_365, ap_CS_fsm_state21, ap_CS_fsm_state2, ap_CS_fsm_state19, state_1_load_fu_482_p1, ap_CS_fsm_state17, grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_ap_done, grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_ap_done, grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_ap_done, gmem_ARREADY, gmem_RVALID, ap_predicate_op119_write_state15, ap_block_state15_io, ap_CS_fsm_state16, read_coefs_load_load_fu_505_p1, icmp_ln54_fu_569_p2, ap_CS_fsm_state3, ap_CS_fsm_state18, regslice_both_output_r_V_data_V_U_apdone_blk, output_r_TREADY_int_regslice, input_r_TVALID_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if ((not((state_1_load_fu_482_p1 = ap_const_lv32_100)) and not((state_1_load_fu_482_p1 = ap_const_lv32_10)) and (input_r_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                elsif (((input_r_TVALID_int_regslice = ap_const_logic_1) and (read_coefs_load_load_fu_505_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (state_1_load_fu_482_p1 = ap_const_lv32_10))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                elsif (((input_r_TVALID_int_regslice = ap_const_logic_1) and (read_coefs_load_load_fu_505_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (state_1_load_fu_482_p1 = ap_const_lv32_10))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                elsif (((input_r_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (state_1_load_fu_482_p1 = ap_const_lv32_100))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((output_r_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if ((not(((ap_const_boolean_1 = ap_block_state15_io) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op119_write_state15 = ap_const_boolean_1)) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_1_reg_694 = ap_const_lv32_100)))) and (ap_const_logic_1 = ap_CS_fsm_state15) and (((tmp_last_V_1_reg_365 = ap_const_lv1_0) and (state_1_reg_694 = ap_const_lv32_10)) or (not((state_1_reg_694 = ap_const_lv32_10)) and (tmp_last_V_reg_727 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((ap_const_boolean_1 = ap_block_state15_io) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op119_write_state15 = ap_const_boolean_1)) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_1_reg_694 = ap_const_lv32_100)))) and (ap_const_logic_1 = ap_CS_fsm_state15) and (((tmp_last_V_1_reg_365 = ap_const_lv1_1) and (state_1_reg_694 = ap_const_lv32_10)) or (not((state_1_reg_694 = ap_const_lv32_10)) and (tmp_last_V_reg_727 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((icmp_ln54_fu_569_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                if (((grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((input_r_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state21 => 
                if ((not(((output_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_output_r_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    accumulate_fu_534_p2 <= std_logic_vector(unsigned(mul_ln88_reg_755) + unsigned(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_accumulate_out));
    add_ln54_fu_575_p2 <= std_logic_vector(unsigned(j_reg_332) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state11_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state14_blk_assign_proc : process(output_r_TREADY_int_regslice)
    begin
        if ((output_r_TREADY_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state15_blk_assign_proc : process(state_1_reg_694, ap_predicate_op119_write_state15, ap_block_state15_io, output_r_TREADY_int_regslice)
    begin
        if (((ap_const_boolean_1 = ap_block_state15_io) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op119_write_state15 = ap_const_boolean_1)) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_1_reg_694 = ap_const_lv32_100)))) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state16_blk_assign_proc : process(grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_ap_done)
    begin
        if ((grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state17_blk <= ap_const_logic_0;

    ap_ST_fsm_state18_blk_assign_proc : process(grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_ap_done)
    begin
        if ((grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state18_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state18_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state19_blk_assign_proc : process(input_r_TVALID_int_regslice)
    begin
        if ((input_r_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state19_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state19_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state1_blk <= ap_const_logic_0;
    ap_ST_fsm_state20_blk <= ap_const_logic_0;

    ap_ST_fsm_state21_blk_assign_proc : process(regslice_both_output_r_V_data_V_U_apdone_blk, output_r_TREADY_int_regslice)
    begin
        if (((output_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_output_r_V_data_V_U_apdone_blk = ap_const_logic_1))) then 
            ap_ST_fsm_state21_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state21_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(input_r_TVALID_int_regslice)
    begin
        if ((input_r_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_ap_done)
    begin
        if ((grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state15_assign_proc : process(state_1_reg_694, ap_predicate_op119_write_state15, output_r_TREADY_int_regslice)
    begin
                ap_block_state15 <= (((output_r_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op119_write_state15 = ap_const_boolean_1)) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_1_reg_694 = ap_const_lv32_100)));
    end process;


    ap_block_state15_io_assign_proc : process(state_1_reg_694, ap_predicate_op119_write_state15, output_r_TREADY_int_regslice)
    begin
                ap_block_state15_io <= (((output_r_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op119_write_state15 = ap_const_boolean_1)) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_1_reg_694 = ap_const_lv32_100)));
    end process;


    ap_block_state21_assign_proc : process(regslice_both_output_r_V_data_V_U_apdone_blk, output_r_TREADY_int_regslice)
    begin
                ap_block_state21 <= ((output_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_output_r_V_data_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_phi_mux_tmp_data_V_5_phi_fu_320_p8_assign_proc : process(ap_CS_fsm_state15, state_1_reg_694, tmp_last_V_reg_727, accumulate_reg_760, tmp_data_V_5_reg_316)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_last_V_reg_727 = ap_const_lv1_1) and (state_1_reg_694 = ap_const_lv32_100))) then 
            ap_phi_mux_tmp_data_V_5_phi_fu_320_p8 <= accumulate_reg_760;
        else 
            ap_phi_mux_tmp_data_V_5_phi_fu_320_p8 <= tmp_data_V_5_reg_316;
        end if; 
    end process;


    ap_phi_mux_tmp_dest_V_1_phi_fu_240_p8_assign_proc : process(ap_CS_fsm_state15, state_1_reg_694, tmp_last_V_reg_727, tmp_dest_V_reg_740, tmp_dest_V_1_reg_236)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_last_V_reg_727 = ap_const_lv1_1) and (state_1_reg_694 = ap_const_lv32_100))) then 
            ap_phi_mux_tmp_dest_V_1_phi_fu_240_p8 <= tmp_dest_V_reg_740;
        else 
            ap_phi_mux_tmp_dest_V_1_phi_fu_240_p8 <= tmp_dest_V_1_reg_236;
        end if; 
    end process;


    ap_phi_mux_tmp_id_V_1_phi_fu_256_p8_assign_proc : process(ap_CS_fsm_state15, state_1_reg_694, tmp_last_V_reg_727, tmp_id_V_reg_733, tmp_id_V_1_reg_252)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_last_V_reg_727 = ap_const_lv1_1) and (state_1_reg_694 = ap_const_lv32_100))) then 
            ap_phi_mux_tmp_id_V_1_phi_fu_256_p8 <= tmp_id_V_reg_733;
        else 
            ap_phi_mux_tmp_id_V_1_phi_fu_256_p8 <= tmp_id_V_1_reg_252;
        end if; 
    end process;


    ap_phi_mux_tmp_keep_V_1_phi_fu_304_p8_assign_proc : process(ap_CS_fsm_state15, state_1_reg_694, tmp_last_V_reg_727, tmp_keep_V_reg_706, tmp_keep_V_1_reg_300)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_last_V_reg_727 = ap_const_lv1_1) and (state_1_reg_694 = ap_const_lv32_100))) then 
            ap_phi_mux_tmp_keep_V_1_phi_fu_304_p8 <= tmp_keep_V_reg_706;
        else 
            ap_phi_mux_tmp_keep_V_1_phi_fu_304_p8 <= tmp_keep_V_1_reg_300;
        end if; 
    end process;

    ap_phi_mux_tmp_last_V_1_phi_fu_368_p4 <= tmp_last_V_1_reg_365;

    ap_phi_mux_tmp_strb_V_1_phi_fu_288_p8_assign_proc : process(ap_CS_fsm_state15, state_1_reg_694, tmp_last_V_reg_727, tmp_strb_V_reg_713, tmp_strb_V_1_reg_284)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_last_V_reg_727 = ap_const_lv1_1) and (state_1_reg_694 = ap_const_lv32_100))) then 
            ap_phi_mux_tmp_strb_V_1_phi_fu_288_p8 <= tmp_strb_V_reg_713;
        else 
            ap_phi_mux_tmp_strb_V_1_phi_fu_288_p8 <= tmp_strb_V_1_reg_284;
        end if; 
    end process;


    ap_phi_mux_tmp_user_V_1_phi_fu_272_p8_assign_proc : process(ap_CS_fsm_state15, state_1_reg_694, tmp_last_V_reg_727, tmp_user_V_reg_720, tmp_user_V_1_reg_268)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_last_V_reg_727 = ap_const_lv1_1) and (state_1_reg_694 = ap_const_lv32_100))) then 
            ap_phi_mux_tmp_user_V_1_phi_fu_272_p8 <= tmp_user_V_reg_720;
        else 
            ap_phi_mux_tmp_user_V_1_phi_fu_272_p8 <= tmp_user_V_1_reg_268;
        end if; 
    end process;


    ap_predicate_op119_write_state15_assign_proc : process(state_1_reg_694, tmp_last_V_reg_727, tmp_last_V_1_reg_365)
    begin
                ap_predicate_op119_write_state15 <= (((tmp_last_V_1_reg_365 = ap_const_lv1_1) and (state_1_reg_694 = ap_const_lv32_10)) or (not((state_1_reg_694 = ap_const_lv32_10)) and (tmp_last_V_reg_727 = ap_const_lv1_1)));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state2, gmem_addr_reg_670, state_1_load_fu_482_p1, ap_CS_fsm_state17, grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_ARADDR, grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_ARADDR, gmem_ARREADY, icmp_ln54_fu_569_p2, ap_CS_fsm_state3, ap_CS_fsm_state18)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_ARADDR <= gmem_addr_reg_670;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or ((icmp_ln54_fu_569_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            gmem_ARADDR <= grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (state_1_load_fu_482_p1 = ap_const_lv32_100)))) then 
            gmem_ARADDR <= grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_ARADDR;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state2, state_1_load_fu_482_p1, ap_CS_fsm_state17, grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_ARLEN, grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_ARLEN, gmem_ARREADY, icmp_ln54_fu_569_p2, ap_CS_fsm_state3, ap_CS_fsm_state18)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_ARLEN <= ap_const_lv32_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or ((icmp_ln54_fu_569_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            gmem_ARLEN <= grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (state_1_load_fu_482_p1 = ap_const_lv32_100)))) then 
            gmem_ARLEN <= grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_ARLEN;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state2, state_1_load_fu_482_p1, ap_CS_fsm_state17, grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_ARVALID, grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_ARVALID, gmem_ARREADY, icmp_ln54_fu_569_p2, ap_CS_fsm_state3, ap_CS_fsm_state18)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or ((icmp_ln54_fu_569_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            gmem_ARVALID <= grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (state_1_load_fu_482_p1 = ap_const_lv32_100)))) then 
            gmem_ARVALID <= grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWADDR_assign_proc : process(ap_CS_fsm_state2, state_1_load_fu_482_p1, ap_CS_fsm_state17, grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_AWADDR, grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_AWADDR, ap_CS_fsm_state16, read_coefs_load_load_fu_505_p1, icmp_ln54_fu_569_p2, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((icmp_ln54_fu_569_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            gmem_AWADDR <= grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_AWADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((read_coefs_load_load_fu_505_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (state_1_load_fu_482_p1 = ap_const_lv32_10)))) then 
            gmem_AWADDR <= grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_AWADDR;
        else 
            gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_AWLEN_assign_proc : process(ap_CS_fsm_state2, state_1_load_fu_482_p1, ap_CS_fsm_state17, grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_AWLEN, grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_AWLEN, ap_CS_fsm_state16, read_coefs_load_load_fu_505_p1, icmp_ln54_fu_569_p2, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((icmp_ln54_fu_569_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            gmem_AWLEN <= grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_AWLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((read_coefs_load_load_fu_505_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (state_1_load_fu_482_p1 = ap_const_lv32_10)))) then 
            gmem_AWLEN <= grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_AWLEN;
        else 
            gmem_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state2, state_1_load_fu_482_p1, ap_CS_fsm_state17, grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_AWVALID, grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_AWVALID, ap_CS_fsm_state16, read_coefs_load_load_fu_505_p1, icmp_ln54_fu_569_p2, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((icmp_ln54_fu_569_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            gmem_AWVALID <= grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_AWVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((read_coefs_load_load_fu_505_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (state_1_load_fu_482_p1 = ap_const_lv32_10)))) then 
            gmem_AWVALID <= grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_AWVALID;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state2, state_1_load_fu_482_p1, ap_CS_fsm_state17, grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_BREADY, grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_BREADY, ap_CS_fsm_state16, read_coefs_load_load_fu_505_p1, icmp_ln54_fu_569_p2, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((icmp_ln54_fu_569_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            gmem_BREADY <= grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_BREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((read_coefs_load_load_fu_505_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (state_1_load_fu_482_p1 = ap_const_lv32_10)))) then 
            gmem_BREADY <= grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_BREADY;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state2, state_1_load_fu_482_p1, ap_CS_fsm_state17, grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_RREADY, grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_RREADY, gmem_RVALID, icmp_ln54_fu_569_p2, ap_CS_fsm_state3, ap_CS_fsm_state18)
    begin
        if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            gmem_RREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or ((icmp_ln54_fu_569_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            gmem_RREADY <= grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (state_1_load_fu_482_p1 = ap_const_lv32_100)))) then 
            gmem_RREADY <= grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_m_axi_gmem_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WDATA_assign_proc : process(ap_CS_fsm_state2, state_1_load_fu_482_p1, ap_CS_fsm_state17, grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_WDATA, grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_WDATA, ap_CS_fsm_state16, read_coefs_load_load_fu_505_p1, icmp_ln54_fu_569_p2, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((icmp_ln54_fu_569_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            gmem_WDATA <= grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_WDATA;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((read_coefs_load_load_fu_505_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (state_1_load_fu_482_p1 = ap_const_lv32_10)))) then 
            gmem_WDATA <= grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_WDATA;
        else 
            gmem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_WSTRB_assign_proc : process(ap_CS_fsm_state2, state_1_load_fu_482_p1, ap_CS_fsm_state17, grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_WSTRB, grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_WSTRB, ap_CS_fsm_state16, read_coefs_load_load_fu_505_p1, icmp_ln54_fu_569_p2, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((icmp_ln54_fu_569_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            gmem_WSTRB <= grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_WSTRB;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((read_coefs_load_load_fu_505_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (state_1_load_fu_482_p1 = ap_const_lv32_10)))) then 
            gmem_WSTRB <= grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_WSTRB;
        else 
            gmem_WSTRB <= "XXXX";
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state2, state_1_load_fu_482_p1, ap_CS_fsm_state17, grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_WVALID, grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_WVALID, ap_CS_fsm_state16, read_coefs_load_load_fu_505_p1, icmp_ln54_fu_569_p2, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((icmp_ln54_fu_569_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            gmem_WVALID <= grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_m_axi_gmem_WVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((read_coefs_load_load_fu_505_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (state_1_load_fu_482_p1 = ap_const_lv32_10)))) then 
            gmem_WVALID <= grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_m_axi_gmem_WVALID;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_ap_start <= grp_equalizer_Pipeline_Coef_Clear_Loop_fu_396_ap_start_reg;
    grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_ap_start <= grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_ap_start_reg;
    grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_ap_start <= grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_ap_start_reg;
    grp_fu_430_p1 <= input_r_TLAST_int_regslice;

    grp_fu_527_ce_assign_proc : process(grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_grp_fu_527_p_ce, grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_grp_fu_527_p_ce, ap_CS_fsm_state3, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_527_ce <= grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_grp_fu_527_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_527_ce <= grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_grp_fu_527_p_ce;
        else 
            grp_fu_527_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_527_p0_assign_proc : process(gmem_addr_read_reg_750, grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_grp_fu_527_p_din0, grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_grp_fu_527_p_din0, ap_CS_fsm_state3, ap_CS_fsm_state18, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_527_p0 <= grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_grp_fu_527_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_527_p0 <= grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_grp_fu_527_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_527_p0 <= gmem_addr_read_reg_750;
        else 
            grp_fu_527_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_527_p1_assign_proc : process(tmp_data_V_reg_698, grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_grp_fu_527_p_din1, grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_grp_fu_527_p_din1, ap_CS_fsm_state3, ap_CS_fsm_state18, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_527_p1 <= grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_grp_fu_527_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_527_p1 <= grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_grp_fu_527_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_527_p1 <= tmp_data_V_reg_698;
        else 
            grp_fu_527_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln35_fu_508_p0 <= input_r_TDATA_int_regslice;
    icmp_ln35_fu_508_p2 <= "1" when (icmp_ln35_fu_508_p0 = ap_const_lv32_BEEF) else "0";
    icmp_ln54_fu_569_p2 <= "1" when (j_reg_332 = ap_const_lv2_3) else "0";
    icmp_ln71_fu_581_p2 <= "1" when (tmp_data_V_2_reg_376 = ap_const_lv32_ABBA) else "0";

    input_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state19, input_r_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            input_r_TDATA_blk_n <= input_r_TVALID_int_regslice;
        else 
            input_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input_r_TREADY <= regslice_both_input_r_V_data_V_U_ack_in;

    input_r_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state19, grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_input_r_TREADY, ap_CS_fsm_state18, input_r_TVALID_int_regslice)
    begin
        if ((((input_r_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((input_r_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            input_r_TREADY_int_regslice <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            input_r_TREADY_int_regslice <= grp_equalizer_Pipeline_VITIS_LOOP_57_1_fu_403_input_r_TREADY;
        else 
            input_r_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    output_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state15, state_1_reg_694, tmp_last_V_reg_727, tmp_last_V_1_reg_365, ap_CS_fsm_state21, output_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (((tmp_last_V_1_reg_365 = ap_const_lv1_1) and (state_1_reg_694 = ap_const_lv32_10)) or (not((state_1_reg_694 = ap_const_lv32_10)) and (tmp_last_V_reg_727 = ap_const_lv1_1)))) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (state_1_reg_694 = ap_const_lv32_100)))) then 
            output_r_TDATA_blk_n <= output_r_TREADY_int_regslice;
        else 
            output_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    output_r_TDATA_int_regslice_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state15, state_1_reg_694, accumulate_fu_534_p2, ap_predicate_op119_write_state15, ap_phi_mux_tmp_data_V_5_phi_fu_320_p8, output_r_TREADY_int_regslice)
    begin
        if ((not((((output_r_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op119_write_state15 = ap_const_boolean_1)) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_1_reg_694 = ap_const_lv32_100)))) and (ap_predicate_op119_write_state15 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            output_r_TDATA_int_regslice <= ap_phi_mux_tmp_data_V_5_phi_fu_320_p8;
        elsif (((output_r_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            output_r_TDATA_int_regslice <= accumulate_fu_534_p2;
        else 
            output_r_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_TDEST_int_regslice_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state15, state_1_reg_694, tmp_dest_V_reg_740, ap_phi_mux_tmp_dest_V_1_phi_fu_240_p8, ap_predicate_op119_write_state15, output_r_TREADY_int_regslice)
    begin
        if ((not((((output_r_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op119_write_state15 = ap_const_boolean_1)) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_1_reg_694 = ap_const_lv32_100)))) and (ap_predicate_op119_write_state15 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            output_r_TDEST_int_regslice <= ap_phi_mux_tmp_dest_V_1_phi_fu_240_p8;
        elsif (((output_r_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            output_r_TDEST_int_regslice <= tmp_dest_V_reg_740;
        else 
            output_r_TDEST_int_regslice <= "X";
        end if; 
    end process;


    output_r_TID_int_regslice_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state15, state_1_reg_694, tmp_id_V_reg_733, ap_predicate_op119_write_state15, ap_phi_mux_tmp_id_V_1_phi_fu_256_p8, output_r_TREADY_int_regslice)
    begin
        if ((not((((output_r_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op119_write_state15 = ap_const_boolean_1)) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_1_reg_694 = ap_const_lv32_100)))) and (ap_predicate_op119_write_state15 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            output_r_TID_int_regslice <= ap_phi_mux_tmp_id_V_1_phi_fu_256_p8;
        elsif (((output_r_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            output_r_TID_int_regslice <= tmp_id_V_reg_733;
        else 
            output_r_TID_int_regslice <= "X";
        end if; 
    end process;


    output_r_TKEEP_int_regslice_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state15, state_1_reg_694, tmp_keep_V_reg_706, ap_predicate_op119_write_state15, ap_phi_mux_tmp_keep_V_1_phi_fu_304_p8, output_r_TREADY_int_regslice)
    begin
        if ((not((((output_r_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op119_write_state15 = ap_const_boolean_1)) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_1_reg_694 = ap_const_lv32_100)))) and (ap_predicate_op119_write_state15 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            output_r_TKEEP_int_regslice <= ap_phi_mux_tmp_keep_V_1_phi_fu_304_p8;
        elsif (((output_r_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            output_r_TKEEP_int_regslice <= tmp_keep_V_reg_706;
        else 
            output_r_TKEEP_int_regslice <= "XXXX";
        end if; 
    end process;


    output_r_TLAST_int_regslice_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state15, state_1_reg_694, tmp_last_V_reg_727, ap_predicate_op119_write_state15, output_r_TREADY_int_regslice)
    begin
        if ((not((((output_r_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op119_write_state15 = ap_const_boolean_1)) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_1_reg_694 = ap_const_lv32_100)))) and (ap_predicate_op119_write_state15 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            output_r_TLAST_int_regslice <= ap_const_lv1_1;
        elsif (((output_r_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            output_r_TLAST_int_regslice <= tmp_last_V_reg_727;
        else 
            output_r_TLAST_int_regslice <= "X";
        end if; 
    end process;


    output_r_TSTRB_int_regslice_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state15, state_1_reg_694, tmp_strb_V_reg_713, ap_predicate_op119_write_state15, ap_phi_mux_tmp_strb_V_1_phi_fu_288_p8, output_r_TREADY_int_regslice)
    begin
        if ((not((((output_r_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op119_write_state15 = ap_const_boolean_1)) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_1_reg_694 = ap_const_lv32_100)))) and (ap_predicate_op119_write_state15 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            output_r_TSTRB_int_regslice <= ap_phi_mux_tmp_strb_V_1_phi_fu_288_p8;
        elsif (((output_r_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            output_r_TSTRB_int_regslice <= tmp_strb_V_reg_713;
        else 
            output_r_TSTRB_int_regslice <= "XXXX";
        end if; 
    end process;


    output_r_TUSER_int_regslice_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state15, state_1_reg_694, tmp_user_V_reg_720, ap_predicate_op119_write_state15, ap_phi_mux_tmp_user_V_1_phi_fu_272_p8, output_r_TREADY_int_regslice)
    begin
        if ((not((((output_r_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op119_write_state15 = ap_const_boolean_1)) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_1_reg_694 = ap_const_lv32_100)))) and (ap_predicate_op119_write_state15 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            output_r_TUSER_int_regslice <= ap_phi_mux_tmp_user_V_1_phi_fu_272_p8;
        elsif (((output_r_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            output_r_TUSER_int_regslice <= tmp_user_V_reg_720;
        else 
            output_r_TUSER_int_regslice <= "X";
        end if; 
    end process;

    output_r_TVALID <= regslice_both_output_r_V_data_V_U_vld_out;

    output_r_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state15, state_1_reg_694, ap_predicate_op119_write_state15, ap_block_state15_io, output_r_TREADY_int_regslice)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state15_io) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op119_write_state15 = ap_const_boolean_1)) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (state_1_reg_694 = ap_const_lv32_100)))) and (ap_predicate_op119_write_state15 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((output_r_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            output_r_TVALID_int_regslice <= ap_const_logic_1;
        else 
            output_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    read_coefs_load_load_fu_505_p1 <= read_coefs_fu_156;
    select_ln16_1_fu_587_p3 <= 
        ap_const_lv32_100 when (icmp_ln71_fu_581_p2(0) = '1') else 
        ap_const_lv32_10;
    select_ln16_fu_514_p3 <= 
        ap_const_lv32_10 when (icmp_ln35_fu_508_p2(0) = '1') else 
        ap_const_lv32_0;
        sext_ln88_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_434_p4),64));


    signal_shift_reg_address0_assign_proc : process(ap_CS_fsm_state4, grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_signal_shift_reg_address0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            signal_shift_reg_address0 <= ap_const_lv7_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            signal_shift_reg_address0 <= grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_signal_shift_reg_address0;
        else 
            signal_shift_reg_address0 <= "XXXXXXX";
        end if; 
    end process;


    signal_shift_reg_ce0_assign_proc : process(ap_CS_fsm_state4, grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_signal_shift_reg_ce0, gmem_ARREADY, ap_CS_fsm_state3)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            signal_shift_reg_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            signal_shift_reg_ce0 <= grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_signal_shift_reg_ce0;
        else 
            signal_shift_reg_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    signal_shift_reg_d0_assign_proc : process(ap_CS_fsm_state4, tmp_data_V_reg_698, grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_signal_shift_reg_d0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            signal_shift_reg_d0 <= tmp_data_V_reg_698;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            signal_shift_reg_d0 <= grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_signal_shift_reg_d0;
        else 
            signal_shift_reg_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    signal_shift_reg_we0_assign_proc : process(ap_CS_fsm_state4, grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_signal_shift_reg_we0, gmem_ARREADY, ap_CS_fsm_state3)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            signal_shift_reg_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            signal_shift_reg_we0 <= grp_equalizer_Pipeline_Shift_Accumulate_Loop_fu_386_signal_shift_reg_we0;
        else 
            signal_shift_reg_we0 <= ap_const_logic_0;
        end if; 
    end process;

    state_1_load_fu_482_p1 <= state_fu_160;
    trunc_ln_fu_434_p4 <= coefs(63 downto 2);
end behav;
