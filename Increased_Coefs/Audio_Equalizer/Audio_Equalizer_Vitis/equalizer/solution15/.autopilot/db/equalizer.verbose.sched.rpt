

================================================================
== Vitis HLS Report for 'equalizer'
================================================================
* Date:           Fri Apr 26 02:45:21 2024

* Version:        2022.1 (Build 3526262 on Mon Apr 18 15:48:16 MDT 2022)
* Project:        equalizer
* Solution:       solution15 (Vivado IP Flow Target)
* Product family: zynq
* Target device:  xc7z020-clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  7.300 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |        ?|        ?|         ?|         ?|    ?|    ?|       no|
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                   |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |     Loop Name     |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- Running_Loop     |        ?|        ?|   2 ~ 469|          -|          -|     ?|        no|
        | + Coef_Read_Loop  |      357|      357|       119|          -|          -|     3|        no|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 23
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 21 17 16 22 
3 --> 4 
4 --> 5 
5 --> 6 
6 --> 7 
7 --> 8 
8 --> 9 
9 --> 10 
10 --> 11 
11 --> 12 
12 --> 13 
13 --> 14 
14 --> 15 
15 --> 16 
16 --> 23 22 
17 --> 18 
18 --> 19 21 
19 --> 20 
20 --> 18 
21 --> 16 22 
22 --> 2 
23 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.58>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%tmp_out_data_V = alloca i32 1"   --->   Operation 24 'alloca' 'tmp_out_data_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%tmp_out_keep_V = alloca i32 1"   --->   Operation 25 'alloca' 'tmp_out_keep_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%tmp_out_strb_V = alloca i32 1"   --->   Operation 26 'alloca' 'tmp_out_strb_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%tmp_out_user_V = alloca i32 1"   --->   Operation 27 'alloca' 'tmp_out_user_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%tmp_out_id_V = alloca i32 1"   --->   Operation 28 'alloca' 'tmp_out_id_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (0.00ns)   --->   "%tmp_out_dest_V = alloca i32 1"   --->   Operation 29 'alloca' 'tmp_out_dest_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 30 [1/1] (0.00ns)   --->   "%read_coefs = alloca i32 1"   --->   Operation 30 'alloca' 'read_coefs' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "%state = alloca i32 1"   --->   Operation 31 'alloca' 'state' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 32 [1/1] (1.00ns)   --->   "%coefs_read = read i64 @_ssdm_op_Read.s_axilite.i64, i64 %coefs"   --->   Operation 32 'read' 'coefs_read' <Predicate = true> <Delay = 1.00> <CoreInst = "s_axilite">   --->   Core 114 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "%accumulate_loc = alloca i64 1"   --->   Operation 33 'alloca' 'accumulate_loc' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "%spectopmodule_ln3 = spectopmodule void @_ssdm_op_SpecTopModule, void @empty_10" [equalizer.cpp:3]   --->   Operation 34 'spectopmodule' 'spectopmodule_ln3' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (0.00ns)   --->   "%specinterface_ln3 = specinterface void @_ssdm_op_SpecInterface, i32 0, void @empty_11, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0, i32 4294967295, i32 0" [equalizer.cpp:3]   --->   Operation 35 'specinterface' 'specinterface_ln3' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 36 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i16 %gmem, void @empty, i32 0, i32 0, void @empty_0, i32 0, i32 99, void @empty_1, void @empty_2, void @empty_0, i32 16, i32 16, i32 16, i32 16, void @empty_0, void @empty_0, i32 4294967295, i32 0"   --->   Operation 36 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 37 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i16 %gmem"   --->   Operation 37 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 38 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i16 %output_r_V_data_V, i2 %output_r_V_keep_V, i2 %output_r_V_strb_V, i1 %output_r_V_user_V, i1 %output_r_V_last_V, i1 %output_r_V_id_V, i1 %output_r_V_dest_V, void @empty_3, i32 1, i32 1, void @empty_4, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0, i32 4294967295, i32 0"   --->   Operation 38 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 39 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i16 %output_r_V_data_V"   --->   Operation 39 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 40 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i2 %output_r_V_keep_V"   --->   Operation 40 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 41 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i2 %output_r_V_strb_V"   --->   Operation 41 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 42 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %output_r_V_user_V"   --->   Operation 42 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 43 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %output_r_V_last_V"   --->   Operation 43 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 44 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %output_r_V_id_V"   --->   Operation 44 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 45 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %output_r_V_dest_V"   --->   Operation 45 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 46 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i64 %coefs, void @empty_5, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_6, void @empty_7, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_8, i32 4294967295, i32 0"   --->   Operation 46 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 47 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i64 %coefs, void @empty_9, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_8, i32 4294967295, i32 0"   --->   Operation 47 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 48 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i16 %input_r_V_data_V, i2 %input_r_V_keep_V, i2 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V, void @empty_3, i32 1, i32 1, void @empty_4, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0, i32 4294967295, i32 0"   --->   Operation 48 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 49 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i16 %input_r_V_data_V"   --->   Operation 49 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 50 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i2 %input_r_V_keep_V"   --->   Operation 50 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 51 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i2 %input_r_V_strb_V"   --->   Operation 51 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 52 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %input_r_V_user_V"   --->   Operation 52 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 53 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %input_r_V_last_V"   --->   Operation 53 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 54 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %input_r_V_id_V"   --->   Operation 54 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 55 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %input_r_V_dest_V"   --->   Operation 55 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 56 [1/1] (0.00ns)   --->   "%trunc_ln = partselect i63 @_ssdm_op_PartSelect.i63.i64.i32.i32, i64 %coefs_read, i32 1, i32 63" [equalizer.cpp:76]   --->   Operation 56 'partselect' 'trunc_ln' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 57 [1/1] (0.00ns)   --->   "%sext_ln76 = sext i63 %trunc_ln" [equalizer.cpp:76]   --->   Operation 57 'sext' 'sext_ln76' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 58 [1/1] (0.00ns)   --->   "%gmem_addr = getelementptr i16 %gmem, i64 %sext_ln76" [equalizer.cpp:76]   --->   Operation 58 'getelementptr' 'gmem_addr' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 59 [1/1] (1.58ns)   --->   "%store_ln26 = store i32 0, i32 %state" [equalizer.cpp:26]   --->   Operation 59 'store' 'store_ln26' <Predicate = true> <Delay = 1.58>
ST_1 : Operation 60 [1/1] (1.58ns)   --->   "%store_ln26 = store i1 0, i1 %read_coefs" [equalizer.cpp:26]   --->   Operation 60 'store' 'store_ln26' <Predicate = true> <Delay = 1.58>
ST_1 : Operation 61 [1/1] (0.00ns)   --->   "%br_ln26 = br void %while.body" [equalizer.cpp:26]   --->   Operation 61 'br' 'br_ln26' <Predicate = true> <Delay = 0.00>

State 2 <SV = 1> <Delay = 4.49>
ST_2 : Operation 62 [1/1] (0.00ns)   --->   "%tmp_out_data_V_1 = load i16 %tmp_out_data_V"   --->   Operation 62 'load' 'tmp_out_data_V_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 63 [1/1] (0.00ns)   --->   "%tmp_out_keep_V_1 = load i2 %tmp_out_keep_V"   --->   Operation 63 'load' 'tmp_out_keep_V_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 64 [1/1] (0.00ns)   --->   "%tmp_out_strb_V_1 = load i2 %tmp_out_strb_V"   --->   Operation 64 'load' 'tmp_out_strb_V_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 65 [1/1] (0.00ns)   --->   "%tmp_out_user_V_1 = load i1 %tmp_out_user_V"   --->   Operation 65 'load' 'tmp_out_user_V_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 66 [1/1] (0.00ns)   --->   "%tmp_out_id_V_1 = load i1 %tmp_out_id_V"   --->   Operation 66 'load' 'tmp_out_id_V_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 67 [1/1] (0.00ns)   --->   "%tmp_out_dest_V_1 = load i1 %tmp_out_dest_V"   --->   Operation 67 'load' 'tmp_out_dest_V_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 68 [1/1] (0.00ns)   --->   "%state_2 = load i32 %state"   --->   Operation 68 'load' 'state_2' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 69 [1/1] (0.00ns)   --->   "%specloopname_ln17 = specloopname void @_ssdm_op_SpecLoopName, void @empty_16" [equalizer.cpp:17]   --->   Operation 69 'specloopname' 'specloopname_ln17' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 70 [1/1] (0.00ns)   --->   "%empty = read i24 @_ssdm_op_Read.axis.volatile.i16P0A.i2P0A.i2P0A.i1P0A.i1P0A.i1P0A.i1P0A, i16 %input_r_V_data_V, i2 %input_r_V_keep_V, i2 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 70 'read' 'empty' <Predicate = true> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_2 : Operation 71 [1/1] (0.00ns)   --->   "%tmp_data_V = extractvalue i24 %empty"   --->   Operation 71 'extractvalue' 'tmp_data_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 72 [1/1] (0.00ns)   --->   "%tmp_keep_V = extractvalue i24 %empty"   --->   Operation 72 'extractvalue' 'tmp_keep_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 73 [1/1] (0.00ns)   --->   "%tmp_strb_V = extractvalue i24 %empty"   --->   Operation 73 'extractvalue' 'tmp_strb_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 74 [1/1] (0.00ns)   --->   "%tmp_user_V = extractvalue i24 %empty"   --->   Operation 74 'extractvalue' 'tmp_user_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 75 [1/1] (0.00ns)   --->   "%tmp_last_V = extractvalue i24 %empty"   --->   Operation 75 'extractvalue' 'tmp_last_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 76 [1/1] (0.00ns)   --->   "%tmp_id_V = extractvalue i24 %empty"   --->   Operation 76 'extractvalue' 'tmp_id_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 77 [1/1] (0.00ns)   --->   "%tmp_dest_V = extractvalue i24 %empty"   --->   Operation 77 'extractvalue' 'tmp_dest_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 78 [1/1] (1.58ns)   --->   "%switch_ln29 = switch i32 %state_2, void %sw.epilog, i32 0, void %if.end, i32 17, void %sw.bb2, i32 4096, void %for.inc47.preheader" [equalizer.cpp:29]   --->   Operation 78 'switch' 'switch_ln29' <Predicate = true> <Delay = 1.58>
ST_2 : Operation 79 [2/2] (3.52ns)   --->   "%call_ln0 = call void @equalizer_Pipeline_Shift_Accumulate_Loop, i16 %gmem, i64 %coefs_read, i16 %accumulate_loc, i16 %signal_shift_reg"   --->   Operation 79 'call' 'call_ln0' <Predicate = (state_2 == 4096)> <Delay = 3.52> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_2 : Operation 80 [1/1] (0.00ns)   --->   "%read_coefs_load = load i1 %read_coefs" [equalizer.cpp:37]   --->   Operation 80 'load' 'read_coefs_load' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_2 : Operation 81 [1/1] (0.00ns)   --->   "%br_ln37 = br i1 %read_coefs_load, void %for.inc.preheader, void %sw.bb2.sw.epilog_crit_edge" [equalizer.cpp:37]   --->   Operation 81 'br' 'br_ln37' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_2 : Operation 82 [2/2] (3.52ns)   --->   "%call_ln0 = call void @equalizer_Pipeline_Coef_Clear_Loop, i16 %gmem, i64 %coefs_read"   --->   Operation 82 'call' 'call_ln0' <Predicate = (state_2 == 17 & !read_coefs_load)> <Delay = 3.52> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_2 : Operation 83 [1/1] (1.58ns)   --->   "%store_ln37 = store i1 1, i1 %read_coefs" [equalizer.cpp:37]   --->   Operation 83 'store' 'store_ln37' <Predicate = (state_2 == 17 & read_coefs_load)> <Delay = 1.58>
ST_2 : Operation 84 [1/1] (1.58ns)   --->   "%br_ln37 = br void %sw.epilog" [equalizer.cpp:37]   --->   Operation 84 'br' 'br_ln37' <Predicate = (state_2 == 17 & read_coefs_load)> <Delay = 1.58>
ST_2 : Operation 85 [1/1] (1.70ns)   --->   "%br_ln92 = br i1 %tmp_last_V, void %if.end69, void %while.end" [equalizer.cpp:92]   --->   Operation 85 'br' 'br_ln92' <Predicate = (state_2 == 0)> <Delay = 1.70>

State 3 <SV = 2> <Delay = 0.00>
ST_3 : Operation 86 [1/2] (0.00ns)   --->   "%call_ln0 = call void @equalizer_Pipeline_Shift_Accumulate_Loop, i16 %gmem, i64 %coefs_read, i16 %accumulate_loc, i16 %signal_shift_reg"   --->   Operation 86 'call' 'call_ln0' <Predicate = true> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 4 <SV = 3> <Delay = 7.30>
ST_4 : Operation 87 [7/7] (7.30ns)   --->   "%gmem_load_1_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i16P1A, i16 %gmem_addr, i32 1" [equalizer.cpp:76]   --->   Operation 87 'readreq' 'gmem_load_1_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_4 : Operation 88 [1/1] (3.25ns)   --->   "%store_ln77 = store i16 %tmp_data_V, i16 0" [equalizer.cpp:77]   --->   Operation 88 'store' 'store_ln77' <Predicate = true> <Delay = 3.25> <CoreInst = "RAM">   --->   Core 82 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 16> <Depth = 99> <RAM>

State 5 <SV = 4> <Delay = 7.30>
ST_5 : Operation 89 [6/7] (7.30ns)   --->   "%gmem_load_1_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i16P1A, i16 %gmem_addr, i32 1" [equalizer.cpp:76]   --->   Operation 89 'readreq' 'gmem_load_1_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 6 <SV = 5> <Delay = 7.30>
ST_6 : Operation 90 [5/7] (7.30ns)   --->   "%gmem_load_1_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i16P1A, i16 %gmem_addr, i32 1" [equalizer.cpp:76]   --->   Operation 90 'readreq' 'gmem_load_1_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 7 <SV = 6> <Delay = 7.30>
ST_7 : Operation 91 [4/7] (7.30ns)   --->   "%gmem_load_1_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i16P1A, i16 %gmem_addr, i32 1" [equalizer.cpp:76]   --->   Operation 91 'readreq' 'gmem_load_1_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 8 <SV = 7> <Delay = 7.30>
ST_8 : Operation 92 [3/7] (7.30ns)   --->   "%gmem_load_1_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i16P1A, i16 %gmem_addr, i32 1" [equalizer.cpp:76]   --->   Operation 92 'readreq' 'gmem_load_1_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 9 <SV = 8> <Delay = 7.30>
ST_9 : Operation 93 [2/7] (7.30ns)   --->   "%gmem_load_1_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i16P1A, i16 %gmem_addr, i32 1" [equalizer.cpp:76]   --->   Operation 93 'readreq' 'gmem_load_1_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 10 <SV = 9> <Delay = 7.30>
ST_10 : Operation 94 [1/7] (7.30ns)   --->   "%gmem_load_1_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i16P1A, i16 %gmem_addr, i32 1" [equalizer.cpp:76]   --->   Operation 94 'readreq' 'gmem_load_1_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 11 <SV = 10> <Delay = 7.30>
ST_11 : Operation 95 [1/1] (7.30ns)   --->   "%gmem_addr_read = read i16 @_ssdm_op_Read.m_axi.i16P1A, i16 %gmem_addr" [equalizer.cpp:76]   --->   Operation 95 'read' 'gmem_addr_read' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 12 <SV = 11> <Delay = 1.05>
ST_12 : Operation 96 [3/3] (1.05ns) (grouped into DSP with root node accumulate)   --->   "%mul_ln76 = mul i16 %gmem_addr_read, i16 %tmp_data_V" [equalizer.cpp:76]   --->   Operation 96 'mul' 'mul_ln76' <Predicate = true> <Delay = 1.05> <CoreInst = "DSP48">   --->   Core 119 'DSP48' <Latency = 3> <II = 1> <Delay = 2.15> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>

State 13 <SV = 12> <Delay = 1.05>
ST_13 : Operation 97 [2/3] (1.05ns) (grouped into DSP with root node accumulate)   --->   "%mul_ln76 = mul i16 %gmem_addr_read, i16 %tmp_data_V" [equalizer.cpp:76]   --->   Operation 97 'mul' 'mul_ln76' <Predicate = true> <Delay = 1.05> <CoreInst = "DSP48">   --->   Core 119 'DSP48' <Latency = 3> <II = 1> <Delay = 2.15> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>

State 14 <SV = 13> <Delay = 2.10>
ST_14 : Operation 98 [1/1] (0.00ns)   --->   "%accumulate_loc_load = load i16 %accumulate_loc"   --->   Operation 98 'load' 'accumulate_loc_load' <Predicate = true> <Delay = 0.00>
ST_14 : Operation 99 [1/3] (0.00ns) (grouped into DSP with root node accumulate)   --->   "%mul_ln76 = mul i16 %gmem_addr_read, i16 %tmp_data_V" [equalizer.cpp:76]   --->   Operation 99 'mul' 'mul_ln76' <Predicate = true> <Delay = 0.00> <CoreInst = "DSP48">   --->   Core 119 'DSP48' <Latency = 3> <II = 1> <Delay = 2.15> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_14 : Operation 100 [2/2] (2.10ns) (root node of the DSP)   --->   "%accumulate = add i16 %mul_ln76, i16 %accumulate_loc_load"   --->   Operation 100 'add' 'accumulate' <Predicate = true> <Delay = 2.10> <CoreInst = "DSP48">   --->   Core 119 'DSP48' <Latency = 3> <II = 1> <Delay = 2.15> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>

State 15 <SV = 14> <Delay = 2.10>
ST_15 : Operation 101 [1/2] (2.10ns) (root node of the DSP)   --->   "%accumulate = add i16 %mul_ln76, i16 %accumulate_loc_load"   --->   Operation 101 'add' 'accumulate' <Predicate = true> <Delay = 2.10> <CoreInst = "DSP48">   --->   Core 119 'DSP48' <Latency = 3> <II = 1> <Delay = 2.15> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_15 : Operation 102 [2/2] (0.00ns)   --->   "%write_ln304 = write void @_ssdm_op_Write.axis.volatile.i16P0A.i2P0A.i2P0A.i1P0A.i1P0A.i1P0A.i1P0A, i16 %output_r_V_data_V, i2 %output_r_V_keep_V, i2 %output_r_V_strb_V, i1 %output_r_V_user_V, i1 %output_r_V_last_V, i1 %output_r_V_id_V, i1 %output_r_V_dest_V, i16 %accumulate, i2 %tmp_keep_V, i2 %tmp_strb_V, i1 %tmp_user_V, i1 %tmp_last_V, i1 %tmp_id_V, i1 %tmp_dest_V"   --->   Operation 102 'write' 'write_ln304' <Predicate = true> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >

State 16 <SV = 15> <Delay = 1.70>
ST_16 : Operation 103 [1/2] (0.00ns)   --->   "%write_ln304 = write void @_ssdm_op_Write.axis.volatile.i16P0A.i2P0A.i2P0A.i1P0A.i1P0A.i1P0A.i1P0A, i16 %output_r_V_data_V, i2 %output_r_V_keep_V, i2 %output_r_V_strb_V, i1 %output_r_V_user_V, i1 %output_r_V_last_V, i1 %output_r_V_id_V, i1 %output_r_V_dest_V, i16 %accumulate, i2 %tmp_keep_V, i2 %tmp_strb_V, i1 %tmp_user_V, i1 %tmp_last_V, i1 %tmp_id_V, i1 %tmp_dest_V"   --->   Operation 103 'write' 'write_ln304' <Predicate = (state_2 == 4096)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_16 : Operation 104 [1/1] (1.58ns)   --->   "%br_ln92 = br i1 %tmp_last_V, void %for.inc47.preheader.if.end69_crit_edge, void %while.end" [equalizer.cpp:92]   --->   Operation 104 'br' 'br_ln92' <Predicate = (state_2 == 4096)> <Delay = 1.58>
ST_16 : Operation 105 [1/1] (0.00ns)   --->   "%store_ln92 = store i1 %tmp_dest_V, i1 %tmp_out_dest_V" [equalizer.cpp:92]   --->   Operation 105 'store' 'store_ln92' <Predicate = (state_2 == 4096 & !tmp_last_V)> <Delay = 0.00>
ST_16 : Operation 106 [1/1] (0.00ns)   --->   "%store_ln92 = store i1 %tmp_id_V, i1 %tmp_out_id_V" [equalizer.cpp:92]   --->   Operation 106 'store' 'store_ln92' <Predicate = (state_2 == 4096 & !tmp_last_V)> <Delay = 0.00>
ST_16 : Operation 107 [1/1] (0.00ns)   --->   "%store_ln92 = store i1 %tmp_user_V, i1 %tmp_out_user_V" [equalizer.cpp:92]   --->   Operation 107 'store' 'store_ln92' <Predicate = (state_2 == 4096 & !tmp_last_V)> <Delay = 0.00>
ST_16 : Operation 108 [1/1] (0.00ns)   --->   "%store_ln92 = store i2 %tmp_strb_V, i2 %tmp_out_strb_V" [equalizer.cpp:92]   --->   Operation 108 'store' 'store_ln92' <Predicate = (state_2 == 4096 & !tmp_last_V)> <Delay = 0.00>
ST_16 : Operation 109 [1/1] (0.00ns)   --->   "%store_ln92 = store i2 %tmp_keep_V, i2 %tmp_out_keep_V" [equalizer.cpp:92]   --->   Operation 109 'store' 'store_ln92' <Predicate = (state_2 == 4096 & !tmp_last_V)> <Delay = 0.00>
ST_16 : Operation 110 [1/1] (0.00ns)   --->   "%store_ln92 = store i16 %accumulate, i16 %tmp_out_data_V" [equalizer.cpp:92]   --->   Operation 110 'store' 'store_ln92' <Predicate = (state_2 == 4096 & !tmp_last_V)> <Delay = 0.00>
ST_16 : Operation 111 [1/1] (1.70ns)   --->   "%br_ln92 = br void %if.end69" [equalizer.cpp:92]   --->   Operation 111 'br' 'br_ln92' <Predicate = (state_2 == 4096 & !tmp_last_V)> <Delay = 1.70>
ST_16 : Operation 112 [1/1] (0.00ns)   --->   "%tmp_dest_V_1 = phi i1 %tmp_out_dest_V_1, void %if.end, i1 %tmp_dest_V, void %for.inc47.preheader, i1 %tmp_out_dest_V_1, void %sw.epilog"   --->   Operation 112 'phi' 'tmp_dest_V_1' <Predicate = (state_2 == 4096 & tmp_last_V) | (state_2 != 0 & state_2 != 4096 & tmp_last_V_1) | (state_2 == 0 & tmp_last_V)> <Delay = 0.00>
ST_16 : Operation 113 [1/1] (0.00ns)   --->   "%tmp_id_V_1 = phi i1 %tmp_out_id_V_1, void %if.end, i1 %tmp_id_V, void %for.inc47.preheader, i1 %tmp_out_id_V_1, void %sw.epilog"   --->   Operation 113 'phi' 'tmp_id_V_1' <Predicate = (state_2 == 4096 & tmp_last_V) | (state_2 != 0 & state_2 != 4096 & tmp_last_V_1) | (state_2 == 0 & tmp_last_V)> <Delay = 0.00>
ST_16 : Operation 114 [1/1] (0.00ns)   --->   "%tmp_user_V_1 = phi i1 %tmp_out_user_V_1, void %if.end, i1 %tmp_user_V, void %for.inc47.preheader, i1 %tmp_out_user_V_1, void %sw.epilog"   --->   Operation 114 'phi' 'tmp_user_V_1' <Predicate = (state_2 == 4096 & tmp_last_V) | (state_2 != 0 & state_2 != 4096 & tmp_last_V_1) | (state_2 == 0 & tmp_last_V)> <Delay = 0.00>
ST_16 : Operation 115 [1/1] (0.00ns)   --->   "%tmp_strb_V_1 = phi i2 %tmp_out_strb_V_1, void %if.end, i2 %tmp_strb_V, void %for.inc47.preheader, i2 %tmp_out_strb_V_1, void %sw.epilog"   --->   Operation 115 'phi' 'tmp_strb_V_1' <Predicate = (state_2 == 4096 & tmp_last_V) | (state_2 != 0 & state_2 != 4096 & tmp_last_V_1) | (state_2 == 0 & tmp_last_V)> <Delay = 0.00>
ST_16 : Operation 116 [1/1] (0.00ns)   --->   "%tmp_keep_V_1 = phi i2 %tmp_out_keep_V_1, void %if.end, i2 %tmp_keep_V, void %for.inc47.preheader, i2 %tmp_out_keep_V_1, void %sw.epilog"   --->   Operation 116 'phi' 'tmp_keep_V_1' <Predicate = (state_2 == 4096 & tmp_last_V) | (state_2 != 0 & state_2 != 4096 & tmp_last_V_1) | (state_2 == 0 & tmp_last_V)> <Delay = 0.00>
ST_16 : Operation 117 [1/1] (0.00ns)   --->   "%tmp_data_V_4 = phi i16 %tmp_out_data_V_1, void %if.end, i16 %accumulate, void %for.inc47.preheader, i16 %tmp_out_data_V_1, void %sw.epilog"   --->   Operation 117 'phi' 'tmp_data_V_4' <Predicate = (state_2 == 4096 & tmp_last_V) | (state_2 != 0 & state_2 != 4096 & tmp_last_V_1) | (state_2 == 0 & tmp_last_V)> <Delay = 0.00>
ST_16 : Operation 118 [2/2] (0.00ns)   --->   "%write_ln304 = write void @_ssdm_op_Write.axis.volatile.i16P0A.i2P0A.i2P0A.i1P0A.i1P0A.i1P0A.i1P0A, i16 %output_r_V_data_V, i2 %output_r_V_keep_V, i2 %output_r_V_strb_V, i1 %output_r_V_user_V, i1 %output_r_V_last_V, i1 %output_r_V_id_V, i1 %output_r_V_dest_V, i16 %tmp_data_V_4, i2 %tmp_keep_V_1, i2 %tmp_strb_V_1, i1 %tmp_user_V_1, i1 1, i1 %tmp_id_V_1, i1 %tmp_dest_V_1"   --->   Operation 118 'write' 'write_ln304' <Predicate = (state_2 == 4096 & tmp_last_V) | (state_2 != 0 & state_2 != 4096 & tmp_last_V_1) | (state_2 == 0 & tmp_last_V)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >

State 17 <SV = 2> <Delay = 1.58>
ST_17 : Operation 119 [1/2] (0.00ns)   --->   "%call_ln0 = call void @equalizer_Pipeline_Coef_Clear_Loop, i16 %gmem, i64 %coefs_read"   --->   Operation 119 'call' 'call_ln0' <Predicate = true> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_17 : Operation 120 [1/1] (1.58ns)   --->   "%br_ln45 = br void %VITIS_LOOP_48_1" [equalizer.cpp:45]   --->   Operation 120 'br' 'br_ln45' <Predicate = true> <Delay = 1.58>

State 18 <SV = 3> <Delay = 4.47>
ST_18 : Operation 121 [1/1] (0.00ns)   --->   "%j = phi i2 %j_1, void %VITIS_LOOP_48_1.split, i2 0, void %for.inc.preheader"   --->   Operation 121 'phi' 'j' <Predicate = true> <Delay = 0.00>
ST_18 : Operation 122 [1/1] (0.00ns)   --->   "%coef_scale = phi i16 %tmp_data_V_3, void %VITIS_LOOP_48_1.split, i16 %tmp_data_V, void %for.inc.preheader"   --->   Operation 122 'phi' 'coef_scale' <Predicate = true> <Delay = 0.00>
ST_18 : Operation 123 [1/1] (0.00ns)   --->   "%p_4_0_0_0136_phi = phi i1 %tmp_last_V_2, void %VITIS_LOOP_48_1.split, i1 0, void %for.inc.preheader"   --->   Operation 123 'phi' 'p_4_0_0_0136_phi' <Predicate = true> <Delay = 0.00>
ST_18 : Operation 124 [1/1] (0.95ns)   --->   "%icmp_ln45 = icmp_eq  i2 %j, i2 3" [equalizer.cpp:45]   --->   Operation 124 'icmp' 'icmp_ln45' <Predicate = true> <Delay = 0.95> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.95> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_18 : Operation 125 [1/1] (0.00ns)   --->   "%empty_24 = speclooptripcount i32 @_ssdm_op_SpecLoopTripCount, i64 3, i64 3, i64 3"   --->   Operation 125 'speclooptripcount' 'empty_24' <Predicate = true> <Delay = 0.00>
ST_18 : Operation 126 [1/1] (1.56ns)   --->   "%j_1 = add i2 %j, i2 1" [equalizer.cpp:45]   --->   Operation 126 'add' 'j_1' <Predicate = true> <Delay = 1.56> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.56> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_18 : Operation 127 [1/1] (0.00ns)   --->   "%br_ln45 = br i1 %icmp_ln45, void %VITIS_LOOP_48_1.split, void %sw.epilog.loopexit" [equalizer.cpp:45]   --->   Operation 127 'br' 'br_ln45' <Predicate = true> <Delay = 0.00>
ST_18 : Operation 128 [1/1] (0.00ns)   --->   "%empty_25 = wait i32 @_ssdm_op_Wait"   --->   Operation 128 'wait' 'empty_25' <Predicate = (!icmp_ln45)> <Delay = 0.00>
ST_18 : Operation 129 [2/2] (3.52ns)   --->   "%call_ln283 = call void @equalizer_Pipeline_VITIS_LOOP_48_1, i16 %gmem, i16 %input_r_V_data_V, i2 %input_r_V_keep_V, i2 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V, i16 %coef_scale, i64 %coefs_read"   --->   Operation 129 'call' 'call_ln283' <Predicate = (!icmp_ln45)> <Delay = 3.52> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_18 : Operation 130 [1/1] (1.58ns)   --->   "%store_ln0 = store i1 1, i1 %read_coefs"   --->   Operation 130 'store' 'store_ln0' <Predicate = (icmp_ln45)> <Delay = 1.58>
ST_18 : Operation 131 [1/1] (1.58ns)   --->   "%br_ln0 = br void %sw.epilog"   --->   Operation 131 'br' 'br_ln0' <Predicate = (icmp_ln45)> <Delay = 1.58>

State 19 <SV = 4> <Delay = 0.00>
ST_19 : Operation 132 [1/2] (0.00ns)   --->   "%call_ln283 = call void @equalizer_Pipeline_VITIS_LOOP_48_1, i16 %gmem, i16 %input_r_V_data_V, i2 %input_r_V_keep_V, i2 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V, i16 %coef_scale, i64 %coefs_read"   --->   Operation 132 'call' 'call_ln283' <Predicate = true> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 20 <SV = 5> <Delay = 0.00>
ST_20 : Operation 133 [1/1] (0.00ns)   --->   "%specloopname_ln14 = specloopname void @_ssdm_op_SpecLoopName, void @empty_15" [equalizer.cpp:14]   --->   Operation 133 'specloopname' 'specloopname_ln14' <Predicate = true> <Delay = 0.00>
ST_20 : Operation 134 [1/1] (0.00ns)   --->   "%empty_26 = wait i32 @_ssdm_op_Wait"   --->   Operation 134 'wait' 'empty_26' <Predicate = true> <Delay = 0.00>
ST_20 : Operation 135 [1/1] (0.00ns)   --->   "%empty_27 = read i24 @_ssdm_op_Read.axis.volatile.i16P0A.i2P0A.i2P0A.i1P0A.i1P0A.i1P0A.i1P0A, i16 %input_r_V_data_V, i2 %input_r_V_keep_V, i2 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 135 'read' 'empty_27' <Predicate = true> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_20 : Operation 136 [1/1] (0.00ns)   --->   "%tmp_data_V_3 = extractvalue i24 %empty_27"   --->   Operation 136 'extractvalue' 'tmp_data_V_3' <Predicate = true> <Delay = 0.00>
ST_20 : Operation 137 [1/1] (0.00ns)   --->   "%tmp_last_V_2 = extractvalue i24 %empty_27"   --->   Operation 137 'extractvalue' 'tmp_last_V_2' <Predicate = true> <Delay = 0.00>
ST_20 : Operation 138 [1/1] (0.00ns)   --->   "%br_ln45 = br void %VITIS_LOOP_48_1" [equalizer.cpp:45]   --->   Operation 138 'br' 'br_ln45' <Predicate = true> <Delay = 0.00>

State 21 <SV = 4> <Delay = 1.70>
ST_21 : Operation 139 [1/1] (0.00ns)   --->   "%tmp_last_V_1 = phi i1 %tmp_last_V, void %while.body, i1 %tmp_last_V, void %sw.bb2.sw.epilog_crit_edge, i1 %p_4_0_0_0136_phi, void %sw.epilog.loopexit"   --->   Operation 139 'phi' 'tmp_last_V_1' <Predicate = true> <Delay = 0.00>
ST_21 : Operation 140 [1/1] (0.00ns)   --->   "%state_1 = phi i32 %state_2, void %while.body, i32 17, void %sw.bb2.sw.epilog_crit_edge, i32 17, void %sw.epilog.loopexit"   --->   Operation 140 'phi' 'state_1' <Predicate = true> <Delay = 0.00>
ST_21 : Operation 141 [1/1] (1.70ns)   --->   "%br_ln92 = br i1 %tmp_last_V_1, void %if.end69, void %while.end" [equalizer.cpp:92]   --->   Operation 141 'br' 'br_ln92' <Predicate = true> <Delay = 1.70>

State 22 <SV = 16> <Delay = 1.58>
ST_22 : Operation 142 [1/1] (0.00ns)   --->   "%state_3283 = phi i32 0, void %if.end, i32 4096, void %for.inc47.preheader.if.end69_crit_edge, i32 %state_1, void %sw.epilog"   --->   Operation 142 'phi' 'state_3283' <Predicate = true> <Delay = 0.00>
ST_22 : Operation 143 [1/1] (1.58ns)   --->   "%store_ln26 = store i32 %state_3283, i32 %state" [equalizer.cpp:26]   --->   Operation 143 'store' 'store_ln26' <Predicate = true> <Delay = 1.58>
ST_22 : Operation 144 [1/1] (0.00ns)   --->   "%br_ln26 = br void %while.body" [equalizer.cpp:26]   --->   Operation 144 'br' 'br_ln26' <Predicate = true> <Delay = 0.00>

State 23 <SV = 16> <Delay = 0.00>
ST_23 : Operation 145 [1/2] (0.00ns)   --->   "%write_ln304 = write void @_ssdm_op_Write.axis.volatile.i16P0A.i2P0A.i2P0A.i1P0A.i1P0A.i1P0A.i1P0A, i16 %output_r_V_data_V, i2 %output_r_V_keep_V, i2 %output_r_V_strb_V, i1 %output_r_V_user_V, i1 %output_r_V_last_V, i1 %output_r_V_id_V, i1 %output_r_V_dest_V, i16 %tmp_data_V_4, i2 %tmp_keep_V_1, i2 %tmp_strb_V_1, i1 %tmp_user_V_1, i1 1, i1 %tmp_id_V_1, i1 %tmp_dest_V_1"   --->   Operation 145 'write' 'write_ln304' <Predicate = true> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_23 : Operation 146 [1/1] (0.00ns)   --->   "%ret_ln98 = ret" [equalizer.cpp:98]   --->   Operation 146 'ret' 'ret_ln98' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 2.7ns.

 <State 1>: 1.59ns
The critical path consists of the following:
	'alloca' operation ('state') [25]  (0 ns)
	'store' operation ('store_ln26', equalizer.cpp:26) of constant 0 on local variable 'state' [53]  (1.59 ns)

 <State 2>: 4.5ns
The critical path consists of the following:
	'call' operation ('call_ln0') to 'equalizer_Pipeline_Coef_Clear_Loop' [96]  (3.52 ns)
	blocking operation 0.978 ns on control path)

 <State 3>: 0ns
The critical path consists of the following:

 <State 4>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_load_1_req', equalizer.cpp:76) on port 'gmem' (equalizer.cpp:76) [77]  (7.3 ns)

 <State 5>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_load_1_req', equalizer.cpp:76) on port 'gmem' (equalizer.cpp:76) [77]  (7.3 ns)

 <State 6>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_load_1_req', equalizer.cpp:76) on port 'gmem' (equalizer.cpp:76) [77]  (7.3 ns)

 <State 7>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_load_1_req', equalizer.cpp:76) on port 'gmem' (equalizer.cpp:76) [77]  (7.3 ns)

 <State 8>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_load_1_req', equalizer.cpp:76) on port 'gmem' (equalizer.cpp:76) [77]  (7.3 ns)

 <State 9>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_load_1_req', equalizer.cpp:76) on port 'gmem' (equalizer.cpp:76) [77]  (7.3 ns)

 <State 10>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_load_1_req', equalizer.cpp:76) on port 'gmem' (equalizer.cpp:76) [77]  (7.3 ns)

 <State 11>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read', equalizer.cpp:76) on port 'gmem' (equalizer.cpp:76) [78]  (7.3 ns)

 <State 12>: 1.05ns
The critical path consists of the following:
	'mul' operation of DSP[80] ('mul_ln76', equalizer.cpp:76) [79]  (1.05 ns)

 <State 13>: 1.05ns
The critical path consists of the following:
	'mul' operation of DSP[80] ('mul_ln76', equalizer.cpp:76) [79]  (1.05 ns)

 <State 14>: 2.1ns
The critical path consists of the following:
	'load' operation ('accumulate_loc_load') on local variable 'accumulate_loc' [76]  (0 ns)
	'add' operation of DSP[80] ('accumulate') [80]  (2.1 ns)

 <State 15>: 2.1ns
The critical path consists of the following:
	'add' operation of DSP[80] ('accumulate') [80]  (2.1 ns)

 <State 16>: 1.71ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('state') with incoming values : ('state') [128]  (1.71 ns)

 <State 17>: 1.59ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('j') with incoming values : ('j', equalizer.cpp:45) [99]  (1.59 ns)

 <State 18>: 4.48ns
The critical path consists of the following:
	'phi' operation ('tmp.data.V') with incoming values : ('tmp.data.V') [100]  (0 ns)
	'call' operation ('call_ln283') to 'equalizer_Pipeline_VITIS_LOOP_48_1' [109]  (3.52 ns)
	blocking operation 0.959 ns on control path)

 <State 19>: 0ns
The critical path consists of the following:

 <State 20>: 0ns
The critical path consists of the following:

 <State 21>: 1.71ns
The critical path consists of the following:
	'phi' operation ('tmp.last.V') with incoming values : ('tmp.last.V') [124]  (0 ns)
	multiplexor before 'phi' operation ('tmp_out.dest.V') with incoming values : ('tmp_out.dest.V') ('tmp.dest.V') [132]  (1.71 ns)

 <State 22>: 1.59ns
The critical path consists of the following:
	'phi' operation ('state') with incoming values : ('state') [128]  (0 ns)
	'store' operation ('store_ln26', equalizer.cpp:26) of variable 'state' on local variable 'state' [129]  (1.59 ns)

 <State 23>: 0ns
The critical path consists of the following:


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
