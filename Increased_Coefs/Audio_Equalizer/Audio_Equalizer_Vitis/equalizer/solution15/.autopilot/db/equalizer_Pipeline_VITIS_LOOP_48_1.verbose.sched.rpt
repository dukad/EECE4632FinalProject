

================================================================
== Vitis HLS Report for 'equalizer_Pipeline_VITIS_LOOP_48_1'
================================================================
* Date:           Fri Apr 26 02:45:21 2024

* Version:        2022.1 (Build 3526262 on Mon Apr 18 15:48:16 MDT 2022)
* Project:        equalizer
* Solution:       solution15 (Vivado IP Flow Target)
* Product family: zynq
* Target device:  xc7z020-clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  7.300 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |      116|      116|  1.160 us|  1.160 us|  116|  116|       no|
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                   |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |     Loop Name     |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- VITIS_LOOP_48_1  |      114|      114|        17|          1|          1|    99|       yes|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 17


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 17
* Pipeline : 1
  Pipeline-0 : II = 1, D = 17, States = { 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 4 
4 --> 5 
5 --> 6 
6 --> 7 
7 --> 8 
8 --> 9 
9 --> 10 
10 --> 11 
11 --> 12 
12 --> 13 
13 --> 14 
14 --> 15 
15 --> 16 
16 --> 17 
17 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 3.52>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%i = alloca i32 1"   --->   Operation 20 'alloca' 'i' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i1 %input_r_V_dest_V, i1 %input_r_V_id_V, i1 %input_r_V_last_V, i1 %input_r_V_user_V, i2 %input_r_V_strb_V, i2 %input_r_V_keep_V, i16 %input_r_V_data_V, void @empty_3, i32 0, i32 0, void @empty_4, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0, i32 4294967295, i32 0"   --->   Operation 21 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i16 %gmem, void @empty, i32 0, i32 0, void @empty_0, i32 0, i32 99, void @empty_1, void @empty_2, void @empty_0, i32 16, i32 16, i32 16, i32 16, void @empty_0, void @empty_0, i32 4294967295, i32 0"   --->   Operation 22 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%coefs_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %coefs"   --->   Operation 23 'read' 'coefs_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%coef_scale_read = read i16 @_ssdm_op_Read.ap_auto.i16, i16 %coef_scale"   --->   Operation 24 'read' 'coef_scale_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (1.58ns)   --->   "%store_ln0 = store i7 0, i7 %i"   --->   Operation 25 'store' 'store_ln0' <Predicate = true> <Delay = 1.58>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%br_ln0 = br void %for.inc20"   --->   Operation 26 'br' 'br_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%i_1 = load i7 %i" [equalizer.cpp:48]   --->   Operation 27 'load' 'i_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i16 %gmem"   --->   Operation 28 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (1.48ns)   --->   "%icmp_ln48 = icmp_eq  i7 %i_1, i7 99" [equalizer.cpp:48]   --->   Operation 29 'icmp' 'icmp_ln48' <Predicate = true> <Delay = 1.48> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 30 [1/1] (0.00ns)   --->   "%empty = speclooptripcount i32 @_ssdm_op_SpecLoopTripCount, i64 99, i64 99, i64 99"   --->   Operation 30 'speclooptripcount' 'empty' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 31 [1/1] (1.87ns)   --->   "%add_ln48 = add i7 %i_1, i7 1" [equalizer.cpp:48]   --->   Operation 31 'add' 'add_ln48' <Predicate = true> <Delay = 1.87> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.87> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 32 [1/1] (0.00ns)   --->   "%br_ln48 = br i1 %icmp_ln48, void %for.inc20.split, void %for.inc22.exitStub" [equalizer.cpp:48]   --->   Operation 32 'br' 'br_ln48' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "%empty_22 = read i24 @_ssdm_op_Read.axis.volatile.i16P0A.i2P0A.i2P0A.i1P0A.i1P0A.i1P0A.i1P0A, i16 %input_r_V_data_V, i2 %input_r_V_keep_V, i2 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 33 'read' 'empty_22' <Predicate = (!icmp_ln48)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "%tmp_data_V = extractvalue i24 %empty_22"   --->   Operation 34 'extractvalue' 'tmp_data_V' <Predicate = (!icmp_ln48)> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (0.00ns)   --->   "%shl_ln2 = bitconcatenate i8 @_ssdm_op_BitConcatenate.i8.i7.i1, i7 %i_1, i1 0" [equalizer.cpp:52]   --->   Operation 35 'bitconcatenate' 'shl_ln2' <Predicate = (!icmp_ln48)> <Delay = 0.00>
ST_1 : Operation 36 [1/1] (0.00ns)   --->   "%zext_ln52 = zext i8 %shl_ln2" [equalizer.cpp:52]   --->   Operation 36 'zext' 'zext_ln52' <Predicate = (!icmp_ln48)> <Delay = 0.00>
ST_1 : Operation 37 [1/1] (3.52ns)   --->   "%add_ln52 = add i64 %zext_ln52, i64 %coefs_read" [equalizer.cpp:52]   --->   Operation 37 'add' 'add_ln52' <Predicate = (!icmp_ln48)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 38 [1/1] (0.00ns)   --->   "%trunc_ln4 = partselect i63 @_ssdm_op_PartSelect.i63.i64.i32.i32, i64 %add_ln52, i32 1, i32 63" [equalizer.cpp:52]   --->   Operation 38 'partselect' 'trunc_ln4' <Predicate = (!icmp_ln48)> <Delay = 0.00>
ST_1 : Operation 39 [1/1] (0.00ns)   --->   "%sext_ln52 = sext i63 %trunc_ln4" [equalizer.cpp:52]   --->   Operation 39 'sext' 'sext_ln52' <Predicate = (!icmp_ln48)> <Delay = 0.00>
ST_1 : Operation 40 [1/1] (0.00ns)   --->   "%gmem_addr = getelementptr i16 %gmem, i64 %sext_ln52" [equalizer.cpp:52]   --->   Operation 40 'getelementptr' 'gmem_addr' <Predicate = (!icmp_ln48)> <Delay = 0.00>
ST_1 : Operation 41 [1/1] (1.58ns)   --->   "%store_ln48 = store i7 %add_ln48, i7 %i" [equalizer.cpp:48]   --->   Operation 41 'store' 'store_ln48' <Predicate = (!icmp_ln48)> <Delay = 1.58>

State 2 <SV = 1> <Delay = 7.30>
ST_2 : Operation 42 [7/7] (7.30ns)   --->   "%gmem_load_2_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i16P1A, i16 %gmem_addr, i32 1" [equalizer.cpp:52]   --->   Operation 42 'readreq' 'gmem_load_2_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 3 <SV = 2> <Delay = 7.30>
ST_3 : Operation 43 [6/7] (7.30ns)   --->   "%gmem_load_2_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i16P1A, i16 %gmem_addr, i32 1" [equalizer.cpp:52]   --->   Operation 43 'readreq' 'gmem_load_2_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 4 <SV = 3> <Delay = 7.30>
ST_4 : Operation 44 [5/7] (7.30ns)   --->   "%gmem_load_2_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i16P1A, i16 %gmem_addr, i32 1" [equalizer.cpp:52]   --->   Operation 44 'readreq' 'gmem_load_2_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 5 <SV = 4> <Delay = 7.30>
ST_5 : Operation 45 [4/7] (7.30ns)   --->   "%gmem_load_2_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i16P1A, i16 %gmem_addr, i32 1" [equalizer.cpp:52]   --->   Operation 45 'readreq' 'gmem_load_2_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 6 <SV = 5> <Delay = 7.30>
ST_6 : Operation 46 [3/7] (7.30ns)   --->   "%gmem_load_2_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i16P1A, i16 %gmem_addr, i32 1" [equalizer.cpp:52]   --->   Operation 46 'readreq' 'gmem_load_2_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 7 <SV = 6> <Delay = 7.30>
ST_7 : Operation 47 [2/7] (7.30ns)   --->   "%gmem_load_2_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i16P1A, i16 %gmem_addr, i32 1" [equalizer.cpp:52]   --->   Operation 47 'readreq' 'gmem_load_2_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 8 <SV = 7> <Delay = 7.30>
ST_8 : Operation 48 [3/3] (1.05ns) (grouped into DSP with root node add_ln52_1)   --->   "%mul_ln52 = mul i16 %tmp_data_V, i16 %coef_scale_read" [equalizer.cpp:52]   --->   Operation 48 'mul' 'mul_ln52' <Predicate = true> <Delay = 1.05> <CoreInst = "DSP48">   --->   Core 119 'DSP48' <Latency = 3> <II = 1> <Delay = 2.15> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_8 : Operation 49 [1/7] (7.30ns)   --->   "%gmem_load_2_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i16P1A, i16 %gmem_addr, i32 1" [equalizer.cpp:52]   --->   Operation 49 'readreq' 'gmem_load_2_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 9 <SV = 8> <Delay = 7.30>
ST_9 : Operation 50 [2/3] (1.05ns) (grouped into DSP with root node add_ln52_1)   --->   "%mul_ln52 = mul i16 %tmp_data_V, i16 %coef_scale_read" [equalizer.cpp:52]   --->   Operation 50 'mul' 'mul_ln52' <Predicate = true> <Delay = 1.05> <CoreInst = "DSP48">   --->   Core 119 'DSP48' <Latency = 3> <II = 1> <Delay = 2.15> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_9 : Operation 51 [1/1] (7.30ns)   --->   "%gmem_addr_read = read i16 @_ssdm_op_Read.m_axi.i16P1A, i16 %gmem_addr" [equalizer.cpp:52]   --->   Operation 51 'read' 'gmem_addr_read' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 10 <SV = 9> <Delay = 2.10>
ST_10 : Operation 52 [1/3] (0.00ns) (grouped into DSP with root node add_ln52_1)   --->   "%mul_ln52 = mul i16 %tmp_data_V, i16 %coef_scale_read" [equalizer.cpp:52]   --->   Operation 52 'mul' 'mul_ln52' <Predicate = true> <Delay = 0.00> <CoreInst = "DSP48">   --->   Core 119 'DSP48' <Latency = 3> <II = 1> <Delay = 2.15> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_10 : Operation 53 [2/2] (2.10ns) (root node of the DSP)   --->   "%add_ln52_1 = add i16 %gmem_addr_read, i16 %mul_ln52" [equalizer.cpp:52]   --->   Operation 53 'add' 'add_ln52_1' <Predicate = true> <Delay = 2.10> <CoreInst = "DSP48">   --->   Core 119 'DSP48' <Latency = 3> <II = 1> <Delay = 2.15> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>

State 11 <SV = 10> <Delay = 7.30>
ST_11 : Operation 54 [1/2] (2.10ns) (root node of the DSP)   --->   "%add_ln52_1 = add i16 %gmem_addr_read, i16 %mul_ln52" [equalizer.cpp:52]   --->   Operation 54 'add' 'add_ln52_1' <Predicate = true> <Delay = 2.10> <CoreInst = "DSP48">   --->   Core 119 'DSP48' <Latency = 3> <II = 1> <Delay = 2.15> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_11 : Operation 55 [1/1] (7.30ns)   --->   "%gmem_addr_3_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i16P1A, i16 %gmem_addr, i32 1" [equalizer.cpp:52]   --->   Operation 55 'writereq' 'gmem_addr_3_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 12 <SV = 11> <Delay = 7.30>
ST_12 : Operation 56 [1/1] (7.30ns)   --->   "%write_ln52 = write void @_ssdm_op_Write.m_axi.i16P1A, i16 %gmem_addr, i16 %add_ln52_1, i2 3" [equalizer.cpp:52]   --->   Operation 56 'write' 'write_ln52' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 13 <SV = 12> <Delay = 7.30>
ST_13 : Operation 57 [5/5] (7.30ns)   --->   "%gmem_addr_3_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i16P1A, i16 %gmem_addr" [equalizer.cpp:52]   --->   Operation 57 'writeresp' 'gmem_addr_3_resp' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 14 <SV = 13> <Delay = 7.30>
ST_14 : Operation 58 [4/5] (7.30ns)   --->   "%gmem_addr_3_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i16P1A, i16 %gmem_addr" [equalizer.cpp:52]   --->   Operation 58 'writeresp' 'gmem_addr_3_resp' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 15 <SV = 14> <Delay = 7.30>
ST_15 : Operation 59 [3/5] (7.30ns)   --->   "%gmem_addr_3_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i16P1A, i16 %gmem_addr" [equalizer.cpp:52]   --->   Operation 59 'writeresp' 'gmem_addr_3_resp' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 16 <SV = 15> <Delay = 7.30>
ST_16 : Operation 60 [2/5] (7.30ns)   --->   "%gmem_addr_3_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i16P1A, i16 %gmem_addr" [equalizer.cpp:52]   --->   Operation 60 'writeresp' 'gmem_addr_3_resp' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_16 : Operation 65 [1/1] (0.00ns)   --->   "%ret_ln0 = ret"   --->   Operation 65 'ret' 'ret_ln0' <Predicate = (icmp_ln48)> <Delay = 0.00>

State 17 <SV = 16> <Delay = 7.30>
ST_17 : Operation 61 [1/1] (0.00ns)   --->   "%specpipeline_ln49 = specpipeline void @_ssdm_op_SpecPipeline, i32 4294967295, i32 0, i32 0, i32 0, void @empty_0" [equalizer.cpp:49]   --->   Operation 61 'specpipeline' 'specpipeline_ln49' <Predicate = true> <Delay = 0.00>
ST_17 : Operation 62 [1/1] (0.00ns)   --->   "%specloopname_ln0 = specloopname void @_ssdm_op_SpecLoopName, void @empty_14"   --->   Operation 62 'specloopname' 'specloopname_ln0' <Predicate = true> <Delay = 0.00>
ST_17 : Operation 63 [1/5] (7.30ns)   --->   "%gmem_addr_3_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i16P1A, i16 %gmem_addr" [equalizer.cpp:52]   --->   Operation 63 'writeresp' 'gmem_addr_3_resp' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_17 : Operation 64 [1/1] (0.00ns)   --->   "%br_ln48 = br void %for.inc20" [equalizer.cpp:48]   --->   Operation 64 'br' 'br_ln48' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 2.7ns.

 <State 1>: 3.52ns
The critical path consists of the following:
	'alloca' operation ('i') [11]  (0 ns)
	'load' operation ('i', equalizer.cpp:48) on local variable 'i' [19]  (0 ns)
	'add' operation ('add_ln52', equalizer.cpp:52) [33]  (3.52 ns)

 <State 2>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_load_2_req', equalizer.cpp:52) on port 'gmem' (equalizer.cpp:52) [37]  (7.3 ns)

 <State 3>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_load_2_req', equalizer.cpp:52) on port 'gmem' (equalizer.cpp:52) [37]  (7.3 ns)

 <State 4>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_load_2_req', equalizer.cpp:52) on port 'gmem' (equalizer.cpp:52) [37]  (7.3 ns)

 <State 5>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_load_2_req', equalizer.cpp:52) on port 'gmem' (equalizer.cpp:52) [37]  (7.3 ns)

 <State 6>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_load_2_req', equalizer.cpp:52) on port 'gmem' (equalizer.cpp:52) [37]  (7.3 ns)

 <State 7>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_load_2_req', equalizer.cpp:52) on port 'gmem' (equalizer.cpp:52) [37]  (7.3 ns)

 <State 8>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_load_2_req', equalizer.cpp:52) on port 'gmem' (equalizer.cpp:52) [37]  (7.3 ns)

 <State 9>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read', equalizer.cpp:52) on port 'gmem' (equalizer.cpp:52) [38]  (7.3 ns)

 <State 10>: 2.1ns
The critical path consists of the following:
	'mul' operation of DSP[39] ('mul_ln52', equalizer.cpp:52) [30]  (0 ns)
	'add' operation of DSP[39] ('add_ln52_1', equalizer.cpp:52) [39]  (2.1 ns)

 <State 11>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_addr_3_req', equalizer.cpp:52) on port 'gmem' (equalizer.cpp:52) [40]  (7.3 ns)

 <State 12>: 7.3ns
The critical path consists of the following:
	bus write operation ('write_ln52', equalizer.cpp:52) on port 'gmem' (equalizer.cpp:52) [41]  (7.3 ns)

 <State 13>: 7.3ns
The critical path consists of the following:
	bus response operation ('gmem_addr_3_resp', equalizer.cpp:52) on port 'gmem' (equalizer.cpp:52) [42]  (7.3 ns)

 <State 14>: 7.3ns
The critical path consists of the following:
	bus response operation ('gmem_addr_3_resp', equalizer.cpp:52) on port 'gmem' (equalizer.cpp:52) [42]  (7.3 ns)

 <State 15>: 7.3ns
The critical path consists of the following:
	bus response operation ('gmem_addr_3_resp', equalizer.cpp:52) on port 'gmem' (equalizer.cpp:52) [42]  (7.3 ns)

 <State 16>: 7.3ns
The critical path consists of the following:
	bus response operation ('gmem_addr_3_resp', equalizer.cpp:52) on port 'gmem' (equalizer.cpp:52) [42]  (7.3 ns)

 <State 17>: 7.3ns
The critical path consists of the following:
	bus response operation ('gmem_addr_3_resp', equalizer.cpp:52) on port 'gmem' (equalizer.cpp:52) [42]  (7.3 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
