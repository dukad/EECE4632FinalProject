

================================================================
== Vitis HLS Report for 'equalizer'
================================================================
* Date:           Fri Apr 26 03:19:44 2024

* Version:        2022.1 (Build 3526262 on Mon Apr 18 15:48:16 MDT 2022)
* Project:        equalizer
* Solution:       solution21 (Vivado IP Flow Target)
* Product family: zynq
* Target device:  xc7z020-clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+---------+----------+------------+
    |  Clock |  Target | Estimated| Uncertainty|
    +--------+---------+----------+------------+
    |ap_clk  |  6.20 ns|  4.526 ns|     1.67 ns|
    +--------+---------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |        ?|        ?|         ?|         ?|    ?|    ?|       no|
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                   |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |     Loop Name     |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- Running_Loop     |        ?|        ?|   2 ~ 467|          -|          -|     ?|        no|
        | + Coef_Read_Loop  |      354|      354|       118|          -|          -|     3|        no|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 26
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 25 19 23 18 
3 --> 4 
4 --> 5 
5 --> 6 
6 --> 7 
7 --> 8 
8 --> 9 
9 --> 10 
10 --> 11 
11 --> 12 
12 --> 13 
13 --> 14 
14 --> 15 
15 --> 16 
16 --> 17 
17 --> 18 
18 --> 26 2 
19 --> 20 
20 --> 21 23 
21 --> 22 
22 --> 20 
23 --> 24 
24 --> 18 
25 --> 18 
26 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.82>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%tmp_out_data_V = alloca i32 1"   --->   Operation 27 'alloca' 'tmp_out_data_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%tmp_out_keep_V = alloca i32 1"   --->   Operation 28 'alloca' 'tmp_out_keep_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (0.00ns)   --->   "%tmp_out_strb_V = alloca i32 1"   --->   Operation 29 'alloca' 'tmp_out_strb_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 30 [1/1] (0.00ns)   --->   "%tmp_out_user_V = alloca i32 1"   --->   Operation 30 'alloca' 'tmp_out_user_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "%tmp_out_id_V = alloca i32 1"   --->   Operation 31 'alloca' 'tmp_out_id_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 32 [1/1] (0.00ns)   --->   "%tmp_out_dest_V = alloca i32 1"   --->   Operation 32 'alloca' 'tmp_out_dest_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "%read_coefs = alloca i32 1"   --->   Operation 33 'alloca' 'read_coefs' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "%state = alloca i32 1"   --->   Operation 34 'alloca' 'state' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (1.00ns)   --->   "%coefs_read = read i64 @_ssdm_op_Read.s_axilite.i64, i64 %coefs"   --->   Operation 35 'read' 'coefs_read' <Predicate = true> <Delay = 1.00> <CoreInst = "s_axilite">   --->   Core 114 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_1 : Operation 36 [1/1] (0.00ns)   --->   "%accumulate_loc = alloca i64 1"   --->   Operation 36 'alloca' 'accumulate_loc' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 37 [1/1] (0.00ns)   --->   "%spectopmodule_ln3 = spectopmodule void @_ssdm_op_SpecTopModule, void @empty_10" [equalizer.cpp:3]   --->   Operation 37 'spectopmodule' 'spectopmodule_ln3' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 38 [1/1] (0.00ns)   --->   "%specinterface_ln3 = specinterface void @_ssdm_op_SpecInterface, i32 0, void @empty_11, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0, i32 4294967295, i32 0" [equalizer.cpp:3]   --->   Operation 38 'specinterface' 'specinterface_ln3' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 39 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i32 %gmem, void @empty, i32 0, i32 0, void @empty_0, i32 0, i32 99, void @empty_1, void @empty_2, void @empty_0, i32 16, i32 16, i32 16, i32 16, void @empty_0, void @empty_0, i32 4294967295, i32 0"   --->   Operation 39 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 40 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i32 %gmem"   --->   Operation 40 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 41 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i32 %output_r_V_data_V, i4 %output_r_V_keep_V, i4 %output_r_V_strb_V, i1 %output_r_V_user_V, i1 %output_r_V_last_V, i1 %output_r_V_id_V, i1 %output_r_V_dest_V, void @empty_3, i32 1, i32 1, void @empty_4, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0, i32 4294967295, i32 0"   --->   Operation 41 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 42 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i32 %output_r_V_data_V"   --->   Operation 42 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 43 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i4 %output_r_V_keep_V"   --->   Operation 43 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 44 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i4 %output_r_V_strb_V"   --->   Operation 44 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 45 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %output_r_V_user_V"   --->   Operation 45 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 46 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %output_r_V_last_V"   --->   Operation 46 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 47 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %output_r_V_id_V"   --->   Operation 47 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 48 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %output_r_V_dest_V"   --->   Operation 48 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 49 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i64 %coefs, void @empty_5, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_6, void @empty_7, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_8, i32 4294967295, i32 0"   --->   Operation 49 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 50 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i64 %coefs, void @empty_9, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_8, i32 4294967295, i32 0"   --->   Operation 50 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 51 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V, void @empty_3, i32 1, i32 1, void @empty_4, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0, i32 4294967295, i32 0"   --->   Operation 51 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 52 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i32 %input_r_V_data_V"   --->   Operation 52 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 53 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i4 %input_r_V_keep_V"   --->   Operation 53 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 54 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i4 %input_r_V_strb_V"   --->   Operation 54 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 55 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %input_r_V_user_V"   --->   Operation 55 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 56 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %input_r_V_last_V"   --->   Operation 56 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 57 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %input_r_V_id_V"   --->   Operation 57 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 58 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %input_r_V_dest_V"   --->   Operation 58 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 59 [1/1] (0.00ns)   --->   "%trunc_ln = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %coefs_read, i32 2, i32 63" [equalizer.cpp:88]   --->   Operation 59 'partselect' 'trunc_ln' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 60 [1/1] (0.00ns)   --->   "%sext_ln88 = sext i62 %trunc_ln" [equalizer.cpp:88]   --->   Operation 60 'sext' 'sext_ln88' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 61 [1/1] (0.00ns)   --->   "%gmem_addr = getelementptr i32 %gmem, i64 %sext_ln88" [equalizer.cpp:88]   --->   Operation 61 'getelementptr' 'gmem_addr' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 62 [1/1] (1.82ns)   --->   "%store_ln27 = store i32 0, i32 %state" [equalizer.cpp:27]   --->   Operation 62 'store' 'store_ln27' <Predicate = true> <Delay = 1.82>
ST_1 : Operation 63 [1/1] (1.58ns)   --->   "%store_ln27 = store i1 0, i1 %read_coefs" [equalizer.cpp:27]   --->   Operation 63 'store' 'store_ln27' <Predicate = true> <Delay = 1.58>
ST_1 : Operation 64 [1/1] (0.00ns)   --->   "%br_ln27 = br void %while.body" [equalizer.cpp:27]   --->   Operation 64 'br' 'br_ln27' <Predicate = true> <Delay = 0.00>

State 2 <SV = 1> <Delay = 4.49>
ST_2 : Operation 65 [1/1] (0.00ns)   --->   "%tmp_out_data_V_1 = load i32 %tmp_out_data_V"   --->   Operation 65 'load' 'tmp_out_data_V_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 66 [1/1] (0.00ns)   --->   "%tmp_out_keep_V_1 = load i4 %tmp_out_keep_V"   --->   Operation 66 'load' 'tmp_out_keep_V_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 67 [1/1] (0.00ns)   --->   "%tmp_out_strb_V_1 = load i4 %tmp_out_strb_V"   --->   Operation 67 'load' 'tmp_out_strb_V_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 68 [1/1] (0.00ns)   --->   "%tmp_out_user_V_1 = load i1 %tmp_out_user_V"   --->   Operation 68 'load' 'tmp_out_user_V_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 69 [1/1] (0.00ns)   --->   "%tmp_out_id_V_1 = load i1 %tmp_out_id_V"   --->   Operation 69 'load' 'tmp_out_id_V_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 70 [1/1] (0.00ns)   --->   "%tmp_out_dest_V_1 = load i1 %tmp_out_dest_V"   --->   Operation 70 'load' 'tmp_out_dest_V_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 71 [1/1] (0.00ns)   --->   "%state_1 = load i32 %state"   --->   Operation 71 'load' 'state_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 72 [1/1] (0.00ns)   --->   "%specloopname_ln17 = specloopname void @_ssdm_op_SpecLoopName, void @empty_16" [equalizer.cpp:17]   --->   Operation 72 'specloopname' 'specloopname_ln17' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 73 [1/1] (0.00ns)   --->   "%empty = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 73 'read' 'empty' <Predicate = true> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_2 : Operation 74 [1/1] (0.00ns)   --->   "%tmp_data_V = extractvalue i44 %empty"   --->   Operation 74 'extractvalue' 'tmp_data_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 75 [1/1] (0.00ns)   --->   "%tmp_keep_V = extractvalue i44 %empty"   --->   Operation 75 'extractvalue' 'tmp_keep_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 76 [1/1] (0.00ns)   --->   "%tmp_strb_V = extractvalue i44 %empty"   --->   Operation 76 'extractvalue' 'tmp_strb_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 77 [1/1] (0.00ns)   --->   "%tmp_user_V = extractvalue i44 %empty"   --->   Operation 77 'extractvalue' 'tmp_user_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 78 [1/1] (0.00ns)   --->   "%tmp_last_V = extractvalue i44 %empty"   --->   Operation 78 'extractvalue' 'tmp_last_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 79 [1/1] (0.00ns)   --->   "%tmp_id_V = extractvalue i44 %empty"   --->   Operation 79 'extractvalue' 'tmp_id_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 80 [1/1] (0.00ns)   --->   "%tmp_dest_V = extractvalue i44 %empty"   --->   Operation 80 'extractvalue' 'tmp_dest_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 81 [1/1] (0.95ns)   --->   "%switch_ln31 = switch i32 %state_1, void %sw.epilog, i32 0, void %sw.bb, i32 16, void %sw.bb2, i32 256, void %for.inc46.preheader" [equalizer.cpp:31]   --->   Operation 81 'switch' 'switch_ln31' <Predicate = true> <Delay = 0.95>
ST_2 : Operation 82 [2/2] (3.52ns)   --->   "%call_ln0 = call void @equalizer_Pipeline_Shift_Accumulate_Loop, i32 %gmem, i64 %coefs_read, i32 %accumulate_loc, i32 %signal_shift_reg"   --->   Operation 82 'call' 'call_ln0' <Predicate = (state_1 == 256)> <Delay = 3.52> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_2 : Operation 83 [1/1] (0.00ns)   --->   "%read_coefs_load = load i1 %read_coefs" [equalizer.cpp:43]   --->   Operation 83 'load' 'read_coefs_load' <Predicate = (state_1 == 16)> <Delay = 0.00>
ST_2 : Operation 84 [1/1] (1.58ns)   --->   "%br_ln43 = br i1 %read_coefs_load, void %for.inc.preheader, void %if.end24" [equalizer.cpp:43]   --->   Operation 84 'br' 'br_ln43' <Predicate = (state_1 == 16)> <Delay = 1.58>
ST_2 : Operation 85 [2/2] (3.52ns)   --->   "%call_ln0 = call void @equalizer_Pipeline_Coef_Clear_Loop, i32 %gmem, i64 %coefs_read"   --->   Operation 85 'call' 'call_ln0' <Predicate = (state_1 == 16 & !read_coefs_load)> <Delay = 3.52> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_2 : Operation 86 [1/1] (2.47ns)   --->   "%icmp_ln35 = icmp_eq  i32 %tmp_data_V, i32 48879" [equalizer.cpp:35]   --->   Operation 86 'icmp' 'icmp_ln35' <Predicate = (state_1 == 0)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 87 [1/1] (1.58ns)   --->   "%br_ln105 = br i1 %tmp_last_V, void %if.end66, void %while.end" [equalizer.cpp:105]   --->   Operation 87 'br' 'br_ln105' <Predicate = (state_1 != 0 & state_1 != 16 & state_1 != 256)> <Delay = 1.58>

State 3 <SV = 2> <Delay = 0.00>
ST_3 : Operation 88 [1/2] (0.00ns)   --->   "%call_ln0 = call void @equalizer_Pipeline_Shift_Accumulate_Loop, i32 %gmem, i64 %coefs_read, i32 %accumulate_loc, i32 %signal_shift_reg"   --->   Operation 88 'call' 'call_ln0' <Predicate = true> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 4 <SV = 3> <Delay = 4.52>
ST_4 : Operation 89 [7/7] (4.52ns)   --->   "%gmem_load_1_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i32P1A, i32 %gmem_addr, i32 1" [equalizer.cpp:88]   --->   Operation 89 'readreq' 'gmem_load_1_req' <Predicate = true> <Delay = 4.52> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_4 : Operation 90 [1/1] (3.25ns)   --->   "%store_ln89 = store i32 %tmp_data_V, i32 0" [equalizer.cpp:89]   --->   Operation 90 'store' 'store_ln89' <Predicate = true> <Delay = 3.25> <CoreInst = "RAM">   --->   Core 82 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 99> <RAM>

State 5 <SV = 4> <Delay = 4.52>
ST_5 : Operation 91 [6/7] (4.52ns)   --->   "%gmem_load_1_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i32P1A, i32 %gmem_addr, i32 1" [equalizer.cpp:88]   --->   Operation 91 'readreq' 'gmem_load_1_req' <Predicate = true> <Delay = 4.52> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 6 <SV = 5> <Delay = 4.52>
ST_6 : Operation 92 [5/7] (4.52ns)   --->   "%gmem_load_1_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i32P1A, i32 %gmem_addr, i32 1" [equalizer.cpp:88]   --->   Operation 92 'readreq' 'gmem_load_1_req' <Predicate = true> <Delay = 4.52> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 7 <SV = 6> <Delay = 4.52>
ST_7 : Operation 93 [4/7] (4.52ns)   --->   "%gmem_load_1_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i32P1A, i32 %gmem_addr, i32 1" [equalizer.cpp:88]   --->   Operation 93 'readreq' 'gmem_load_1_req' <Predicate = true> <Delay = 4.52> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 8 <SV = 7> <Delay = 4.52>
ST_8 : Operation 94 [3/7] (4.52ns)   --->   "%gmem_load_1_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i32P1A, i32 %gmem_addr, i32 1" [equalizer.cpp:88]   --->   Operation 94 'readreq' 'gmem_load_1_req' <Predicate = true> <Delay = 4.52> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 9 <SV = 8> <Delay = 4.52>
ST_9 : Operation 95 [2/7] (4.52ns)   --->   "%gmem_load_1_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i32P1A, i32 %gmem_addr, i32 1" [equalizer.cpp:88]   --->   Operation 95 'readreq' 'gmem_load_1_req' <Predicate = true> <Delay = 4.52> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 10 <SV = 9> <Delay = 4.52>
ST_10 : Operation 96 [1/7] (4.52ns)   --->   "%gmem_load_1_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i32P1A, i32 %gmem_addr, i32 1" [equalizer.cpp:88]   --->   Operation 96 'readreq' 'gmem_load_1_req' <Predicate = true> <Delay = 4.52> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 11 <SV = 10> <Delay = 4.52>
ST_11 : Operation 97 [1/1] (4.52ns)   --->   "%gmem_addr_read = read i32 @_ssdm_op_Read.m_axi.i32P1A, i32 %gmem_addr" [equalizer.cpp:88]   --->   Operation 97 'read' 'gmem_addr_read' <Predicate = true> <Delay = 4.52> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 12 <SV = 11> <Delay = 3.95>
ST_12 : Operation 98 [5/5] (3.95ns)   --->   "%mul_ln88 = mul i32 %gmem_addr_read, i32 %tmp_data_V" [equalizer.cpp:88]   --->   Operation 98 'mul' 'mul_ln88' <Predicate = true> <Delay = 3.95> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 4> <II = 1> <Delay = 3.95> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>

State 13 <SV = 12> <Delay = 3.95>
ST_13 : Operation 99 [4/5] (3.95ns)   --->   "%mul_ln88 = mul i32 %gmem_addr_read, i32 %tmp_data_V" [equalizer.cpp:88]   --->   Operation 99 'mul' 'mul_ln88' <Predicate = true> <Delay = 3.95> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 4> <II = 1> <Delay = 3.95> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>

State 14 <SV = 13> <Delay = 3.95>
ST_14 : Operation 100 [3/5] (3.95ns)   --->   "%mul_ln88 = mul i32 %gmem_addr_read, i32 %tmp_data_V" [equalizer.cpp:88]   --->   Operation 100 'mul' 'mul_ln88' <Predicate = true> <Delay = 3.95> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 4> <II = 1> <Delay = 3.95> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>

State 15 <SV = 14> <Delay = 3.95>
ST_15 : Operation 101 [2/5] (3.95ns)   --->   "%mul_ln88 = mul i32 %gmem_addr_read, i32 %tmp_data_V" [equalizer.cpp:88]   --->   Operation 101 'mul' 'mul_ln88' <Predicate = true> <Delay = 3.95> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 4> <II = 1> <Delay = 3.95> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>

State 16 <SV = 15> <Delay = 3.95>
ST_16 : Operation 102 [1/5] (3.95ns)   --->   "%mul_ln88 = mul i32 %gmem_addr_read, i32 %tmp_data_V" [equalizer.cpp:88]   --->   Operation 102 'mul' 'mul_ln88' <Predicate = true> <Delay = 3.95> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 4> <II = 1> <Delay = 3.95> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>

State 17 <SV = 16> <Delay = 2.55>
ST_17 : Operation 103 [1/1] (0.00ns)   --->   "%accumulate_loc_load = load i32 %accumulate_loc"   --->   Operation 103 'load' 'accumulate_loc_load' <Predicate = true> <Delay = 0.00>
ST_17 : Operation 104 [1/1] (2.55ns)   --->   "%accumulate = add i32 %mul_ln88, i32 %accumulate_loc_load" [equalizer.cpp:88]   --->   Operation 104 'add' 'accumulate' <Predicate = true> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_17 : Operation 105 [2/2] (0.00ns)   --->   "%write_ln304 = write void @_ssdm_op_Write.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %output_r_V_data_V, i4 %output_r_V_keep_V, i4 %output_r_V_strb_V, i1 %output_r_V_user_V, i1 %output_r_V_last_V, i1 %output_r_V_id_V, i1 %output_r_V_dest_V, i32 %accumulate, i4 %tmp_keep_V, i4 %tmp_strb_V, i1 %tmp_user_V, i1 %tmp_last_V, i1 %tmp_id_V, i1 %tmp_dest_V"   --->   Operation 105 'write' 'write_ln304' <Predicate = true> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >

State 18 <SV = 17> <Delay = 1.82>
ST_18 : Operation 106 [1/2] (0.00ns)   --->   "%write_ln304 = write void @_ssdm_op_Write.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %output_r_V_data_V, i4 %output_r_V_keep_V, i4 %output_r_V_strb_V, i1 %output_r_V_user_V, i1 %output_r_V_last_V, i1 %output_r_V_id_V, i1 %output_r_V_dest_V, i32 %accumulate, i4 %tmp_keep_V, i4 %tmp_strb_V, i1 %tmp_user_V, i1 %tmp_last_V, i1 %tmp_id_V, i1 %tmp_dest_V"   --->   Operation 106 'write' 'write_ln304' <Predicate = (state_1 == 256)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_18 : Operation 107 [1/1] (1.58ns)   --->   "%br_ln105 = br i1 %tmp_last_V, void %for.inc46.preheader.if.end66_crit_edge, void %while.end" [equalizer.cpp:105]   --->   Operation 107 'br' 'br_ln105' <Predicate = (state_1 == 256)> <Delay = 1.58>
ST_18 : Operation 108 [1/1] (1.82ns)   --->   "%store_ln105 = store i32 256, i32 %state" [equalizer.cpp:105]   --->   Operation 108 'store' 'store_ln105' <Predicate = (state_1 == 256 & !tmp_last_V)> <Delay = 1.82>
ST_18 : Operation 109 [1/1] (0.00ns)   --->   "%store_ln105 = store i1 %tmp_dest_V, i1 %tmp_out_dest_V" [equalizer.cpp:105]   --->   Operation 109 'store' 'store_ln105' <Predicate = (state_1 == 256 & !tmp_last_V)> <Delay = 0.00>
ST_18 : Operation 110 [1/1] (0.00ns)   --->   "%store_ln105 = store i1 %tmp_id_V, i1 %tmp_out_id_V" [equalizer.cpp:105]   --->   Operation 110 'store' 'store_ln105' <Predicate = (state_1 == 256 & !tmp_last_V)> <Delay = 0.00>
ST_18 : Operation 111 [1/1] (0.00ns)   --->   "%store_ln105 = store i1 %tmp_user_V, i1 %tmp_out_user_V" [equalizer.cpp:105]   --->   Operation 111 'store' 'store_ln105' <Predicate = (state_1 == 256 & !tmp_last_V)> <Delay = 0.00>
ST_18 : Operation 112 [1/1] (0.00ns)   --->   "%store_ln105 = store i4 %tmp_strb_V, i4 %tmp_out_strb_V" [equalizer.cpp:105]   --->   Operation 112 'store' 'store_ln105' <Predicate = (state_1 == 256 & !tmp_last_V)> <Delay = 0.00>
ST_18 : Operation 113 [1/1] (0.00ns)   --->   "%store_ln105 = store i4 %tmp_keep_V, i4 %tmp_out_keep_V" [equalizer.cpp:105]   --->   Operation 113 'store' 'store_ln105' <Predicate = (state_1 == 256 & !tmp_last_V)> <Delay = 0.00>
ST_18 : Operation 114 [1/1] (0.00ns)   --->   "%store_ln105 = store i32 %accumulate, i32 %tmp_out_data_V" [equalizer.cpp:105]   --->   Operation 114 'store' 'store_ln105' <Predicate = (state_1 == 256 & !tmp_last_V)> <Delay = 0.00>
ST_18 : Operation 115 [1/1] (0.00ns)   --->   "%br_ln105 = br void %if.end66" [equalizer.cpp:105]   --->   Operation 115 'br' 'br_ln105' <Predicate = (state_1 == 256 & !tmp_last_V)> <Delay = 0.00>
ST_18 : Operation 116 [1/1] (0.00ns)   --->   "%br_ln27 = br void %while.body" [equalizer.cpp:27]   --->   Operation 116 'br' 'br_ln27' <Predicate = (state_1 != 16 & !tmp_last_V) | (state_1 == 16 & !tmp_last_V_1)> <Delay = 0.00>
ST_18 : Operation 117 [1/1] (0.00ns)   --->   "%tmp_dest_V_1 = phi i1 %tmp_out_dest_V_1, void %sw.bb, i1 %tmp_out_dest_V_1, void %if.end24, i1 %tmp_dest_V, void %for.inc46.preheader, i1 %tmp_out_dest_V_1, void %sw.epilog"   --->   Operation 117 'phi' 'tmp_dest_V_1' <Predicate = (state_1 != 16 & tmp_last_V) | (state_1 == 16 & tmp_last_V_1)> <Delay = 0.00>
ST_18 : Operation 118 [1/1] (0.00ns)   --->   "%tmp_id_V_1 = phi i1 %tmp_out_id_V_1, void %sw.bb, i1 %tmp_out_id_V_1, void %if.end24, i1 %tmp_id_V, void %for.inc46.preheader, i1 %tmp_out_id_V_1, void %sw.epilog"   --->   Operation 118 'phi' 'tmp_id_V_1' <Predicate = (state_1 != 16 & tmp_last_V) | (state_1 == 16 & tmp_last_V_1)> <Delay = 0.00>
ST_18 : Operation 119 [1/1] (0.00ns)   --->   "%tmp_user_V_1 = phi i1 %tmp_out_user_V_1, void %sw.bb, i1 %tmp_out_user_V_1, void %if.end24, i1 %tmp_user_V, void %for.inc46.preheader, i1 %tmp_out_user_V_1, void %sw.epilog"   --->   Operation 119 'phi' 'tmp_user_V_1' <Predicate = (state_1 != 16 & tmp_last_V) | (state_1 == 16 & tmp_last_V_1)> <Delay = 0.00>
ST_18 : Operation 120 [1/1] (0.00ns)   --->   "%tmp_strb_V_1 = phi i4 %tmp_out_strb_V_1, void %sw.bb, i4 %tmp_out_strb_V_1, void %if.end24, i4 %tmp_strb_V, void %for.inc46.preheader, i4 %tmp_out_strb_V_1, void %sw.epilog"   --->   Operation 120 'phi' 'tmp_strb_V_1' <Predicate = (state_1 != 16 & tmp_last_V) | (state_1 == 16 & tmp_last_V_1)> <Delay = 0.00>
ST_18 : Operation 121 [1/1] (0.00ns)   --->   "%tmp_keep_V_1 = phi i4 %tmp_out_keep_V_1, void %sw.bb, i4 %tmp_out_keep_V_1, void %if.end24, i4 %tmp_keep_V, void %for.inc46.preheader, i4 %tmp_out_keep_V_1, void %sw.epilog"   --->   Operation 121 'phi' 'tmp_keep_V_1' <Predicate = (state_1 != 16 & tmp_last_V) | (state_1 == 16 & tmp_last_V_1)> <Delay = 0.00>
ST_18 : Operation 122 [1/1] (0.00ns)   --->   "%tmp_data_V_5 = phi i32 %tmp_out_data_V_1, void %sw.bb, i32 %tmp_out_data_V_1, void %if.end24, i32 %accumulate, void %for.inc46.preheader, i32 %tmp_out_data_V_1, void %sw.epilog"   --->   Operation 122 'phi' 'tmp_data_V_5' <Predicate = (state_1 != 16 & tmp_last_V) | (state_1 == 16 & tmp_last_V_1)> <Delay = 0.00>
ST_18 : Operation 123 [2/2] (0.00ns)   --->   "%write_ln304 = write void @_ssdm_op_Write.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %output_r_V_data_V, i4 %output_r_V_keep_V, i4 %output_r_V_strb_V, i1 %output_r_V_user_V, i1 %output_r_V_last_V, i1 %output_r_V_id_V, i1 %output_r_V_dest_V, i32 %tmp_data_V_5, i4 %tmp_keep_V_1, i4 %tmp_strb_V_1, i1 %tmp_user_V_1, i1 1, i1 %tmp_id_V_1, i1 %tmp_dest_V_1"   --->   Operation 123 'write' 'write_ln304' <Predicate = (state_1 != 16 & tmp_last_V) | (state_1 == 16 & tmp_last_V_1)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >

State 19 <SV = 2> <Delay = 1.58>
ST_19 : Operation 124 [1/2] (0.00ns)   --->   "%call_ln0 = call void @equalizer_Pipeline_Coef_Clear_Loop, i32 %gmem, i64 %coefs_read"   --->   Operation 124 'call' 'call_ln0' <Predicate = true> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_19 : Operation 125 [1/1] (1.58ns)   --->   "%br_ln54 = br void %VITIS_LOOP_57_1" [equalizer.cpp:54]   --->   Operation 125 'br' 'br_ln54' <Predicate = true> <Delay = 1.58>

State 20 <SV = 3> <Delay = 4.47>
ST_20 : Operation 126 [1/1] (0.00ns)   --->   "%j = phi i2 %add_ln54, void %VITIS_LOOP_57_1.split, i2 0, void %for.inc.preheader" [equalizer.cpp:54]   --->   Operation 126 'phi' 'j' <Predicate = true> <Delay = 0.00>
ST_20 : Operation 127 [1/1] (0.00ns)   --->   "%coef_scale = phi i32 %tmp_data_V_4, void %VITIS_LOOP_57_1.split, i32 %tmp_data_V, void %for.inc.preheader"   --->   Operation 127 'phi' 'coef_scale' <Predicate = true> <Delay = 0.00>
ST_20 : Operation 128 [1/1] (0.00ns)   --->   "%p_4_0_0_0132_phi = phi i1 %tmp_last_V_2, void %VITIS_LOOP_57_1.split, i1 0, void %for.inc.preheader"   --->   Operation 128 'phi' 'p_4_0_0_0132_phi' <Predicate = true> <Delay = 0.00>
ST_20 : Operation 129 [1/1] (0.95ns)   --->   "%icmp_ln54 = icmp_eq  i2 %j, i2 3" [equalizer.cpp:54]   --->   Operation 129 'icmp' 'icmp_ln54' <Predicate = true> <Delay = 0.95> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.95> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_20 : Operation 130 [1/1] (0.00ns)   --->   "%empty_23 = speclooptripcount i32 @_ssdm_op_SpecLoopTripCount, i64 3, i64 3, i64 3"   --->   Operation 130 'speclooptripcount' 'empty_23' <Predicate = true> <Delay = 0.00>
ST_20 : Operation 131 [1/1] (1.56ns)   --->   "%add_ln54 = add i2 %j, i2 1" [equalizer.cpp:54]   --->   Operation 131 'add' 'add_ln54' <Predicate = true> <Delay = 1.56> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.56> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_20 : Operation 132 [1/1] (0.00ns)   --->   "%br_ln54 = br i1 %icmp_ln54, void %VITIS_LOOP_57_1.split, void %if.end24.loopexit" [equalizer.cpp:54]   --->   Operation 132 'br' 'br_ln54' <Predicate = true> <Delay = 0.00>
ST_20 : Operation 133 [1/1] (0.00ns)   --->   "%empty_24 = wait i32 @_ssdm_op_Wait"   --->   Operation 133 'wait' 'empty_24' <Predicate = (!icmp_ln54)> <Delay = 0.00>
ST_20 : Operation 134 [2/2] (3.52ns)   --->   "%call_ln283 = call void @equalizer_Pipeline_VITIS_LOOP_57_1, i32 %gmem, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V, i32 %coef_scale, i64 %coefs_read"   --->   Operation 134 'call' 'call_ln283' <Predicate = (!icmp_ln54)> <Delay = 3.52> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_20 : Operation 135 [1/1] (1.58ns)   --->   "%br_ln0 = br void %if.end24"   --->   Operation 135 'br' 'br_ln0' <Predicate = (icmp_ln54)> <Delay = 1.58>

State 21 <SV = 4> <Delay = 0.00>
ST_21 : Operation 136 [1/2] (0.00ns)   --->   "%call_ln283 = call void @equalizer_Pipeline_VITIS_LOOP_57_1, i32 %gmem, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V, i32 %coef_scale, i64 %coefs_read"   --->   Operation 136 'call' 'call_ln283' <Predicate = true> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 22 <SV = 5> <Delay = 0.00>
ST_22 : Operation 137 [1/1] (0.00ns)   --->   "%specloopname_ln14 = specloopname void @_ssdm_op_SpecLoopName, void @empty_15" [equalizer.cpp:14]   --->   Operation 137 'specloopname' 'specloopname_ln14' <Predicate = true> <Delay = 0.00>
ST_22 : Operation 138 [1/1] (0.00ns)   --->   "%empty_25 = wait i32 @_ssdm_op_Wait"   --->   Operation 138 'wait' 'empty_25' <Predicate = true> <Delay = 0.00>
ST_22 : Operation 139 [1/1] (0.00ns)   --->   "%empty_26 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 139 'read' 'empty_26' <Predicate = true> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_22 : Operation 140 [1/1] (0.00ns)   --->   "%tmp_data_V_4 = extractvalue i44 %empty_26"   --->   Operation 140 'extractvalue' 'tmp_data_V_4' <Predicate = true> <Delay = 0.00>
ST_22 : Operation 141 [1/1] (0.00ns)   --->   "%tmp_last_V_2 = extractvalue i44 %empty_26"   --->   Operation 141 'extractvalue' 'tmp_last_V_2' <Predicate = true> <Delay = 0.00>
ST_22 : Operation 142 [1/1] (0.00ns)   --->   "%br_ln54 = br void %VITIS_LOOP_57_1" [equalizer.cpp:54]   --->   Operation 142 'br' 'br_ln54' <Predicate = true> <Delay = 0.00>

State 23 <SV = 4> <Delay = 2.47>
ST_23 : Operation 143 [1/1] (0.00ns) (grouped into LUT with out node icmp_ln71)   --->   "%tmp_data_V_2 = phi i32 %tmp_data_V, void %sw.bb2, i32 %coef_scale, void %if.end24.loopexit"   --->   Operation 143 'phi' 'tmp_data_V_2' <Predicate = true> <Delay = 0.00>
ST_23 : Operation 144 [1/1] (2.47ns) (out node of the LUT)   --->   "%icmp_ln71 = icmp_eq  i32 %tmp_data_V_2, i32 43962" [equalizer.cpp:71]   --->   Operation 144 'icmp' 'icmp_ln71' <Predicate = true> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>

State 24 <SV = 5> <Delay = 2.51>
ST_24 : Operation 145 [1/1] (0.00ns)   --->   "%tmp_last_V_1 = phi i1 %tmp_last_V, void %sw.bb2, i1 %p_4_0_0_0132_phi, void %if.end24.loopexit"   --->   Operation 145 'phi' 'tmp_last_V_1' <Predicate = true> <Delay = 0.00>
ST_24 : Operation 146 [1/1] (0.68ns)   --->   "%select_ln16_1 = select i1 %icmp_ln71, i32 256, i32 16" [equalizer.cpp:16]   --->   Operation 146 'select' 'select_ln16_1' <Predicate = true> <Delay = 0.68> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.68> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_24 : Operation 147 [1/1] (1.58ns)   --->   "%br_ln105 = br i1 %tmp_last_V_1, void %if.end24.if.end66_crit_edge, void %while.end" [equalizer.cpp:105]   --->   Operation 147 'br' 'br_ln105' <Predicate = true> <Delay = 1.58>
ST_24 : Operation 148 [1/1] (1.82ns)   --->   "%store_ln105 = store i32 %select_ln16_1, i32 %state" [equalizer.cpp:105]   --->   Operation 148 'store' 'store_ln105' <Predicate = (!tmp_last_V_1)> <Delay = 1.82>
ST_24 : Operation 149 [1/1] (1.58ns)   --->   "%store_ln105 = store i1 1, i1 %read_coefs" [equalizer.cpp:105]   --->   Operation 149 'store' 'store_ln105' <Predicate = (!tmp_last_V_1)> <Delay = 1.58>
ST_24 : Operation 150 [1/1] (0.00ns)   --->   "%br_ln105 = br void %if.end66" [equalizer.cpp:105]   --->   Operation 150 'br' 'br_ln105' <Predicate = (!tmp_last_V_1)> <Delay = 0.00>

State 25 <SV = 2> <Delay = 3.01>
ST_25 : Operation 151 [1/1] (1.18ns)   --->   "%select_ln16 = select i1 %icmp_ln35, i32 16, i32 0" [equalizer.cpp:16]   --->   Operation 151 'select' 'select_ln16' <Predicate = true> <Delay = 1.18> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 1.18> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_25 : Operation 152 [1/1] (1.58ns)   --->   "%br_ln105 = br i1 %tmp_last_V, void %sw.bb.if.end66_crit_edge, void %while.end" [equalizer.cpp:105]   --->   Operation 152 'br' 'br_ln105' <Predicate = true> <Delay = 1.58>
ST_25 : Operation 153 [1/1] (1.82ns)   --->   "%store_ln105 = store i32 %select_ln16, i32 %state" [equalizer.cpp:105]   --->   Operation 153 'store' 'store_ln105' <Predicate = (!tmp_last_V)> <Delay = 1.82>
ST_25 : Operation 154 [1/1] (0.00ns)   --->   "%br_ln105 = br void %if.end66" [equalizer.cpp:105]   --->   Operation 154 'br' 'br_ln105' <Predicate = (!tmp_last_V)> <Delay = 0.00>

State 26 <SV = 18> <Delay = 0.00>
ST_26 : Operation 155 [1/2] (0.00ns)   --->   "%write_ln304 = write void @_ssdm_op_Write.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %output_r_V_data_V, i4 %output_r_V_keep_V, i4 %output_r_V_strb_V, i1 %output_r_V_user_V, i1 %output_r_V_last_V, i1 %output_r_V_id_V, i1 %output_r_V_dest_V, i32 %tmp_data_V_5, i4 %tmp_keep_V_1, i4 %tmp_strb_V_1, i1 %tmp_user_V_1, i1 1, i1 %tmp_id_V_1, i1 %tmp_dest_V_1"   --->   Operation 155 'write' 'write_ln304' <Predicate = true> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_26 : Operation 156 [1/1] (0.00ns)   --->   "%ret_ln112 = ret" [equalizer.cpp:112]   --->   Operation 156 'ret' 'ret_ln112' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 6.2ns, clock uncertainty: 1.67ns.

 <State 1>: 1.83ns
The critical path consists of the following:
	'alloca' operation ('state') [25]  (0 ns)
	'store' operation ('store_ln27', equalizer.cpp:27) of constant 0 on local variable 'state' [53]  (1.83 ns)

 <State 2>: 4.5ns
The critical path consists of the following:
	'call' operation ('call_ln0') to 'equalizer_Pipeline_Shift_Accumulate_Loop' [75]  (3.52 ns)
	blocking operation 0.978 ns on control path)

 <State 3>: 0ns
The critical path consists of the following:

 <State 4>: 4.53ns
The critical path consists of the following:
	bus request operation ('gmem_load_1_req', equalizer.cpp:88) on port 'gmem' (equalizer.cpp:88) [77]  (4.53 ns)

 <State 5>: 4.53ns
The critical path consists of the following:
	bus request operation ('gmem_load_1_req', equalizer.cpp:88) on port 'gmem' (equalizer.cpp:88) [77]  (4.53 ns)

 <State 6>: 4.53ns
The critical path consists of the following:
	bus request operation ('gmem_load_1_req', equalizer.cpp:88) on port 'gmem' (equalizer.cpp:88) [77]  (4.53 ns)

 <State 7>: 4.53ns
The critical path consists of the following:
	bus request operation ('gmem_load_1_req', equalizer.cpp:88) on port 'gmem' (equalizer.cpp:88) [77]  (4.53 ns)

 <State 8>: 4.53ns
The critical path consists of the following:
	bus request operation ('gmem_load_1_req', equalizer.cpp:88) on port 'gmem' (equalizer.cpp:88) [77]  (4.53 ns)

 <State 9>: 4.53ns
The critical path consists of the following:
	bus request operation ('gmem_load_1_req', equalizer.cpp:88) on port 'gmem' (equalizer.cpp:88) [77]  (4.53 ns)

 <State 10>: 4.53ns
The critical path consists of the following:
	bus request operation ('gmem_load_1_req', equalizer.cpp:88) on port 'gmem' (equalizer.cpp:88) [77]  (4.53 ns)

 <State 11>: 4.53ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read', equalizer.cpp:88) on port 'gmem' (equalizer.cpp:88) [78]  (4.53 ns)

 <State 12>: 3.95ns
The critical path consists of the following:
	'mul' operation ('mul_ln88', equalizer.cpp:88) [79]  (3.95 ns)

 <State 13>: 3.95ns
The critical path consists of the following:
	'mul' operation ('mul_ln88', equalizer.cpp:88) [79]  (3.95 ns)

 <State 14>: 3.95ns
The critical path consists of the following:
	'mul' operation ('mul_ln88', equalizer.cpp:88) [79]  (3.95 ns)

 <State 15>: 3.95ns
The critical path consists of the following:
	'mul' operation ('mul_ln88', equalizer.cpp:88) [79]  (3.95 ns)

 <State 16>: 3.95ns
The critical path consists of the following:
	'mul' operation ('mul_ln88', equalizer.cpp:88) [79]  (3.95 ns)

 <State 17>: 2.55ns
The critical path consists of the following:
	'load' operation ('accumulate_loc_load') on local variable 'accumulate_loc' [76]  (0 ns)
	'add' operation ('accumulate', equalizer.cpp:88) [80]  (2.55 ns)

 <State 18>: 1.83ns
The critical path consists of the following:
	'store' operation ('store_ln105', equalizer.cpp:105) of constant 256 on local variable 'state' [85]  (1.83 ns)

 <State 19>: 1.59ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('j', equalizer.cpp:54) with incoming values : ('add_ln54', equalizer.cpp:54) [100]  (1.59 ns)

 <State 20>: 4.48ns
The critical path consists of the following:
	'phi' operation ('tmp.data.V') with incoming values : ('tmp.data.V') [101]  (0 ns)
	'call' operation ('call_ln283') to 'equalizer_Pipeline_VITIS_LOOP_57_1' [110]  (3.52 ns)
	blocking operation 0.959 ns on control path)

 <State 21>: 0ns
The critical path consists of the following:

 <State 22>: 0ns
The critical path consists of the following:

 <State 23>: 2.47ns
The critical path consists of the following:
	'phi' operation ('tmp.data.V') with incoming values : ('tmp.data.V') [120]  (0 ns)
	'icmp' operation ('icmp_ln71', equalizer.cpp:71) [121]  (2.47 ns)

 <State 24>: 2.51ns
The critical path consists of the following:
	'select' operation ('select_ln16_1', equalizer.cpp:16) [122]  (0.687 ns)
	'store' operation ('store_ln105', equalizer.cpp:105) of variable 'select_ln16_1', equalizer.cpp:16 on local variable 'state' [125]  (1.83 ns)

 <State 25>: 3.01ns
The critical path consists of the following:
	'select' operation ('select_ln16', equalizer.cpp:16) [130]  (1.19 ns)
	'store' operation ('store_ln105', equalizer.cpp:105) of variable 'select_ln16', equalizer.cpp:16 on local variable 'state' [133]  (1.83 ns)

 <State 26>: 0ns
The critical path consists of the following:


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
