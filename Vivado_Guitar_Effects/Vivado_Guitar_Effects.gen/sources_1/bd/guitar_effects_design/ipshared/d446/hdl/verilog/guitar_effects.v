// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="guitar_effects_guitar_effects,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=131,HLS_SYN_DSP=0,HLS_SYN_FF=7873,HLS_SYN_LUT=12772,HLS_VERSION=2022_1}" *)

module guitar_effects (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        INPUT_r_TDATA,
        INPUT_r_TVALID,
        INPUT_r_TREADY,
        INPUT_r_TKEEP,
        INPUT_r_TSTRB,
        INPUT_r_TUSER,
        INPUT_r_TLAST,
        INPUT_r_TID,
        INPUT_r_TDEST,
        OUTPUT_r_TDATA,
        OUTPUT_r_TVALID,
        OUTPUT_r_TREADY,
        OUTPUT_r_TKEEP,
        OUTPUT_r_TSTRB,
        OUTPUT_r_TUSER,
        OUTPUT_r_TLAST,
        OUTPUT_r_TID,
        OUTPUT_r_TDEST,
        s_axi_control_r_AWVALID,
        s_axi_control_r_AWREADY,
        s_axi_control_r_AWADDR,
        s_axi_control_r_WVALID,
        s_axi_control_r_WREADY,
        s_axi_control_r_WDATA,
        s_axi_control_r_WSTRB,
        s_axi_control_r_ARVALID,
        s_axi_control_r_ARREADY,
        s_axi_control_r_ARADDR,
        s_axi_control_r_RVALID,
        s_axi_control_r_RREADY,
        s_axi_control_r_RDATA,
        s_axi_control_r_RRESP,
        s_axi_control_r_BVALID,
        s_axi_control_r_BREADY,
        s_axi_control_r_BRESP
);

parameter    ap_ST_fsm_state1 = 77'd1;
parameter    ap_ST_fsm_state2 = 77'd2;
parameter    ap_ST_fsm_state3 = 77'd4;
parameter    ap_ST_fsm_state4 = 77'd8;
parameter    ap_ST_fsm_state5 = 77'd16;
parameter    ap_ST_fsm_state6 = 77'd32;
parameter    ap_ST_fsm_state7 = 77'd64;
parameter    ap_ST_fsm_state8 = 77'd128;
parameter    ap_ST_fsm_state9 = 77'd256;
parameter    ap_ST_fsm_state10 = 77'd512;
parameter    ap_ST_fsm_state11 = 77'd1024;
parameter    ap_ST_fsm_state12 = 77'd2048;
parameter    ap_ST_fsm_state13 = 77'd4096;
parameter    ap_ST_fsm_state14 = 77'd8192;
parameter    ap_ST_fsm_state15 = 77'd16384;
parameter    ap_ST_fsm_state16 = 77'd32768;
parameter    ap_ST_fsm_state17 = 77'd65536;
parameter    ap_ST_fsm_state18 = 77'd131072;
parameter    ap_ST_fsm_state19 = 77'd262144;
parameter    ap_ST_fsm_state20 = 77'd524288;
parameter    ap_ST_fsm_state21 = 77'd1048576;
parameter    ap_ST_fsm_state22 = 77'd2097152;
parameter    ap_ST_fsm_state23 = 77'd4194304;
parameter    ap_ST_fsm_state24 = 77'd8388608;
parameter    ap_ST_fsm_state25 = 77'd16777216;
parameter    ap_ST_fsm_state26 = 77'd33554432;
parameter    ap_ST_fsm_state27 = 77'd67108864;
parameter    ap_ST_fsm_state28 = 77'd134217728;
parameter    ap_ST_fsm_state29 = 77'd268435456;
parameter    ap_ST_fsm_state30 = 77'd536870912;
parameter    ap_ST_fsm_state31 = 77'd1073741824;
parameter    ap_ST_fsm_state32 = 77'd2147483648;
parameter    ap_ST_fsm_state33 = 77'd4294967296;
parameter    ap_ST_fsm_state34 = 77'd8589934592;
parameter    ap_ST_fsm_state35 = 77'd17179869184;
parameter    ap_ST_fsm_state36 = 77'd34359738368;
parameter    ap_ST_fsm_state37 = 77'd68719476736;
parameter    ap_ST_fsm_state38 = 77'd137438953472;
parameter    ap_ST_fsm_state39 = 77'd274877906944;
parameter    ap_ST_fsm_state40 = 77'd549755813888;
parameter    ap_ST_fsm_state41 = 77'd1099511627776;
parameter    ap_ST_fsm_state42 = 77'd2199023255552;
parameter    ap_ST_fsm_state43 = 77'd4398046511104;
parameter    ap_ST_fsm_state44 = 77'd8796093022208;
parameter    ap_ST_fsm_state45 = 77'd17592186044416;
parameter    ap_ST_fsm_state46 = 77'd35184372088832;
parameter    ap_ST_fsm_state47 = 77'd70368744177664;
parameter    ap_ST_fsm_state48 = 77'd140737488355328;
parameter    ap_ST_fsm_state49 = 77'd281474976710656;
parameter    ap_ST_fsm_state50 = 77'd562949953421312;
parameter    ap_ST_fsm_state51 = 77'd1125899906842624;
parameter    ap_ST_fsm_state52 = 77'd2251799813685248;
parameter    ap_ST_fsm_state53 = 77'd4503599627370496;
parameter    ap_ST_fsm_state54 = 77'd9007199254740992;
parameter    ap_ST_fsm_state55 = 77'd18014398509481984;
parameter    ap_ST_fsm_state56 = 77'd36028797018963968;
parameter    ap_ST_fsm_state57 = 77'd72057594037927936;
parameter    ap_ST_fsm_state58 = 77'd144115188075855872;
parameter    ap_ST_fsm_state59 = 77'd288230376151711744;
parameter    ap_ST_fsm_state60 = 77'd576460752303423488;
parameter    ap_ST_fsm_state61 = 77'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 77'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 77'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 77'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 77'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 77'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 77'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 77'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 77'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 77'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 77'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 77'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 77'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 77'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 77'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 77'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 77'd75557863725914323419136;
parameter    C_S_AXI_CONTROL_R_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_R_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_R_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input  [31:0] INPUT_r_TDATA;
input   INPUT_r_TVALID;
output   INPUT_r_TREADY;
input  [3:0] INPUT_r_TKEEP;
input  [3:0] INPUT_r_TSTRB;
input  [1:0] INPUT_r_TUSER;
input  [0:0] INPUT_r_TLAST;
input  [4:0] INPUT_r_TID;
input  [5:0] INPUT_r_TDEST;
output  [31:0] OUTPUT_r_TDATA;
output   OUTPUT_r_TVALID;
input   OUTPUT_r_TREADY;
output  [3:0] OUTPUT_r_TKEEP;
output  [3:0] OUTPUT_r_TSTRB;
output  [1:0] OUTPUT_r_TUSER;
output  [0:0] OUTPUT_r_TLAST;
output  [4:0] OUTPUT_r_TID;
output  [5:0] OUTPUT_r_TDEST;
input   s_axi_control_r_AWVALID;
output   s_axi_control_r_AWREADY;
input  [C_S_AXI_CONTROL_R_ADDR_WIDTH - 1:0] s_axi_control_r_AWADDR;
input   s_axi_control_r_WVALID;
output   s_axi_control_r_WREADY;
input  [C_S_AXI_CONTROL_R_DATA_WIDTH - 1:0] s_axi_control_r_WDATA;
input  [C_S_AXI_CONTROL_R_WSTRB_WIDTH - 1:0] s_axi_control_r_WSTRB;
input   s_axi_control_r_ARVALID;
output   s_axi_control_r_ARREADY;
input  [C_S_AXI_CONTROL_R_ADDR_WIDTH - 1:0] s_axi_control_r_ARADDR;
output   s_axi_control_r_RVALID;
input   s_axi_control_r_RREADY;
output  [C_S_AXI_CONTROL_R_DATA_WIDTH - 1:0] s_axi_control_r_RDATA;
output  [1:0] s_axi_control_r_RRESP;
output   s_axi_control_r_BVALID;
input   s_axi_control_r_BREADY;
output  [1:0] s_axi_control_r_BRESP;

 reg    ap_rst_n_inv;
reg    axilite_out_ap_vld;
wire   [7:0] control;
wire   [31:0] distortion_threshold;
wire   [7:0] distortion_clip_factor;
wire   [31:0] compression_min_threshold;
wire   [31:0] compression_max_threshold;
wire   [31:0] compression_zero_threshold;
wire   [31:0] delay_mult;
wire   [31:0] delay_samples;
wire   [31:0] tempo;
wire   [63:0] wah_coeffs;
reg    debug_output_ap_vld;
wire   [31:0] starting_sample;
reg    gmem_blk_n_AR;
(* fsm_encoding = "none" *) reg   [76:0] ap_CS_fsm;
wire    ap_CS_fsm_state5;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state12;
reg    INPUT_r_TDATA_blk_n;
wire    ap_CS_fsm_state14;
reg    OUTPUT_r_TDATA_blk_n;
wire    ap_CS_fsm_state75;
reg   [0:0] tmp_last_V_reg_1442;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state76;
reg   [63:0] wah_coeffs_read_reg_1256;
wire    ap_CS_fsm_state1;
reg   [31:0] delay_samples_read_reg_1262;
reg   [31:0] delay_mult_read_reg_1267;
reg   [31:0] compression_zero_threshold_read_reg_1272;
reg   [31:0] compression_max_threshold_read_reg_1277;
reg   [31:0] compression_min_threshold_read_reg_1282;
reg   [7:0] distortion_clip_factor_read_reg_1287;
reg   [31:0] distortion_threshold_read_reg_1292;
reg   [7:0] control_read_reg_1300;
wire   [0:0] trunc_ln24_fu_614_p1;
reg   [0:0] trunc_ln24_reg_1307;
reg   [0:0] tmp_reg_1376;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln84_fu_692_p2;
reg   [0:0] tmp_12_reg_1380;
reg   [0:0] tmp_13_reg_1384;
reg   [31:0] gmem_addr_read_reg_1394;
wire   [15:0] empty_59_fu_775_p1;
reg   [15:0] empty_59_reg_1399;
wire    ap_CS_fsm_state13;
wire   [15:0] negative_threshold_fu_778_p2;
reg   [15:0] negative_threshold_reg_1405;
wire  signed [39:0] conv7_i_i_i_fu_784_p1;
reg  signed [39:0] conv7_i_i_i_reg_1410;
wire   [30:0] trunc_ln77_fu_797_p1;
reg   [30:0] trunc_ln77_reg_1422;
reg   [3:0] tmp_keep_V_reg_1427;
reg   [3:0] tmp_strb_V_reg_1432;
reg   [1:0] tmp_user_V_reg_1437;
reg   [4:0] tmp_id_V_reg_1446;
reg   [5:0] tmp_dest_V_reg_1451;
wire  signed [15:0] tmp_short_8_fu_829_p1;
wire   [31:0] current_sample_fu_833_p2;
reg   [31:0] current_sample_reg_1462;
wire   [31:0] or_ln105_fu_839_p2;
reg   [31:0] or_ln105_reg_1467;
wire   [31:0] r_V_fu_859_p2;
reg  signed [31:0] r_V_reg_1480;
wire   [0:0] icmp_ln148_fu_849_p2;
wire   [0:0] icmp_ln150_fu_854_p2;
wire   [31:0] r_V_2_fu_864_p2;
reg  signed [31:0] r_V_2_reg_1485;
wire    ap_CS_fsm_state15;
wire   [39:0] grp_fu_872_p2;
reg   [39:0] r_V_10_reg_1495;
wire    ap_CS_fsm_state16;
reg   [15:0] ret_V_3_cast_reg_1500;
wire   [6:0] trunc_ln1049_1_fu_887_p1;
reg   [6:0] trunc_ln1049_1_reg_1507;
wire   [15:0] result_1_fu_922_p2;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire   [39:0] grp_fu_930_p2;
reg   [39:0] r_V_9_reg_1522;
wire    ap_CS_fsm_state19;
reg   [15:0] ret_V_cast_reg_1527;
wire   [6:0] trunc_ln1049_fu_945_p1;
reg   [6:0] trunc_ln1049_reg_1534;
wire   [15:0] result_fu_980_p2;
wire    ap_CS_fsm_state20;
wire   [31:0] or_ln110_fu_989_p2;
wire    ap_CS_fsm_state22;
reg   [31:0] delay_buffer_index_load_reg_1557;
wire    ap_CS_fsm_state23;
wire   [16:0] grp_fu_1016_p2;
reg   [16:0] srem_ln209_reg_1572;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
wire   [15:0] delay_buffer_q0;
reg  signed [15:0] delay_buffer_load_reg_1582;
wire    ap_CS_fsm_state60;
wire  signed [31:0] sext_ln209_fu_1047_p1;
wire    ap_CS_fsm_state61;
wire   [31:0] grp_fu_611_p1;
reg   [31:0] conv2_i_reg_1592;
wire    ap_CS_fsm_state66;
wire   [31:0] grp_fu_607_p2;
reg   [31:0] dc_reg_1597;
wire    ap_CS_fsm_state70;
wire   [31:0] data_V_fu_1051_p1;
reg   [31:0] data_V_reg_1602;
wire    ap_CS_fsm_state71;
wire   [22:0] p_Result_13_fu_1064_p1;
reg   [22:0] p_Result_13_reg_1607;
wire   [0:0] isNeg_fu_1078_p3;
reg   [0:0] isNeg_reg_1612;
wire   [8:0] ush_fu_1096_p3;
reg   [8:0] ush_reg_1617;
wire   [15:0] val_fu_1158_p3;
reg   [15:0] val_reg_1622;
wire    ap_CS_fsm_state72;
wire   [15:0] result_V_4_fu_1165_p2;
reg   [15:0] result_V_4_reg_1627;
wire   [31:0] or_ln115_fu_1171_p2;
wire    ap_CS_fsm_state73;
wire   [15:0] output_fu_1190_p2;
reg   [8:0] compression_buffer_address0;
reg    compression_buffer_ce0;
reg    compression_buffer_we0;
reg   [15:0] compression_buffer_d0;
wire   [15:0] compression_buffer_q0;
reg   [16:0] delay_buffer_address0;
reg    delay_buffer_ce0;
reg    delay_buffer_we0;
reg   [15:0] delay_buffer_d0;
reg   [6:0] wah_values_buffer_address0;
reg    wah_values_buffer_ce0;
reg    wah_values_buffer_we0;
reg   [15:0] wah_values_buffer_d0;
wire   [15:0] wah_values_buffer_q0;
reg   [6:0] control_signals_buffer_address0;
reg    control_signals_buffer_ce0;
reg    control_signals_buffer_we0;
reg   [4:0] control_signals_buffer_d0;
wire   [4:0] control_signals_buffer_q0;
wire    grp_compression_fu_580_ap_start;
wire    grp_compression_fu_580_ap_done;
wire    grp_compression_fu_580_ap_idle;
wire    grp_compression_fu_580_ap_ready;
wire   [8:0] grp_compression_fu_580_values_buffer_address0;
wire    grp_compression_fu_580_values_buffer_ce0;
wire    grp_compression_fu_580_values_buffer_we0;
wire   [15:0] grp_compression_fu_580_values_buffer_d0;
wire   [15:0] grp_compression_fu_580_ap_return_0;
wire   [15:0] grp_compression_fu_580_ap_return_1;
wire   [31:0] grp_compression_fu_580_grp_fu_607_p_din0;
wire   [31:0] grp_compression_fu_580_grp_fu_607_p_din1;
wire    grp_compression_fu_580_grp_fu_607_p_ce;
wire  signed [31:0] grp_compression_fu_580_grp_fu_611_p_din0;
wire    grp_compression_fu_580_grp_fu_611_p_ce;
wire    grp_wah_fu_594_ap_start;
wire    grp_wah_fu_594_ap_done;
wire    grp_wah_fu_594_ap_idle;
wire    grp_wah_fu_594_ap_ready;
wire   [6:0] grp_wah_fu_594_wah_values_buffer_address0;
wire    grp_wah_fu_594_wah_values_buffer_ce0;
wire    grp_wah_fu_594_wah_values_buffer_we0;
wire   [15:0] grp_wah_fu_594_wah_values_buffer_d0;
wire    grp_wah_fu_594_m_axi_gmem_AWVALID;
wire   [63:0] grp_wah_fu_594_m_axi_gmem_AWADDR;
wire   [0:0] grp_wah_fu_594_m_axi_gmem_AWID;
wire   [31:0] grp_wah_fu_594_m_axi_gmem_AWLEN;
wire   [2:0] grp_wah_fu_594_m_axi_gmem_AWSIZE;
wire   [1:0] grp_wah_fu_594_m_axi_gmem_AWBURST;
wire   [1:0] grp_wah_fu_594_m_axi_gmem_AWLOCK;
wire   [3:0] grp_wah_fu_594_m_axi_gmem_AWCACHE;
wire   [2:0] grp_wah_fu_594_m_axi_gmem_AWPROT;
wire   [3:0] grp_wah_fu_594_m_axi_gmem_AWQOS;
wire   [3:0] grp_wah_fu_594_m_axi_gmem_AWREGION;
wire   [0:0] grp_wah_fu_594_m_axi_gmem_AWUSER;
wire    grp_wah_fu_594_m_axi_gmem_WVALID;
wire   [31:0] grp_wah_fu_594_m_axi_gmem_WDATA;
wire   [3:0] grp_wah_fu_594_m_axi_gmem_WSTRB;
wire    grp_wah_fu_594_m_axi_gmem_WLAST;
wire   [0:0] grp_wah_fu_594_m_axi_gmem_WID;
wire   [0:0] grp_wah_fu_594_m_axi_gmem_WUSER;
wire    grp_wah_fu_594_m_axi_gmem_ARVALID;
wire   [63:0] grp_wah_fu_594_m_axi_gmem_ARADDR;
wire   [0:0] grp_wah_fu_594_m_axi_gmem_ARID;
wire   [31:0] grp_wah_fu_594_m_axi_gmem_ARLEN;
wire   [2:0] grp_wah_fu_594_m_axi_gmem_ARSIZE;
wire   [1:0] grp_wah_fu_594_m_axi_gmem_ARBURST;
wire   [1:0] grp_wah_fu_594_m_axi_gmem_ARLOCK;
wire   [3:0] grp_wah_fu_594_m_axi_gmem_ARCACHE;
wire   [2:0] grp_wah_fu_594_m_axi_gmem_ARPROT;
wire   [3:0] grp_wah_fu_594_m_axi_gmem_ARQOS;
wire   [3:0] grp_wah_fu_594_m_axi_gmem_ARREGION;
wire   [0:0] grp_wah_fu_594_m_axi_gmem_ARUSER;
wire    grp_wah_fu_594_m_axi_gmem_RREADY;
wire    grp_wah_fu_594_m_axi_gmem_BREADY;
wire   [6:0] grp_wah_fu_594_control_signal_buffer_address0;
wire    grp_wah_fu_594_control_signal_buffer_ce0;
wire    grp_wah_fu_594_control_signal_buffer_we0;
wire   [4:0] grp_wah_fu_594_control_signal_buffer_d0;
wire   [15:0] grp_wah_fu_594_ap_return_0;
wire   [15:0] grp_wah_fu_594_ap_return_1;
wire   [31:0] grp_wah_fu_594_grp_fu_607_p_din0;
wire   [31:0] grp_wah_fu_594_grp_fu_607_p_din1;
wire    grp_wah_fu_594_grp_fu_607_p_ce;
wire  signed [31:0] grp_wah_fu_594_grp_fu_611_p_din0;
wire    grp_wah_fu_594_grp_fu_611_p_ce;
wire    gmem_AWREADY;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire   [8:0] gmem_RFIFONUM;
wire    gmem_BVALID;
reg   [31:0] empty_61_reg_487;
reg   [15:0] tmp_short_reg_501;
reg   [31:0] empty_62_reg_515;
wire    ap_CS_fsm_state21;
reg   [15:0] tmp_short_4_reg_526;
reg   [31:0] empty_63_reg_537;
reg   [15:0] tmp_short_2_reg_548;
wire   [31:0] or_ln120_fu_1210_p2;
reg   [31:0] ap_phi_mux_empty_64_phi_fu_562_p4;
reg   [31:0] empty_64_reg_559;
reg    ap_block_state75;
reg    ap_block_state75_io;
reg    ap_block_state75_on_subcall_done;
wire    ap_CS_fsm_state74;
reg   [15:0] ap_phi_mux_tmp_short_9_phi_fu_573_p4;
reg   [15:0] tmp_short_9_reg_570;
reg    grp_compression_fu_580_ap_start_reg;
reg    grp_wah_fu_594_ap_start_reg;
wire   [63:0] p_cast_fu_626_p1;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond3725_fu_631_p2;
wire   [63:0] p_cast4_fu_656_p1;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond3712_fu_661_p2;
wire   [63:0] zext_ln84_fu_686_p1;
wire   [63:0] zext_ln209_fu_1042_p1;
wire   [63:0] zext_ln212_fu_1197_p1;
wire  signed [63:0] sext_ln94_fu_764_p1;
reg   [8:0] empty_fu_244;
wire   [8:0] empty_53_fu_637_p2;
reg   [16:0] empty_54_fu_264;
wire   [16:0] empty_56_fu_667_p2;
reg   [6:0] i_fu_268;
wire   [6:0] add_ln84_fu_698_p2;
reg   [31:0] current_sample_1_fu_272;
reg   [31:0] empty_58_fu_276;
reg   [31:0] delay_buffer_index_fu_280;
wire   [31:0] grp_fu_1028_p2;
reg   [15:0] compression_buffer_index_1_fu_284;
reg   [15:0] wah_buffer_index_1_fu_288;
reg   [31:0] debug_output_local_0_fu_292;
reg   [31:0] grp_fu_607_p0;
reg   [31:0] grp_fu_607_p1;
wire    ap_CS_fsm_state67;
reg  signed [31:0] grp_fu_611_p0;
wire   [61:0] trunc_ln4_fu_755_p4;
wire  signed [31:0] sext_ln148_fu_845_p1;
wire  signed [7:0] grp_fu_872_p1;
wire   [0:0] icmp_ln1049_1_fu_898_p2;
wire   [15:0] ret_V_2_fu_903_p2;
wire   [0:0] p_Result_8_fu_891_p3;
wire   [15:0] select_ln1048_1_fu_908_p3;
wire   [15:0] ret_V_3_fu_915_p3;
wire  signed [7:0] grp_fu_930_p1;
wire   [0:0] icmp_ln1049_fu_956_p2;
wire   [15:0] ret_V_fu_961_p2;
wire   [0:0] p_Result_s_fu_949_p3;
wire   [15:0] select_ln1048_fu_966_p3;
wire   [15:0] ret_V_1_fu_973_p3;
wire   [31:0] grp_fu_1016_p0;
wire   [17:0] grp_fu_1016_p1;
wire   [31:0] grp_fu_1028_p0;
wire   [17:0] grp_fu_1028_p1;
wire   [16:0] trunc_ln209_fu_1039_p1;
wire   [7:0] xs_exp_V_fu_1054_p4;
wire   [8:0] zext_ln346_fu_1068_p1;
wire   [8:0] add_ln346_fu_1072_p2;
wire   [7:0] sub_ln1512_fu_1086_p2;
wire  signed [8:0] sext_ln1512_fu_1092_p1;
wire   [24:0] mantissa_fu_1104_p4;
wire  signed [31:0] sext_ln1488_fu_1117_p1;
wire   [62:0] zext_ln15_fu_1113_p1;
wire   [62:0] zext_ln1488_fu_1120_p1;
wire   [62:0] r_V_7_fu_1124_p2;
wire   [0:0] tmp_19_fu_1136_p3;
wire   [62:0] r_V_8_fu_1130_p2;
wire   [15:0] zext_ln818_fu_1144_p1;
wire   [15:0] tmp_s_fu_1148_p4;
wire   [0:0] p_Result_12_fu_1177_p3;
wire   [15:0] result_V_fu_1184_p3;
reg    grp_fu_607_ce;
reg    grp_fu_611_ce;
reg    grp_fu_1016_ap_start;
wire    grp_fu_1016_ap_done;
reg    grp_fu_1028_ap_start;
wire    grp_fu_1028_ap_done;
reg   [76:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
reg    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
reg    ap_ST_fsm_state75_blk;
reg    ap_ST_fsm_state76_blk;
reg    ap_ST_fsm_state77_blk;
wire    regslice_both_OUTPUT_r_V_data_V_U_apdone_blk;
reg    ap_block_state77;
wire    regslice_both_INPUT_r_V_data_V_U_apdone_blk;
wire   [31:0] INPUT_r_TDATA_int_regslice;
wire    INPUT_r_TVALID_int_regslice;
reg    INPUT_r_TREADY_int_regslice;
wire    regslice_both_INPUT_r_V_data_V_U_ack_in;
wire    regslice_both_INPUT_r_V_keep_V_U_apdone_blk;
wire   [3:0] INPUT_r_TKEEP_int_regslice;
wire    regslice_both_INPUT_r_V_keep_V_U_vld_out;
wire    regslice_both_INPUT_r_V_keep_V_U_ack_in;
wire    regslice_both_INPUT_r_V_strb_V_U_apdone_blk;
wire   [3:0] INPUT_r_TSTRB_int_regslice;
wire    regslice_both_INPUT_r_V_strb_V_U_vld_out;
wire    regslice_both_INPUT_r_V_strb_V_U_ack_in;
wire    regslice_both_INPUT_r_V_user_V_U_apdone_blk;
wire   [1:0] INPUT_r_TUSER_int_regslice;
wire    regslice_both_INPUT_r_V_user_V_U_vld_out;
wire    regslice_both_INPUT_r_V_user_V_U_ack_in;
wire    regslice_both_INPUT_r_V_last_V_U_apdone_blk;
wire   [0:0] INPUT_r_TLAST_int_regslice;
wire    regslice_both_INPUT_r_V_last_V_U_vld_out;
wire    regslice_both_INPUT_r_V_last_V_U_ack_in;
wire    regslice_both_INPUT_r_V_id_V_U_apdone_blk;
wire   [4:0] INPUT_r_TID_int_regslice;
wire    regslice_both_INPUT_r_V_id_V_U_vld_out;
wire    regslice_both_INPUT_r_V_id_V_U_ack_in;
wire    regslice_both_INPUT_r_V_dest_V_U_apdone_blk;
wire   [5:0] INPUT_r_TDEST_int_regslice;
wire    regslice_both_INPUT_r_V_dest_V_U_vld_out;
wire    regslice_both_INPUT_r_V_dest_V_U_ack_in;
wire   [31:0] OUTPUT_r_TDATA_int_regslice;
reg    OUTPUT_r_TVALID_int_regslice;
wire    OUTPUT_r_TREADY_int_regslice;
wire    regslice_both_OUTPUT_r_V_data_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_keep_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_keep_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_keep_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_strb_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_strb_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_strb_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_user_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_user_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_user_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_last_V_U_apdone_blk;
reg   [0:0] OUTPUT_r_TLAST_int_regslice;
wire    regslice_both_OUTPUT_r_V_last_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_last_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_id_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_id_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_id_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_dest_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_dest_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_dest_V_U_vld_out;
reg    ap_condition_1800;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 77'd1;
#0 grp_compression_fu_580_ap_start_reg = 1'b0;
#0 grp_wah_fu_594_ap_start_reg = 1'b0;
end

guitar_effects_compression_buffer_RAM_AUTO_1R1W #(
    .DataWidth( 16 ),
    .AddressRange( 441 ),
    .AddressWidth( 9 ))
compression_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(compression_buffer_address0),
    .ce0(compression_buffer_ce0),
    .we0(compression_buffer_we0),
    .d0(compression_buffer_d0),
    .q0(compression_buffer_q0)
);

guitar_effects_delay_buffer_RAM_AUTO_1R1W #(
    .DataWidth( 16 ),
    .AddressRange( 88200 ),
    .AddressWidth( 17 ))
delay_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(delay_buffer_address0),
    .ce0(delay_buffer_ce0),
    .we0(delay_buffer_we0),
    .d0(delay_buffer_d0),
    .q0(delay_buffer_q0)
);

guitar_effects_wah_values_buffer_RAM_AUTO_1R1W #(
    .DataWidth( 16 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
wah_values_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(wah_values_buffer_address0),
    .ce0(wah_values_buffer_ce0),
    .we0(wah_values_buffer_we0),
    .d0(wah_values_buffer_d0),
    .q0(wah_values_buffer_q0)
);

guitar_effects_control_signals_buffer_RAM_AUTO_1R1W #(
    .DataWidth( 5 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
control_signals_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(control_signals_buffer_address0),
    .ce0(control_signals_buffer_ce0),
    .we0(control_signals_buffer_we0),
    .d0(control_signals_buffer_d0),
    .q0(control_signals_buffer_q0)
);

guitar_effects_compression grp_compression_fu_580(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_compression_fu_580_ap_start),
    .ap_done(grp_compression_fu_580_ap_done),
    .ap_idle(grp_compression_fu_580_ap_idle),
    .ap_ready(grp_compression_fu_580_ap_ready),
    .input_r(tmp_short_reg_501),
    .min_threshold(compression_min_threshold_read_reg_1282),
    .max_threshold(compression_max_threshold_read_reg_1277),
    .zero_threshold(compression_zero_threshold_read_reg_1272),
    .values_buffer_address0(grp_compression_fu_580_values_buffer_address0),
    .values_buffer_ce0(grp_compression_fu_580_values_buffer_ce0),
    .values_buffer_we0(grp_compression_fu_580_values_buffer_we0),
    .values_buffer_d0(grp_compression_fu_580_values_buffer_d0),
    .values_buffer_q0(compression_buffer_q0),
    .compression_buffer_index_read(compression_buffer_index_1_fu_284),
    .current_sample(current_sample_1_fu_272),
    .ap_return_0(grp_compression_fu_580_ap_return_0),
    .ap_return_1(grp_compression_fu_580_ap_return_1),
    .grp_fu_607_p_din0(grp_compression_fu_580_grp_fu_607_p_din0),
    .grp_fu_607_p_din1(grp_compression_fu_580_grp_fu_607_p_din1),
    .grp_fu_607_p_dout0(grp_fu_607_p2),
    .grp_fu_607_p_ce(grp_compression_fu_580_grp_fu_607_p_ce),
    .grp_fu_611_p_din0(grp_compression_fu_580_grp_fu_611_p_din0),
    .grp_fu_611_p_dout0(grp_fu_611_p1),
    .grp_fu_611_p_ce(grp_compression_fu_580_grp_fu_611_p_ce)
);

guitar_effects_wah grp_wah_fu_594(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_wah_fu_594_ap_start),
    .ap_done(grp_wah_fu_594_ap_done),
    .ap_idle(grp_wah_fu_594_ap_idle),
    .ap_ready(grp_wah_fu_594_ap_ready),
    .input_r(tmp_short_2_reg_548),
    .p_read(trunc_ln77_reg_1422),
    .p_read1(wah_buffer_index_1_fu_288),
    .wah_values_buffer_address0(grp_wah_fu_594_wah_values_buffer_address0),
    .wah_values_buffer_ce0(grp_wah_fu_594_wah_values_buffer_ce0),
    .wah_values_buffer_we0(grp_wah_fu_594_wah_values_buffer_we0),
    .wah_values_buffer_d0(grp_wah_fu_594_wah_values_buffer_d0),
    .wah_values_buffer_q0(wah_values_buffer_q0),
    .m_axi_gmem_AWVALID(grp_wah_fu_594_m_axi_gmem_AWVALID),
    .m_axi_gmem_AWREADY(1'b0),
    .m_axi_gmem_AWADDR(grp_wah_fu_594_m_axi_gmem_AWADDR),
    .m_axi_gmem_AWID(grp_wah_fu_594_m_axi_gmem_AWID),
    .m_axi_gmem_AWLEN(grp_wah_fu_594_m_axi_gmem_AWLEN),
    .m_axi_gmem_AWSIZE(grp_wah_fu_594_m_axi_gmem_AWSIZE),
    .m_axi_gmem_AWBURST(grp_wah_fu_594_m_axi_gmem_AWBURST),
    .m_axi_gmem_AWLOCK(grp_wah_fu_594_m_axi_gmem_AWLOCK),
    .m_axi_gmem_AWCACHE(grp_wah_fu_594_m_axi_gmem_AWCACHE),
    .m_axi_gmem_AWPROT(grp_wah_fu_594_m_axi_gmem_AWPROT),
    .m_axi_gmem_AWQOS(grp_wah_fu_594_m_axi_gmem_AWQOS),
    .m_axi_gmem_AWREGION(grp_wah_fu_594_m_axi_gmem_AWREGION),
    .m_axi_gmem_AWUSER(grp_wah_fu_594_m_axi_gmem_AWUSER),
    .m_axi_gmem_WVALID(grp_wah_fu_594_m_axi_gmem_WVALID),
    .m_axi_gmem_WREADY(1'b0),
    .m_axi_gmem_WDATA(grp_wah_fu_594_m_axi_gmem_WDATA),
    .m_axi_gmem_WSTRB(grp_wah_fu_594_m_axi_gmem_WSTRB),
    .m_axi_gmem_WLAST(grp_wah_fu_594_m_axi_gmem_WLAST),
    .m_axi_gmem_WID(grp_wah_fu_594_m_axi_gmem_WID),
    .m_axi_gmem_WUSER(grp_wah_fu_594_m_axi_gmem_WUSER),
    .m_axi_gmem_ARVALID(grp_wah_fu_594_m_axi_gmem_ARVALID),
    .m_axi_gmem_ARREADY(gmem_ARREADY),
    .m_axi_gmem_ARADDR(grp_wah_fu_594_m_axi_gmem_ARADDR),
    .m_axi_gmem_ARID(grp_wah_fu_594_m_axi_gmem_ARID),
    .m_axi_gmem_ARLEN(grp_wah_fu_594_m_axi_gmem_ARLEN),
    .m_axi_gmem_ARSIZE(grp_wah_fu_594_m_axi_gmem_ARSIZE),
    .m_axi_gmem_ARBURST(grp_wah_fu_594_m_axi_gmem_ARBURST),
    .m_axi_gmem_ARLOCK(grp_wah_fu_594_m_axi_gmem_ARLOCK),
    .m_axi_gmem_ARCACHE(grp_wah_fu_594_m_axi_gmem_ARCACHE),
    .m_axi_gmem_ARPROT(grp_wah_fu_594_m_axi_gmem_ARPROT),
    .m_axi_gmem_ARQOS(grp_wah_fu_594_m_axi_gmem_ARQOS),
    .m_axi_gmem_ARREGION(grp_wah_fu_594_m_axi_gmem_ARREGION),
    .m_axi_gmem_ARUSER(grp_wah_fu_594_m_axi_gmem_ARUSER),
    .m_axi_gmem_RVALID(gmem_RVALID),
    .m_axi_gmem_RREADY(grp_wah_fu_594_m_axi_gmem_RREADY),
    .m_axi_gmem_RDATA(gmem_RDATA),
    .m_axi_gmem_RLAST(1'b0),
    .m_axi_gmem_RID(1'd0),
    .m_axi_gmem_RFIFONUM(gmem_RFIFONUM),
    .m_axi_gmem_RUSER(1'd0),
    .m_axi_gmem_RRESP(2'd0),
    .m_axi_gmem_BVALID(1'b0),
    .m_axi_gmem_BREADY(grp_wah_fu_594_m_axi_gmem_BREADY),
    .m_axi_gmem_BRESP(2'd0),
    .m_axi_gmem_BID(1'd0),
    .m_axi_gmem_BUSER(1'd0),
    .bandpass_coeffs(wah_coeffs_read_reg_1256),
    .control_signal_buffer_address0(grp_wah_fu_594_control_signal_buffer_address0),
    .control_signal_buffer_ce0(grp_wah_fu_594_control_signal_buffer_ce0),
    .control_signal_buffer_we0(grp_wah_fu_594_control_signal_buffer_we0),
    .control_signal_buffer_d0(grp_wah_fu_594_control_signal_buffer_d0),
    .control_signal_buffer_q0(control_signals_buffer_q0),
    .ap_return_0(grp_wah_fu_594_ap_return_0),
    .ap_return_1(grp_wah_fu_594_ap_return_1),
    .grp_fu_607_p_din0(grp_wah_fu_594_grp_fu_607_p_din0),
    .grp_fu_607_p_din1(grp_wah_fu_594_grp_fu_607_p_din1),
    .grp_fu_607_p_dout0(grp_fu_607_p2),
    .grp_fu_607_p_ce(grp_wah_fu_594_grp_fu_607_p_ce),
    .grp_fu_611_p_din0(grp_wah_fu_594_grp_fu_611_p_din0),
    .grp_fu_611_p_dout0(grp_fu_611_p1),
    .grp_fu_611_p_ce(grp_wah_fu_594_grp_fu_611_p_ce)
);

guitar_effects_control_r_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_R_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_R_DATA_WIDTH ))
control_r_s_axi_U(
    .AWVALID(s_axi_control_r_AWVALID),
    .AWREADY(s_axi_control_r_AWREADY),
    .AWADDR(s_axi_control_r_AWADDR),
    .WVALID(s_axi_control_r_WVALID),
    .WREADY(s_axi_control_r_WREADY),
    .WDATA(s_axi_control_r_WDATA),
    .WSTRB(s_axi_control_r_WSTRB),
    .ARVALID(s_axi_control_r_ARVALID),
    .ARREADY(s_axi_control_r_ARREADY),
    .ARADDR(s_axi_control_r_ARADDR),
    .RVALID(s_axi_control_r_RVALID),
    .RREADY(s_axi_control_r_RREADY),
    .RDATA(s_axi_control_r_RDATA),
    .RRESP(s_axi_control_r_RRESP),
    .BVALID(s_axi_control_r_BVALID),
    .BREADY(s_axi_control_r_BREADY),
    .BRESP(s_axi_control_r_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .axilite_out(ap_phi_mux_empty_64_phi_fu_562_p4),
    .axilite_out_ap_vld(axilite_out_ap_vld),
    .control(control),
    .distortion_threshold(distortion_threshold),
    .distortion_clip_factor(distortion_clip_factor),
    .compression_min_threshold(compression_min_threshold),
    .compression_max_threshold(compression_max_threshold),
    .compression_zero_threshold(compression_zero_threshold),
    .delay_mult(delay_mult),
    .delay_samples(delay_samples),
    .tempo(tempo),
    .wah_coeffs(wah_coeffs),
    .debug_output(debug_output_local_0_fu_292),
    .debug_output_ap_vld(debug_output_ap_vld),
    .starting_sample(starting_sample)
);

guitar_effects_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .USER_DW( 32 ),
    .USER_AW( 64 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARLEN(gmem_ARLEN),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RFIFONUM(gmem_RFIFONUM),
    .I_AWVALID(1'b0),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWLEN(32'd0),
    .I_WVALID(1'b0),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(32'd0),
    .I_WSTRB(4'd0),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(1'b0)
);

guitar_effects_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U52(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_607_p0),
    .din1(grp_fu_607_p1),
    .ce(grp_fu_607_ce),
    .dout(grp_fu_607_p2)
);

guitar_effects_sitofp_32s_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32s_32_6_no_dsp_1_U53(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_611_p0),
    .ce(grp_fu_611_ce),
    .dout(grp_fu_611_p1)
);

guitar_effects_mul_32s_8s_40_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 40 ))
mul_32s_8s_40_2_1_U54(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(r_V_reg_1480),
    .din1(grp_fu_872_p1),
    .ce(1'b1),
    .dout(grp_fu_872_p2)
);

guitar_effects_mul_32s_8s_40_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 40 ))
mul_32s_8s_40_2_1_U55(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(r_V_2_reg_1485),
    .din1(grp_fu_930_p1),
    .ce(1'b1),
    .dout(grp_fu_930_p2)
);

guitar_effects_srem_32ns_18ns_17_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 17 ))
srem_32ns_18ns_17_36_seq_1_U56(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_1016_ap_start),
    .done(grp_fu_1016_ap_done),
    .din0(grp_fu_1016_p0),
    .din1(grp_fu_1016_p1),
    .ce(1'b1),
    .dout(grp_fu_1016_p2)
);

guitar_effects_srem_32ns_18ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 32 ))
srem_32ns_18ns_32_36_seq_1_U57(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_1028_ap_start),
    .done(grp_fu_1028_ap_done),
    .din0(grp_fu_1028_p0),
    .din1(grp_fu_1028_p1),
    .ce(1'b1),
    .dout(grp_fu_1028_p2)
);

guitar_effects_regslice_both #(
    .DataWidth( 32 ))
regslice_both_INPUT_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TDATA),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_data_V_U_ack_in),
    .data_out(INPUT_r_TDATA_int_regslice),
    .vld_out(INPUT_r_TVALID_int_regslice),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_data_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 4 ))
regslice_both_INPUT_r_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TKEEP),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_keep_V_U_ack_in),
    .data_out(INPUT_r_TKEEP_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_keep_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_keep_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 4 ))
regslice_both_INPUT_r_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TSTRB),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_strb_V_U_ack_in),
    .data_out(INPUT_r_TSTRB_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_strb_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_strb_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 2 ))
regslice_both_INPUT_r_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TUSER),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_user_V_U_ack_in),
    .data_out(INPUT_r_TUSER_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_user_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_user_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 1 ))
regslice_both_INPUT_r_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TLAST),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_last_V_U_ack_in),
    .data_out(INPUT_r_TLAST_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_last_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_last_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 5 ))
regslice_both_INPUT_r_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TID),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_id_V_U_ack_in),
    .data_out(INPUT_r_TID_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_id_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_id_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 6 ))
regslice_both_INPUT_r_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TDEST),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_dest_V_U_ack_in),
    .data_out(INPUT_r_TDEST_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_dest_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_dest_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 32 ))
regslice_both_OUTPUT_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(OUTPUT_r_TDATA_int_regslice),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(OUTPUT_r_TREADY_int_regslice),
    .data_out(OUTPUT_r_TDATA),
    .vld_out(regslice_both_OUTPUT_r_V_data_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_data_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 4 ))
regslice_both_OUTPUT_r_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_keep_V_reg_1427),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_keep_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TKEEP),
    .vld_out(regslice_both_OUTPUT_r_V_keep_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_keep_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 4 ))
regslice_both_OUTPUT_r_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_strb_V_reg_1432),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_strb_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TSTRB),
    .vld_out(regslice_both_OUTPUT_r_V_strb_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_strb_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 2 ))
regslice_both_OUTPUT_r_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_user_V_reg_1437),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_user_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TUSER),
    .vld_out(regslice_both_OUTPUT_r_V_user_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_user_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 1 ))
regslice_both_OUTPUT_r_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(OUTPUT_r_TLAST_int_regslice),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_last_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TLAST),
    .vld_out(regslice_both_OUTPUT_r_V_last_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_last_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 5 ))
regslice_both_OUTPUT_r_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_id_V_reg_1446),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_id_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TID),
    .vld_out(regslice_both_OUTPUT_r_V_id_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_id_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 6 ))
regslice_both_OUTPUT_r_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_dest_V_reg_1451),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_dest_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TDEST),
    .vld_out(regslice_both_OUTPUT_r_V_dest_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_compression_fu_580_ap_start_reg <= 1'b0;
    end else begin
        if (((tmp_12_reg_1380 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
            grp_compression_fu_580_ap_start_reg <= 1'b1;
        end else if ((grp_compression_fu_580_ap_ready == 1'b1)) begin
            grp_compression_fu_580_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_wah_fu_594_ap_start_reg <= 1'b0;
    end else begin
        if (((trunc_ln24_reg_1307 == 1'd1) & (1'b1 == ap_CS_fsm_state74))) begin
            grp_wah_fu_594_ap_start_reg <= 1'b1;
        end else if ((grp_wah_fu_594_ap_ready == 1'b1)) begin
            grp_wah_fu_594_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln84_fu_692_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        compression_buffer_index_1_fu_284 <= 16'd0;
    end else if (((grp_compression_fu_580_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        compression_buffer_index_1_fu_284 <= grp_compression_fu_580_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln84_fu_692_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        current_sample_1_fu_272 <= 32'd0;
    end else if ((~((1'b1 == ap_block_state75_on_subcall_done) | (1'b1 == ap_block_state75_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1442 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1442 == 1'd1))) & (1'b1 == ap_CS_fsm_state75) & (tmp_last_V_reg_1442 == 1'd0))) begin
        current_sample_1_fu_272 <= current_sample_reg_1462;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        debug_output_local_0_fu_292 <= gmem_addr_read_reg_1394;
    end else if (((trunc_ln24_reg_1307 == 1'd1) & (1'b1 == ap_CS_fsm_state74))) begin
        debug_output_local_0_fu_292 <= 32'd251658240;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln84_fu_692_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        delay_buffer_index_fu_280 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        delay_buffer_index_fu_280 <= grp_fu_1028_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3725_fu_631_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_54_fu_264 <= 17'd0;
    end else if (((exitcond3712_fu_661_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        empty_54_fu_264 <= empty_56_fu_667_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln84_fu_692_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        empty_58_fu_276 <= 32'd0;
    end else if ((~((1'b1 == ap_block_state75_on_subcall_done) | (1'b1 == ap_block_state75_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1442 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1442 == 1'd1))) & (1'b1 == ap_CS_fsm_state75) & (tmp_last_V_reg_1442 == 1'd0))) begin
        empty_58_fu_276 <= ap_phi_mux_empty_64_phi_fu_562_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln150_fu_854_p2 == 1'd0) & (icmp_ln148_fu_849_p2 == 1'd0) & (tmp_reg_1376 == 1'd1) & (1'b1 == ap_CS_fsm_state14) & (1'b1 == INPUT_r_TVALID_int_regslice))) begin
        empty_61_reg_487 <= or_ln105_fu_839_p2;
    end else if (((tmp_reg_1376 == 1'd0) & (1'b1 == ap_CS_fsm_state14) & (1'b1 == INPUT_r_TVALID_int_regslice))) begin
        empty_61_reg_487 <= empty_58_fu_276;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state17))) begin
        empty_61_reg_487 <= or_ln105_reg_1467;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_compression_fu_580_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        empty_62_reg_515 <= or_ln110_fu_989_p2;
    end else if (((tmp_12_reg_1380 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        empty_62_reg_515 <= empty_61_reg_487;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_13_reg_1384 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        empty_63_reg_537 <= empty_62_reg_515;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        empty_63_reg_537 <= or_ln115_fu_1171_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln24_reg_1307 == 1'd0) & (1'b1 == ap_CS_fsm_state74))) begin
        empty_64_reg_559 <= empty_63_reg_537;
    end else if ((~((1'b1 == ap_block_state75_on_subcall_done) | (1'b1 == ap_block_state75_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1442 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1442 == 1'd1))) & (trunc_ln24_reg_1307 == 1'd1) & (1'b1 == ap_CS_fsm_state75))) begin
        empty_64_reg_559 <= or_ln120_fu_1210_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_fu_244 <= 9'd0;
    end else if (((exitcond3725_fu_631_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_fu_244 <= empty_53_fu_637_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3712_fu_661_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_fu_268 <= 7'd0;
    end else if (((icmp_ln84_fu_692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_fu_268 <= add_ln84_fu_698_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_13_reg_1384 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        tmp_short_2_reg_548 <= tmp_short_4_reg_526;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        tmp_short_2_reg_548 <= output_fu_1190_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_compression_fu_580_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        tmp_short_4_reg_526 <= grp_compression_fu_580_ap_return_0;
    end else if (((tmp_12_reg_1380 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        tmp_short_4_reg_526 <= tmp_short_reg_501;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln24_reg_1307 == 1'd0) & (1'b1 == ap_CS_fsm_state74))) begin
        tmp_short_9_reg_570 <= tmp_short_2_reg_548;
    end else if ((~((1'b1 == ap_block_state75_on_subcall_done) | (1'b1 == ap_block_state75_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1442 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1442 == 1'd1))) & (trunc_ln24_reg_1307 == 1'd1) & (1'b1 == ap_CS_fsm_state75))) begin
        tmp_short_9_reg_570 <= grp_wah_fu_594_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln150_fu_854_p2 == 1'd0) & (icmp_ln148_fu_849_p2 == 1'd0) & (tmp_reg_1376 == 1'd1) & (1'b1 == ap_CS_fsm_state14) & (1'b1 == INPUT_r_TVALID_int_regslice)) | ((tmp_reg_1376 == 1'd0) & (1'b1 == ap_CS_fsm_state14) & (1'b1 == INPUT_r_TVALID_int_regslice)))) begin
        tmp_short_reg_501 <= tmp_short_8_fu_829_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_short_reg_501 <= result_1_fu_922_p2;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_short_reg_501 <= result_fu_980_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln84_fu_692_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        wah_buffer_index_1_fu_288 <= 16'd0;
    end else if ((~((1'b1 == ap_block_state75_on_subcall_done) | (1'b1 == ap_block_state75_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1442 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1442 == 1'd1))) & (trunc_ln24_reg_1307 == 1'd1) & (1'b1 == ap_CS_fsm_state75))) begin
        wah_buffer_index_1_fu_288 <= grp_wah_fu_594_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        compression_max_threshold_read_reg_1277 <= compression_max_threshold;
        compression_min_threshold_read_reg_1282 <= compression_min_threshold;
        compression_zero_threshold_read_reg_1272 <= compression_zero_threshold;
        control_read_reg_1300 <= control;
        delay_mult_read_reg_1267 <= delay_mult;
        delay_samples_read_reg_1262 <= delay_samples;
        distortion_clip_factor_read_reg_1287 <= distortion_clip_factor;
        distortion_threshold_read_reg_1292 <= distortion_threshold;
        trunc_ln24_reg_1307 <= trunc_ln24_fu_614_p1;
        wah_coeffs_read_reg_1256 <= wah_coeffs;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        conv2_i_reg_1592 <= grp_fu_611_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        conv7_i_i_i_reg_1410 <= conv7_i_i_i_fu_784_p1;
        empty_59_reg_1399 <= empty_59_fu_775_p1;
        negative_threshold_reg_1405 <= negative_threshold_fu_778_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        current_sample_reg_1462 <= current_sample_fu_833_p2;
        tmp_dest_V_reg_1451 <= INPUT_r_TDEST_int_regslice;
        tmp_id_V_reg_1446 <= INPUT_r_TID_int_regslice;
        tmp_keep_V_reg_1427 <= INPUT_r_TKEEP_int_regslice;
        tmp_last_V_reg_1442 <= INPUT_r_TLAST_int_regslice;
        tmp_strb_V_reg_1432 <= INPUT_r_TSTRB_int_regslice;
        tmp_user_V_reg_1437 <= INPUT_r_TUSER_int_regslice;
        trunc_ln77_reg_1422 <= trunc_ln77_fu_797_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        data_V_reg_1602 <= data_V_fu_1051_p1;
        isNeg_reg_1612 <= add_ln346_fu_1072_p2[32'd8];
        p_Result_13_reg_1607 <= p_Result_13_fu_1064_p1;
        ush_reg_1617 <= ush_fu_1096_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        dc_reg_1597 <= grp_fu_607_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_13_reg_1384 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        delay_buffer_index_load_reg_1557 <= delay_buffer_index_fu_280;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        delay_buffer_load_reg_1582 <= delay_buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        gmem_addr_read_reg_1394 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_1376 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        or_ln105_reg_1467[2 : 0] <= or_ln105_fu_839_p2[2 : 0];
or_ln105_reg_1467[31 : 4] <= or_ln105_fu_839_p2[31 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        r_V_10_reg_1495 <= grp_fu_872_p2;
        ret_V_3_cast_reg_1500 <= {{grp_fu_872_p2[22:7]}};
        trunc_ln1049_1_reg_1507 <= trunc_ln1049_1_fu_887_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln148_fu_849_p2 == 1'd1) & (tmp_reg_1376 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        r_V_2_reg_1485 <= r_V_2_fu_864_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        r_V_9_reg_1522 <= grp_fu_930_p2;
        ret_V_cast_reg_1527 <= {{grp_fu_930_p2[22:7]}};
        trunc_ln1049_reg_1534 <= trunc_ln1049_fu_945_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln150_fu_854_p2 == 1'd1) & (icmp_ln148_fu_849_p2 == 1'd0) & (tmp_reg_1376 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        r_V_reg_1480 <= r_V_fu_859_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        result_V_4_reg_1627 <= result_V_4_fu_1165_p2;
        val_reg_1622 <= val_fu_1158_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        srem_ln209_reg_1572 <= grp_fu_1016_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln84_fu_692_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_12_reg_1380 <= control_read_reg_1300[32'd2];
        tmp_13_reg_1384 <= control_read_reg_1300[32'd1];
        tmp_reg_1376 <= control_read_reg_1300[32'd3];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        INPUT_r_TDATA_blk_n = INPUT_r_TVALID_int_regslice;
    end else begin
        INPUT_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'b1 == INPUT_r_TVALID_int_regslice))) begin
        INPUT_r_TREADY_int_regslice = 1'b1;
    end else begin
        INPUT_r_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state77) | ((1'b1 == ap_CS_fsm_state75) & (tmp_last_V_reg_1442 == 1'd0)) | ((1'b1 == ap_CS_fsm_state75) & (tmp_last_V_reg_1442 == 1'd1)))) begin
        OUTPUT_r_TDATA_blk_n = OUTPUT_r_TREADY_int_regslice;
    end else begin
        OUTPUT_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1800)) begin
        if ((tmp_last_V_reg_1442 == 1'd1)) begin
            OUTPUT_r_TLAST_int_regslice = 1'd1;
        end else if ((tmp_last_V_reg_1442 == 1'd0)) begin
            OUTPUT_r_TLAST_int_regslice = 1'd0;
        end else begin
            OUTPUT_r_TLAST_int_regslice = 'bx;
        end
    end else begin
        OUTPUT_r_TLAST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state75_on_subcall_done) | (1'b1 == ap_block_state75_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1442 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1442 == 1'd1))) & (1'b1 == ap_CS_fsm_state75) & (tmp_last_V_reg_1442 == 1'd0)) | (~((1'b1 == ap_block_state75_on_subcall_done) | (1'b1 == ap_block_state75_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1442 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1442 == 1'd1))) & (1'b1 == ap_CS_fsm_state75) & (tmp_last_V_reg_1442 == 1'd1)))) begin
        OUTPUT_r_TVALID_int_regslice = 1'b1;
    end else begin
        OUTPUT_r_TVALID_int_regslice = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((1'b0 == INPUT_r_TVALID_int_regslice)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

assign ap_ST_fsm_state1_blk = 1'b0;

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

always @ (*) begin
    if ((grp_compression_fu_580_ap_done == 1'b0)) begin
        ap_ST_fsm_state22_blk = 1'b1;
    end else begin
        ap_ST_fsm_state22_blk = 1'b0;
    end
end

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_block_state75_on_subcall_done) | (1'b1 == ap_block_state75_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1442 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1442 == 1'd1)))) begin
        ap_ST_fsm_state75_blk = 1'b1;
    end else begin
        ap_ST_fsm_state75_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == OUTPUT_r_TREADY_int_regslice)) begin
        ap_ST_fsm_state76_blk = 1'b1;
    end else begin
        ap_ST_fsm_state76_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == OUTPUT_r_TREADY_int_regslice) | (regslice_both_OUTPUT_r_V_data_V_U_apdone_blk == 1'b1))) begin
        ap_ST_fsm_state77_blk = 1'b1;
    end else begin
        ap_ST_fsm_state77_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((trunc_ln24_reg_1307 == 1'd1) & (1'b1 == ap_CS_fsm_state75))) begin
        ap_phi_mux_empty_64_phi_fu_562_p4 = or_ln120_fu_1210_p2;
    end else begin
        ap_phi_mux_empty_64_phi_fu_562_p4 = empty_64_reg_559;
    end
end

always @ (*) begin
    if (((trunc_ln24_reg_1307 == 1'd1) & (1'b1 == ap_CS_fsm_state75))) begin
        ap_phi_mux_tmp_short_9_phi_fu_573_p4 = grp_wah_fu_594_ap_return_0;
    end else begin
        ap_phi_mux_tmp_short_9_phi_fu_573_p4 = tmp_short_9_reg_570;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state75_on_subcall_done) | (1'b1 == ap_block_state75_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1442 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1442 == 1'd1))) & (1'b1 == ap_CS_fsm_state75) & (tmp_last_V_reg_1442 == 1'd1))) begin
        axilite_out_ap_vld = 1'b1;
    end else begin
        axilite_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        compression_buffer_address0 = p_cast_fu_626_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        compression_buffer_address0 = grp_compression_fu_580_values_buffer_address0;
    end else begin
        compression_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        compression_buffer_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        compression_buffer_ce0 = grp_compression_fu_580_values_buffer_ce0;
    end else begin
        compression_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        compression_buffer_d0 = 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        compression_buffer_d0 = grp_compression_fu_580_values_buffer_d0;
    end else begin
        compression_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond3725_fu_631_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        compression_buffer_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        compression_buffer_we0 = grp_compression_fu_580_values_buffer_we0;
    end else begin
        compression_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        control_signals_buffer_address0 = zext_ln84_fu_686_p1;
    end else if (((trunc_ln24_reg_1307 == 1'd1) & (1'b1 == ap_CS_fsm_state75))) begin
        control_signals_buffer_address0 = grp_wah_fu_594_control_signal_buffer_address0;
    end else begin
        control_signals_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        control_signals_buffer_ce0 = 1'b1;
    end else if (((trunc_ln24_reg_1307 == 1'd1) & (1'b1 == ap_CS_fsm_state75))) begin
        control_signals_buffer_ce0 = grp_wah_fu_594_control_signal_buffer_ce0;
    end else begin
        control_signals_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        control_signals_buffer_d0 = 5'd0;
    end else if (((trunc_ln24_reg_1307 == 1'd1) & (1'b1 == ap_CS_fsm_state75))) begin
        control_signals_buffer_d0 = grp_wah_fu_594_control_signal_buffer_d0;
    end else begin
        control_signals_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln84_fu_692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        control_signals_buffer_we0 = 1'b1;
    end else if (((trunc_ln24_reg_1307 == 1'd1) & (1'b1 == ap_CS_fsm_state75))) begin
        control_signals_buffer_we0 = grp_wah_fu_594_control_signal_buffer_we0;
    end else begin
        control_signals_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state75_on_subcall_done) | (1'b1 == ap_block_state75_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1442 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1442 == 1'd1))) & (1'b1 == ap_CS_fsm_state75) & (tmp_last_V_reg_1442 == 1'd1))) begin
        debug_output_ap_vld = 1'b1;
    end else begin
        debug_output_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        delay_buffer_address0 = zext_ln212_fu_1197_p1;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        delay_buffer_address0 = zext_ln209_fu_1042_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        delay_buffer_address0 = p_cast4_fu_656_p1;
    end else begin
        delay_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state59))) begin
        delay_buffer_ce0 = 1'b1;
    end else begin
        delay_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        delay_buffer_d0 = output_fu_1190_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        delay_buffer_d0 = 16'd0;
    end else begin
        delay_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) | ((exitcond3712_fu_661_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        delay_buffer_we0 = 1'b1;
    end else begin
        delay_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        gmem_ARADDR = sext_ln94_fu_764_p1;
    end else if ((((trunc_ln24_reg_1307 == 1'd1) & (1'b1 == ap_CS_fsm_state74)) | ((trunc_ln24_reg_1307 == 1'd1) & (1'b1 == ap_CS_fsm_state75)))) begin
        gmem_ARADDR = grp_wah_fu_594_m_axi_gmem_ARADDR;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        gmem_ARLEN = 32'd1;
    end else if ((((trunc_ln24_reg_1307 == 1'd1) & (1'b1 == ap_CS_fsm_state74)) | ((trunc_ln24_reg_1307 == 1'd1) & (1'b1 == ap_CS_fsm_state75)))) begin
        gmem_ARLEN = grp_wah_fu_594_m_axi_gmem_ARLEN;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        gmem_ARVALID = 1'b1;
    end else if ((((trunc_ln24_reg_1307 == 1'd1) & (1'b1 == ap_CS_fsm_state74)) | ((trunc_ln24_reg_1307 == 1'd1) & (1'b1 == ap_CS_fsm_state75)))) begin
        gmem_ARVALID = grp_wah_fu_594_m_axi_gmem_ARVALID;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        gmem_RREADY = 1'b1;
    end else if ((((trunc_ln24_reg_1307 == 1'd1) & (1'b1 == ap_CS_fsm_state74)) | ((trunc_ln24_reg_1307 == 1'd1) & (1'b1 == ap_CS_fsm_state75)))) begin
        gmem_RREADY = grp_wah_fu_594_m_axi_gmem_RREADY;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_13_reg_1384 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        grp_fu_1016_ap_start = 1'b1;
    end else begin
        grp_fu_1016_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_13_reg_1384 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        grp_fu_1028_ap_start = 1'b1;
    end else begin
        grp_fu_1028_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        grp_fu_607_ce = grp_wah_fu_594_grp_fu_607_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_607_ce = grp_compression_fu_580_grp_fu_607_p_ce;
    end else begin
        grp_fu_607_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        grp_fu_607_p0 = grp_wah_fu_594_grp_fu_607_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_607_p0 = grp_compression_fu_580_grp_fu_607_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        grp_fu_607_p0 = conv2_i_reg_1592;
    end else begin
        grp_fu_607_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        grp_fu_607_p1 = grp_wah_fu_594_grp_fu_607_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_607_p1 = grp_compression_fu_580_grp_fu_607_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        grp_fu_607_p1 = delay_mult_read_reg_1267;
    end else begin
        grp_fu_607_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        grp_fu_611_ce = grp_wah_fu_594_grp_fu_611_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_611_ce = grp_compression_fu_580_grp_fu_611_p_ce;
    end else begin
        grp_fu_611_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        grp_fu_611_p0 = grp_wah_fu_594_grp_fu_611_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_611_p0 = grp_compression_fu_580_grp_fu_611_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        grp_fu_611_p0 = sext_ln209_fu_1047_p1;
    end else begin
        grp_fu_611_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        wah_values_buffer_address0 = zext_ln84_fu_686_p1;
    end else if (((trunc_ln24_reg_1307 == 1'd1) & (1'b1 == ap_CS_fsm_state75))) begin
        wah_values_buffer_address0 = grp_wah_fu_594_wah_values_buffer_address0;
    end else begin
        wah_values_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        wah_values_buffer_ce0 = 1'b1;
    end else if (((trunc_ln24_reg_1307 == 1'd1) & (1'b1 == ap_CS_fsm_state75))) begin
        wah_values_buffer_ce0 = grp_wah_fu_594_wah_values_buffer_ce0;
    end else begin
        wah_values_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        wah_values_buffer_d0 = 16'd0;
    end else if (((trunc_ln24_reg_1307 == 1'd1) & (1'b1 == ap_CS_fsm_state75))) begin
        wah_values_buffer_d0 = grp_wah_fu_594_wah_values_buffer_d0;
    end else begin
        wah_values_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln84_fu_692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        wah_values_buffer_we0 = 1'b1;
    end else if (((trunc_ln24_reg_1307 == 1'd1) & (1'b1 == ap_CS_fsm_state75))) begin
        wah_values_buffer_we0 = grp_wah_fu_594_wah_values_buffer_we0;
    end else begin
        wah_values_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond3725_fu_631_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond3712_fu_661_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln84_fu_692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((icmp_ln150_fu_854_p2 == 1'd1) & (icmp_ln148_fu_849_p2 == 1'd0) & (tmp_reg_1376 == 1'd1) & (1'b1 == ap_CS_fsm_state14) & (1'b1 == INPUT_r_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else if (((icmp_ln148_fu_849_p2 == 1'd1) & (tmp_reg_1376 == 1'd1) & (1'b1 == ap_CS_fsm_state14) & (1'b1 == INPUT_r_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else if (((1'b1 == ap_CS_fsm_state14) & (1'b1 == INPUT_r_TVALID_int_regslice) & ((tmp_reg_1376 == 1'd0) | ((icmp_ln150_fu_854_p2 == 1'd0) & (icmp_ln148_fu_849_p2 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((tmp_12_reg_1380 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((grp_compression_fu_580_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((tmp_13_reg_1384 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            if ((~((1'b1 == ap_block_state75_on_subcall_done) | (1'b1 == ap_block_state75_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1442 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1442 == 1'd1))) & (1'b1 == ap_CS_fsm_state75) & (tmp_last_V_reg_1442 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else if ((~((1'b1 == ap_block_state75_on_subcall_done) | (1'b1 == ap_block_state75_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1442 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1442 == 1'd1))) & (1'b1 == ap_CS_fsm_state75) & (tmp_last_V_reg_1442 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state76 : begin
            if (((1'b1 == ap_CS_fsm_state76) & (1'b1 == OUTPUT_r_TREADY_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state77 : begin
            if ((~((1'b0 == OUTPUT_r_TREADY_int_regslice) | (regslice_both_OUTPUT_r_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign INPUT_r_TREADY = regslice_both_INPUT_r_V_data_V_U_ack_in;

assign OUTPUT_r_TDATA_int_regslice = $signed(ap_phi_mux_tmp_short_9_phi_fu_573_p4);

assign OUTPUT_r_TVALID = regslice_both_OUTPUT_r_V_data_V_U_vld_out;

assign add_ln346_fu_1072_p2 = ($signed(zext_ln346_fu_1068_p1) + $signed(9'd385));

assign add_ln84_fu_698_p2 = (i_fu_268 + 7'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

always @ (*) begin
    ap_block_state75 = (((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1442 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1442 == 1'd1)));
end

always @ (*) begin
    ap_block_state75_io = (((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1442 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1442 == 1'd1)));
end

always @ (*) begin
    ap_block_state75_on_subcall_done = ((grp_wah_fu_594_ap_done == 1'b0) & (trunc_ln24_reg_1307 == 1'd1));
end

always @ (*) begin
    ap_block_state77 = ((1'b0 == OUTPUT_r_TREADY_int_regslice) | (regslice_both_OUTPUT_r_V_data_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_condition_1800 = (~((1'b1 == ap_block_state75_on_subcall_done) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1442 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1442 == 1'd1))) & (1'b1 == ap_CS_fsm_state75));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign conv7_i_i_i_fu_784_p1 = $signed(distortion_clip_factor_read_reg_1287);

assign current_sample_fu_833_p2 = (current_sample_1_fu_272 + 32'd1);

assign data_V_fu_1051_p1 = dc_reg_1597;

assign empty_53_fu_637_p2 = (empty_fu_244 + 9'd1);

assign empty_56_fu_667_p2 = (empty_54_fu_264 + 17'd1);

assign empty_59_fu_775_p1 = distortion_threshold_read_reg_1292[15:0];

assign exitcond3712_fu_661_p2 = ((empty_54_fu_264 == 17'd88200) ? 1'b1 : 1'b0);

assign exitcond3725_fu_631_p2 = ((empty_fu_244 == 9'd441) ? 1'b1 : 1'b0);

assign grp_compression_fu_580_ap_start = grp_compression_fu_580_ap_start_reg;

assign grp_fu_1016_p0 = (delay_buffer_index_fu_280 - delay_samples_read_reg_1262);

assign grp_fu_1016_p1 = 32'd88200;

assign grp_fu_1028_p0 = (delay_buffer_index_fu_280 + 32'd1);

assign grp_fu_1028_p1 = 32'd88200;

assign grp_fu_872_p1 = conv7_i_i_i_reg_1410;

assign grp_fu_930_p1 = conv7_i_i_i_reg_1410;

assign grp_wah_fu_594_ap_start = grp_wah_fu_594_ap_start_reg;

assign icmp_ln1049_1_fu_898_p2 = ((trunc_ln1049_1_reg_1507 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln1049_fu_956_p2 = ((trunc_ln1049_reg_1534 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln148_fu_849_p2 = (($signed(sext_ln148_fu_845_p1) > $signed(distortion_threshold_read_reg_1292)) ? 1'b1 : 1'b0);

assign icmp_ln150_fu_854_p2 = (($signed(tmp_short_8_fu_829_p1) < $signed(negative_threshold_reg_1405)) ? 1'b1 : 1'b0);

assign icmp_ln84_fu_692_p2 = ((i_fu_268 == 7'd100) ? 1'b1 : 1'b0);

assign isNeg_fu_1078_p3 = add_ln346_fu_1072_p2[32'd8];

assign mantissa_fu_1104_p4 = {{{{1'd1}, {p_Result_13_reg_1607}}}, {1'd0}};

assign negative_threshold_fu_778_p2 = (16'd0 - empty_59_fu_775_p1);

assign or_ln105_fu_839_p2 = (empty_58_fu_276 | 32'd8);

assign or_ln110_fu_989_p2 = (empty_61_reg_487 | 32'd4);

assign or_ln115_fu_1171_p2 = (empty_62_reg_515 | 32'd2);

assign or_ln120_fu_1210_p2 = (empty_63_reg_537 | 32'd1);

assign output_fu_1190_p2 = (result_V_fu_1184_p3 + tmp_short_4_reg_526);

assign p_Result_12_fu_1177_p3 = data_V_reg_1602[32'd31];

assign p_Result_13_fu_1064_p1 = data_V_fu_1051_p1[22:0];

assign p_Result_8_fu_891_p3 = r_V_10_reg_1495[32'd39];

assign p_Result_s_fu_949_p3 = r_V_9_reg_1522[32'd39];

assign p_cast4_fu_656_p1 = empty_54_fu_264;

assign p_cast_fu_626_p1 = empty_fu_244;

assign r_V_2_fu_864_p2 = ($signed(sext_ln148_fu_845_p1) - $signed(distortion_threshold_read_reg_1292));

assign r_V_7_fu_1124_p2 = zext_ln15_fu_1113_p1 >> zext_ln1488_fu_1120_p1;

assign r_V_8_fu_1130_p2 = zext_ln15_fu_1113_p1 << zext_ln1488_fu_1120_p1;

assign r_V_fu_859_p2 = ($signed(sext_ln148_fu_845_p1) + $signed(distortion_threshold_read_reg_1292));

assign result_1_fu_922_p2 = (ret_V_3_fu_915_p3 - empty_59_reg_1399);

assign result_V_4_fu_1165_p2 = (16'd0 - val_fu_1158_p3);

assign result_V_fu_1184_p3 = ((p_Result_12_fu_1177_p3[0:0] == 1'b1) ? result_V_4_reg_1627 : val_reg_1622);

assign result_fu_980_p2 = (ret_V_1_fu_973_p3 + empty_59_reg_1399);

assign ret_V_1_fu_973_p3 = ((p_Result_s_fu_949_p3[0:0] == 1'b1) ? select_ln1048_fu_966_p3 : ret_V_cast_reg_1527);

assign ret_V_2_fu_903_p2 = (ret_V_3_cast_reg_1500 + 16'd1);

assign ret_V_3_fu_915_p3 = ((p_Result_8_fu_891_p3[0:0] == 1'b1) ? select_ln1048_1_fu_908_p3 : ret_V_3_cast_reg_1500);

assign ret_V_fu_961_p2 = (ret_V_cast_reg_1527 + 16'd1);

assign select_ln1048_1_fu_908_p3 = ((icmp_ln1049_1_fu_898_p2[0:0] == 1'b1) ? ret_V_3_cast_reg_1500 : ret_V_2_fu_903_p2);

assign select_ln1048_fu_966_p3 = ((icmp_ln1049_fu_956_p2[0:0] == 1'b1) ? ret_V_cast_reg_1527 : ret_V_fu_961_p2);

assign sext_ln1488_fu_1117_p1 = $signed(ush_reg_1617);

assign sext_ln148_fu_845_p1 = tmp_short_8_fu_829_p1;

assign sext_ln1512_fu_1092_p1 = $signed(sub_ln1512_fu_1086_p2);

assign sext_ln209_fu_1047_p1 = delay_buffer_load_reg_1582;

assign sext_ln94_fu_764_p1 = $signed(trunc_ln4_fu_755_p4);

assign sub_ln1512_fu_1086_p2 = (8'd127 - xs_exp_V_fu_1054_p4);

assign tmp_19_fu_1136_p3 = r_V_7_fu_1124_p2[32'd24];

assign tmp_s_fu_1148_p4 = {{r_V_8_fu_1130_p2[39:24]}};

assign tmp_short_8_fu_829_p1 = INPUT_r_TDATA_int_regslice[15:0];

assign trunc_ln1049_1_fu_887_p1 = grp_fu_872_p2[6:0];

assign trunc_ln1049_fu_945_p1 = grp_fu_930_p2[6:0];

assign trunc_ln209_fu_1039_p1 = srem_ln209_reg_1572[16:0];

assign trunc_ln24_fu_614_p1 = control[0:0];

assign trunc_ln4_fu_755_p4 = {{wah_coeffs_read_reg_1256[63:2]}};

assign trunc_ln77_fu_797_p1 = current_sample_1_fu_272[30:0];

assign ush_fu_1096_p3 = ((isNeg_fu_1078_p3[0:0] == 1'b1) ? sext_ln1512_fu_1092_p1 : add_ln346_fu_1072_p2);

assign val_fu_1158_p3 = ((isNeg_reg_1612[0:0] == 1'b1) ? zext_ln818_fu_1144_p1 : tmp_s_fu_1148_p4);

assign xs_exp_V_fu_1054_p4 = {{data_V_fu_1051_p1[30:23]}};

assign zext_ln1488_fu_1120_p1 = $unsigned(sext_ln1488_fu_1117_p1);

assign zext_ln15_fu_1113_p1 = mantissa_fu_1104_p4;

assign zext_ln209_fu_1042_p1 = trunc_ln209_fu_1039_p1;

assign zext_ln212_fu_1197_p1 = delay_buffer_index_load_reg_1557;

assign zext_ln346_fu_1068_p1 = xs_exp_V_fu_1054_p4;

assign zext_ln818_fu_1144_p1 = tmp_19_fu_1136_p3;

assign zext_ln84_fu_686_p1 = i_fu_268;

always @ (posedge ap_clk) begin
    or_ln105_reg_1467[3] <= 1'b1;
end


reg find_kernel_block = 0;
// synthesis translate_off
`include "guitar_effects_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //guitar_effects

