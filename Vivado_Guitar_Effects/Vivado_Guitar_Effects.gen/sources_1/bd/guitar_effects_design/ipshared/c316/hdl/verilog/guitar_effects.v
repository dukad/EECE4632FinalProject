// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="guitar_effects_guitar_effects,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.912000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=129,HLS_SYN_DSP=0,HLS_SYN_FF=4337,HLS_SYN_LUT=4242,HLS_VERSION=2022_1}" *)

module guitar_effects (
        ap_clk,
        ap_rst_n,
        INPUT_r_TDATA,
        INPUT_r_TVALID,
        INPUT_r_TREADY,
        INPUT_r_TKEEP,
        INPUT_r_TSTRB,
        INPUT_r_TUSER,
        INPUT_r_TLAST,
        INPUT_r_TID,
        INPUT_r_TDEST,
        OUTPUT_r_TDATA,
        OUTPUT_r_TVALID,
        OUTPUT_r_TREADY,
        OUTPUT_r_TKEEP,
        OUTPUT_r_TSTRB,
        OUTPUT_r_TUSER,
        OUTPUT_r_TLAST,
        OUTPUT_r_TID,
        OUTPUT_r_TDEST,
        s_axi_control_r_AWVALID,
        s_axi_control_r_AWREADY,
        s_axi_control_r_AWADDR,
        s_axi_control_r_WVALID,
        s_axi_control_r_WREADY,
        s_axi_control_r_WDATA,
        s_axi_control_r_WSTRB,
        s_axi_control_r_ARVALID,
        s_axi_control_r_ARREADY,
        s_axi_control_r_ARADDR,
        s_axi_control_r_RVALID,
        s_axi_control_r_RREADY,
        s_axi_control_r_RDATA,
        s_axi_control_r_RRESP,
        s_axi_control_r_BVALID,
        s_axi_control_r_BREADY,
        s_axi_control_r_BRESP
);

parameter    ap_ST_fsm_state1 = 98'd1;
parameter    ap_ST_fsm_state2 = 98'd2;
parameter    ap_ST_fsm_state3 = 98'd4;
parameter    ap_ST_fsm_state4 = 98'd8;
parameter    ap_ST_fsm_state5 = 98'd16;
parameter    ap_ST_fsm_state6 = 98'd32;
parameter    ap_ST_fsm_state7 = 98'd64;
parameter    ap_ST_fsm_state8 = 98'd128;
parameter    ap_ST_fsm_state9 = 98'd256;
parameter    ap_ST_fsm_state10 = 98'd512;
parameter    ap_ST_fsm_state11 = 98'd1024;
parameter    ap_ST_fsm_state12 = 98'd2048;
parameter    ap_ST_fsm_state13 = 98'd4096;
parameter    ap_ST_fsm_state14 = 98'd8192;
parameter    ap_ST_fsm_state15 = 98'd16384;
parameter    ap_ST_fsm_state16 = 98'd32768;
parameter    ap_ST_fsm_state17 = 98'd65536;
parameter    ap_ST_fsm_state18 = 98'd131072;
parameter    ap_ST_fsm_state19 = 98'd262144;
parameter    ap_ST_fsm_state20 = 98'd524288;
parameter    ap_ST_fsm_state21 = 98'd1048576;
parameter    ap_ST_fsm_state22 = 98'd2097152;
parameter    ap_ST_fsm_state23 = 98'd4194304;
parameter    ap_ST_fsm_state24 = 98'd8388608;
parameter    ap_ST_fsm_state25 = 98'd16777216;
parameter    ap_ST_fsm_state26 = 98'd33554432;
parameter    ap_ST_fsm_state27 = 98'd67108864;
parameter    ap_ST_fsm_state28 = 98'd134217728;
parameter    ap_ST_fsm_state29 = 98'd268435456;
parameter    ap_ST_fsm_state30 = 98'd536870912;
parameter    ap_ST_fsm_state31 = 98'd1073741824;
parameter    ap_ST_fsm_state32 = 98'd2147483648;
parameter    ap_ST_fsm_state33 = 98'd4294967296;
parameter    ap_ST_fsm_state34 = 98'd8589934592;
parameter    ap_ST_fsm_state35 = 98'd17179869184;
parameter    ap_ST_fsm_state36 = 98'd34359738368;
parameter    ap_ST_fsm_state37 = 98'd68719476736;
parameter    ap_ST_fsm_state38 = 98'd137438953472;
parameter    ap_ST_fsm_state39 = 98'd274877906944;
parameter    ap_ST_fsm_state40 = 98'd549755813888;
parameter    ap_ST_fsm_state41 = 98'd1099511627776;
parameter    ap_ST_fsm_state42 = 98'd2199023255552;
parameter    ap_ST_fsm_state43 = 98'd4398046511104;
parameter    ap_ST_fsm_state44 = 98'd8796093022208;
parameter    ap_ST_fsm_state45 = 98'd17592186044416;
parameter    ap_ST_fsm_state46 = 98'd35184372088832;
parameter    ap_ST_fsm_state47 = 98'd70368744177664;
parameter    ap_ST_fsm_state48 = 98'd140737488355328;
parameter    ap_ST_fsm_state49 = 98'd281474976710656;
parameter    ap_ST_fsm_state50 = 98'd562949953421312;
parameter    ap_ST_fsm_state51 = 98'd1125899906842624;
parameter    ap_ST_fsm_state52 = 98'd2251799813685248;
parameter    ap_ST_fsm_state53 = 98'd4503599627370496;
parameter    ap_ST_fsm_state54 = 98'd9007199254740992;
parameter    ap_ST_fsm_state55 = 98'd18014398509481984;
parameter    ap_ST_fsm_state56 = 98'd36028797018963968;
parameter    ap_ST_fsm_state57 = 98'd72057594037927936;
parameter    ap_ST_fsm_state58 = 98'd144115188075855872;
parameter    ap_ST_fsm_state59 = 98'd288230376151711744;
parameter    ap_ST_fsm_state60 = 98'd576460752303423488;
parameter    ap_ST_fsm_state61 = 98'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 98'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 98'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 98'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 98'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 98'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 98'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 98'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 98'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 98'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 98'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 98'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 98'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 98'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 98'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 98'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 98'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 98'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 98'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 98'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 98'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 98'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 98'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 98'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 98'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 98'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 98'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 98'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 98'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 98'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 98'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 98'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 98'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 98'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 98'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 98'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 98'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 98'd158456325028528675187087900672;
parameter    C_S_AXI_CONTROL_R_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_R_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_R_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] INPUT_r_TDATA;
input   INPUT_r_TVALID;
output   INPUT_r_TREADY;
input  [3:0] INPUT_r_TKEEP;
input  [3:0] INPUT_r_TSTRB;
input  [1:0] INPUT_r_TUSER;
input  [0:0] INPUT_r_TLAST;
input  [4:0] INPUT_r_TID;
input  [5:0] INPUT_r_TDEST;
output  [31:0] OUTPUT_r_TDATA;
output   OUTPUT_r_TVALID;
input   OUTPUT_r_TREADY;
output  [3:0] OUTPUT_r_TKEEP;
output  [3:0] OUTPUT_r_TSTRB;
output  [1:0] OUTPUT_r_TUSER;
output  [0:0] OUTPUT_r_TLAST;
output  [4:0] OUTPUT_r_TID;
output  [5:0] OUTPUT_r_TDEST;
input   s_axi_control_r_AWVALID;
output   s_axi_control_r_AWREADY;
input  [C_S_AXI_CONTROL_R_ADDR_WIDTH - 1:0] s_axi_control_r_AWADDR;
input   s_axi_control_r_WVALID;
output   s_axi_control_r_WREADY;
input  [C_S_AXI_CONTROL_R_DATA_WIDTH - 1:0] s_axi_control_r_WDATA;
input  [C_S_AXI_CONTROL_R_WSTRB_WIDTH - 1:0] s_axi_control_r_WSTRB;
input   s_axi_control_r_ARVALID;
output   s_axi_control_r_ARREADY;
input  [C_S_AXI_CONTROL_R_ADDR_WIDTH - 1:0] s_axi_control_r_ARADDR;
output   s_axi_control_r_RVALID;
input   s_axi_control_r_RREADY;
output  [C_S_AXI_CONTROL_R_DATA_WIDTH - 1:0] s_axi_control_r_RDATA;
output  [1:0] s_axi_control_r_RRESP;
output   s_axi_control_r_BVALID;
input   s_axi_control_r_BREADY;
output  [1:0] s_axi_control_r_BRESP;

 reg    ap_rst_n_inv;
wire   [31:0] axilite_out;
reg    axilite_out_ap_vld;
wire   [7:0] control;
wire   [31:0] distortion_threshold;
wire   [9:0] distortion_clip_factor;
wire   [31:0] compression_min_threshold;
wire   [31:0] compression_max_threshold;
wire   [31:0] compression_zero_threshold;
wire   [9:0] delay_mult;
wire   [31:0] delay_samples;
reg    INPUT_r_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [97:0] ap_CS_fsm;
wire    ap_CS_fsm_state3;
reg    OUTPUT_r_TDATA_blk_n;
wire    ap_CS_fsm_state96;
reg   [0:0] tmp_last_V_reg_1197;
wire    ap_CS_fsm_state98;
wire    ap_CS_fsm_state97;
reg   [31:0] delay_samples_read_reg_1093;
wire    ap_CS_fsm_state2;
reg   [31:0] compression_zero_threshold_read_reg_1098;
reg   [31:0] compression_max_threshold_read_reg_1103;
reg   [31:0] compression_min_threshold_read_reg_1108;
reg   [31:0] distortion_threshold_read_reg_1113;
wire   [0:0] trunc_ln19_fu_423_p1;
reg   [0:0] trunc_ln19_reg_1122;
wire   [0:0] tmp_fu_427_p3;
reg   [0:0] tmp_reg_1127;
wire   [0:0] rev_fu_435_p2;
reg   [0:0] rev_reg_1133;
reg   [0:0] tmp_1_reg_1138;
reg   [0:0] tmp_2_reg_1147;
wire   [31:0] negative_threshold_fu_457_p2;
reg   [31:0] negative_threshold_reg_1151;
wire  signed [41:0] conv7_i_i_i_fu_463_p1;
reg  signed [41:0] conv7_i_i_i_reg_1156;
wire  signed [41:0] conv7_i_i_i310_fu_467_p1;
reg  signed [41:0] conv7_i_i_i310_reg_1162;
wire  signed [31:0] conv_i_i190_i_fu_483_p1;
reg  signed [31:0] conv_i_i190_i_reg_1167;
wire  signed [31:0] conv_i_i64_i_fu_499_p1;
reg  signed [31:0] conv_i_i64_i_reg_1172;
reg   [31:0] tmp_data_V_1_reg_1177;
reg   [3:0] tmp_keep_V_reg_1182;
reg   [3:0] tmp_strb_V_reg_1187;
reg   [1:0] tmp_user_V_reg_1192;
reg   [4:0] tmp_id_V_reg_1201;
reg   [5:0] tmp_dest_V_reg_1206;
wire   [0:0] icmp_ln116_fu_531_p2;
reg   [0:0] icmp_ln116_reg_1211;
wire   [31:0] r_V_3_fu_536_p2;
reg  signed [31:0] r_V_3_reg_1216;
wire   [31:0] r_V_fu_541_p2;
reg  signed [31:0] r_V_reg_1221;
wire   [0:0] or_ln118_fu_569_p2;
reg   [0:0] or_ln118_reg_1226;
wire    ap_CS_fsm_state4;
wire   [41:0] grp_fu_577_p2;
reg   [41:0] r_V_12_reg_1241;
wire    ap_CS_fsm_state5;
reg   [31:0] ret_V_cast_reg_1246;
wire   [7:0] trunc_ln1049_fu_600_p1;
reg   [7:0] trunc_ln1049_reg_1253;
wire   [41:0] grp_fu_585_p2;
reg   [41:0] r_V_13_reg_1258;
reg   [31:0] ret_V_3_cast_reg_1263;
wire   [7:0] trunc_ln1049_1_fu_614_p1;
reg   [7:0] trunc_ln1049_1_reg_1270;
wire  signed [31:0] result_4_fu_702_p3;
reg  signed [31:0] result_4_reg_1275;
wire    ap_CS_fsm_state6;
wire   [31:0] empty_36_fu_717_p3;
reg   [31:0] empty_36_reg_1287;
wire    ap_CS_fsm_state7;
wire   [31:0] or_ln78_fu_751_p2;
reg   [31:0] or_ln78_reg_1299;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln149_fu_756_p2;
reg   [0:0] icmp_ln149_reg_1307;
wire   [0:0] icmp_ln160_fu_761_p2;
reg   [0:0] icmp_ln160_reg_1311;
wire   [0:0] and_ln159_1_fu_783_p2;
reg   [0:0] and_ln159_1_reg_1315;
wire   [31:0] grp_fu_794_p2;
reg  signed [31:0] compression_factor_V_1_reg_1319;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire   [47:0] grp_fu_825_p2;
reg   [47:0] r_V_15_reg_1334;
wire    ap_CS_fsm_state32;
reg   [31:0] ret_V_10_cast_reg_1339;
wire   [3:0] trunc_ln1049_3_fu_841_p1;
reg   [3:0] trunc_ln1049_3_reg_1346;
reg   [31:0] delay_buffer_index_load_reg_1351;
wire    ap_CS_fsm_state33;
wire   [31:0] grp_fu_809_p2;
reg  signed [31:0] compression_factor_V_reg_1366;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
wire   [47:0] grp_fu_941_p2;
reg   [47:0] r_V_14_reg_1381;
wire    ap_CS_fsm_state55;
reg   [31:0] ret_V_9_cast_reg_1386;
wire   [3:0] trunc_ln1049_2_fu_957_p1;
reg   [3:0] trunc_ln1049_2_reg_1393;
wire   [15:0] grp_fu_917_p2;
reg   [15:0] srem_ln180_reg_1398;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state91;
wire   [31:0] delay_buffer_q0;
reg  signed [31:0] r_V_10_reg_1408;
wire    ap_CS_fsm_state92;
wire    ap_CS_fsm_state93;
wire   [41:0] grp_fu_977_p2;
reg   [41:0] r_V_16_reg_1418;
wire    ap_CS_fsm_state94;
reg   [31:0] ret_V_15_cast_reg_1423;
wire   [7:0] trunc_ln1049_4_fu_992_p1;
reg   [7:0] trunc_ln1049_4_reg_1430;
wire   [31:0] output_fu_1027_p2;
reg   [31:0] output_reg_1435;
wire    ap_CS_fsm_state95;
reg   [7:0] compression_buffer_address0;
reg    compression_buffer_ce0;
reg    compression_buffer_we0;
reg   [31:0] compression_buffer_d0;
wire   [31:0] compression_buffer_q0;
reg   [7:0] lpf_coefficients_V_address0;
reg    lpf_coefficients_V_ce0;
reg    lpf_coefficients_V_we0;
wire   [0:0] lpf_coefficients_V_q0;
reg   [15:0] delay_buffer_address0;
reg    delay_buffer_ce0;
reg    delay_buffer_we0;
reg   [31:0] delay_buffer_d0;
wire    grp_guitar_effects_Pipeline_1_fu_388_ap_start;
wire    grp_guitar_effects_Pipeline_1_fu_388_ap_done;
wire    grp_guitar_effects_Pipeline_1_fu_388_ap_idle;
wire    grp_guitar_effects_Pipeline_1_fu_388_ap_ready;
wire   [7:0] grp_guitar_effects_Pipeline_1_fu_388_compression_buffer_address0;
wire    grp_guitar_effects_Pipeline_1_fu_388_compression_buffer_ce0;
wire    grp_guitar_effects_Pipeline_1_fu_388_compression_buffer_we0;
wire   [31:0] grp_guitar_effects_Pipeline_1_fu_388_compression_buffer_d0;
wire    grp_guitar_effects_Pipeline_2_fu_394_ap_start;
wire    grp_guitar_effects_Pipeline_2_fu_394_ap_done;
wire    grp_guitar_effects_Pipeline_2_fu_394_ap_idle;
wire    grp_guitar_effects_Pipeline_2_fu_394_ap_ready;
wire   [15:0] grp_guitar_effects_Pipeline_2_fu_394_delay_buffer_address0;
wire    grp_guitar_effects_Pipeline_2_fu_394_delay_buffer_ce0;
wire    grp_guitar_effects_Pipeline_2_fu_394_delay_buffer_we0;
wire   [31:0] grp_guitar_effects_Pipeline_2_fu_394_delay_buffer_d0;
wire    grp_guitar_effects_Pipeline_LPF_Loop_fu_400_ap_start;
wire    grp_guitar_effects_Pipeline_LPF_Loop_fu_400_ap_done;
wire    grp_guitar_effects_Pipeline_LPF_Loop_fu_400_ap_idle;
wire    grp_guitar_effects_Pipeline_LPF_Loop_fu_400_ap_ready;
wire   [7:0] grp_guitar_effects_Pipeline_LPF_Loop_fu_400_compression_buffer_address0;
wire    grp_guitar_effects_Pipeline_LPF_Loop_fu_400_compression_buffer_ce0;
wire   [7:0] grp_guitar_effects_Pipeline_LPF_Loop_fu_400_lpf_coefficients_V_address0;
wire    grp_guitar_effects_Pipeline_LPF_Loop_fu_400_lpf_coefficients_V_ce0;
wire   [31:0] grp_guitar_effects_Pipeline_LPF_Loop_fu_400_p_out;
wire    grp_guitar_effects_Pipeline_LPF_Loop_fu_400_p_out_ap_vld;
reg   [31:0] ap_phi_mux_empty_37_phi_fu_336_p10;
reg   [31:0] empty_37_reg_333;
wire   [31:0] ret_V_18_fu_901_p3;
reg   [31:0] ap_phi_mux_tmp_int_4_phi_fu_352_p10;
reg   [31:0] tmp_int_4_reg_349;
wire   [31:0] ret_V_19_fu_869_p3;
wire   [31:0] or_ln83_fu_1033_p2;
reg   [31:0] ap_phi_mux_empty_38_phi_fu_368_p4;
reg   [31:0] empty_38_reg_365;
reg    ap_block_state96;
reg    ap_block_state96_io;
reg   [31:0] ap_phi_mux_tmp_int_phi_fu_379_p4;
reg   [31:0] tmp_int_reg_375;
reg    grp_guitar_effects_Pipeline_1_fu_388_ap_start_reg;
wire    ap_CS_fsm_state1;
reg    grp_guitar_effects_Pipeline_2_fu_394_ap_start_reg;
reg    grp_guitar_effects_Pipeline_LPF_Loop_fu_400_ap_start_reg;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire   [63:0] zext_ln180_fu_969_p1;
wire   [63:0] zext_ln183_fu_1040_p1;
reg   [31:0] empty_fu_160;
wire   [31:0] select_ln86_fu_1050_p3;
reg   [31:0] delay_buffer_index_fu_164;
wire   [31:0] grp_fu_929_p2;
reg   [31:0] current_level_fu_168;
reg    ap_block_state2_on_subcall_done;
wire   [31:0] abs_in_1_fu_736_p3;
wire   [11:0] empty_33_fu_471_p1;
wire   [15:0] tmp_max_V_fu_475_p3;
wire   [11:0] empty_34_fu_487_p1;
wire   [15:0] tmp_min_V_fu_491_p3;
wire   [0:0] icmp_ln118_fu_552_p2;
wire   [0:0] xor_ln118_fu_557_p2;
wire   [0:0] xor_ln116_fu_546_p2;
wire   [0:0] and_ln118_fu_563_p2;
wire  signed [9:0] grp_fu_577_p1;
wire  signed [9:0] grp_fu_585_p1;
wire   [0:0] icmp_ln1049_fu_625_p2;
wire   [31:0] ret_V_fu_630_p2;
wire   [0:0] p_Result_s_fu_618_p3;
wire   [31:0] select_ln1048_fu_635_p3;
wire   [31:0] ret_V_4_fu_642_p3;
wire   [0:0] icmp_ln1049_1_fu_661_p2;
wire   [31:0] ret_V_5_fu_666_p2;
wire   [0:0] p_Result_1_fu_654_p3;
wire   [31:0] select_ln1048_1_fu_671_p3;
wire   [31:0] ret_V_7_fu_678_p3;
wire   [0:0] and_ln116_fu_690_p2;
wire   [31:0] result_fu_649_p2;
wire   [31:0] result_1_fu_685_p2;
wire   [31:0] result_2_fu_694_p3;
wire   [31:0] or_ln73_fu_711_p2;
wire   [0:0] tmp_5_fu_724_p3;
wire   [31:0] sub_ln131_fu_731_p2;
wire   [0:0] icmp_ln159_1_fu_772_p2;
wire   [0:0] and_ln159_fu_777_p2;
wire   [0:0] icmp_ln159_fu_767_p2;
wire  signed [16:0] grp_fu_794_p0;
wire  signed [16:0] grp_fu_809_p0;
wire   [0:0] icmp_ln1049_3_fu_852_p2;
wire   [31:0] ret_V_14_fu_857_p2;
wire   [0:0] p_Result_3_fu_845_p3;
wire   [31:0] select_ln1048_3_fu_862_p3;
wire   [0:0] icmp_ln1049_2_fu_884_p2;
wire   [31:0] ret_V_9_fu_889_p2;
wire   [0:0] p_Result_2_fu_877_p3;
wire   [31:0] select_ln1048_2_fu_894_p3;
wire   [31:0] grp_fu_917_p0;
wire   [16:0] grp_fu_917_p1;
wire   [31:0] grp_fu_929_p0;
wire   [16:0] grp_fu_929_p1;
wire   [15:0] trunc_ln180_fu_966_p1;
wire  signed [9:0] grp_fu_977_p1;
wire   [0:0] icmp_ln1049_4_fu_1003_p2;
wire   [31:0] ret_V_16_fu_1008_p2;
wire   [0:0] p_Result_4_fu_996_p3;
wire   [31:0] select_ln1048_4_fu_1013_p3;
wire   [31:0] ret_V_17_fu_1020_p3;
wire   [31:0] or_ln88_fu_1044_p2;
reg    grp_fu_794_ap_start;
wire    grp_fu_794_ap_done;
reg    grp_fu_809_ap_start;
wire    grp_fu_809_ap_done;
reg    grp_fu_917_ap_start;
wire    grp_fu_917_ap_done;
reg    grp_fu_929_ap_start;
wire    grp_fu_929_ap_done;
reg   [97:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
wire    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
wire    ap_ST_fsm_state80_blk;
wire    ap_ST_fsm_state81_blk;
wire    ap_ST_fsm_state82_blk;
wire    ap_ST_fsm_state83_blk;
wire    ap_ST_fsm_state84_blk;
wire    ap_ST_fsm_state85_blk;
wire    ap_ST_fsm_state86_blk;
wire    ap_ST_fsm_state87_blk;
wire    ap_ST_fsm_state88_blk;
wire    ap_ST_fsm_state89_blk;
wire    ap_ST_fsm_state90_blk;
wire    ap_ST_fsm_state91_blk;
wire    ap_ST_fsm_state92_blk;
wire    ap_ST_fsm_state93_blk;
wire    ap_ST_fsm_state94_blk;
wire    ap_ST_fsm_state95_blk;
reg    ap_ST_fsm_state96_blk;
reg    ap_ST_fsm_state97_blk;
reg    ap_ST_fsm_state98_blk;
wire    regslice_both_OUTPUT_r_V_data_V_U_apdone_blk;
reg    ap_block_state98;
wire    regslice_both_INPUT_r_V_data_V_U_apdone_blk;
wire   [31:0] INPUT_r_TDATA_int_regslice;
wire    INPUT_r_TVALID_int_regslice;
reg    INPUT_r_TREADY_int_regslice;
wire    regslice_both_INPUT_r_V_data_V_U_ack_in;
wire    regslice_both_INPUT_r_V_keep_V_U_apdone_blk;
wire   [3:0] INPUT_r_TKEEP_int_regslice;
wire    regslice_both_INPUT_r_V_keep_V_U_vld_out;
wire    regslice_both_INPUT_r_V_keep_V_U_ack_in;
wire    regslice_both_INPUT_r_V_strb_V_U_apdone_blk;
wire   [3:0] INPUT_r_TSTRB_int_regslice;
wire    regslice_both_INPUT_r_V_strb_V_U_vld_out;
wire    regslice_both_INPUT_r_V_strb_V_U_ack_in;
wire    regslice_both_INPUT_r_V_user_V_U_apdone_blk;
wire   [1:0] INPUT_r_TUSER_int_regslice;
wire    regslice_both_INPUT_r_V_user_V_U_vld_out;
wire    regslice_both_INPUT_r_V_user_V_U_ack_in;
wire    regslice_both_INPUT_r_V_last_V_U_apdone_blk;
wire   [0:0] INPUT_r_TLAST_int_regslice;
wire    regslice_both_INPUT_r_V_last_V_U_vld_out;
wire    regslice_both_INPUT_r_V_last_V_U_ack_in;
wire    regslice_both_INPUT_r_V_id_V_U_apdone_blk;
wire   [4:0] INPUT_r_TID_int_regslice;
wire    regslice_both_INPUT_r_V_id_V_U_vld_out;
wire    regslice_both_INPUT_r_V_id_V_U_ack_in;
wire    regslice_both_INPUT_r_V_dest_V_U_apdone_blk;
wire   [5:0] INPUT_r_TDEST_int_regslice;
wire    regslice_both_INPUT_r_V_dest_V_U_vld_out;
wire    regslice_both_INPUT_r_V_dest_V_U_ack_in;
reg    OUTPUT_r_TVALID_int_regslice;
wire    OUTPUT_r_TREADY_int_regslice;
wire    regslice_both_OUTPUT_r_V_data_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_keep_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_keep_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_keep_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_strb_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_strb_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_strb_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_user_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_user_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_user_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_last_V_U_apdone_blk;
reg   [0:0] OUTPUT_r_TLAST_int_regslice;
wire    regslice_both_OUTPUT_r_V_last_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_last_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_id_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_id_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_id_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_dest_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_dest_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_dest_V_U_vld_out;
reg    ap_condition_1743;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 98'd1;
#0 grp_guitar_effects_Pipeline_1_fu_388_ap_start_reg = 1'b0;
#0 grp_guitar_effects_Pipeline_2_fu_394_ap_start_reg = 1'b0;
#0 grp_guitar_effects_Pipeline_LPF_Loop_fu_400_ap_start_reg = 1'b0;
end

guitar_effects_compression_buffer_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
compression_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(compression_buffer_address0),
    .ce0(compression_buffer_ce0),
    .we0(compression_buffer_we0),
    .d0(compression_buffer_d0),
    .q0(compression_buffer_q0)
);

guitar_effects_lpf_coefficients_V_RAM_AUTO_1R1W #(
    .DataWidth( 1 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
lpf_coefficients_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lpf_coefficients_V_address0),
    .ce0(lpf_coefficients_V_ce0),
    .we0(lpf_coefficients_V_we0),
    .d0(1'd1),
    .q0(lpf_coefficients_V_q0)
);

guitar_effects_delay_buffer_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 44100 ),
    .AddressWidth( 16 ))
delay_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(delay_buffer_address0),
    .ce0(delay_buffer_ce0),
    .we0(delay_buffer_we0),
    .d0(delay_buffer_d0),
    .q0(delay_buffer_q0)
);

guitar_effects_guitar_effects_Pipeline_1 grp_guitar_effects_Pipeline_1_fu_388(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_guitar_effects_Pipeline_1_fu_388_ap_start),
    .ap_done(grp_guitar_effects_Pipeline_1_fu_388_ap_done),
    .ap_idle(grp_guitar_effects_Pipeline_1_fu_388_ap_idle),
    .ap_ready(grp_guitar_effects_Pipeline_1_fu_388_ap_ready),
    .compression_buffer_address0(grp_guitar_effects_Pipeline_1_fu_388_compression_buffer_address0),
    .compression_buffer_ce0(grp_guitar_effects_Pipeline_1_fu_388_compression_buffer_ce0),
    .compression_buffer_we0(grp_guitar_effects_Pipeline_1_fu_388_compression_buffer_we0),
    .compression_buffer_d0(grp_guitar_effects_Pipeline_1_fu_388_compression_buffer_d0)
);

guitar_effects_guitar_effects_Pipeline_2 grp_guitar_effects_Pipeline_2_fu_394(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_guitar_effects_Pipeline_2_fu_394_ap_start),
    .ap_done(grp_guitar_effects_Pipeline_2_fu_394_ap_done),
    .ap_idle(grp_guitar_effects_Pipeline_2_fu_394_ap_idle),
    .ap_ready(grp_guitar_effects_Pipeline_2_fu_394_ap_ready),
    .delay_buffer_address0(grp_guitar_effects_Pipeline_2_fu_394_delay_buffer_address0),
    .delay_buffer_ce0(grp_guitar_effects_Pipeline_2_fu_394_delay_buffer_ce0),
    .delay_buffer_we0(grp_guitar_effects_Pipeline_2_fu_394_delay_buffer_we0),
    .delay_buffer_d0(grp_guitar_effects_Pipeline_2_fu_394_delay_buffer_d0)
);

guitar_effects_guitar_effects_Pipeline_LPF_Loop grp_guitar_effects_Pipeline_LPF_Loop_fu_400(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_guitar_effects_Pipeline_LPF_Loop_fu_400_ap_start),
    .ap_done(grp_guitar_effects_Pipeline_LPF_Loop_fu_400_ap_done),
    .ap_idle(grp_guitar_effects_Pipeline_LPF_Loop_fu_400_ap_idle),
    .ap_ready(grp_guitar_effects_Pipeline_LPF_Loop_fu_400_ap_ready),
    .current_level(current_level_fu_168),
    .compression_buffer_address0(grp_guitar_effects_Pipeline_LPF_Loop_fu_400_compression_buffer_address0),
    .compression_buffer_ce0(grp_guitar_effects_Pipeline_LPF_Loop_fu_400_compression_buffer_ce0),
    .compression_buffer_q0(compression_buffer_q0),
    .lpf_coefficients_V_address0(grp_guitar_effects_Pipeline_LPF_Loop_fu_400_lpf_coefficients_V_address0),
    .lpf_coefficients_V_ce0(grp_guitar_effects_Pipeline_LPF_Loop_fu_400_lpf_coefficients_V_ce0),
    .lpf_coefficients_V_q0(lpf_coefficients_V_q0),
    .p_out(grp_guitar_effects_Pipeline_LPF_Loop_fu_400_p_out),
    .p_out_ap_vld(grp_guitar_effects_Pipeline_LPF_Loop_fu_400_p_out_ap_vld)
);

guitar_effects_control_r_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_R_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_R_DATA_WIDTH ))
control_r_s_axi_U(
    .AWVALID(s_axi_control_r_AWVALID),
    .AWREADY(s_axi_control_r_AWREADY),
    .AWADDR(s_axi_control_r_AWADDR),
    .WVALID(s_axi_control_r_WVALID),
    .WREADY(s_axi_control_r_WREADY),
    .WDATA(s_axi_control_r_WDATA),
    .WSTRB(s_axi_control_r_WSTRB),
    .ARVALID(s_axi_control_r_ARVALID),
    .ARREADY(s_axi_control_r_ARREADY),
    .ARADDR(s_axi_control_r_ARADDR),
    .RVALID(s_axi_control_r_RVALID),
    .RREADY(s_axi_control_r_RREADY),
    .RDATA(s_axi_control_r_RDATA),
    .RRESP(s_axi_control_r_RRESP),
    .BVALID(s_axi_control_r_BVALID),
    .BREADY(s_axi_control_r_BREADY),
    .BRESP(s_axi_control_r_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .axilite_out(axilite_out),
    .axilite_out_ap_vld(axilite_out_ap_vld),
    .control(control),
    .distortion_threshold(distortion_threshold),
    .distortion_clip_factor(distortion_clip_factor),
    .compression_min_threshold(compression_min_threshold),
    .compression_max_threshold(compression_max_threshold),
    .compression_zero_threshold(compression_zero_threshold),
    .delay_mult(delay_mult),
    .delay_samples(delay_samples)
);

guitar_effects_mul_32s_10s_42_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 42 ))
mul_32s_10s_42_2_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(r_V_3_reg_1216),
    .din1(grp_fu_577_p1),
    .ce(1'b1),
    .dout(grp_fu_577_p2)
);

guitar_effects_mul_32s_10s_42_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 42 ))
mul_32s_10s_42_2_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(r_V_reg_1221),
    .din1(grp_fu_585_p1),
    .ce(1'b1),
    .dout(grp_fu_585_p2)
);

guitar_effects_sdiv_17s_32ns_32_21_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 21 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_17s_32ns_32_21_seq_1_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_794_ap_start),
    .done(grp_fu_794_ap_done),
    .din0(grp_fu_794_p0),
    .din1(grp_guitar_effects_Pipeline_LPF_Loop_fu_400_p_out),
    .ce(1'b1),
    .dout(grp_fu_794_p2)
);

guitar_effects_sdiv_17s_32ns_32_21_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 21 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_17s_32ns_32_21_seq_1_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_809_ap_start),
    .done(grp_fu_809_ap_done),
    .din0(grp_fu_809_p0),
    .din1(grp_guitar_effects_Pipeline_LPF_Loop_fu_400_p_out),
    .ce(1'b1),
    .dout(grp_fu_809_p2)
);

guitar_effects_mul_32s_32s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_2_1_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(result_4_reg_1275),
    .din1(compression_factor_V_1_reg_1319),
    .ce(1'b1),
    .dout(grp_fu_825_p2)
);

guitar_effects_srem_32ns_17ns_16_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 16 ))
srem_32ns_17ns_16_36_seq_1_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_917_ap_start),
    .done(grp_fu_917_ap_done),
    .din0(grp_fu_917_p0),
    .din1(grp_fu_917_p1),
    .ce(1'b1),
    .dout(grp_fu_917_p2)
);

guitar_effects_srem_32ns_17ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 32 ))
srem_32ns_17ns_32_36_seq_1_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_929_ap_start),
    .done(grp_fu_929_ap_done),
    .din0(grp_fu_929_p0),
    .din1(grp_fu_929_p1),
    .ce(1'b1),
    .dout(grp_fu_929_p2)
);

guitar_effects_mul_32s_32s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_2_1_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(result_4_reg_1275),
    .din1(compression_factor_V_reg_1366),
    .ce(1'b1),
    .dout(grp_fu_941_p2)
);

guitar_effects_mul_32s_10s_42_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 42 ))
mul_32s_10s_42_2_1_U15(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(r_V_10_reg_1408),
    .din1(grp_fu_977_p1),
    .ce(1'b1),
    .dout(grp_fu_977_p2)
);

guitar_effects_regslice_both #(
    .DataWidth( 32 ))
regslice_both_INPUT_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TDATA),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_data_V_U_ack_in),
    .data_out(INPUT_r_TDATA_int_regslice),
    .vld_out(INPUT_r_TVALID_int_regslice),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_data_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 4 ))
regslice_both_INPUT_r_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TKEEP),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_keep_V_U_ack_in),
    .data_out(INPUT_r_TKEEP_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_keep_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_keep_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 4 ))
regslice_both_INPUT_r_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TSTRB),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_strb_V_U_ack_in),
    .data_out(INPUT_r_TSTRB_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_strb_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_strb_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 2 ))
regslice_both_INPUT_r_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TUSER),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_user_V_U_ack_in),
    .data_out(INPUT_r_TUSER_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_user_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_user_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 1 ))
regslice_both_INPUT_r_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TLAST),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_last_V_U_ack_in),
    .data_out(INPUT_r_TLAST_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_last_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_last_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 5 ))
regslice_both_INPUT_r_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TID),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_id_V_U_ack_in),
    .data_out(INPUT_r_TID_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_id_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_id_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 6 ))
regslice_both_INPUT_r_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TDEST),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_dest_V_U_ack_in),
    .data_out(INPUT_r_TDEST_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_dest_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_dest_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 32 ))
regslice_both_OUTPUT_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ap_phi_mux_tmp_int_phi_fu_379_p4),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(OUTPUT_r_TREADY_int_regslice),
    .data_out(OUTPUT_r_TDATA),
    .vld_out(regslice_both_OUTPUT_r_V_data_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_data_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 4 ))
regslice_both_OUTPUT_r_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_keep_V_reg_1182),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_keep_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TKEEP),
    .vld_out(regslice_both_OUTPUT_r_V_keep_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_keep_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 4 ))
regslice_both_OUTPUT_r_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_strb_V_reg_1187),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_strb_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TSTRB),
    .vld_out(regslice_both_OUTPUT_r_V_strb_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_strb_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 2 ))
regslice_both_OUTPUT_r_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_user_V_reg_1192),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_user_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TUSER),
    .vld_out(regslice_both_OUTPUT_r_V_user_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_user_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 1 ))
regslice_both_OUTPUT_r_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(OUTPUT_r_TLAST_int_regslice),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_last_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TLAST),
    .vld_out(regslice_both_OUTPUT_r_V_last_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_last_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 5 ))
regslice_both_OUTPUT_r_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_id_V_reg_1201),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_id_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TID),
    .vld_out(regslice_both_OUTPUT_r_V_id_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_id_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 6 ))
regslice_both_OUTPUT_r_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_dest_V_reg_1206),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_dest_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TDEST),
    .vld_out(regslice_both_OUTPUT_r_V_dest_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_guitar_effects_Pipeline_1_fu_388_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            grp_guitar_effects_Pipeline_1_fu_388_ap_start_reg <= 1'b1;
        end else if ((grp_guitar_effects_Pipeline_1_fu_388_ap_ready == 1'b1)) begin
            grp_guitar_effects_Pipeline_1_fu_388_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_guitar_effects_Pipeline_2_fu_394_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            grp_guitar_effects_Pipeline_2_fu_394_ap_start_reg <= 1'b1;
        end else if ((grp_guitar_effects_Pipeline_2_fu_394_ap_ready == 1'b1)) begin
            grp_guitar_effects_Pipeline_2_fu_394_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_guitar_effects_Pipeline_LPF_Loop_fu_400_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            grp_guitar_effects_Pipeline_LPF_Loop_fu_400_ap_start_reg <= 1'b1;
        end else if ((grp_guitar_effects_Pipeline_LPF_Loop_fu_400_ap_ready == 1'b1)) begin
            grp_guitar_effects_Pipeline_LPF_Loop_fu_400_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        current_level_fu_168 <= 32'd0;
    end else if ((((icmp_ln160_fu_761_p2 == 1'd1) & (icmp_ln149_fu_756_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10)) | ((icmp_ln160_fu_761_p2 == 1'd0) & (icmp_ln149_fu_756_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10)) | ((icmp_ln149_fu_756_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10) & (1'd1 == and_ln159_1_fu_783_p2)) | ((icmp_ln149_fu_756_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10) & (1'd0 == and_ln159_1_fu_783_p2)))) begin
        current_level_fu_168 <= grp_guitar_effects_Pipeline_LPF_Loop_fu_400_p_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        delay_buffer_index_fu_164 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        delay_buffer_index_fu_164 <= grp_fu_929_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln160_fu_761_p2 == 1'd0) & (icmp_ln149_fu_756_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10)) | ((icmp_ln149_fu_756_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10) & (1'd0 == and_ln159_1_fu_783_p2)))) begin
        empty_37_reg_333 <= or_ln78_fu_751_p2;
    end else if (((1'b1 == ap_CS_fsm_state7) & (tmp_1_reg_1138 == 1'd0))) begin
        empty_37_reg_333 <= empty_36_fu_717_p3;
    end else if ((((icmp_ln149_reg_1307 == 1'd0) & (1'b1 == ap_CS_fsm_state33) & (tmp_1_reg_1138 == 1'd1) & (1'd1 == and_ln159_1_reg_1315)) | ((icmp_ln160_reg_1311 == 1'd1) & (icmp_ln149_reg_1307 == 1'd1) & (1'b1 == ap_CS_fsm_state33) & (tmp_1_reg_1138 == 1'd1)))) begin
        empty_37_reg_333 <= or_ln78_reg_1299;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (tmp_2_reg_1147 == 1'd0))) begin
        empty_38_reg_365 <= ap_phi_mux_empty_37_phi_fu_336_p10;
    end else if ((~((1'b1 == ap_block_state96_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1197 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1197 == 1'd1))) & (1'b1 == ap_CS_fsm_state96) & (tmp_2_reg_1147 == 1'd1))) begin
        empty_38_reg_365 <= or_ln83_fu_1033_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_fu_160 <= 32'd0;
    end else if ((~((1'b1 == ap_block_state96_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1197 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1197 == 1'd1))) & (1'b1 == ap_CS_fsm_state96) & (tmp_last_V_reg_1197 == 1'd0))) begin
        empty_fu_160 <= select_ln86_fu_1050_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln160_fu_761_p2 == 1'd0) & (icmp_ln149_fu_756_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10)) | ((icmp_ln149_fu_756_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10) & (1'd0 == and_ln159_1_fu_783_p2)) | ((1'b1 == ap_CS_fsm_state7) & (tmp_1_reg_1138 == 1'd0)))) begin
        tmp_int_4_reg_349 <= result_4_reg_1275;
    end else if (((icmp_ln149_reg_1307 == 1'd0) & (1'b1 == ap_CS_fsm_state33) & (tmp_1_reg_1138 == 1'd1) & (1'd1 == and_ln159_1_reg_1315))) begin
        tmp_int_4_reg_349 <= ret_V_19_fu_869_p3;
    end else if (((icmp_ln160_reg_1311 == 1'd1) & (icmp_ln149_reg_1307 == 1'd1) & (1'b1 == ap_CS_fsm_state33) & (tmp_1_reg_1138 == 1'd1))) begin
        tmp_int_4_reg_349 <= ret_V_18_fu_901_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (tmp_2_reg_1147 == 1'd0))) begin
        tmp_int_reg_375 <= ap_phi_mux_tmp_int_4_phi_fu_352_p10;
    end else if ((~((1'b1 == ap_block_state96_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1197 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1197 == 1'd1))) & (1'b1 == ap_CS_fsm_state96) & (tmp_2_reg_1147 == 1'd1))) begin
        tmp_int_reg_375 <= output_reg_1435;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln149_fu_756_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        and_ln159_1_reg_1315 <= and_ln159_1_fu_783_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        compression_factor_V_1_reg_1319 <= grp_fu_794_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        compression_factor_V_reg_1366 <= grp_fu_809_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        compression_max_threshold_read_reg_1103 <= compression_max_threshold;
        compression_min_threshold_read_reg_1108 <= compression_min_threshold;
        compression_zero_threshold_read_reg_1098 <= compression_zero_threshold;
        conv7_i_i_i310_reg_1162 <= conv7_i_i_i310_fu_467_p1;
        conv7_i_i_i_reg_1156 <= conv7_i_i_i_fu_463_p1;
        conv_i_i190_i_reg_1167[31 : 4] <= conv_i_i190_i_fu_483_p1[31 : 4];
        conv_i_i64_i_reg_1172[31 : 4] <= conv_i_i64_i_fu_499_p1[31 : 4];
        delay_samples_read_reg_1093 <= delay_samples;
        distortion_threshold_read_reg_1113 <= distortion_threshold;
        negative_threshold_reg_1151 <= negative_threshold_fu_457_p2;
        rev_reg_1133 <= rev_fu_435_p2;
        tmp_1_reg_1138 <= control[32'd2];
        tmp_2_reg_1147 <= control[32'd1];
        tmp_reg_1127 <= control[32'd3];
        trunc_ln19_reg_1122 <= trunc_ln19_fu_423_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (tmp_2_reg_1147 == 1'd1))) begin
        delay_buffer_index_load_reg_1351 <= delay_buffer_index_fu_164;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        empty_36_reg_1287 <= empty_36_fu_717_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln116_reg_1211 <= icmp_ln116_fu_531_p2;
        or_ln118_reg_1226 <= or_ln118_fu_569_p2;
        r_V_3_reg_1216 <= r_V_3_fu_536_p2;
        r_V_reg_1221 <= r_V_fu_541_p2;
        tmp_data_V_1_reg_1177 <= INPUT_r_TDATA_int_regslice;
        tmp_dest_V_reg_1206 <= INPUT_r_TDEST_int_regslice;
        tmp_id_V_reg_1201 <= INPUT_r_TID_int_regslice;
        tmp_keep_V_reg_1182 <= INPUT_r_TKEEP_int_regslice;
        tmp_last_V_reg_1197 <= INPUT_r_TLAST_int_regslice;
        tmp_strb_V_reg_1187 <= INPUT_r_TSTRB_int_regslice;
        tmp_user_V_reg_1192 <= INPUT_r_TUSER_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        icmp_ln149_reg_1307 <= icmp_ln149_fu_756_p2;
        icmp_ln160_reg_1311 <= icmp_ln160_fu_761_p2;
        or_ln78_reg_1299[1 : 0] <= or_ln78_fu_751_p2[1 : 0];
or_ln78_reg_1299[31 : 3] <= or_ln78_fu_751_p2[31 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        output_reg_1435 <= output_fu_1027_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state92)) begin
        r_V_10_reg_1408 <= delay_buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln118_reg_1226 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        r_V_12_reg_1241 <= grp_fu_577_p2;
        r_V_13_reg_1258 <= grp_fu_585_p2;
        ret_V_3_cast_reg_1263 <= {{grp_fu_585_p2[39:8]}};
        ret_V_cast_reg_1246 <= {{grp_fu_577_p2[39:8]}};
        trunc_ln1049_1_reg_1270 <= trunc_ln1049_1_fu_614_p1;
        trunc_ln1049_reg_1253 <= trunc_ln1049_fu_600_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        r_V_14_reg_1381 <= grp_fu_941_p2;
        ret_V_9_cast_reg_1386 <= {{grp_fu_941_p2[35:4]}};
        trunc_ln1049_2_reg_1393 <= trunc_ln1049_2_fu_957_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        r_V_15_reg_1334 <= grp_fu_825_p2;
        ret_V_10_cast_reg_1339 <= {{grp_fu_825_p2[35:4]}};
        trunc_ln1049_3_reg_1346 <= trunc_ln1049_3_fu_841_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        r_V_16_reg_1418 <= grp_fu_977_p2;
        ret_V_15_cast_reg_1423 <= {{grp_fu_977_p2[39:8]}};
        trunc_ln1049_4_reg_1430 <= trunc_ln1049_4_fu_992_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        result_4_reg_1275 <= result_4_fu_702_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        srem_ln180_reg_1398 <= grp_fu_917_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        INPUT_r_TDATA_blk_n = INPUT_r_TVALID_int_regslice;
    end else begin
        INPUT_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == INPUT_r_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state3))) begin
        INPUT_r_TREADY_int_regslice = 1'b1;
    end else begin
        INPUT_r_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state98) | ((1'b1 == ap_CS_fsm_state96) & (tmp_last_V_reg_1197 == 1'd0)) | ((1'b1 == ap_CS_fsm_state96) & (tmp_last_V_reg_1197 == 1'd1)))) begin
        OUTPUT_r_TDATA_blk_n = OUTPUT_r_TREADY_int_regslice;
    end else begin
        OUTPUT_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1743)) begin
        if ((tmp_last_V_reg_1197 == 1'd1)) begin
            OUTPUT_r_TLAST_int_regslice = 1'd1;
        end else if ((tmp_last_V_reg_1197 == 1'd0)) begin
            OUTPUT_r_TLAST_int_regslice = 1'd0;
        end else begin
            OUTPUT_r_TLAST_int_regslice = 'bx;
        end
    end else begin
        OUTPUT_r_TLAST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state96_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1197 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1197 == 1'd1))) & (1'b1 == ap_CS_fsm_state96) & (tmp_last_V_reg_1197 == 1'd0)) | (~((1'b1 == ap_block_state96_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1197 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1197 == 1'd1))) & (1'b1 == ap_CS_fsm_state96) & (tmp_last_V_reg_1197 == 1'd1)))) begin
        OUTPUT_r_TVALID_int_regslice = 1'b1;
    end else begin
        OUTPUT_r_TVALID_int_regslice = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

assign ap_ST_fsm_state1_blk = 1'b0;

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state2_on_subcall_done)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

always @ (*) begin
    if ((1'b0 == INPUT_r_TVALID_int_regslice)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

assign ap_ST_fsm_state75_blk = 1'b0;

assign ap_ST_fsm_state76_blk = 1'b0;

assign ap_ST_fsm_state77_blk = 1'b0;

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state80_blk = 1'b0;

assign ap_ST_fsm_state81_blk = 1'b0;

assign ap_ST_fsm_state82_blk = 1'b0;

assign ap_ST_fsm_state83_blk = 1'b0;

assign ap_ST_fsm_state84_blk = 1'b0;

assign ap_ST_fsm_state85_blk = 1'b0;

assign ap_ST_fsm_state86_blk = 1'b0;

assign ap_ST_fsm_state87_blk = 1'b0;

assign ap_ST_fsm_state88_blk = 1'b0;

assign ap_ST_fsm_state89_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state90_blk = 1'b0;

assign ap_ST_fsm_state91_blk = 1'b0;

assign ap_ST_fsm_state92_blk = 1'b0;

assign ap_ST_fsm_state93_blk = 1'b0;

assign ap_ST_fsm_state94_blk = 1'b0;

assign ap_ST_fsm_state95_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_block_state96_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1197 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1197 == 1'd1)))) begin
        ap_ST_fsm_state96_blk = 1'b1;
    end else begin
        ap_ST_fsm_state96_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == OUTPUT_r_TREADY_int_regslice)) begin
        ap_ST_fsm_state97_blk = 1'b1;
    end else begin
        ap_ST_fsm_state97_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == OUTPUT_r_TREADY_int_regslice) | (regslice_both_OUTPUT_r_V_data_V_U_apdone_blk == 1'b1))) begin
        ap_ST_fsm_state98_blk = 1'b1;
    end else begin
        ap_ST_fsm_state98_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_guitar_effects_Pipeline_LPF_Loop_fu_400_ap_done == 1'b0)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln149_reg_1307 == 1'd0) & (1'b1 == ap_CS_fsm_state33) & (tmp_1_reg_1138 == 1'd1) & (1'd1 == and_ln159_1_reg_1315)) | ((icmp_ln160_reg_1311 == 1'd1) & (icmp_ln149_reg_1307 == 1'd1) & (1'b1 == ap_CS_fsm_state33) & (tmp_1_reg_1138 == 1'd1)))) begin
        ap_phi_mux_empty_37_phi_fu_336_p10 = or_ln78_reg_1299;
    end else begin
        ap_phi_mux_empty_37_phi_fu_336_p10 = empty_37_reg_333;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state96) & (tmp_2_reg_1147 == 1'd1))) begin
        ap_phi_mux_empty_38_phi_fu_368_p4 = or_ln83_fu_1033_p2;
    end else begin
        ap_phi_mux_empty_38_phi_fu_368_p4 = empty_38_reg_365;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) & (tmp_1_reg_1138 == 1'd1))) begin
        if (((icmp_ln149_reg_1307 == 1'd0) & (1'd1 == and_ln159_1_reg_1315))) begin
            ap_phi_mux_tmp_int_4_phi_fu_352_p10 = ret_V_19_fu_869_p3;
        end else if (((icmp_ln160_reg_1311 == 1'd1) & (icmp_ln149_reg_1307 == 1'd1))) begin
            ap_phi_mux_tmp_int_4_phi_fu_352_p10 = ret_V_18_fu_901_p3;
        end else begin
            ap_phi_mux_tmp_int_4_phi_fu_352_p10 = tmp_int_4_reg_349;
        end
    end else begin
        ap_phi_mux_tmp_int_4_phi_fu_352_p10 = tmp_int_4_reg_349;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state96) & (tmp_2_reg_1147 == 1'd1))) begin
        ap_phi_mux_tmp_int_phi_fu_379_p4 = output_reg_1435;
    end else begin
        ap_phi_mux_tmp_int_phi_fu_379_p4 = tmp_int_reg_375;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state96_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1197 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1197 == 1'd1))) & (1'b1 == ap_CS_fsm_state96) & (tmp_last_V_reg_1197 == 1'd1))) begin
        axilite_out_ap_vld = 1'b1;
    end else begin
        axilite_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        compression_buffer_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        compression_buffer_address0 = grp_guitar_effects_Pipeline_LPF_Loop_fu_400_compression_buffer_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        compression_buffer_address0 = grp_guitar_effects_Pipeline_1_fu_388_compression_buffer_address0;
    end else begin
        compression_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        compression_buffer_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        compression_buffer_ce0 = grp_guitar_effects_Pipeline_LPF_Loop_fu_400_compression_buffer_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        compression_buffer_ce0 = grp_guitar_effects_Pipeline_1_fu_388_compression_buffer_ce0;
    end else begin
        compression_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        compression_buffer_d0 = abs_in_1_fu_736_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        compression_buffer_d0 = grp_guitar_effects_Pipeline_1_fu_388_compression_buffer_d0;
    end else begin
        compression_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_1_reg_1138 == 1'd1))) begin
        compression_buffer_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        compression_buffer_we0 = grp_guitar_effects_Pipeline_1_fu_388_compression_buffer_we0;
    end else begin
        compression_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        delay_buffer_address0 = zext_ln183_fu_1040_p1;
    end else if ((1'b1 == ap_CS_fsm_state91)) begin
        delay_buffer_address0 = zext_ln180_fu_969_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        delay_buffer_address0 = grp_guitar_effects_Pipeline_2_fu_394_delay_buffer_address0;
    end else begin
        delay_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state91) | (~((1'b1 == ap_block_state96_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1197 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1197 == 1'd1))) & (1'b1 == ap_CS_fsm_state96)))) begin
        delay_buffer_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        delay_buffer_ce0 = grp_guitar_effects_Pipeline_2_fu_394_delay_buffer_ce0;
    end else begin
        delay_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        delay_buffer_d0 = output_reg_1435;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        delay_buffer_d0 = grp_guitar_effects_Pipeline_2_fu_394_delay_buffer_d0;
    end else begin
        delay_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state96_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1197 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1197 == 1'd1))) & (1'b1 == ap_CS_fsm_state96) & (tmp_2_reg_1147 == 1'd1))) begin
        delay_buffer_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        delay_buffer_we0 = grp_guitar_effects_Pipeline_2_fu_394_delay_buffer_we0;
    end else begin
        delay_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln149_fu_756_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10) & (1'd1 == and_ln159_1_fu_783_p2))) begin
        grp_fu_794_ap_start = 1'b1;
    end else begin
        grp_fu_794_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln160_fu_761_p2 == 1'd1) & (icmp_ln149_fu_756_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_809_ap_start = 1'b1;
    end else begin
        grp_fu_809_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) & (tmp_2_reg_1147 == 1'd1))) begin
        grp_fu_917_ap_start = 1'b1;
    end else begin
        grp_fu_917_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) & (tmp_2_reg_1147 == 1'd1))) begin
        grp_fu_929_ap_start = 1'b1;
    end else begin
        grp_fu_929_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lpf_coefficients_V_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        lpf_coefficients_V_address0 = grp_guitar_effects_Pipeline_LPF_Loop_fu_400_lpf_coefficients_V_address0;
    end else begin
        lpf_coefficients_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        lpf_coefficients_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        lpf_coefficients_V_ce0 = grp_guitar_effects_Pipeline_LPF_Loop_fu_400_lpf_coefficients_V_ce0;
    end else begin
        lpf_coefficients_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        lpf_coefficients_V_we0 = 1'b1;
    end else begin
        lpf_coefficients_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == INPUT_r_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (tmp_1_reg_1138 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((grp_guitar_effects_Pipeline_LPF_Loop_fu_400_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln160_fu_761_p2 == 1'd1) & (icmp_ln149_fu_756_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else if (((1'b1 == ap_CS_fsm_state10) & (((icmp_ln160_fu_761_p2 == 1'd0) & (icmp_ln149_fu_756_p2 == 1'd1)) | ((icmp_ln149_fu_756_p2 == 1'd0) & (1'd0 == and_ln159_1_fu_783_p2))))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == ap_CS_fsm_state33) & (tmp_2_reg_1147 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            if ((~((1'b1 == ap_block_state96_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1197 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1197 == 1'd1))) & (1'b1 == ap_CS_fsm_state96) & (tmp_last_V_reg_1197 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state98;
            end else if ((~((1'b1 == ap_block_state96_io) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1197 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1197 == 1'd1))) & (1'b1 == ap_CS_fsm_state96) & (tmp_last_V_reg_1197 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end
        end
        ap_ST_fsm_state97 : begin
            if (((1'b1 == OUTPUT_r_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state97))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end
        end
        ap_ST_fsm_state98 : begin
            if ((~((1'b0 == OUTPUT_r_TREADY_int_regslice) | (regslice_both_OUTPUT_r_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state98))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state98;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign INPUT_r_TREADY = regslice_both_INPUT_r_V_data_V_U_ack_in;

assign OUTPUT_r_TVALID = regslice_both_OUTPUT_r_V_data_V_U_vld_out;

assign abs_in_1_fu_736_p3 = ((tmp_5_fu_724_p3[0:0] == 1'b1) ? sub_ln131_fu_731_p2 : result_4_reg_1275);

assign and_ln116_fu_690_p2 = (tmp_reg_1127 & icmp_ln116_reg_1211);

assign and_ln118_fu_563_p2 = (xor_ln118_fu_557_p2 & xor_ln116_fu_546_p2);

assign and_ln159_1_fu_783_p2 = (icmp_ln159_fu_767_p2 & and_ln159_fu_777_p2);

assign and_ln159_fu_777_p2 = (icmp_ln160_fu_761_p2 & icmp_ln159_1_fu_772_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_guitar_effects_Pipeline_2_fu_394_ap_done == 1'b0) | (grp_guitar_effects_Pipeline_1_fu_388_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state96 = (((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1197 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1197 == 1'd1)));
end

always @ (*) begin
    ap_block_state96_io = (((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1197 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1197 == 1'd1)));
end

always @ (*) begin
    ap_block_state98 = ((1'b0 == OUTPUT_r_TREADY_int_regslice) | (regslice_both_OUTPUT_r_V_data_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_condition_1743 = (~(((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1197 == 1'd0)) | ((1'b0 == OUTPUT_r_TREADY_int_regslice) & (tmp_last_V_reg_1197 == 1'd1))) & (1'b1 == ap_CS_fsm_state96));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign axilite_out = ((trunc_ln19_reg_1122[0:0] == 1'b1) ? or_ln88_fu_1044_p2 : ap_phi_mux_empty_38_phi_fu_368_p4);

assign conv7_i_i_i310_fu_467_p1 = $signed(delay_mult);

assign conv7_i_i_i_fu_463_p1 = $signed(distortion_clip_factor);

assign conv_i_i190_i_fu_483_p1 = $signed(tmp_max_V_fu_475_p3);

assign conv_i_i64_i_fu_499_p1 = $signed(tmp_min_V_fu_491_p3);

assign empty_33_fu_471_p1 = compression_max_threshold[11:0];

assign empty_34_fu_487_p1 = compression_min_threshold[11:0];

assign empty_36_fu_717_p3 = ((tmp_reg_1127[0:0] == 1'b1) ? or_ln73_fu_711_p2 : empty_fu_160);

assign grp_fu_577_p1 = conv7_i_i_i_reg_1156;

assign grp_fu_585_p1 = conv7_i_i_i_reg_1156;

assign grp_fu_794_p0 = conv_i_i64_i_reg_1172;

assign grp_fu_809_p0 = conv_i_i190_i_reg_1167;

assign grp_fu_917_p0 = (delay_buffer_index_fu_164 - delay_samples_read_reg_1093);

assign grp_fu_917_p1 = 32'd44100;

assign grp_fu_929_p0 = (delay_buffer_index_fu_164 + 32'd1);

assign grp_fu_929_p1 = 32'd44100;

assign grp_fu_977_p1 = conv7_i_i_i310_reg_1162;

assign grp_guitar_effects_Pipeline_1_fu_388_ap_start = grp_guitar_effects_Pipeline_1_fu_388_ap_start_reg;

assign grp_guitar_effects_Pipeline_2_fu_394_ap_start = grp_guitar_effects_Pipeline_2_fu_394_ap_start_reg;

assign grp_guitar_effects_Pipeline_LPF_Loop_fu_400_ap_start = grp_guitar_effects_Pipeline_LPF_Loop_fu_400_ap_start_reg;

assign icmp_ln1049_1_fu_661_p2 = ((trunc_ln1049_1_reg_1270 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln1049_2_fu_884_p2 = ((trunc_ln1049_2_reg_1393 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln1049_3_fu_852_p2 = ((trunc_ln1049_3_reg_1346 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln1049_4_fu_1003_p2 = ((trunc_ln1049_4_reg_1430 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln1049_fu_625_p2 = ((trunc_ln1049_reg_1253 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln116_fu_531_p2 = (($signed(INPUT_r_TDATA_int_regslice) > $signed(distortion_threshold_read_reg_1113)) ? 1'b1 : 1'b0);

assign icmp_ln118_fu_552_p2 = (($signed(INPUT_r_TDATA_int_regslice) < $signed(negative_threshold_reg_1151)) ? 1'b1 : 1'b0);

assign icmp_ln149_fu_756_p2 = (($signed(grp_guitar_effects_Pipeline_LPF_Loop_fu_400_p_out) > $signed(compression_max_threshold_read_reg_1103)) ? 1'b1 : 1'b0);

assign icmp_ln159_1_fu_772_p2 = (($signed(grp_guitar_effects_Pipeline_LPF_Loop_fu_400_p_out) > $signed(compression_zero_threshold_read_reg_1098)) ? 1'b1 : 1'b0);

assign icmp_ln159_fu_767_p2 = (($signed(grp_guitar_effects_Pipeline_LPF_Loop_fu_400_p_out) < $signed(compression_min_threshold_read_reg_1108)) ? 1'b1 : 1'b0);

assign icmp_ln160_fu_761_p2 = (($signed(grp_guitar_effects_Pipeline_LPF_Loop_fu_400_p_out) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign negative_threshold_fu_457_p2 = (32'd0 - distortion_threshold);

assign or_ln118_fu_569_p2 = (rev_reg_1133 | and_ln118_fu_563_p2);

assign or_ln73_fu_711_p2 = (empty_fu_160 | 32'd8);

assign or_ln78_fu_751_p2 = (empty_36_reg_1287 | 32'd4);

assign or_ln83_fu_1033_p2 = (empty_37_reg_333 | 32'd2);

assign or_ln88_fu_1044_p2 = (ap_phi_mux_empty_38_phi_fu_368_p4 | 32'd1);

assign output_fu_1027_p2 = (ret_V_17_fu_1020_p3 + tmp_int_4_reg_349);

assign p_Result_1_fu_654_p3 = r_V_13_reg_1258[32'd41];

assign p_Result_2_fu_877_p3 = r_V_14_reg_1381[32'd47];

assign p_Result_3_fu_845_p3 = r_V_15_reg_1334[32'd47];

assign p_Result_4_fu_996_p3 = r_V_16_reg_1418[32'd41];

assign p_Result_s_fu_618_p3 = r_V_12_reg_1241[32'd41];

assign r_V_3_fu_536_p2 = (INPUT_r_TDATA_int_regslice - distortion_threshold_read_reg_1113);

assign r_V_fu_541_p2 = (INPUT_r_TDATA_int_regslice + distortion_threshold_read_reg_1113);

assign result_1_fu_685_p2 = (ret_V_7_fu_678_p3 - distortion_threshold_read_reg_1113);

assign result_2_fu_694_p3 = ((and_ln116_fu_690_p2[0:0] == 1'b1) ? result_fu_649_p2 : result_1_fu_685_p2);

assign result_4_fu_702_p3 = ((or_ln118_reg_1226[0:0] == 1'b1) ? tmp_data_V_1_reg_1177 : result_2_fu_694_p3);

assign result_fu_649_p2 = (ret_V_4_fu_642_p3 + distortion_threshold_read_reg_1113);

assign ret_V_14_fu_857_p2 = (ret_V_10_cast_reg_1339 + 32'd1);

assign ret_V_16_fu_1008_p2 = (ret_V_15_cast_reg_1423 + 32'd1);

assign ret_V_17_fu_1020_p3 = ((p_Result_4_fu_996_p3[0:0] == 1'b1) ? select_ln1048_4_fu_1013_p3 : ret_V_15_cast_reg_1423);

assign ret_V_18_fu_901_p3 = ((p_Result_2_fu_877_p3[0:0] == 1'b1) ? select_ln1048_2_fu_894_p3 : ret_V_9_cast_reg_1386);

assign ret_V_19_fu_869_p3 = ((p_Result_3_fu_845_p3[0:0] == 1'b1) ? select_ln1048_3_fu_862_p3 : ret_V_10_cast_reg_1339);

assign ret_V_4_fu_642_p3 = ((p_Result_s_fu_618_p3[0:0] == 1'b1) ? select_ln1048_fu_635_p3 : ret_V_cast_reg_1246);

assign ret_V_5_fu_666_p2 = (ret_V_3_cast_reg_1263 + 32'd1);

assign ret_V_7_fu_678_p3 = ((p_Result_1_fu_654_p3[0:0] == 1'b1) ? select_ln1048_1_fu_671_p3 : ret_V_3_cast_reg_1263);

assign ret_V_9_fu_889_p2 = (ret_V_9_cast_reg_1386 + 32'd1);

assign ret_V_fu_630_p2 = (ret_V_cast_reg_1246 + 32'd1);

assign rev_fu_435_p2 = (tmp_fu_427_p3 ^ 1'd1);

assign select_ln1048_1_fu_671_p3 = ((icmp_ln1049_1_fu_661_p2[0:0] == 1'b1) ? ret_V_3_cast_reg_1263 : ret_V_5_fu_666_p2);

assign select_ln1048_2_fu_894_p3 = ((icmp_ln1049_2_fu_884_p2[0:0] == 1'b1) ? ret_V_9_cast_reg_1386 : ret_V_9_fu_889_p2);

assign select_ln1048_3_fu_862_p3 = ((icmp_ln1049_3_fu_852_p2[0:0] == 1'b1) ? ret_V_10_cast_reg_1339 : ret_V_14_fu_857_p2);

assign select_ln1048_4_fu_1013_p3 = ((icmp_ln1049_4_fu_1003_p2[0:0] == 1'b1) ? ret_V_15_cast_reg_1423 : ret_V_16_fu_1008_p2);

assign select_ln1048_fu_635_p3 = ((icmp_ln1049_fu_625_p2[0:0] == 1'b1) ? ret_V_cast_reg_1246 : ret_V_fu_630_p2);

assign select_ln86_fu_1050_p3 = ((trunc_ln19_reg_1122[0:0] == 1'b1) ? or_ln88_fu_1044_p2 : ap_phi_mux_empty_38_phi_fu_368_p4);

assign sub_ln131_fu_731_p2 = ($signed(32'd0) - $signed(result_4_reg_1275));

assign tmp_5_fu_724_p3 = result_4_reg_1275[32'd31];

assign tmp_fu_427_p3 = control[32'd3];

assign tmp_max_V_fu_475_p3 = {{empty_33_fu_471_p1}, {4'd0}};

assign tmp_min_V_fu_491_p3 = {{empty_34_fu_487_p1}, {4'd0}};

assign trunc_ln1049_1_fu_614_p1 = grp_fu_585_p2[7:0];

assign trunc_ln1049_2_fu_957_p1 = grp_fu_941_p2[3:0];

assign trunc_ln1049_3_fu_841_p1 = grp_fu_825_p2[3:0];

assign trunc_ln1049_4_fu_992_p1 = grp_fu_977_p2[7:0];

assign trunc_ln1049_fu_600_p1 = grp_fu_577_p2[7:0];

assign trunc_ln180_fu_966_p1 = srem_ln180_reg_1398[15:0];

assign trunc_ln19_fu_423_p1 = control[0:0];

assign xor_ln116_fu_546_p2 = (icmp_ln116_fu_531_p2 ^ 1'd1);

assign xor_ln118_fu_557_p2 = (icmp_ln118_fu_552_p2 ^ 1'd1);

assign zext_ln180_fu_969_p1 = trunc_ln180_fu_966_p1;

assign zext_ln183_fu_1040_p1 = delay_buffer_index_load_reg_1351;

always @ (posedge ap_clk) begin
    conv_i_i190_i_reg_1167[3:0] <= 4'b0000;
    conv_i_i64_i_reg_1172[3:0] <= 4'b0000;
    or_ln78_reg_1299[2] <= 1'b1;
end


reg find_kernel_block = 0;
// synthesis translate_off
`include "guitar_effects_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //guitar_effects

