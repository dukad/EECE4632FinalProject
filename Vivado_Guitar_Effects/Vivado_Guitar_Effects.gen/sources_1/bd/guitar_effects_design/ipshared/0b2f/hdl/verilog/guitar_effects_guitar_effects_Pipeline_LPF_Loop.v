// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module guitar_effects_guitar_effects_Pipeline_LPF_Loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        current_level,
        compression_buffer_address0,
        compression_buffer_ce0,
        compression_buffer_q0,
        lpf_coefficients_V_address0,
        lpf_coefficients_V_ce0,
        lpf_coefficients_V_q0,
        p_out,
        p_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] current_level;
output  [7:0] compression_buffer_address0;
output   compression_buffer_ce0;
input  [31:0] compression_buffer_q0;
output  [7:0] lpf_coefficients_V_address0;
output   lpf_coefficients_V_ce0;
input  [0:0] lpf_coefficients_V_q0;
output  [31:0] p_out;
output   p_out_ap_vld;

reg ap_idle;
reg compression_buffer_ce0;
reg lpf_coefficients_V_ce0;
reg p_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln139_fu_114_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [7:0] i_1_reg_266;
reg   [0:0] icmp_ln139_reg_271;
reg   [0:0] icmp_ln139_reg_271_pp0_iter1_reg;
wire   [7:0] add_ln141_fu_120_p2;
reg   [7:0] add_ln141_reg_275;
wire   [33:0] r_V_2_fu_170_p3;
reg   [33:0] r_V_2_reg_291;
reg   [25:0] tmp_1_reg_296;
wire   [7:0] trunc_ln1049_fu_188_p1;
reg   [7:0] trunc_ln1049_reg_301;
wire   [63:0] zext_ln142_fu_147_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] trunc_ln141_cast_fu_131_p1;
reg   [31:0] empty_fu_54;
wire   [31:0] add_ln142_fu_236_p2;
wire    ap_loop_init;
reg   [7:0] i_fu_58;
reg   [7:0] ap_sig_allocacmp_i_1;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] empty_26_fu_135_p2;
wire   [7:0] coeff_index_fu_140_p3;
wire  signed [31:0] sext_ln1316_fu_152_p0;
wire  signed [31:0] shl_ln_fu_156_p1;
wire   [33:0] shl_ln_fu_156_p3;
wire  signed [33:0] sext_ln1316_fu_152_p1;
wire   [33:0] sub_ln1319_fu_164_p2;
wire  signed [26:0] sext_ln1048_fu_195_p1;
wire   [0:0] icmp_ln1049_fu_205_p2;
wire   [26:0] ret_V_fu_210_p2;
wire   [0:0] p_Result_s_fu_198_p3;
wire   [26:0] select_ln1048_fu_216_p3;
wire   [26:0] ret_V_1_fu_224_p3;
wire  signed [31:0] sext_ln1029_fu_232_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

guitar_effects_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            empty_fu_54 <= current_level;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            empty_fu_54 <= add_ln142_fu_236_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln139_fu_114_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_58 <= add_ln141_fu_120_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_58 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln141_reg_275 <= add_ln141_fu_120_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        i_1_reg_266 <= ap_sig_allocacmp_i_1;
        icmp_ln139_reg_271 <= icmp_ln139_fu_114_p2;
        icmp_ln139_reg_271_pp0_iter1_reg <= icmp_ln139_reg_271;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        r_V_2_reg_291 <= r_V_2_fu_170_p3;
        tmp_1_reg_296 <= {{r_V_2_fu_170_p3[33:8]}};
        trunc_ln1049_reg_301 <= trunc_ln1049_fu_188_p1;
    end
end

always @ (*) begin
    if (((icmp_ln139_fu_114_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 8'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        compression_buffer_ce0 = 1'b1;
    end else begin
        compression_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lpf_coefficients_V_ce0 = 1'b1;
    end else begin
        lpf_coefficients_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln139_reg_271_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln141_fu_120_p2 = (ap_sig_allocacmp_i_1 + 8'd1);

assign add_ln142_fu_236_p2 = ($signed(sext_ln1029_fu_232_p1) + $signed(empty_fu_54));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign coeff_index_fu_140_p3 = ((empty_26_fu_135_p2[0:0] == 1'b1) ? 8'd0 : add_ln141_reg_275);

assign compression_buffer_address0 = zext_ln142_fu_147_p1;

assign empty_26_fu_135_p2 = ((add_ln141_reg_275 == 8'd200) ? 1'b1 : 1'b0);

assign icmp_ln1049_fu_205_p2 = ((trunc_ln1049_reg_301 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln139_fu_114_p2 = ((ap_sig_allocacmp_i_1 == 8'd200) ? 1'b1 : 1'b0);

assign lpf_coefficients_V_address0 = trunc_ln141_cast_fu_131_p1;

assign p_Result_s_fu_198_p3 = r_V_2_reg_291[32'd33];

assign p_out = empty_fu_54;

assign r_V_2_fu_170_p3 = ((lpf_coefficients_V_q0[0:0] == 1'b1) ? sub_ln1319_fu_164_p2 : 34'd0);

assign ret_V_1_fu_224_p3 = ((p_Result_s_fu_198_p3[0:0] == 1'b1) ? select_ln1048_fu_216_p3 : sext_ln1048_fu_195_p1);

assign ret_V_fu_210_p2 = ($signed(sext_ln1048_fu_195_p1) + $signed(27'd1));

assign select_ln1048_fu_216_p3 = ((icmp_ln1049_fu_205_p2[0:0] == 1'b1) ? sext_ln1048_fu_195_p1 : ret_V_fu_210_p2);

assign sext_ln1029_fu_232_p1 = $signed(ret_V_1_fu_224_p3);

assign sext_ln1048_fu_195_p1 = $signed(tmp_1_reg_296);

assign sext_ln1316_fu_152_p0 = compression_buffer_q0;

assign sext_ln1316_fu_152_p1 = sext_ln1316_fu_152_p0;

assign shl_ln_fu_156_p1 = compression_buffer_q0;

assign shl_ln_fu_156_p3 = {{shl_ln_fu_156_p1}, {2'd0}};

assign sub_ln1319_fu_164_p2 = ($signed(shl_ln_fu_156_p3) - $signed(sext_ln1316_fu_152_p1));

assign trunc_ln1049_fu_188_p1 = r_V_2_fu_170_p3[7:0];

assign trunc_ln141_cast_fu_131_p1 = i_1_reg_266;

assign zext_ln142_fu_147_p1 = coeff_index_fu_140_p3;

endmodule //guitar_effects_guitar_effects_Pipeline_LPF_Loop
