// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="guitar_effects_guitar_effects,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=267,HLS_SYN_DSP=0,HLS_SYN_FF=14485,HLS_SYN_LUT=19720,HLS_VERSION=2022_1}" *)

module guitar_effects (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        INPUT_r_TDATA,
        INPUT_r_TVALID,
        INPUT_r_TREADY,
        INPUT_r_TKEEP,
        INPUT_r_TSTRB,
        INPUT_r_TUSER,
        INPUT_r_TLAST,
        INPUT_r_TID,
        INPUT_r_TDEST,
        OUTPUT_r_TDATA,
        OUTPUT_r_TVALID,
        OUTPUT_r_TREADY,
        OUTPUT_r_TKEEP,
        OUTPUT_r_TSTRB,
        OUTPUT_r_TUSER,
        OUTPUT_r_TLAST,
        OUTPUT_r_TID,
        OUTPUT_r_TDEST,
        s_axi_control_r_AWVALID,
        s_axi_control_r_AWREADY,
        s_axi_control_r_AWADDR,
        s_axi_control_r_WVALID,
        s_axi_control_r_WREADY,
        s_axi_control_r_WDATA,
        s_axi_control_r_WSTRB,
        s_axi_control_r_ARVALID,
        s_axi_control_r_ARREADY,
        s_axi_control_r_ARADDR,
        s_axi_control_r_RVALID,
        s_axi_control_r_RREADY,
        s_axi_control_r_RDATA,
        s_axi_control_r_RRESP,
        s_axi_control_r_BVALID,
        s_axi_control_r_BREADY,
        s_axi_control_r_BRESP
);

parameter    ap_ST_fsm_state1 = 306'd1;
parameter    ap_ST_fsm_state2 = 306'd2;
parameter    ap_ST_fsm_state3 = 306'd4;
parameter    ap_ST_fsm_state4 = 306'd8;
parameter    ap_ST_fsm_state5 = 306'd16;
parameter    ap_ST_fsm_state6 = 306'd32;
parameter    ap_ST_fsm_state7 = 306'd64;
parameter    ap_ST_fsm_state8 = 306'd128;
parameter    ap_ST_fsm_state9 = 306'd256;
parameter    ap_ST_fsm_state10 = 306'd512;
parameter    ap_ST_fsm_state11 = 306'd1024;
parameter    ap_ST_fsm_state12 = 306'd2048;
parameter    ap_ST_fsm_state13 = 306'd4096;
parameter    ap_ST_fsm_state14 = 306'd8192;
parameter    ap_ST_fsm_state15 = 306'd16384;
parameter    ap_ST_fsm_state16 = 306'd32768;
parameter    ap_ST_fsm_state17 = 306'd65536;
parameter    ap_ST_fsm_state18 = 306'd131072;
parameter    ap_ST_fsm_state19 = 306'd262144;
parameter    ap_ST_fsm_state20 = 306'd524288;
parameter    ap_ST_fsm_state21 = 306'd1048576;
parameter    ap_ST_fsm_state22 = 306'd2097152;
parameter    ap_ST_fsm_state23 = 306'd4194304;
parameter    ap_ST_fsm_state24 = 306'd8388608;
parameter    ap_ST_fsm_state25 = 306'd16777216;
parameter    ap_ST_fsm_state26 = 306'd33554432;
parameter    ap_ST_fsm_state27 = 306'd67108864;
parameter    ap_ST_fsm_state28 = 306'd134217728;
parameter    ap_ST_fsm_state29 = 306'd268435456;
parameter    ap_ST_fsm_state30 = 306'd536870912;
parameter    ap_ST_fsm_state31 = 306'd1073741824;
parameter    ap_ST_fsm_state32 = 306'd2147483648;
parameter    ap_ST_fsm_state33 = 306'd4294967296;
parameter    ap_ST_fsm_state34 = 306'd8589934592;
parameter    ap_ST_fsm_state35 = 306'd17179869184;
parameter    ap_ST_fsm_state36 = 306'd34359738368;
parameter    ap_ST_fsm_state37 = 306'd68719476736;
parameter    ap_ST_fsm_state38 = 306'd137438953472;
parameter    ap_ST_fsm_state39 = 306'd274877906944;
parameter    ap_ST_fsm_state40 = 306'd549755813888;
parameter    ap_ST_fsm_state41 = 306'd1099511627776;
parameter    ap_ST_fsm_state42 = 306'd2199023255552;
parameter    ap_ST_fsm_state43 = 306'd4398046511104;
parameter    ap_ST_fsm_state44 = 306'd8796093022208;
parameter    ap_ST_fsm_state45 = 306'd17592186044416;
parameter    ap_ST_fsm_state46 = 306'd35184372088832;
parameter    ap_ST_fsm_state47 = 306'd70368744177664;
parameter    ap_ST_fsm_state48 = 306'd140737488355328;
parameter    ap_ST_fsm_state49 = 306'd281474976710656;
parameter    ap_ST_fsm_state50 = 306'd562949953421312;
parameter    ap_ST_fsm_state51 = 306'd1125899906842624;
parameter    ap_ST_fsm_state52 = 306'd2251799813685248;
parameter    ap_ST_fsm_state53 = 306'd4503599627370496;
parameter    ap_ST_fsm_state54 = 306'd9007199254740992;
parameter    ap_ST_fsm_state55 = 306'd18014398509481984;
parameter    ap_ST_fsm_state56 = 306'd36028797018963968;
parameter    ap_ST_fsm_state57 = 306'd72057594037927936;
parameter    ap_ST_fsm_state58 = 306'd144115188075855872;
parameter    ap_ST_fsm_state59 = 306'd288230376151711744;
parameter    ap_ST_fsm_state60 = 306'd576460752303423488;
parameter    ap_ST_fsm_state61 = 306'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 306'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 306'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 306'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 306'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 306'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 306'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 306'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 306'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 306'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 306'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 306'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 306'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 306'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 306'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 306'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 306'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 306'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 306'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 306'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 306'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 306'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 306'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 306'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 306'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 306'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 306'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 306'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 306'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 306'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 306'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 306'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 306'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 306'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 306'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 306'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 306'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 306'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 306'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 306'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 306'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 306'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 306'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 306'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 306'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 306'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 306'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 306'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 306'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 306'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 306'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 306'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 306'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 306'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 306'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 306'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 306'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 306'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 306'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 306'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 306'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 306'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 306'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 306'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 306'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 306'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 306'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 306'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 306'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 306'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 306'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 306'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 306'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 306'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 306'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 306'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 306'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 306'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 306'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 306'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 306'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 306'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 306'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 306'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state145 = 306'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state146 = 306'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state147 = 306'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state148 = 306'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state149 = 306'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state150 = 306'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state151 = 306'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state152 = 306'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state153 = 306'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state154 = 306'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state155 = 306'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state156 = 306'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state157 = 306'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state158 = 306'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state159 = 306'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_state160 = 306'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state161 = 306'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state162 = 306'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_state163 = 306'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state164 = 306'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_state165 = 306'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_state166 = 306'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_state167 = 306'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_state168 = 306'd187072209578355573530071658587684226515959365500928;
parameter    ap_ST_fsm_state169 = 306'd374144419156711147060143317175368453031918731001856;
parameter    ap_ST_fsm_state170 = 306'd748288838313422294120286634350736906063837462003712;
parameter    ap_ST_fsm_state171 = 306'd1496577676626844588240573268701473812127674924007424;
parameter    ap_ST_fsm_state172 = 306'd2993155353253689176481146537402947624255349848014848;
parameter    ap_ST_fsm_state173 = 306'd5986310706507378352962293074805895248510699696029696;
parameter    ap_ST_fsm_state174 = 306'd11972621413014756705924586149611790497021399392059392;
parameter    ap_ST_fsm_state175 = 306'd23945242826029513411849172299223580994042798784118784;
parameter    ap_ST_fsm_state176 = 306'd47890485652059026823698344598447161988085597568237568;
parameter    ap_ST_fsm_state177 = 306'd95780971304118053647396689196894323976171195136475136;
parameter    ap_ST_fsm_state178 = 306'd191561942608236107294793378393788647952342390272950272;
parameter    ap_ST_fsm_state179 = 306'd383123885216472214589586756787577295904684780545900544;
parameter    ap_ST_fsm_state180 = 306'd766247770432944429179173513575154591809369561091801088;
parameter    ap_ST_fsm_state181 = 306'd1532495540865888858358347027150309183618739122183602176;
parameter    ap_ST_fsm_state182 = 306'd3064991081731777716716694054300618367237478244367204352;
parameter    ap_ST_fsm_state183 = 306'd6129982163463555433433388108601236734474956488734408704;
parameter    ap_ST_fsm_state184 = 306'd12259964326927110866866776217202473468949912977468817408;
parameter    ap_ST_fsm_state185 = 306'd24519928653854221733733552434404946937899825954937634816;
parameter    ap_ST_fsm_state186 = 306'd49039857307708443467467104868809893875799651909875269632;
parameter    ap_ST_fsm_state187 = 306'd98079714615416886934934209737619787751599303819750539264;
parameter    ap_ST_fsm_state188 = 306'd196159429230833773869868419475239575503198607639501078528;
parameter    ap_ST_fsm_state189 = 306'd392318858461667547739736838950479151006397215279002157056;
parameter    ap_ST_fsm_state190 = 306'd784637716923335095479473677900958302012794430558004314112;
parameter    ap_ST_fsm_state191 = 306'd1569275433846670190958947355801916604025588861116008628224;
parameter    ap_ST_fsm_state192 = 306'd3138550867693340381917894711603833208051177722232017256448;
parameter    ap_ST_fsm_state193 = 306'd6277101735386680763835789423207666416102355444464034512896;
parameter    ap_ST_fsm_state194 = 306'd12554203470773361527671578846415332832204710888928069025792;
parameter    ap_ST_fsm_state195 = 306'd25108406941546723055343157692830665664409421777856138051584;
parameter    ap_ST_fsm_state196 = 306'd50216813883093446110686315385661331328818843555712276103168;
parameter    ap_ST_fsm_state197 = 306'd100433627766186892221372630771322662657637687111424552206336;
parameter    ap_ST_fsm_state198 = 306'd200867255532373784442745261542645325315275374222849104412672;
parameter    ap_ST_fsm_state199 = 306'd401734511064747568885490523085290650630550748445698208825344;
parameter    ap_ST_fsm_state200 = 306'd803469022129495137770981046170581301261101496891396417650688;
parameter    ap_ST_fsm_state201 = 306'd1606938044258990275541962092341162602522202993782792835301376;
parameter    ap_ST_fsm_state202 = 306'd3213876088517980551083924184682325205044405987565585670602752;
parameter    ap_ST_fsm_state203 = 306'd6427752177035961102167848369364650410088811975131171341205504;
parameter    ap_ST_fsm_state204 = 306'd12855504354071922204335696738729300820177623950262342682411008;
parameter    ap_ST_fsm_state205 = 306'd25711008708143844408671393477458601640355247900524685364822016;
parameter    ap_ST_fsm_state206 = 306'd51422017416287688817342786954917203280710495801049370729644032;
parameter    ap_ST_fsm_state207 = 306'd102844034832575377634685573909834406561420991602098741459288064;
parameter    ap_ST_fsm_state208 = 306'd205688069665150755269371147819668813122841983204197482918576128;
parameter    ap_ST_fsm_state209 = 306'd411376139330301510538742295639337626245683966408394965837152256;
parameter    ap_ST_fsm_state210 = 306'd822752278660603021077484591278675252491367932816789931674304512;
parameter    ap_ST_fsm_state211 = 306'd1645504557321206042154969182557350504982735865633579863348609024;
parameter    ap_ST_fsm_state212 = 306'd3291009114642412084309938365114701009965471731267159726697218048;
parameter    ap_ST_fsm_state213 = 306'd6582018229284824168619876730229402019930943462534319453394436096;
parameter    ap_ST_fsm_state214 = 306'd13164036458569648337239753460458804039861886925068638906788872192;
parameter    ap_ST_fsm_state215 = 306'd26328072917139296674479506920917608079723773850137277813577744384;
parameter    ap_ST_fsm_state216 = 306'd52656145834278593348959013841835216159447547700274555627155488768;
parameter    ap_ST_fsm_state217 = 306'd105312291668557186697918027683670432318895095400549111254310977536;
parameter    ap_ST_fsm_state218 = 306'd210624583337114373395836055367340864637790190801098222508621955072;
parameter    ap_ST_fsm_state219 = 306'd421249166674228746791672110734681729275580381602196445017243910144;
parameter    ap_ST_fsm_state220 = 306'd842498333348457493583344221469363458551160763204392890034487820288;
parameter    ap_ST_fsm_state221 = 306'd1684996666696914987166688442938726917102321526408785780068975640576;
parameter    ap_ST_fsm_state222 = 306'd3369993333393829974333376885877453834204643052817571560137951281152;
parameter    ap_ST_fsm_state223 = 306'd6739986666787659948666753771754907668409286105635143120275902562304;
parameter    ap_ST_fsm_state224 = 306'd13479973333575319897333507543509815336818572211270286240551805124608;
parameter    ap_ST_fsm_state225 = 306'd26959946667150639794667015087019630673637144422540572481103610249216;
parameter    ap_ST_fsm_state226 = 306'd53919893334301279589334030174039261347274288845081144962207220498432;
parameter    ap_ST_fsm_state227 = 306'd107839786668602559178668060348078522694548577690162289924414440996864;
parameter    ap_ST_fsm_state228 = 306'd215679573337205118357336120696157045389097155380324579848828881993728;
parameter    ap_ST_fsm_state229 = 306'd431359146674410236714672241392314090778194310760649159697657763987456;
parameter    ap_ST_fsm_state230 = 306'd862718293348820473429344482784628181556388621521298319395315527974912;
parameter    ap_ST_fsm_state231 = 306'd1725436586697640946858688965569256363112777243042596638790631055949824;
parameter    ap_ST_fsm_state232 = 306'd3450873173395281893717377931138512726225554486085193277581262111899648;
parameter    ap_ST_fsm_state233 = 306'd6901746346790563787434755862277025452451108972170386555162524223799296;
parameter    ap_ST_fsm_state234 = 306'd13803492693581127574869511724554050904902217944340773110325048447598592;
parameter    ap_ST_fsm_state235 = 306'd27606985387162255149739023449108101809804435888681546220650096895197184;
parameter    ap_ST_fsm_state236 = 306'd55213970774324510299478046898216203619608871777363092441300193790394368;
parameter    ap_ST_fsm_state237 = 306'd110427941548649020598956093796432407239217743554726184882600387580788736;
parameter    ap_ST_fsm_state238 = 306'd220855883097298041197912187592864814478435487109452369765200775161577472;
parameter    ap_ST_fsm_state239 = 306'd441711766194596082395824375185729628956870974218904739530401550323154944;
parameter    ap_ST_fsm_state240 = 306'd883423532389192164791648750371459257913741948437809479060803100646309888;
parameter    ap_ST_fsm_state241 = 306'd1766847064778384329583297500742918515827483896875618958121606201292619776;
parameter    ap_ST_fsm_state242 = 306'd3533694129556768659166595001485837031654967793751237916243212402585239552;
parameter    ap_ST_fsm_state243 = 306'd7067388259113537318333190002971674063309935587502475832486424805170479104;
parameter    ap_ST_fsm_state244 = 306'd14134776518227074636666380005943348126619871175004951664972849610340958208;
parameter    ap_ST_fsm_state245 = 306'd28269553036454149273332760011886696253239742350009903329945699220681916416;
parameter    ap_ST_fsm_state246 = 306'd56539106072908298546665520023773392506479484700019806659891398441363832832;
parameter    ap_ST_fsm_state247 = 306'd113078212145816597093331040047546785012958969400039613319782796882727665664;
parameter    ap_ST_fsm_state248 = 306'd226156424291633194186662080095093570025917938800079226639565593765455331328;
parameter    ap_ST_fsm_state249 = 306'd452312848583266388373324160190187140051835877600158453279131187530910662656;
parameter    ap_ST_fsm_state250 = 306'd904625697166532776746648320380374280103671755200316906558262375061821325312;
parameter    ap_ST_fsm_state251 = 306'd1809251394333065553493296640760748560207343510400633813116524750123642650624;
parameter    ap_ST_fsm_state252 = 306'd3618502788666131106986593281521497120414687020801267626233049500247285301248;
parameter    ap_ST_fsm_state253 = 306'd7237005577332262213973186563042994240829374041602535252466099000494570602496;
parameter    ap_ST_fsm_state254 = 306'd14474011154664524427946373126085988481658748083205070504932198000989141204992;
parameter    ap_ST_fsm_state255 = 306'd28948022309329048855892746252171976963317496166410141009864396001978282409984;
parameter    ap_ST_fsm_state256 = 306'd57896044618658097711785492504343953926634992332820282019728792003956564819968;
parameter    ap_ST_fsm_state257 = 306'd115792089237316195423570985008687907853269984665640564039457584007913129639936;
parameter    ap_ST_fsm_state258 = 306'd231584178474632390847141970017375815706539969331281128078915168015826259279872;
parameter    ap_ST_fsm_state259 = 306'd463168356949264781694283940034751631413079938662562256157830336031652518559744;
parameter    ap_ST_fsm_state260 = 306'd926336713898529563388567880069503262826159877325124512315660672063305037119488;
parameter    ap_ST_fsm_state261 = 306'd1852673427797059126777135760139006525652319754650249024631321344126610074238976;
parameter    ap_ST_fsm_state262 = 306'd3705346855594118253554271520278013051304639509300498049262642688253220148477952;
parameter    ap_ST_fsm_state263 = 306'd7410693711188236507108543040556026102609279018600996098525285376506440296955904;
parameter    ap_ST_fsm_state264 = 306'd14821387422376473014217086081112052205218558037201992197050570753012880593911808;
parameter    ap_ST_fsm_state265 = 306'd29642774844752946028434172162224104410437116074403984394101141506025761187823616;
parameter    ap_ST_fsm_state266 = 306'd59285549689505892056868344324448208820874232148807968788202283012051522375647232;
parameter    ap_ST_fsm_state267 = 306'd118571099379011784113736688648896417641748464297615937576404566024103044751294464;
parameter    ap_ST_fsm_state268 = 306'd237142198758023568227473377297792835283496928595231875152809132048206089502588928;
parameter    ap_ST_fsm_state269 = 306'd474284397516047136454946754595585670566993857190463750305618264096412179005177856;
parameter    ap_ST_fsm_state270 = 306'd948568795032094272909893509191171341133987714380927500611236528192824358010355712;
parameter    ap_ST_fsm_state271 = 306'd1897137590064188545819787018382342682267975428761855001222473056385648716020711424;
parameter    ap_ST_fsm_state272 = 306'd3794275180128377091639574036764685364535950857523710002444946112771297432041422848;
parameter    ap_ST_fsm_state273 = 306'd7588550360256754183279148073529370729071901715047420004889892225542594864082845696;
parameter    ap_ST_fsm_state274 = 306'd15177100720513508366558296147058741458143803430094840009779784451085189728165691392;
parameter    ap_ST_fsm_state275 = 306'd30354201441027016733116592294117482916287606860189680019559568902170379456331382784;
parameter    ap_ST_fsm_state276 = 306'd60708402882054033466233184588234965832575213720379360039119137804340758912662765568;
parameter    ap_ST_fsm_state277 = 306'd121416805764108066932466369176469931665150427440758720078238275608681517825325531136;
parameter    ap_ST_fsm_state278 = 306'd242833611528216133864932738352939863330300854881517440156476551217363035650651062272;
parameter    ap_ST_fsm_state279 = 306'd485667223056432267729865476705879726660601709763034880312953102434726071301302124544;
parameter    ap_ST_fsm_state280 = 306'd971334446112864535459730953411759453321203419526069760625906204869452142602604249088;
parameter    ap_ST_fsm_state281 = 306'd1942668892225729070919461906823518906642406839052139521251812409738904285205208498176;
parameter    ap_ST_fsm_state282 = 306'd3885337784451458141838923813647037813284813678104279042503624819477808570410416996352;
parameter    ap_ST_fsm_state283 = 306'd7770675568902916283677847627294075626569627356208558085007249638955617140820833992704;
parameter    ap_ST_fsm_state284 = 306'd15541351137805832567355695254588151253139254712417116170014499277911234281641667985408;
parameter    ap_ST_fsm_state285 = 306'd31082702275611665134711390509176302506278509424834232340028998555822468563283335970816;
parameter    ap_ST_fsm_state286 = 306'd62165404551223330269422781018352605012557018849668464680057997111644937126566671941632;
parameter    ap_ST_fsm_state287 = 306'd124330809102446660538845562036705210025114037699336929360115994223289874253133343883264;
parameter    ap_ST_fsm_state288 = 306'd248661618204893321077691124073410420050228075398673858720231988446579748506266687766528;
parameter    ap_ST_fsm_state289 = 306'd497323236409786642155382248146820840100456150797347717440463976893159497012533375533056;
parameter    ap_ST_fsm_state290 = 306'd994646472819573284310764496293641680200912301594695434880927953786318994025066751066112;
parameter    ap_ST_fsm_state291 = 306'd1989292945639146568621528992587283360401824603189390869761855907572637988050133502132224;
parameter    ap_ST_fsm_state292 = 306'd3978585891278293137243057985174566720803649206378781739523711815145275976100267004264448;
parameter    ap_ST_fsm_state293 = 306'd7957171782556586274486115970349133441607298412757563479047423630290551952200534008528896;
parameter    ap_ST_fsm_state294 = 306'd15914343565113172548972231940698266883214596825515126958094847260581103904401068017057792;
parameter    ap_ST_fsm_state295 = 306'd31828687130226345097944463881396533766429193651030253916189694521162207808802136034115584;
parameter    ap_ST_fsm_state296 = 306'd63657374260452690195888927762793067532858387302060507832379389042324415617604272068231168;
parameter    ap_ST_fsm_state297 = 306'd127314748520905380391777855525586135065716774604121015664758778084648831235208544136462336;
parameter    ap_ST_fsm_state298 = 306'd254629497041810760783555711051172270131433549208242031329517556169297662470417088272924672;
parameter    ap_ST_fsm_state299 = 306'd509258994083621521567111422102344540262867098416484062659035112338595324940834176545849344;
parameter    ap_ST_fsm_state300 = 306'd1018517988167243043134222844204689080525734196832968125318070224677190649881668353091698688;
parameter    ap_ST_fsm_state301 = 306'd2037035976334486086268445688409378161051468393665936250636140449354381299763336706183397376;
parameter    ap_ST_fsm_state302 = 306'd4074071952668972172536891376818756322102936787331872501272280898708762599526673412366794752;
parameter    ap_ST_fsm_state303 = 306'd8148143905337944345073782753637512644205873574663745002544561797417525199053346824733589504;
parameter    ap_ST_fsm_state304 = 306'd16296287810675888690147565507275025288411747149327490005089123594835050398106693649467179008;
parameter    ap_ST_fsm_state305 = 306'd32592575621351777380295131014550050576823494298654980010178247189670100796213387298934358016;
parameter    ap_ST_fsm_state306 = 306'd65185151242703554760590262029100101153646988597309960020356494379340201592426774597868716032;
parameter    C_S_AXI_CONTROL_R_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_R_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_R_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input  [31:0] INPUT_r_TDATA;
input   INPUT_r_TVALID;
output   INPUT_r_TREADY;
input  [3:0] INPUT_r_TKEEP;
input  [3:0] INPUT_r_TSTRB;
input  [1:0] INPUT_r_TUSER;
input  [0:0] INPUT_r_TLAST;
input  [4:0] INPUT_r_TID;
input  [5:0] INPUT_r_TDEST;
output  [31:0] OUTPUT_r_TDATA;
output   OUTPUT_r_TVALID;
input   OUTPUT_r_TREADY;
output  [3:0] OUTPUT_r_TKEEP;
output  [3:0] OUTPUT_r_TSTRB;
output  [1:0] OUTPUT_r_TUSER;
output  [0:0] OUTPUT_r_TLAST;
output  [4:0] OUTPUT_r_TID;
output  [5:0] OUTPUT_r_TDEST;
input   s_axi_control_r_AWVALID;
output   s_axi_control_r_AWREADY;
input  [C_S_AXI_CONTROL_R_ADDR_WIDTH - 1:0] s_axi_control_r_AWADDR;
input   s_axi_control_r_WVALID;
output   s_axi_control_r_WREADY;
input  [C_S_AXI_CONTROL_R_DATA_WIDTH - 1:0] s_axi_control_r_WDATA;
input  [C_S_AXI_CONTROL_R_WSTRB_WIDTH - 1:0] s_axi_control_r_WSTRB;
input   s_axi_control_r_ARVALID;
output   s_axi_control_r_ARREADY;
input  [C_S_AXI_CONTROL_R_ADDR_WIDTH - 1:0] s_axi_control_r_ARADDR;
output   s_axi_control_r_RVALID;
input   s_axi_control_r_RREADY;
output  [C_S_AXI_CONTROL_R_DATA_WIDTH - 1:0] s_axi_control_r_RDATA;
output  [1:0] s_axi_control_r_RRESP;
output   s_axi_control_r_BVALID;
input   s_axi_control_r_BREADY;
output  [1:0] s_axi_control_r_BRESP;

 reg    ap_rst_n_inv;
reg    axilite_out_ap_vld;
wire   [7:0] control;
wire   [31:0] distortion_threshold;
wire   [7:0] distortion_clip_factor;
wire   [31:0] compression_min_threshold;
wire   [31:0] compression_max_threshold;
wire   [31:0] compression_zero_threshold;
wire   [31:0] delay_mult;
wire   [31:0] delay_samples;
wire   [31:0] tempo;
wire   [63:0] wah_coeffs;
reg    debug_output_ap_vld;
reg    gmem_blk_n_AR;
(* fsm_encoding = "none" *) reg   [305:0] ap_CS_fsm;
wire    ap_CS_fsm_state5;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state271;
wire    ap_CS_fsm_state291;
wire    ap_CS_fsm_state295;
wire    ap_CS_fsm_state302;
reg    INPUT_r_TDATA_blk_n;
wire    ap_CS_fsm_state14;
reg    OUTPUT_r_TDATA_blk_n;
wire    ap_CS_fsm_state304;
reg   [0:0] tmp_last_V_reg_2334;
wire    ap_CS_fsm_state305;
wire    ap_CS_fsm_state306;
wire   [31:0] grp_fu_792_p1;
reg   [31:0] reg_819;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state92;
wire    ap_CS_fsm_state108;
wire    ap_CS_fsm_state157;
wire   [31:0] grp_fu_788_p2;
reg   [31:0] reg_825;
wire   [31:0] grp_fu_784_p2;
reg   [31:0] reg_830;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state112;
wire    ap_CS_fsm_state161;
wire   [63:0] grp_fu_804_p2;
reg   [63:0] reg_834;
wire    ap_CS_fsm_state176;
wire    ap_CS_fsm_state183;
wire    ap_CS_fsm_state251;
wire    ap_CS_fsm_state265;
reg  signed [31:0] reg_841;
reg   [63:0] wah_coeffs_read_reg_2109;
wire    ap_CS_fsm_state1;
reg   [31:0] tempo_read_reg_2115;
reg   [31:0] delay_samples_read_reg_2120;
reg   [31:0] delay_mult_read_reg_2125;
reg   [31:0] compression_zero_threshold_read_reg_2130;
reg   [31:0] compression_max_threshold_read_reg_2135;
reg   [31:0] compression_min_threshold_read_reg_2141;
reg   [7:0] distortion_clip_factor_read_reg_2148;
reg   [31:0] distortion_threshold_read_reg_2153;
reg   [7:0] control_read_reg_2163;
wire   [0:0] trunc_ln23_fu_845_p1;
reg   [0:0] trunc_ln23_reg_2176;
reg   [0:0] tmp_reg_2255;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond3564_fu_922_p2;
reg   [0:0] tmp_12_reg_2259;
reg   [0:0] tmp_13_reg_2263;
reg   [31:0] gmem_addr_read_reg_2273;
wire   [31:0] negative_threshold_fu_1005_p2;
reg   [31:0] negative_threshold_reg_2278;
wire    ap_CS_fsm_state13;
wire  signed [39:0] conv7_i_i_i_fu_1010_p1;
reg  signed [39:0] conv7_i_i_i_reg_2283;
wire   [63:0] grp_fu_816_p1;
reg   [63:0] conv2_i_reg_2289;
reg   [31:0] conv18_i_reg_2294;
wire   [31:0] grp_fu_795_p1;
reg   [31:0] conv30_i_reg_2299;
reg   [3:0] tmp_keep_V_reg_2319;
reg   [3:0] tmp_strb_V_reg_2324;
reg   [1:0] tmp_user_V_reg_2329;
reg   [4:0] tmp_id_V_reg_2338;
reg   [5:0] tmp_dest_V_reg_2343;
wire   [31:0] current_sample_fu_1059_p2;
reg   [31:0] current_sample_reg_2348;
wire   [31:0] or_ln96_fu_1065_p2;
reg   [31:0] or_ln96_reg_2353;
wire   [31:0] r_V_fu_1081_p2;
reg  signed [31:0] r_V_reg_2369;
wire   [0:0] icmp_ln141_fu_1071_p2;
wire   [0:0] icmp_ln143_fu_1076_p2;
wire   [31:0] r_V_22_fu_1086_p2;
reg  signed [31:0] r_V_22_reg_2374;
wire    ap_CS_fsm_state15;
wire   [39:0] grp_fu_1094_p2;
reg   [39:0] r_V_36_reg_2384;
wire    ap_CS_fsm_state16;
reg   [31:0] ret_V_9_cast_reg_2389;
wire   [6:0] trunc_ln1049_1_fu_1109_p1;
reg   [6:0] trunc_ln1049_1_reg_2396;
wire   [31:0] result_1_fu_1144_p2;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire   [39:0] grp_fu_1152_p2;
reg   [39:0] r_V_35_reg_2411;
wire    ap_CS_fsm_state19;
reg   [31:0] ret_V_cast_reg_2416;
wire   [6:0] trunc_ln1049_fu_1167_p1;
reg   [6:0] trunc_ln1049_reg_2423;
wire   [31:0] result_fu_1202_p2;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire   [31:0] grp_fu_1244_p2;
reg   [31:0] compression_buffer_index_1_reg_2438;
wire    ap_CS_fsm_state56;
wire   [9:0] trunc_ln65_fu_1250_p1;
reg   [9:0] trunc_ln65_reg_2446;
wire   [0:0] icmp_ln174_fu_1254_p2;
reg   [0:0] icmp_ln174_reg_2451;
wire    ap_CS_fsm_state58;
wire   [31:0] or_ln101_fu_1259_p2;
reg   [31:0] or_ln101_reg_2456;
wire    ap_CS_fsm_state59;
wire   [31:0] current_level_fu_1268_p3;
wire   [0:0] icmp_ln182_fu_1275_p2;
reg   [0:0] icmp_ln182_reg_2473;
wire   [0:0] icmp_ln192_fu_1280_p2;
reg   [0:0] icmp_ln192_reg_2477;
wire   [0:0] and_ln191_1_fu_1302_p2;
reg   [0:0] and_ln191_1_reg_2481;
reg   [0:0] p_Result_45_reg_2485;
wire    ap_CS_fsm_state85;
wire   [22:0] p_Result_46_fu_1346_p1;
reg   [22:0] p_Result_46_reg_2490;
wire   [0:0] isNeg_2_fu_1360_p3;
reg   [0:0] isNeg_2_reg_2495;
wire   [8:0] ush_2_fu_1378_p3;
reg   [8:0] ush_2_reg_2500;
wire   [31:0] val_1_fu_1440_p3;
reg   [31:0] val_1_reg_2505;
wire    ap_CS_fsm_state86;
reg   [31:0] delay_buffer_index_load_reg_2511;
wire    ap_CS_fsm_state87;
reg   [0:0] p_Result_43_reg_2526;
wire    ap_CS_fsm_state113;
wire   [22:0] p_Result_44_fu_1519_p1;
reg   [22:0] p_Result_44_reg_2531;
wire   [0:0] isNeg_fu_1533_p3;
reg   [0:0] isNeg_reg_2536;
wire   [8:0] ush_fu_1551_p3;
reg   [8:0] ush_reg_2541;
wire   [31:0] val_fu_1613_p3;
reg   [31:0] val_reg_2546;
wire    ap_CS_fsm_state114;
wire   [16:0] grp_fu_1479_p2;
reg   [16:0] srem_ln210_reg_2552;
wire    ap_CS_fsm_state149;
wire    ap_CS_fsm_state150;
wire   [31:0] delay_buffer_q0;
reg   [31:0] delay_buffer_load_reg_2562;
wire    ap_CS_fsm_state151;
wire   [31:0] data_V_2_fu_1633_p1;
reg   [31:0] data_V_2_reg_2567;
wire    ap_CS_fsm_state162;
wire   [22:0] p_Result_48_fu_1647_p1;
reg   [22:0] p_Result_48_reg_2572;
wire   [0:0] isNeg_3_fu_1661_p3;
reg   [0:0] isNeg_3_reg_2577;
wire   [8:0] ush_3_fu_1679_p3;
reg   [8:0] ush_3_reg_2582;
wire   [31:0] val_2_fu_1741_p3;
reg   [31:0] val_2_reg_2587;
wire    ap_CS_fsm_state163;
wire   [31:0] result_V_9_fu_1748_p2;
reg   [31:0] result_V_9_reg_2592;
wire   [31:0] shl_ln230_fu_1787_p2;
wire    ap_CS_fsm_state164;
reg   [63:0] conv_i2_reg_2602;
wire    ap_CS_fsm_state169;
wire    ap_CS_fsm_state242;
wire   [63:0] grp_fu_811_p2;
reg   [63:0] x_assign_reg_2612;
wire   [63:0] grp_sin_or_cos_double_s_fu_767_ap_return;
reg   [63:0] tmp_2_reg_2617;
wire    ap_CS_fsm_state244;
wire   [63:0] grp_fu_799_p2;
reg   [63:0] add5_i_reg_2622;
wire    ap_CS_fsm_state258;
reg   [0:0] p_Result_49_reg_2627;
wire    ap_CS_fsm_state266;
wire   [31:0] val_3_fu_1931_p3;
reg   [31:0] val_3_reg_2632;
wire   [31:0] result_V_16_fu_1944_p3;
reg  signed [31:0] result_V_16_reg_2638;
wire    ap_CS_fsm_state267;
wire    ap_CS_fsm_state268;
wire   [41:0] grp_fu_1953_p2;
reg   [41:0] mul_ln238_reg_2648;
wire    ap_CS_fsm_state269;
reg   [63:0] gmem_addr_1_reg_2653;
wire    ap_CS_fsm_state270;
wire   [31:0] or_ln111_fu_1987_p2;
reg   [31:0] or_ln111_reg_2659;
wire    ap_CS_fsm_state277;
wire   [31:0] grp_fu_1807_p2;
reg   [31:0] wah_buffer_index_1_reg_2665;
wire  signed [8:0] sext_ln77_fu_1997_p1;
reg  signed [8:0] sext_ln77_reg_2670;
wire   [6:0] add_ln238_1_fu_2007_p2;
reg   [6:0] add_ln238_1_reg_2678;
wire    ap_CS_fsm_state278;
wire   [0:0] icmp_ln238_fu_2001_p2;
wire    ap_CS_fsm_state290;
wire   [31:0] wah_values_buffer_q0;
reg  signed [31:0] r_V_33_reg_2693;
wire    ap_CS_fsm_state292;
wire   [63:0] grp_fu_2048_p2;
reg   [63:0] r_V_37_reg_2708;
wire    ap_CS_fsm_state293;
wire   [7:0] result_3_fu_2069_p2;
wire    ap_CS_fsm_state294;
wire  signed [31:0] sext_ln238_3_fu_2075_p1;
wire    ap_CS_fsm_state303;
reg   [8:0] compression_buffer_address0;
reg    compression_buffer_ce0;
reg    compression_buffer_we0;
reg   [31:0] compression_buffer_d0;
wire   [31:0] compression_buffer_q0;
reg   [16:0] delay_buffer_address0;
reg    delay_buffer_ce0;
reg    delay_buffer_we0;
reg   [31:0] delay_buffer_d0;
reg   [6:0] wah_values_buffer_address0;
reg    wah_values_buffer_ce0;
reg    wah_values_buffer_we0;
reg   [31:0] wah_values_buffer_d0;
wire    grp_guitar_effects_Pipeline_LPF_Loop_fu_758_ap_start;
wire    grp_guitar_effects_Pipeline_LPF_Loop_fu_758_ap_done;
wire    grp_guitar_effects_Pipeline_LPF_Loop_fu_758_ap_idle;
wire    grp_guitar_effects_Pipeline_LPF_Loop_fu_758_ap_ready;
wire   [8:0] grp_guitar_effects_Pipeline_LPF_Loop_fu_758_compression_buffer_address0;
wire    grp_guitar_effects_Pipeline_LPF_Loop_fu_758_compression_buffer_ce0;
wire   [31:0] grp_guitar_effects_Pipeline_LPF_Loop_fu_758_p_out;
wire    grp_guitar_effects_Pipeline_LPF_Loop_fu_758_p_out_ap_vld;
wire   [31:0] grp_guitar_effects_Pipeline_LPF_Loop_fu_758_grp_fu_784_p_din0;
wire   [31:0] grp_guitar_effects_Pipeline_LPF_Loop_fu_758_grp_fu_784_p_din1;
wire    grp_guitar_effects_Pipeline_LPF_Loop_fu_758_grp_fu_784_p_ce;
wire   [31:0] grp_guitar_effects_Pipeline_LPF_Loop_fu_758_grp_fu_792_p_din0;
wire    grp_guitar_effects_Pipeline_LPF_Loop_fu_758_grp_fu_792_p_ce;
wire    grp_sin_or_cos_double_s_fu_767_ap_start;
wire    grp_sin_or_cos_double_s_fu_767_ap_done;
wire    grp_sin_or_cos_double_s_fu_767_ap_idle;
wire    grp_sin_or_cos_double_s_fu_767_ap_ready;
wire    gmem_AWREADY;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire   [8:0] gmem_RFIFONUM;
wire    gmem_BVALID;
reg   [31:0] axilite_out_local_1_reg_572;
reg   [31:0] empty_78_reg_586;
wire   [31:0] ap_phi_mux_tmp_int_7_phi_fu_603_p8;
reg   [31:0] tmp_int_7_reg_600;
reg   [31:0] ap_phi_mux_axilite_out_local_2_phi_fu_617_p10;
reg   [31:0] axilite_out_local_2_reg_614;
reg   [31:0] ap_phi_mux_empty_79_phi_fu_634_p10;
reg   [31:0] empty_79_reg_631;
wire   [31:0] result_V_14_fu_1464_p3;
reg   [31:0] ap_phi_mux_tmp_int_3_phi_fu_651_p10;
reg   [31:0] tmp_int_3_reg_648;
wire   [31:0] result_V_fu_1452_p3;
wire   [31:0] or_ln106_fu_1754_p2;
reg   [31:0] ap_phi_mux_axilite_out_local_3_phi_fu_670_p4;
reg   [31:0] axilite_out_local_3_reg_667;
reg   [31:0] ap_phi_mux_empty_80_phi_fu_681_p4;
reg   [31:0] empty_80_reg_678;
wire   [31:0] output_fu_1775_p2;
reg   [31:0] ap_phi_mux_tmp_int_phi_fu_693_p4;
reg   [31:0] tmp_int_reg_689;
reg   [6:0] i_reg_701;
reg  signed [7:0] result_2_reg_712;
reg   [31:0] axilite_out_local_4_reg_724;
reg   [31:0] empty_83_reg_735;
reg   [31:0] tmp_int_8_reg_745;
reg    grp_guitar_effects_Pipeline_LPF_Loop_fu_758_ap_start_reg;
wire    ap_CS_fsm_state57;
reg    grp_sin_or_cos_double_s_fu_767_ap_start_reg;
wire    ap_CS_fsm_state243;
wire   [63:0] p_cast_fu_857_p1;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond3628_fu_862_p2;
wire   [63:0] p_cast5_fu_887_p1;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond3575_fu_892_p2;
wire   [63:0] p_cast6_fu_917_p1;
wire   [63:0] zext_ln163_fu_1233_p1;
wire   [63:0] zext_ln210_fu_1628_p1;
wire   [63:0] zext_ln213_fu_1783_p1;
wire   [63:0] zext_ln226_fu_1796_p1;
wire   [63:0] zext_ln241_fu_2036_p1;
wire  signed [63:0] sext_ln85_fu_994_p1;
wire  signed [63:0] sext_ln238_fu_1977_p1;
reg   [8:0] empty_fu_296;
wire   [8:0] empty_69_fu_868_p2;
reg   [16:0] empty_70_fu_316;
wire   [16:0] empty_72_fu_898_p2;
reg   [6:0] empty_73_fu_320;
wire   [6:0] empty_75_fu_928_p2;
reg   [31:0] current_sample_1_fu_324;
reg    ap_block_state304;
reg    ap_block_state304_io;
reg   [31:0] empty_76_fu_328;
reg   [31:0] wah_buffer_index_fu_332;
reg   [31:0] delay_buffer_index_fu_336;
wire   [31:0] grp_fu_1491_p2;
reg   [31:0] compression_buffer_index_fu_340;
reg   [31:0] debug_output_local_0_fu_344;
reg   [31:0] axilite_out_local_0_fu_348;
wire   [31:0] abs_in_1_fu_1224_p3;
reg   [31:0] grp_fu_784_p0;
reg   [31:0] grp_fu_784_p1;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state109;
wire    ap_CS_fsm_state158;
reg   [31:0] grp_fu_788_p0;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state93;
reg   [31:0] grp_fu_792_p0;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state103;
wire    ap_CS_fsm_state152;
wire    ap_CS_fsm_state252;
reg   [63:0] grp_fu_804_p0;
reg   [63:0] grp_fu_804_p1;
wire    ap_CS_fsm_state170;
wire    ap_CS_fsm_state177;
wire    ap_CS_fsm_state245;
wire    ap_CS_fsm_state259;
wire    ap_CS_fsm_state184;
reg   [31:0] grp_fu_816_p0;
wire   [61:0] trunc_ln6_fu_985_p4;
wire  signed [7:0] grp_fu_1094_p1;
wire   [0:0] icmp_ln1049_1_fu_1120_p2;
wire   [31:0] ret_V_10_fu_1125_p2;
wire   [0:0] p_Result_29_fu_1113_p3;
wire   [31:0] select_ln1048_1_fu_1130_p3;
wire   [31:0] ret_V_11_fu_1137_p3;
wire  signed [7:0] grp_fu_1152_p1;
wire   [0:0] icmp_ln1049_fu_1178_p2;
wire   [31:0] ret_V_fu_1183_p2;
wire   [0:0] p_Result_s_fu_1171_p3;
wire   [31:0] select_ln1048_fu_1188_p3;
wire   [31:0] ret_V_9_fu_1195_p3;
wire   [0:0] tmp_17_fu_1210_p3;
wire   [31:0] sub_ln159_fu_1218_p2;
wire   [31:0] grp_fu_1244_p0;
wire   [9:0] grp_fu_1244_p1;
wire   [0:0] icmp_ln191_1_fu_1291_p2;
wire   [0:0] and_ln191_fu_1296_p2;
wire   [0:0] icmp_ln191_fu_1286_p2;
wire   [31:0] data_V_1_fu_1324_p1;
wire   [7:0] xs_exp_V_1_fu_1336_p4;
wire   [8:0] zext_ln346_1_fu_1350_p1;
wire   [8:0] add_ln346_1_fu_1354_p2;
wire   [7:0] sub_ln1512_4_fu_1368_p2;
wire  signed [8:0] sext_ln1512_1_fu_1374_p1;
wire   [24:0] mantissa_1_fu_1386_p4;
wire  signed [31:0] sext_ln1488_1_fu_1399_p1;
wire   [78:0] zext_ln15_1_fu_1395_p1;
wire   [78:0] zext_ln1488_2_fu_1402_p1;
wire   [78:0] r_V_27_fu_1406_p2;
wire   [0:0] tmp_26_fu_1418_p3;
wire   [78:0] r_V_28_fu_1412_p2;
wire   [31:0] zext_ln818_1_fu_1426_p1;
wire   [31:0] tmp_s_fu_1430_p4;
wire   [31:0] result_V_6_fu_1447_p2;
wire   [31:0] result_V_5_fu_1459_p2;
wire   [31:0] grp_fu_1479_p0;
wire   [17:0] grp_fu_1479_p1;
wire   [31:0] grp_fu_1491_p0;
wire   [17:0] grp_fu_1491_p1;
wire   [31:0] data_V_fu_1497_p1;
wire   [7:0] xs_exp_V_fu_1509_p4;
wire   [8:0] zext_ln346_fu_1523_p1;
wire   [8:0] add_ln346_fu_1527_p2;
wire   [7:0] sub_ln1512_3_fu_1541_p2;
wire  signed [8:0] sext_ln1512_fu_1547_p1;
wire   [24:0] mantissa_fu_1559_p4;
wire  signed [31:0] sext_ln1488_fu_1572_p1;
wire   [78:0] zext_ln15_fu_1568_p1;
wire   [78:0] zext_ln1488_fu_1575_p1;
wire   [78:0] r_V_25_fu_1579_p2;
wire   [0:0] tmp_22_fu_1591_p3;
wire   [78:0] r_V_26_fu_1585_p2;
wire   [31:0] zext_ln818_fu_1599_p1;
wire   [31:0] tmp_8_fu_1603_p4;
wire   [16:0] trunc_ln210_fu_1625_p1;
wire   [7:0] xs_exp_V_3_fu_1637_p4;
wire   [8:0] zext_ln346_2_fu_1651_p1;
wire   [8:0] add_ln346_2_fu_1655_p2;
wire   [7:0] sub_ln1512_fu_1669_p2;
wire  signed [8:0] sext_ln1512_2_fu_1675_p1;
wire   [24:0] mantissa_2_fu_1687_p4;
wire  signed [31:0] sext_ln1488_2_fu_1700_p1;
wire   [78:0] zext_ln15_2_fu_1696_p1;
wire   [78:0] zext_ln1488_3_fu_1703_p1;
wire   [78:0] r_V_29_fu_1707_p2;
wire   [0:0] tmp_30_fu_1719_p3;
wire   [78:0] r_V_30_fu_1713_p2;
wire   [31:0] zext_ln818_2_fu_1727_p1;
wire   [31:0] tmp_3_fu_1731_p4;
wire   [0:0] p_Result_47_fu_1762_p3;
wire   [31:0] result_V_15_fu_1769_p3;
wire   [31:0] grp_fu_1807_p0;
wire   [7:0] grp_fu_1807_p1;
wire   [63:0] data_V_3_fu_1813_p1;
wire   [51:0] p_Result_50_fu_1835_p1;
wire   [53:0] mantissa_3_fu_1839_p4;
wire   [10:0] xs_exp_V_4_fu_1825_p4;
wire   [11:0] zext_ln515_fu_1853_p1;
wire   [11:0] add_ln515_fu_1857_p2;
wire   [10:0] sub_ln1512_2_fu_1871_p2;
wire   [0:0] isNeg_4_fu_1863_p3;
wire  signed [11:0] sext_ln1512_3_fu_1877_p1;
wire   [11:0] ush_4_fu_1881_p3;
wire  signed [31:0] sext_ln1488_3_fu_1889_p1;
wire   [136:0] zext_ln15_3_fu_1849_p1;
wire   [136:0] zext_ln1488_4_fu_1893_p1;
wire   [136:0] r_V_31_fu_1897_p2;
wire   [0:0] tmp_34_fu_1909_p3;
wire   [136:0] r_V_32_fu_1903_p2;
wire   [31:0] zext_ln818_3_fu_1917_p1;
wire   [31:0] tmp_4_fu_1921_p4;
wire   [31:0] result_V_12_fu_1939_p2;
wire   [9:0] grp_fu_1953_p1;
wire  signed [63:0] sext_ln238_2_fu_1959_p1;
wire   [63:0] add_ln238_fu_1962_p2;
wire   [61:0] trunc_ln_fu_1967_p4;
wire   [7:0] trunc_ln77_fu_1993_p1;
wire   [8:0] zext_ln240_fu_2013_p1;
wire   [8:0] grp_fu_2022_p0;
wire   [7:0] grp_fu_2022_p1;
wire   [6:0] grp_fu_2022_p2;
wire   [6:0] trunc_ln241_fu_2032_p1;
wire   [0:0] tmp_35_fu_2054_p3;
wire   [7:0] select_ln241_fu_2061_p3;
reg    grp_fu_784_ce;
reg    grp_fu_792_ce;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state89;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state91;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state104;
wire    ap_CS_fsm_state105;
wire    ap_CS_fsm_state106;
wire    ap_CS_fsm_state107;
wire    ap_CS_fsm_state153;
wire    ap_CS_fsm_state154;
wire    ap_CS_fsm_state155;
wire    ap_CS_fsm_state156;
reg    grp_fu_795_ce;
reg    grp_fu_816_ce;
wire    ap_CS_fsm_state165;
wire    ap_CS_fsm_state166;
wire    ap_CS_fsm_state167;
wire    ap_CS_fsm_state168;
reg    grp_fu_1244_ap_start;
wire    grp_fu_1244_ap_done;
reg    grp_fu_1479_ap_start;
wire    grp_fu_1479_ap_done;
reg    grp_fu_1491_ap_start;
wire    grp_fu_1491_ap_done;
reg    grp_fu_1807_ap_start;
wire    grp_fu_1807_ap_done;
reg    grp_fu_1807_ce;
wire    ap_CS_fsm_state246;
wire    ap_CS_fsm_state247;
wire    ap_CS_fsm_state248;
wire    ap_CS_fsm_state249;
wire    ap_CS_fsm_state250;
wire    ap_CS_fsm_state253;
wire    ap_CS_fsm_state254;
wire    ap_CS_fsm_state255;
wire    ap_CS_fsm_state256;
wire    ap_CS_fsm_state257;
wire    ap_CS_fsm_state260;
wire    ap_CS_fsm_state261;
wire    ap_CS_fsm_state262;
wire    ap_CS_fsm_state263;
wire    ap_CS_fsm_state264;
wire    ap_CS_fsm_state272;
wire    ap_CS_fsm_state273;
wire    ap_CS_fsm_state274;
wire    ap_CS_fsm_state275;
wire    ap_CS_fsm_state276;
reg    grp_fu_2022_ap_start;
wire    grp_fu_2022_ap_done;
reg   [305:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
reg    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
wire    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
wire    ap_ST_fsm_state80_blk;
wire    ap_ST_fsm_state81_blk;
wire    ap_ST_fsm_state82_blk;
wire    ap_ST_fsm_state83_blk;
wire    ap_ST_fsm_state84_blk;
wire    ap_ST_fsm_state85_blk;
wire    ap_ST_fsm_state86_blk;
wire    ap_ST_fsm_state87_blk;
wire    ap_ST_fsm_state88_blk;
wire    ap_ST_fsm_state89_blk;
wire    ap_ST_fsm_state90_blk;
wire    ap_ST_fsm_state91_blk;
wire    ap_ST_fsm_state92_blk;
wire    ap_ST_fsm_state93_blk;
wire    ap_ST_fsm_state94_blk;
wire    ap_ST_fsm_state95_blk;
wire    ap_ST_fsm_state96_blk;
wire    ap_ST_fsm_state97_blk;
wire    ap_ST_fsm_state98_blk;
wire    ap_ST_fsm_state99_blk;
wire    ap_ST_fsm_state100_blk;
wire    ap_ST_fsm_state101_blk;
wire    ap_ST_fsm_state102_blk;
wire    ap_ST_fsm_state103_blk;
wire    ap_ST_fsm_state104_blk;
wire    ap_ST_fsm_state105_blk;
wire    ap_ST_fsm_state106_blk;
wire    ap_ST_fsm_state107_blk;
wire    ap_ST_fsm_state108_blk;
wire    ap_ST_fsm_state109_blk;
wire    ap_ST_fsm_state110_blk;
wire    ap_ST_fsm_state111_blk;
wire    ap_ST_fsm_state112_blk;
wire    ap_ST_fsm_state113_blk;
wire    ap_ST_fsm_state114_blk;
wire    ap_ST_fsm_state115_blk;
wire    ap_ST_fsm_state116_blk;
wire    ap_ST_fsm_state117_blk;
wire    ap_ST_fsm_state118_blk;
wire    ap_ST_fsm_state119_blk;
wire    ap_ST_fsm_state120_blk;
wire    ap_ST_fsm_state121_blk;
wire    ap_ST_fsm_state122_blk;
wire    ap_ST_fsm_state123_blk;
wire    ap_ST_fsm_state124_blk;
wire    ap_ST_fsm_state125_blk;
wire    ap_ST_fsm_state126_blk;
wire    ap_ST_fsm_state127_blk;
wire    ap_ST_fsm_state128_blk;
wire    ap_ST_fsm_state129_blk;
wire    ap_ST_fsm_state130_blk;
wire    ap_ST_fsm_state131_blk;
wire    ap_ST_fsm_state132_blk;
wire    ap_ST_fsm_state133_blk;
wire    ap_ST_fsm_state134_blk;
wire    ap_ST_fsm_state135_blk;
wire    ap_ST_fsm_state136_blk;
wire    ap_ST_fsm_state137_blk;
wire    ap_ST_fsm_state138_blk;
wire    ap_ST_fsm_state139_blk;
wire    ap_ST_fsm_state140_blk;
wire    ap_ST_fsm_state141_blk;
wire    ap_ST_fsm_state142_blk;
wire    ap_ST_fsm_state143_blk;
wire    ap_ST_fsm_state144_blk;
wire    ap_ST_fsm_state145_blk;
wire    ap_ST_fsm_state146_blk;
wire    ap_ST_fsm_state147_blk;
wire    ap_ST_fsm_state148_blk;
wire    ap_ST_fsm_state149_blk;
wire    ap_ST_fsm_state150_blk;
wire    ap_ST_fsm_state151_blk;
wire    ap_ST_fsm_state152_blk;
wire    ap_ST_fsm_state153_blk;
wire    ap_ST_fsm_state154_blk;
wire    ap_ST_fsm_state155_blk;
wire    ap_ST_fsm_state156_blk;
wire    ap_ST_fsm_state157_blk;
wire    ap_ST_fsm_state158_blk;
wire    ap_ST_fsm_state159_blk;
wire    ap_ST_fsm_state160_blk;
wire    ap_ST_fsm_state161_blk;
wire    ap_ST_fsm_state162_blk;
wire    ap_ST_fsm_state163_blk;
wire    ap_ST_fsm_state164_blk;
wire    ap_ST_fsm_state165_blk;
wire    ap_ST_fsm_state166_blk;
wire    ap_ST_fsm_state167_blk;
wire    ap_ST_fsm_state168_blk;
wire    ap_ST_fsm_state169_blk;
wire    ap_ST_fsm_state170_blk;
wire    ap_ST_fsm_state171_blk;
wire    ap_ST_fsm_state172_blk;
wire    ap_ST_fsm_state173_blk;
wire    ap_ST_fsm_state174_blk;
wire    ap_ST_fsm_state175_blk;
wire    ap_ST_fsm_state176_blk;
wire    ap_ST_fsm_state177_blk;
wire    ap_ST_fsm_state178_blk;
wire    ap_ST_fsm_state179_blk;
wire    ap_ST_fsm_state180_blk;
wire    ap_ST_fsm_state181_blk;
wire    ap_ST_fsm_state182_blk;
wire    ap_ST_fsm_state183_blk;
wire    ap_ST_fsm_state184_blk;
wire    ap_ST_fsm_state185_blk;
wire    ap_ST_fsm_state186_blk;
wire    ap_ST_fsm_state187_blk;
wire    ap_ST_fsm_state188_blk;
wire    ap_ST_fsm_state189_blk;
wire    ap_ST_fsm_state190_blk;
wire    ap_ST_fsm_state191_blk;
wire    ap_ST_fsm_state192_blk;
wire    ap_ST_fsm_state193_blk;
wire    ap_ST_fsm_state194_blk;
wire    ap_ST_fsm_state195_blk;
wire    ap_ST_fsm_state196_blk;
wire    ap_ST_fsm_state197_blk;
wire    ap_ST_fsm_state198_blk;
wire    ap_ST_fsm_state199_blk;
wire    ap_ST_fsm_state200_blk;
wire    ap_ST_fsm_state201_blk;
wire    ap_ST_fsm_state202_blk;
wire    ap_ST_fsm_state203_blk;
wire    ap_ST_fsm_state204_blk;
wire    ap_ST_fsm_state205_blk;
wire    ap_ST_fsm_state206_blk;
wire    ap_ST_fsm_state207_blk;
wire    ap_ST_fsm_state208_blk;
wire    ap_ST_fsm_state209_blk;
wire    ap_ST_fsm_state210_blk;
wire    ap_ST_fsm_state211_blk;
wire    ap_ST_fsm_state212_blk;
wire    ap_ST_fsm_state213_blk;
wire    ap_ST_fsm_state214_blk;
wire    ap_ST_fsm_state215_blk;
wire    ap_ST_fsm_state216_blk;
wire    ap_ST_fsm_state217_blk;
wire    ap_ST_fsm_state218_blk;
wire    ap_ST_fsm_state219_blk;
wire    ap_ST_fsm_state220_blk;
wire    ap_ST_fsm_state221_blk;
wire    ap_ST_fsm_state222_blk;
wire    ap_ST_fsm_state223_blk;
wire    ap_ST_fsm_state224_blk;
wire    ap_ST_fsm_state225_blk;
wire    ap_ST_fsm_state226_blk;
wire    ap_ST_fsm_state227_blk;
wire    ap_ST_fsm_state228_blk;
wire    ap_ST_fsm_state229_blk;
wire    ap_ST_fsm_state230_blk;
wire    ap_ST_fsm_state231_blk;
wire    ap_ST_fsm_state232_blk;
wire    ap_ST_fsm_state233_blk;
wire    ap_ST_fsm_state234_blk;
wire    ap_ST_fsm_state235_blk;
wire    ap_ST_fsm_state236_blk;
wire    ap_ST_fsm_state237_blk;
wire    ap_ST_fsm_state238_blk;
wire    ap_ST_fsm_state239_blk;
wire    ap_ST_fsm_state240_blk;
wire    ap_ST_fsm_state241_blk;
wire    ap_ST_fsm_state242_blk;
wire    ap_ST_fsm_state243_blk;
reg    ap_ST_fsm_state244_blk;
wire    ap_ST_fsm_state245_blk;
wire    ap_ST_fsm_state246_blk;
wire    ap_ST_fsm_state247_blk;
wire    ap_ST_fsm_state248_blk;
wire    ap_ST_fsm_state249_blk;
wire    ap_ST_fsm_state250_blk;
wire    ap_ST_fsm_state251_blk;
wire    ap_ST_fsm_state252_blk;
wire    ap_ST_fsm_state253_blk;
wire    ap_ST_fsm_state254_blk;
wire    ap_ST_fsm_state255_blk;
wire    ap_ST_fsm_state256_blk;
wire    ap_ST_fsm_state257_blk;
wire    ap_ST_fsm_state258_blk;
wire    ap_ST_fsm_state259_blk;
wire    ap_ST_fsm_state260_blk;
wire    ap_ST_fsm_state261_blk;
wire    ap_ST_fsm_state262_blk;
wire    ap_ST_fsm_state263_blk;
wire    ap_ST_fsm_state264_blk;
wire    ap_ST_fsm_state265_blk;
wire    ap_ST_fsm_state266_blk;
wire    ap_ST_fsm_state267_blk;
wire    ap_ST_fsm_state268_blk;
wire    ap_ST_fsm_state269_blk;
wire    ap_ST_fsm_state270_blk;
reg    ap_ST_fsm_state271_blk;
wire    ap_ST_fsm_state272_blk;
wire    ap_ST_fsm_state273_blk;
wire    ap_ST_fsm_state274_blk;
wire    ap_ST_fsm_state275_blk;
wire    ap_ST_fsm_state276_blk;
wire    ap_ST_fsm_state277_blk;
wire    ap_ST_fsm_state278_blk;
wire    ap_ST_fsm_state279_blk;
wire    ap_ST_fsm_state280_blk;
wire    ap_ST_fsm_state281_blk;
wire    ap_ST_fsm_state282_blk;
wire    ap_ST_fsm_state283_blk;
wire    ap_ST_fsm_state284_blk;
wire    ap_ST_fsm_state285_blk;
wire    ap_ST_fsm_state286_blk;
wire    ap_ST_fsm_state287_blk;
wire    ap_ST_fsm_state288_blk;
wire    ap_ST_fsm_state289_blk;
wire    ap_ST_fsm_state290_blk;
reg    ap_ST_fsm_state291_blk;
wire    ap_ST_fsm_state292_blk;
wire    ap_ST_fsm_state293_blk;
wire    ap_ST_fsm_state294_blk;
reg    ap_ST_fsm_state295_blk;
wire    ap_ST_fsm_state296_blk;
wire    ap_ST_fsm_state297_blk;
wire    ap_ST_fsm_state298_blk;
wire    ap_ST_fsm_state299_blk;
wire    ap_ST_fsm_state300_blk;
wire    ap_ST_fsm_state301_blk;
reg    ap_ST_fsm_state302_blk;
wire    ap_ST_fsm_state303_blk;
reg    ap_ST_fsm_state304_blk;
reg    ap_ST_fsm_state305_blk;
reg    ap_ST_fsm_state306_blk;
wire    regslice_both_OUTPUT_r_V_data_V_U_apdone_blk;
reg    ap_block_state306;
wire    regslice_both_INPUT_r_V_data_V_U_apdone_blk;
wire   [31:0] INPUT_r_TDATA_int_regslice;
wire    INPUT_r_TVALID_int_regslice;
reg    INPUT_r_TREADY_int_regslice;
wire    regslice_both_INPUT_r_V_data_V_U_ack_in;
wire    regslice_both_INPUT_r_V_keep_V_U_apdone_blk;
wire   [3:0] INPUT_r_TKEEP_int_regslice;
wire    regslice_both_INPUT_r_V_keep_V_U_vld_out;
wire    regslice_both_INPUT_r_V_keep_V_U_ack_in;
wire    regslice_both_INPUT_r_V_strb_V_U_apdone_blk;
wire   [3:0] INPUT_r_TSTRB_int_regslice;
wire    regslice_both_INPUT_r_V_strb_V_U_vld_out;
wire    regslice_both_INPUT_r_V_strb_V_U_ack_in;
wire    regslice_both_INPUT_r_V_user_V_U_apdone_blk;
wire   [1:0] INPUT_r_TUSER_int_regslice;
wire    regslice_both_INPUT_r_V_user_V_U_vld_out;
wire    regslice_both_INPUT_r_V_user_V_U_ack_in;
wire    regslice_both_INPUT_r_V_last_V_U_apdone_blk;
wire   [0:0] INPUT_r_TLAST_int_regslice;
wire    regslice_both_INPUT_r_V_last_V_U_vld_out;
wire    regslice_both_INPUT_r_V_last_V_U_ack_in;
wire    regslice_both_INPUT_r_V_id_V_U_apdone_blk;
wire   [4:0] INPUT_r_TID_int_regslice;
wire    regslice_both_INPUT_r_V_id_V_U_vld_out;
wire    regslice_both_INPUT_r_V_id_V_U_ack_in;
wire    regslice_both_INPUT_r_V_dest_V_U_apdone_blk;
wire   [5:0] INPUT_r_TDEST_int_regslice;
wire    regslice_both_INPUT_r_V_dest_V_U_vld_out;
wire    regslice_both_INPUT_r_V_dest_V_U_ack_in;
reg    OUTPUT_r_TVALID_int_regslice;
wire    OUTPUT_r_TREADY_int_regslice;
wire    regslice_both_OUTPUT_r_V_data_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_keep_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_keep_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_keep_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_strb_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_strb_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_strb_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_user_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_user_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_user_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_last_V_U_apdone_blk;
reg   [0:0] OUTPUT_r_TLAST_int_regslice;
wire    regslice_both_OUTPUT_r_V_last_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_last_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_id_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_id_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_id_V_U_vld_out;
wire    regslice_both_OUTPUT_r_V_dest_V_U_apdone_blk;
wire    regslice_both_OUTPUT_r_V_dest_V_U_ack_in_dummy;
wire    regslice_both_OUTPUT_r_V_dest_V_U_vld_out;
reg    ap_condition_4265;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 306'd1;
#0 grp_guitar_effects_Pipeline_LPF_Loop_fu_758_ap_start_reg = 1'b0;
#0 grp_sin_or_cos_double_s_fu_767_ap_start_reg = 1'b0;
end

guitar_effects_compression_buffer_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 441 ),
    .AddressWidth( 9 ))
compression_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(compression_buffer_address0),
    .ce0(compression_buffer_ce0),
    .we0(compression_buffer_we0),
    .d0(compression_buffer_d0),
    .q0(compression_buffer_q0)
);

guitar_effects_delay_buffer_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 88200 ),
    .AddressWidth( 17 ))
delay_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(delay_buffer_address0),
    .ce0(delay_buffer_ce0),
    .we0(delay_buffer_we0),
    .d0(delay_buffer_d0),
    .q0(delay_buffer_q0)
);

guitar_effects_wah_values_buffer_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
wah_values_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(wah_values_buffer_address0),
    .ce0(wah_values_buffer_ce0),
    .we0(wah_values_buffer_we0),
    .d0(wah_values_buffer_d0),
    .q0(wah_values_buffer_q0)
);

guitar_effects_guitar_effects_Pipeline_LPF_Loop grp_guitar_effects_Pipeline_LPF_Loop_fu_758(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_guitar_effects_Pipeline_LPF_Loop_fu_758_ap_start),
    .ap_done(grp_guitar_effects_Pipeline_LPF_Loop_fu_758_ap_done),
    .ap_idle(grp_guitar_effects_Pipeline_LPF_Loop_fu_758_ap_idle),
    .ap_ready(grp_guitar_effects_Pipeline_LPF_Loop_fu_758_ap_ready),
    .sext_ln65(trunc_ln65_reg_2446),
    .compression_buffer_address0(grp_guitar_effects_Pipeline_LPF_Loop_fu_758_compression_buffer_address0),
    .compression_buffer_ce0(grp_guitar_effects_Pipeline_LPF_Loop_fu_758_compression_buffer_ce0),
    .compression_buffer_q0(compression_buffer_q0),
    .p_out(grp_guitar_effects_Pipeline_LPF_Loop_fu_758_p_out),
    .p_out_ap_vld(grp_guitar_effects_Pipeline_LPF_Loop_fu_758_p_out_ap_vld),
    .grp_fu_784_p_din0(grp_guitar_effects_Pipeline_LPF_Loop_fu_758_grp_fu_784_p_din0),
    .grp_fu_784_p_din1(grp_guitar_effects_Pipeline_LPF_Loop_fu_758_grp_fu_784_p_din1),
    .grp_fu_784_p_dout0(grp_fu_784_p2),
    .grp_fu_784_p_ce(grp_guitar_effects_Pipeline_LPF_Loop_fu_758_grp_fu_784_p_ce),
    .grp_fu_792_p_din0(grp_guitar_effects_Pipeline_LPF_Loop_fu_758_grp_fu_792_p_din0),
    .grp_fu_792_p_dout0(grp_fu_792_p1),
    .grp_fu_792_p_ce(grp_guitar_effects_Pipeline_LPF_Loop_fu_758_grp_fu_792_p_ce)
);

guitar_effects_sin_or_cos_double_s grp_sin_or_cos_double_s_fu_767(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sin_or_cos_double_s_fu_767_ap_start),
    .ap_done(grp_sin_or_cos_double_s_fu_767_ap_done),
    .ap_idle(grp_sin_or_cos_double_s_fu_767_ap_idle),
    .ap_ready(grp_sin_or_cos_double_s_fu_767_ap_ready),
    .t_in(x_assign_reg_2612),
    .ap_return(grp_sin_or_cos_double_s_fu_767_ap_return)
);

guitar_effects_control_r_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_R_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_R_DATA_WIDTH ))
control_r_s_axi_U(
    .AWVALID(s_axi_control_r_AWVALID),
    .AWREADY(s_axi_control_r_AWREADY),
    .AWADDR(s_axi_control_r_AWADDR),
    .WVALID(s_axi_control_r_WVALID),
    .WREADY(s_axi_control_r_WREADY),
    .WDATA(s_axi_control_r_WDATA),
    .WSTRB(s_axi_control_r_WSTRB),
    .ARVALID(s_axi_control_r_ARVALID),
    .ARREADY(s_axi_control_r_ARREADY),
    .ARADDR(s_axi_control_r_ARADDR),
    .RVALID(s_axi_control_r_RVALID),
    .RREADY(s_axi_control_r_RREADY),
    .RDATA(s_axi_control_r_RDATA),
    .RRESP(s_axi_control_r_RRESP),
    .BVALID(s_axi_control_r_BVALID),
    .BREADY(s_axi_control_r_BREADY),
    .BRESP(s_axi_control_r_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .axilite_out(axilite_out_local_4_reg_724),
    .axilite_out_ap_vld(axilite_out_ap_vld),
    .control(control),
    .distortion_threshold(distortion_threshold),
    .distortion_clip_factor(distortion_clip_factor),
    .compression_min_threshold(compression_min_threshold),
    .compression_max_threshold(compression_max_threshold),
    .compression_zero_threshold(compression_zero_threshold),
    .delay_mult(delay_mult),
    .delay_samples(delay_samples),
    .tempo(tempo),
    .wah_coeffs(wah_coeffs),
    .debug_output(debug_output_local_0_fu_344),
    .debug_output_ap_vld(debug_output_ap_vld)
);

guitar_effects_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .USER_DW( 32 ),
    .USER_AW( 64 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARLEN(gmem_ARLEN),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RFIFONUM(gmem_RFIFONUM),
    .I_AWVALID(1'b0),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWLEN(32'd0),
    .I_WVALID(1'b0),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(32'd0),
    .I_WSTRB(4'd0),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(1'b0)
);

guitar_effects_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U43(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_784_p0),
    .din1(grp_fu_784_p1),
    .ce(grp_fu_784_ce),
    .dout(grp_fu_784_p2)
);

guitar_effects_fdiv_32ns_32ns_32_16_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_16_no_dsp_1_U44(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_788_p0),
    .din1(reg_819),
    .ce(1'b1),
    .dout(grp_fu_788_p2)
);

guitar_effects_sitofp_32ns_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32ns_32_6_no_dsp_1_U45(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_792_p0),
    .ce(grp_fu_792_ce),
    .dout(grp_fu_792_p1)
);

guitar_effects_sitofp_32ns_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32ns_32_6_no_dsp_1_U46(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(compression_min_threshold_read_reg_2141),
    .ce(grp_fu_795_ce),
    .dout(grp_fu_795_p1)
);

guitar_effects_dadd_64ns_64ns_64_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_7_full_dsp_1_U47(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_834),
    .din1(64'd4602678819172646912),
    .ce(1'b1),
    .dout(grp_fu_799_p2)
);

guitar_effects_dmul_64ns_64ns_64_7_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_7_max_dsp_1_U48(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_804_p0),
    .din1(grp_fu_804_p1),
    .ce(1'b1),
    .dout(grp_fu_804_p2)
);

guitar_effects_ddiv_64ns_64ns_64_59_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 59 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_59_no_dsp_1_U49(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_834),
    .din1(64'd4680797471058690048),
    .ce(1'b1),
    .dout(grp_fu_811_p2)
);

guitar_effects_sitodp_32ns_64_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sitodp_32ns_64_6_no_dsp_1_U50(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_816_p0),
    .ce(grp_fu_816_ce),
    .dout(grp_fu_816_p1)
);

guitar_effects_mul_32s_8s_40_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 40 ))
mul_32s_8s_40_2_1_U51(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(r_V_reg_2369),
    .din1(grp_fu_1094_p1),
    .ce(1'b1),
    .dout(grp_fu_1094_p2)
);

guitar_effects_mul_32s_8s_40_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 40 ))
mul_32s_8s_40_2_1_U52(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(r_V_22_reg_2374),
    .din1(grp_fu_1152_p1),
    .ce(1'b1),
    .dout(grp_fu_1152_p2)
);

guitar_effects_srem_32ns_10ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 32 ))
srem_32ns_10ns_32_36_seq_1_U53(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_1244_ap_start),
    .done(grp_fu_1244_ap_done),
    .din0(grp_fu_1244_p0),
    .din1(grp_fu_1244_p1),
    .ce(1'b1),
    .dout(grp_fu_1244_p2)
);

guitar_effects_srem_32ns_18ns_17_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 17 ))
srem_32ns_18ns_17_36_seq_1_U54(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_1479_ap_start),
    .done(grp_fu_1479_ap_done),
    .din0(grp_fu_1479_p0),
    .din1(grp_fu_1479_p1),
    .ce(1'b1),
    .dout(grp_fu_1479_p2)
);

guitar_effects_srem_32ns_18ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 32 ))
srem_32ns_18ns_32_36_seq_1_U55(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_1491_ap_start),
    .done(grp_fu_1491_ap_done),
    .din0(grp_fu_1491_p0),
    .din1(grp_fu_1491_p1),
    .ce(1'b1),
    .dout(grp_fu_1491_p2)
);

guitar_effects_srem_32ns_8ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 32 ))
srem_32ns_8ns_32_36_seq_1_U56(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_1807_ap_start),
    .done(grp_fu_1807_ap_done),
    .din0(grp_fu_1807_p0),
    .din1(grp_fu_1807_p1),
    .ce(grp_fu_1807_ce),
    .dout(grp_fu_1807_p2)
);

guitar_effects_mul_32s_10ns_42_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 42 ))
mul_32s_10ns_42_2_1_U57(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(result_V_16_reg_2638),
    .din1(grp_fu_1953_p1),
    .ce(1'b1),
    .dout(grp_fu_1953_p2)
);

guitar_effects_srem_9ns_8ns_7_13_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 7 ))
srem_9ns_8ns_7_13_seq_1_U58(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_2022_ap_start),
    .done(grp_fu_2022_ap_done),
    .din0(grp_fu_2022_p0),
    .din1(grp_fu_2022_p1),
    .ce(1'b1),
    .dout(grp_fu_2022_p2)
);

guitar_effects_mul_32s_32s_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32s_32s_64_2_1_U59(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_841),
    .din1(r_V_33_reg_2693),
    .ce(1'b1),
    .dout(grp_fu_2048_p2)
);

guitar_effects_regslice_both #(
    .DataWidth( 32 ))
regslice_both_INPUT_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TDATA),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_data_V_U_ack_in),
    .data_out(INPUT_r_TDATA_int_regslice),
    .vld_out(INPUT_r_TVALID_int_regslice),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_data_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 4 ))
regslice_both_INPUT_r_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TKEEP),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_keep_V_U_ack_in),
    .data_out(INPUT_r_TKEEP_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_keep_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_keep_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 4 ))
regslice_both_INPUT_r_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TSTRB),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_strb_V_U_ack_in),
    .data_out(INPUT_r_TSTRB_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_strb_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_strb_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 2 ))
regslice_both_INPUT_r_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TUSER),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_user_V_U_ack_in),
    .data_out(INPUT_r_TUSER_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_user_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_user_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 1 ))
regslice_both_INPUT_r_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TLAST),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_last_V_U_ack_in),
    .data_out(INPUT_r_TLAST_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_last_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_last_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 5 ))
regslice_both_INPUT_r_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TID),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_id_V_U_ack_in),
    .data_out(INPUT_r_TID_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_id_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_id_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 6 ))
regslice_both_INPUT_r_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(INPUT_r_TDEST),
    .vld_in(INPUT_r_TVALID),
    .ack_in(regslice_both_INPUT_r_V_dest_V_U_ack_in),
    .data_out(INPUT_r_TDEST_int_regslice),
    .vld_out(regslice_both_INPUT_r_V_dest_V_U_vld_out),
    .ack_out(INPUT_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_INPUT_r_V_dest_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 32 ))
regslice_both_OUTPUT_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_int_8_reg_745),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(OUTPUT_r_TREADY_int_regslice),
    .data_out(OUTPUT_r_TDATA),
    .vld_out(regslice_both_OUTPUT_r_V_data_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_data_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 4 ))
regslice_both_OUTPUT_r_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_keep_V_reg_2319),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_keep_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TKEEP),
    .vld_out(regslice_both_OUTPUT_r_V_keep_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_keep_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 4 ))
regslice_both_OUTPUT_r_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_strb_V_reg_2324),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_strb_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TSTRB),
    .vld_out(regslice_both_OUTPUT_r_V_strb_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_strb_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 2 ))
regslice_both_OUTPUT_r_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_user_V_reg_2329),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_user_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TUSER),
    .vld_out(regslice_both_OUTPUT_r_V_user_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_user_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 1 ))
regslice_both_OUTPUT_r_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(OUTPUT_r_TLAST_int_regslice),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_last_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TLAST),
    .vld_out(regslice_both_OUTPUT_r_V_last_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_last_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 5 ))
regslice_both_OUTPUT_r_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_id_V_reg_2338),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_id_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TID),
    .vld_out(regslice_both_OUTPUT_r_V_id_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_id_V_U_apdone_blk)
);

guitar_effects_regslice_both #(
    .DataWidth( 6 ))
regslice_both_OUTPUT_r_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_dest_V_reg_2343),
    .vld_in(OUTPUT_r_TVALID_int_regslice),
    .ack_in(regslice_both_OUTPUT_r_V_dest_V_U_ack_in_dummy),
    .data_out(OUTPUT_r_TDEST),
    .vld_out(regslice_both_OUTPUT_r_V_dest_V_U_vld_out),
    .ack_out(OUTPUT_r_TREADY),
    .apdone_blk(regslice_both_OUTPUT_r_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_guitar_effects_Pipeline_LPF_Loop_fu_758_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state57)) begin
            grp_guitar_effects_Pipeline_LPF_Loop_fu_758_ap_start_reg <= 1'b1;
        end else if ((grp_guitar_effects_Pipeline_LPF_Loop_fu_758_ap_ready == 1'b1)) begin
            grp_guitar_effects_Pipeline_LPF_Loop_fu_758_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_sin_or_cos_double_s_fu_767_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state243)) begin
            grp_sin_or_cos_double_s_fu_767_ap_start_reg <= 1'b1;
        end else if ((grp_sin_or_cos_double_s_fu_767_ap_ready == 1'b1)) begin
            grp_sin_or_cos_double_s_fu_767_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3564_fu_922_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        axilite_out_local_0_fu_348 <= 32'd0;
    end else if ((~((1'b1 == ap_block_state304_io) | ((tmp_last_V_reg_2334 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2334 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice))) & (tmp_last_V_reg_2334 == 1'd0) & (1'b1 == ap_CS_fsm_state304))) begin
        axilite_out_local_0_fu_348 <= axilite_out_local_4_reg_724;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln143_fu_1076_p2 == 1'd0) & (icmp_ln141_fu_1071_p2 == 1'd0) & (tmp_reg_2255 == 1'd1) & (1'b1 == ap_CS_fsm_state14) & (1'b1 == INPUT_r_TVALID_int_regslice))) begin
        axilite_out_local_1_reg_572 <= or_ln96_fu_1065_p2;
    end else if (((tmp_reg_2255 == 1'd0) & (1'b1 == ap_CS_fsm_state14) & (1'b1 == INPUT_r_TVALID_int_regslice))) begin
        axilite_out_local_1_reg_572 <= axilite_out_local_0_fu_348;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state17))) begin
        axilite_out_local_1_reg_572 <= or_ln96_reg_2353;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln182_fu_1275_p2 == 1'd0) & (1'd0 == and_ln191_1_fu_1302_p2) & (1'b1 == ap_CS_fsm_state59)) | ((icmp_ln192_fu_1280_p2 == 1'd0) & (icmp_ln182_fu_1275_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59)))) begin
        axilite_out_local_2_reg_614 <= or_ln101_fu_1259_p2;
    end else if (((tmp_12_reg_2259 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        axilite_out_local_2_reg_614 <= axilite_out_local_1_reg_572;
    end else if ((((icmp_ln182_reg_2473 == 1'd0) & (tmp_12_reg_2259 == 1'd1) & (1'd1 == and_ln191_1_reg_2481) & (1'b1 == ap_CS_fsm_state87)) | ((icmp_ln192_reg_2477 == 1'd1) & (icmp_ln182_reg_2473 == 1'd1) & (tmp_12_reg_2259 == 1'd1) & (1'b1 == ap_CS_fsm_state87)))) begin
        axilite_out_local_2_reg_614 <= or_ln101_reg_2456;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_13_reg_2263 == 1'd0) & (1'b1 == ap_CS_fsm_state87))) begin
        axilite_out_local_3_reg_667 <= ap_phi_mux_axilite_out_local_2_phi_fu_617_p10;
    end else if (((tmp_13_reg_2263 == 1'd1) & (1'b1 == ap_CS_fsm_state164))) begin
        axilite_out_local_3_reg_667 <= or_ln106_fu_1754_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln23_reg_2176 == 1'd0) & (1'b1 == ap_CS_fsm_state164))) begin
        axilite_out_local_4_reg_724 <= ap_phi_mux_axilite_out_local_3_phi_fu_670_p4;
    end else if ((1'b1 == ap_CS_fsm_state303)) begin
        axilite_out_local_4_reg_724 <= or_ln111_reg_2659;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        compression_buffer_index_fu_340 <= 32'd0;
    end else if ((((icmp_ln182_fu_1275_p2 == 1'd0) & (1'd1 == and_ln191_1_fu_1302_p2) & (1'b1 == ap_CS_fsm_state59)) | ((icmp_ln182_fu_1275_p2 == 1'd0) & (1'd0 == and_ln191_1_fu_1302_p2) & (1'b1 == ap_CS_fsm_state59)) | ((icmp_ln192_fu_1280_p2 == 1'd1) & (icmp_ln182_fu_1275_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59)) | ((icmp_ln192_fu_1280_p2 == 1'd0) & (icmp_ln182_fu_1275_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59)))) begin
        compression_buffer_index_fu_340 <= compression_buffer_index_1_reg_2438;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3564_fu_922_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        current_sample_1_fu_324 <= 32'd0;
    end else if ((~((1'b1 == ap_block_state304_io) | ((tmp_last_V_reg_2334 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2334 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice))) & (tmp_last_V_reg_2334 == 1'd0) & (1'b1 == ap_CS_fsm_state304))) begin
        current_sample_1_fu_324 <= current_sample_reg_2348;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        debug_output_local_0_fu_344 <= gmem_addr_read_reg_2273;
    end else if ((1'b1 == ap_CS_fsm_state303)) begin
        debug_output_local_0_fu_344 <= reg_841;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3564_fu_922_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        delay_buffer_index_fu_336 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state149)) begin
        delay_buffer_index_fu_336 <= grp_fu_1491_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3628_fu_862_p2 == 1'd1))) begin
        empty_70_fu_316 <= 17'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond3575_fu_892_p2 == 1'd0))) begin
        empty_70_fu_316 <= empty_72_fu_898_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond3575_fu_892_p2 == 1'd1))) begin
        empty_73_fu_320 <= 7'd0;
    end else if (((exitcond3564_fu_922_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        empty_73_fu_320 <= empty_75_fu_928_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3564_fu_922_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        empty_76_fu_328 <= 32'd0;
    end else if ((~((1'b1 == ap_block_state304_io) | ((tmp_last_V_reg_2334 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2334 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice))) & (tmp_last_V_reg_2334 == 1'd0) & (1'b1 == ap_CS_fsm_state304))) begin
        empty_76_fu_328 <= empty_83_reg_735;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln143_fu_1076_p2 == 1'd0) & (icmp_ln141_fu_1071_p2 == 1'd0) & (tmp_reg_2255 == 1'd1) & (1'b1 == ap_CS_fsm_state14) & (1'b1 == INPUT_r_TVALID_int_regslice))) begin
        empty_78_reg_586 <= or_ln96_fu_1065_p2;
    end else if (((tmp_reg_2255 == 1'd0) & (1'b1 == ap_CS_fsm_state14) & (1'b1 == INPUT_r_TVALID_int_regslice))) begin
        empty_78_reg_586 <= empty_76_fu_328;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state17))) begin
        empty_78_reg_586 <= or_ln96_reg_2353;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln182_fu_1275_p2 == 1'd0) & (1'd0 == and_ln191_1_fu_1302_p2) & (1'b1 == ap_CS_fsm_state59)) | ((icmp_ln192_fu_1280_p2 == 1'd0) & (icmp_ln182_fu_1275_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59)))) begin
        empty_79_reg_631 <= or_ln101_fu_1259_p2;
    end else if (((tmp_12_reg_2259 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        empty_79_reg_631 <= empty_78_reg_586;
    end else if ((((icmp_ln182_reg_2473 == 1'd0) & (tmp_12_reg_2259 == 1'd1) & (1'd1 == and_ln191_1_reg_2481) & (1'b1 == ap_CS_fsm_state87)) | ((icmp_ln192_reg_2477 == 1'd1) & (icmp_ln182_reg_2473 == 1'd1) & (tmp_12_reg_2259 == 1'd1) & (1'b1 == ap_CS_fsm_state87)))) begin
        empty_79_reg_631 <= or_ln101_reg_2456;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_13_reg_2263 == 1'd0) & (1'b1 == ap_CS_fsm_state87))) begin
        empty_80_reg_678 <= ap_phi_mux_empty_79_phi_fu_634_p10;
    end else if (((tmp_13_reg_2263 == 1'd1) & (1'b1 == ap_CS_fsm_state164))) begin
        empty_80_reg_678 <= or_ln106_fu_1754_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln23_reg_2176 == 1'd0) & (1'b1 == ap_CS_fsm_state164))) begin
        empty_83_reg_735 <= ap_phi_mux_empty_80_phi_fu_681_p4;
    end else if ((1'b1 == ap_CS_fsm_state303)) begin
        empty_83_reg_735 <= or_ln111_reg_2659;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_fu_296 <= 9'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond3628_fu_862_p2 == 1'd0))) begin
        empty_fu_296 <= empty_69_fu_868_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state277)) begin
        i_reg_701 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state294)) begin
        i_reg_701 <= add_ln238_1_reg_2678;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state277)) begin
        result_2_reg_712 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state294)) begin
        result_2_reg_712 <= result_3_fu_2069_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln182_fu_1275_p2 == 1'd0) & (1'd0 == and_ln191_1_fu_1302_p2) & (1'b1 == ap_CS_fsm_state59)) | ((icmp_ln192_fu_1280_p2 == 1'd0) & (icmp_ln182_fu_1275_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59)))) begin
        tmp_int_3_reg_648 <= tmp_int_7_reg_600;
    end else if (((tmp_12_reg_2259 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        tmp_int_3_reg_648 <= ap_phi_mux_tmp_int_7_phi_fu_603_p8;
    end else if (((icmp_ln182_reg_2473 == 1'd0) & (tmp_12_reg_2259 == 1'd1) & (1'd1 == and_ln191_1_reg_2481) & (1'b1 == ap_CS_fsm_state87))) begin
        tmp_int_3_reg_648 <= result_V_fu_1452_p3;
    end else if (((icmp_ln192_reg_2477 == 1'd1) & (icmp_ln182_reg_2473 == 1'd1) & (tmp_12_reg_2259 == 1'd1) & (1'b1 == ap_CS_fsm_state87))) begin
        tmp_int_3_reg_648 <= result_V_14_fu_1464_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln143_fu_1076_p2 == 1'd0) & (icmp_ln141_fu_1071_p2 == 1'd0) & (tmp_reg_2255 == 1'd1) & (1'b1 == ap_CS_fsm_state14) & (1'b1 == INPUT_r_TVALID_int_regslice)) | ((tmp_reg_2255 == 1'd0) & (1'b1 == ap_CS_fsm_state14) & (1'b1 == INPUT_r_TVALID_int_regslice)))) begin
        tmp_int_7_reg_600 <= INPUT_r_TDATA_int_regslice;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_int_7_reg_600 <= result_1_fu_1144_p2;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_int_7_reg_600 <= result_fu_1202_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln23_reg_2176 == 1'd0) & (1'b1 == ap_CS_fsm_state164))) begin
        tmp_int_8_reg_745 <= ap_phi_mux_tmp_int_phi_fu_693_p4;
    end else if ((1'b1 == ap_CS_fsm_state303)) begin
        tmp_int_8_reg_745 <= sext_ln238_3_fu_2075_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_13_reg_2263 == 1'd0) & (1'b1 == ap_CS_fsm_state87))) begin
        tmp_int_reg_689 <= ap_phi_mux_tmp_int_3_phi_fu_651_p10;
    end else if (((tmp_13_reg_2263 == 1'd1) & (1'b1 == ap_CS_fsm_state164))) begin
        tmp_int_reg_689 <= output_fu_1775_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3564_fu_922_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        wah_buffer_index_fu_332 <= 32'd0;
    end else if (((icmp_ln238_fu_2001_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state278))) begin
        wah_buffer_index_fu_332 <= wah_buffer_index_1_reg_2665;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state258)) begin
        add5_i_reg_2622 <= grp_fu_799_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state278)) begin
        add_ln238_1_reg_2678 <= add_ln238_1_fu_2007_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln182_fu_1275_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state59))) begin
        and_ln191_1_reg_2481 <= and_ln191_1_fu_1302_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        compression_buffer_index_1_reg_2438 <= grp_fu_1244_p2;
        trunc_ln65_reg_2446 <= trunc_ln65_fu_1250_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        compression_max_threshold_read_reg_2135 <= compression_max_threshold;
        compression_min_threshold_read_reg_2141 <= compression_min_threshold;
        compression_zero_threshold_read_reg_2130 <= compression_zero_threshold;
        control_read_reg_2163 <= control;
        delay_mult_read_reg_2125 <= delay_mult;
        delay_samples_read_reg_2120 <= delay_samples;
        distortion_clip_factor_read_reg_2148 <= distortion_clip_factor;
        distortion_threshold_read_reg_2153 <= distortion_threshold;
        tempo_read_reg_2115 <= tempo;
        trunc_ln23_reg_2176 <= trunc_ln23_fu_845_p1;
        wah_coeffs_read_reg_2109 <= wah_coeffs;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        conv18_i_reg_2294 <= grp_fu_792_p1;
        conv2_i_reg_2289 <= grp_fu_816_p1;
        conv30_i_reg_2299 <= grp_fu_795_p1;
        conv7_i_i_i_reg_2283 <= conv7_i_i_i_fu_1010_p1;
        negative_threshold_reg_2278 <= negative_threshold_fu_1005_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state169)) begin
        conv_i2_reg_2602 <= grp_fu_816_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        current_sample_reg_2348 <= current_sample_fu_1059_p2;
        tmp_dest_V_reg_2343 <= INPUT_r_TDEST_int_regslice;
        tmp_id_V_reg_2338 <= INPUT_r_TID_int_regslice;
        tmp_keep_V_reg_2319 <= INPUT_r_TKEEP_int_regslice;
        tmp_last_V_reg_2334 <= INPUT_r_TLAST_int_regslice;
        tmp_strb_V_reg_2324 <= INPUT_r_TSTRB_int_regslice;
        tmp_user_V_reg_2329 <= INPUT_r_TUSER_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state162)) begin
        data_V_2_reg_2567 <= data_V_2_fu_1633_p1;
        isNeg_3_reg_2577 <= add_ln346_2_fu_1655_p2[32'd8];
        p_Result_48_reg_2572 <= p_Result_48_fu_1647_p1;
        ush_3_reg_2582 <= ush_3_fu_1679_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_13_reg_2263 == 1'd1) & (1'b1 == ap_CS_fsm_state87))) begin
        delay_buffer_index_load_reg_2511 <= delay_buffer_index_fu_336;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state151)) begin
        delay_buffer_load_reg_2562 <= delay_buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state270)) begin
        gmem_addr_1_reg_2653 <= sext_ln238_fu_1977_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        gmem_addr_read_reg_2273 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        icmp_ln174_reg_2451 <= icmp_ln174_fu_1254_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        icmp_ln182_reg_2473 <= icmp_ln182_fu_1275_p2;
        icmp_ln192_reg_2477 <= icmp_ln192_fu_1280_p2;
        or_ln101_reg_2456[1 : 0] <= or_ln101_fu_1259_p2[1 : 0];
or_ln101_reg_2456[31 : 3] <= or_ln101_fu_1259_p2[31 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        isNeg_2_reg_2495 <= add_ln346_1_fu_1354_p2[32'd8];
        p_Result_45_reg_2485 <= data_V_1_fu_1324_p1[32'd31];
        p_Result_46_reg_2490 <= p_Result_46_fu_1346_p1;
        ush_2_reg_2500 <= ush_2_fu_1378_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state113)) begin
        isNeg_reg_2536 <= add_ln346_fu_1527_p2[32'd8];
        p_Result_43_reg_2526 <= data_V_fu_1497_p1[32'd31];
        p_Result_44_reg_2531 <= p_Result_44_fu_1519_p1;
        ush_reg_2541 <= ush_fu_1551_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state269)) begin
        mul_ln238_reg_2648 <= grp_fu_1953_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state277)) begin
        or_ln111_reg_2659[31 : 1] <= or_ln111_fu_1987_p2[31 : 1];
        sext_ln77_reg_2670 <= sext_ln77_fu_1997_p1;
        wah_buffer_index_1_reg_2665 <= grp_fu_1807_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_2255 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        or_ln96_reg_2353[2 : 0] <= or_ln96_fu_1065_p2[2 : 0];
or_ln96_reg_2353[31 : 4] <= or_ln96_fu_1065_p2[31 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state266)) begin
        p_Result_49_reg_2627 <= data_V_3_fu_1813_p1[32'd63];
        val_3_reg_2632 <= val_3_fu_1931_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln141_fu_1071_p2 == 1'd1) & (tmp_reg_2255 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        r_V_22_reg_2374 <= r_V_22_fu_1086_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state291)) begin
        r_V_33_reg_2693 <= wah_values_buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        r_V_35_reg_2411 <= grp_fu_1152_p2;
        ret_V_cast_reg_2416 <= {{grp_fu_1152_p2[38:7]}};
        trunc_ln1049_reg_2423 <= trunc_ln1049_fu_1167_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        r_V_36_reg_2384 <= grp_fu_1094_p2;
        ret_V_9_cast_reg_2389 <= {{grp_fu_1094_p2[38:7]}};
        trunc_ln1049_1_reg_2396 <= trunc_ln1049_1_fu_1109_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state293)) begin
        r_V_37_reg_2708 <= grp_fu_2048_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln143_fu_1076_p2 == 1'd1) & (icmp_ln141_fu_1071_p2 == 1'd0) & (tmp_reg_2255 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        r_V_reg_2369 <= r_V_fu_1081_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state64))) begin
        reg_819 <= grp_fu_792_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state80))) begin
        reg_825 <= grp_fu_788_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state161) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state84))) begin
        reg_830 <= grp_fu_784_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state265) | (1'b1 == ap_CS_fsm_state251) | (1'b1 == ap_CS_fsm_state183) | (1'b1 == ap_CS_fsm_state176))) begin
        reg_834 <= grp_fu_804_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state302) | (1'b1 == ap_CS_fsm_state291))) begin
        reg_841 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state267)) begin
        result_V_16_reg_2638 <= result_V_16_fu_1944_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state163)) begin
        result_V_9_reg_2592 <= result_V_9_fu_1748_p2;
        val_2_reg_2587 <= val_2_fu_1741_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        srem_ln210_reg_2552 <= grp_fu_1479_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3564_fu_922_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_12_reg_2259 <= control_read_reg_2163[32'd2];
        tmp_13_reg_2263 <= control_read_reg_2163[32'd1];
        tmp_reg_2255 <= control_read_reg_2163[32'd3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state244)) begin
        tmp_2_reg_2617 <= grp_sin_or_cos_double_s_fu_767_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        val_1_reg_2505 <= val_1_fu_1440_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state114)) begin
        val_reg_2546 <= val_fu_1613_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state242)) begin
        x_assign_reg_2612 <= grp_fu_811_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        INPUT_r_TDATA_blk_n = INPUT_r_TVALID_int_regslice;
    end else begin
        INPUT_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'b1 == INPUT_r_TVALID_int_regslice))) begin
        INPUT_r_TREADY_int_regslice = 1'b1;
    end else begin
        INPUT_r_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state306) | (1'b1 == ap_CS_fsm_state305) | ((tmp_last_V_reg_2334 == 1'd1) & (1'b1 == ap_CS_fsm_state304)) | ((tmp_last_V_reg_2334 == 1'd0) & (1'b1 == ap_CS_fsm_state304)))) begin
        OUTPUT_r_TDATA_blk_n = OUTPUT_r_TREADY_int_regslice;
    end else begin
        OUTPUT_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_4265)) begin
        if ((tmp_last_V_reg_2334 == 1'd1)) begin
            OUTPUT_r_TLAST_int_regslice = 1'd1;
        end else if ((tmp_last_V_reg_2334 == 1'd0)) begin
            OUTPUT_r_TLAST_int_regslice = 1'd0;
        end else begin
            OUTPUT_r_TLAST_int_regslice = 'bx;
        end
    end else begin
        OUTPUT_r_TLAST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state304_io) | ((tmp_last_V_reg_2334 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2334 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice))) & (tmp_last_V_reg_2334 == 1'd1) & (1'b1 == ap_CS_fsm_state304)) | (~((1'b1 == ap_block_state304_io) | ((tmp_last_V_reg_2334 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2334 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice))) & (tmp_last_V_reg_2334 == 1'd0) & (1'b1 == ap_CS_fsm_state304)))) begin
        OUTPUT_r_TVALID_int_regslice = 1'b1;
    end else begin
        OUTPUT_r_TVALID_int_regslice = 1'b0;
    end
end

assign ap_ST_fsm_state100_blk = 1'b0;

assign ap_ST_fsm_state101_blk = 1'b0;

assign ap_ST_fsm_state102_blk = 1'b0;

assign ap_ST_fsm_state103_blk = 1'b0;

assign ap_ST_fsm_state104_blk = 1'b0;

assign ap_ST_fsm_state105_blk = 1'b0;

assign ap_ST_fsm_state106_blk = 1'b0;

assign ap_ST_fsm_state107_blk = 1'b0;

assign ap_ST_fsm_state108_blk = 1'b0;

assign ap_ST_fsm_state109_blk = 1'b0;

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state110_blk = 1'b0;

assign ap_ST_fsm_state111_blk = 1'b0;

assign ap_ST_fsm_state112_blk = 1'b0;

assign ap_ST_fsm_state113_blk = 1'b0;

assign ap_ST_fsm_state114_blk = 1'b0;

assign ap_ST_fsm_state115_blk = 1'b0;

assign ap_ST_fsm_state116_blk = 1'b0;

assign ap_ST_fsm_state117_blk = 1'b0;

assign ap_ST_fsm_state118_blk = 1'b0;

assign ap_ST_fsm_state119_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state120_blk = 1'b0;

assign ap_ST_fsm_state121_blk = 1'b0;

assign ap_ST_fsm_state122_blk = 1'b0;

assign ap_ST_fsm_state123_blk = 1'b0;

assign ap_ST_fsm_state124_blk = 1'b0;

assign ap_ST_fsm_state125_blk = 1'b0;

assign ap_ST_fsm_state126_blk = 1'b0;

assign ap_ST_fsm_state127_blk = 1'b0;

assign ap_ST_fsm_state128_blk = 1'b0;

assign ap_ST_fsm_state129_blk = 1'b0;

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

assign ap_ST_fsm_state130_blk = 1'b0;

assign ap_ST_fsm_state131_blk = 1'b0;

assign ap_ST_fsm_state132_blk = 1'b0;

assign ap_ST_fsm_state133_blk = 1'b0;

assign ap_ST_fsm_state134_blk = 1'b0;

assign ap_ST_fsm_state135_blk = 1'b0;

assign ap_ST_fsm_state136_blk = 1'b0;

assign ap_ST_fsm_state137_blk = 1'b0;

assign ap_ST_fsm_state138_blk = 1'b0;

assign ap_ST_fsm_state139_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state140_blk = 1'b0;

assign ap_ST_fsm_state141_blk = 1'b0;

assign ap_ST_fsm_state142_blk = 1'b0;

assign ap_ST_fsm_state143_blk = 1'b0;

assign ap_ST_fsm_state144_blk = 1'b0;

assign ap_ST_fsm_state145_blk = 1'b0;

assign ap_ST_fsm_state146_blk = 1'b0;

assign ap_ST_fsm_state147_blk = 1'b0;

assign ap_ST_fsm_state148_blk = 1'b0;

assign ap_ST_fsm_state149_blk = 1'b0;

always @ (*) begin
    if ((1'b0 == INPUT_r_TVALID_int_regslice)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

assign ap_ST_fsm_state150_blk = 1'b0;

assign ap_ST_fsm_state151_blk = 1'b0;

assign ap_ST_fsm_state152_blk = 1'b0;

assign ap_ST_fsm_state153_blk = 1'b0;

assign ap_ST_fsm_state154_blk = 1'b0;

assign ap_ST_fsm_state155_blk = 1'b0;

assign ap_ST_fsm_state156_blk = 1'b0;

assign ap_ST_fsm_state157_blk = 1'b0;

assign ap_ST_fsm_state158_blk = 1'b0;

assign ap_ST_fsm_state159_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state160_blk = 1'b0;

assign ap_ST_fsm_state161_blk = 1'b0;

assign ap_ST_fsm_state162_blk = 1'b0;

assign ap_ST_fsm_state163_blk = 1'b0;

assign ap_ST_fsm_state164_blk = 1'b0;

assign ap_ST_fsm_state165_blk = 1'b0;

assign ap_ST_fsm_state166_blk = 1'b0;

assign ap_ST_fsm_state167_blk = 1'b0;

assign ap_ST_fsm_state168_blk = 1'b0;

assign ap_ST_fsm_state169_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state170_blk = 1'b0;

assign ap_ST_fsm_state171_blk = 1'b0;

assign ap_ST_fsm_state172_blk = 1'b0;

assign ap_ST_fsm_state173_blk = 1'b0;

assign ap_ST_fsm_state174_blk = 1'b0;

assign ap_ST_fsm_state175_blk = 1'b0;

assign ap_ST_fsm_state176_blk = 1'b0;

assign ap_ST_fsm_state177_blk = 1'b0;

assign ap_ST_fsm_state178_blk = 1'b0;

assign ap_ST_fsm_state179_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state180_blk = 1'b0;

assign ap_ST_fsm_state181_blk = 1'b0;

assign ap_ST_fsm_state182_blk = 1'b0;

assign ap_ST_fsm_state183_blk = 1'b0;

assign ap_ST_fsm_state184_blk = 1'b0;

assign ap_ST_fsm_state185_blk = 1'b0;

assign ap_ST_fsm_state186_blk = 1'b0;

assign ap_ST_fsm_state187_blk = 1'b0;

assign ap_ST_fsm_state188_blk = 1'b0;

assign ap_ST_fsm_state189_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state190_blk = 1'b0;

assign ap_ST_fsm_state191_blk = 1'b0;

assign ap_ST_fsm_state192_blk = 1'b0;

assign ap_ST_fsm_state193_blk = 1'b0;

assign ap_ST_fsm_state194_blk = 1'b0;

assign ap_ST_fsm_state195_blk = 1'b0;

assign ap_ST_fsm_state196_blk = 1'b0;

assign ap_ST_fsm_state197_blk = 1'b0;

assign ap_ST_fsm_state198_blk = 1'b0;

assign ap_ST_fsm_state199_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

assign ap_ST_fsm_state1_blk = 1'b0;

assign ap_ST_fsm_state200_blk = 1'b0;

assign ap_ST_fsm_state201_blk = 1'b0;

assign ap_ST_fsm_state202_blk = 1'b0;

assign ap_ST_fsm_state203_blk = 1'b0;

assign ap_ST_fsm_state204_blk = 1'b0;

assign ap_ST_fsm_state205_blk = 1'b0;

assign ap_ST_fsm_state206_blk = 1'b0;

assign ap_ST_fsm_state207_blk = 1'b0;

assign ap_ST_fsm_state208_blk = 1'b0;

assign ap_ST_fsm_state209_blk = 1'b0;

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state210_blk = 1'b0;

assign ap_ST_fsm_state211_blk = 1'b0;

assign ap_ST_fsm_state212_blk = 1'b0;

assign ap_ST_fsm_state213_blk = 1'b0;

assign ap_ST_fsm_state214_blk = 1'b0;

assign ap_ST_fsm_state215_blk = 1'b0;

assign ap_ST_fsm_state216_blk = 1'b0;

assign ap_ST_fsm_state217_blk = 1'b0;

assign ap_ST_fsm_state218_blk = 1'b0;

assign ap_ST_fsm_state219_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state220_blk = 1'b0;

assign ap_ST_fsm_state221_blk = 1'b0;

assign ap_ST_fsm_state222_blk = 1'b0;

assign ap_ST_fsm_state223_blk = 1'b0;

assign ap_ST_fsm_state224_blk = 1'b0;

assign ap_ST_fsm_state225_blk = 1'b0;

assign ap_ST_fsm_state226_blk = 1'b0;

assign ap_ST_fsm_state227_blk = 1'b0;

assign ap_ST_fsm_state228_blk = 1'b0;

assign ap_ST_fsm_state229_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state230_blk = 1'b0;

assign ap_ST_fsm_state231_blk = 1'b0;

assign ap_ST_fsm_state232_blk = 1'b0;

assign ap_ST_fsm_state233_blk = 1'b0;

assign ap_ST_fsm_state234_blk = 1'b0;

assign ap_ST_fsm_state235_blk = 1'b0;

assign ap_ST_fsm_state236_blk = 1'b0;

assign ap_ST_fsm_state237_blk = 1'b0;

assign ap_ST_fsm_state238_blk = 1'b0;

assign ap_ST_fsm_state239_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state240_blk = 1'b0;

assign ap_ST_fsm_state241_blk = 1'b0;

assign ap_ST_fsm_state242_blk = 1'b0;

assign ap_ST_fsm_state243_blk = 1'b0;

always @ (*) begin
    if ((grp_sin_or_cos_double_s_fu_767_ap_done == 1'b0)) begin
        ap_ST_fsm_state244_blk = 1'b1;
    end else begin
        ap_ST_fsm_state244_blk = 1'b0;
    end
end

assign ap_ST_fsm_state245_blk = 1'b0;

assign ap_ST_fsm_state246_blk = 1'b0;

assign ap_ST_fsm_state247_blk = 1'b0;

assign ap_ST_fsm_state248_blk = 1'b0;

assign ap_ST_fsm_state249_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state250_blk = 1'b0;

assign ap_ST_fsm_state251_blk = 1'b0;

assign ap_ST_fsm_state252_blk = 1'b0;

assign ap_ST_fsm_state253_blk = 1'b0;

assign ap_ST_fsm_state254_blk = 1'b0;

assign ap_ST_fsm_state255_blk = 1'b0;

assign ap_ST_fsm_state256_blk = 1'b0;

assign ap_ST_fsm_state257_blk = 1'b0;

assign ap_ST_fsm_state258_blk = 1'b0;

assign ap_ST_fsm_state259_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state260_blk = 1'b0;

assign ap_ST_fsm_state261_blk = 1'b0;

assign ap_ST_fsm_state262_blk = 1'b0;

assign ap_ST_fsm_state263_blk = 1'b0;

assign ap_ST_fsm_state264_blk = 1'b0;

assign ap_ST_fsm_state265_blk = 1'b0;

assign ap_ST_fsm_state266_blk = 1'b0;

assign ap_ST_fsm_state267_blk = 1'b0;

assign ap_ST_fsm_state268_blk = 1'b0;

assign ap_ST_fsm_state269_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state270_blk = 1'b0;

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state271_blk = 1'b1;
    end else begin
        ap_ST_fsm_state271_blk = 1'b0;
    end
end

assign ap_ST_fsm_state272_blk = 1'b0;

assign ap_ST_fsm_state273_blk = 1'b0;

assign ap_ST_fsm_state274_blk = 1'b0;

assign ap_ST_fsm_state275_blk = 1'b0;

assign ap_ST_fsm_state276_blk = 1'b0;

assign ap_ST_fsm_state277_blk = 1'b0;

assign ap_ST_fsm_state278_blk = 1'b0;

assign ap_ST_fsm_state279_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state280_blk = 1'b0;

assign ap_ST_fsm_state281_blk = 1'b0;

assign ap_ST_fsm_state282_blk = 1'b0;

assign ap_ST_fsm_state283_blk = 1'b0;

assign ap_ST_fsm_state284_blk = 1'b0;

assign ap_ST_fsm_state285_blk = 1'b0;

assign ap_ST_fsm_state286_blk = 1'b0;

assign ap_ST_fsm_state287_blk = 1'b0;

assign ap_ST_fsm_state288_blk = 1'b0;

assign ap_ST_fsm_state289_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state290_blk = 1'b0;

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state291_blk = 1'b1;
    end else begin
        ap_ST_fsm_state291_blk = 1'b0;
    end
end

assign ap_ST_fsm_state292_blk = 1'b0;

assign ap_ST_fsm_state293_blk = 1'b0;

assign ap_ST_fsm_state294_blk = 1'b0;

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state295_blk = 1'b1;
    end else begin
        ap_ST_fsm_state295_blk = 1'b0;
    end
end

assign ap_ST_fsm_state296_blk = 1'b0;

assign ap_ST_fsm_state297_blk = 1'b0;

assign ap_ST_fsm_state298_blk = 1'b0;

assign ap_ST_fsm_state299_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state300_blk = 1'b0;

assign ap_ST_fsm_state301_blk = 1'b0;

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state302_blk = 1'b1;
    end else begin
        ap_ST_fsm_state302_blk = 1'b0;
    end
end

assign ap_ST_fsm_state303_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_block_state304_io) | ((tmp_last_V_reg_2334 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2334 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice)))) begin
        ap_ST_fsm_state304_blk = 1'b1;
    end else begin
        ap_ST_fsm_state304_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == OUTPUT_r_TREADY_int_regslice)) begin
        ap_ST_fsm_state305_blk = 1'b1;
    end else begin
        ap_ST_fsm_state305_blk = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_OUTPUT_r_V_data_V_U_apdone_blk == 1'b1) | (1'b0 == OUTPUT_r_TREADY_int_regslice))) begin
        ap_ST_fsm_state306_blk = 1'b1;
    end else begin
        ap_ST_fsm_state306_blk = 1'b0;
    end
end

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

always @ (*) begin
    if ((grp_guitar_effects_Pipeline_LPF_Loop_fu_758_ap_done == 1'b0)) begin
        ap_ST_fsm_state58_blk = 1'b1;
    end else begin
        ap_ST_fsm_state58_blk = 1'b0;
    end
end

assign ap_ST_fsm_state59_blk = 1'b0;

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

assign ap_ST_fsm_state75_blk = 1'b0;

assign ap_ST_fsm_state76_blk = 1'b0;

assign ap_ST_fsm_state77_blk = 1'b0;

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state80_blk = 1'b0;

assign ap_ST_fsm_state81_blk = 1'b0;

assign ap_ST_fsm_state82_blk = 1'b0;

assign ap_ST_fsm_state83_blk = 1'b0;

assign ap_ST_fsm_state84_blk = 1'b0;

assign ap_ST_fsm_state85_blk = 1'b0;

assign ap_ST_fsm_state86_blk = 1'b0;

assign ap_ST_fsm_state87_blk = 1'b0;

assign ap_ST_fsm_state88_blk = 1'b0;

assign ap_ST_fsm_state89_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state90_blk = 1'b0;

assign ap_ST_fsm_state91_blk = 1'b0;

assign ap_ST_fsm_state92_blk = 1'b0;

assign ap_ST_fsm_state93_blk = 1'b0;

assign ap_ST_fsm_state94_blk = 1'b0;

assign ap_ST_fsm_state95_blk = 1'b0;

assign ap_ST_fsm_state96_blk = 1'b0;

assign ap_ST_fsm_state97_blk = 1'b0;

assign ap_ST_fsm_state98_blk = 1'b0;

assign ap_ST_fsm_state99_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((icmp_ln182_reg_2473 == 1'd0) & (tmp_12_reg_2259 == 1'd1) & (1'd1 == and_ln191_1_reg_2481) & (1'b1 == ap_CS_fsm_state87)) | ((icmp_ln192_reg_2477 == 1'd1) & (icmp_ln182_reg_2473 == 1'd1) & (tmp_12_reg_2259 == 1'd1) & (1'b1 == ap_CS_fsm_state87)))) begin
        ap_phi_mux_axilite_out_local_2_phi_fu_617_p10 = or_ln101_reg_2456;
    end else begin
        ap_phi_mux_axilite_out_local_2_phi_fu_617_p10 = axilite_out_local_2_reg_614;
    end
end

always @ (*) begin
    if (((tmp_13_reg_2263 == 1'd1) & (1'b1 == ap_CS_fsm_state164))) begin
        ap_phi_mux_axilite_out_local_3_phi_fu_670_p4 = or_ln106_fu_1754_p2;
    end else begin
        ap_phi_mux_axilite_out_local_3_phi_fu_670_p4 = axilite_out_local_3_reg_667;
    end
end

always @ (*) begin
    if ((((icmp_ln182_reg_2473 == 1'd0) & (tmp_12_reg_2259 == 1'd1) & (1'd1 == and_ln191_1_reg_2481) & (1'b1 == ap_CS_fsm_state87)) | ((icmp_ln192_reg_2477 == 1'd1) & (icmp_ln182_reg_2473 == 1'd1) & (tmp_12_reg_2259 == 1'd1) & (1'b1 == ap_CS_fsm_state87)))) begin
        ap_phi_mux_empty_79_phi_fu_634_p10 = or_ln101_reg_2456;
    end else begin
        ap_phi_mux_empty_79_phi_fu_634_p10 = empty_79_reg_631;
    end
end

always @ (*) begin
    if (((tmp_13_reg_2263 == 1'd1) & (1'b1 == ap_CS_fsm_state164))) begin
        ap_phi_mux_empty_80_phi_fu_681_p4 = or_ln106_fu_1754_p2;
    end else begin
        ap_phi_mux_empty_80_phi_fu_681_p4 = empty_80_reg_678;
    end
end

always @ (*) begin
    if (((tmp_12_reg_2259 == 1'd1) & (1'b1 == ap_CS_fsm_state87))) begin
        if (((icmp_ln182_reg_2473 == 1'd0) & (1'd1 == and_ln191_1_reg_2481))) begin
            ap_phi_mux_tmp_int_3_phi_fu_651_p10 = result_V_fu_1452_p3;
        end else if (((icmp_ln192_reg_2477 == 1'd1) & (icmp_ln182_reg_2473 == 1'd1))) begin
            ap_phi_mux_tmp_int_3_phi_fu_651_p10 = result_V_14_fu_1464_p3;
        end else begin
            ap_phi_mux_tmp_int_3_phi_fu_651_p10 = tmp_int_3_reg_648;
        end
    end else begin
        ap_phi_mux_tmp_int_3_phi_fu_651_p10 = tmp_int_3_reg_648;
    end
end

always @ (*) begin
    if (((tmp_13_reg_2263 == 1'd1) & (1'b1 == ap_CS_fsm_state164))) begin
        ap_phi_mux_tmp_int_phi_fu_693_p4 = output_fu_1775_p2;
    end else begin
        ap_phi_mux_tmp_int_phi_fu_693_p4 = tmp_int_reg_689;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state304_io) | ((tmp_last_V_reg_2334 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2334 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice))) & (tmp_last_V_reg_2334 == 1'd1) & (1'b1 == ap_CS_fsm_state304))) begin
        axilite_out_ap_vld = 1'b1;
    end else begin
        axilite_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        compression_buffer_address0 = zext_ln163_fu_1233_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        compression_buffer_address0 = p_cast_fu_857_p1;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        compression_buffer_address0 = grp_guitar_effects_Pipeline_LPF_Loop_fu_758_compression_buffer_address0;
    end else begin
        compression_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state2))) begin
        compression_buffer_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        compression_buffer_ce0 = grp_guitar_effects_Pipeline_LPF_Loop_fu_758_compression_buffer_ce0;
    end else begin
        compression_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        compression_buffer_d0 = abs_in_1_fu_1224_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        compression_buffer_d0 = 32'd0;
    end else begin
        compression_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_12_reg_2259 == 1'd1) & (1'b1 == ap_CS_fsm_state21)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond3628_fu_862_p2 == 1'd0)))) begin
        compression_buffer_we0 = 1'b1;
    end else begin
        compression_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state304_io) | ((tmp_last_V_reg_2334 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2334 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice))) & (tmp_last_V_reg_2334 == 1'd1) & (1'b1 == ap_CS_fsm_state304))) begin
        debug_output_ap_vld = 1'b1;
    end else begin
        debug_output_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state164)) begin
        delay_buffer_address0 = zext_ln213_fu_1783_p1;
    end else if ((1'b1 == ap_CS_fsm_state150)) begin
        delay_buffer_address0 = zext_ln210_fu_1628_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        delay_buffer_address0 = p_cast5_fu_887_p1;
    end else begin
        delay_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state164) | (1'b1 == ap_CS_fsm_state150) | (1'b1 == ap_CS_fsm_state3))) begin
        delay_buffer_ce0 = 1'b1;
    end else begin
        delay_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state164)) begin
        delay_buffer_d0 = output_fu_1775_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        delay_buffer_d0 = 32'd0;
    end else begin
        delay_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_13_reg_2263 == 1'd1) & (1'b1 == ap_CS_fsm_state164)) | ((1'b1 == ap_CS_fsm_state3) & (exitcond3575_fu_892_p2 == 1'd0)))) begin
        delay_buffer_we0 = 1'b1;
    end else begin
        delay_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state295) & (gmem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state271) & (gmem_ARREADY == 1'b1)))) begin
        gmem_ARADDR = gmem_addr_1_reg_2653;
    end else if (((1'b1 == ap_CS_fsm_state5) & (gmem_ARREADY == 1'b1))) begin
        gmem_ARADDR = sext_ln85_fu_994_p1;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state271) & (gmem_ARREADY == 1'b1))) begin
        gmem_ARLEN = 32'd100;
    end else if ((((1'b1 == ap_CS_fsm_state295) & (gmem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state5) & (gmem_ARREADY == 1'b1)))) begin
        gmem_ARLEN = 32'd1;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state295) & (gmem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state271) & (gmem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state5) & (gmem_ARREADY == 1'b1)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state302) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state291) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state12) & (gmem_RVALID == 1'b1)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state295) | (1'b1 == ap_CS_fsm_state271) | (1'b1 == ap_CS_fsm_state5))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state302) | (1'b1 == ap_CS_fsm_state291) | (1'b1 == ap_CS_fsm_state12))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_12_reg_2259 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        grp_fu_1244_ap_start = 1'b1;
    end else begin
        grp_fu_1244_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_13_reg_2263 == 1'd1) & (1'b1 == ap_CS_fsm_state87))) begin
        grp_fu_1479_ap_start = 1'b1;
    end else begin
        grp_fu_1479_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_13_reg_2263 == 1'd1) & (1'b1 == ap_CS_fsm_state87))) begin
        grp_fu_1491_ap_start = 1'b1;
    end else begin
        grp_fu_1491_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state242)) begin
        grp_fu_1807_ap_start = 1'b1;
    end else begin
        grp_fu_1807_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state277) | (1'b1 == ap_CS_fsm_state270) | (1'b1 == ap_CS_fsm_state269) | (1'b1 == ap_CS_fsm_state268) | (1'b1 == ap_CS_fsm_state267) | (1'b1 == ap_CS_fsm_state266) | (1'b1 == ap_CS_fsm_state258) | (1'b1 == ap_CS_fsm_state244) | (1'b1 == ap_CS_fsm_state242) | (1'b1 == ap_CS_fsm_state265) | (1'b1 == ap_CS_fsm_state251) | (1'b1 == ap_CS_fsm_state271) | (1'b1 == ap_CS_fsm_state276) | (1'b1 == ap_CS_fsm_state275) | (1'b1 == ap_CS_fsm_state274) | (1'b1 == ap_CS_fsm_state273) | (1'b1 == ap_CS_fsm_state272) | (1'b1 == ap_CS_fsm_state264) | (1'b1 == ap_CS_fsm_state263) | (1'b1 == ap_CS_fsm_state262) | (1'b1 == ap_CS_fsm_state261) | (1'b1 == ap_CS_fsm_state260) | (1'b1 == ap_CS_fsm_state257) | (1'b1 == ap_CS_fsm_state256) | (1'b1 == ap_CS_fsm_state255) | (1'b1 == ap_CS_fsm_state254) | (1'b1 == ap_CS_fsm_state253) | (1'b1 == ap_CS_fsm_state250) | (1'b1 == ap_CS_fsm_state249) | (1'b1 == ap_CS_fsm_state248) | (1'b1 == ap_CS_fsm_state247) | (1'b1 == ap_CS_fsm_state246) | (1'b1 == ap_CS_fsm_state259) | (1'b1 == ap_CS_fsm_state245) | (1'b1 == ap_CS_fsm_state252) | (1'b1 == ap_CS_fsm_state243))) begin
        grp_fu_1807_ce = 1'b1;
    end else begin
        grp_fu_1807_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln238_fu_2001_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state278))) begin
        grp_fu_2022_ap_start = 1'b1;
    end else begin
        grp_fu_2022_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_784_ce = grp_guitar_effects_Pipeline_LPF_Loop_fu_758_grp_fu_784_p_ce;
    end else begin
        grp_fu_784_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_784_p0 = grp_guitar_effects_Pipeline_LPF_Loop_fu_758_grp_fu_784_p_din0;
    end else if (((1'b1 == ap_CS_fsm_state158) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state81))) begin
        grp_fu_784_p0 = reg_819;
    end else begin
        grp_fu_784_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_784_p1 = grp_guitar_effects_Pipeline_LPF_Loop_fu_758_grp_fu_784_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state158)) begin
        grp_fu_784_p1 = delay_mult_read_reg_2125;
    end else if (((1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state81))) begin
        grp_fu_784_p1 = reg_825;
    end else begin
        grp_fu_784_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        grp_fu_788_p0 = conv18_i_reg_2294;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_fu_788_p0 = conv30_i_reg_2299;
    end else begin
        grp_fu_788_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_792_ce = grp_guitar_effects_Pipeline_LPF_Loop_fu_758_grp_fu_792_p_ce;
    end else if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state156) | (1'b1 == ap_CS_fsm_state155) | (1'b1 == ap_CS_fsm_state154) | (1'b1 == ap_CS_fsm_state153) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state152) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state12) & (gmem_RVALID == 1'b1)))) begin
        grp_fu_792_ce = 1'b1;
    end else begin
        grp_fu_792_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_792_p0 = grp_guitar_effects_Pipeline_LPF_Loop_fu_758_grp_fu_792_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state152)) begin
        grp_fu_792_p0 = delay_buffer_load_reg_2562;
    end else if (((1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state75))) begin
        grp_fu_792_p0 = tmp_int_7_reg_600;
    end else if ((((icmp_ln182_fu_1275_p2 == 1'd0) & (1'd1 == and_ln191_1_fu_1302_p2) & (1'b1 == ap_CS_fsm_state59)) | ((icmp_ln192_fu_1280_p2 == 1'd1) & (icmp_ln182_fu_1275_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59)))) begin
        grp_fu_792_p0 = current_level_fu_1268_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_792_p0 = compression_max_threshold_read_reg_2135;
    end else begin
        grp_fu_792_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state12) & (gmem_RVALID == 1'b1)))) begin
        grp_fu_795_ce = 1'b1;
    end else begin
        grp_fu_795_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state259)) begin
        grp_fu_804_p0 = add5_i_reg_2622;
    end else if ((1'b1 == ap_CS_fsm_state245)) begin
        grp_fu_804_p0 = tmp_2_reg_2617;
    end else if ((1'b1 == ap_CS_fsm_state177)) begin
        grp_fu_804_p0 = reg_834;
    end else if ((1'b1 == ap_CS_fsm_state170)) begin
        grp_fu_804_p0 = conv_i2_reg_2602;
    end else begin
        grp_fu_804_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state259)) begin
        grp_fu_804_p1 = 64'd4621819117588971520;
    end else if ((1'b1 == ap_CS_fsm_state245)) begin
        grp_fu_804_p1 = 64'd4602678819172646912;
    end else if ((1'b1 == ap_CS_fsm_state177)) begin
        grp_fu_804_p1 = conv2_i_reg_2289;
    end else if ((1'b1 == ap_CS_fsm_state170)) begin
        grp_fu_804_p1 = 64'd4614256650576692846;
    end else begin
        grp_fu_804_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state169) | (1'b1 == ap_CS_fsm_state164) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state168) | (1'b1 == ap_CS_fsm_state167) | (1'b1 == ap_CS_fsm_state166) | (1'b1 == ap_CS_fsm_state165) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state12) & (gmem_RVALID == 1'b1)))) begin
        grp_fu_816_ce = 1'b1;
    end else begin
        grp_fu_816_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state164)) begin
        grp_fu_816_p0 = shl_ln230_fu_1787_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_816_p0 = tempo_read_reg_2115;
    end else begin
        grp_fu_816_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state290)) begin
        wah_values_buffer_address0 = zext_ln241_fu_2036_p1;
    end else if ((1'b1 == ap_CS_fsm_state242)) begin
        wah_values_buffer_address0 = zext_ln226_fu_1796_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        wah_values_buffer_address0 = p_cast6_fu_917_p1;
    end else begin
        wah_values_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state290) | (1'b1 == ap_CS_fsm_state242) | (1'b1 == ap_CS_fsm_state4))) begin
        wah_values_buffer_ce0 = 1'b1;
    end else begin
        wah_values_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state242)) begin
        wah_values_buffer_d0 = tmp_int_reg_689;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        wah_values_buffer_d0 = 32'd0;
    end else begin
        wah_values_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state242) | ((exitcond3564_fu_922_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        wah_values_buffer_we0 = 1'b1;
    end else begin
        wah_values_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond3628_fu_862_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond3575_fu_892_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond3564_fu_922_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((icmp_ln143_fu_1076_p2 == 1'd1) & (icmp_ln141_fu_1071_p2 == 1'd0) & (tmp_reg_2255 == 1'd1) & (1'b1 == ap_CS_fsm_state14) & (1'b1 == INPUT_r_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else if (((icmp_ln141_fu_1071_p2 == 1'd1) & (tmp_reg_2255 == 1'd1) & (1'b1 == ap_CS_fsm_state14) & (1'b1 == INPUT_r_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else if (((1'b1 == ap_CS_fsm_state14) & (1'b1 == INPUT_r_TVALID_int_regslice) & ((tmp_reg_2255 == 1'd0) | ((icmp_ln143_fu_1076_p2 == 1'd0) & (icmp_ln141_fu_1071_p2 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((tmp_12_reg_2259 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            if (((grp_guitar_effects_Pipeline_LPF_Loop_fu_758_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            if (((icmp_ln192_fu_1280_p2 == 1'd1) & (icmp_ln182_fu_1275_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end else if (((1'b1 == ap_CS_fsm_state59) & (((icmp_ln182_fu_1275_p2 == 1'd0) & (1'd0 == and_ln191_1_fu_1302_p2)) | ((icmp_ln192_fu_1280_p2 == 1'd0) & (icmp_ln182_fu_1275_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            if (((tmp_13_reg_2263 == 1'd0) & (1'b1 == ap_CS_fsm_state87))) begin
                ap_NS_fsm = ap_ST_fsm_state164;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state115;
            end
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        ap_ST_fsm_state154 : begin
            ap_NS_fsm = ap_ST_fsm_state155;
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_state156;
        end
        ap_ST_fsm_state156 : begin
            ap_NS_fsm = ap_ST_fsm_state157;
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state158 : begin
            ap_NS_fsm = ap_ST_fsm_state159;
        end
        ap_ST_fsm_state159 : begin
            ap_NS_fsm = ap_ST_fsm_state160;
        end
        ap_ST_fsm_state160 : begin
            ap_NS_fsm = ap_ST_fsm_state161;
        end
        ap_ST_fsm_state161 : begin
            ap_NS_fsm = ap_ST_fsm_state162;
        end
        ap_ST_fsm_state162 : begin
            ap_NS_fsm = ap_ST_fsm_state163;
        end
        ap_ST_fsm_state163 : begin
            ap_NS_fsm = ap_ST_fsm_state164;
        end
        ap_ST_fsm_state164 : begin
            if (((trunc_ln23_reg_2176 == 1'd0) & (1'b1 == ap_CS_fsm_state164))) begin
                ap_NS_fsm = ap_ST_fsm_state304;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state165;
            end
        end
        ap_ST_fsm_state165 : begin
            ap_NS_fsm = ap_ST_fsm_state166;
        end
        ap_ST_fsm_state166 : begin
            ap_NS_fsm = ap_ST_fsm_state167;
        end
        ap_ST_fsm_state167 : begin
            ap_NS_fsm = ap_ST_fsm_state168;
        end
        ap_ST_fsm_state168 : begin
            ap_NS_fsm = ap_ST_fsm_state169;
        end
        ap_ST_fsm_state169 : begin
            ap_NS_fsm = ap_ST_fsm_state170;
        end
        ap_ST_fsm_state170 : begin
            ap_NS_fsm = ap_ST_fsm_state171;
        end
        ap_ST_fsm_state171 : begin
            ap_NS_fsm = ap_ST_fsm_state172;
        end
        ap_ST_fsm_state172 : begin
            ap_NS_fsm = ap_ST_fsm_state173;
        end
        ap_ST_fsm_state173 : begin
            ap_NS_fsm = ap_ST_fsm_state174;
        end
        ap_ST_fsm_state174 : begin
            ap_NS_fsm = ap_ST_fsm_state175;
        end
        ap_ST_fsm_state175 : begin
            ap_NS_fsm = ap_ST_fsm_state176;
        end
        ap_ST_fsm_state176 : begin
            ap_NS_fsm = ap_ST_fsm_state177;
        end
        ap_ST_fsm_state177 : begin
            ap_NS_fsm = ap_ST_fsm_state178;
        end
        ap_ST_fsm_state178 : begin
            ap_NS_fsm = ap_ST_fsm_state179;
        end
        ap_ST_fsm_state179 : begin
            ap_NS_fsm = ap_ST_fsm_state180;
        end
        ap_ST_fsm_state180 : begin
            ap_NS_fsm = ap_ST_fsm_state181;
        end
        ap_ST_fsm_state181 : begin
            ap_NS_fsm = ap_ST_fsm_state182;
        end
        ap_ST_fsm_state182 : begin
            ap_NS_fsm = ap_ST_fsm_state183;
        end
        ap_ST_fsm_state183 : begin
            ap_NS_fsm = ap_ST_fsm_state184;
        end
        ap_ST_fsm_state184 : begin
            ap_NS_fsm = ap_ST_fsm_state185;
        end
        ap_ST_fsm_state185 : begin
            ap_NS_fsm = ap_ST_fsm_state186;
        end
        ap_ST_fsm_state186 : begin
            ap_NS_fsm = ap_ST_fsm_state187;
        end
        ap_ST_fsm_state187 : begin
            ap_NS_fsm = ap_ST_fsm_state188;
        end
        ap_ST_fsm_state188 : begin
            ap_NS_fsm = ap_ST_fsm_state189;
        end
        ap_ST_fsm_state189 : begin
            ap_NS_fsm = ap_ST_fsm_state190;
        end
        ap_ST_fsm_state190 : begin
            ap_NS_fsm = ap_ST_fsm_state191;
        end
        ap_ST_fsm_state191 : begin
            ap_NS_fsm = ap_ST_fsm_state192;
        end
        ap_ST_fsm_state192 : begin
            ap_NS_fsm = ap_ST_fsm_state193;
        end
        ap_ST_fsm_state193 : begin
            ap_NS_fsm = ap_ST_fsm_state194;
        end
        ap_ST_fsm_state194 : begin
            ap_NS_fsm = ap_ST_fsm_state195;
        end
        ap_ST_fsm_state195 : begin
            ap_NS_fsm = ap_ST_fsm_state196;
        end
        ap_ST_fsm_state196 : begin
            ap_NS_fsm = ap_ST_fsm_state197;
        end
        ap_ST_fsm_state197 : begin
            ap_NS_fsm = ap_ST_fsm_state198;
        end
        ap_ST_fsm_state198 : begin
            ap_NS_fsm = ap_ST_fsm_state199;
        end
        ap_ST_fsm_state199 : begin
            ap_NS_fsm = ap_ST_fsm_state200;
        end
        ap_ST_fsm_state200 : begin
            ap_NS_fsm = ap_ST_fsm_state201;
        end
        ap_ST_fsm_state201 : begin
            ap_NS_fsm = ap_ST_fsm_state202;
        end
        ap_ST_fsm_state202 : begin
            ap_NS_fsm = ap_ST_fsm_state203;
        end
        ap_ST_fsm_state203 : begin
            ap_NS_fsm = ap_ST_fsm_state204;
        end
        ap_ST_fsm_state204 : begin
            ap_NS_fsm = ap_ST_fsm_state205;
        end
        ap_ST_fsm_state205 : begin
            ap_NS_fsm = ap_ST_fsm_state206;
        end
        ap_ST_fsm_state206 : begin
            ap_NS_fsm = ap_ST_fsm_state207;
        end
        ap_ST_fsm_state207 : begin
            ap_NS_fsm = ap_ST_fsm_state208;
        end
        ap_ST_fsm_state208 : begin
            ap_NS_fsm = ap_ST_fsm_state209;
        end
        ap_ST_fsm_state209 : begin
            ap_NS_fsm = ap_ST_fsm_state210;
        end
        ap_ST_fsm_state210 : begin
            ap_NS_fsm = ap_ST_fsm_state211;
        end
        ap_ST_fsm_state211 : begin
            ap_NS_fsm = ap_ST_fsm_state212;
        end
        ap_ST_fsm_state212 : begin
            ap_NS_fsm = ap_ST_fsm_state213;
        end
        ap_ST_fsm_state213 : begin
            ap_NS_fsm = ap_ST_fsm_state214;
        end
        ap_ST_fsm_state214 : begin
            ap_NS_fsm = ap_ST_fsm_state215;
        end
        ap_ST_fsm_state215 : begin
            ap_NS_fsm = ap_ST_fsm_state216;
        end
        ap_ST_fsm_state216 : begin
            ap_NS_fsm = ap_ST_fsm_state217;
        end
        ap_ST_fsm_state217 : begin
            ap_NS_fsm = ap_ST_fsm_state218;
        end
        ap_ST_fsm_state218 : begin
            ap_NS_fsm = ap_ST_fsm_state219;
        end
        ap_ST_fsm_state219 : begin
            ap_NS_fsm = ap_ST_fsm_state220;
        end
        ap_ST_fsm_state220 : begin
            ap_NS_fsm = ap_ST_fsm_state221;
        end
        ap_ST_fsm_state221 : begin
            ap_NS_fsm = ap_ST_fsm_state222;
        end
        ap_ST_fsm_state222 : begin
            ap_NS_fsm = ap_ST_fsm_state223;
        end
        ap_ST_fsm_state223 : begin
            ap_NS_fsm = ap_ST_fsm_state224;
        end
        ap_ST_fsm_state224 : begin
            ap_NS_fsm = ap_ST_fsm_state225;
        end
        ap_ST_fsm_state225 : begin
            ap_NS_fsm = ap_ST_fsm_state226;
        end
        ap_ST_fsm_state226 : begin
            ap_NS_fsm = ap_ST_fsm_state227;
        end
        ap_ST_fsm_state227 : begin
            ap_NS_fsm = ap_ST_fsm_state228;
        end
        ap_ST_fsm_state228 : begin
            ap_NS_fsm = ap_ST_fsm_state229;
        end
        ap_ST_fsm_state229 : begin
            ap_NS_fsm = ap_ST_fsm_state230;
        end
        ap_ST_fsm_state230 : begin
            ap_NS_fsm = ap_ST_fsm_state231;
        end
        ap_ST_fsm_state231 : begin
            ap_NS_fsm = ap_ST_fsm_state232;
        end
        ap_ST_fsm_state232 : begin
            ap_NS_fsm = ap_ST_fsm_state233;
        end
        ap_ST_fsm_state233 : begin
            ap_NS_fsm = ap_ST_fsm_state234;
        end
        ap_ST_fsm_state234 : begin
            ap_NS_fsm = ap_ST_fsm_state235;
        end
        ap_ST_fsm_state235 : begin
            ap_NS_fsm = ap_ST_fsm_state236;
        end
        ap_ST_fsm_state236 : begin
            ap_NS_fsm = ap_ST_fsm_state237;
        end
        ap_ST_fsm_state237 : begin
            ap_NS_fsm = ap_ST_fsm_state238;
        end
        ap_ST_fsm_state238 : begin
            ap_NS_fsm = ap_ST_fsm_state239;
        end
        ap_ST_fsm_state239 : begin
            ap_NS_fsm = ap_ST_fsm_state240;
        end
        ap_ST_fsm_state240 : begin
            ap_NS_fsm = ap_ST_fsm_state241;
        end
        ap_ST_fsm_state241 : begin
            ap_NS_fsm = ap_ST_fsm_state242;
        end
        ap_ST_fsm_state242 : begin
            ap_NS_fsm = ap_ST_fsm_state243;
        end
        ap_ST_fsm_state243 : begin
            ap_NS_fsm = ap_ST_fsm_state244;
        end
        ap_ST_fsm_state244 : begin
            if (((1'b1 == ap_CS_fsm_state244) & (grp_sin_or_cos_double_s_fu_767_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state245;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state244;
            end
        end
        ap_ST_fsm_state245 : begin
            ap_NS_fsm = ap_ST_fsm_state246;
        end
        ap_ST_fsm_state246 : begin
            ap_NS_fsm = ap_ST_fsm_state247;
        end
        ap_ST_fsm_state247 : begin
            ap_NS_fsm = ap_ST_fsm_state248;
        end
        ap_ST_fsm_state248 : begin
            ap_NS_fsm = ap_ST_fsm_state249;
        end
        ap_ST_fsm_state249 : begin
            ap_NS_fsm = ap_ST_fsm_state250;
        end
        ap_ST_fsm_state250 : begin
            ap_NS_fsm = ap_ST_fsm_state251;
        end
        ap_ST_fsm_state251 : begin
            ap_NS_fsm = ap_ST_fsm_state252;
        end
        ap_ST_fsm_state252 : begin
            ap_NS_fsm = ap_ST_fsm_state253;
        end
        ap_ST_fsm_state253 : begin
            ap_NS_fsm = ap_ST_fsm_state254;
        end
        ap_ST_fsm_state254 : begin
            ap_NS_fsm = ap_ST_fsm_state255;
        end
        ap_ST_fsm_state255 : begin
            ap_NS_fsm = ap_ST_fsm_state256;
        end
        ap_ST_fsm_state256 : begin
            ap_NS_fsm = ap_ST_fsm_state257;
        end
        ap_ST_fsm_state257 : begin
            ap_NS_fsm = ap_ST_fsm_state258;
        end
        ap_ST_fsm_state258 : begin
            ap_NS_fsm = ap_ST_fsm_state259;
        end
        ap_ST_fsm_state259 : begin
            ap_NS_fsm = ap_ST_fsm_state260;
        end
        ap_ST_fsm_state260 : begin
            ap_NS_fsm = ap_ST_fsm_state261;
        end
        ap_ST_fsm_state261 : begin
            ap_NS_fsm = ap_ST_fsm_state262;
        end
        ap_ST_fsm_state262 : begin
            ap_NS_fsm = ap_ST_fsm_state263;
        end
        ap_ST_fsm_state263 : begin
            ap_NS_fsm = ap_ST_fsm_state264;
        end
        ap_ST_fsm_state264 : begin
            ap_NS_fsm = ap_ST_fsm_state265;
        end
        ap_ST_fsm_state265 : begin
            ap_NS_fsm = ap_ST_fsm_state266;
        end
        ap_ST_fsm_state266 : begin
            ap_NS_fsm = ap_ST_fsm_state267;
        end
        ap_ST_fsm_state267 : begin
            ap_NS_fsm = ap_ST_fsm_state268;
        end
        ap_ST_fsm_state268 : begin
            ap_NS_fsm = ap_ST_fsm_state269;
        end
        ap_ST_fsm_state269 : begin
            ap_NS_fsm = ap_ST_fsm_state270;
        end
        ap_ST_fsm_state270 : begin
            ap_NS_fsm = ap_ST_fsm_state271;
        end
        ap_ST_fsm_state271 : begin
            if (((1'b1 == ap_CS_fsm_state271) & (gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state272;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state271;
            end
        end
        ap_ST_fsm_state272 : begin
            ap_NS_fsm = ap_ST_fsm_state273;
        end
        ap_ST_fsm_state273 : begin
            ap_NS_fsm = ap_ST_fsm_state274;
        end
        ap_ST_fsm_state274 : begin
            ap_NS_fsm = ap_ST_fsm_state275;
        end
        ap_ST_fsm_state275 : begin
            ap_NS_fsm = ap_ST_fsm_state276;
        end
        ap_ST_fsm_state276 : begin
            ap_NS_fsm = ap_ST_fsm_state277;
        end
        ap_ST_fsm_state277 : begin
            ap_NS_fsm = ap_ST_fsm_state278;
        end
        ap_ST_fsm_state278 : begin
            if (((icmp_ln238_fu_2001_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state278))) begin
                ap_NS_fsm = ap_ST_fsm_state295;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state279;
            end
        end
        ap_ST_fsm_state279 : begin
            ap_NS_fsm = ap_ST_fsm_state280;
        end
        ap_ST_fsm_state280 : begin
            ap_NS_fsm = ap_ST_fsm_state281;
        end
        ap_ST_fsm_state281 : begin
            ap_NS_fsm = ap_ST_fsm_state282;
        end
        ap_ST_fsm_state282 : begin
            ap_NS_fsm = ap_ST_fsm_state283;
        end
        ap_ST_fsm_state283 : begin
            ap_NS_fsm = ap_ST_fsm_state284;
        end
        ap_ST_fsm_state284 : begin
            ap_NS_fsm = ap_ST_fsm_state285;
        end
        ap_ST_fsm_state285 : begin
            ap_NS_fsm = ap_ST_fsm_state286;
        end
        ap_ST_fsm_state286 : begin
            ap_NS_fsm = ap_ST_fsm_state287;
        end
        ap_ST_fsm_state287 : begin
            ap_NS_fsm = ap_ST_fsm_state288;
        end
        ap_ST_fsm_state288 : begin
            ap_NS_fsm = ap_ST_fsm_state289;
        end
        ap_ST_fsm_state289 : begin
            ap_NS_fsm = ap_ST_fsm_state290;
        end
        ap_ST_fsm_state290 : begin
            ap_NS_fsm = ap_ST_fsm_state291;
        end
        ap_ST_fsm_state291 : begin
            if (((1'b1 == ap_CS_fsm_state291) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state292;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state291;
            end
        end
        ap_ST_fsm_state292 : begin
            ap_NS_fsm = ap_ST_fsm_state293;
        end
        ap_ST_fsm_state293 : begin
            ap_NS_fsm = ap_ST_fsm_state294;
        end
        ap_ST_fsm_state294 : begin
            ap_NS_fsm = ap_ST_fsm_state278;
        end
        ap_ST_fsm_state295 : begin
            if (((1'b1 == ap_CS_fsm_state295) & (gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state296;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state295;
            end
        end
        ap_ST_fsm_state296 : begin
            ap_NS_fsm = ap_ST_fsm_state297;
        end
        ap_ST_fsm_state297 : begin
            ap_NS_fsm = ap_ST_fsm_state298;
        end
        ap_ST_fsm_state298 : begin
            ap_NS_fsm = ap_ST_fsm_state299;
        end
        ap_ST_fsm_state299 : begin
            ap_NS_fsm = ap_ST_fsm_state300;
        end
        ap_ST_fsm_state300 : begin
            ap_NS_fsm = ap_ST_fsm_state301;
        end
        ap_ST_fsm_state301 : begin
            ap_NS_fsm = ap_ST_fsm_state302;
        end
        ap_ST_fsm_state302 : begin
            if (((1'b1 == ap_CS_fsm_state302) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state303;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state302;
            end
        end
        ap_ST_fsm_state303 : begin
            ap_NS_fsm = ap_ST_fsm_state304;
        end
        ap_ST_fsm_state304 : begin
            if ((~((1'b1 == ap_block_state304_io) | ((tmp_last_V_reg_2334 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2334 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice))) & (tmp_last_V_reg_2334 == 1'd1) & (1'b1 == ap_CS_fsm_state304))) begin
                ap_NS_fsm = ap_ST_fsm_state306;
            end else if ((~((1'b1 == ap_block_state304_io) | ((tmp_last_V_reg_2334 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2334 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice))) & (tmp_last_V_reg_2334 == 1'd0) & (1'b1 == ap_CS_fsm_state304))) begin
                ap_NS_fsm = ap_ST_fsm_state305;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state304;
            end
        end
        ap_ST_fsm_state305 : begin
            if (((1'b1 == ap_CS_fsm_state305) & (1'b1 == OUTPUT_r_TREADY_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state305;
            end
        end
        ap_ST_fsm_state306 : begin
            if ((~((regslice_both_OUTPUT_r_V_data_V_U_apdone_blk == 1'b1) | (1'b0 == OUTPUT_r_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state306))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state306;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign INPUT_r_TREADY = regslice_both_INPUT_r_V_data_V_U_ack_in;

assign OUTPUT_r_TVALID = regslice_both_OUTPUT_r_V_data_V_U_vld_out;

assign abs_in_1_fu_1224_p3 = ((tmp_17_fu_1210_p3[0:0] == 1'b1) ? sub_ln159_fu_1218_p2 : tmp_int_7_reg_600);

assign add_ln238_1_fu_2007_p2 = (i_reg_701 + 7'd1);

assign add_ln238_fu_1962_p2 = ($signed(sext_ln238_2_fu_1959_p1) + $signed(wah_coeffs_read_reg_2109));

assign add_ln346_1_fu_1354_p2 = ($signed(zext_ln346_1_fu_1350_p1) + $signed(9'd385));

assign add_ln346_2_fu_1655_p2 = ($signed(zext_ln346_2_fu_1651_p1) + $signed(9'd385));

assign add_ln346_fu_1527_p2 = ($signed(zext_ln346_fu_1523_p1) + $signed(9'd385));

assign add_ln515_fu_1857_p2 = ($signed(zext_ln515_fu_1853_p1) + $signed(12'd3073));

assign and_ln191_1_fu_1302_p2 = (icmp_ln191_fu_1286_p2 & and_ln191_fu_1296_p2);

assign and_ln191_fu_1296_p2 = (icmp_ln192_fu_1280_p2 & icmp_ln191_1_fu_1291_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state149 = ap_CS_fsm[32'd148];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state150 = ap_CS_fsm[32'd149];

assign ap_CS_fsm_state151 = ap_CS_fsm[32'd150];

assign ap_CS_fsm_state152 = ap_CS_fsm[32'd151];

assign ap_CS_fsm_state153 = ap_CS_fsm[32'd152];

assign ap_CS_fsm_state154 = ap_CS_fsm[32'd153];

assign ap_CS_fsm_state155 = ap_CS_fsm[32'd154];

assign ap_CS_fsm_state156 = ap_CS_fsm[32'd155];

assign ap_CS_fsm_state157 = ap_CS_fsm[32'd156];

assign ap_CS_fsm_state158 = ap_CS_fsm[32'd157];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state161 = ap_CS_fsm[32'd160];

assign ap_CS_fsm_state162 = ap_CS_fsm[32'd161];

assign ap_CS_fsm_state163 = ap_CS_fsm[32'd162];

assign ap_CS_fsm_state164 = ap_CS_fsm[32'd163];

assign ap_CS_fsm_state165 = ap_CS_fsm[32'd164];

assign ap_CS_fsm_state166 = ap_CS_fsm[32'd165];

assign ap_CS_fsm_state167 = ap_CS_fsm[32'd166];

assign ap_CS_fsm_state168 = ap_CS_fsm[32'd167];

assign ap_CS_fsm_state169 = ap_CS_fsm[32'd168];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state170 = ap_CS_fsm[32'd169];

assign ap_CS_fsm_state176 = ap_CS_fsm[32'd175];

assign ap_CS_fsm_state177 = ap_CS_fsm[32'd176];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state183 = ap_CS_fsm[32'd182];

assign ap_CS_fsm_state184 = ap_CS_fsm[32'd183];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state242 = ap_CS_fsm[32'd241];

assign ap_CS_fsm_state243 = ap_CS_fsm[32'd242];

assign ap_CS_fsm_state244 = ap_CS_fsm[32'd243];

assign ap_CS_fsm_state245 = ap_CS_fsm[32'd244];

assign ap_CS_fsm_state246 = ap_CS_fsm[32'd245];

assign ap_CS_fsm_state247 = ap_CS_fsm[32'd246];

assign ap_CS_fsm_state248 = ap_CS_fsm[32'd247];

assign ap_CS_fsm_state249 = ap_CS_fsm[32'd248];

assign ap_CS_fsm_state250 = ap_CS_fsm[32'd249];

assign ap_CS_fsm_state251 = ap_CS_fsm[32'd250];

assign ap_CS_fsm_state252 = ap_CS_fsm[32'd251];

assign ap_CS_fsm_state253 = ap_CS_fsm[32'd252];

assign ap_CS_fsm_state254 = ap_CS_fsm[32'd253];

assign ap_CS_fsm_state255 = ap_CS_fsm[32'd254];

assign ap_CS_fsm_state256 = ap_CS_fsm[32'd255];

assign ap_CS_fsm_state257 = ap_CS_fsm[32'd256];

assign ap_CS_fsm_state258 = ap_CS_fsm[32'd257];

assign ap_CS_fsm_state259 = ap_CS_fsm[32'd258];

assign ap_CS_fsm_state260 = ap_CS_fsm[32'd259];

assign ap_CS_fsm_state261 = ap_CS_fsm[32'd260];

assign ap_CS_fsm_state262 = ap_CS_fsm[32'd261];

assign ap_CS_fsm_state263 = ap_CS_fsm[32'd262];

assign ap_CS_fsm_state264 = ap_CS_fsm[32'd263];

assign ap_CS_fsm_state265 = ap_CS_fsm[32'd264];

assign ap_CS_fsm_state266 = ap_CS_fsm[32'd265];

assign ap_CS_fsm_state267 = ap_CS_fsm[32'd266];

assign ap_CS_fsm_state268 = ap_CS_fsm[32'd267];

assign ap_CS_fsm_state269 = ap_CS_fsm[32'd268];

assign ap_CS_fsm_state270 = ap_CS_fsm[32'd269];

assign ap_CS_fsm_state271 = ap_CS_fsm[32'd270];

assign ap_CS_fsm_state272 = ap_CS_fsm[32'd271];

assign ap_CS_fsm_state273 = ap_CS_fsm[32'd272];

assign ap_CS_fsm_state274 = ap_CS_fsm[32'd273];

assign ap_CS_fsm_state275 = ap_CS_fsm[32'd274];

assign ap_CS_fsm_state276 = ap_CS_fsm[32'd275];

assign ap_CS_fsm_state277 = ap_CS_fsm[32'd276];

assign ap_CS_fsm_state278 = ap_CS_fsm[32'd277];

assign ap_CS_fsm_state290 = ap_CS_fsm[32'd289];

assign ap_CS_fsm_state291 = ap_CS_fsm[32'd290];

assign ap_CS_fsm_state292 = ap_CS_fsm[32'd291];

assign ap_CS_fsm_state293 = ap_CS_fsm[32'd292];

assign ap_CS_fsm_state294 = ap_CS_fsm[32'd293];

assign ap_CS_fsm_state295 = ap_CS_fsm[32'd294];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state302 = ap_CS_fsm[32'd301];

assign ap_CS_fsm_state303 = ap_CS_fsm[32'd302];

assign ap_CS_fsm_state304 = ap_CS_fsm[32'd303];

assign ap_CS_fsm_state305 = ap_CS_fsm[32'd304];

assign ap_CS_fsm_state306 = ap_CS_fsm[32'd305];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

always @ (*) begin
    ap_block_state304 = (((tmp_last_V_reg_2334 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2334 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice)));
end

always @ (*) begin
    ap_block_state304_io = (((tmp_last_V_reg_2334 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2334 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice)));
end

always @ (*) begin
    ap_block_state306 = ((regslice_both_OUTPUT_r_V_data_V_U_apdone_blk == 1'b1) | (1'b0 == OUTPUT_r_TREADY_int_regslice));
end

always @ (*) begin
    ap_condition_4265 = (~(((tmp_last_V_reg_2334 == 1'd1) & (1'b0 == OUTPUT_r_TREADY_int_regslice)) | ((tmp_last_V_reg_2334 == 1'd0) & (1'b0 == OUTPUT_r_TREADY_int_regslice))) & (1'b1 == ap_CS_fsm_state304));
end

assign ap_phi_mux_tmp_int_7_phi_fu_603_p8 = tmp_int_7_reg_600;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign conv7_i_i_i_fu_1010_p1 = $signed(distortion_clip_factor_read_reg_2148);

assign current_level_fu_1268_p3 = ((icmp_ln174_reg_2451[0:0] == 1'b1) ? compression_min_threshold_read_reg_2141 : grp_guitar_effects_Pipeline_LPF_Loop_fu_758_p_out);

assign current_sample_fu_1059_p2 = (current_sample_1_fu_324 + 32'd1);

assign data_V_1_fu_1324_p1 = reg_830;

assign data_V_2_fu_1633_p1 = reg_830;

assign data_V_3_fu_1813_p1 = reg_834;

assign data_V_fu_1497_p1 = reg_830;

assign empty_69_fu_868_p2 = (empty_fu_296 + 9'd1);

assign empty_72_fu_898_p2 = (empty_70_fu_316 + 17'd1);

assign empty_75_fu_928_p2 = (empty_73_fu_320 + 7'd1);

assign exitcond3564_fu_922_p2 = ((empty_73_fu_320 == 7'd100) ? 1'b1 : 1'b0);

assign exitcond3575_fu_892_p2 = ((empty_70_fu_316 == 17'd88200) ? 1'b1 : 1'b0);

assign exitcond3628_fu_862_p2 = ((empty_fu_296 == 9'd441) ? 1'b1 : 1'b0);

assign grp_fu_1094_p1 = conv7_i_i_i_reg_2283;

assign grp_fu_1152_p1 = conv7_i_i_i_reg_2283;

assign grp_fu_1244_p0 = (compression_buffer_index_fu_340 + 32'd1);

assign grp_fu_1244_p1 = 32'd441;

assign grp_fu_1479_p0 = (delay_buffer_index_fu_336 - delay_samples_read_reg_2120);

assign grp_fu_1479_p1 = 32'd88200;

assign grp_fu_1491_p0 = (delay_buffer_index_fu_336 + 32'd1);

assign grp_fu_1491_p1 = 32'd88200;

assign grp_fu_1807_p0 = (wah_buffer_index_fu_332 + 32'd1);

assign grp_fu_1807_p1 = 32'd100;

assign grp_fu_1953_p1 = 42'd400;

assign grp_fu_2022_p0 = ($signed(sext_ln77_reg_2670) - $signed(zext_ln240_fu_2013_p1));

assign grp_fu_2022_p1 = 9'd100;

assign grp_guitar_effects_Pipeline_LPF_Loop_fu_758_ap_start = grp_guitar_effects_Pipeline_LPF_Loop_fu_758_ap_start_reg;

assign grp_sin_or_cos_double_s_fu_767_ap_start = grp_sin_or_cos_double_s_fu_767_ap_start_reg;

assign icmp_ln1049_1_fu_1120_p2 = ((trunc_ln1049_1_reg_2396 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln1049_fu_1178_p2 = ((trunc_ln1049_reg_2423 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln141_fu_1071_p2 = (($signed(INPUT_r_TDATA_int_regslice) > $signed(distortion_threshold_read_reg_2153)) ? 1'b1 : 1'b0);

assign icmp_ln143_fu_1076_p2 = (($signed(INPUT_r_TDATA_int_regslice) < $signed(negative_threshold_reg_2278)) ? 1'b1 : 1'b0);

assign icmp_ln174_fu_1254_p2 = (($signed(current_sample_1_fu_324) < $signed(32'd441)) ? 1'b1 : 1'b0);

assign icmp_ln182_fu_1275_p2 = (($signed(current_level_fu_1268_p3) > $signed(compression_max_threshold_read_reg_2135)) ? 1'b1 : 1'b0);

assign icmp_ln191_1_fu_1291_p2 = (($signed(current_level_fu_1268_p3) > $signed(compression_zero_threshold_read_reg_2130)) ? 1'b1 : 1'b0);

assign icmp_ln191_fu_1286_p2 = (($signed(current_level_fu_1268_p3) < $signed(compression_min_threshold_read_reg_2141)) ? 1'b1 : 1'b0);

assign icmp_ln192_fu_1280_p2 = (($signed(current_level_fu_1268_p3) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln238_fu_2001_p2 = ((i_reg_701 == 7'd100) ? 1'b1 : 1'b0);

assign isNeg_2_fu_1360_p3 = add_ln346_1_fu_1354_p2[32'd8];

assign isNeg_3_fu_1661_p3 = add_ln346_2_fu_1655_p2[32'd8];

assign isNeg_4_fu_1863_p3 = add_ln515_fu_1857_p2[32'd11];

assign isNeg_fu_1533_p3 = add_ln346_fu_1527_p2[32'd8];

assign mantissa_1_fu_1386_p4 = {{{{1'd1}, {p_Result_46_reg_2490}}}, {1'd0}};

assign mantissa_2_fu_1687_p4 = {{{{1'd1}, {p_Result_48_reg_2572}}}, {1'd0}};

assign mantissa_3_fu_1839_p4 = {{{{1'd1}, {p_Result_50_fu_1835_p1}}}, {1'd0}};

assign mantissa_fu_1559_p4 = {{{{1'd1}, {p_Result_44_reg_2531}}}, {1'd0}};

assign negative_threshold_fu_1005_p2 = (32'd0 - distortion_threshold_read_reg_2153);

assign or_ln101_fu_1259_p2 = (empty_78_reg_586 | 32'd4);

assign or_ln106_fu_1754_p2 = (empty_79_reg_631 | 32'd2);

assign or_ln111_fu_1987_p2 = (empty_80_reg_678 | 32'd1);

assign or_ln96_fu_1065_p2 = (empty_76_fu_328 | 32'd8);

assign output_fu_1775_p2 = (result_V_15_fu_1769_p3 + tmp_int_3_reg_648);

assign p_Result_29_fu_1113_p3 = r_V_36_reg_2384[32'd39];

assign p_Result_44_fu_1519_p1 = data_V_fu_1497_p1[22:0];

assign p_Result_46_fu_1346_p1 = data_V_1_fu_1324_p1[22:0];

assign p_Result_47_fu_1762_p3 = data_V_2_reg_2567[32'd31];

assign p_Result_48_fu_1647_p1 = data_V_2_fu_1633_p1[22:0];

assign p_Result_50_fu_1835_p1 = data_V_3_fu_1813_p1[51:0];

assign p_Result_s_fu_1171_p3 = r_V_35_reg_2411[32'd39];

assign p_cast5_fu_887_p1 = empty_70_fu_316;

assign p_cast6_fu_917_p1 = empty_73_fu_320;

assign p_cast_fu_857_p1 = empty_fu_296;

assign r_V_22_fu_1086_p2 = (INPUT_r_TDATA_int_regslice - distortion_threshold_read_reg_2153);

assign r_V_25_fu_1579_p2 = zext_ln15_fu_1568_p1 >> zext_ln1488_fu_1575_p1;

assign r_V_26_fu_1585_p2 = zext_ln15_fu_1568_p1 << zext_ln1488_fu_1575_p1;

assign r_V_27_fu_1406_p2 = zext_ln15_1_fu_1395_p1 >> zext_ln1488_2_fu_1402_p1;

assign r_V_28_fu_1412_p2 = zext_ln15_1_fu_1395_p1 << zext_ln1488_2_fu_1402_p1;

assign r_V_29_fu_1707_p2 = zext_ln15_2_fu_1696_p1 >> zext_ln1488_3_fu_1703_p1;

assign r_V_30_fu_1713_p2 = zext_ln15_2_fu_1696_p1 << zext_ln1488_3_fu_1703_p1;

assign r_V_31_fu_1897_p2 = zext_ln15_3_fu_1849_p1 >> zext_ln1488_4_fu_1893_p1;

assign r_V_32_fu_1903_p2 = zext_ln15_3_fu_1849_p1 << zext_ln1488_4_fu_1893_p1;

assign r_V_fu_1081_p2 = (INPUT_r_TDATA_int_regslice + distortion_threshold_read_reg_2153);

assign result_1_fu_1144_p2 = (ret_V_11_fu_1137_p3 - distortion_threshold_read_reg_2153);

assign result_3_fu_2069_p2 = ($signed(select_ln241_fu_2061_p3) + $signed(result_2_reg_712));

assign result_V_12_fu_1939_p2 = (32'd0 - val_3_reg_2632);

assign result_V_14_fu_1464_p3 = ((p_Result_43_reg_2526[0:0] == 1'b1) ? result_V_5_fu_1459_p2 : val_reg_2546);

assign result_V_15_fu_1769_p3 = ((p_Result_47_fu_1762_p3[0:0] == 1'b1) ? result_V_9_reg_2592 : val_2_reg_2587);

assign result_V_16_fu_1944_p3 = ((p_Result_49_reg_2627[0:0] == 1'b1) ? result_V_12_fu_1939_p2 : val_3_reg_2632);

assign result_V_5_fu_1459_p2 = (32'd0 - val_reg_2546);

assign result_V_6_fu_1447_p2 = (32'd0 - val_1_reg_2505);

assign result_V_9_fu_1748_p2 = (32'd0 - val_2_fu_1741_p3);

assign result_V_fu_1452_p3 = ((p_Result_45_reg_2485[0:0] == 1'b1) ? result_V_6_fu_1447_p2 : val_1_reg_2505);

assign result_fu_1202_p2 = (ret_V_9_fu_1195_p3 + distortion_threshold_read_reg_2153);

assign ret_V_10_fu_1125_p2 = (ret_V_9_cast_reg_2389 + 32'd1);

assign ret_V_11_fu_1137_p3 = ((p_Result_29_fu_1113_p3[0:0] == 1'b1) ? select_ln1048_1_fu_1130_p3 : ret_V_9_cast_reg_2389);

assign ret_V_9_fu_1195_p3 = ((p_Result_s_fu_1171_p3[0:0] == 1'b1) ? select_ln1048_fu_1188_p3 : ret_V_cast_reg_2416);

assign ret_V_fu_1183_p2 = (ret_V_cast_reg_2416 + 32'd1);

assign select_ln1048_1_fu_1130_p3 = ((icmp_ln1049_1_fu_1120_p2[0:0] == 1'b1) ? ret_V_9_cast_reg_2389 : ret_V_10_fu_1125_p2);

assign select_ln1048_fu_1188_p3 = ((icmp_ln1049_fu_1178_p2[0:0] == 1'b1) ? ret_V_cast_reg_2416 : ret_V_fu_1183_p2);

assign select_ln241_fu_2061_p3 = ((tmp_35_fu_2054_p3[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign sext_ln1488_1_fu_1399_p1 = $signed(ush_2_reg_2500);

assign sext_ln1488_2_fu_1700_p1 = $signed(ush_3_reg_2582);

assign sext_ln1488_3_fu_1889_p1 = $signed(ush_4_fu_1881_p3);

assign sext_ln1488_fu_1572_p1 = $signed(ush_reg_2541);

assign sext_ln1512_1_fu_1374_p1 = $signed(sub_ln1512_4_fu_1368_p2);

assign sext_ln1512_2_fu_1675_p1 = $signed(sub_ln1512_fu_1669_p2);

assign sext_ln1512_3_fu_1877_p1 = $signed(sub_ln1512_2_fu_1871_p2);

assign sext_ln1512_fu_1547_p1 = $signed(sub_ln1512_3_fu_1541_p2);

assign sext_ln238_2_fu_1959_p1 = $signed(mul_ln238_reg_2648);

assign sext_ln238_3_fu_2075_p1 = result_2_reg_712;

assign sext_ln238_fu_1977_p1 = $signed(trunc_ln_fu_1967_p4);

assign sext_ln77_fu_1997_p1 = $signed(trunc_ln77_fu_1993_p1);

assign sext_ln85_fu_994_p1 = $signed(trunc_ln6_fu_985_p4);

assign shl_ln230_fu_1787_p2 = current_sample_1_fu_324 << 32'd1;

assign sub_ln1512_2_fu_1871_p2 = (11'd1023 - xs_exp_V_4_fu_1825_p4);

assign sub_ln1512_3_fu_1541_p2 = (8'd127 - xs_exp_V_fu_1509_p4);

assign sub_ln1512_4_fu_1368_p2 = (8'd127 - xs_exp_V_1_fu_1336_p4);

assign sub_ln1512_fu_1669_p2 = (8'd127 - xs_exp_V_3_fu_1637_p4);

assign sub_ln159_fu_1218_p2 = (32'd0 - tmp_int_7_reg_600);

assign tmp_17_fu_1210_p3 = tmp_int_7_reg_600[32'd31];

assign tmp_22_fu_1591_p3 = r_V_25_fu_1579_p2[32'd24];

assign tmp_26_fu_1418_p3 = r_V_27_fu_1406_p2[32'd24];

assign tmp_30_fu_1719_p3 = r_V_29_fu_1707_p2[32'd24];

assign tmp_34_fu_1909_p3 = r_V_31_fu_1897_p2[32'd53];

assign tmp_35_fu_2054_p3 = r_V_37_reg_2708[32'd63];

assign tmp_3_fu_1731_p4 = {{r_V_30_fu_1713_p2[55:24]}};

assign tmp_4_fu_1921_p4 = {{r_V_32_fu_1903_p2[84:53]}};

assign tmp_8_fu_1603_p4 = {{r_V_26_fu_1585_p2[55:24]}};

assign tmp_s_fu_1430_p4 = {{r_V_28_fu_1412_p2[55:24]}};

assign trunc_ln1049_1_fu_1109_p1 = grp_fu_1094_p2[6:0];

assign trunc_ln1049_fu_1167_p1 = grp_fu_1152_p2[6:0];

assign trunc_ln210_fu_1625_p1 = srem_ln210_reg_2552[16:0];

assign trunc_ln23_fu_845_p1 = control[0:0];

assign trunc_ln241_fu_2032_p1 = grp_fu_2022_p2[6:0];

assign trunc_ln65_fu_1250_p1 = grp_fu_1244_p2[9:0];

assign trunc_ln6_fu_985_p4 = {{wah_coeffs_read_reg_2109[63:2]}};

assign trunc_ln77_fu_1993_p1 = grp_fu_1807_p2[7:0];

assign trunc_ln_fu_1967_p4 = {{add_ln238_fu_1962_p2[63:2]}};

assign ush_2_fu_1378_p3 = ((isNeg_2_fu_1360_p3[0:0] == 1'b1) ? sext_ln1512_1_fu_1374_p1 : add_ln346_1_fu_1354_p2);

assign ush_3_fu_1679_p3 = ((isNeg_3_fu_1661_p3[0:0] == 1'b1) ? sext_ln1512_2_fu_1675_p1 : add_ln346_2_fu_1655_p2);

assign ush_4_fu_1881_p3 = ((isNeg_4_fu_1863_p3[0:0] == 1'b1) ? sext_ln1512_3_fu_1877_p1 : add_ln515_fu_1857_p2);

assign ush_fu_1551_p3 = ((isNeg_fu_1533_p3[0:0] == 1'b1) ? sext_ln1512_fu_1547_p1 : add_ln346_fu_1527_p2);

assign val_1_fu_1440_p3 = ((isNeg_2_reg_2495[0:0] == 1'b1) ? zext_ln818_1_fu_1426_p1 : tmp_s_fu_1430_p4);

assign val_2_fu_1741_p3 = ((isNeg_3_reg_2577[0:0] == 1'b1) ? zext_ln818_2_fu_1727_p1 : tmp_3_fu_1731_p4);

assign val_3_fu_1931_p3 = ((isNeg_4_fu_1863_p3[0:0] == 1'b1) ? zext_ln818_3_fu_1917_p1 : tmp_4_fu_1921_p4);

assign val_fu_1613_p3 = ((isNeg_reg_2536[0:0] == 1'b1) ? zext_ln818_fu_1599_p1 : tmp_8_fu_1603_p4);

assign xs_exp_V_1_fu_1336_p4 = {{data_V_1_fu_1324_p1[30:23]}};

assign xs_exp_V_3_fu_1637_p4 = {{data_V_2_fu_1633_p1[30:23]}};

assign xs_exp_V_4_fu_1825_p4 = {{data_V_3_fu_1813_p1[62:52]}};

assign xs_exp_V_fu_1509_p4 = {{data_V_fu_1497_p1[30:23]}};

assign zext_ln1488_2_fu_1402_p1 = $unsigned(sext_ln1488_1_fu_1399_p1);

assign zext_ln1488_3_fu_1703_p1 = $unsigned(sext_ln1488_2_fu_1700_p1);

assign zext_ln1488_4_fu_1893_p1 = $unsigned(sext_ln1488_3_fu_1889_p1);

assign zext_ln1488_fu_1575_p1 = $unsigned(sext_ln1488_fu_1572_p1);

assign zext_ln15_1_fu_1395_p1 = mantissa_1_fu_1386_p4;

assign zext_ln15_2_fu_1696_p1 = mantissa_2_fu_1687_p4;

assign zext_ln15_3_fu_1849_p1 = mantissa_3_fu_1839_p4;

assign zext_ln15_fu_1568_p1 = mantissa_fu_1559_p4;

assign zext_ln163_fu_1233_p1 = compression_buffer_index_fu_340;

assign zext_ln210_fu_1628_p1 = trunc_ln210_fu_1625_p1;

assign zext_ln213_fu_1783_p1 = delay_buffer_index_load_reg_2511;

assign zext_ln226_fu_1796_p1 = wah_buffer_index_fu_332;

assign zext_ln240_fu_2013_p1 = i_reg_701;

assign zext_ln241_fu_2036_p1 = trunc_ln241_fu_2032_p1;

assign zext_ln346_1_fu_1350_p1 = xs_exp_V_1_fu_1336_p4;

assign zext_ln346_2_fu_1651_p1 = xs_exp_V_3_fu_1637_p4;

assign zext_ln346_fu_1523_p1 = xs_exp_V_fu_1509_p4;

assign zext_ln515_fu_1853_p1 = xs_exp_V_4_fu_1825_p4;

assign zext_ln818_1_fu_1426_p1 = tmp_26_fu_1418_p3;

assign zext_ln818_2_fu_1727_p1 = tmp_30_fu_1719_p3;

assign zext_ln818_3_fu_1917_p1 = tmp_34_fu_1909_p3;

assign zext_ln818_fu_1599_p1 = tmp_22_fu_1591_p3;

always @ (posedge ap_clk) begin
    or_ln96_reg_2353[3] <= 1'b1;
    or_ln101_reg_2456[2] <= 1'b1;
    or_ln111_reg_2659[0] <= 1'b1;
end


reg find_kernel_block = 0;
// synthesis translate_off
`include "guitar_effects_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //guitar_effects

