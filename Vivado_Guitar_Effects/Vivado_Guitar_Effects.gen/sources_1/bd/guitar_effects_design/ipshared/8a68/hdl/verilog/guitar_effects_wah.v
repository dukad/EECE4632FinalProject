// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module guitar_effects_wah (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r,
        tempo,
        current_sample,
        wah_buffer_index_read,
        wah_values_buffer_address0,
        wah_values_buffer_ce0,
        wah_values_buffer_we0,
        wah_values_buffer_d0,
        wah_values_buffer_q0,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        bandpass_coeffs,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        grp_fu_2247_p_din0,
        grp_fu_2247_p_din1,
        grp_fu_2247_p_opcode,
        grp_fu_2247_p_dout0,
        grp_fu_2247_p_ce,
        grp_fu_701_p_din0,
        grp_fu_701_p_din1,
        grp_fu_701_p_dout0,
        grp_fu_701_p_ce,
        grp_fu_709_p_din0,
        grp_fu_709_p_dout0,
        grp_fu_709_p_ce
);

parameter    ap_ST_fsm_state1 = 152'd1;
parameter    ap_ST_fsm_state2 = 152'd2;
parameter    ap_ST_fsm_state3 = 152'd4;
parameter    ap_ST_fsm_state4 = 152'd8;
parameter    ap_ST_fsm_state5 = 152'd16;
parameter    ap_ST_fsm_state6 = 152'd32;
parameter    ap_ST_fsm_state7 = 152'd64;
parameter    ap_ST_fsm_state8 = 152'd128;
parameter    ap_ST_fsm_state9 = 152'd256;
parameter    ap_ST_fsm_state10 = 152'd512;
parameter    ap_ST_fsm_state11 = 152'd1024;
parameter    ap_ST_fsm_state12 = 152'd2048;
parameter    ap_ST_fsm_state13 = 152'd4096;
parameter    ap_ST_fsm_state14 = 152'd8192;
parameter    ap_ST_fsm_state15 = 152'd16384;
parameter    ap_ST_fsm_state16 = 152'd32768;
parameter    ap_ST_fsm_state17 = 152'd65536;
parameter    ap_ST_fsm_state18 = 152'd131072;
parameter    ap_ST_fsm_state19 = 152'd262144;
parameter    ap_ST_fsm_state20 = 152'd524288;
parameter    ap_ST_fsm_state21 = 152'd1048576;
parameter    ap_ST_fsm_state22 = 152'd2097152;
parameter    ap_ST_fsm_state23 = 152'd4194304;
parameter    ap_ST_fsm_state24 = 152'd8388608;
parameter    ap_ST_fsm_state25 = 152'd16777216;
parameter    ap_ST_fsm_state26 = 152'd33554432;
parameter    ap_ST_fsm_state27 = 152'd67108864;
parameter    ap_ST_fsm_state28 = 152'd134217728;
parameter    ap_ST_fsm_state29 = 152'd268435456;
parameter    ap_ST_fsm_state30 = 152'd536870912;
parameter    ap_ST_fsm_state31 = 152'd1073741824;
parameter    ap_ST_fsm_state32 = 152'd2147483648;
parameter    ap_ST_fsm_state33 = 152'd4294967296;
parameter    ap_ST_fsm_state34 = 152'd8589934592;
parameter    ap_ST_fsm_state35 = 152'd17179869184;
parameter    ap_ST_fsm_state36 = 152'd34359738368;
parameter    ap_ST_fsm_state37 = 152'd68719476736;
parameter    ap_ST_fsm_state38 = 152'd137438953472;
parameter    ap_ST_fsm_state39 = 152'd274877906944;
parameter    ap_ST_fsm_state40 = 152'd549755813888;
parameter    ap_ST_fsm_state41 = 152'd1099511627776;
parameter    ap_ST_fsm_state42 = 152'd2199023255552;
parameter    ap_ST_fsm_state43 = 152'd4398046511104;
parameter    ap_ST_fsm_state44 = 152'd8796093022208;
parameter    ap_ST_fsm_state45 = 152'd17592186044416;
parameter    ap_ST_fsm_state46 = 152'd35184372088832;
parameter    ap_ST_fsm_state47 = 152'd70368744177664;
parameter    ap_ST_fsm_state48 = 152'd140737488355328;
parameter    ap_ST_fsm_state49 = 152'd281474976710656;
parameter    ap_ST_fsm_state50 = 152'd562949953421312;
parameter    ap_ST_fsm_state51 = 152'd1125899906842624;
parameter    ap_ST_fsm_state52 = 152'd2251799813685248;
parameter    ap_ST_fsm_state53 = 152'd4503599627370496;
parameter    ap_ST_fsm_state54 = 152'd9007199254740992;
parameter    ap_ST_fsm_state55 = 152'd18014398509481984;
parameter    ap_ST_fsm_state56 = 152'd36028797018963968;
parameter    ap_ST_fsm_state57 = 152'd72057594037927936;
parameter    ap_ST_fsm_state58 = 152'd144115188075855872;
parameter    ap_ST_fsm_state59 = 152'd288230376151711744;
parameter    ap_ST_fsm_state60 = 152'd576460752303423488;
parameter    ap_ST_fsm_state61 = 152'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 152'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 152'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 152'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 152'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 152'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 152'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 152'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 152'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 152'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 152'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 152'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 152'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 152'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 152'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 152'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 152'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 152'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 152'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 152'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 152'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 152'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 152'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 152'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 152'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 152'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 152'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 152'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 152'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 152'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 152'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 152'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 152'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 152'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 152'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 152'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 152'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 152'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 152'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 152'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 152'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 152'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 152'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 152'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 152'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 152'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 152'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 152'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 152'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 152'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 152'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 152'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 152'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 152'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 152'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 152'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 152'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 152'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 152'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 152'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 152'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 152'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 152'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 152'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 152'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 152'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 152'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 152'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 152'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 152'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 152'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 152'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 152'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 152'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 152'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 152'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 152'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 152'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 152'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 152'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 152'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 152'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 152'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 152'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state145 = 152'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state146 = 152'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state147 = 152'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state148 = 152'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state149 = 152'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state150 = 152'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state151 = 152'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state152 = 152'd2854495385411919762116571938898990272765493248;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] input_r;
input  [31:0] tempo;
input  [30:0] current_sample;
input  [31:0] wah_buffer_index_read;
output  [6:0] wah_values_buffer_address0;
output   wah_values_buffer_ce0;
output   wah_values_buffer_we0;
output  [31:0] wah_values_buffer_d0;
input  [31:0] wah_values_buffer_q0;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] bandpass_coeffs;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] grp_fu_2247_p_din0;
output  [31:0] grp_fu_2247_p_din1;
output  [1:0] grp_fu_2247_p_opcode;
input  [31:0] grp_fu_2247_p_dout0;
output   grp_fu_2247_p_ce;
output  [31:0] grp_fu_701_p_din0;
output  [31:0] grp_fu_701_p_din1;
input  [31:0] grp_fu_701_p_dout0;
output   grp_fu_701_p_ce;
output  [31:0] grp_fu_709_p_din0;
input  [31:0] grp_fu_709_p_dout0;
output   grp_fu_709_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] wah_values_buffer_address0;
reg wah_values_buffer_ce0;
reg wah_values_buffer_we0;
reg m_axi_gmem_ARVALID;
reg[31:0] m_axi_gmem_ARLEN;
reg m_axi_gmem_RREADY;

(* fsm_encoding = "none" *) reg   [151:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state108;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state130;
wire    ap_CS_fsm_state145;
wire    ap_CS_fsm_state152;
wire   [63:0] grp_fu_314_p1;
reg   [63:0] reg_322;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state13;
wire   [63:0] grp_fu_302_p2;
reg   [63:0] reg_328;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state102;
wire   [31:0] shl_ln_fu_335_p3;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state79;
wire   [63:0] grp_fu_309_p2;
reg   [63:0] x_assign_reg_1066;
wire   [63:0] grp_sin_or_cos_double_s_fu_269_ap_return;
reg   [63:0] tmp_reg_1071;
wire    ap_CS_fsm_state81;
wire   [63:0] grp_fu_297_p2;
reg   [63:0] add5_reg_1076;
wire    ap_CS_fsm_state95;
reg   [0:0] p_Result_4_reg_1081;
wire    ap_CS_fsm_state103;
wire   [31:0] val_fu_489_p3;
reg   [31:0] val_reg_1086;
wire   [31:0] result_V_fu_502_p3;
reg  signed [31:0] result_V_reg_1092;
wire    ap_CS_fsm_state104;
wire    ap_CS_fsm_state105;
wire   [41:0] grp_fu_511_p2;
reg   [41:0] mul_ln243_reg_1102;
wire    ap_CS_fsm_state106;
reg   [63:0] gmem_addr_reg_1107;
wire    ap_CS_fsm_state107;
wire   [31:0] grp_fu_365_p2;
reg   [31:0] srem_ln233_reg_1113;
wire    ap_CS_fsm_state114;
wire   [8:0] zext_ln243_fu_556_p1;
reg   [8:0] zext_ln243_reg_1118;
wire    ap_CS_fsm_state115;
wire   [0:0] icmp_ln243_fu_563_p2;
wire    ap_CS_fsm_state127;
reg   [31:0] wah_values_buffer_load_reg_1136;
wire    ap_CS_fsm_state128;
reg   [31:0] p_Val2_4_reg_1141;
reg   [0:0] p_Result_6_reg_1148;
wire   [0:0] icmp_ln1136_fu_612_p2;
reg   [0:0] icmp_ln1136_reg_1154;
wire    ap_CS_fsm_state131;
wire   [31:0] tmp_V_2_fu_622_p3;
reg   [31:0] tmp_V_2_reg_1159;
wire   [31:0] sub_ln1145_fu_646_p2;
reg   [31:0] sub_ln1145_reg_1166;
wire   [5:0] trunc_ln1148_fu_652_p1;
reg   [5:0] trunc_ln1148_reg_1173;
wire   [7:0] trunc_ln1144_fu_656_p1;
reg   [7:0] trunc_ln1144_reg_1178;
wire   [1:0] or_ln_fu_746_p3;
reg   [1:0] or_ln_reg_1183;
wire    ap_CS_fsm_state132;
wire   [0:0] icmp_ln1159_fu_754_p2;
reg   [0:0] icmp_ln1159_reg_1188;
reg   [62:0] m_4_reg_1193;
wire    ap_CS_fsm_state133;
reg   [0:0] p_Result_2_reg_1198;
reg   [31:0] conv1_reg_1203;
wire    ap_CS_fsm_state134;
wire   [31:0] select_ln1136_fu_875_p3;
reg   [31:0] select_ln1136_reg_1208;
reg   [31:0] mul_reg_1213;
wire    ap_CS_fsm_state138;
wire    ap_CS_fsm_state139;
reg   [31:0] temp_result_1_reg_1223;
wire    ap_CS_fsm_state143;
reg   [0:0] p_Result_9_reg_1228;
wire    ap_CS_fsm_state150;
wire   [22:0] p_Result_10_fu_908_p1;
reg   [22:0] p_Result_10_reg_1233;
wire   [0:0] isNeg_1_fu_922_p3;
reg   [0:0] isNeg_1_reg_1238;
wire   [8:0] ush_1_fu_940_p3;
reg   [8:0] ush_1_reg_1243;
wire   [31:0] val_1_fu_1002_p3;
reg   [31:0] val_1_reg_1248;
wire    ap_CS_fsm_state151;
wire    grp_sin_or_cos_double_s_fu_269_ap_start;
wire    grp_sin_or_cos_double_s_fu_269_ap_done;
wire    grp_sin_or_cos_double_s_fu_269_ap_idle;
wire    grp_sin_or_cos_double_s_fu_269_ap_ready;
reg    grp_sin_or_cos_double_s_fu_269_ap_start_reg;
wire    ap_CS_fsm_state80;
wire   [63:0] zext_ln232_fu_354_p1;
wire   [63:0] zext_ln248_fu_599_p1;
wire  signed [63:0] sext_ln243_fu_536_p1;
reg   [31:0] temp_result_fu_194;
wire    ap_CS_fsm_state144;
reg   [6:0] i_fu_198;
wire   [6:0] add_ln243_1_fu_569_p2;
wire    ap_CS_fsm_state129;
wire    ap_CS_fsm_state89;
reg   [63:0] grp_fu_302_p0;
reg   [63:0] grp_fu_302_p1;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state96;
wire    ap_CS_fsm_state21;
reg   [31:0] grp_fu_314_p0;
wire   [31:0] grp_fu_365_p0;
wire   [7:0] grp_fu_365_p1;
wire   [63:0] data_V_fu_371_p1;
wire   [51:0] p_Result_5_fu_393_p1;
wire   [53:0] mantissa_fu_397_p4;
wire   [10:0] xs_exp_V_fu_383_p4;
wire   [11:0] zext_ln515_fu_411_p1;
wire   [11:0] add_ln515_fu_415_p2;
wire   [10:0] sub_ln1512_fu_429_p2;
wire   [0:0] isNeg_fu_421_p3;
wire  signed [11:0] sext_ln1512_fu_435_p1;
wire   [11:0] ush_fu_439_p3;
wire  signed [31:0] sext_ln1488_fu_447_p1;
wire   [136:0] zext_ln15_fu_407_p1;
wire   [136:0] zext_ln1488_fu_451_p1;
wire   [136:0] r_V_fu_455_p2;
wire   [0:0] tmp_6_fu_467_p3;
wire   [136:0] r_V_1_fu_461_p2;
wire   [31:0] zext_ln818_fu_475_p1;
wire   [31:0] tmp_3_fu_479_p4;
wire   [31:0] result_V_2_fu_497_p2;
wire   [9:0] grp_fu_511_p1;
wire  signed [63:0] sext_ln243_2_fu_517_p1;
wire   [63:0] add_ln243_fu_520_p2;
wire   [61:0] trunc_ln1_fu_526_p4;
wire   [7:0] trunc_ln237_fu_546_p1;
wire   [7:0] add_ln245_fu_550_p2;
wire   [8:0] zext_ln245_fu_575_p1;
wire   [8:0] grp_fu_584_p0;
wire   [7:0] grp_fu_584_p1;
wire   [6:0] grp_fu_584_p2;
wire   [6:0] trunc_ln248_fu_595_p1;
wire   [31:0] tmp_V_fu_617_p2;
reg   [31:0] p_Result_7_fu_628_p4;
reg   [31:0] l_fu_638_p3;
wire   [31:0] lsb_index_fu_660_p2;
wire   [30:0] tmp_13_fu_665_p4;
wire   [5:0] sub_ln1148_fu_681_p2;
wire   [31:0] zext_ln1148_fu_686_p1;
wire   [31:0] lshr_ln1148_fu_690_p2;
wire   [31:0] p_Result_s_fu_696_p2;
wire   [0:0] icmp_ln1147_fu_675_p2;
wire   [0:0] icmp_ln1148_fu_701_p2;
wire   [0:0] tmp_14_fu_713_p3;
wire   [0:0] p_Result_1_fu_727_p3;
wire   [0:0] xor_ln1150_fu_721_p2;
wire   [0:0] and_ln1150_fu_734_p2;
wire   [0:0] a_fu_707_p2;
wire   [0:0] or_ln1150_fu_740_p2;
wire   [31:0] add_ln1159_fu_763_p2;
wire   [63:0] zext_ln1158_fu_760_p1;
wire   [63:0] zext_ln1159_fu_768_p1;
wire   [31:0] sub_ln1160_fu_778_p2;
wire   [63:0] zext_ln1160_fu_783_p1;
wire   [63:0] lshr_ln1159_fu_772_p2;
wire   [63:0] shl_ln1160_fu_787_p2;
wire   [63:0] m_2_fu_793_p3;
wire   [63:0] zext_ln1162_fu_800_p1;
wire   [63:0] m_3_fu_803_p2;
wire   [7:0] sub_ln1165_fu_837_p2;
wire   [7:0] select_ln1144_fu_830_p3;
wire   [7:0] add_ln1170_fu_842_p2;
wire   [63:0] zext_ln1163_fu_827_p1;
wire   [8:0] tmp_4_fu_848_p3;
wire   [63:0] p_Result_8_fu_855_p5;
wire   [31:0] LD_fu_867_p1;
wire   [31:0] bitcast_ln810_fu_871_p1;
wire   [31:0] data_V_1_fu_886_p1;
wire   [7:0] xs_exp_V_1_fu_898_p4;
wire   [8:0] zext_ln346_fu_912_p1;
wire   [8:0] add_ln346_fu_916_p2;
wire   [7:0] sub_ln1512_1_fu_930_p2;
wire  signed [8:0] sext_ln1512_1_fu_936_p1;
wire   [24:0] mantissa_1_fu_948_p4;
wire  signed [31:0] sext_ln1488_1_fu_961_p1;
wire   [78:0] zext_ln15_1_fu_957_p1;
wire   [78:0] zext_ln1488_1_fu_964_p1;
wire   [78:0] r_V_2_fu_968_p2;
wire   [0:0] tmp_11_fu_980_p3;
wire   [78:0] r_V_3_fu_974_p2;
wire   [31:0] zext_ln818_1_fu_988_p1;
wire   [31:0] tmp_7_fu_992_p4;
wire   [31:0] result_V_6_fu_1009_p2;
wire   [31:0] result_V_7_fu_1014_p3;
reg    grp_fu_294_ce;
reg    grp_fu_365_ap_start;
wire    grp_fu_365_ap_done;
reg    grp_fu_365_ce;
wire    ap_CS_fsm_state83;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state85;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_state87;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state91;
wire    ap_CS_fsm_state92;
wire    ap_CS_fsm_state93;
wire    ap_CS_fsm_state94;
wire    ap_CS_fsm_state97;
wire    ap_CS_fsm_state98;
wire    ap_CS_fsm_state99;
wire    ap_CS_fsm_state100;
wire    ap_CS_fsm_state101;
wire    ap_CS_fsm_state109;
wire    ap_CS_fsm_state110;
wire    ap_CS_fsm_state111;
wire    ap_CS_fsm_state112;
wire    ap_CS_fsm_state113;
reg    grp_fu_584_ap_start;
wire    grp_fu_584_ap_done;
reg   [151:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
wire    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
wire    ap_ST_fsm_state80_blk;
reg    ap_ST_fsm_state81_blk;
wire    ap_ST_fsm_state82_blk;
wire    ap_ST_fsm_state83_blk;
wire    ap_ST_fsm_state84_blk;
wire    ap_ST_fsm_state85_blk;
wire    ap_ST_fsm_state86_blk;
wire    ap_ST_fsm_state87_blk;
wire    ap_ST_fsm_state88_blk;
wire    ap_ST_fsm_state89_blk;
wire    ap_ST_fsm_state90_blk;
wire    ap_ST_fsm_state91_blk;
wire    ap_ST_fsm_state92_blk;
wire    ap_ST_fsm_state93_blk;
wire    ap_ST_fsm_state94_blk;
wire    ap_ST_fsm_state95_blk;
wire    ap_ST_fsm_state96_blk;
wire    ap_ST_fsm_state97_blk;
wire    ap_ST_fsm_state98_blk;
wire    ap_ST_fsm_state99_blk;
wire    ap_ST_fsm_state100_blk;
wire    ap_ST_fsm_state101_blk;
wire    ap_ST_fsm_state102_blk;
wire    ap_ST_fsm_state103_blk;
wire    ap_ST_fsm_state104_blk;
wire    ap_ST_fsm_state105_blk;
wire    ap_ST_fsm_state106_blk;
wire    ap_ST_fsm_state107_blk;
reg    ap_ST_fsm_state108_blk;
wire    ap_ST_fsm_state109_blk;
wire    ap_ST_fsm_state110_blk;
wire    ap_ST_fsm_state111_blk;
wire    ap_ST_fsm_state112_blk;
wire    ap_ST_fsm_state113_blk;
wire    ap_ST_fsm_state114_blk;
wire    ap_ST_fsm_state115_blk;
wire    ap_ST_fsm_state116_blk;
wire    ap_ST_fsm_state117_blk;
wire    ap_ST_fsm_state118_blk;
wire    ap_ST_fsm_state119_blk;
wire    ap_ST_fsm_state120_blk;
wire    ap_ST_fsm_state121_blk;
wire    ap_ST_fsm_state122_blk;
wire    ap_ST_fsm_state123_blk;
wire    ap_ST_fsm_state124_blk;
wire    ap_ST_fsm_state125_blk;
wire    ap_ST_fsm_state126_blk;
wire    ap_ST_fsm_state127_blk;
wire    ap_ST_fsm_state128_blk;
wire    ap_ST_fsm_state129_blk;
reg    ap_ST_fsm_state130_blk;
wire    ap_ST_fsm_state131_blk;
wire    ap_ST_fsm_state132_blk;
wire    ap_ST_fsm_state133_blk;
wire    ap_ST_fsm_state134_blk;
wire    ap_ST_fsm_state135_blk;
wire    ap_ST_fsm_state136_blk;
wire    ap_ST_fsm_state137_blk;
wire    ap_ST_fsm_state138_blk;
wire    ap_ST_fsm_state139_blk;
wire    ap_ST_fsm_state140_blk;
wire    ap_ST_fsm_state141_blk;
wire    ap_ST_fsm_state142_blk;
wire    ap_ST_fsm_state143_blk;
wire    ap_ST_fsm_state144_blk;
reg    ap_ST_fsm_state145_blk;
wire    ap_ST_fsm_state146_blk;
wire    ap_ST_fsm_state147_blk;
wire    ap_ST_fsm_state148_blk;
wire    ap_ST_fsm_state149_blk;
wire    ap_ST_fsm_state150_blk;
wire    ap_ST_fsm_state151_blk;
reg    ap_ST_fsm_state152_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 152'd1;
#0 grp_sin_or_cos_double_s_fu_269_ap_start_reg = 1'b0;
end

guitar_effects_sin_or_cos_double_s grp_sin_or_cos_double_s_fu_269(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sin_or_cos_double_s_fu_269_ap_start),
    .ap_done(grp_sin_or_cos_double_s_fu_269_ap_done),
    .ap_idle(grp_sin_or_cos_double_s_fu_269_ap_idle),
    .ap_ready(grp_sin_or_cos_double_s_fu_269_ap_ready),
    .t_in(x_assign_reg_1066),
    .ap_return(grp_sin_or_cos_double_s_fu_269_ap_return)
);

guitar_effects_dadd_64ns_64ns_64_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_7_full_dsp_1_U45(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_328),
    .din1(64'd4602678819172646912),
    .ce(1'b1),
    .dout(grp_fu_297_p2)
);

guitar_effects_dmul_64ns_64ns_64_7_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_7_max_dsp_1_U46(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_302_p0),
    .din1(grp_fu_302_p1),
    .ce(1'b1),
    .dout(grp_fu_302_p2)
);

guitar_effects_ddiv_64ns_64ns_64_59_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 59 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_59_no_dsp_1_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_328),
    .din1(64'd4680797471058690048),
    .ce(1'b1),
    .dout(grp_fu_309_p2)
);

guitar_effects_sitodp_32ns_64_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sitodp_32ns_64_6_no_dsp_1_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_314_p0),
    .ce(1'b1),
    .dout(grp_fu_314_p1)
);

guitar_effects_srem_32ns_8ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 32 ))
srem_32ns_8ns_32_36_seq_1_U49(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_365_ap_start),
    .done(grp_fu_365_ap_done),
    .din0(grp_fu_365_p0),
    .din1(grp_fu_365_p1),
    .ce(grp_fu_365_ce),
    .dout(grp_fu_365_p2)
);

guitar_effects_mul_32s_10ns_42_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 42 ))
mul_32s_10ns_42_2_1_U50(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(result_V_reg_1092),
    .din1(grp_fu_511_p1),
    .ce(1'b1),
    .dout(grp_fu_511_p2)
);

guitar_effects_srem_9ns_8ns_7_13_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 7 ))
srem_9ns_8ns_7_13_seq_1_U51(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_584_ap_start),
    .done(grp_fu_584_ap_done),
    .din0(grp_fu_584_p0),
    .din1(grp_fu_584_p1),
    .ce(1'b1),
    .dout(grp_fu_584_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sin_or_cos_double_s_fu_269_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state80)) begin
            grp_sin_or_cos_double_s_fu_269_ap_start_reg <= 1'b1;
        end else if ((grp_sin_or_cos_double_s_fu_269_ap_ready == 1'b1)) begin
            grp_sin_or_cos_double_s_fu_269_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_198 <= 7'd0;
    end else if (((icmp_ln243_fu_563_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state115))) begin
        i_fu_198 <= add_ln243_1_fu_569_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        temp_result_fu_194 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state144)) begin
        temp_result_fu_194 <= temp_result_1_reg_1223;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        add5_reg_1076 <= grp_fu_297_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state134)) begin
        conv1_reg_1203 <= grp_fu_709_p_dout0;
        select_ln1136_reg_1208 <= select_ln1136_fu_875_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        gmem_addr_reg_1107 <= sext_ln243_fu_536_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state131)) begin
        icmp_ln1136_reg_1154 <= icmp_ln1136_fu_612_p2;
        sub_ln1145_reg_1166 <= sub_ln1145_fu_646_p2;
        tmp_V_2_reg_1159 <= tmp_V_2_fu_622_p3;
        trunc_ln1144_reg_1178 <= trunc_ln1144_fu_656_p1;
        trunc_ln1148_reg_1173 <= trunc_ln1148_fu_652_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1136_reg_1154 == 1'd0) & (1'b1 == ap_CS_fsm_state132))) begin
        icmp_ln1159_reg_1188 <= icmp_ln1159_fu_754_p2;
        or_ln_reg_1183[0] <= or_ln_fu_746_p3[0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state150)) begin
        isNeg_1_reg_1238 <= add_ln346_fu_916_p2[32'd8];
        p_Result_10_reg_1233 <= p_Result_10_fu_908_p1;
        p_Result_9_reg_1228 <= data_V_1_fu_886_p1[32'd31];
        ush_1_reg_1243 <= ush_1_fu_940_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1136_reg_1154 == 1'd0) & (1'b1 == ap_CS_fsm_state133))) begin
        m_4_reg_1193 <= {{m_3_fu_803_p2[63:1]}};
        p_Result_2_reg_1198 <= m_3_fu_803_p2[32'd25];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state106)) begin
        mul_ln243_reg_1102 <= grp_fu_511_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state138)) begin
        mul_reg_1213 <= grp_fu_701_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        p_Result_4_reg_1081 <= data_V_fu_371_p1[32'd63];
        val_reg_1086 <= val_fu_489_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state130)) begin
        p_Result_6_reg_1148 <= m_axi_gmem_RDATA[32'd31];
        p_Val2_4_reg_1141 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_322 <= grp_fu_314_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_328 <= grp_fu_302_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state104)) begin
        result_V_reg_1092 <= result_V_fu_502_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state114)) begin
        srem_ln233_reg_1113 <= grp_fu_365_p2;
        zext_ln243_reg_1118[7 : 0] <= zext_ln243_fu_556_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state143)) begin
        temp_result_1_reg_1223 <= grp_fu_2247_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        tmp_reg_1071 <= grp_sin_or_cos_double_s_fu_269_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state151)) begin
        val_1_reg_1248 <= val_1_fu_1002_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state128)) begin
        wah_values_buffer_load_reg_1136 <= wah_values_buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        x_assign_reg_1066 <= grp_fu_309_p2;
    end
end

assign ap_ST_fsm_state100_blk = 1'b0;

assign ap_ST_fsm_state101_blk = 1'b0;

assign ap_ST_fsm_state102_blk = 1'b0;

assign ap_ST_fsm_state103_blk = 1'b0;

assign ap_ST_fsm_state104_blk = 1'b0;

assign ap_ST_fsm_state105_blk = 1'b0;

assign ap_ST_fsm_state106_blk = 1'b0;

assign ap_ST_fsm_state107_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state108_blk = 1'b1;
    end else begin
        ap_ST_fsm_state108_blk = 1'b0;
    end
end

assign ap_ST_fsm_state109_blk = 1'b0;

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state110_blk = 1'b0;

assign ap_ST_fsm_state111_blk = 1'b0;

assign ap_ST_fsm_state112_blk = 1'b0;

assign ap_ST_fsm_state113_blk = 1'b0;

assign ap_ST_fsm_state114_blk = 1'b0;

assign ap_ST_fsm_state115_blk = 1'b0;

assign ap_ST_fsm_state116_blk = 1'b0;

assign ap_ST_fsm_state117_blk = 1'b0;

assign ap_ST_fsm_state118_blk = 1'b0;

assign ap_ST_fsm_state119_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state120_blk = 1'b0;

assign ap_ST_fsm_state121_blk = 1'b0;

assign ap_ST_fsm_state122_blk = 1'b0;

assign ap_ST_fsm_state123_blk = 1'b0;

assign ap_ST_fsm_state124_blk = 1'b0;

assign ap_ST_fsm_state125_blk = 1'b0;

assign ap_ST_fsm_state126_blk = 1'b0;

assign ap_ST_fsm_state127_blk = 1'b0;

assign ap_ST_fsm_state128_blk = 1'b0;

assign ap_ST_fsm_state129_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state130_blk = 1'b1;
    end else begin
        ap_ST_fsm_state130_blk = 1'b0;
    end
end

assign ap_ST_fsm_state131_blk = 1'b0;

assign ap_ST_fsm_state132_blk = 1'b0;

assign ap_ST_fsm_state133_blk = 1'b0;

assign ap_ST_fsm_state134_blk = 1'b0;

assign ap_ST_fsm_state135_blk = 1'b0;

assign ap_ST_fsm_state136_blk = 1'b0;

assign ap_ST_fsm_state137_blk = 1'b0;

assign ap_ST_fsm_state138_blk = 1'b0;

assign ap_ST_fsm_state139_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state140_blk = 1'b0;

assign ap_ST_fsm_state141_blk = 1'b0;

assign ap_ST_fsm_state142_blk = 1'b0;

assign ap_ST_fsm_state143_blk = 1'b0;

assign ap_ST_fsm_state144_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state145_blk = 1'b1;
    end else begin
        ap_ST_fsm_state145_blk = 1'b0;
    end
end

assign ap_ST_fsm_state146_blk = 1'b0;

assign ap_ST_fsm_state147_blk = 1'b0;

assign ap_ST_fsm_state148_blk = 1'b0;

assign ap_ST_fsm_state149_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state150_blk = 1'b0;

assign ap_ST_fsm_state151_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state152_blk = 1'b1;
    end else begin
        ap_ST_fsm_state152_blk = 1'b0;
    end
end

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

assign ap_ST_fsm_state75_blk = 1'b0;

assign ap_ST_fsm_state76_blk = 1'b0;

assign ap_ST_fsm_state77_blk = 1'b0;

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state80_blk = 1'b0;

always @ (*) begin
    if ((grp_sin_or_cos_double_s_fu_269_ap_done == 1'b0)) begin
        ap_ST_fsm_state81_blk = 1'b1;
    end else begin
        ap_ST_fsm_state81_blk = 1'b0;
    end
end

assign ap_ST_fsm_state82_blk = 1'b0;

assign ap_ST_fsm_state83_blk = 1'b0;

assign ap_ST_fsm_state84_blk = 1'b0;

assign ap_ST_fsm_state85_blk = 1'b0;

assign ap_ST_fsm_state86_blk = 1'b0;

assign ap_ST_fsm_state87_blk = 1'b0;

assign ap_ST_fsm_state88_blk = 1'b0;

assign ap_ST_fsm_state89_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state90_blk = 1'b0;

assign ap_ST_fsm_state91_blk = 1'b0;

assign ap_ST_fsm_state92_blk = 1'b0;

assign ap_ST_fsm_state93_blk = 1'b0;

assign ap_ST_fsm_state94_blk = 1'b0;

assign ap_ST_fsm_state95_blk = 1'b0;

assign ap_ST_fsm_state96_blk = 1'b0;

assign ap_ST_fsm_state97_blk = 1'b0;

assign ap_ST_fsm_state98_blk = 1'b0;

assign ap_ST_fsm_state99_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state152)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state152))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state145) | (1'b1 == ap_CS_fsm_state108))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state152) | (1'b1 == ap_CS_fsm_state130))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state134) | (1'b1 == ap_CS_fsm_state133) | (1'b1 == ap_CS_fsm_state132) | (1'b1 == ap_CS_fsm_state131) | ((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state130)))) begin
        grp_fu_294_ce = 1'b1;
    end else begin
        grp_fu_294_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        grp_fu_302_p0 = add5_reg_1076;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        grp_fu_302_p0 = tmp_reg_1071;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_302_p0 = reg_328;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_302_p0 = reg_322;
    end else begin
        grp_fu_302_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        grp_fu_302_p1 = 64'd4621819117588971520;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        grp_fu_302_p1 = 64'd4602678819172646912;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_302_p1 = reg_322;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_302_p1 = 64'd4614256650576692846;
    end else begin
        grp_fu_302_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_314_p0 = tempo;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_314_p0 = shl_ln_fu_335_p3;
    end else begin
        grp_fu_314_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        grp_fu_365_ap_start = 1'b1;
    end else begin
        grp_fu_365_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state83))) begin
        grp_fu_365_ce = 1'b1;
    end else begin
        grp_fu_365_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln243_fu_563_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state115))) begin
        grp_fu_584_ap_start = 1'b1;
    end else begin
        grp_fu_584_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state145)) begin
            m_axi_gmem_ARLEN = 32'd1;
        end else if ((1'b1 == ap_CS_fsm_state108)) begin
            m_axi_gmem_ARLEN = 32'd100;
        end else begin
            m_axi_gmem_ARLEN = 'bx;
        end
    end else begin
        m_axi_gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state145)) | ((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state108)))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state152)) | ((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state130)))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state127)) begin
        wah_values_buffer_address0 = zext_ln248_fu_599_p1;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        wah_values_buffer_address0 = zext_ln232_fu_354_p1;
    end else begin
        wah_values_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state79))) begin
        wah_values_buffer_ce0 = 1'b1;
    end else begin
        wah_values_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        wah_values_buffer_we0 = 1'b1;
    end else begin
        wah_values_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            if (((grp_sin_or_cos_double_s_fu_269_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state81))) begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            if (((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state108))) begin
                ap_NS_fsm = ap_ST_fsm_state109;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state108;
            end
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            if (((icmp_ln243_fu_563_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state115))) begin
                ap_NS_fsm = ap_ST_fsm_state145;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state116;
            end
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            if (((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state130))) begin
                ap_NS_fsm = ap_ST_fsm_state131;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state130;
            end
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state145 : begin
            if (((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state145))) begin
                ap_NS_fsm = ap_ST_fsm_state146;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state145;
            end
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            if (((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state152))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state152;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LD_fu_867_p1 = p_Result_8_fu_855_p5[31:0];

assign a_fu_707_p2 = (icmp_ln1148_fu_701_p2 & icmp_ln1147_fu_675_p2);

assign add_ln1159_fu_763_p2 = ($signed(sub_ln1145_reg_1166) + $signed(32'd4294967271));

assign add_ln1170_fu_842_p2 = (sub_ln1165_fu_837_p2 + select_ln1144_fu_830_p3);

assign add_ln243_1_fu_569_p2 = (i_fu_198 + 7'd1);

assign add_ln243_fu_520_p2 = ($signed(sext_ln243_2_fu_517_p1) + $signed(bandpass_coeffs));

assign add_ln245_fu_550_p2 = (trunc_ln237_fu_546_p1 + 8'd100);

assign add_ln346_fu_916_p2 = ($signed(zext_ln346_fu_912_p1) + $signed(9'd385));

assign add_ln515_fu_415_p2 = ($signed(zext_ln515_fu_411_p1) + $signed(12'd3073));

assign and_ln1150_fu_734_p2 = (xor_ln1150_fu_721_p2 & p_Result_1_fu_727_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state127 = ap_CS_fsm[32'd126];

assign ap_CS_fsm_state128 = ap_CS_fsm[32'd127];

assign ap_CS_fsm_state129 = ap_CS_fsm[32'd128];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state130 = ap_CS_fsm[32'd129];

assign ap_CS_fsm_state131 = ap_CS_fsm[32'd130];

assign ap_CS_fsm_state132 = ap_CS_fsm[32'd131];

assign ap_CS_fsm_state133 = ap_CS_fsm[32'd132];

assign ap_CS_fsm_state134 = ap_CS_fsm[32'd133];

assign ap_CS_fsm_state138 = ap_CS_fsm[32'd137];

assign ap_CS_fsm_state139 = ap_CS_fsm[32'd138];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state143 = ap_CS_fsm[32'd142];

assign ap_CS_fsm_state144 = ap_CS_fsm[32'd143];

assign ap_CS_fsm_state145 = ap_CS_fsm[32'd144];

assign ap_CS_fsm_state150 = ap_CS_fsm[32'd149];

assign ap_CS_fsm_state151 = ap_CS_fsm[32'd150];

assign ap_CS_fsm_state152 = ap_CS_fsm[32'd151];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

assign ap_return_0 = result_V_7_fu_1014_p3;

assign ap_return_1 = srem_ln233_reg_1113;

assign ap_return_2 = m_axi_gmem_RDATA;

assign bitcast_ln810_fu_871_p1 = LD_fu_867_p1;

assign data_V_1_fu_886_p1 = temp_result_fu_194;

assign data_V_fu_371_p1 = reg_328;

assign grp_fu_2247_p_ce = 1'b1;

assign grp_fu_2247_p_din0 = temp_result_fu_194;

assign grp_fu_2247_p_din1 = mul_reg_1213;

assign grp_fu_2247_p_opcode = 2'd0;

assign grp_fu_365_p0 = (wah_buffer_index_read + 32'd1);

assign grp_fu_365_p1 = 32'd100;

assign grp_fu_511_p1 = 42'd400;

assign grp_fu_584_p0 = (zext_ln243_reg_1118 - zext_ln245_fu_575_p1);

assign grp_fu_584_p1 = 9'd100;

assign grp_fu_701_p_ce = 1'b1;

assign grp_fu_701_p_din0 = conv1_reg_1203;

assign grp_fu_701_p_din1 = select_ln1136_reg_1208;

assign grp_fu_709_p_ce = grp_fu_294_ce;

assign grp_fu_709_p_din0 = wah_values_buffer_load_reg_1136;

assign grp_sin_or_cos_double_s_fu_269_ap_start = grp_sin_or_cos_double_s_fu_269_ap_start_reg;

assign icmp_ln1136_fu_612_p2 = ((p_Val2_4_reg_1141 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1147_fu_675_p2 = (($signed(tmp_13_fu_665_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1148_fu_701_p2 = ((p_Result_s_fu_696_p2 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1159_fu_754_p2 = (($signed(lsb_index_fu_660_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln243_fu_563_p2 = ((i_fu_198 == 7'd100) ? 1'b1 : 1'b0);

assign isNeg_1_fu_922_p3 = add_ln346_fu_916_p2[32'd8];

assign isNeg_fu_421_p3 = add_ln515_fu_415_p2[32'd11];


always @ (p_Result_7_fu_628_p4) begin
    if (p_Result_7_fu_628_p4[0] == 1'b1) begin
        l_fu_638_p3 = 32'd0;
    end else if (p_Result_7_fu_628_p4[1] == 1'b1) begin
        l_fu_638_p3 = 32'd1;
    end else if (p_Result_7_fu_628_p4[2] == 1'b1) begin
        l_fu_638_p3 = 32'd2;
    end else if (p_Result_7_fu_628_p4[3] == 1'b1) begin
        l_fu_638_p3 = 32'd3;
    end else if (p_Result_7_fu_628_p4[4] == 1'b1) begin
        l_fu_638_p3 = 32'd4;
    end else if (p_Result_7_fu_628_p4[5] == 1'b1) begin
        l_fu_638_p3 = 32'd5;
    end else if (p_Result_7_fu_628_p4[6] == 1'b1) begin
        l_fu_638_p3 = 32'd6;
    end else if (p_Result_7_fu_628_p4[7] == 1'b1) begin
        l_fu_638_p3 = 32'd7;
    end else if (p_Result_7_fu_628_p4[8] == 1'b1) begin
        l_fu_638_p3 = 32'd8;
    end else if (p_Result_7_fu_628_p4[9] == 1'b1) begin
        l_fu_638_p3 = 32'd9;
    end else if (p_Result_7_fu_628_p4[10] == 1'b1) begin
        l_fu_638_p3 = 32'd10;
    end else if (p_Result_7_fu_628_p4[11] == 1'b1) begin
        l_fu_638_p3 = 32'd11;
    end else if (p_Result_7_fu_628_p4[12] == 1'b1) begin
        l_fu_638_p3 = 32'd12;
    end else if (p_Result_7_fu_628_p4[13] == 1'b1) begin
        l_fu_638_p3 = 32'd13;
    end else if (p_Result_7_fu_628_p4[14] == 1'b1) begin
        l_fu_638_p3 = 32'd14;
    end else if (p_Result_7_fu_628_p4[15] == 1'b1) begin
        l_fu_638_p3 = 32'd15;
    end else if (p_Result_7_fu_628_p4[16] == 1'b1) begin
        l_fu_638_p3 = 32'd16;
    end else if (p_Result_7_fu_628_p4[17] == 1'b1) begin
        l_fu_638_p3 = 32'd17;
    end else if (p_Result_7_fu_628_p4[18] == 1'b1) begin
        l_fu_638_p3 = 32'd18;
    end else if (p_Result_7_fu_628_p4[19] == 1'b1) begin
        l_fu_638_p3 = 32'd19;
    end else if (p_Result_7_fu_628_p4[20] == 1'b1) begin
        l_fu_638_p3 = 32'd20;
    end else if (p_Result_7_fu_628_p4[21] == 1'b1) begin
        l_fu_638_p3 = 32'd21;
    end else if (p_Result_7_fu_628_p4[22] == 1'b1) begin
        l_fu_638_p3 = 32'd22;
    end else if (p_Result_7_fu_628_p4[23] == 1'b1) begin
        l_fu_638_p3 = 32'd23;
    end else if (p_Result_7_fu_628_p4[24] == 1'b1) begin
        l_fu_638_p3 = 32'd24;
    end else if (p_Result_7_fu_628_p4[25] == 1'b1) begin
        l_fu_638_p3 = 32'd25;
    end else if (p_Result_7_fu_628_p4[26] == 1'b1) begin
        l_fu_638_p3 = 32'd26;
    end else if (p_Result_7_fu_628_p4[27] == 1'b1) begin
        l_fu_638_p3 = 32'd27;
    end else if (p_Result_7_fu_628_p4[28] == 1'b1) begin
        l_fu_638_p3 = 32'd28;
    end else if (p_Result_7_fu_628_p4[29] == 1'b1) begin
        l_fu_638_p3 = 32'd29;
    end else if (p_Result_7_fu_628_p4[30] == 1'b1) begin
        l_fu_638_p3 = 32'd30;
    end else if (p_Result_7_fu_628_p4[31] == 1'b1) begin
        l_fu_638_p3 = 32'd31;
    end else begin
        l_fu_638_p3 = 32'd32;
    end
end

assign lsb_index_fu_660_p2 = ($signed(sub_ln1145_reg_1166) + $signed(32'd4294967272));

assign lshr_ln1148_fu_690_p2 = 32'd4294967295 >> zext_ln1148_fu_686_p1;

assign lshr_ln1159_fu_772_p2 = zext_ln1158_fu_760_p1 >> zext_ln1159_fu_768_p1;

assign m_2_fu_793_p3 = ((icmp_ln1159_reg_1188[0:0] == 1'b1) ? lshr_ln1159_fu_772_p2 : shl_ln1160_fu_787_p2);

assign m_3_fu_803_p2 = (m_2_fu_793_p3 + zext_ln1162_fu_800_p1);

assign m_axi_gmem_ARADDR = gmem_addr_reg_1107;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 32'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign mantissa_1_fu_948_p4 = {{{{1'd1}, {p_Result_10_reg_1233}}}, {1'd0}};

assign mantissa_fu_397_p4 = {{{{1'd1}, {p_Result_5_fu_393_p1}}}, {1'd0}};

assign or_ln1150_fu_740_p2 = (and_ln1150_fu_734_p2 | a_fu_707_p2);

assign or_ln_fu_746_p3 = {{1'd0}, {or_ln1150_fu_740_p2}};

assign p_Result_10_fu_908_p1 = data_V_1_fu_886_p1[22:0];

assign p_Result_1_fu_727_p3 = tmp_V_2_reg_1159[lsb_index_fu_660_p2];

assign p_Result_5_fu_393_p1 = data_V_fu_371_p1[51:0];

integer ap_tvar_int_0;

always @ (tmp_V_2_fu_622_p3) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            p_Result_7_fu_628_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_7_fu_628_p4[ap_tvar_int_0] = tmp_V_2_fu_622_p3[31 - ap_tvar_int_0];
        end
    end
end

assign p_Result_8_fu_855_p5 = {{zext_ln1163_fu_827_p1[63:32]}, {tmp_4_fu_848_p3}, {zext_ln1163_fu_827_p1[22:0]}};

assign p_Result_s_fu_696_p2 = (tmp_V_2_reg_1159 & lshr_ln1148_fu_690_p2);

assign r_V_1_fu_461_p2 = zext_ln15_fu_407_p1 << zext_ln1488_fu_451_p1;

assign r_V_2_fu_968_p2 = zext_ln15_1_fu_957_p1 >> zext_ln1488_1_fu_964_p1;

assign r_V_3_fu_974_p2 = zext_ln15_1_fu_957_p1 << zext_ln1488_1_fu_964_p1;

assign r_V_fu_455_p2 = zext_ln15_fu_407_p1 >> zext_ln1488_fu_451_p1;

assign result_V_2_fu_497_p2 = (32'd0 - val_reg_1086);

assign result_V_6_fu_1009_p2 = (32'd0 - val_1_reg_1248);

assign result_V_7_fu_1014_p3 = ((p_Result_9_reg_1228[0:0] == 1'b1) ? result_V_6_fu_1009_p2 : val_1_reg_1248);

assign result_V_fu_502_p3 = ((p_Result_4_reg_1081[0:0] == 1'b1) ? result_V_2_fu_497_p2 : val_reg_1086);

assign select_ln1136_fu_875_p3 = ((icmp_ln1136_reg_1154[0:0] == 1'b1) ? 32'd0 : bitcast_ln810_fu_871_p1);

assign select_ln1144_fu_830_p3 = ((p_Result_2_reg_1198[0:0] == 1'b1) ? 8'd127 : 8'd126);

assign sext_ln1488_1_fu_961_p1 = $signed(ush_1_reg_1243);

assign sext_ln1488_fu_447_p1 = $signed(ush_fu_439_p3);

assign sext_ln1512_1_fu_936_p1 = $signed(sub_ln1512_1_fu_930_p2);

assign sext_ln1512_fu_435_p1 = $signed(sub_ln1512_fu_429_p2);

assign sext_ln243_2_fu_517_p1 = $signed(mul_ln243_reg_1102);

assign sext_ln243_fu_536_p1 = $signed(trunc_ln1_fu_526_p4);

assign shl_ln1160_fu_787_p2 = zext_ln1158_fu_760_p1 << zext_ln1160_fu_783_p1;

assign shl_ln_fu_335_p3 = {{current_sample}, {1'd0}};

assign sub_ln1145_fu_646_p2 = (32'd32 - l_fu_638_p3);

assign sub_ln1148_fu_681_p2 = ($signed(6'd57) - $signed(trunc_ln1148_reg_1173));

assign sub_ln1160_fu_778_p2 = (32'd25 - sub_ln1145_reg_1166);

assign sub_ln1165_fu_837_p2 = (8'd8 - trunc_ln1144_reg_1178);

assign sub_ln1512_1_fu_930_p2 = (8'd127 - xs_exp_V_1_fu_898_p4);

assign sub_ln1512_fu_429_p2 = (11'd1023 - xs_exp_V_fu_383_p4);

assign tmp_11_fu_980_p3 = r_V_2_fu_968_p2[32'd24];

assign tmp_13_fu_665_p4 = {{lsb_index_fu_660_p2[31:1]}};

assign tmp_14_fu_713_p3 = lsb_index_fu_660_p2[32'd31];

assign tmp_3_fu_479_p4 = {{r_V_1_fu_461_p2[84:53]}};

assign tmp_4_fu_848_p3 = {{p_Result_6_reg_1148}, {add_ln1170_fu_842_p2}};

assign tmp_6_fu_467_p3 = r_V_fu_455_p2[32'd53];

assign tmp_7_fu_992_p4 = {{r_V_3_fu_974_p2[55:24]}};

assign tmp_V_2_fu_622_p3 = ((p_Result_6_reg_1148[0:0] == 1'b1) ? tmp_V_fu_617_p2 : p_Val2_4_reg_1141);

assign tmp_V_fu_617_p2 = (32'd0 - p_Val2_4_reg_1141);

assign trunc_ln1144_fu_656_p1 = l_fu_638_p3[7:0];

assign trunc_ln1148_fu_652_p1 = sub_ln1145_fu_646_p2[5:0];

assign trunc_ln1_fu_526_p4 = {{add_ln243_fu_520_p2[63:2]}};

assign trunc_ln237_fu_546_p1 = grp_fu_365_p2[7:0];

assign trunc_ln248_fu_595_p1 = grp_fu_584_p2[6:0];

assign ush_1_fu_940_p3 = ((isNeg_1_fu_922_p3[0:0] == 1'b1) ? sext_ln1512_1_fu_936_p1 : add_ln346_fu_916_p2);

assign ush_fu_439_p3 = ((isNeg_fu_421_p3[0:0] == 1'b1) ? sext_ln1512_fu_435_p1 : add_ln515_fu_415_p2);

assign val_1_fu_1002_p3 = ((isNeg_1_reg_1238[0:0] == 1'b1) ? zext_ln818_1_fu_988_p1 : tmp_7_fu_992_p4);

assign val_fu_489_p3 = ((isNeg_fu_421_p3[0:0] == 1'b1) ? zext_ln818_fu_475_p1 : tmp_3_fu_479_p4);

assign wah_values_buffer_d0 = input_r;

assign xor_ln1150_fu_721_p2 = (tmp_14_fu_713_p3 ^ 1'd1);

assign xs_exp_V_1_fu_898_p4 = {{data_V_1_fu_886_p1[30:23]}};

assign xs_exp_V_fu_383_p4 = {{data_V_fu_371_p1[62:52]}};

assign zext_ln1148_fu_686_p1 = sub_ln1148_fu_681_p2;

assign zext_ln1158_fu_760_p1 = tmp_V_2_reg_1159;

assign zext_ln1159_fu_768_p1 = add_ln1159_fu_763_p2;

assign zext_ln1160_fu_783_p1 = sub_ln1160_fu_778_p2;

assign zext_ln1162_fu_800_p1 = or_ln_reg_1183;

assign zext_ln1163_fu_827_p1 = m_4_reg_1193;

assign zext_ln1488_1_fu_964_p1 = $unsigned(sext_ln1488_1_fu_961_p1);

assign zext_ln1488_fu_451_p1 = $unsigned(sext_ln1488_fu_447_p1);

assign zext_ln15_1_fu_957_p1 = mantissa_1_fu_948_p4;

assign zext_ln15_fu_407_p1 = mantissa_fu_397_p4;

assign zext_ln232_fu_354_p1 = wah_buffer_index_read;

assign zext_ln243_fu_556_p1 = add_ln245_fu_550_p2;

assign zext_ln245_fu_575_p1 = i_fu_198;

assign zext_ln248_fu_599_p1 = trunc_ln248_fu_595_p1;

assign zext_ln346_fu_912_p1 = xs_exp_V_1_fu_898_p4;

assign zext_ln515_fu_411_p1 = xs_exp_V_fu_383_p4;

assign zext_ln818_1_fu_988_p1 = tmp_11_fu_980_p3;

assign zext_ln818_fu_475_p1 = tmp_6_fu_467_p3;

always @ (posedge ap_clk) begin
    zext_ln243_reg_1118[8] <= 1'b0;
    or_ln_reg_1183[1] <= 1'b0;
end

endmodule //guitar_effects_wah
