// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="equalizer_equalizer,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=10207,HLS_SYN_LUT=5021,HLS_VERSION=2022_1}" *)

module equalizer (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        output_r_TDATA,
        output_r_TVALID,
        output_r_TREADY,
        output_r_TKEEP,
        output_r_TSTRB,
        output_r_TUSER,
        output_r_TLAST,
        output_r_TID,
        output_r_TDEST,
        input_r_TDATA,
        input_r_TVALID,
        input_r_TREADY,
        input_r_TKEEP,
        input_r_TSTRB,
        input_r_TUSER,
        input_r_TLAST,
        input_r_TID,
        input_r_TDEST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 56'd1;
parameter    ap_ST_fsm_state2 = 56'd2;
parameter    ap_ST_fsm_state3 = 56'd4;
parameter    ap_ST_fsm_state4 = 56'd8;
parameter    ap_ST_fsm_state5 = 56'd16;
parameter    ap_ST_fsm_state6 = 56'd32;
parameter    ap_ST_fsm_state7 = 56'd64;
parameter    ap_ST_fsm_state8 = 56'd128;
parameter    ap_ST_fsm_state9 = 56'd256;
parameter    ap_ST_fsm_state10 = 56'd512;
parameter    ap_ST_fsm_state11 = 56'd1024;
parameter    ap_ST_fsm_state12 = 56'd2048;
parameter    ap_ST_fsm_state13 = 56'd4096;
parameter    ap_ST_fsm_state14 = 56'd8192;
parameter    ap_ST_fsm_state15 = 56'd16384;
parameter    ap_ST_fsm_state16 = 56'd32768;
parameter    ap_ST_fsm_state17 = 56'd65536;
parameter    ap_ST_fsm_state18 = 56'd131072;
parameter    ap_ST_fsm_state19 = 56'd262144;
parameter    ap_ST_fsm_state20 = 56'd524288;
parameter    ap_ST_fsm_state21 = 56'd1048576;
parameter    ap_ST_fsm_state22 = 56'd2097152;
parameter    ap_ST_fsm_state23 = 56'd4194304;
parameter    ap_ST_fsm_state24 = 56'd8388608;
parameter    ap_ST_fsm_state25 = 56'd16777216;
parameter    ap_ST_fsm_state26 = 56'd33554432;
parameter    ap_ST_fsm_state27 = 56'd67108864;
parameter    ap_ST_fsm_state28 = 56'd134217728;
parameter    ap_ST_fsm_state29 = 56'd268435456;
parameter    ap_ST_fsm_state30 = 56'd536870912;
parameter    ap_ST_fsm_state31 = 56'd1073741824;
parameter    ap_ST_fsm_state32 = 56'd2147483648;
parameter    ap_ST_fsm_state33 = 56'd4294967296;
parameter    ap_ST_fsm_state34 = 56'd8589934592;
parameter    ap_ST_fsm_state35 = 56'd17179869184;
parameter    ap_ST_fsm_state36 = 56'd34359738368;
parameter    ap_ST_fsm_state37 = 56'd68719476736;
parameter    ap_ST_fsm_state38 = 56'd137438953472;
parameter    ap_ST_fsm_state39 = 56'd274877906944;
parameter    ap_ST_fsm_state40 = 56'd549755813888;
parameter    ap_ST_fsm_state41 = 56'd1099511627776;
parameter    ap_ST_fsm_state42 = 56'd2199023255552;
parameter    ap_ST_fsm_state43 = 56'd4398046511104;
parameter    ap_ST_fsm_state44 = 56'd8796093022208;
parameter    ap_ST_fsm_state45 = 56'd17592186044416;
parameter    ap_ST_fsm_state46 = 56'd35184372088832;
parameter    ap_ST_fsm_state47 = 56'd70368744177664;
parameter    ap_ST_fsm_state48 = 56'd140737488355328;
parameter    ap_ST_fsm_state49 = 56'd281474976710656;
parameter    ap_ST_fsm_state50 = 56'd562949953421312;
parameter    ap_ST_fsm_state51 = 56'd1125899906842624;
parameter    ap_ST_fsm_state52 = 56'd2251799813685248;
parameter    ap_ST_fsm_state53 = 56'd4503599627370496;
parameter    ap_ST_fsm_state54 = 56'd9007199254740992;
parameter    ap_ST_fsm_state55 = 56'd18014398509481984;
parameter    ap_ST_fsm_state56 = 56'd36028797018963968;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
output  [31:0] output_r_TDATA;
output   output_r_TVALID;
input   output_r_TREADY;
output  [3:0] output_r_TKEEP;
output  [3:0] output_r_TSTRB;
output  [0:0] output_r_TUSER;
output  [0:0] output_r_TLAST;
output  [0:0] output_r_TID;
output  [0:0] output_r_TDEST;
input  [31:0] input_r_TDATA;
input   input_r_TVALID;
output   input_r_TREADY;
input  [3:0] input_r_TKEEP;
input  [3:0] input_r_TSTRB;
input  [0:0] input_r_TUSER;
input  [0:0] input_r_TLAST;
input  [0:0] input_r_TID;
input  [0:0] input_r_TDEST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
wire   [63:0] coefs;
reg  signed [31:0] signal_shift_reg_31;
reg   [31:0] signal_shift_reg_30;
reg  signed [31:0] signal_shift_reg_29;
reg   [31:0] signal_shift_reg_28;
reg   [31:0] signal_shift_reg_27;
reg  signed [31:0] signal_shift_reg_26;
reg  signed [31:0] signal_shift_reg_25;
reg   [31:0] signal_shift_reg_24;
reg   [31:0] signal_shift_reg_23;
reg  signed [31:0] signal_shift_reg_22;
reg   [31:0] signal_shift_reg_21;
reg   [31:0] signal_shift_reg_20;
reg   [31:0] signal_shift_reg_19;
reg   [31:0] signal_shift_reg_18;
reg   [31:0] signal_shift_reg_17;
reg  signed [31:0] signal_shift_reg_16;
reg   [31:0] signal_shift_reg_15;
reg  signed [31:0] signal_shift_reg_14;
reg   [31:0] signal_shift_reg_13;
reg  signed [31:0] signal_shift_reg_12;
reg   [31:0] signal_shift_reg_11;
reg  signed [31:0] signal_shift_reg_10;
reg   [31:0] signal_shift_reg_9;
reg  signed [31:0] signal_shift_reg_8;
reg   [31:0] signal_shift_reg_7;
reg   [31:0] signal_shift_reg_6;
reg   [31:0] signal_shift_reg_5;
reg   [31:0] signal_shift_reg_4;
reg   [31:0] signal_shift_reg_3;
reg  signed [31:0] signal_shift_reg_2;
reg  signed [31:0] signal_shift_reg_1;
reg  signed [31:0] signal_shift_reg_0;
reg    gmem_blk_n_AR;
(* fsm_encoding = "none" *) reg   [55:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire   [31:0] state_2_load_fu_520_p1;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state49;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state50;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state55;
reg    output_r_TDATA_blk_n;
wire    ap_CS_fsm_state46;
reg   [31:0] state_2_reg_1356;
reg   [0:0] tmp_last_V_2_reg_1388;
wire    ap_CS_fsm_state47;
reg   [0:0] ap_phi_mux_tmp_last_V_1_phi_fu_304_p6;
wire    ap_CS_fsm_state56;
reg    input_r_TDATA_blk_n;
reg  signed [31:0] reg_483;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire   [8:0] gmem_RFIFONUM;
wire    gmem_BVALID;
reg    gmem_BREADY;
reg  signed [31:0] reg_487;
reg  signed [31:0] reg_491;
reg   [63:0] coefs_read_reg_1315;
wire    ap_CS_fsm_state1;
reg   [63:0] gmem_addr_reg_1320;
reg   [31:0] grp_load_fu_451_p1;
reg   [3:0] grp_load_fu_455_p1;
reg   [3:0] grp_load_fu_459_p1;
reg   [0:0] grp_load_fu_463_p1;
reg   [0:0] grp_load_fu_467_p1;
reg   [0:0] grp_load_fu_471_p1;
reg  signed [31:0] tmp_data_V_reg_1360;
reg   [3:0] tmp_keep_V_reg_1367;
reg   [3:0] tmp_strb_V_reg_1374;
reg   [0:0] tmp_user_V_reg_1381;
wire   [0:0] grp_fu_479_p1;
reg   [0:0] tmp_id_V_reg_1393;
reg   [0:0] tmp_dest_V_reg_1400;
wire   [31:0] grp_fu_543_p2;
reg   [31:0] mul_ln70_reg_1407;
reg  signed [31:0] gmem_addr_read_4_reg_1412;
reg  signed [31:0] signal_shift_reg_3_load_reg_1417;
reg  signed [31:0] signal_shift_reg_4_load_reg_1438;
wire   [31:0] grp_fu_562_p2;
reg   [31:0] mul_ln67_28_reg_1444;
wire   [31:0] grp_fu_578_p2;
reg   [31:0] mul_ln67_29_reg_1449;
wire   [31:0] grp_fu_594_p2;
reg   [31:0] mul_ln67_30_reg_1454;
reg  signed [31:0] signal_shift_reg_5_load_reg_1459;
wire   [31:0] grp_fu_614_p2;
reg   [31:0] mul_ln67_27_reg_1465;
wire   [31:0] add_ln70_fu_632_p2;
reg   [31:0] add_ln70_reg_1470;
reg  signed [31:0] signal_shift_reg_6_load_reg_1475;
wire   [31:0] grp_fu_627_p2;
reg   [31:0] mul_ln67_26_reg_1481;
reg  signed [31:0] signal_shift_reg_7_load_reg_1486;
wire   [31:0] grp_fu_645_p2;
reg   [31:0] mul_ln67_25_reg_1492;
wire   [31:0] add_ln70_1_fu_664_p2;
reg   [31:0] add_ln70_1_reg_1497;
wire   [31:0] grp_fu_659_p2;
reg   [31:0] mul_ln67_24_reg_1502;
reg  signed [31:0] signal_shift_reg_9_load_reg_1507;
wire   [31:0] add_ln70_4_fu_698_p2;
reg   [31:0] add_ln70_4_reg_1518;
wire   [31:0] grp_fu_682_p2;
reg   [31:0] mul_ln67_22_reg_1523;
wire   [31:0] grp_fu_693_p2;
reg   [31:0] mul_ln67_23_reg_1528;
reg  signed [31:0] signal_shift_reg_11_load_reg_1533;
wire   [31:0] add_ln70_5_fu_736_p2;
reg   [31:0] add_ln70_5_reg_1544;
wire   [31:0] grp_fu_716_p2;
reg   [31:0] mul_ln67_20_reg_1549;
wire   [31:0] grp_fu_727_p2;
reg   [31:0] mul_ln67_21_reg_1554;
wire   [31:0] add_ln70_6_fu_745_p2;
reg   [31:0] add_ln70_6_reg_1559;
reg  signed [31:0] signal_shift_reg_13_load_reg_1564;
wire   [31:0] add_ln70_11_fu_780_p2;
reg   [31:0] add_ln70_11_reg_1575;
wire   [31:0] grp_fu_764_p2;
reg   [31:0] mul_ln67_18_reg_1580;
wire   [31:0] grp_fu_775_p2;
reg   [31:0] mul_ln67_19_reg_1585;
reg  signed [31:0] signal_shift_reg_15_load_reg_1590;
wire   [31:0] add_ln70_12_fu_818_p2;
reg   [31:0] add_ln70_12_reg_1601;
wire   [31:0] grp_fu_798_p2;
reg   [31:0] mul_ln67_16_reg_1606;
wire   [31:0] grp_fu_809_p2;
reg   [31:0] mul_ln67_17_reg_1611;
reg  signed [31:0] signal_shift_reg_17_load_reg_1616;
wire   [31:0] grp_fu_823_p2;
reg   [31:0] mul_ln67_15_reg_1627;
wire   [31:0] add_ln70_8_fu_853_p2;
reg   [31:0] add_ln70_8_reg_1632;
reg  signed [31:0] signal_shift_reg_18_load_reg_1637;
wire   [31:0] grp_fu_842_p2;
reg   [31:0] mul_ln67_14_reg_1643;
reg  signed [31:0] signal_shift_reg_19_load_reg_1648;
wire   [31:0] grp_fu_866_p2;
reg   [31:0] mul_ln67_13_reg_1654;
wire   [31:0] add_ln70_13_fu_894_p2;
reg   [31:0] add_ln70_13_reg_1659;
reg  signed [31:0] signal_shift_reg_20_load_reg_1664;
wire   [31:0] grp_fu_880_p2;
reg   [31:0] mul_ln67_12_reg_1670;
reg  signed [31:0] signal_shift_reg_21_load_reg_1675;
wire   [31:0] grp_fu_908_p2;
reg   [31:0] mul_ln67_11_reg_1681;
wire   [31:0] add_ln70_27_fu_931_p2;
reg   [31:0] add_ln70_27_reg_1686;
wire   [31:0] grp_fu_922_p2;
reg   [31:0] mul_ln67_10_reg_1691;
reg  signed [31:0] signal_shift_reg_23_load_reg_1696;
wire   [31:0] grp_fu_936_p2;
reg   [31:0] mul_ln67_9_reg_1707;
wire   [31:0] add_ln70_28_fu_970_p2;
reg   [31:0] add_ln70_28_reg_1712;
reg  signed [31:0] signal_shift_reg_24_load_reg_1717;
wire   [31:0] grp_fu_955_p2;
reg   [31:0] mul_ln67_8_reg_1723;
wire   [31:0] grp_fu_984_p2;
reg   [31:0] mul_ln67_7_reg_1728;
wire   [31:0] add_ln70_23_fu_994_p2;
reg   [31:0] add_ln70_23_reg_1733;
wire   [31:0] grp_fu_989_p2;
reg   [31:0] mul_ln67_6_reg_1738;
reg  signed [31:0] signal_shift_reg_27_load_reg_1743;
wire   [31:0] add_ln70_29_fu_1048_p2;
reg   [31:0] add_ln70_29_reg_1759;
reg  signed [31:0] signal_shift_reg_28_load_reg_1764;
wire   [31:0] grp_fu_1012_p2;
reg   [31:0] mul_ln67_4_reg_1770;
wire   [31:0] grp_fu_1028_p2;
reg   [31:0] mul_ln67_5_reg_1775;
wire   [31:0] grp_fu_1062_p2;
reg   [31:0] mul_ln67_3_reg_1780;
wire   [31:0] add_ln70_19_fu_1072_p2;
reg   [31:0] add_ln70_19_reg_1785;
reg  signed [31:0] signal_shift_reg_30_load_reg_1790;
wire   [31:0] grp_fu_1067_p2;
reg   [31:0] mul_ln67_2_reg_1801;
wire   [31:0] grp_fu_1090_p2;
reg   [31:0] mul_ln67_1_reg_1806;
wire   [31:0] add_ln70_20_fu_1110_p2;
reg   [31:0] add_ln70_20_reg_1811;
wire    ap_CS_fsm_state42;
wire   [31:0] grp_fu_1101_p2;
reg   [31:0] mul_ln67_reg_1821;
wire   [31:0] grp_fu_1119_p2;
reg   [31:0] accumulate_reg_1826;
wire    ap_CS_fsm_state43;
wire   [31:0] add_ln70_16_fu_1130_p2;
reg   [31:0] add_ln70_16_reg_1831;
wire   [31:0] add_ln70_17_fu_1138_p2;
reg   [31:0] add_ln70_17_reg_1836;
wire    ap_CS_fsm_state44;
wire   [31:0] add_ln70_30_fu_1147_p2;
reg   [31:0] add_ln70_30_reg_1841;
wire    ap_CS_fsm_state45;
wire   [31:0] accumulate_2_fu_1156_p2;
reg   [63:0] gmem_addr_1_reg_1854;
wire    ap_CS_fsm_state48;
wire   [0:0] icmp_ln39_fu_1217_p2;
wire   [5:0] add_ln39_fu_1260_p2;
reg   [5:0] add_ln39_reg_1860;
reg   [0:0] tmp_last_V_1_reg_301;
reg    ap_block_state2_io;
reg    ap_predicate_op314_write_state46;
reg    ap_predicate_op343_write_state46;
reg    ap_block_state46;
reg    ap_block_state46_io;
reg   [31:0] ap_phi_mux_state_1_phi_fu_318_p6;
reg   [31:0] state_1_reg_314;
reg   [0:0] ap_phi_mux_tmp_dest_V_1_phi_fu_333_p4;
reg   [0:0] tmp_dest_V_1_reg_329;
reg   [0:0] ap_phi_mux_tmp_id_V_1_phi_fu_345_p4;
reg   [0:0] tmp_id_V_1_reg_341;
reg   [0:0] ap_phi_mux_tmp_user_V_1_phi_fu_357_p4;
reg   [0:0] tmp_user_V_1_reg_353;
reg   [3:0] ap_phi_mux_tmp_strb_V_1_phi_fu_369_p4;
reg   [3:0] tmp_strb_V_1_reg_365;
reg   [3:0] ap_phi_mux_tmp_keep_V_1_phi_fu_381_p4;
reg   [3:0] tmp_keep_V_1_reg_377;
reg   [31:0] ap_phi_mux_tmp_data_V_4_phi_fu_393_p4;
reg   [31:0] tmp_data_V_4_reg_389;
reg   [31:0] ap_phi_mux_state_1233_phi_fu_405_p6;
reg   [31:0] state_1233_reg_401;
reg    ap_predicate_op344_write_state47;
reg    ap_block_state47;
reg    ap_block_state47_io;
reg   [5:0] j_reg_416;
reg    ap_block_state55;
reg   [31:0] tmp_data_V_1_reg_427;
reg   [0:0] p_4_0_0_0108_phi_reg_438;
wire  signed [63:0] sext_ln67_fu_505_p1;
wire  signed [63:0] sext_ln40_fu_1250_p1;
reg   [31:0] tmp_out_data_V_fu_194;
reg   [31:0] ap_sig_allocacmp_tmp_out_data_V_4;
reg   [3:0] tmp_out_keep_V_fu_198;
reg   [3:0] ap_sig_allocacmp_tmp_out_keep_V_4;
reg   [3:0] tmp_out_strb_V_fu_202;
reg   [3:0] ap_sig_allocacmp_tmp_out_strb_V_4;
reg   [0:0] tmp_out_user_V_fu_206;
reg   [0:0] ap_sig_allocacmp_tmp_out_user_V_4;
reg   [0:0] tmp_out_id_V_fu_210;
reg   [0:0] ap_sig_allocacmp_tmp_out_id_V_4;
reg   [0:0] tmp_out_dest_V_fu_214;
reg   [0:0] ap_sig_allocacmp_tmp_out_dest_V_4;
reg   [31:0] state_fu_218;
wire   [61:0] trunc_ln_fu_495_p4;
wire   [31:0] add_ln70_3_fu_732_p2;
wire   [31:0] add_ln70_2_fu_741_p2;
wire   [31:0] add_ln70_10_fu_814_p2;
wire   [31:0] add_ln70_7_fu_885_p2;
wire   [31:0] add_ln70_9_fu_889_p2;
wire   [31:0] add_ln70_26_fu_927_p2;
wire   [31:0] add_ln70_25_fu_966_p2;
wire   [31:0] add_ln70_22_fu_1039_p2;
wire   [31:0] add_ln70_24_fu_1043_p2;
wire   [31:0] add_ln70_18_fu_1106_p2;
wire   [31:0] add_ln70_15_fu_1134_p2;
wire   [31:0] add_ln70_21_fu_1143_p2;
wire   [31:0] add_ln70_14_fu_1152_p2;
wire   [7:0] shl_ln_fu_1223_p3;
wire   [63:0] zext_ln40_fu_1231_p1;
wire   [63:0] add_ln40_fu_1235_p2;
wire   [61:0] trunc_ln1_fu_1240_p4;
reg    grp_fu_543_ce;
reg    grp_fu_562_ce;
reg    grp_fu_578_ce;
reg    grp_fu_594_ce;
reg    grp_fu_614_ce;
reg    grp_fu_627_ce;
reg    grp_fu_645_ce;
reg    grp_fu_659_ce;
reg    grp_fu_682_ce;
reg    grp_fu_693_ce;
reg    grp_fu_716_ce;
reg    grp_fu_727_ce;
reg    grp_fu_764_ce;
reg    grp_fu_775_ce;
reg    grp_fu_798_ce;
reg    grp_fu_809_ce;
reg    grp_fu_823_ce;
reg    grp_fu_842_ce;
reg    grp_fu_866_ce;
reg    grp_fu_880_ce;
reg    grp_fu_908_ce;
reg    grp_fu_922_ce;
reg    grp_fu_936_ce;
reg    grp_fu_955_ce;
reg    grp_fu_984_ce;
reg    grp_fu_989_ce;
reg    grp_fu_1012_ce;
reg    grp_fu_1028_ce;
reg    grp_fu_1062_ce;
reg    grp_fu_1067_ce;
reg    grp_fu_1090_ce;
reg    grp_fu_1101_ce;
reg   [55:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
reg    ap_ST_fsm_state17_blk;
reg    ap_ST_fsm_state18_blk;
reg    ap_ST_fsm_state19_blk;
reg    ap_ST_fsm_state20_blk;
reg    ap_ST_fsm_state21_blk;
reg    ap_ST_fsm_state22_blk;
reg    ap_ST_fsm_state23_blk;
reg    ap_ST_fsm_state24_blk;
reg    ap_ST_fsm_state25_blk;
reg    ap_ST_fsm_state26_blk;
reg    ap_ST_fsm_state27_blk;
reg    ap_ST_fsm_state28_blk;
reg    ap_ST_fsm_state29_blk;
reg    ap_ST_fsm_state30_blk;
reg    ap_ST_fsm_state31_blk;
reg    ap_ST_fsm_state32_blk;
reg    ap_ST_fsm_state33_blk;
reg    ap_ST_fsm_state34_blk;
reg    ap_ST_fsm_state35_blk;
reg    ap_ST_fsm_state36_blk;
reg    ap_ST_fsm_state37_blk;
reg    ap_ST_fsm_state38_blk;
reg    ap_ST_fsm_state39_blk;
reg    ap_ST_fsm_state40_blk;
reg    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
reg    ap_ST_fsm_state46_blk;
reg    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
reg    ap_ST_fsm_state49_blk;
reg    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
reg    ap_ST_fsm_state55_blk;
reg    ap_ST_fsm_state56_blk;
wire    regslice_both_output_r_V_data_V_U_apdone_blk;
reg    ap_block_state56;
reg   [31:0] output_r_TDATA_int_regslice;
reg    output_r_TVALID_int_regslice;
wire    output_r_TREADY_int_regslice;
wire    regslice_both_output_r_V_data_V_U_vld_out;
wire    regslice_both_output_r_V_keep_V_U_apdone_blk;
reg   [3:0] output_r_TKEEP_int_regslice;
wire    regslice_both_output_r_V_keep_V_U_ack_in_dummy;
wire    regslice_both_output_r_V_keep_V_U_vld_out;
wire    regslice_both_output_r_V_strb_V_U_apdone_blk;
reg   [3:0] output_r_TSTRB_int_regslice;
wire    regslice_both_output_r_V_strb_V_U_ack_in_dummy;
wire    regslice_both_output_r_V_strb_V_U_vld_out;
wire    regslice_both_output_r_V_user_V_U_apdone_blk;
reg   [0:0] output_r_TUSER_int_regslice;
wire    regslice_both_output_r_V_user_V_U_ack_in_dummy;
wire    regslice_both_output_r_V_user_V_U_vld_out;
wire    regslice_both_output_r_V_last_V_U_apdone_blk;
reg   [0:0] output_r_TLAST_int_regslice;
wire    regslice_both_output_r_V_last_V_U_ack_in_dummy;
wire    regslice_both_output_r_V_last_V_U_vld_out;
wire    regslice_both_output_r_V_id_V_U_apdone_blk;
reg   [0:0] output_r_TID_int_regslice;
wire    regslice_both_output_r_V_id_V_U_ack_in_dummy;
wire    regslice_both_output_r_V_id_V_U_vld_out;
wire    regslice_both_output_r_V_dest_V_U_apdone_blk;
reg   [0:0] output_r_TDEST_int_regslice;
wire    regslice_both_output_r_V_dest_V_U_ack_in_dummy;
wire    regslice_both_output_r_V_dest_V_U_vld_out;
wire    regslice_both_input_r_V_data_V_U_apdone_blk;
wire   [31:0] input_r_TDATA_int_regslice;
wire    input_r_TVALID_int_regslice;
reg    input_r_TREADY_int_regslice;
wire    regslice_both_input_r_V_data_V_U_ack_in;
wire    regslice_both_input_r_V_keep_V_U_apdone_blk;
wire   [3:0] input_r_TKEEP_int_regslice;
wire    regslice_both_input_r_V_keep_V_U_vld_out;
wire    regslice_both_input_r_V_keep_V_U_ack_in;
wire    regslice_both_input_r_V_strb_V_U_apdone_blk;
wire   [3:0] input_r_TSTRB_int_regslice;
wire    regslice_both_input_r_V_strb_V_U_vld_out;
wire    regslice_both_input_r_V_strb_V_U_ack_in;
wire    regslice_both_input_r_V_user_V_U_apdone_blk;
wire   [0:0] input_r_TUSER_int_regslice;
wire    regslice_both_input_r_V_user_V_U_vld_out;
wire    regslice_both_input_r_V_user_V_U_ack_in;
wire    regslice_both_input_r_V_last_V_U_apdone_blk;
wire   [0:0] input_r_TLAST_int_regslice;
wire    regslice_both_input_r_V_last_V_U_vld_out;
wire    regslice_both_input_r_V_last_V_U_ack_in;
wire    regslice_both_input_r_V_id_V_U_apdone_blk;
wire   [0:0] input_r_TID_int_regslice;
wire    regslice_both_input_r_V_id_V_U_vld_out;
wire    regslice_both_input_r_V_id_V_U_ack_in;
wire    regslice_both_input_r_V_dest_V_U_apdone_blk;
wire   [0:0] input_r_TDEST_int_regslice;
wire    regslice_both_input_r_V_dest_V_U_vld_out;
wire    regslice_both_input_r_V_dest_V_U_ack_in;
reg    ap_condition_1749;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 signal_shift_reg_31 = 32'd0;
#0 signal_shift_reg_30 = 32'd0;
#0 signal_shift_reg_29 = 32'd0;
#0 signal_shift_reg_28 = 32'd0;
#0 signal_shift_reg_27 = 32'd0;
#0 signal_shift_reg_26 = 32'd0;
#0 signal_shift_reg_25 = 32'd0;
#0 signal_shift_reg_24 = 32'd0;
#0 signal_shift_reg_23 = 32'd0;
#0 signal_shift_reg_22 = 32'd0;
#0 signal_shift_reg_21 = 32'd0;
#0 signal_shift_reg_20 = 32'd0;
#0 signal_shift_reg_19 = 32'd0;
#0 signal_shift_reg_18 = 32'd0;
#0 signal_shift_reg_17 = 32'd0;
#0 signal_shift_reg_16 = 32'd0;
#0 signal_shift_reg_15 = 32'd0;
#0 signal_shift_reg_14 = 32'd0;
#0 signal_shift_reg_13 = 32'd0;
#0 signal_shift_reg_12 = 32'd0;
#0 signal_shift_reg_11 = 32'd0;
#0 signal_shift_reg_10 = 32'd0;
#0 signal_shift_reg_9 = 32'd0;
#0 signal_shift_reg_8 = 32'd0;
#0 signal_shift_reg_7 = 32'd0;
#0 signal_shift_reg_6 = 32'd0;
#0 signal_shift_reg_5 = 32'd0;
#0 signal_shift_reg_4 = 32'd0;
#0 signal_shift_reg_3 = 32'd0;
#0 signal_shift_reg_2 = 32'd0;
#0 signal_shift_reg_1 = 32'd0;
#0 signal_shift_reg_0 = 32'd0;
#0 ap_CS_fsm = 56'd1;
end

equalizer_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .coefs(coefs)
);

equalizer_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .USER_DW( 32 ),
    .USER_AW( 64 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_addr_reg_1320),
    .I_ARLEN(32'd33),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RFIFONUM(gmem_RFIFONUM),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_1_reg_1854),
    .I_AWLEN(32'd1),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(tmp_data_V_1_reg_427),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_data_V_reg_1360),
    .din1(reg_483),
    .ce(grp_fu_543_ce),
    .dout(grp_fu_543_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_2),
    .din1(reg_491),
    .ce(grp_fu_562_ce),
    .dout(grp_fu_562_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_1),
    .din1(reg_483),
    .ce(grp_fu_578_ce),
    .dout(grp_fu_578_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_0),
    .din1(reg_487),
    .ce(grp_fu_594_ce),
    .dout(grp_fu_594_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_3_load_reg_1417),
    .din1(gmem_addr_read_4_reg_1412),
    .ce(grp_fu_614_ce),
    .dout(grp_fu_614_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_4_load_reg_1438),
    .din1(reg_483),
    .ce(grp_fu_627_ce),
    .dout(grp_fu_627_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_5_load_reg_1459),
    .din1(reg_487),
    .ce(grp_fu_645_ce),
    .dout(grp_fu_645_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_6_load_reg_1475),
    .din1(reg_483),
    .ce(grp_fu_659_ce),
    .dout(grp_fu_659_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_8),
    .din1(reg_483),
    .ce(grp_fu_682_ce),
    .dout(grp_fu_682_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_7_load_reg_1486),
    .din1(reg_487),
    .ce(grp_fu_693_ce),
    .dout(grp_fu_693_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_10),
    .din1(reg_483),
    .ce(grp_fu_716_ce),
    .dout(grp_fu_716_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_9_load_reg_1507),
    .din1(reg_491),
    .ce(grp_fu_727_ce),
    .dout(grp_fu_727_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_12),
    .din1(reg_483),
    .ce(grp_fu_764_ce),
    .dout(grp_fu_764_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_11_load_reg_1533),
    .din1(reg_487),
    .ce(grp_fu_775_ce),
    .dout(grp_fu_775_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U15(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_14),
    .din1(reg_483),
    .ce(grp_fu_798_ce),
    .dout(grp_fu_798_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U16(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_13_load_reg_1564),
    .din1(reg_491),
    .ce(grp_fu_809_ce),
    .dout(grp_fu_809_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U17(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_15_load_reg_1590),
    .din1(reg_487),
    .ce(grp_fu_823_ce),
    .dout(grp_fu_823_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U18(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_16),
    .din1(reg_483),
    .ce(grp_fu_842_ce),
    .dout(grp_fu_842_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U19(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_17_load_reg_1616),
    .din1(reg_487),
    .ce(grp_fu_866_ce),
    .dout(grp_fu_866_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U20(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_18_load_reg_1637),
    .din1(reg_483),
    .ce(grp_fu_880_ce),
    .dout(grp_fu_880_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U21(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_19_load_reg_1648),
    .din1(reg_487),
    .ce(grp_fu_908_ce),
    .dout(grp_fu_908_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U22(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_20_load_reg_1664),
    .din1(reg_483),
    .ce(grp_fu_922_ce),
    .dout(grp_fu_922_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U23(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_21_load_reg_1675),
    .din1(reg_487),
    .ce(grp_fu_936_ce),
    .dout(grp_fu_936_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U24(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_22),
    .din1(reg_483),
    .ce(grp_fu_955_ce),
    .dout(grp_fu_955_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U25(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_23_load_reg_1696),
    .din1(reg_487),
    .ce(grp_fu_984_ce),
    .dout(grp_fu_984_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U26(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_24_load_reg_1717),
    .din1(reg_483),
    .ce(grp_fu_989_ce),
    .dout(grp_fu_989_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U27(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_26),
    .din1(reg_483),
    .ce(grp_fu_1012_ce),
    .dout(grp_fu_1012_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U28(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_25),
    .din1(reg_487),
    .ce(grp_fu_1028_ce),
    .dout(grp_fu_1028_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U29(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_27_load_reg_1743),
    .din1(reg_491),
    .ce(grp_fu_1062_ce),
    .dout(grp_fu_1062_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U30(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_28_load_reg_1764),
    .din1(reg_483),
    .ce(grp_fu_1067_ce),
    .dout(grp_fu_1067_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U31(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_29),
    .din1(reg_487),
    .ce(grp_fu_1090_ce),
    .dout(grp_fu_1090_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U32(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_30_load_reg_1790),
    .din1(reg_483),
    .ce(grp_fu_1101_ce),
    .dout(grp_fu_1101_p2)
);

equalizer_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U33(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(signal_shift_reg_31),
    .din1(reg_487),
    .ce(1'b1),
    .dout(grp_fu_1119_p2)
);

equalizer_regslice_both #(
    .DataWidth( 32 ))
regslice_both_output_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TDATA_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(output_r_TREADY_int_regslice),
    .data_out(output_r_TDATA),
    .vld_out(regslice_both_output_r_V_data_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_data_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 4 ))
regslice_both_output_r_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TKEEP_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_r_V_keep_V_U_ack_in_dummy),
    .data_out(output_r_TKEEP),
    .vld_out(regslice_both_output_r_V_keep_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_keep_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 4 ))
regslice_both_output_r_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TSTRB_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_r_V_strb_V_U_ack_in_dummy),
    .data_out(output_r_TSTRB),
    .vld_out(regslice_both_output_r_V_strb_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_strb_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_r_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TUSER_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_r_V_user_V_U_ack_in_dummy),
    .data_out(output_r_TUSER),
    .vld_out(regslice_both_output_r_V_user_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_user_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_r_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TLAST_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_r_V_last_V_U_ack_in_dummy),
    .data_out(output_r_TLAST),
    .vld_out(regslice_both_output_r_V_last_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_last_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_r_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TID_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_r_V_id_V_U_ack_in_dummy),
    .data_out(output_r_TID),
    .vld_out(regslice_both_output_r_V_id_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_id_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_r_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TDEST_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_r_V_dest_V_U_ack_in_dummy),
    .data_out(output_r_TDEST),
    .vld_out(regslice_both_output_r_V_dest_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_V_dest_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 32 ))
regslice_both_input_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TDATA),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_data_V_U_ack_in),
    .data_out(input_r_TDATA_int_regslice),
    .vld_out(input_r_TVALID_int_regslice),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_data_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 4 ))
regslice_both_input_r_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TKEEP),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_keep_V_U_ack_in),
    .data_out(input_r_TKEEP_int_regslice),
    .vld_out(regslice_both_input_r_V_keep_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_keep_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 4 ))
regslice_both_input_r_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TSTRB),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_strb_V_U_ack_in),
    .data_out(input_r_TSTRB_int_regslice),
    .vld_out(regslice_both_input_r_V_strb_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_strb_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_r_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TUSER),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_user_V_U_ack_in),
    .data_out(input_r_TUSER_int_regslice),
    .vld_out(regslice_both_input_r_V_user_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_user_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_r_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TLAST),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_last_V_U_ack_in),
    .data_out(input_r_TLAST_int_regslice),
    .vld_out(regslice_both_input_r_V_last_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_last_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_r_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TID),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_id_V_U_ack_in),
    .data_out(input_r_TID_int_regslice),
    .vld_out(regslice_both_input_r_V_id_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_id_V_U_apdone_blk)
);

equalizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_r_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TDEST),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_V_dest_V_U_ack_in),
    .data_out(input_r_TDEST_int_regslice),
    .vld_out(regslice_both_input_r_V_dest_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((input_r_TVALID_int_regslice == 1'b0) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2) & (state_2_load_fu_520_p1 == 32'd17))) begin
        j_reg_416 <= 6'd32;
    end else if ((~((gmem_BVALID == 1'b0) | (input_r_TVALID_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state55))) begin
        j_reg_416 <= add_ln39_reg_1860;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state46_io) | ((ap_predicate_op343_write_state46 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op314_write_state46 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state46) & (((ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 == 1'd0) & (tmp_last_V_2_reg_1388 == 1'd1) & (state_2_reg_1356 == 32'd4096)) | (~(state_2_reg_1356 == 32'd0) & ~(state_2_reg_1356 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 == 1'd0))))) begin
        state_1233_reg_401 <= ap_phi_mux_state_1_phi_fu_318_p6;
    end else if ((~((input_r_TVALID_int_regslice == 1'b0) | (1'b1 == ap_block_state2_io)) & (grp_fu_479_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (state_2_load_fu_520_p1 == 32'd0))) begin
        state_1233_reg_401 <= 32'd17;
    end else if ((~((1'b1 == ap_block_state47_io) | ((ap_predicate_op344_write_state47 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (tmp_last_V_2_reg_1388 == 1'd0) & (state_2_reg_1356 == 32'd4096) & (1'b1 == ap_CS_fsm_state47))) begin
        state_1233_reg_401 <= 32'd4096;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln39_fu_1217_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48)) | (~((1'b1 == ap_block_state46_io) | ((ap_predicate_op343_write_state46 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op314_write_state46 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (tmp_last_V_2_reg_1388 == 1'd1) & (state_2_reg_1356 == 32'd4096) & (1'b1 == ap_CS_fsm_state46)))) begin
        state_1_reg_314 <= 32'd4096;
    end else if ((~(state_2_load_fu_520_p1 == 32'd17) & ~(state_2_load_fu_520_p1 == 32'd0) & ~(state_fu_218 == 32'd4096) & ~((input_r_TVALID_int_regslice == 1'b0) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2))) begin
        state_1_reg_314 <= state_fu_218;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        state_fu_218 <= 32'd0;
    end else if ((~((1'b1 == ap_block_state47_io) | ((ap_predicate_op344_write_state47 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state47) & (((~(state_2_reg_1356 == 32'd0) & (tmp_last_V_1_reg_301 == 1'd0)) | ((tmp_last_V_2_reg_1388 == 1'd0) & (state_2_reg_1356 == 32'd4096))) | ((tmp_last_V_2_reg_1388 == 1'd0) & (state_2_reg_1356 == 32'd0))))) begin
        state_fu_218 <= ap_phi_mux_state_1233_phi_fu_405_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_1217_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
        tmp_last_V_1_reg_301 <= p_4_0_0_0108_phi_reg_438;
    end else if ((~((1'b1 == ap_block_state46_io) | ((ap_predicate_op343_write_state46 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op314_write_state46 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (tmp_last_V_2_reg_1388 == 1'd1) & (state_2_reg_1356 == 32'd4096) & (1'b1 == ap_CS_fsm_state46))) begin
        tmp_last_V_1_reg_301 <= 1'd1;
    end else if ((~(state_2_load_fu_520_p1 == 32'd17) & ~(state_2_load_fu_520_p1 == 32'd0) & ~(state_fu_218 == 32'd4096) & ~((input_r_TVALID_int_regslice == 1'b0) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_last_V_1_reg_301 <= input_r_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        accumulate_reg_1826 <= grp_fu_1119_p2;
        add_ln70_16_reg_1831 <= add_ln70_16_fu_1130_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_1217_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state48))) begin
        add_ln39_reg_1860 <= add_ln39_fu_1260_p2;
        gmem_addr_1_reg_1854 <= sext_ln40_fu_1250_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        add_ln70_11_reg_1575 <= add_ln70_11_fu_780_p2;
        signal_shift_reg_13_load_reg_1564 <= signal_shift_reg_13;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        add_ln70_12_reg_1601 <= add_ln70_12_fu_818_p2;
        signal_shift_reg_15_load_reg_1590 <= signal_shift_reg_15;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        add_ln70_13_reg_1659 <= add_ln70_13_fu_894_p2;
        mul_ln67_13_reg_1654 <= grp_fu_866_p2;
        signal_shift_reg_19_load_reg_1648 <= signal_shift_reg_19;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        add_ln70_17_reg_1836 <= add_ln70_17_fu_1138_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        add_ln70_19_reg_1785 <= add_ln70_19_fu_1072_p2;
        mul_ln67_3_reg_1780 <= grp_fu_1062_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        add_ln70_1_reg_1497 <= add_ln70_1_fu_664_p2;
        mul_ln67_25_reg_1492 <= grp_fu_645_p2;
        signal_shift_reg_7_load_reg_1486 <= signal_shift_reg_7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        add_ln70_20_reg_1811 <= add_ln70_20_fu_1110_p2;
        mul_ln67_1_reg_1806 <= grp_fu_1090_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        add_ln70_23_reg_1733 <= add_ln70_23_fu_994_p2;
        mul_ln67_7_reg_1728 <= grp_fu_984_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        add_ln70_27_reg_1686 <= add_ln70_27_fu_931_p2;
        mul_ln67_11_reg_1681 <= grp_fu_908_p2;
        signal_shift_reg_21_load_reg_1675 <= signal_shift_reg_21;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        add_ln70_28_reg_1712 <= add_ln70_28_fu_970_p2;
        mul_ln67_9_reg_1707 <= grp_fu_936_p2;
        signal_shift_reg_23_load_reg_1696 <= signal_shift_reg_23;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        add_ln70_29_reg_1759 <= add_ln70_29_fu_1048_p2;
        signal_shift_reg_27_load_reg_1743 <= signal_shift_reg_27;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        add_ln70_30_reg_1841 <= add_ln70_30_fu_1147_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        add_ln70_4_reg_1518 <= add_ln70_4_fu_698_p2;
        signal_shift_reg_9_load_reg_1507 <= signal_shift_reg_9;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        add_ln70_5_reg_1544 <= add_ln70_5_fu_736_p2;
        signal_shift_reg_11_load_reg_1533 <= signal_shift_reg_11;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        add_ln70_6_reg_1559 <= add_ln70_6_fu_745_p2;
        mul_ln67_20_reg_1549 <= grp_fu_716_p2;
        mul_ln67_21_reg_1554 <= grp_fu_727_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        add_ln70_8_reg_1632 <= add_ln70_8_fu_853_p2;
        mul_ln67_15_reg_1627 <= grp_fu_823_p2;
        signal_shift_reg_17_load_reg_1616 <= signal_shift_reg_17;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        add_ln70_reg_1470 <= add_ln70_fu_632_p2;
        mul_ln67_27_reg_1465 <= grp_fu_614_p2;
        signal_shift_reg_5_load_reg_1459 <= signal_shift_reg_5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        coefs_read_reg_1315 <= coefs;
        gmem_addr_reg_1320 <= sext_ln67_fu_505_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        gmem_addr_read_4_reg_1412 <= gmem_RDATA;
        signal_shift_reg_3_load_reg_1417 <= signal_shift_reg_3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        mul_ln67_10_reg_1691 <= grp_fu_922_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        mul_ln67_12_reg_1670 <= grp_fu_880_p2;
        signal_shift_reg_20_load_reg_1664 <= signal_shift_reg_20;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        mul_ln67_14_reg_1643 <= grp_fu_842_p2;
        signal_shift_reg_18_load_reg_1637 <= signal_shift_reg_18;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        mul_ln67_16_reg_1606 <= grp_fu_798_p2;
        mul_ln67_17_reg_1611 <= grp_fu_809_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        mul_ln67_18_reg_1580 <= grp_fu_764_p2;
        mul_ln67_19_reg_1585 <= grp_fu_775_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        mul_ln67_22_reg_1523 <= grp_fu_682_p2;
        mul_ln67_23_reg_1528 <= grp_fu_693_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        mul_ln67_24_reg_1502 <= grp_fu_659_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        mul_ln67_26_reg_1481 <= grp_fu_627_p2;
        signal_shift_reg_6_load_reg_1475 <= signal_shift_reg_6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        mul_ln67_28_reg_1444 <= grp_fu_562_p2;
        mul_ln67_29_reg_1449 <= grp_fu_578_p2;
        mul_ln67_30_reg_1454 <= grp_fu_594_p2;
        signal_shift_reg_4_load_reg_1438 <= signal_shift_reg_4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        mul_ln67_2_reg_1801 <= grp_fu_1067_p2;
        signal_shift_reg_30_load_reg_1790 <= signal_shift_reg_30;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        mul_ln67_4_reg_1770 <= grp_fu_1012_p2;
        mul_ln67_5_reg_1775 <= grp_fu_1028_p2;
        signal_shift_reg_28_load_reg_1764 <= signal_shift_reg_28;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        mul_ln67_6_reg_1738 <= grp_fu_989_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        mul_ln67_8_reg_1723 <= grp_fu_955_p2;
        signal_shift_reg_24_load_reg_1717 <= signal_shift_reg_24;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        mul_ln67_reg_1821 <= grp_fu_1101_p2;
        signal_shift_reg_31 <= signal_shift_reg_30_load_reg_1790;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        mul_ln70_reg_1407 <= grp_fu_543_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((gmem_BVALID == 1'b0) | (input_r_TVALID_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state55))) begin
        p_4_0_0_0108_phi_reg_438 <= input_r_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state40)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state36)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state30)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9)))) begin
        reg_483 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state41)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
        reg_487 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_491 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        signal_shift_reg_0 <= tmp_data_V_reg_1360;
        signal_shift_reg_1 <= signal_shift_reg_0;
        signal_shift_reg_2 <= signal_shift_reg_1;
        signal_shift_reg_3 <= signal_shift_reg_2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        signal_shift_reg_10 <= signal_shift_reg_9_load_reg_1507;
        signal_shift_reg_11 <= signal_shift_reg_10;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        signal_shift_reg_12 <= signal_shift_reg_11_load_reg_1533;
        signal_shift_reg_13 <= signal_shift_reg_12;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
        signal_shift_reg_14 <= signal_shift_reg_13_load_reg_1564;
        signal_shift_reg_15 <= signal_shift_reg_14;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        signal_shift_reg_16 <= signal_shift_reg_15_load_reg_1590;
        signal_shift_reg_17 <= signal_shift_reg_16;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        signal_shift_reg_18 <= signal_shift_reg_17_load_reg_1616;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
        signal_shift_reg_19 <= signal_shift_reg_18_load_reg_1637;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
        signal_shift_reg_20 <= signal_shift_reg_19_load_reg_1648;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
        signal_shift_reg_21 <= signal_shift_reg_20_load_reg_1664;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
        signal_shift_reg_22 <= signal_shift_reg_21_load_reg_1675;
        signal_shift_reg_23 <= signal_shift_reg_22;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
        signal_shift_reg_24 <= signal_shift_reg_23_load_reg_1696;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
        signal_shift_reg_25 <= signal_shift_reg_24_load_reg_1717;
        signal_shift_reg_26 <= signal_shift_reg_25;
        signal_shift_reg_27 <= signal_shift_reg_26;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
        signal_shift_reg_28 <= signal_shift_reg_27_load_reg_1743;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state40))) begin
        signal_shift_reg_29 <= signal_shift_reg_28_load_reg_1764;
        signal_shift_reg_30 <= signal_shift_reg_29;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        signal_shift_reg_4 <= signal_shift_reg_3_load_reg_1417;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        signal_shift_reg_5 <= signal_shift_reg_4_load_reg_1438;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        signal_shift_reg_6 <= signal_shift_reg_5_load_reg_1459;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        signal_shift_reg_7 <= signal_shift_reg_6_load_reg_1475;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
        signal_shift_reg_8 <= signal_shift_reg_7_load_reg_1486;
        signal_shift_reg_9 <= signal_shift_reg_8;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        state_2_reg_1356 <= state_fu_218;
        tmp_data_V_reg_1360 <= input_r_TDATA_int_regslice;
        tmp_dest_V_reg_1400 <= input_r_TDEST_int_regslice;
        tmp_id_V_reg_1393 <= input_r_TID_int_regslice;
        tmp_keep_V_reg_1367 <= input_r_TKEEP_int_regslice;
        tmp_last_V_2_reg_1388 <= input_r_TLAST_int_regslice;
        tmp_strb_V_reg_1374 <= input_r_TSTRB_int_regslice;
        tmp_user_V_reg_1381 <= input_r_TUSER_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((~((gmem_BVALID == 1'b0) | (input_r_TVALID_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state55)) | (~((input_r_TVALID_int_regslice == 1'b0) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2) & (state_2_load_fu_520_p1 == 32'd17)))) begin
        tmp_data_V_1_reg_427 <= input_r_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((~((input_r_TVALID_int_regslice == 1'b0) | (1'b1 == ap_block_state2_io)) & (grp_fu_479_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (state_2_load_fu_520_p1 == 32'd0)) | (~((1'b1 == ap_block_state46_io) | ((ap_predicate_op343_write_state46 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op314_write_state46 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state46) & ((~(state_2_reg_1356 == 32'd0) & ~(state_2_reg_1356 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 == 1'd1) & (tmp_last_V_2_reg_1388 == 1'd1) & (state_2_reg_1356 == 32'd4096)))))) begin
        tmp_data_V_4_reg_389 <= grp_load_fu_451_p1;
        tmp_dest_V_1_reg_329 <= grp_load_fu_471_p1;
        tmp_id_V_1_reg_341 <= grp_load_fu_467_p1;
        tmp_keep_V_1_reg_377 <= grp_load_fu_455_p1;
        tmp_strb_V_1_reg_365 <= grp_load_fu_459_p1;
        tmp_user_V_1_reg_353 <= grp_load_fu_463_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b1 == ap_block_state46_io) | ((ap_predicate_op343_write_state46 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op314_write_state46 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (tmp_last_V_2_reg_1388 == 1'd1) & (state_2_reg_1356 == 32'd4096) & (1'b1 == ap_CS_fsm_state46)) | (~((1'b1 == ap_block_state46_io) | ((ap_predicate_op343_write_state46 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op314_write_state46 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (tmp_last_V_2_reg_1388 == 1'd0) & (state_2_reg_1356 == 32'd4096) & (1'b1 == ap_CS_fsm_state46)))) begin
        tmp_out_data_V_fu_194 <= accumulate_2_fu_1156_p2;
        tmp_out_dest_V_fu_214 <= tmp_dest_V_reg_1400;
        tmp_out_id_V_fu_210 <= tmp_id_V_reg_1393;
        tmp_out_keep_V_fu_198 <= tmp_keep_V_reg_1367;
        tmp_out_strb_V_fu_202 <= tmp_strb_V_reg_1374;
        tmp_out_user_V_fu_206 <= tmp_user_V_reg_1381;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_fsm_state17_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state18_blk = 1'b1;
    end else begin
        ap_ST_fsm_state18_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state19_blk = 1'b1;
    end else begin
        ap_ST_fsm_state19_blk = 1'b0;
    end
end

assign ap_ST_fsm_state1_blk = 1'b0;

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state20_blk = 1'b1;
    end else begin
        ap_ST_fsm_state20_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state21_blk = 1'b1;
    end else begin
        ap_ST_fsm_state21_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state22_blk = 1'b1;
    end else begin
        ap_ST_fsm_state22_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state23_blk = 1'b1;
    end else begin
        ap_ST_fsm_state23_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state24_blk = 1'b1;
    end else begin
        ap_ST_fsm_state24_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state25_blk = 1'b1;
    end else begin
        ap_ST_fsm_state25_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state26_blk = 1'b1;
    end else begin
        ap_ST_fsm_state26_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state27_blk = 1'b1;
    end else begin
        ap_ST_fsm_state27_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state28_blk = 1'b1;
    end else begin
        ap_ST_fsm_state28_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state29_blk = 1'b1;
    end else begin
        ap_ST_fsm_state29_blk = 1'b0;
    end
end

always @ (*) begin
    if (((input_r_TVALID_int_regslice == 1'b0) | (1'b1 == ap_block_state2_io))) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state30_blk = 1'b1;
    end else begin
        ap_ST_fsm_state30_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state31_blk = 1'b1;
    end else begin
        ap_ST_fsm_state31_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state32_blk = 1'b1;
    end else begin
        ap_ST_fsm_state32_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state33_blk = 1'b1;
    end else begin
        ap_ST_fsm_state33_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state34_blk = 1'b1;
    end else begin
        ap_ST_fsm_state34_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state35_blk = 1'b1;
    end else begin
        ap_ST_fsm_state35_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state36_blk = 1'b1;
    end else begin
        ap_ST_fsm_state36_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state37_blk = 1'b1;
    end else begin
        ap_ST_fsm_state37_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state38_blk = 1'b1;
    end else begin
        ap_ST_fsm_state38_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state39_blk = 1'b1;
    end else begin
        ap_ST_fsm_state39_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state40_blk = 1'b1;
    end else begin
        ap_ST_fsm_state40_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state41_blk = 1'b1;
    end else begin
        ap_ST_fsm_state41_blk = 1'b0;
    end
end

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_block_state46_io) | ((ap_predicate_op343_write_state46 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op314_write_state46 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)))) begin
        ap_ST_fsm_state46_blk = 1'b1;
    end else begin
        ap_ST_fsm_state46_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state47_io) | ((ap_predicate_op344_write_state47 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)))) begin
        ap_ST_fsm_state47_blk = 1'b1;
    end else begin
        ap_ST_fsm_state47_blk = 1'b0;
    end
end

assign ap_ST_fsm_state48_blk = 1'b0;

always @ (*) begin
    if ((gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state49_blk = 1'b1;
    end else begin
        ap_ST_fsm_state49_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state50_blk = 1'b1;
    end else begin
        ap_ST_fsm_state50_blk = 1'b0;
    end
end

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

always @ (*) begin
    if (((gmem_BVALID == 1'b0) | (input_r_TVALID_int_regslice == 1'b0))) begin
        ap_ST_fsm_state55_blk = 1'b1;
    end else begin
        ap_ST_fsm_state55_blk = 1'b0;
    end
end

always @ (*) begin
    if (((output_r_TREADY_int_regslice == 1'b0) | (regslice_both_output_r_V_data_V_U_apdone_blk == 1'b1))) begin
        ap_ST_fsm_state56_blk = 1'b1;
    end else begin
        ap_ST_fsm_state56_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_2_reg_1388 == 1'd0) & (state_2_reg_1356 == 32'd4096) & (1'b1 == ap_CS_fsm_state47))) begin
        ap_phi_mux_state_1233_phi_fu_405_p6 = 32'd4096;
    end else begin
        ap_phi_mux_state_1233_phi_fu_405_p6 = state_1233_reg_401;
    end
end

always @ (*) begin
    if (((tmp_last_V_2_reg_1388 == 1'd1) & (state_2_reg_1356 == 32'd4096) & (1'b1 == ap_CS_fsm_state46))) begin
        ap_phi_mux_state_1_phi_fu_318_p6 = 32'd4096;
    end else begin
        ap_phi_mux_state_1_phi_fu_318_p6 = state_1_reg_314;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & ((~(state_2_reg_1356 == 32'd0) & ~(state_2_reg_1356 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 == 1'd1) & (tmp_last_V_2_reg_1388 == 1'd1) & (state_2_reg_1356 == 32'd4096))))) begin
        ap_phi_mux_tmp_data_V_4_phi_fu_393_p4 = grp_load_fu_451_p1;
    end else begin
        ap_phi_mux_tmp_data_V_4_phi_fu_393_p4 = tmp_data_V_4_reg_389;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & ((~(state_2_reg_1356 == 32'd0) & ~(state_2_reg_1356 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 == 1'd1) & (tmp_last_V_2_reg_1388 == 1'd1) & (state_2_reg_1356 == 32'd4096))))) begin
        ap_phi_mux_tmp_dest_V_1_phi_fu_333_p4 = grp_load_fu_471_p1;
    end else begin
        ap_phi_mux_tmp_dest_V_1_phi_fu_333_p4 = tmp_dest_V_1_reg_329;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & ((~(state_2_reg_1356 == 32'd0) & ~(state_2_reg_1356 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 == 1'd1) & (tmp_last_V_2_reg_1388 == 1'd1) & (state_2_reg_1356 == 32'd4096))))) begin
        ap_phi_mux_tmp_id_V_1_phi_fu_345_p4 = grp_load_fu_467_p1;
    end else begin
        ap_phi_mux_tmp_id_V_1_phi_fu_345_p4 = tmp_id_V_1_reg_341;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & ((~(state_2_reg_1356 == 32'd0) & ~(state_2_reg_1356 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 == 1'd1) & (tmp_last_V_2_reg_1388 == 1'd1) & (state_2_reg_1356 == 32'd4096))))) begin
        ap_phi_mux_tmp_keep_V_1_phi_fu_381_p4 = grp_load_fu_455_p1;
    end else begin
        ap_phi_mux_tmp_keep_V_1_phi_fu_381_p4 = tmp_keep_V_1_reg_377;
    end
end

always @ (*) begin
    if (((tmp_last_V_2_reg_1388 == 1'd1) & (state_2_reg_1356 == 32'd4096) & (1'b1 == ap_CS_fsm_state46))) begin
        ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 = 1'd1;
    end else begin
        ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 = tmp_last_V_1_reg_301;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & ((~(state_2_reg_1356 == 32'd0) & ~(state_2_reg_1356 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 == 1'd1) & (tmp_last_V_2_reg_1388 == 1'd1) & (state_2_reg_1356 == 32'd4096))))) begin
        ap_phi_mux_tmp_strb_V_1_phi_fu_369_p4 = grp_load_fu_459_p1;
    end else begin
        ap_phi_mux_tmp_strb_V_1_phi_fu_369_p4 = tmp_strb_V_1_reg_365;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & ((~(state_2_reg_1356 == 32'd0) & ~(state_2_reg_1356 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 == 1'd1) & (tmp_last_V_2_reg_1388 == 1'd1) & (state_2_reg_1356 == 32'd4096))))) begin
        ap_phi_mux_tmp_user_V_1_phi_fu_357_p4 = grp_load_fu_463_p1;
    end else begin
        ap_phi_mux_tmp_user_V_1_phi_fu_357_p4 = tmp_user_V_1_reg_353;
    end
end

always @ (*) begin
    if (((tmp_last_V_2_reg_1388 == 1'd1) & (state_2_reg_1356 == 32'd4096) & (1'b1 == ap_CS_fsm_state46))) begin
        ap_sig_allocacmp_tmp_out_data_V_4 = accumulate_2_fu_1156_p2;
    end else begin
        ap_sig_allocacmp_tmp_out_data_V_4 = tmp_out_data_V_fu_194;
    end
end

always @ (*) begin
    if (((tmp_last_V_2_reg_1388 == 1'd1) & (state_2_reg_1356 == 32'd4096) & (1'b1 == ap_CS_fsm_state46))) begin
        ap_sig_allocacmp_tmp_out_dest_V_4 = tmp_dest_V_reg_1400;
    end else begin
        ap_sig_allocacmp_tmp_out_dest_V_4 = tmp_out_dest_V_fu_214;
    end
end

always @ (*) begin
    if (((tmp_last_V_2_reg_1388 == 1'd1) & (state_2_reg_1356 == 32'd4096) & (1'b1 == ap_CS_fsm_state46))) begin
        ap_sig_allocacmp_tmp_out_id_V_4 = tmp_id_V_reg_1393;
    end else begin
        ap_sig_allocacmp_tmp_out_id_V_4 = tmp_out_id_V_fu_210;
    end
end

always @ (*) begin
    if (((tmp_last_V_2_reg_1388 == 1'd1) & (state_2_reg_1356 == 32'd4096) & (1'b1 == ap_CS_fsm_state46))) begin
        ap_sig_allocacmp_tmp_out_keep_V_4 = tmp_keep_V_reg_1367;
    end else begin
        ap_sig_allocacmp_tmp_out_keep_V_4 = tmp_out_keep_V_fu_198;
    end
end

always @ (*) begin
    if (((tmp_last_V_2_reg_1388 == 1'd1) & (state_2_reg_1356 == 32'd4096) & (1'b1 == ap_CS_fsm_state46))) begin
        ap_sig_allocacmp_tmp_out_strb_V_4 = tmp_strb_V_reg_1374;
    end else begin
        ap_sig_allocacmp_tmp_out_strb_V_4 = tmp_out_strb_V_fu_202;
    end
end

always @ (*) begin
    if (((tmp_last_V_2_reg_1388 == 1'd1) & (state_2_reg_1356 == 32'd4096) & (1'b1 == ap_CS_fsm_state46))) begin
        ap_sig_allocacmp_tmp_out_user_V_4 = tmp_user_V_reg_1381;
    end else begin
        ap_sig_allocacmp_tmp_out_user_V_4 = tmp_out_user_V_fu_206;
    end
end

always @ (*) begin
    if ((~((input_r_TVALID_int_regslice == 1'b0) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2) & (state_fu_218 == 32'd4096))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state49))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) | (input_r_TVALID_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state55))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state41)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state40)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state36)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state30)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state50))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (state_fu_218 == 32'd4096))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37)))) begin
        grp_fu_1012_ce = 1'b1;
    end else begin
        grp_fu_1012_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37)))) begin
        grp_fu_1028_ce = 1'b1;
    end else begin
        grp_fu_1028_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38)))) begin
        grp_fu_1062_ce = 1'b1;
    end else begin
        grp_fu_1062_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state40)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39)))) begin
        grp_fu_1067_ce = 1'b1;
    end else begin
        grp_fu_1067_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state41)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state40)))) begin
        grp_fu_1090_ce = 1'b1;
    end else begin
        grp_fu_1090_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state41)))) begin
        grp_fu_1101_ce = 1'b1;
    end else begin
        grp_fu_1101_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
        grp_fu_543_ce = 1'b1;
    end else begin
        grp_fu_543_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13)))) begin
        grp_fu_562_ce = 1'b1;
    end else begin
        grp_fu_562_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13)))) begin
        grp_fu_578_ce = 1'b1;
    end else begin
        grp_fu_578_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13)))) begin
        grp_fu_594_ce = 1'b1;
    end else begin
        grp_fu_594_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        grp_fu_614_ce = 1'b1;
    end else begin
        grp_fu_614_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15)))) begin
        grp_fu_627_ce = 1'b1;
    end else begin
        grp_fu_627_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16)))) begin
        grp_fu_645_ce = 1'b1;
    end else begin
        grp_fu_645_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17)))) begin
        grp_fu_659_ce = 1'b1;
    end else begin
        grp_fu_659_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19)))) begin
        grp_fu_682_ce = 1'b1;
    end else begin
        grp_fu_682_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19)))) begin
        grp_fu_693_ce = 1'b1;
    end else begin
        grp_fu_693_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21)))) begin
        grp_fu_716_ce = 1'b1;
    end else begin
        grp_fu_716_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21)))) begin
        grp_fu_727_ce = 1'b1;
    end else begin
        grp_fu_727_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23)))) begin
        grp_fu_764_ce = 1'b1;
    end else begin
        grp_fu_764_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23)))) begin
        grp_fu_775_ce = 1'b1;
    end else begin
        grp_fu_775_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25)))) begin
        grp_fu_798_ce = 1'b1;
    end else begin
        grp_fu_798_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25)))) begin
        grp_fu_809_ce = 1'b1;
    end else begin
        grp_fu_809_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state26)))) begin
        grp_fu_823_ce = 1'b1;
    end else begin
        grp_fu_823_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27)))) begin
        grp_fu_842_ce = 1'b1;
    end else begin
        grp_fu_842_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state28)))) begin
        grp_fu_866_ce = 1'b1;
    end else begin
        grp_fu_866_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state30)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state29)))) begin
        grp_fu_880_ce = 1'b1;
    end else begin
        grp_fu_880_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state30)))) begin
        grp_fu_908_ce = 1'b1;
    end else begin
        grp_fu_908_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state31)))) begin
        grp_fu_922_ce = 1'b1;
    end else begin
        grp_fu_922_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state32)))) begin
        grp_fu_936_ce = 1'b1;
    end else begin
        grp_fu_936_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33)))) begin
        grp_fu_955_ce = 1'b1;
    end else begin
        grp_fu_955_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state34)))) begin
        grp_fu_984_ce = 1'b1;
    end else begin
        grp_fu_984_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state36)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state35)))) begin
        grp_fu_989_ce = 1'b1;
    end else begin
        grp_fu_989_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & ((~(state_2_reg_1356 == 32'd0) & ~(state_2_reg_1356 == 32'd4096)) | ((tmp_last_V_2_reg_1388 == 1'd1) & (state_2_reg_1356 == 32'd4096))))) begin
        grp_load_fu_451_p1 = ap_sig_allocacmp_tmp_out_data_V_4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_load_fu_451_p1 = tmp_out_data_V_fu_194;
    end else begin
        grp_load_fu_451_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & ((~(state_2_reg_1356 == 32'd0) & ~(state_2_reg_1356 == 32'd4096)) | ((tmp_last_V_2_reg_1388 == 1'd1) & (state_2_reg_1356 == 32'd4096))))) begin
        grp_load_fu_455_p1 = ap_sig_allocacmp_tmp_out_keep_V_4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_load_fu_455_p1 = tmp_out_keep_V_fu_198;
    end else begin
        grp_load_fu_455_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & ((~(state_2_reg_1356 == 32'd0) & ~(state_2_reg_1356 == 32'd4096)) | ((tmp_last_V_2_reg_1388 == 1'd1) & (state_2_reg_1356 == 32'd4096))))) begin
        grp_load_fu_459_p1 = ap_sig_allocacmp_tmp_out_strb_V_4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_load_fu_459_p1 = tmp_out_strb_V_fu_202;
    end else begin
        grp_load_fu_459_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & ((~(state_2_reg_1356 == 32'd0) & ~(state_2_reg_1356 == 32'd4096)) | ((tmp_last_V_2_reg_1388 == 1'd1) & (state_2_reg_1356 == 32'd4096))))) begin
        grp_load_fu_463_p1 = ap_sig_allocacmp_tmp_out_user_V_4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_load_fu_463_p1 = tmp_out_user_V_fu_206;
    end else begin
        grp_load_fu_463_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & ((~(state_2_reg_1356 == 32'd0) & ~(state_2_reg_1356 == 32'd4096)) | ((tmp_last_V_2_reg_1388 == 1'd1) & (state_2_reg_1356 == 32'd4096))))) begin
        grp_load_fu_467_p1 = ap_sig_allocacmp_tmp_out_id_V_4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_load_fu_467_p1 = tmp_out_id_V_fu_210;
    end else begin
        grp_load_fu_467_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & ((~(state_2_reg_1356 == 32'd0) & ~(state_2_reg_1356 == 32'd4096)) | ((tmp_last_V_2_reg_1388 == 1'd1) & (state_2_reg_1356 == 32'd4096))))) begin
        grp_load_fu_471_p1 = ap_sig_allocacmp_tmp_out_dest_V_4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_load_fu_471_p1 = tmp_out_dest_V_fu_214;
    end else begin
        grp_load_fu_471_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state2))) begin
        input_r_TDATA_blk_n = input_r_TVALID_int_regslice;
    end else begin
        input_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((gmem_BVALID == 1'b0) | (input_r_TVALID_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state55)) | (~((input_r_TVALID_int_regslice == 1'b0) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2)))) begin
        input_r_TREADY_int_regslice = 1'b1;
    end else begin
        input_r_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state56) | ((tmp_last_V_2_reg_1388 == 1'd0) & (state_2_reg_1356 == 32'd4096) & (1'b1 == ap_CS_fsm_state47)) | ((tmp_last_V_2_reg_1388 == 1'd0) & (state_2_reg_1356 == 32'd4096) & (1'b1 == ap_CS_fsm_state46)) | ((1'b1 == ap_CS_fsm_state46) & (((~(state_2_reg_1356 == 32'd0) & ~(state_2_reg_1356 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 == 1'd1) & (tmp_last_V_2_reg_1388 == 1'd1))) | ((tmp_last_V_2_reg_1388 == 1'd1) & (state_2_reg_1356 == 32'd0)))))) begin
        output_r_TDATA_blk_n = output_r_TREADY_int_regslice;
    end else begin
        output_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1749)) begin
        if ((ap_predicate_op343_write_state46 == 1'b1)) begin
            output_r_TDATA_int_regslice = ap_phi_mux_tmp_data_V_4_phi_fu_393_p4;
        end else if ((ap_predicate_op314_write_state46 == 1'b1)) begin
            output_r_TDATA_int_regslice = accumulate_2_fu_1156_p2;
        end else begin
            output_r_TDATA_int_regslice = 'bx;
        end
    end else begin
        output_r_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1749)) begin
        if ((ap_predicate_op343_write_state46 == 1'b1)) begin
            output_r_TDEST_int_regslice = ap_phi_mux_tmp_dest_V_1_phi_fu_333_p4;
        end else if ((ap_predicate_op314_write_state46 == 1'b1)) begin
            output_r_TDEST_int_regslice = tmp_dest_V_reg_1400;
        end else begin
            output_r_TDEST_int_regslice = 'bx;
        end
    end else begin
        output_r_TDEST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1749)) begin
        if ((ap_predicate_op343_write_state46 == 1'b1)) begin
            output_r_TID_int_regslice = ap_phi_mux_tmp_id_V_1_phi_fu_345_p4;
        end else if ((ap_predicate_op314_write_state46 == 1'b1)) begin
            output_r_TID_int_regslice = tmp_id_V_reg_1393;
        end else begin
            output_r_TID_int_regslice = 'bx;
        end
    end else begin
        output_r_TID_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1749)) begin
        if ((ap_predicate_op343_write_state46 == 1'b1)) begin
            output_r_TKEEP_int_regslice = ap_phi_mux_tmp_keep_V_1_phi_fu_381_p4;
        end else if ((ap_predicate_op314_write_state46 == 1'b1)) begin
            output_r_TKEEP_int_regslice = tmp_keep_V_reg_1367;
        end else begin
            output_r_TKEEP_int_regslice = 'bx;
        end
    end else begin
        output_r_TKEEP_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1749)) begin
        if ((ap_predicate_op343_write_state46 == 1'b1)) begin
            output_r_TLAST_int_regslice = 1'd1;
        end else if ((ap_predicate_op314_write_state46 == 1'b1)) begin
            output_r_TLAST_int_regslice = 1'd0;
        end else begin
            output_r_TLAST_int_regslice = 'bx;
        end
    end else begin
        output_r_TLAST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1749)) begin
        if ((ap_predicate_op343_write_state46 == 1'b1)) begin
            output_r_TSTRB_int_regslice = ap_phi_mux_tmp_strb_V_1_phi_fu_369_p4;
        end else if ((ap_predicate_op314_write_state46 == 1'b1)) begin
            output_r_TSTRB_int_regslice = tmp_strb_V_reg_1374;
        end else begin
            output_r_TSTRB_int_regslice = 'bx;
        end
    end else begin
        output_r_TSTRB_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1749)) begin
        if ((ap_predicate_op343_write_state46 == 1'b1)) begin
            output_r_TUSER_int_regslice = ap_phi_mux_tmp_user_V_1_phi_fu_357_p4;
        end else if ((ap_predicate_op314_write_state46 == 1'b1)) begin
            output_r_TUSER_int_regslice = tmp_user_V_reg_1381;
        end else begin
            output_r_TUSER_int_regslice = 'bx;
        end
    end else begin
        output_r_TUSER_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state46_io) | ((ap_predicate_op343_write_state46 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op314_write_state46 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (ap_predicate_op343_write_state46 == 1'b1) & (1'b1 == ap_CS_fsm_state46)) | (~((1'b1 == ap_block_state46_io) | ((ap_predicate_op343_write_state46 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op314_write_state46 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (ap_predicate_op314_write_state46 == 1'b1) & (1'b1 == ap_CS_fsm_state46)))) begin
        output_r_TVALID_int_regslice = 1'b1;
    end else begin
        output_r_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if ((~((input_r_TVALID_int_regslice == 1'b0) | (1'b1 == ap_block_state2_io)) & (grp_fu_479_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (state_2_load_fu_520_p1 == 32'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else if ((~((input_r_TVALID_int_regslice == 1'b0) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2) & (state_2_load_fu_520_p1 == 32'd17))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else if ((~((input_r_TVALID_int_regslice == 1'b0) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2) & (((grp_fu_479_p1 == 1'd1) & (state_2_load_fu_520_p1 == 32'd0)) | (~(state_2_load_fu_520_p1 == 32'd17) & ~(state_2_load_fu_520_p1 == 32'd0) & ~(state_fu_218 == 32'd4096))))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else if ((~((input_r_TVALID_int_regslice == 1'b0) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2) & (state_fu_218 == 32'd4096))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            if ((~((1'b1 == ap_block_state46_io) | ((ap_predicate_op343_write_state46 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op314_write_state46 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state46) & (((~(state_2_reg_1356 == 32'd0) & ~(state_2_reg_1356 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 == 1'd1) & (tmp_last_V_2_reg_1388 == 1'd1))) | ((tmp_last_V_2_reg_1388 == 1'd1) & (state_2_reg_1356 == 32'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else if ((~((1'b1 == ap_block_state46_io) | ((ap_predicate_op343_write_state46 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op314_write_state46 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state46) & ((~(state_2_reg_1356 == 32'd0) & (ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 == 1'd0)) | ((tmp_last_V_2_reg_1388 == 1'd0) & (state_2_reg_1356 == 32'd4096))))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            if ((~((1'b1 == ap_block_state47_io) | ((ap_predicate_op344_write_state47 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state47) & (((~(state_2_reg_1356 == 32'd0) & (tmp_last_V_1_reg_301 == 1'd0)) | ((tmp_last_V_2_reg_1388 == 1'd0) & (state_2_reg_1356 == 32'd4096))) | ((tmp_last_V_2_reg_1388 == 1'd0) & (state_2_reg_1356 == 32'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            if (((icmp_ln39_fu_1217_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state49 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state49))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state50 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            if ((~((gmem_BVALID == 1'b0) | (input_r_TVALID_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state55))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state56 : begin
            if ((~((output_r_TREADY_int_regslice == 1'b0) | (regslice_both_output_r_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state56))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign accumulate_2_fu_1156_p2 = (add_ln70_30_reg_1841 + add_ln70_14_fu_1152_p2);

assign add_ln39_fu_1260_p2 = ($signed(j_reg_416) + $signed(6'd63));

assign add_ln40_fu_1235_p2 = (zext_ln40_fu_1231_p1 + coefs_read_reg_1315);

assign add_ln70_10_fu_814_p2 = (mul_ln67_19_reg_1585 + mul_ln67_18_reg_1580);

assign add_ln70_11_fu_780_p2 = (mul_ln67_21_reg_1554 + mul_ln67_20_reg_1549);

assign add_ln70_12_fu_818_p2 = (add_ln70_11_reg_1575 + add_ln70_10_fu_814_p2);

assign add_ln70_13_fu_894_p2 = (add_ln70_12_reg_1601 + add_ln70_9_fu_889_p2);

assign add_ln70_14_fu_1152_p2 = (add_ln70_13_reg_1659 + add_ln70_6_reg_1559);

assign add_ln70_15_fu_1134_p2 = (mul_ln70_reg_1407 + accumulate_reg_1826);

assign add_ln70_16_fu_1130_p2 = (mul_ln67_1_reg_1806 + mul_ln67_reg_1821);

assign add_ln70_17_fu_1138_p2 = (add_ln70_16_reg_1831 + add_ln70_15_fu_1134_p2);

assign add_ln70_18_fu_1106_p2 = (mul_ln67_3_reg_1780 + mul_ln67_2_reg_1801);

assign add_ln70_19_fu_1072_p2 = (mul_ln67_5_reg_1775 + mul_ln67_4_reg_1770);

assign add_ln70_1_fu_664_p2 = (mul_ln67_27_reg_1465 + mul_ln67_26_reg_1481);

assign add_ln70_20_fu_1110_p2 = (add_ln70_19_reg_1785 + add_ln70_18_fu_1106_p2);

assign add_ln70_21_fu_1143_p2 = (add_ln70_20_reg_1811 + add_ln70_17_reg_1836);

assign add_ln70_22_fu_1039_p2 = (mul_ln67_7_reg_1728 + mul_ln67_6_reg_1738);

assign add_ln70_23_fu_994_p2 = (mul_ln67_9_reg_1707 + mul_ln67_8_reg_1723);

assign add_ln70_24_fu_1043_p2 = (add_ln70_23_reg_1733 + add_ln70_22_fu_1039_p2);

assign add_ln70_25_fu_966_p2 = (mul_ln67_11_reg_1681 + mul_ln67_10_reg_1691);

assign add_ln70_26_fu_927_p2 = (mul_ln67_12_reg_1670 + mul_ln67_30_reg_1454);

assign add_ln70_27_fu_931_p2 = (add_ln70_26_fu_927_p2 + mul_ln67_13_reg_1654);

assign add_ln70_28_fu_970_p2 = (add_ln70_27_reg_1686 + add_ln70_25_fu_966_p2);

assign add_ln70_29_fu_1048_p2 = (add_ln70_28_reg_1712 + add_ln70_24_fu_1043_p2);

assign add_ln70_2_fu_741_p2 = (add_ln70_1_reg_1497 + add_ln70_reg_1470);

assign add_ln70_30_fu_1147_p2 = (add_ln70_29_reg_1759 + add_ln70_21_fu_1143_p2);

assign add_ln70_3_fu_732_p2 = (mul_ln67_23_reg_1528 + mul_ln67_22_reg_1523);

assign add_ln70_4_fu_698_p2 = (mul_ln67_25_reg_1492 + mul_ln67_24_reg_1502);

assign add_ln70_5_fu_736_p2 = (add_ln70_4_reg_1518 + add_ln70_3_fu_732_p2);

assign add_ln70_6_fu_745_p2 = (add_ln70_5_reg_1544 + add_ln70_2_fu_741_p2);

assign add_ln70_7_fu_885_p2 = (mul_ln67_15_reg_1627 + mul_ln67_14_reg_1643);

assign add_ln70_8_fu_853_p2 = (mul_ln67_17_reg_1611 + mul_ln67_16_reg_1606);

assign add_ln70_9_fu_889_p2 = (add_ln70_8_reg_1632 + add_ln70_7_fu_885_p2);

assign add_ln70_fu_632_p2 = (mul_ln67_28_reg_1444 + mul_ln67_29_reg_1449);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state2_io = ((gmem_ARREADY == 1'b0) & (state_fu_218 == 32'd4096));
end

always @ (*) begin
    ap_block_state46 = (((ap_predicate_op343_write_state46 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op314_write_state46 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state46_io = (((ap_predicate_op343_write_state46 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op314_write_state46 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state47 = ((ap_predicate_op344_write_state47 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state47_io = ((ap_predicate_op344_write_state47 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state55 = ((gmem_BVALID == 1'b0) | (input_r_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state56 = ((output_r_TREADY_int_regslice == 1'b0) | (regslice_both_output_r_V_data_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_condition_1749 = (~(((ap_predicate_op343_write_state46 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_predicate_op314_write_state46 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state46));
end

always @ (*) begin
    ap_predicate_op314_write_state46 = ((tmp_last_V_2_reg_1388 == 1'd0) & (state_2_reg_1356 == 32'd4096));
end

always @ (*) begin
    ap_predicate_op343_write_state46 = (((~(state_2_reg_1356 == 32'd0) & ~(state_2_reg_1356 == 32'd4096) & (ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 == 1'd1)) | ((ap_phi_mux_tmp_last_V_1_phi_fu_304_p6 == 1'd1) & (tmp_last_V_2_reg_1388 == 1'd1))) | ((tmp_last_V_2_reg_1388 == 1'd1) & (state_2_reg_1356 == 32'd0)));
end

always @ (*) begin
    ap_predicate_op344_write_state47 = ((tmp_last_V_2_reg_1388 == 1'd0) & (state_2_reg_1356 == 32'd4096));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_479_p1 = input_r_TLAST_int_regslice;

assign icmp_ln39_fu_1217_p2 = ((j_reg_416 == 6'd0) ? 1'b1 : 1'b0);

assign input_r_TREADY = regslice_both_input_r_V_data_V_U_ack_in;

assign output_r_TVALID = regslice_both_output_r_V_data_V_U_vld_out;

assign sext_ln40_fu_1250_p1 = $signed(trunc_ln1_fu_1240_p4);

assign sext_ln67_fu_505_p1 = $signed(trunc_ln_fu_495_p4);

assign shl_ln_fu_1223_p3 = {{j_reg_416}, {2'd0}};

assign state_2_load_fu_520_p1 = state_fu_218;

assign trunc_ln1_fu_1240_p4 = {{add_ln40_fu_1235_p2[63:2]}};

assign trunc_ln_fu_495_p4 = {{coefs[63:2]}};

assign zext_ln40_fu_1231_p1 = shl_ln_fu_1223_p3;

endmodule //equalizer
