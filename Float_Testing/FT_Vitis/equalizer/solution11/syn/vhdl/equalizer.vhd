-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity equalizer is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    output_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_TVALID : OUT STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC;
    output_r_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_TVALID : IN STD_LOGIC;
    input_r_TREADY : OUT STD_LOGIC;
    input_r_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    input_r_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    input_r_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of equalizer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "equalizer_equalizer,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=391,HLS_SYN_LUT=729,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_GMEM_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_473EEF00 : STD_LOGIC_VECTOR (31 downto 0) := "01000111001111101110111100000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_40800000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000100000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal coefs : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_last_V_reg_252 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal input_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_keep_V_reg_237 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_strb_V_reg_242 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_user_V_reg_247 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_V_reg_257 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_V_reg_262 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_144_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal coef_2_fu_228_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal coef_2_reg_278 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state9 : BOOLEAN;
    signal ap_block_state9_io : BOOLEAN;
    signal grp_fu_144_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal coef_fu_187_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_190_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln40_fu_200_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln40_1_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln40_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_144_ce : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_149_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal regslice_both_output_r_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state10 : BOOLEAN;
    signal output_r_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r_TVALID_int_regslice : STD_LOGIC;
    signal output_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_output_r_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_r_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_r_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_r_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_r_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_r_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_r_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_r_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_r_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_r_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_r_V_last_V_U_apdone_blk : STD_LOGIC;
    signal output_r_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_output_r_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_r_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_r_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_r_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_r_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_r_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_r_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_r_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_data_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal input_r_TVALID_int_regslice : STD_LOGIC;
    signal input_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_input_r_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_r_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_input_r_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_r_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_input_r_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_r_V_user_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_r_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_r_V_last_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_r_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_r_V_id_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_r_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_r_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_r_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_r_V_dest_V_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component equalizer_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component equalizer_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component equalizer_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        coefs : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component equalizer_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    control_s_axi_U : component equalizer_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        coefs => coefs);

    fadd_32ns_32ns_32_5_full_dsp_1_U1 : component equalizer_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_144_p0,
        din1 => ap_const_lv32_40000000,
        ce => grp_fu_144_ce,
        dout => grp_fu_144_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U2 : component equalizer_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => add_reg_272,
        din1 => ap_const_lv32_473EEF00,
        ce => grp_fu_149_ce,
        opcode => ap_const_lv5_1,
        dout => grp_fu_149_p2);

    regslice_both_output_r_V_data_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TDATA_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => output_r_TREADY_int_regslice,
        data_out => output_r_TDATA,
        vld_out => regslice_both_output_r_V_data_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_data_V_U_apdone_blk);

    regslice_both_output_r_V_keep_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_keep_V_reg_237,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_r_V_keep_V_U_ack_in_dummy,
        data_out => output_r_TKEEP,
        vld_out => regslice_both_output_r_V_keep_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_keep_V_U_apdone_blk);

    regslice_both_output_r_V_strb_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_strb_V_reg_242,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_r_V_strb_V_U_ack_in_dummy,
        data_out => output_r_TSTRB,
        vld_out => regslice_both_output_r_V_strb_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_strb_V_U_apdone_blk);

    regslice_both_output_r_V_user_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_user_V_reg_247,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_r_V_user_V_U_ack_in_dummy,
        data_out => output_r_TUSER,
        vld_out => regslice_both_output_r_V_user_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_user_V_U_apdone_blk);

    regslice_both_output_r_V_last_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TLAST_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_r_V_last_V_U_ack_in_dummy,
        data_out => output_r_TLAST,
        vld_out => regslice_both_output_r_V_last_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_last_V_U_apdone_blk);

    regslice_both_output_r_V_id_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_id_V_reg_257,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_r_V_id_V_U_ack_in_dummy,
        data_out => output_r_TID,
        vld_out => regslice_both_output_r_V_id_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_id_V_U_apdone_blk);

    regslice_both_output_r_V_dest_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_dest_V_reg_262,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_r_V_dest_V_U_ack_in_dummy,
        data_out => output_r_TDEST,
        vld_out => regslice_both_output_r_V_dest_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_V_dest_V_U_apdone_blk);

    regslice_both_input_r_V_data_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TDATA,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_data_V_U_ack_in,
        data_out => input_r_TDATA_int_regslice,
        vld_out => input_r_TVALID_int_regslice,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_data_V_U_apdone_blk);

    regslice_both_input_r_V_keep_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TKEEP,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_keep_V_U_ack_in,
        data_out => input_r_TKEEP_int_regslice,
        vld_out => regslice_both_input_r_V_keep_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_keep_V_U_apdone_blk);

    regslice_both_input_r_V_strb_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TSTRB,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_strb_V_U_ack_in,
        data_out => input_r_TSTRB_int_regslice,
        vld_out => regslice_both_input_r_V_strb_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_strb_V_U_apdone_blk);

    regslice_both_input_r_V_user_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TUSER,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_user_V_U_ack_in,
        data_out => input_r_TUSER_int_regslice,
        vld_out => regslice_both_input_r_V_user_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_user_V_U_apdone_blk);

    regslice_both_input_r_V_last_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TLAST,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_last_V_U_ack_in,
        data_out => input_r_TLAST_int_regslice,
        vld_out => regslice_both_input_r_V_last_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_last_V_U_apdone_blk);

    regslice_both_input_r_V_id_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TID,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_id_V_U_ack_in,
        data_out => input_r_TID_int_regslice,
        vld_out => regslice_both_input_r_V_id_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_id_V_U_apdone_blk);

    regslice_both_input_r_V_dest_V_U : component equalizer_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TDEST,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_V_dest_V_U_ack_in,
        data_out => input_r_TDEST_int_regslice,
        vld_out => regslice_both_input_r_V_dest_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_reg_272 <= grp_fu_144_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                coef_2_reg_278 <= coef_2_fu_228_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_dest_V_reg_262 <= input_r_TDEST_int_regslice;
                tmp_id_V_reg_257 <= input_r_TID_int_regslice;
                tmp_keep_V_reg_237 <= input_r_TKEEP_int_regslice;
                tmp_last_V_reg_252 <= input_r_TLAST_int_regslice;
                tmp_strb_V_reg_242 <= input_r_TSTRB_int_regslice;
                tmp_user_V_reg_247 <= input_r_TUSER_int_regslice;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state8, ap_CS_fsm_state9, tmp_last_V_reg_252, ap_CS_fsm_state10, ap_CS_fsm_state2, ap_block_state9_io, regslice_both_output_r_V_data_V_U_apdone_blk, output_r_TREADY_int_regslice, input_r_TVALID_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((input_r_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((output_r_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if ((not(((ap_const_boolean_1 = ap_block_state9_io) or (output_r_TREADY_int_regslice = ap_const_logic_0) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (tmp_last_V_reg_252 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_last_V_reg_252 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((ap_const_boolean_1 = ap_block_state9_io) or (output_r_TREADY_int_regslice = ap_const_logic_0) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (tmp_last_V_reg_252 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_last_V_reg_252 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if ((not(((output_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_output_r_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    and_ln40_fu_222_p2 <= (or_ln40_fu_216_p2 and grp_fu_149_p2);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(regslice_both_output_r_V_data_V_U_apdone_blk, output_r_TREADY_int_regslice)
    begin
        if (((output_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_output_r_V_data_V_U_apdone_blk = ap_const_logic_1))) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state1_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(input_r_TVALID_int_regslice)
    begin
        if ((input_r_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(output_r_TREADY_int_regslice)
    begin
        if ((output_r_TREADY_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state9_blk_assign_proc : process(tmp_last_V_reg_252, ap_block_state9_io, output_r_TREADY_int_regslice)
    begin
        if (((ap_const_boolean_1 = ap_block_state9_io) or (output_r_TREADY_int_regslice = ap_const_logic_0) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (tmp_last_V_reg_252 = ap_const_lv1_1)))) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state10_assign_proc : process(regslice_both_output_r_V_data_V_U_apdone_blk, output_r_TREADY_int_regslice)
    begin
                ap_block_state10 <= ((output_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_output_r_V_data_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_block_state9_assign_proc : process(tmp_last_V_reg_252, output_r_TREADY_int_regslice)
    begin
                ap_block_state9 <= ((output_r_TREADY_int_regslice = ap_const_logic_0) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (tmp_last_V_reg_252 = ap_const_lv1_1)));
    end process;


    ap_block_state9_io_assign_proc : process(tmp_last_V_reg_252, output_r_TREADY_int_regslice)
    begin
                ap_block_state9_io <= ((output_r_TREADY_int_regslice = ap_const_logic_0) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (tmp_last_V_reg_252 = ap_const_lv1_1)));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    coef_2_fu_228_p3 <= 
        ap_const_lv32_40800000 when (and_ln40_fu_222_p2(0) = '1') else 
        coef_fu_187_p1;
    coef_fu_187_p1 <= add_reg_272;

    grp_fu_144_ce_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, input_r_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((input_r_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            grp_fu_144_ce <= ap_const_logic_1;
        else 
            grp_fu_144_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_144_p0 <= input_r_TDATA_int_regslice;

    grp_fu_149_ce_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state7, output_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((output_r_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            grp_fu_149_ce <= ap_const_logic_1;
        else 
            grp_fu_149_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln40_1_fu_210_p2 <= "1" when (trunc_ln40_fu_200_p1 = ap_const_lv23_0) else "0";
    icmp_ln40_fu_204_p2 <= "0" when (tmp_fu_190_p4 = ap_const_lv8_FF) else "1";

    input_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, input_r_TVALID_int_regslice)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_r_TDATA_blk_n <= input_r_TVALID_int_regslice;
        else 
            input_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input_r_TREADY <= regslice_both_input_r_V_data_V_U_ack_in;

    input_r_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state2, input_r_TVALID_int_regslice)
    begin
        if (((input_r_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            input_r_TREADY_int_regslice <= ap_const_logic_1;
        else 
            input_r_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_ARVALID <= ap_const_logic_0;
    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;
    m_axi_gmem_RREADY <= ap_const_logic_0;
    m_axi_gmem_WDATA <= ap_const_lv32_0;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    or_ln40_fu_216_p2 <= (icmp_ln40_fu_204_p2 or icmp_ln40_1_fu_210_p2);

    output_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, tmp_last_V_reg_252, ap_CS_fsm_state10, output_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_last_V_reg_252 = ap_const_lv1_1)))) then 
            output_r_TDATA_blk_n <= output_r_TREADY_int_regslice;
        else 
            output_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    output_r_TDATA_int_regslice_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, tmp_last_V_reg_252, coef_2_fu_228_p3, coef_2_reg_278, output_r_TREADY_int_regslice)
    begin
        if ((not(((output_r_TREADY_int_regslice = ap_const_logic_0) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (tmp_last_V_reg_252 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_last_V_reg_252 = ap_const_lv1_1))) then 
            output_r_TDATA_int_regslice <= coef_2_reg_278;
        elsif (((output_r_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            output_r_TDATA_int_regslice <= coef_2_fu_228_p3;
        else 
            output_r_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_TLAST_int_regslice_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, tmp_last_V_reg_252, output_r_TREADY_int_regslice)
    begin
        if ((not(((output_r_TREADY_int_regslice = ap_const_logic_0) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (tmp_last_V_reg_252 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_last_V_reg_252 = ap_const_lv1_1))) then 
            output_r_TLAST_int_regslice <= ap_const_lv1_1;
        elsif (((output_r_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            output_r_TLAST_int_regslice <= tmp_last_V_reg_252;
        else 
            output_r_TLAST_int_regslice <= "X";
        end if; 
    end process;

    output_r_TVALID <= regslice_both_output_r_V_data_V_U_vld_out;

    output_r_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, tmp_last_V_reg_252, ap_block_state9_io, output_r_TREADY_int_regslice)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state9_io) or (output_r_TREADY_int_regslice = ap_const_logic_0) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (tmp_last_V_reg_252 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_last_V_reg_252 = ap_const_lv1_1)) or ((output_r_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            output_r_TVALID_int_regslice <= ap_const_logic_1;
        else 
            output_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_190_p4 <= coef_fu_187_p1(30 downto 23);
    trunc_ln40_fu_200_p1 <= coef_fu_187_p1(23 - 1 downto 0);
end behav;
