

================================================================
== Vitis HLS Report for 'equalizer'
================================================================
* Date:           Mon Apr 22 19:17:45 2024

* Version:        2022.1 (Build 3526262 on Mon Apr 18 15:48:16 MDT 2022)
* Project:        equalizer
* Solution:       solution1 (Vivado IP Flow Target)
* Product family: zynq
* Target device:  xc7z020-clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  7.300 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |        ?|        ?|         ?|         ?|    ?|    ?|       no|
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+---------+---------+----------+-----------+-----------+------+----------+
        |          |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name|   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +----------+---------+---------+----------+-----------+-----------+------+----------+
        |- Run     |        ?|        ?|        52|         44|          1|     ?|       yes|
        +----------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 44, depth = 52


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 54
* Pipeline : 1
  Pipeline-0 : II = 44, D = 52, States = { 2 48 49 50 51 52 53 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 48 
3 --> 4 
4 --> 5 
5 --> 6 
6 --> 7 
7 --> 8 
8 --> 9 
9 --> 10 
10 --> 11 
11 --> 12 
12 --> 13 
13 --> 14 
14 --> 15 
15 --> 16 
16 --> 17 
17 --> 18 
18 --> 19 
19 --> 20 
20 --> 21 
21 --> 22 
22 --> 23 
23 --> 24 
24 --> 25 
25 --> 26 
26 --> 27 
27 --> 28 
28 --> 29 
29 --> 30 
30 --> 31 
31 --> 32 
32 --> 33 
33 --> 34 
34 --> 35 
35 --> 36 
36 --> 37 
37 --> 38 
38 --> 39 
39 --> 40 
40 --> 41 
41 --> 42 
42 --> 43 
43 --> 44 
44 --> 45 
45 --> 46 
46 --> 47 
47 --> 54 2 
48 --> 49 
49 --> 50 
50 --> 51 
51 --> 52 
52 --> 53 
53 --> 3 
54 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 2.06>
ST_1 : Operation 55 [1/1] (0.00ns)   --->   "%state = alloca i32 1"   --->   Operation 55 'alloca' 'state' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 56 [1/1] (0.00ns)   --->   "%i = alloca i32 1"   --->   Operation 56 'alloca' 'i' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 57 [1/1] (0.00ns)   --->   "%spectopmodule_ln3 = spectopmodule void @_ssdm_op_SpecTopModule, void @empty_3" [equalizer.cpp:3]   --->   Operation 57 'spectopmodule' 'spectopmodule_ln3' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 58 [1/1] (0.00ns)   --->   "%specinterface_ln3 = specinterface void @_ssdm_op_SpecInterface, i32 0, void @empty_4, i32 0, i32 0, void @empty_7, i32 0, i32 0, void @empty_7, void @empty_7, void @empty_7, i32 0, i32 0, i32 0, i32 0, void @empty_7, void @empty_7, i32 4294967295, i32 0" [equalizer.cpp:3]   --->   Operation 58 'specinterface' 'specinterface_ln3' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 59 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i32 %gmem, void @empty_6, i32 0, i32 0, void @empty_7, i32 0, i32 99, void @empty_8, void @empty_10, void @empty_7, i32 16, i32 16, i32 16, i32 16, void @empty_7, void @empty_7, i32 4294967295, i32 0"   --->   Operation 59 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 60 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i32 %gmem"   --->   Operation 60 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 61 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i32 %output_r_V_data_V, i4 %output_r_V_keep_V, i4 %output_r_V_strb_V, i1 %output_r_V_user_V, i1 %output_r_V_last_V, i1 %output_r_V_id_V, i1 %output_r_V_dest_V, void @empty_11, i32 1, i32 1, void @empty_12, i32 0, i32 0, void @empty_7, void @empty_7, void @empty_7, i32 0, i32 0, i32 0, i32 0, void @empty_7, void @empty_7, i32 4294967295, i32 0"   --->   Operation 61 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 62 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i32 %output_r_V_data_V"   --->   Operation 62 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 63 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i4 %output_r_V_keep_V"   --->   Operation 63 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 64 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i4 %output_r_V_strb_V"   --->   Operation 64 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 65 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %output_r_V_user_V"   --->   Operation 65 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 66 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %output_r_V_last_V"   --->   Operation 66 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 67 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %output_r_V_id_V"   --->   Operation 67 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 68 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %output_r_V_dest_V"   --->   Operation 68 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 69 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i64 %coefs, void @empty, i32 0, i32 0, void @empty_7, i32 0, i32 0, void @empty_0, void @empty_1, void @empty_7, i32 0, i32 0, i32 0, i32 0, void @empty_7, void @empty_9, i32 4294967295, i32 0"   --->   Operation 69 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 70 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i64 %coefs, void @empty_2, i32 0, i32 0, void @empty_7, i32 0, i32 0, void @empty_7, void @empty_7, void @empty_7, i32 0, i32 0, i32 0, i32 0, void @empty_7, void @empty_9, i32 4294967295, i32 0"   --->   Operation 70 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 71 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V, void @empty_11, i32 1, i32 1, void @empty_12, i32 0, i32 0, void @empty_7, void @empty_7, void @empty_7, i32 0, i32 0, i32 0, i32 0, void @empty_7, void @empty_7, i32 4294967295, i32 0"   --->   Operation 71 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 72 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i32 %input_r_V_data_V"   --->   Operation 72 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 73 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i4 %input_r_V_keep_V"   --->   Operation 73 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 74 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i4 %input_r_V_strb_V"   --->   Operation 74 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 75 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %input_r_V_user_V"   --->   Operation 75 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 76 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %input_r_V_last_V"   --->   Operation 76 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 77 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %input_r_V_id_V"   --->   Operation 77 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 78 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %input_r_V_dest_V"   --->   Operation 78 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 79 [1/1] (1.00ns)   --->   "%coefs_read = read i64 @_ssdm_op_Read.s_axilite.i64, i64 %coefs"   --->   Operation 79 'read' 'coefs_read' <Predicate = true> <Delay = 1.00> <CoreInst = "s_axilite">   --->   Core 114 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_1 : Operation 80 [1/1] (0.00ns)   --->   "%trunc_ln = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %coefs_read, i32 2, i32 63" [equalizer.cpp:86]   --->   Operation 80 'partselect' 'trunc_ln' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 81 [1/1] (0.00ns)   --->   "%sext_ln86 = sext i62 %trunc_ln" [equalizer.cpp:86]   --->   Operation 81 'sext' 'sext_ln86' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 82 [1/1] (0.00ns)   --->   "%gmem_addr = getelementptr i32 %gmem, i64 %sext_ln86" [equalizer.cpp:86]   --->   Operation 82 'getelementptr' 'gmem_addr' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 83 [1/1] (2.06ns)   --->   "%store_ln28 = store i32 0, i32 %i" [equalizer.cpp:28]   --->   Operation 83 'store' 'store_ln28' <Predicate = true> <Delay = 2.06>
ST_1 : Operation 84 [1/1] (1.58ns)   --->   "%store_ln28 = store i32 0, i32 %state" [equalizer.cpp:28]   --->   Operation 84 'store' 'store_ln28' <Predicate = true> <Delay = 1.58>
ST_1 : Operation 85 [1/1] (0.00ns)   --->   "%br_ln28 = br void %while.body" [equalizer.cpp:28]   --->   Operation 85 'br' 'br_ln28' <Predicate = true> <Delay = 0.00>

State 2 <SV = 1> <Delay = 4.06>
ST_2 : Operation 86 [1/1] (0.00ns)   --->   "%state_2 = load i32 %state"   --->   Operation 86 'load' 'state_2' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 87 [1/1] (0.00ns)   --->   "%specpipeline_ln0 = specpipeline void @_ssdm_op_SpecPipeline, i32 4294967295, i32 0, i32 1, i32 0, void @p_str"   --->   Operation 87 'specpipeline' 'specpipeline_ln0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 88 [1/1] (0.00ns)   --->   "%specloopname_ln25 = specloopname void @_ssdm_op_SpecLoopName, void @empty_5" [equalizer.cpp:25]   --->   Operation 88 'specloopname' 'specloopname_ln25' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 89 [1/1] (0.00ns)   --->   "%empty = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 89 'read' 'empty' <Predicate = true> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_2 : Operation 90 [1/1] (0.00ns)   --->   "%tmp_data_V = extractvalue i44 %empty"   --->   Operation 90 'extractvalue' 'tmp_data_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 91 [1/1] (0.00ns)   --->   "%tmp_keep_V = extractvalue i44 %empty"   --->   Operation 91 'extractvalue' 'tmp_keep_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 92 [1/1] (0.00ns)   --->   "%tmp_strb_V = extractvalue i44 %empty"   --->   Operation 92 'extractvalue' 'tmp_strb_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 93 [1/1] (0.00ns)   --->   "%tmp_user_V = extractvalue i44 %empty"   --->   Operation 93 'extractvalue' 'tmp_user_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 94 [1/1] (0.00ns)   --->   "%tmp_last_V = extractvalue i44 %empty"   --->   Operation 94 'extractvalue' 'tmp_last_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 95 [1/1] (0.00ns)   --->   "%tmp_id_V = extractvalue i44 %empty"   --->   Operation 95 'extractvalue' 'tmp_id_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 96 [1/1] (0.00ns)   --->   "%tmp_dest_V = extractvalue i44 %empty"   --->   Operation 96 'extractvalue' 'tmp_dest_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 97 [1/1] (1.70ns)   --->   "%switch_ln31 = switch i32 %state_2, void %sw.epilog, i32 0, void %sw.bb, i32 17, void %for.body.split.0, i32 4096, void %for.inc28" [equalizer.cpp:31]   --->   Operation 97 'switch' 'switch_ln31' <Predicate = true> <Delay = 1.70>
ST_2 : Operation 98 [1/1] (2.06ns)   --->   "%store_ln108 = store i32 1, i32 %i" [equalizer.cpp:108]   --->   Operation 98 'store' 'store_ln108' <Predicate = (state_2 == 4096 & !tmp_last_V)> <Delay = 2.06>
ST_2 : Operation 99 [1/1] (1.70ns)   --->   "%br_ln108 = br void %if.end49" [equalizer.cpp:108]   --->   Operation 99 'br' 'br_ln108' <Predicate = (state_2 == 4096 & !tmp_last_V)> <Delay = 1.70>
ST_2 : Operation 100 [1/1] (0.00ns)   --->   "%i_load_1 = load i32 %i" [equalizer.cpp:63]   --->   Operation 100 'load' 'i_load_1' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_2 : Operation 101 [1/1] (2.47ns)   --->   "%icmp_ln63 = icmp_eq  i32 %tmp_data_V, i32 43962" [equalizer.cpp:63]   --->   Operation 101 'icmp' 'icmp_ln63' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 102 [1/1] (0.69ns)   --->   "%select_ln63 = select i1 %icmp_ln63, i32 0, i32 %i_load_1" [equalizer.cpp:63]   --->   Operation 102 'select' 'select_ln63' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 103 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %icmp_ln63, void %if.then10.0, void %for.body.split.1" [equalizer.cpp:68]   --->   Operation 103 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>

State 3 <SV = 8> <Delay = 7.30>
ST_3 : Operation 104 [7/7] (7.30ns)   --->   "%empty_18 = readreq i1 @_ssdm_op_ReadReq.m_axi.p1i32, i32 %gmem_addr, i32 33" [equalizer.cpp:86]   --->   Operation 104 'readreq' 'empty_18' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_3 : Operation 105 [1/1] (0.00ns)   --->   "%br_ln108 = br i1 %tmp_last_V, void %for.inc28.if.end49_crit_edge, void %while.end" [equalizer.cpp:108]   --->   Operation 105 'br' 'br_ln108' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_3 : Operation 106 [2/5] (7.30ns)   --->   "%gmem_addr_1_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_1" [equalizer.cpp:69]   --->   Operation 106 'writeresp' 'gmem_addr_1_resp' <Predicate = (state_2 == 17 & !icmp_ln63)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_3 : Operation 107 [3/5] (7.30ns)   --->   "%gmem_addr_2_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_2" [equalizer.cpp:69]   --->   Operation 107 'writeresp' 'gmem_addr_2_resp' <Predicate = (state_2 == 17 & !or_ln63)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_3 : Operation 108 [4/5] (7.30ns)   --->   "%gmem_addr_3_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_3" [equalizer.cpp:69]   --->   Operation 108 'writeresp' 'gmem_addr_3_resp' <Predicate = (state_2 == 17 & !or_ln63_1)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_3 : Operation 109 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_4, i32 %tmp_data_V_4_2, i4 15" [equalizer.cpp:69]   --->   Operation 109 'write' 'write_ln69' <Predicate = (state_2 == 17 & !or_ln63_2)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_3 : Operation 110 [1/1] (7.30ns)   --->   "%gmem_addr_5_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_5, i32 1" [equalizer.cpp:69]   --->   Operation 110 'writereq' 'gmem_addr_5_req' <Predicate = (state_2 == 17 & !or_ln63_3)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_3 : Operation 111 [1/1] (0.00ns)   --->   "%tmp_last_V_4_4 = phi i1 %input_r_V_last_V_val4, void %if.then10.4, i1 %tmp_last_V_4_3, void %for.body.split.4"   --->   Operation 111 'phi' 'tmp_last_V_4_4' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_3 : Operation 112 [1/1] (0.00ns)   --->   "%tmp_data_V_4_4 = phi i32 %input_r_V_data_V_val4, void %if.then10.4, i32 %tmp_data_V_4_3, void %for.body.split.4"   --->   Operation 112 'phi' 'tmp_data_V_4_4' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_3 : Operation 113 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_5)   --->   "%i_4_4 = phi i32 %add_ln72_4, void %if.then10.4, i32 %select_ln63_4, void %for.body.split.4" [equalizer.cpp:72]   --->   Operation 113 'phi' 'i_4_4' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_3 : Operation 114 [1/1] (2.47ns)   --->   "%icmp_ln63_5 = icmp_eq  i32 %tmp_data_V_4_4, i32 43962" [equalizer.cpp:63]   --->   Operation 114 'icmp' 'icmp_ln63_5' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 115 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_5 = select i1 %icmp_ln63_5, i32 0, i32 %i_4_4" [equalizer.cpp:63]   --->   Operation 115 'select' 'select_ln63_5' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 116 [1/1] (0.97ns)   --->   "%or_ln63_4 = or i1 %icmp_ln63_5, i1 %or_ln63_3" [equalizer.cpp:63]   --->   Operation 116 'or' 'or_ln63_4' <Predicate = (state_2 == 17)> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 117 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %or_ln63_4, void %if.then10.5, void %for.body.split.6" [equalizer.cpp:68]   --->   Operation 117 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_3 : Operation 118 [1/1] (0.00ns)   --->   "%shl_ln69_5 = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_5, i2 0" [equalizer.cpp:69]   --->   Operation 118 'bitconcatenate' 'shl_ln69_5' <Predicate = (state_2 == 17 & !or_ln63_4)> <Delay = 0.00>
ST_3 : Operation 119 [1/1] (0.00ns)   --->   "%sext_ln69_10 = sext i34 %shl_ln69_5" [equalizer.cpp:69]   --->   Operation 119 'sext' 'sext_ln69_10' <Predicate = (state_2 == 17 & !or_ln63_4)> <Delay = 0.00>
ST_3 : Operation 120 [1/1] (3.52ns)   --->   "%add_ln69_5 = add i64 %sext_ln69_10, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 120 'add' 'add_ln69_5' <Predicate = (state_2 == 17 & !or_ln63_4)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 121 [1/1] (0.00ns)   --->   "%trunc_ln69_5 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_5, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 121 'partselect' 'trunc_ln69_5' <Predicate = (state_2 == 17 & !or_ln63_4)> <Delay = 0.00>
ST_3 : Operation 122 [1/1] (0.00ns)   --->   "%sext_ln69_11 = sext i62 %trunc_ln69_5" [equalizer.cpp:69]   --->   Operation 122 'sext' 'sext_ln69_11' <Predicate = (state_2 == 17 & !or_ln63_4)> <Delay = 0.00>
ST_3 : Operation 123 [1/1] (0.00ns)   --->   "%gmem_addr_6 = getelementptr i32 %gmem, i64 %sext_ln69_11" [equalizer.cpp:69]   --->   Operation 123 'getelementptr' 'gmem_addr_6' <Predicate = (state_2 == 17 & !or_ln63_4)> <Delay = 0.00>
ST_3 : Operation 124 [1/1] (2.55ns)   --->   "%add_ln72_5 = add i32 %select_ln63_5, i32 1" [equalizer.cpp:72]   --->   Operation 124 'add' 'add_ln72_5' <Predicate = (state_2 == 17 & !or_ln63_4)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 4 <SV = 9> <Delay = 7.30>
ST_4 : Operation 125 [6/7] (7.30ns)   --->   "%empty_18 = readreq i1 @_ssdm_op_ReadReq.m_axi.p1i32, i32 %gmem_addr, i32 33" [equalizer.cpp:86]   --->   Operation 125 'readreq' 'empty_18' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_4 : Operation 126 [1/5] (7.30ns)   --->   "%gmem_addr_1_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_1" [equalizer.cpp:69]   --->   Operation 126 'writeresp' 'gmem_addr_1_resp' <Predicate = (state_2 == 17 & !icmp_ln63)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_4 : Operation 127 [2/5] (7.30ns)   --->   "%gmem_addr_2_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_2" [equalizer.cpp:69]   --->   Operation 127 'writeresp' 'gmem_addr_2_resp' <Predicate = (state_2 == 17 & !or_ln63)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_4 : Operation 128 [3/5] (7.30ns)   --->   "%gmem_addr_3_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_3" [equalizer.cpp:69]   --->   Operation 128 'writeresp' 'gmem_addr_3_resp' <Predicate = (state_2 == 17 & !or_ln63_1)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_4 : Operation 129 [5/5] (7.30ns)   --->   "%gmem_addr_4_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_4" [equalizer.cpp:69]   --->   Operation 129 'writeresp' 'gmem_addr_4_resp' <Predicate = (state_2 == 17 & !or_ln63_2)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_4 : Operation 130 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_5, i32 %tmp_data_V_4_3, i4 15" [equalizer.cpp:69]   --->   Operation 130 'write' 'write_ln69' <Predicate = (state_2 == 17 & !or_ln63_3)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_4 : Operation 131 [1/1] (7.30ns)   --->   "%gmem_addr_6_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_6, i32 1" [equalizer.cpp:69]   --->   Operation 131 'writereq' 'gmem_addr_6_req' <Predicate = (state_2 == 17 & !or_ln63_4)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_4 : Operation 132 [1/1] (0.00ns)   --->   "%empty_24 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 132 'read' 'empty_24' <Predicate = (state_2 == 17 & !or_ln63_4)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_4 : Operation 133 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val5 = extractvalue i44 %empty_24"   --->   Operation 133 'extractvalue' 'input_r_V_data_V_val5' <Predicate = (state_2 == 17 & !or_ln63_4)> <Delay = 0.00>
ST_4 : Operation 134 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val5 = extractvalue i44 %empty_24"   --->   Operation 134 'extractvalue' 'input_r_V_last_V_val5' <Predicate = (state_2 == 17 & !or_ln63_4)> <Delay = 0.00>
ST_4 : Operation 135 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.6" [equalizer.cpp:73]   --->   Operation 135 'br' 'br_ln73' <Predicate = (state_2 == 17 & !or_ln63_4)> <Delay = 1.58>
ST_4 : Operation 136 [1/1] (0.00ns)   --->   "%tmp_data_V_4_5 = phi i32 %input_r_V_data_V_val5, void %if.then10.5, i32 %tmp_data_V_4_4, void %for.body.split.5"   --->   Operation 136 'phi' 'tmp_data_V_4_5' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_4 : Operation 137 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_6)   --->   "%i_4_5 = phi i32 %add_ln72_5, void %if.then10.5, i32 %select_ln63_5, void %for.body.split.5" [equalizer.cpp:72]   --->   Operation 137 'phi' 'i_4_5' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_4 : Operation 138 [1/1] (2.47ns)   --->   "%icmp_ln63_6 = icmp_eq  i32 %tmp_data_V_4_5, i32 43962" [equalizer.cpp:63]   --->   Operation 138 'icmp' 'icmp_ln63_6' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 139 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_6 = select i1 %icmp_ln63_6, i32 0, i32 %i_4_5" [equalizer.cpp:63]   --->   Operation 139 'select' 'select_ln63_6' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : Operation 140 [1/1] (0.97ns)   --->   "%or_ln63_5 = or i1 %icmp_ln63_6, i1 %or_ln63_4" [equalizer.cpp:63]   --->   Operation 140 'or' 'or_ln63_5' <Predicate = (state_2 == 17)> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>

State 5 <SV = 10> <Delay = 7.30>
ST_5 : Operation 141 [5/7] (7.30ns)   --->   "%empty_18 = readreq i1 @_ssdm_op_ReadReq.m_axi.p1i32, i32 %gmem_addr, i32 33" [equalizer.cpp:86]   --->   Operation 141 'readreq' 'empty_18' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_5 : Operation 142 [1/5] (7.30ns)   --->   "%gmem_addr_2_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_2" [equalizer.cpp:69]   --->   Operation 142 'writeresp' 'gmem_addr_2_resp' <Predicate = (state_2 == 17 & !or_ln63)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_5 : Operation 143 [2/5] (7.30ns)   --->   "%gmem_addr_3_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_3" [equalizer.cpp:69]   --->   Operation 143 'writeresp' 'gmem_addr_3_resp' <Predicate = (state_2 == 17 & !or_ln63_1)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_5 : Operation 144 [4/5] (7.30ns)   --->   "%gmem_addr_4_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_4" [equalizer.cpp:69]   --->   Operation 144 'writeresp' 'gmem_addr_4_resp' <Predicate = (state_2 == 17 & !or_ln63_2)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_5 : Operation 145 [5/5] (7.30ns)   --->   "%gmem_addr_5_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_5" [equalizer.cpp:69]   --->   Operation 145 'writeresp' 'gmem_addr_5_resp' <Predicate = (state_2 == 17 & !or_ln63_3)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_5 : Operation 146 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_6, i32 %tmp_data_V_4_4, i4 15" [equalizer.cpp:69]   --->   Operation 146 'write' 'write_ln69' <Predicate = (state_2 == 17 & !or_ln63_4)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_5 : Operation 147 [1/1] (0.00ns)   --->   "%tmp_last_V_4_5 = phi i1 %input_r_V_last_V_val5, void %if.then10.5, i1 %tmp_last_V_4_4, void %for.body.split.5"   --->   Operation 147 'phi' 'tmp_last_V_4_5' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_5 : Operation 148 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %or_ln63_5, void %if.then10.6, void %for.body.split.7" [equalizer.cpp:68]   --->   Operation 148 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_5 : Operation 149 [1/1] (0.00ns)   --->   "%shl_ln69_6 = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_6, i2 0" [equalizer.cpp:69]   --->   Operation 149 'bitconcatenate' 'shl_ln69_6' <Predicate = (state_2 == 17 & !or_ln63_5)> <Delay = 0.00>
ST_5 : Operation 150 [1/1] (0.00ns)   --->   "%sext_ln69_12 = sext i34 %shl_ln69_6" [equalizer.cpp:69]   --->   Operation 150 'sext' 'sext_ln69_12' <Predicate = (state_2 == 17 & !or_ln63_5)> <Delay = 0.00>
ST_5 : Operation 151 [1/1] (3.52ns)   --->   "%add_ln69_6 = add i64 %sext_ln69_12, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 151 'add' 'add_ln69_6' <Predicate = (state_2 == 17 & !or_ln63_5)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 152 [1/1] (0.00ns)   --->   "%trunc_ln69_6 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_6, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 152 'partselect' 'trunc_ln69_6' <Predicate = (state_2 == 17 & !or_ln63_5)> <Delay = 0.00>
ST_5 : Operation 153 [1/1] (0.00ns)   --->   "%sext_ln69_13 = sext i62 %trunc_ln69_6" [equalizer.cpp:69]   --->   Operation 153 'sext' 'sext_ln69_13' <Predicate = (state_2 == 17 & !or_ln63_5)> <Delay = 0.00>
ST_5 : Operation 154 [1/1] (0.00ns)   --->   "%gmem_addr_7 = getelementptr i32 %gmem, i64 %sext_ln69_13" [equalizer.cpp:69]   --->   Operation 154 'getelementptr' 'gmem_addr_7' <Predicate = (state_2 == 17 & !or_ln63_5)> <Delay = 0.00>
ST_5 : Operation 155 [1/1] (0.00ns)   --->   "%empty_25 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 155 'read' 'empty_25' <Predicate = (state_2 == 17 & !or_ln63_5)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_5 : Operation 156 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val6 = extractvalue i44 %empty_25"   --->   Operation 156 'extractvalue' 'input_r_V_data_V_val6' <Predicate = (state_2 == 17 & !or_ln63_5)> <Delay = 0.00>
ST_5 : Operation 157 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val6 = extractvalue i44 %empty_25"   --->   Operation 157 'extractvalue' 'input_r_V_last_V_val6' <Predicate = (state_2 == 17 & !or_ln63_5)> <Delay = 0.00>
ST_5 : Operation 158 [1/1] (2.55ns)   --->   "%add_ln72_6 = add i32 %select_ln63_6, i32 1" [equalizer.cpp:72]   --->   Operation 158 'add' 'add_ln72_6' <Predicate = (state_2 == 17 & !or_ln63_5)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 159 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.7" [equalizer.cpp:73]   --->   Operation 159 'br' 'br_ln73' <Predicate = (state_2 == 17 & !or_ln63_5)> <Delay = 1.58>
ST_5 : Operation 160 [1/1] (0.00ns)   --->   "%tmp_data_V_4_6 = phi i32 %input_r_V_data_V_val6, void %if.then10.6, i32 %tmp_data_V_4_5, void %for.body.split.6"   --->   Operation 160 'phi' 'tmp_data_V_4_6' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_5 : Operation 161 [1/1] (2.47ns)   --->   "%icmp_ln63_7 = icmp_eq  i32 %tmp_data_V_4_6, i32 43962" [equalizer.cpp:63]   --->   Operation 161 'icmp' 'icmp_ln63_7' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>

State 6 <SV = 11> <Delay = 7.30>
ST_6 : Operation 162 [4/7] (7.30ns)   --->   "%empty_18 = readreq i1 @_ssdm_op_ReadReq.m_axi.p1i32, i32 %gmem_addr, i32 33" [equalizer.cpp:86]   --->   Operation 162 'readreq' 'empty_18' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_6 : Operation 163 [1/5] (7.30ns)   --->   "%gmem_addr_3_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_3" [equalizer.cpp:69]   --->   Operation 163 'writeresp' 'gmem_addr_3_resp' <Predicate = (state_2 == 17 & !or_ln63_1)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_6 : Operation 164 [3/5] (7.30ns)   --->   "%gmem_addr_4_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_4" [equalizer.cpp:69]   --->   Operation 164 'writeresp' 'gmem_addr_4_resp' <Predicate = (state_2 == 17 & !or_ln63_2)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_6 : Operation 165 [4/5] (7.30ns)   --->   "%gmem_addr_5_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_5" [equalizer.cpp:69]   --->   Operation 165 'writeresp' 'gmem_addr_5_resp' <Predicate = (state_2 == 17 & !or_ln63_3)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_6 : Operation 166 [5/5] (7.30ns)   --->   "%gmem_addr_6_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_6" [equalizer.cpp:69]   --->   Operation 166 'writeresp' 'gmem_addr_6_resp' <Predicate = (state_2 == 17 & !or_ln63_4)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_6 : Operation 167 [1/1] (7.30ns)   --->   "%gmem_addr_7_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_7, i32 1" [equalizer.cpp:69]   --->   Operation 167 'writereq' 'gmem_addr_7_req' <Predicate = (state_2 == 17 & !or_ln63_5)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_6 : Operation 168 [1/1] (0.00ns)   --->   "%tmp_last_V_4_6 = phi i1 %input_r_V_last_V_val6, void %if.then10.6, i1 %tmp_last_V_4_5, void %for.body.split.6"   --->   Operation 168 'phi' 'tmp_last_V_4_6' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_6 : Operation 169 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_7)   --->   "%i_4_6 = phi i32 %add_ln72_6, void %if.then10.6, i32 %select_ln63_6, void %for.body.split.6" [equalizer.cpp:72]   --->   Operation 169 'phi' 'i_4_6' <Predicate = (state_2 == 17 & !icmp_ln63_7)> <Delay = 0.00>
ST_6 : Operation 170 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_7 = select i1 %icmp_ln63_7, i32 0, i32 %i_4_6" [equalizer.cpp:63]   --->   Operation 170 'select' 'select_ln63_7' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_6 : Operation 171 [1/1] (0.97ns)   --->   "%or_ln63_6 = or i1 %icmp_ln63_7, i1 %or_ln63_5" [equalizer.cpp:63]   --->   Operation 171 'or' 'or_ln63_6' <Predicate = (state_2 == 17)> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 172 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %or_ln63_6, void %if.then10.7, void %for.body.split.8" [equalizer.cpp:68]   --->   Operation 172 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_6 : Operation 173 [1/1] (0.00ns)   --->   "%shl_ln69_7 = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_7, i2 0" [equalizer.cpp:69]   --->   Operation 173 'bitconcatenate' 'shl_ln69_7' <Predicate = (state_2 == 17 & !or_ln63_6)> <Delay = 0.00>
ST_6 : Operation 174 [1/1] (0.00ns)   --->   "%sext_ln69_14 = sext i34 %shl_ln69_7" [equalizer.cpp:69]   --->   Operation 174 'sext' 'sext_ln69_14' <Predicate = (state_2 == 17 & !or_ln63_6)> <Delay = 0.00>
ST_6 : Operation 175 [1/1] (3.52ns)   --->   "%add_ln69_7 = add i64 %sext_ln69_14, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 175 'add' 'add_ln69_7' <Predicate = (state_2 == 17 & !or_ln63_6)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 176 [1/1] (0.00ns)   --->   "%trunc_ln69_7 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_7, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 176 'partselect' 'trunc_ln69_7' <Predicate = (state_2 == 17 & !or_ln63_6)> <Delay = 0.00>
ST_6 : Operation 177 [1/1] (0.00ns)   --->   "%sext_ln69_15 = sext i62 %trunc_ln69_7" [equalizer.cpp:69]   --->   Operation 177 'sext' 'sext_ln69_15' <Predicate = (state_2 == 17 & !or_ln63_6)> <Delay = 0.00>
ST_6 : Operation 178 [1/1] (0.00ns)   --->   "%gmem_addr_8 = getelementptr i32 %gmem, i64 %sext_ln69_15" [equalizer.cpp:69]   --->   Operation 178 'getelementptr' 'gmem_addr_8' <Predicate = (state_2 == 17 & !or_ln63_6)> <Delay = 0.00>
ST_6 : Operation 179 [1/1] (0.00ns)   --->   "%empty_26 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 179 'read' 'empty_26' <Predicate = (state_2 == 17 & !or_ln63_6)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_6 : Operation 180 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val7 = extractvalue i44 %empty_26"   --->   Operation 180 'extractvalue' 'input_r_V_data_V_val7' <Predicate = (state_2 == 17 & !or_ln63_6)> <Delay = 0.00>
ST_6 : Operation 181 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val7 = extractvalue i44 %empty_26"   --->   Operation 181 'extractvalue' 'input_r_V_last_V_val7' <Predicate = (state_2 == 17 & !or_ln63_6)> <Delay = 0.00>
ST_6 : Operation 182 [1/1] (2.55ns)   --->   "%add_ln72_7 = add i32 %select_ln63_7, i32 1" [equalizer.cpp:72]   --->   Operation 182 'add' 'add_ln72_7' <Predicate = (state_2 == 17 & !or_ln63_6)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 183 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.8" [equalizer.cpp:73]   --->   Operation 183 'br' 'br_ln73' <Predicate = (state_2 == 17 & !or_ln63_6)> <Delay = 1.58>

State 7 <SV = 12> <Delay = 7.30>
ST_7 : Operation 184 [3/7] (7.30ns)   --->   "%empty_18 = readreq i1 @_ssdm_op_ReadReq.m_axi.p1i32, i32 %gmem_addr, i32 33" [equalizer.cpp:86]   --->   Operation 184 'readreq' 'empty_18' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_7 : Operation 185 [2/5] (7.30ns)   --->   "%gmem_addr_4_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_4" [equalizer.cpp:69]   --->   Operation 185 'writeresp' 'gmem_addr_4_resp' <Predicate = (state_2 == 17 & !or_ln63_2)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_7 : Operation 186 [3/5] (7.30ns)   --->   "%gmem_addr_5_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_5" [equalizer.cpp:69]   --->   Operation 186 'writeresp' 'gmem_addr_5_resp' <Predicate = (state_2 == 17 & !or_ln63_3)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_7 : Operation 187 [4/5] (7.30ns)   --->   "%gmem_addr_6_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_6" [equalizer.cpp:69]   --->   Operation 187 'writeresp' 'gmem_addr_6_resp' <Predicate = (state_2 == 17 & !or_ln63_4)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_7 : Operation 188 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_7, i32 %tmp_data_V_4_5, i4 15" [equalizer.cpp:69]   --->   Operation 188 'write' 'write_ln69' <Predicate = (state_2 == 17 & !or_ln63_5)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_7 : Operation 189 [1/1] (7.30ns)   --->   "%gmem_addr_8_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_8, i32 1" [equalizer.cpp:69]   --->   Operation 189 'writereq' 'gmem_addr_8_req' <Predicate = (state_2 == 17 & !or_ln63_6)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_7 : Operation 190 [1/1] (0.00ns)   --->   "%tmp_last_V_4_7 = phi i1 %input_r_V_last_V_val7, void %if.then10.7, i1 %tmp_last_V_4_6, void %for.body.split.7"   --->   Operation 190 'phi' 'tmp_last_V_4_7' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_7 : Operation 191 [1/1] (0.00ns)   --->   "%tmp_data_V_4_7 = phi i32 %input_r_V_data_V_val7, void %if.then10.7, i32 %tmp_data_V_4_6, void %for.body.split.7"   --->   Operation 191 'phi' 'tmp_data_V_4_7' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_7 : Operation 192 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_8)   --->   "%i_4_7 = phi i32 %add_ln72_7, void %if.then10.7, i32 %select_ln63_7, void %for.body.split.7" [equalizer.cpp:72]   --->   Operation 192 'phi' 'i_4_7' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_7 : Operation 193 [1/1] (2.47ns)   --->   "%icmp_ln63_8 = icmp_eq  i32 %tmp_data_V_4_7, i32 43962" [equalizer.cpp:63]   --->   Operation 193 'icmp' 'icmp_ln63_8' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 194 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_8 = select i1 %icmp_ln63_8, i32 0, i32 %i_4_7" [equalizer.cpp:63]   --->   Operation 194 'select' 'select_ln63_8' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_7 : Operation 195 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_10)   --->   "%select_ln63_9 = select i1 %icmp_ln63_8, i13 4096, i13 4096" [equalizer.cpp:63]   --->   Operation 195 'select' 'select_ln63_9' <Predicate = (state_2 == 17)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_7 : Operation 196 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_10)   --->   "%or_ln63_7 = or i1 %icmp_ln63_8, i1 %or_ln63_6" [equalizer.cpp:63]   --->   Operation 196 'or' 'or_ln63_7' <Predicate = (state_2 == 17)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 197 [1/1] (0.97ns) (out node of the LUT)   --->   "%select_ln63_10 = select i1 %or_ln63_7, i13 %select_ln63_9, i13 17" [equalizer.cpp:63]   --->   Operation 197 'select' 'select_ln63_10' <Predicate = (state_2 == 17)> <Delay = 0.97> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_7 : Operation 198 [1/1] (2.09ns)   --->   "%icmp_ln68 = icmp_eq  i13 %select_ln63_10, i13 17" [equalizer.cpp:68]   --->   Operation 198 'icmp' 'icmp_ln68' <Predicate = (state_2 == 17)> <Delay = 2.09> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.09> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 199 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %icmp_ln68, void %for.body.split.9, void %if.then10.8" [equalizer.cpp:68]   --->   Operation 199 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_7 : Operation 200 [1/1] (0.00ns)   --->   "%shl_ln69_8 = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_8, i2 0" [equalizer.cpp:69]   --->   Operation 200 'bitconcatenate' 'shl_ln69_8' <Predicate = (state_2 == 17 & icmp_ln68)> <Delay = 0.00>
ST_7 : Operation 201 [1/1] (0.00ns)   --->   "%sext_ln69_16 = sext i34 %shl_ln69_8" [equalizer.cpp:69]   --->   Operation 201 'sext' 'sext_ln69_16' <Predicate = (state_2 == 17 & icmp_ln68)> <Delay = 0.00>
ST_7 : Operation 202 [1/1] (3.52ns)   --->   "%add_ln69_8 = add i64 %sext_ln69_16, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 202 'add' 'add_ln69_8' <Predicate = (state_2 == 17 & icmp_ln68)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 203 [1/1] (0.00ns)   --->   "%trunc_ln69_8 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_8, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 203 'partselect' 'trunc_ln69_8' <Predicate = (state_2 == 17 & icmp_ln68)> <Delay = 0.00>
ST_7 : Operation 204 [1/1] (0.00ns)   --->   "%sext_ln69_17 = sext i62 %trunc_ln69_8" [equalizer.cpp:69]   --->   Operation 204 'sext' 'sext_ln69_17' <Predicate = (state_2 == 17 & icmp_ln68)> <Delay = 0.00>
ST_7 : Operation 205 [1/1] (0.00ns)   --->   "%gmem_addr_9 = getelementptr i32 %gmem, i64 %sext_ln69_17" [equalizer.cpp:69]   --->   Operation 205 'getelementptr' 'gmem_addr_9' <Predicate = (state_2 == 17 & icmp_ln68)> <Delay = 0.00>
ST_7 : Operation 206 [1/1] (2.55ns)   --->   "%add_ln72_8 = add i32 %select_ln63_8, i32 1" [equalizer.cpp:72]   --->   Operation 206 'add' 'add_ln72_8' <Predicate = (state_2 == 17 & icmp_ln68)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 8 <SV = 13> <Delay = 7.30>
ST_8 : Operation 207 [2/7] (7.30ns)   --->   "%empty_18 = readreq i1 @_ssdm_op_ReadReq.m_axi.p1i32, i32 %gmem_addr, i32 33" [equalizer.cpp:86]   --->   Operation 207 'readreq' 'empty_18' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_8 : Operation 208 [1/5] (7.30ns)   --->   "%gmem_addr_4_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_4" [equalizer.cpp:69]   --->   Operation 208 'writeresp' 'gmem_addr_4_resp' <Predicate = (state_2 == 17 & !or_ln63_2)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_8 : Operation 209 [2/5] (7.30ns)   --->   "%gmem_addr_5_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_5" [equalizer.cpp:69]   --->   Operation 209 'writeresp' 'gmem_addr_5_resp' <Predicate = (state_2 == 17 & !or_ln63_3)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_8 : Operation 210 [3/5] (7.30ns)   --->   "%gmem_addr_6_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_6" [equalizer.cpp:69]   --->   Operation 210 'writeresp' 'gmem_addr_6_resp' <Predicate = (state_2 == 17 & !or_ln63_4)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_8 : Operation 211 [5/5] (7.30ns)   --->   "%gmem_addr_7_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_7" [equalizer.cpp:69]   --->   Operation 211 'writeresp' 'gmem_addr_7_resp' <Predicate = (state_2 == 17 & !or_ln63_5)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_8 : Operation 212 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_8, i32 %tmp_data_V_4_6, i4 15" [equalizer.cpp:69]   --->   Operation 212 'write' 'write_ln69' <Predicate = (state_2 == 17 & !or_ln63_6)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_8 : Operation 213 [1/1] (7.30ns)   --->   "%gmem_addr_9_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_9, i32 1" [equalizer.cpp:69]   --->   Operation 213 'writereq' 'gmem_addr_9_req' <Predicate = (state_2 == 17 & icmp_ln68)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_8 : Operation 214 [1/1] (0.00ns)   --->   "%empty_27 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 214 'read' 'empty_27' <Predicate = (state_2 == 17 & icmp_ln68)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_8 : Operation 215 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val8 = extractvalue i44 %empty_27"   --->   Operation 215 'extractvalue' 'input_r_V_data_V_val8' <Predicate = (state_2 == 17 & icmp_ln68)> <Delay = 0.00>
ST_8 : Operation 216 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val8 = extractvalue i44 %empty_27"   --->   Operation 216 'extractvalue' 'input_r_V_last_V_val8' <Predicate = (state_2 == 17 & icmp_ln68)> <Delay = 0.00>
ST_8 : Operation 217 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.9" [equalizer.cpp:73]   --->   Operation 217 'br' 'br_ln73' <Predicate = (state_2 == 17 & icmp_ln68)> <Delay = 1.58>
ST_8 : Operation 218 [1/1] (0.00ns)   --->   "%tmp_data_V_4_8 = phi i32 %input_r_V_data_V_val8, void %if.then10.8, i32 %tmp_data_V_4_7, void %for.body.split.8"   --->   Operation 218 'phi' 'tmp_data_V_4_8' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_8 : Operation 219 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_11)   --->   "%i_4_8 = phi i32 %add_ln72_8, void %if.then10.8, i32 %select_ln63_8, void %for.body.split.8" [equalizer.cpp:72]   --->   Operation 219 'phi' 'i_4_8' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_8 : Operation 220 [1/1] (2.47ns)   --->   "%icmp_ln63_9 = icmp_eq  i32 %tmp_data_V_4_8, i32 43962" [equalizer.cpp:63]   --->   Operation 220 'icmp' 'icmp_ln63_9' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 221 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_11 = select i1 %icmp_ln63_9, i32 0, i32 %i_4_8" [equalizer.cpp:63]   --->   Operation 221 'select' 'select_ln63_11' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_8 : Operation 222 [1/1] (0.69ns)   --->   "%select_ln63_12 = select i1 %icmp_ln63_9, i13 4096, i13 %select_ln63_10" [equalizer.cpp:63]   --->   Operation 222 'select' 'select_ln63_12' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_8 : Operation 223 [1/1] (2.09ns)   --->   "%icmp_ln68_1 = icmp_eq  i13 %select_ln63_12, i13 17" [equalizer.cpp:68]   --->   Operation 223 'icmp' 'icmp_ln68_1' <Predicate = (state_2 == 17)> <Delay = 2.09> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.09> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>

State 9 <SV = 14> <Delay = 7.30>
ST_9 : Operation 224 [1/7] (7.30ns)   --->   "%empty_18 = readreq i1 @_ssdm_op_ReadReq.m_axi.p1i32, i32 %gmem_addr, i32 33" [equalizer.cpp:86]   --->   Operation 224 'readreq' 'empty_18' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_9 : Operation 225 [1/5] (7.30ns)   --->   "%gmem_addr_5_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_5" [equalizer.cpp:69]   --->   Operation 225 'writeresp' 'gmem_addr_5_resp' <Predicate = (state_2 == 17 & !or_ln63_3)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_9 : Operation 226 [2/5] (7.30ns)   --->   "%gmem_addr_6_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_6" [equalizer.cpp:69]   --->   Operation 226 'writeresp' 'gmem_addr_6_resp' <Predicate = (state_2 == 17 & !or_ln63_4)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_9 : Operation 227 [4/5] (7.30ns)   --->   "%gmem_addr_7_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_7" [equalizer.cpp:69]   --->   Operation 227 'writeresp' 'gmem_addr_7_resp' <Predicate = (state_2 == 17 & !or_ln63_5)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_9 : Operation 228 [5/5] (7.30ns)   --->   "%gmem_addr_8_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_8" [equalizer.cpp:69]   --->   Operation 228 'writeresp' 'gmem_addr_8_resp' <Predicate = (state_2 == 17 & !or_ln63_6)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_9 : Operation 229 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_9, i32 %tmp_data_V_4_7, i4 15" [equalizer.cpp:69]   --->   Operation 229 'write' 'write_ln69' <Predicate = (state_2 == 17 & icmp_ln68)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_9 : Operation 230 [1/1] (0.00ns)   --->   "%tmp_last_V_4_8 = phi i1 %input_r_V_last_V_val8, void %if.then10.8, i1 %tmp_last_V_4_7, void %for.body.split.8"   --->   Operation 230 'phi' 'tmp_last_V_4_8' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_9 : Operation 231 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %icmp_ln68_1, void %for.body.split.10, void %if.then10.9" [equalizer.cpp:68]   --->   Operation 231 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_9 : Operation 232 [1/1] (0.00ns)   --->   "%shl_ln69_9 = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_11, i2 0" [equalizer.cpp:69]   --->   Operation 232 'bitconcatenate' 'shl_ln69_9' <Predicate = (state_2 == 17 & icmp_ln68_1)> <Delay = 0.00>
ST_9 : Operation 233 [1/1] (0.00ns)   --->   "%sext_ln69_18 = sext i34 %shl_ln69_9" [equalizer.cpp:69]   --->   Operation 233 'sext' 'sext_ln69_18' <Predicate = (state_2 == 17 & icmp_ln68_1)> <Delay = 0.00>
ST_9 : Operation 234 [1/1] (3.52ns)   --->   "%add_ln69_9 = add i64 %sext_ln69_18, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 234 'add' 'add_ln69_9' <Predicate = (state_2 == 17 & icmp_ln68_1)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 235 [1/1] (0.00ns)   --->   "%trunc_ln69_9 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_9, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 235 'partselect' 'trunc_ln69_9' <Predicate = (state_2 == 17 & icmp_ln68_1)> <Delay = 0.00>
ST_9 : Operation 236 [1/1] (0.00ns)   --->   "%sext_ln69_19 = sext i62 %trunc_ln69_9" [equalizer.cpp:69]   --->   Operation 236 'sext' 'sext_ln69_19' <Predicate = (state_2 == 17 & icmp_ln68_1)> <Delay = 0.00>
ST_9 : Operation 237 [1/1] (0.00ns)   --->   "%gmem_addr_10 = getelementptr i32 %gmem, i64 %sext_ln69_19" [equalizer.cpp:69]   --->   Operation 237 'getelementptr' 'gmem_addr_10' <Predicate = (state_2 == 17 & icmp_ln68_1)> <Delay = 0.00>
ST_9 : Operation 238 [1/1] (0.00ns)   --->   "%empty_28 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 238 'read' 'empty_28' <Predicate = (state_2 == 17 & icmp_ln68_1)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_9 : Operation 239 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val9 = extractvalue i44 %empty_28"   --->   Operation 239 'extractvalue' 'input_r_V_data_V_val9' <Predicate = (state_2 == 17 & icmp_ln68_1)> <Delay = 0.00>
ST_9 : Operation 240 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val9 = extractvalue i44 %empty_28"   --->   Operation 240 'extractvalue' 'input_r_V_last_V_val9' <Predicate = (state_2 == 17 & icmp_ln68_1)> <Delay = 0.00>
ST_9 : Operation 241 [1/1] (2.55ns)   --->   "%add_ln72_9 = add i32 %select_ln63_11, i32 1" [equalizer.cpp:72]   --->   Operation 241 'add' 'add_ln72_9' <Predicate = (state_2 == 17 & icmp_ln68_1)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 242 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.10" [equalizer.cpp:73]   --->   Operation 242 'br' 'br_ln73' <Predicate = (state_2 == 17 & icmp_ln68_1)> <Delay = 1.58>
ST_9 : Operation 243 [1/1] (0.00ns)   --->   "%tmp_data_V_4_9 = phi i32 %input_r_V_data_V_val9, void %if.then10.9, i32 %tmp_data_V_4_8, void %for.body.split.9"   --->   Operation 243 'phi' 'tmp_data_V_4_9' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_9 : Operation 244 [1/1] (2.47ns)   --->   "%icmp_ln63_10 = icmp_eq  i32 %tmp_data_V_4_9, i32 43962" [equalizer.cpp:63]   --->   Operation 244 'icmp' 'icmp_ln63_10' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>

State 10 <SV = 15> <Delay = 7.30>
ST_10 : Operation 245 [1/1] (7.30ns)   --->   "%gmem_addr_read = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 245 'read' 'gmem_addr_read' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_10 : Operation 246 [1/5] (7.30ns)   --->   "%gmem_addr_6_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_6" [equalizer.cpp:69]   --->   Operation 246 'writeresp' 'gmem_addr_6_resp' <Predicate = (state_2 == 17 & !or_ln63_4)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_10 : Operation 247 [3/5] (7.30ns)   --->   "%gmem_addr_7_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_7" [equalizer.cpp:69]   --->   Operation 247 'writeresp' 'gmem_addr_7_resp' <Predicate = (state_2 == 17 & !or_ln63_5)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_10 : Operation 248 [4/5] (7.30ns)   --->   "%gmem_addr_8_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_8" [equalizer.cpp:69]   --->   Operation 248 'writeresp' 'gmem_addr_8_resp' <Predicate = (state_2 == 17 & !or_ln63_6)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_10 : Operation 249 [5/5] (7.30ns)   --->   "%gmem_addr_9_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_9" [equalizer.cpp:69]   --->   Operation 249 'writeresp' 'gmem_addr_9_resp' <Predicate = (state_2 == 17 & icmp_ln68)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_10 : Operation 250 [1/1] (7.30ns)   --->   "%gmem_addr_10_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_10, i32 1" [equalizer.cpp:69]   --->   Operation 250 'writereq' 'gmem_addr_10_req' <Predicate = (state_2 == 17 & icmp_ln68_1)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_10 : Operation 251 [1/1] (0.00ns)   --->   "%tmp_last_V_4_9 = phi i1 %input_r_V_last_V_val9, void %if.then10.9, i1 %tmp_last_V_4_8, void %for.body.split.9"   --->   Operation 251 'phi' 'tmp_last_V_4_9' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_10 : Operation 252 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_13)   --->   "%i_4_9 = phi i32 %add_ln72_9, void %if.then10.9, i32 %select_ln63_11, void %for.body.split.9" [equalizer.cpp:72]   --->   Operation 252 'phi' 'i_4_9' <Predicate = (state_2 == 17 & !icmp_ln63_10)> <Delay = 0.00>
ST_10 : Operation 253 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_13 = select i1 %icmp_ln63_10, i32 0, i32 %i_4_9" [equalizer.cpp:63]   --->   Operation 253 'select' 'select_ln63_13' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_10 : Operation 254 [1/1] (0.69ns)   --->   "%select_ln63_14 = select i1 %icmp_ln63_10, i13 4096, i13 %select_ln63_12" [equalizer.cpp:63]   --->   Operation 254 'select' 'select_ln63_14' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_10 : Operation 255 [1/1] (2.09ns)   --->   "%icmp_ln68_2 = icmp_eq  i13 %select_ln63_14, i13 17" [equalizer.cpp:68]   --->   Operation 255 'icmp' 'icmp_ln68_2' <Predicate = (state_2 == 17)> <Delay = 2.09> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.09> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 256 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %icmp_ln68_2, void %for.body.split.11, void %if.then10.10" [equalizer.cpp:68]   --->   Operation 256 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_10 : Operation 257 [1/1] (0.00ns)   --->   "%shl_ln69_s = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_13, i2 0" [equalizer.cpp:69]   --->   Operation 257 'bitconcatenate' 'shl_ln69_s' <Predicate = (state_2 == 17 & icmp_ln68_2)> <Delay = 0.00>
ST_10 : Operation 258 [1/1] (0.00ns)   --->   "%sext_ln69_20 = sext i34 %shl_ln69_s" [equalizer.cpp:69]   --->   Operation 258 'sext' 'sext_ln69_20' <Predicate = (state_2 == 17 & icmp_ln68_2)> <Delay = 0.00>
ST_10 : Operation 259 [1/1] (3.52ns)   --->   "%add_ln69_10 = add i64 %sext_ln69_20, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 259 'add' 'add_ln69_10' <Predicate = (state_2 == 17 & icmp_ln68_2)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 260 [1/1] (0.00ns)   --->   "%trunc_ln69_s = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_10, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 260 'partselect' 'trunc_ln69_s' <Predicate = (state_2 == 17 & icmp_ln68_2)> <Delay = 0.00>
ST_10 : Operation 261 [1/1] (0.00ns)   --->   "%sext_ln69_21 = sext i62 %trunc_ln69_s" [equalizer.cpp:69]   --->   Operation 261 'sext' 'sext_ln69_21' <Predicate = (state_2 == 17 & icmp_ln68_2)> <Delay = 0.00>
ST_10 : Operation 262 [1/1] (0.00ns)   --->   "%gmem_addr_11 = getelementptr i32 %gmem, i64 %sext_ln69_21" [equalizer.cpp:69]   --->   Operation 262 'getelementptr' 'gmem_addr_11' <Predicate = (state_2 == 17 & icmp_ln68_2)> <Delay = 0.00>
ST_10 : Operation 263 [1/1] (0.00ns)   --->   "%empty_29 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 263 'read' 'empty_29' <Predicate = (state_2 == 17 & icmp_ln68_2)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_10 : Operation 264 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val10 = extractvalue i44 %empty_29"   --->   Operation 264 'extractvalue' 'input_r_V_data_V_val10' <Predicate = (state_2 == 17 & icmp_ln68_2)> <Delay = 0.00>
ST_10 : Operation 265 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val10 = extractvalue i44 %empty_29"   --->   Operation 265 'extractvalue' 'input_r_V_last_V_val10' <Predicate = (state_2 == 17 & icmp_ln68_2)> <Delay = 0.00>
ST_10 : Operation 266 [1/1] (2.55ns)   --->   "%add_ln72_10 = add i32 %select_ln63_13, i32 1" [equalizer.cpp:72]   --->   Operation 266 'add' 'add_ln72_10' <Predicate = (state_2 == 17 & icmp_ln68_2)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 267 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.11" [equalizer.cpp:73]   --->   Operation 267 'br' 'br_ln73' <Predicate = (state_2 == 17 & icmp_ln68_2)> <Delay = 1.58>

State 11 <SV = 16> <Delay = 7.30>
ST_11 : Operation 268 [1/1] (7.30ns)   --->   "%gmem_addr_read_1 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 268 'read' 'gmem_addr_read_1' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_11 : Operation 269 [2/2] (6.91ns)   --->   "%mul_ln89 = mul i32 %tmp_data_V, i32 %gmem_addr_read" [equalizer.cpp:89]   --->   Operation 269 'mul' 'mul_ln89' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_11 : Operation 270 [2/5] (7.30ns)   --->   "%gmem_addr_7_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_7" [equalizer.cpp:69]   --->   Operation 270 'writeresp' 'gmem_addr_7_resp' <Predicate = (state_2 == 17 & !or_ln63_5)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_11 : Operation 271 [3/5] (7.30ns)   --->   "%gmem_addr_8_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_8" [equalizer.cpp:69]   --->   Operation 271 'writeresp' 'gmem_addr_8_resp' <Predicate = (state_2 == 17 & !or_ln63_6)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_11 : Operation 272 [4/5] (7.30ns)   --->   "%gmem_addr_9_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_9" [equalizer.cpp:69]   --->   Operation 272 'writeresp' 'gmem_addr_9_resp' <Predicate = (state_2 == 17 & icmp_ln68)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_11 : Operation 273 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_10, i32 %tmp_data_V_4_8, i4 15" [equalizer.cpp:69]   --->   Operation 273 'write' 'write_ln69' <Predicate = (state_2 == 17 & icmp_ln68_1)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_11 : Operation 274 [1/1] (7.30ns)   --->   "%gmem_addr_11_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_11, i32 1" [equalizer.cpp:69]   --->   Operation 274 'writereq' 'gmem_addr_11_req' <Predicate = (state_2 == 17 & icmp_ln68_2)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_11 : Operation 275 [1/1] (0.00ns)   --->   "%tmp_last_V_4_10 = phi i1 %input_r_V_last_V_val10, void %if.then10.10, i1 %tmp_last_V_4_9, void %for.body.split.10"   --->   Operation 275 'phi' 'tmp_last_V_4_10' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_11 : Operation 276 [1/1] (0.00ns)   --->   "%tmp_data_V_4_10 = phi i32 %input_r_V_data_V_val10, void %if.then10.10, i32 %tmp_data_V_4_9, void %for.body.split.10"   --->   Operation 276 'phi' 'tmp_data_V_4_10' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_11 : Operation 277 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_15)   --->   "%i_4_10 = phi i32 %add_ln72_10, void %if.then10.10, i32 %select_ln63_13, void %for.body.split.10" [equalizer.cpp:72]   --->   Operation 277 'phi' 'i_4_10' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_11 : Operation 278 [1/1] (2.47ns)   --->   "%icmp_ln63_11 = icmp_eq  i32 %tmp_data_V_4_10, i32 43962" [equalizer.cpp:63]   --->   Operation 278 'icmp' 'icmp_ln63_11' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_11 : Operation 279 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_15 = select i1 %icmp_ln63_11, i32 0, i32 %i_4_10" [equalizer.cpp:63]   --->   Operation 279 'select' 'select_ln63_15' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_11 : Operation 280 [1/1] (0.69ns)   --->   "%select_ln63_16 = select i1 %icmp_ln63_11, i13 4096, i13 %select_ln63_14" [equalizer.cpp:63]   --->   Operation 280 'select' 'select_ln63_16' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_11 : Operation 281 [1/1] (2.09ns)   --->   "%icmp_ln68_3 = icmp_eq  i13 %select_ln63_16, i13 17" [equalizer.cpp:68]   --->   Operation 281 'icmp' 'icmp_ln68_3' <Predicate = (state_2 == 17)> <Delay = 2.09> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.09> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_11 : Operation 282 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %icmp_ln68_3, void %for.body.split.12, void %if.then10.11" [equalizer.cpp:68]   --->   Operation 282 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_11 : Operation 283 [1/1] (0.00ns)   --->   "%shl_ln69_10 = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_15, i2 0" [equalizer.cpp:69]   --->   Operation 283 'bitconcatenate' 'shl_ln69_10' <Predicate = (state_2 == 17 & icmp_ln68_3)> <Delay = 0.00>
ST_11 : Operation 284 [1/1] (0.00ns)   --->   "%sext_ln69_22 = sext i34 %shl_ln69_10" [equalizer.cpp:69]   --->   Operation 284 'sext' 'sext_ln69_22' <Predicate = (state_2 == 17 & icmp_ln68_3)> <Delay = 0.00>
ST_11 : Operation 285 [1/1] (3.52ns)   --->   "%add_ln69_11 = add i64 %sext_ln69_22, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 285 'add' 'add_ln69_11' <Predicate = (state_2 == 17 & icmp_ln68_3)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_11 : Operation 286 [1/1] (0.00ns)   --->   "%trunc_ln69_10 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_11, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 286 'partselect' 'trunc_ln69_10' <Predicate = (state_2 == 17 & icmp_ln68_3)> <Delay = 0.00>
ST_11 : Operation 287 [1/1] (0.00ns)   --->   "%sext_ln69_23 = sext i62 %trunc_ln69_10" [equalizer.cpp:69]   --->   Operation 287 'sext' 'sext_ln69_23' <Predicate = (state_2 == 17 & icmp_ln68_3)> <Delay = 0.00>
ST_11 : Operation 288 [1/1] (0.00ns)   --->   "%gmem_addr_12 = getelementptr i32 %gmem, i64 %sext_ln69_23" [equalizer.cpp:69]   --->   Operation 288 'getelementptr' 'gmem_addr_12' <Predicate = (state_2 == 17 & icmp_ln68_3)> <Delay = 0.00>
ST_11 : Operation 289 [1/1] (2.55ns)   --->   "%add_ln72_11 = add i32 %select_ln63_15, i32 1" [equalizer.cpp:72]   --->   Operation 289 'add' 'add_ln72_11' <Predicate = (state_2 == 17 & icmp_ln68_3)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 12 <SV = 17> <Delay = 7.30>
ST_12 : Operation 290 [1/1] (7.30ns)   --->   "%gmem_addr_read_2 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 290 'read' 'gmem_addr_read_2' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_12 : Operation 291 [1/1] (0.00ns)   --->   "%signal_shift_reg_1_load = load i32 %signal_shift_reg_1" [equalizer.cpp:85]   --->   Operation 291 'load' 'signal_shift_reg_1_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_12 : Operation 292 [1/1] (0.00ns)   --->   "%signal_shift_reg_0_load = load i32 %signal_shift_reg_0" [equalizer.cpp:85]   --->   Operation 292 'load' 'signal_shift_reg_0_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_12 : Operation 293 [1/1] (0.00ns)   --->   "%store_ln85 = store i32 %signal_shift_reg_0_load, i32 %signal_shift_reg_1" [equalizer.cpp:85]   --->   Operation 293 'store' 'store_ln85' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_12 : Operation 294 [2/2] (6.91ns)   --->   "%mul_ln86_30 = mul i32 %signal_shift_reg_0_load, i32 %gmem_addr_read_1" [equalizer.cpp:86]   --->   Operation 294 'mul' 'mul_ln86_30' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_12 : Operation 295 [1/2] (6.91ns)   --->   "%mul_ln89 = mul i32 %tmp_data_V, i32 %gmem_addr_read" [equalizer.cpp:89]   --->   Operation 295 'mul' 'mul_ln89' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_12 : Operation 296 [1/1] (0.00ns)   --->   "%store_ln90 = store i32 %tmp_data_V, i32 %signal_shift_reg_0" [equalizer.cpp:90]   --->   Operation 296 'store' 'store_ln90' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_12 : Operation 297 [1/5] (7.30ns)   --->   "%gmem_addr_7_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_7" [equalizer.cpp:69]   --->   Operation 297 'writeresp' 'gmem_addr_7_resp' <Predicate = (state_2 == 17 & !or_ln63_5)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_12 : Operation 298 [2/5] (7.30ns)   --->   "%gmem_addr_8_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_8" [equalizer.cpp:69]   --->   Operation 298 'writeresp' 'gmem_addr_8_resp' <Predicate = (state_2 == 17 & !or_ln63_6)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_12 : Operation 299 [3/5] (7.30ns)   --->   "%gmem_addr_9_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_9" [equalizer.cpp:69]   --->   Operation 299 'writeresp' 'gmem_addr_9_resp' <Predicate = (state_2 == 17 & icmp_ln68)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_12 : Operation 300 [5/5] (7.30ns)   --->   "%gmem_addr_10_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_10" [equalizer.cpp:69]   --->   Operation 300 'writeresp' 'gmem_addr_10_resp' <Predicate = (state_2 == 17 & icmp_ln68_1)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_12 : Operation 301 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_11, i32 %tmp_data_V_4_9, i4 15" [equalizer.cpp:69]   --->   Operation 301 'write' 'write_ln69' <Predicate = (state_2 == 17 & icmp_ln68_2)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_12 : Operation 302 [1/1] (7.30ns)   --->   "%gmem_addr_12_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_12, i32 1" [equalizer.cpp:69]   --->   Operation 302 'writereq' 'gmem_addr_12_req' <Predicate = (state_2 == 17 & icmp_ln68_3)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_12 : Operation 303 [1/1] (0.00ns)   --->   "%empty_30 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 303 'read' 'empty_30' <Predicate = (state_2 == 17 & icmp_ln68_3)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_12 : Operation 304 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val11 = extractvalue i44 %empty_30"   --->   Operation 304 'extractvalue' 'input_r_V_data_V_val11' <Predicate = (state_2 == 17 & icmp_ln68_3)> <Delay = 0.00>
ST_12 : Operation 305 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val11 = extractvalue i44 %empty_30"   --->   Operation 305 'extractvalue' 'input_r_V_last_V_val11' <Predicate = (state_2 == 17 & icmp_ln68_3)> <Delay = 0.00>
ST_12 : Operation 306 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.12" [equalizer.cpp:73]   --->   Operation 306 'br' 'br_ln73' <Predicate = (state_2 == 17 & icmp_ln68_3)> <Delay = 1.58>
ST_12 : Operation 307 [1/1] (0.00ns)   --->   "%tmp_data_V_4_11 = phi i32 %input_r_V_data_V_val11, void %if.then10.11, i32 %tmp_data_V_4_10, void %for.body.split.11"   --->   Operation 307 'phi' 'tmp_data_V_4_11' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_12 : Operation 308 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_17)   --->   "%i_4_11 = phi i32 %add_ln72_11, void %if.then10.11, i32 %select_ln63_15, void %for.body.split.11" [equalizer.cpp:72]   --->   Operation 308 'phi' 'i_4_11' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_12 : Operation 309 [1/1] (2.47ns)   --->   "%icmp_ln63_12 = icmp_eq  i32 %tmp_data_V_4_11, i32 43962" [equalizer.cpp:63]   --->   Operation 309 'icmp' 'icmp_ln63_12' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_12 : Operation 310 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_17 = select i1 %icmp_ln63_12, i32 0, i32 %i_4_11" [equalizer.cpp:63]   --->   Operation 310 'select' 'select_ln63_17' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_12 : Operation 311 [1/1] (0.69ns)   --->   "%select_ln63_18 = select i1 %icmp_ln63_12, i13 4096, i13 %select_ln63_16" [equalizer.cpp:63]   --->   Operation 311 'select' 'select_ln63_18' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_12 : Operation 312 [1/1] (2.09ns)   --->   "%icmp_ln68_4 = icmp_eq  i13 %select_ln63_18, i13 17" [equalizer.cpp:68]   --->   Operation 312 'icmp' 'icmp_ln68_4' <Predicate = (state_2 == 17)> <Delay = 2.09> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.09> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_12 : Operation 313 [1/1] (2.47ns)   --->   "%icmp_ln34 = icmp_eq  i32 %tmp_data_V, i32 48879" [equalizer.cpp:34]   --->   Operation 313 'icmp' 'icmp_ln34' <Predicate = (state_2 == 0)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_12 : Operation 314 [1/1] (0.00ns)   --->   "%br_ln108 = br i1 %tmp_last_V, void %sw.bb.if.end49_crit_edge, void %while.end" [equalizer.cpp:108]   --->   Operation 314 'br' 'br_ln108' <Predicate = (state_2 == 0)> <Delay = 0.00>

State 13 <SV = 18> <Delay = 7.30>
ST_13 : Operation 315 [1/1] (7.30ns)   --->   "%gmem_addr_read_3 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 315 'read' 'gmem_addr_read_3' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_13 : Operation 316 [1/1] (0.00ns)   --->   "%signal_shift_reg_2_load = load i32 %signal_shift_reg_2" [equalizer.cpp:85]   --->   Operation 316 'load' 'signal_shift_reg_2_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_13 : Operation 317 [1/1] (0.00ns)   --->   "%store_ln85 = store i32 %signal_shift_reg_1_load, i32 %signal_shift_reg_2" [equalizer.cpp:85]   --->   Operation 317 'store' 'store_ln85' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_13 : Operation 318 [2/2] (6.91ns)   --->   "%mul_ln86_29 = mul i32 %signal_shift_reg_1_load, i32 %gmem_addr_read_2" [equalizer.cpp:86]   --->   Operation 318 'mul' 'mul_ln86_29' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_13 : Operation 319 [1/2] (6.91ns)   --->   "%mul_ln86_30 = mul i32 %signal_shift_reg_0_load, i32 %gmem_addr_read_1" [equalizer.cpp:86]   --->   Operation 319 'mul' 'mul_ln86_30' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_13 : Operation 320 [1/5] (7.30ns)   --->   "%gmem_addr_8_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_8" [equalizer.cpp:69]   --->   Operation 320 'writeresp' 'gmem_addr_8_resp' <Predicate = (state_2 == 17 & !or_ln63_6)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_13 : Operation 321 [2/5] (7.30ns)   --->   "%gmem_addr_9_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_9" [equalizer.cpp:69]   --->   Operation 321 'writeresp' 'gmem_addr_9_resp' <Predicate = (state_2 == 17 & icmp_ln68)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_13 : Operation 322 [4/5] (7.30ns)   --->   "%gmem_addr_10_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_10" [equalizer.cpp:69]   --->   Operation 322 'writeresp' 'gmem_addr_10_resp' <Predicate = (state_2 == 17 & icmp_ln68_1)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_13 : Operation 323 [5/5] (7.30ns)   --->   "%gmem_addr_11_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_11" [equalizer.cpp:69]   --->   Operation 323 'writeresp' 'gmem_addr_11_resp' <Predicate = (state_2 == 17 & icmp_ln68_2)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_13 : Operation 324 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_12, i32 %tmp_data_V_4_10, i4 15" [equalizer.cpp:69]   --->   Operation 324 'write' 'write_ln69' <Predicate = (state_2 == 17 & icmp_ln68_3)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_13 : Operation 325 [1/1] (0.00ns)   --->   "%tmp_last_V_4_11 = phi i1 %input_r_V_last_V_val11, void %if.then10.11, i1 %tmp_last_V_4_10, void %for.body.split.11"   --->   Operation 325 'phi' 'tmp_last_V_4_11' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_13 : Operation 326 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %icmp_ln68_4, void %for.body.split.13, void %if.then10.12" [equalizer.cpp:68]   --->   Operation 326 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_13 : Operation 327 [1/1] (0.00ns)   --->   "%shl_ln69_11 = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_17, i2 0" [equalizer.cpp:69]   --->   Operation 327 'bitconcatenate' 'shl_ln69_11' <Predicate = (state_2 == 17 & icmp_ln68_4)> <Delay = 0.00>
ST_13 : Operation 328 [1/1] (0.00ns)   --->   "%sext_ln69_24 = sext i34 %shl_ln69_11" [equalizer.cpp:69]   --->   Operation 328 'sext' 'sext_ln69_24' <Predicate = (state_2 == 17 & icmp_ln68_4)> <Delay = 0.00>
ST_13 : Operation 329 [1/1] (3.52ns)   --->   "%add_ln69_12 = add i64 %sext_ln69_24, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 329 'add' 'add_ln69_12' <Predicate = (state_2 == 17 & icmp_ln68_4)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_13 : Operation 330 [1/1] (0.00ns)   --->   "%trunc_ln69_11 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_12, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 330 'partselect' 'trunc_ln69_11' <Predicate = (state_2 == 17 & icmp_ln68_4)> <Delay = 0.00>
ST_13 : Operation 331 [1/1] (0.00ns)   --->   "%sext_ln69_25 = sext i62 %trunc_ln69_11" [equalizer.cpp:69]   --->   Operation 331 'sext' 'sext_ln69_25' <Predicate = (state_2 == 17 & icmp_ln68_4)> <Delay = 0.00>
ST_13 : Operation 332 [1/1] (0.00ns)   --->   "%gmem_addr_13 = getelementptr i32 %gmem, i64 %sext_ln69_25" [equalizer.cpp:69]   --->   Operation 332 'getelementptr' 'gmem_addr_13' <Predicate = (state_2 == 17 & icmp_ln68_4)> <Delay = 0.00>
ST_13 : Operation 333 [1/1] (0.00ns)   --->   "%empty_31 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 333 'read' 'empty_31' <Predicate = (state_2 == 17 & icmp_ln68_4)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_13 : Operation 334 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val12 = extractvalue i44 %empty_31"   --->   Operation 334 'extractvalue' 'input_r_V_data_V_val12' <Predicate = (state_2 == 17 & icmp_ln68_4)> <Delay = 0.00>
ST_13 : Operation 335 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val12 = extractvalue i44 %empty_31"   --->   Operation 335 'extractvalue' 'input_r_V_last_V_val12' <Predicate = (state_2 == 17 & icmp_ln68_4)> <Delay = 0.00>
ST_13 : Operation 336 [1/1] (2.55ns)   --->   "%add_ln72_12 = add i32 %select_ln63_17, i32 1" [equalizer.cpp:72]   --->   Operation 336 'add' 'add_ln72_12' <Predicate = (state_2 == 17 & icmp_ln68_4)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_13 : Operation 337 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.13" [equalizer.cpp:73]   --->   Operation 337 'br' 'br_ln73' <Predicate = (state_2 == 17 & icmp_ln68_4)> <Delay = 1.58>
ST_13 : Operation 338 [1/1] (0.00ns)   --->   "%tmp_data_V_4_12 = phi i32 %input_r_V_data_V_val12, void %if.then10.12, i32 %tmp_data_V_4_11, void %for.body.split.12"   --->   Operation 338 'phi' 'tmp_data_V_4_12' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_13 : Operation 339 [1/1] (2.47ns)   --->   "%icmp_ln63_13 = icmp_eq  i32 %tmp_data_V_4_12, i32 43962" [equalizer.cpp:63]   --->   Operation 339 'icmp' 'icmp_ln63_13' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>

State 14 <SV = 19> <Delay = 7.30>
ST_14 : Operation 340 [1/1] (7.30ns)   --->   "%gmem_addr_read_4 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 340 'read' 'gmem_addr_read_4' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_14 : Operation 341 [1/1] (0.00ns)   --->   "%signal_shift_reg_3_load = load i32 %signal_shift_reg_3" [equalizer.cpp:85]   --->   Operation 341 'load' 'signal_shift_reg_3_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_14 : Operation 342 [1/1] (0.00ns)   --->   "%store_ln85 = store i32 %signal_shift_reg_2_load, i32 %signal_shift_reg_3" [equalizer.cpp:85]   --->   Operation 342 'store' 'store_ln85' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_14 : Operation 343 [2/2] (6.91ns)   --->   "%mul_ln86_28 = mul i32 %signal_shift_reg_2_load, i32 %gmem_addr_read_3" [equalizer.cpp:86]   --->   Operation 343 'mul' 'mul_ln86_28' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_14 : Operation 344 [1/2] (6.91ns)   --->   "%mul_ln86_29 = mul i32 %signal_shift_reg_1_load, i32 %gmem_addr_read_2" [equalizer.cpp:86]   --->   Operation 344 'mul' 'mul_ln86_29' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_14 : Operation 345 [1/5] (7.30ns)   --->   "%gmem_addr_9_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_9" [equalizer.cpp:69]   --->   Operation 345 'writeresp' 'gmem_addr_9_resp' <Predicate = (state_2 == 17 & icmp_ln68)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_14 : Operation 346 [3/5] (7.30ns)   --->   "%gmem_addr_10_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_10" [equalizer.cpp:69]   --->   Operation 346 'writeresp' 'gmem_addr_10_resp' <Predicate = (state_2 == 17 & icmp_ln68_1)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_14 : Operation 347 [4/5] (7.30ns)   --->   "%gmem_addr_11_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_11" [equalizer.cpp:69]   --->   Operation 347 'writeresp' 'gmem_addr_11_resp' <Predicate = (state_2 == 17 & icmp_ln68_2)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_14 : Operation 348 [5/5] (7.30ns)   --->   "%gmem_addr_12_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_12" [equalizer.cpp:69]   --->   Operation 348 'writeresp' 'gmem_addr_12_resp' <Predicate = (state_2 == 17 & icmp_ln68_3)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_14 : Operation 349 [1/1] (7.30ns)   --->   "%gmem_addr_13_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_13, i32 1" [equalizer.cpp:69]   --->   Operation 349 'writereq' 'gmem_addr_13_req' <Predicate = (state_2 == 17 & icmp_ln68_4)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_14 : Operation 350 [1/1] (0.00ns)   --->   "%tmp_last_V_4_12 = phi i1 %input_r_V_last_V_val12, void %if.then10.12, i1 %tmp_last_V_4_11, void %for.body.split.12"   --->   Operation 350 'phi' 'tmp_last_V_4_12' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_14 : Operation 351 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_19)   --->   "%i_4_12 = phi i32 %add_ln72_12, void %if.then10.12, i32 %select_ln63_17, void %for.body.split.12" [equalizer.cpp:72]   --->   Operation 351 'phi' 'i_4_12' <Predicate = (state_2 == 17 & !icmp_ln63_13)> <Delay = 0.00>
ST_14 : Operation 352 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_19 = select i1 %icmp_ln63_13, i32 0, i32 %i_4_12" [equalizer.cpp:63]   --->   Operation 352 'select' 'select_ln63_19' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_14 : Operation 353 [1/1] (0.69ns)   --->   "%select_ln63_20 = select i1 %icmp_ln63_13, i13 4096, i13 %select_ln63_18" [equalizer.cpp:63]   --->   Operation 353 'select' 'select_ln63_20' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_14 : Operation 354 [1/1] (2.09ns)   --->   "%icmp_ln68_5 = icmp_eq  i13 %select_ln63_20, i13 17" [equalizer.cpp:68]   --->   Operation 354 'icmp' 'icmp_ln68_5' <Predicate = (state_2 == 17)> <Delay = 2.09> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.09> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_14 : Operation 355 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %icmp_ln68_5, void %for.body.split.14, void %if.then10.13" [equalizer.cpp:68]   --->   Operation 355 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_14 : Operation 356 [1/1] (0.00ns)   --->   "%shl_ln69_12 = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_19, i2 0" [equalizer.cpp:69]   --->   Operation 356 'bitconcatenate' 'shl_ln69_12' <Predicate = (state_2 == 17 & icmp_ln68_5)> <Delay = 0.00>
ST_14 : Operation 357 [1/1] (0.00ns)   --->   "%sext_ln69_26 = sext i34 %shl_ln69_12" [equalizer.cpp:69]   --->   Operation 357 'sext' 'sext_ln69_26' <Predicate = (state_2 == 17 & icmp_ln68_5)> <Delay = 0.00>
ST_14 : Operation 358 [1/1] (3.52ns)   --->   "%add_ln69_13 = add i64 %sext_ln69_26, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 358 'add' 'add_ln69_13' <Predicate = (state_2 == 17 & icmp_ln68_5)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_14 : Operation 359 [1/1] (0.00ns)   --->   "%trunc_ln69_12 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_13, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 359 'partselect' 'trunc_ln69_12' <Predicate = (state_2 == 17 & icmp_ln68_5)> <Delay = 0.00>
ST_14 : Operation 360 [1/1] (0.00ns)   --->   "%sext_ln69_27 = sext i62 %trunc_ln69_12" [equalizer.cpp:69]   --->   Operation 360 'sext' 'sext_ln69_27' <Predicate = (state_2 == 17 & icmp_ln68_5)> <Delay = 0.00>
ST_14 : Operation 361 [1/1] (0.00ns)   --->   "%gmem_addr_14 = getelementptr i32 %gmem, i64 %sext_ln69_27" [equalizer.cpp:69]   --->   Operation 361 'getelementptr' 'gmem_addr_14' <Predicate = (state_2 == 17 & icmp_ln68_5)> <Delay = 0.00>
ST_14 : Operation 362 [1/1] (0.00ns)   --->   "%empty_32 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 362 'read' 'empty_32' <Predicate = (state_2 == 17 & icmp_ln68_5)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_14 : Operation 363 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val13 = extractvalue i44 %empty_32"   --->   Operation 363 'extractvalue' 'input_r_V_data_V_val13' <Predicate = (state_2 == 17 & icmp_ln68_5)> <Delay = 0.00>
ST_14 : Operation 364 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val13 = extractvalue i44 %empty_32"   --->   Operation 364 'extractvalue' 'input_r_V_last_V_val13' <Predicate = (state_2 == 17 & icmp_ln68_5)> <Delay = 0.00>
ST_14 : Operation 365 [1/1] (2.55ns)   --->   "%add_ln72_13 = add i32 %select_ln63_19, i32 1" [equalizer.cpp:72]   --->   Operation 365 'add' 'add_ln72_13' <Predicate = (state_2 == 17 & icmp_ln68_5)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_14 : Operation 366 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.14" [equalizer.cpp:73]   --->   Operation 366 'br' 'br_ln73' <Predicate = (state_2 == 17 & icmp_ln68_5)> <Delay = 1.58>

State 15 <SV = 20> <Delay = 7.30>
ST_15 : Operation 367 [1/1] (7.30ns)   --->   "%gmem_addr_read_5 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 367 'read' 'gmem_addr_read_5' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_15 : Operation 368 [1/1] (0.00ns)   --->   "%signal_shift_reg_4_load = load i32 %signal_shift_reg_4" [equalizer.cpp:85]   --->   Operation 368 'load' 'signal_shift_reg_4_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_15 : Operation 369 [1/1] (0.00ns)   --->   "%store_ln85 = store i32 %signal_shift_reg_3_load, i32 %signal_shift_reg_4" [equalizer.cpp:85]   --->   Operation 369 'store' 'store_ln85' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_15 : Operation 370 [2/2] (6.91ns)   --->   "%mul_ln86_27 = mul i32 %signal_shift_reg_3_load, i32 %gmem_addr_read_4" [equalizer.cpp:86]   --->   Operation 370 'mul' 'mul_ln86_27' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_15 : Operation 371 [1/2] (6.91ns)   --->   "%mul_ln86_28 = mul i32 %signal_shift_reg_2_load, i32 %gmem_addr_read_3" [equalizer.cpp:86]   --->   Operation 371 'mul' 'mul_ln86_28' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_15 : Operation 372 [2/5] (7.30ns)   --->   "%gmem_addr_10_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_10" [equalizer.cpp:69]   --->   Operation 372 'writeresp' 'gmem_addr_10_resp' <Predicate = (state_2 == 17 & icmp_ln68_1)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_15 : Operation 373 [3/5] (7.30ns)   --->   "%gmem_addr_11_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_11" [equalizer.cpp:69]   --->   Operation 373 'writeresp' 'gmem_addr_11_resp' <Predicate = (state_2 == 17 & icmp_ln68_2)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_15 : Operation 374 [4/5] (7.30ns)   --->   "%gmem_addr_12_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_12" [equalizer.cpp:69]   --->   Operation 374 'writeresp' 'gmem_addr_12_resp' <Predicate = (state_2 == 17 & icmp_ln68_3)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_15 : Operation 375 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_13, i32 %tmp_data_V_4_11, i4 15" [equalizer.cpp:69]   --->   Operation 375 'write' 'write_ln69' <Predicate = (state_2 == 17 & icmp_ln68_4)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_15 : Operation 376 [1/1] (7.30ns)   --->   "%gmem_addr_14_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_14, i32 1" [equalizer.cpp:69]   --->   Operation 376 'writereq' 'gmem_addr_14_req' <Predicate = (state_2 == 17 & icmp_ln68_5)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_15 : Operation 377 [1/1] (0.00ns)   --->   "%tmp_last_V_4_13 = phi i1 %input_r_V_last_V_val13, void %if.then10.13, i1 %tmp_last_V_4_12, void %for.body.split.13"   --->   Operation 377 'phi' 'tmp_last_V_4_13' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_15 : Operation 378 [1/1] (0.00ns)   --->   "%tmp_data_V_4_13 = phi i32 %input_r_V_data_V_val13, void %if.then10.13, i32 %tmp_data_V_4_12, void %for.body.split.13"   --->   Operation 378 'phi' 'tmp_data_V_4_13' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_15 : Operation 379 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_21)   --->   "%i_4_13 = phi i32 %add_ln72_13, void %if.then10.13, i32 %select_ln63_19, void %for.body.split.13" [equalizer.cpp:72]   --->   Operation 379 'phi' 'i_4_13' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_15 : Operation 380 [1/1] (2.47ns)   --->   "%icmp_ln63_14 = icmp_eq  i32 %tmp_data_V_4_13, i32 43962" [equalizer.cpp:63]   --->   Operation 380 'icmp' 'icmp_ln63_14' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_15 : Operation 381 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_21 = select i1 %icmp_ln63_14, i32 0, i32 %i_4_13" [equalizer.cpp:63]   --->   Operation 381 'select' 'select_ln63_21' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_15 : Operation 382 [1/1] (0.69ns)   --->   "%select_ln63_22 = select i1 %icmp_ln63_14, i13 4096, i13 %select_ln63_20" [equalizer.cpp:63]   --->   Operation 382 'select' 'select_ln63_22' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_15 : Operation 383 [1/1] (2.09ns)   --->   "%icmp_ln68_6 = icmp_eq  i13 %select_ln63_22, i13 17" [equalizer.cpp:68]   --->   Operation 383 'icmp' 'icmp_ln68_6' <Predicate = (state_2 == 17)> <Delay = 2.09> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.09> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_15 : Operation 384 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %icmp_ln68_6, void %for.body.split.15, void %if.then10.14" [equalizer.cpp:68]   --->   Operation 384 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_15 : Operation 385 [1/1] (0.00ns)   --->   "%shl_ln69_13 = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_21, i2 0" [equalizer.cpp:69]   --->   Operation 385 'bitconcatenate' 'shl_ln69_13' <Predicate = (state_2 == 17 & icmp_ln68_6)> <Delay = 0.00>
ST_15 : Operation 386 [1/1] (0.00ns)   --->   "%sext_ln69_28 = sext i34 %shl_ln69_13" [equalizer.cpp:69]   --->   Operation 386 'sext' 'sext_ln69_28' <Predicate = (state_2 == 17 & icmp_ln68_6)> <Delay = 0.00>
ST_15 : Operation 387 [1/1] (3.52ns)   --->   "%add_ln69_14 = add i64 %sext_ln69_28, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 387 'add' 'add_ln69_14' <Predicate = (state_2 == 17 & icmp_ln68_6)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_15 : Operation 388 [1/1] (0.00ns)   --->   "%trunc_ln69_13 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_14, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 388 'partselect' 'trunc_ln69_13' <Predicate = (state_2 == 17 & icmp_ln68_6)> <Delay = 0.00>
ST_15 : Operation 389 [1/1] (0.00ns)   --->   "%sext_ln69_29 = sext i62 %trunc_ln69_13" [equalizer.cpp:69]   --->   Operation 389 'sext' 'sext_ln69_29' <Predicate = (state_2 == 17 & icmp_ln68_6)> <Delay = 0.00>
ST_15 : Operation 390 [1/1] (0.00ns)   --->   "%gmem_addr_15 = getelementptr i32 %gmem, i64 %sext_ln69_29" [equalizer.cpp:69]   --->   Operation 390 'getelementptr' 'gmem_addr_15' <Predicate = (state_2 == 17 & icmp_ln68_6)> <Delay = 0.00>
ST_15 : Operation 391 [1/1] (2.55ns)   --->   "%add_ln72_14 = add i32 %select_ln63_21, i32 1" [equalizer.cpp:72]   --->   Operation 391 'add' 'add_ln72_14' <Predicate = (state_2 == 17 & icmp_ln68_6)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 16 <SV = 21> <Delay = 7.30>
ST_16 : Operation 392 [1/1] (7.30ns)   --->   "%gmem_addr_read_6 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 392 'read' 'gmem_addr_read_6' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_16 : Operation 393 [1/1] (0.00ns)   --->   "%signal_shift_reg_5_load = load i32 %signal_shift_reg_5" [equalizer.cpp:85]   --->   Operation 393 'load' 'signal_shift_reg_5_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_16 : Operation 394 [1/1] (0.00ns)   --->   "%store_ln85 = store i32 %signal_shift_reg_4_load, i32 %signal_shift_reg_5" [equalizer.cpp:85]   --->   Operation 394 'store' 'store_ln85' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_16 : Operation 395 [2/2] (6.91ns)   --->   "%mul_ln86_26 = mul i32 %signal_shift_reg_4_load, i32 %gmem_addr_read_5" [equalizer.cpp:86]   --->   Operation 395 'mul' 'mul_ln86_26' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_16 : Operation 396 [1/2] (6.91ns)   --->   "%mul_ln86_27 = mul i32 %signal_shift_reg_3_load, i32 %gmem_addr_read_4" [equalizer.cpp:86]   --->   Operation 396 'mul' 'mul_ln86_27' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_16 : Operation 397 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln89_26 = add i32 %mul_ln86_29, i32 %mul_ln86_30" [equalizer.cpp:89]   --->   Operation 397 'add' 'add_ln89_26' <Predicate = (state_2 == 4096)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_16 : Operation 398 [1/1] (4.37ns) (root node of TernaryAdder)   --->   "%add_ln89_27 = add i32 %add_ln89_26, i32 %mul_ln86_28" [equalizer.cpp:89]   --->   Operation 398 'add' 'add_ln89_27' <Predicate = (state_2 == 4096)> <Delay = 4.37> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_16 : Operation 399 [1/5] (7.30ns)   --->   "%gmem_addr_10_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_10" [equalizer.cpp:69]   --->   Operation 399 'writeresp' 'gmem_addr_10_resp' <Predicate = (state_2 == 17 & icmp_ln68_1)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_16 : Operation 400 [2/5] (7.30ns)   --->   "%gmem_addr_11_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_11" [equalizer.cpp:69]   --->   Operation 400 'writeresp' 'gmem_addr_11_resp' <Predicate = (state_2 == 17 & icmp_ln68_2)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_16 : Operation 401 [3/5] (7.30ns)   --->   "%gmem_addr_12_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_12" [equalizer.cpp:69]   --->   Operation 401 'writeresp' 'gmem_addr_12_resp' <Predicate = (state_2 == 17 & icmp_ln68_3)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_16 : Operation 402 [5/5] (7.30ns)   --->   "%gmem_addr_13_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_13" [equalizer.cpp:69]   --->   Operation 402 'writeresp' 'gmem_addr_13_resp' <Predicate = (state_2 == 17 & icmp_ln68_4)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_16 : Operation 403 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_14, i32 %tmp_data_V_4_12, i4 15" [equalizer.cpp:69]   --->   Operation 403 'write' 'write_ln69' <Predicate = (state_2 == 17 & icmp_ln68_5)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_16 : Operation 404 [1/1] (7.30ns)   --->   "%gmem_addr_15_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_15, i32 1" [equalizer.cpp:69]   --->   Operation 404 'writereq' 'gmem_addr_15_req' <Predicate = (state_2 == 17 & icmp_ln68_6)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_16 : Operation 405 [1/1] (0.00ns)   --->   "%empty_33 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 405 'read' 'empty_33' <Predicate = (state_2 == 17 & icmp_ln68_6)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_16 : Operation 406 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val14 = extractvalue i44 %empty_33"   --->   Operation 406 'extractvalue' 'input_r_V_data_V_val14' <Predicate = (state_2 == 17 & icmp_ln68_6)> <Delay = 0.00>
ST_16 : Operation 407 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val14 = extractvalue i44 %empty_33"   --->   Operation 407 'extractvalue' 'input_r_V_last_V_val14' <Predicate = (state_2 == 17 & icmp_ln68_6)> <Delay = 0.00>
ST_16 : Operation 408 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.15" [equalizer.cpp:73]   --->   Operation 408 'br' 'br_ln73' <Predicate = (state_2 == 17 & icmp_ln68_6)> <Delay = 1.58>
ST_16 : Operation 409 [1/1] (0.00ns)   --->   "%tmp_data_V_4_14 = phi i32 %input_r_V_data_V_val14, void %if.then10.14, i32 %tmp_data_V_4_13, void %for.body.split.14"   --->   Operation 409 'phi' 'tmp_data_V_4_14' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_16 : Operation 410 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_23)   --->   "%i_4_14 = phi i32 %add_ln72_14, void %if.then10.14, i32 %select_ln63_21, void %for.body.split.14" [equalizer.cpp:72]   --->   Operation 410 'phi' 'i_4_14' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_16 : Operation 411 [1/1] (2.47ns)   --->   "%icmp_ln63_15 = icmp_eq  i32 %tmp_data_V_4_14, i32 43962" [equalizer.cpp:63]   --->   Operation 411 'icmp' 'icmp_ln63_15' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_16 : Operation 412 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_23 = select i1 %icmp_ln63_15, i32 0, i32 %i_4_14" [equalizer.cpp:63]   --->   Operation 412 'select' 'select_ln63_23' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_16 : Operation 413 [1/1] (0.69ns)   --->   "%select_ln63_24 = select i1 %icmp_ln63_15, i13 4096, i13 %select_ln63_22" [equalizer.cpp:63]   --->   Operation 413 'select' 'select_ln63_24' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_16 : Operation 414 [1/1] (2.09ns)   --->   "%icmp_ln68_7 = icmp_eq  i13 %select_ln63_24, i13 17" [equalizer.cpp:68]   --->   Operation 414 'icmp' 'icmp_ln68_7' <Predicate = (state_2 == 17)> <Delay = 2.09> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.09> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>

State 17 <SV = 22> <Delay = 7.30>
ST_17 : Operation 415 [1/1] (7.30ns)   --->   "%gmem_addr_read_7 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 415 'read' 'gmem_addr_read_7' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_17 : Operation 416 [1/1] (0.00ns)   --->   "%signal_shift_reg_6_load = load i32 %signal_shift_reg_6" [equalizer.cpp:85]   --->   Operation 416 'load' 'signal_shift_reg_6_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_17 : Operation 417 [1/1] (0.00ns)   --->   "%store_ln85 = store i32 %signal_shift_reg_5_load, i32 %signal_shift_reg_6" [equalizer.cpp:85]   --->   Operation 417 'store' 'store_ln85' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_17 : Operation 418 [2/2] (6.91ns)   --->   "%mul_ln86_25 = mul i32 %signal_shift_reg_5_load, i32 %gmem_addr_read_6" [equalizer.cpp:86]   --->   Operation 418 'mul' 'mul_ln86_25' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_17 : Operation 419 [1/2] (6.91ns)   --->   "%mul_ln86_26 = mul i32 %signal_shift_reg_4_load, i32 %gmem_addr_read_5" [equalizer.cpp:86]   --->   Operation 419 'mul' 'mul_ln86_26' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_17 : Operation 420 [1/5] (7.30ns)   --->   "%gmem_addr_11_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_11" [equalizer.cpp:69]   --->   Operation 420 'writeresp' 'gmem_addr_11_resp' <Predicate = (state_2 == 17 & icmp_ln68_2)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_17 : Operation 421 [2/5] (7.30ns)   --->   "%gmem_addr_12_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_12" [equalizer.cpp:69]   --->   Operation 421 'writeresp' 'gmem_addr_12_resp' <Predicate = (state_2 == 17 & icmp_ln68_3)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_17 : Operation 422 [4/5] (7.30ns)   --->   "%gmem_addr_13_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_13" [equalizer.cpp:69]   --->   Operation 422 'writeresp' 'gmem_addr_13_resp' <Predicate = (state_2 == 17 & icmp_ln68_4)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_17 : Operation 423 [5/5] (7.30ns)   --->   "%gmem_addr_14_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_14" [equalizer.cpp:69]   --->   Operation 423 'writeresp' 'gmem_addr_14_resp' <Predicate = (state_2 == 17 & icmp_ln68_5)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_17 : Operation 424 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_15, i32 %tmp_data_V_4_13, i4 15" [equalizer.cpp:69]   --->   Operation 424 'write' 'write_ln69' <Predicate = (state_2 == 17 & icmp_ln68_6)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_17 : Operation 425 [1/1] (0.00ns)   --->   "%tmp_last_V_4_14 = phi i1 %input_r_V_last_V_val14, void %if.then10.14, i1 %tmp_last_V_4_13, void %for.body.split.14"   --->   Operation 425 'phi' 'tmp_last_V_4_14' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_17 : Operation 426 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %icmp_ln68_7, void %for.body.split.16, void %if.then10.15" [equalizer.cpp:68]   --->   Operation 426 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_17 : Operation 427 [1/1] (0.00ns)   --->   "%shl_ln69_14 = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_23, i2 0" [equalizer.cpp:69]   --->   Operation 427 'bitconcatenate' 'shl_ln69_14' <Predicate = (state_2 == 17 & icmp_ln68_7)> <Delay = 0.00>
ST_17 : Operation 428 [1/1] (0.00ns)   --->   "%sext_ln69_30 = sext i34 %shl_ln69_14" [equalizer.cpp:69]   --->   Operation 428 'sext' 'sext_ln69_30' <Predicate = (state_2 == 17 & icmp_ln68_7)> <Delay = 0.00>
ST_17 : Operation 429 [1/1] (3.52ns)   --->   "%add_ln69_15 = add i64 %sext_ln69_30, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 429 'add' 'add_ln69_15' <Predicate = (state_2 == 17 & icmp_ln68_7)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_17 : Operation 430 [1/1] (0.00ns)   --->   "%trunc_ln69_14 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_15, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 430 'partselect' 'trunc_ln69_14' <Predicate = (state_2 == 17 & icmp_ln68_7)> <Delay = 0.00>
ST_17 : Operation 431 [1/1] (0.00ns)   --->   "%sext_ln69_31 = sext i62 %trunc_ln69_14" [equalizer.cpp:69]   --->   Operation 431 'sext' 'sext_ln69_31' <Predicate = (state_2 == 17 & icmp_ln68_7)> <Delay = 0.00>
ST_17 : Operation 432 [1/1] (0.00ns)   --->   "%gmem_addr_16 = getelementptr i32 %gmem, i64 %sext_ln69_31" [equalizer.cpp:69]   --->   Operation 432 'getelementptr' 'gmem_addr_16' <Predicate = (state_2 == 17 & icmp_ln68_7)> <Delay = 0.00>
ST_17 : Operation 433 [1/1] (0.00ns)   --->   "%empty_34 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 433 'read' 'empty_34' <Predicate = (state_2 == 17 & icmp_ln68_7)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_17 : Operation 434 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val15 = extractvalue i44 %empty_34"   --->   Operation 434 'extractvalue' 'input_r_V_data_V_val15' <Predicate = (state_2 == 17 & icmp_ln68_7)> <Delay = 0.00>
ST_17 : Operation 435 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val15 = extractvalue i44 %empty_34"   --->   Operation 435 'extractvalue' 'input_r_V_last_V_val15' <Predicate = (state_2 == 17 & icmp_ln68_7)> <Delay = 0.00>
ST_17 : Operation 436 [1/1] (2.55ns)   --->   "%add_ln72_15 = add i32 %select_ln63_23, i32 1" [equalizer.cpp:72]   --->   Operation 436 'add' 'add_ln72_15' <Predicate = (state_2 == 17 & icmp_ln68_7)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_17 : Operation 437 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.16" [equalizer.cpp:73]   --->   Operation 437 'br' 'br_ln73' <Predicate = (state_2 == 17 & icmp_ln68_7)> <Delay = 1.58>
ST_17 : Operation 438 [1/1] (0.00ns)   --->   "%tmp_data_V_4_15 = phi i32 %input_r_V_data_V_val15, void %if.then10.15, i32 %tmp_data_V_4_14, void %for.body.split.15"   --->   Operation 438 'phi' 'tmp_data_V_4_15' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_17 : Operation 439 [1/1] (2.47ns)   --->   "%icmp_ln63_16 = icmp_eq  i32 %tmp_data_V_4_15, i32 43962" [equalizer.cpp:63]   --->   Operation 439 'icmp' 'icmp_ln63_16' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>

State 18 <SV = 23> <Delay = 7.30>
ST_18 : Operation 440 [1/1] (7.30ns)   --->   "%gmem_addr_read_8 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 440 'read' 'gmem_addr_read_8' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_18 : Operation 441 [1/1] (0.00ns)   --->   "%signal_shift_reg_7_load = load i32 %signal_shift_reg_7" [equalizer.cpp:85]   --->   Operation 441 'load' 'signal_shift_reg_7_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_18 : Operation 442 [1/1] (0.00ns)   --->   "%store_ln85 = store i32 %signal_shift_reg_6_load, i32 %signal_shift_reg_7" [equalizer.cpp:85]   --->   Operation 442 'store' 'store_ln85' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_18 : Operation 443 [2/2] (6.91ns)   --->   "%mul_ln86_24 = mul i32 %signal_shift_reg_6_load, i32 %gmem_addr_read_7" [equalizer.cpp:86]   --->   Operation 443 'mul' 'mul_ln86_24' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_18 : Operation 444 [1/2] (6.91ns)   --->   "%mul_ln86_25 = mul i32 %signal_shift_reg_5_load, i32 %gmem_addr_read_6" [equalizer.cpp:86]   --->   Operation 444 'mul' 'mul_ln86_25' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_18 : Operation 445 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln89_25 = add i32 %mul_ln86_26, i32 %mul_ln86_27" [equalizer.cpp:89]   --->   Operation 445 'add' 'add_ln89_25' <Predicate = (state_2 == 4096)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_18 : Operation 446 [1/1] (4.37ns) (root node of TernaryAdder)   --->   "%add_ln89_28 = add i32 %add_ln89_27, i32 %add_ln89_25" [equalizer.cpp:89]   --->   Operation 446 'add' 'add_ln89_28' <Predicate = (state_2 == 4096)> <Delay = 4.37> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_18 : Operation 447 [1/5] (7.30ns)   --->   "%gmem_addr_12_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_12" [equalizer.cpp:69]   --->   Operation 447 'writeresp' 'gmem_addr_12_resp' <Predicate = (state_2 == 17 & icmp_ln68_3)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_18 : Operation 448 [3/5] (7.30ns)   --->   "%gmem_addr_13_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_13" [equalizer.cpp:69]   --->   Operation 448 'writeresp' 'gmem_addr_13_resp' <Predicate = (state_2 == 17 & icmp_ln68_4)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_18 : Operation 449 [4/5] (7.30ns)   --->   "%gmem_addr_14_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_14" [equalizer.cpp:69]   --->   Operation 449 'writeresp' 'gmem_addr_14_resp' <Predicate = (state_2 == 17 & icmp_ln68_5)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_18 : Operation 450 [5/5] (7.30ns)   --->   "%gmem_addr_15_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_15" [equalizer.cpp:69]   --->   Operation 450 'writeresp' 'gmem_addr_15_resp' <Predicate = (state_2 == 17 & icmp_ln68_6)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_18 : Operation 451 [1/1] (7.30ns)   --->   "%gmem_addr_16_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_16, i32 1" [equalizer.cpp:69]   --->   Operation 451 'writereq' 'gmem_addr_16_req' <Predicate = (state_2 == 17 & icmp_ln68_7)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_18 : Operation 452 [1/1] (0.00ns)   --->   "%tmp_last_V_4_15 = phi i1 %input_r_V_last_V_val15, void %if.then10.15, i1 %tmp_last_V_4_14, void %for.body.split.15"   --->   Operation 452 'phi' 'tmp_last_V_4_15' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_18 : Operation 453 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_25)   --->   "%i_4_15 = phi i32 %add_ln72_15, void %if.then10.15, i32 %select_ln63_23, void %for.body.split.15" [equalizer.cpp:72]   --->   Operation 453 'phi' 'i_4_15' <Predicate = (state_2 == 17 & !icmp_ln63_16)> <Delay = 0.00>
ST_18 : Operation 454 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_25 = select i1 %icmp_ln63_16, i32 0, i32 %i_4_15" [equalizer.cpp:63]   --->   Operation 454 'select' 'select_ln63_25' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_18 : Operation 455 [1/1] (0.69ns)   --->   "%select_ln63_26 = select i1 %icmp_ln63_16, i13 4096, i13 %select_ln63_24" [equalizer.cpp:63]   --->   Operation 455 'select' 'select_ln63_26' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_18 : Operation 456 [1/1] (2.09ns)   --->   "%icmp_ln68_8 = icmp_eq  i13 %select_ln63_26, i13 17" [equalizer.cpp:68]   --->   Operation 456 'icmp' 'icmp_ln68_8' <Predicate = (state_2 == 17)> <Delay = 2.09> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.09> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_18 : Operation 457 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %icmp_ln68_8, void %for.body.split.17, void %if.then10.16" [equalizer.cpp:68]   --->   Operation 457 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_18 : Operation 458 [1/1] (0.00ns)   --->   "%shl_ln69_15 = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_25, i2 0" [equalizer.cpp:69]   --->   Operation 458 'bitconcatenate' 'shl_ln69_15' <Predicate = (state_2 == 17 & icmp_ln68_8)> <Delay = 0.00>
ST_18 : Operation 459 [1/1] (0.00ns)   --->   "%sext_ln69_32 = sext i34 %shl_ln69_15" [equalizer.cpp:69]   --->   Operation 459 'sext' 'sext_ln69_32' <Predicate = (state_2 == 17 & icmp_ln68_8)> <Delay = 0.00>
ST_18 : Operation 460 [1/1] (3.52ns)   --->   "%add_ln69_16 = add i64 %sext_ln69_32, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 460 'add' 'add_ln69_16' <Predicate = (state_2 == 17 & icmp_ln68_8)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_18 : Operation 461 [1/1] (0.00ns)   --->   "%trunc_ln69_15 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_16, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 461 'partselect' 'trunc_ln69_15' <Predicate = (state_2 == 17 & icmp_ln68_8)> <Delay = 0.00>
ST_18 : Operation 462 [1/1] (0.00ns)   --->   "%sext_ln69_33 = sext i62 %trunc_ln69_15" [equalizer.cpp:69]   --->   Operation 462 'sext' 'sext_ln69_33' <Predicate = (state_2 == 17 & icmp_ln68_8)> <Delay = 0.00>
ST_18 : Operation 463 [1/1] (0.00ns)   --->   "%gmem_addr_17 = getelementptr i32 %gmem, i64 %sext_ln69_33" [equalizer.cpp:69]   --->   Operation 463 'getelementptr' 'gmem_addr_17' <Predicate = (state_2 == 17 & icmp_ln68_8)> <Delay = 0.00>
ST_18 : Operation 464 [1/1] (0.00ns)   --->   "%empty_35 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 464 'read' 'empty_35' <Predicate = (state_2 == 17 & icmp_ln68_8)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_18 : Operation 465 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val16 = extractvalue i44 %empty_35"   --->   Operation 465 'extractvalue' 'input_r_V_data_V_val16' <Predicate = (state_2 == 17 & icmp_ln68_8)> <Delay = 0.00>
ST_18 : Operation 466 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val16 = extractvalue i44 %empty_35"   --->   Operation 466 'extractvalue' 'input_r_V_last_V_val16' <Predicate = (state_2 == 17 & icmp_ln68_8)> <Delay = 0.00>
ST_18 : Operation 467 [1/1] (2.55ns)   --->   "%add_ln72_16 = add i32 %select_ln63_25, i32 1" [equalizer.cpp:72]   --->   Operation 467 'add' 'add_ln72_16' <Predicate = (state_2 == 17 & icmp_ln68_8)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_18 : Operation 468 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.17" [equalizer.cpp:73]   --->   Operation 468 'br' 'br_ln73' <Predicate = (state_2 == 17 & icmp_ln68_8)> <Delay = 1.58>

State 19 <SV = 24> <Delay = 7.30>
ST_19 : Operation 469 [1/1] (7.30ns)   --->   "%gmem_addr_read_9 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 469 'read' 'gmem_addr_read_9' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_19 : Operation 470 [1/1] (0.00ns)   --->   "%signal_shift_reg_8_load = load i32 %signal_shift_reg_8" [equalizer.cpp:85]   --->   Operation 470 'load' 'signal_shift_reg_8_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_19 : Operation 471 [1/1] (0.00ns)   --->   "%store_ln85 = store i32 %signal_shift_reg_7_load, i32 %signal_shift_reg_8" [equalizer.cpp:85]   --->   Operation 471 'store' 'store_ln85' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_19 : Operation 472 [2/2] (6.91ns)   --->   "%mul_ln86_23 = mul i32 %signal_shift_reg_7_load, i32 %gmem_addr_read_8" [equalizer.cpp:86]   --->   Operation 472 'mul' 'mul_ln86_23' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_19 : Operation 473 [1/2] (6.91ns)   --->   "%mul_ln86_24 = mul i32 %signal_shift_reg_6_load, i32 %gmem_addr_read_7" [equalizer.cpp:86]   --->   Operation 473 'mul' 'mul_ln86_24' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_19 : Operation 474 [2/5] (7.30ns)   --->   "%gmem_addr_13_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_13" [equalizer.cpp:69]   --->   Operation 474 'writeresp' 'gmem_addr_13_resp' <Predicate = (state_2 == 17 & icmp_ln68_4)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_19 : Operation 475 [3/5] (7.30ns)   --->   "%gmem_addr_14_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_14" [equalizer.cpp:69]   --->   Operation 475 'writeresp' 'gmem_addr_14_resp' <Predicate = (state_2 == 17 & icmp_ln68_5)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_19 : Operation 476 [4/5] (7.30ns)   --->   "%gmem_addr_15_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_15" [equalizer.cpp:69]   --->   Operation 476 'writeresp' 'gmem_addr_15_resp' <Predicate = (state_2 == 17 & icmp_ln68_6)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_19 : Operation 477 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_16, i32 %tmp_data_V_4_14, i4 15" [equalizer.cpp:69]   --->   Operation 477 'write' 'write_ln69' <Predicate = (state_2 == 17 & icmp_ln68_7)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_19 : Operation 478 [1/1] (7.30ns)   --->   "%gmem_addr_17_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_17, i32 1" [equalizer.cpp:69]   --->   Operation 478 'writereq' 'gmem_addr_17_req' <Predicate = (state_2 == 17 & icmp_ln68_8)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_19 : Operation 479 [1/1] (0.00ns)   --->   "%tmp_last_V_4_16 = phi i1 %input_r_V_last_V_val16, void %if.then10.16, i1 %tmp_last_V_4_15, void %for.body.split.16"   --->   Operation 479 'phi' 'tmp_last_V_4_16' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_19 : Operation 480 [1/1] (0.00ns)   --->   "%tmp_data_V_4_16 = phi i32 %input_r_V_data_V_val16, void %if.then10.16, i32 %tmp_data_V_4_15, void %for.body.split.16"   --->   Operation 480 'phi' 'tmp_data_V_4_16' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_19 : Operation 481 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_27)   --->   "%i_4_16 = phi i32 %add_ln72_16, void %if.then10.16, i32 %select_ln63_25, void %for.body.split.16" [equalizer.cpp:72]   --->   Operation 481 'phi' 'i_4_16' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_19 : Operation 482 [1/1] (2.47ns)   --->   "%icmp_ln63_17 = icmp_eq  i32 %tmp_data_V_4_16, i32 43962" [equalizer.cpp:63]   --->   Operation 482 'icmp' 'icmp_ln63_17' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_19 : Operation 483 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_27 = select i1 %icmp_ln63_17, i32 0, i32 %i_4_16" [equalizer.cpp:63]   --->   Operation 483 'select' 'select_ln63_27' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_19 : Operation 484 [1/1] (0.69ns)   --->   "%select_ln63_28 = select i1 %icmp_ln63_17, i13 4096, i13 %select_ln63_26" [equalizer.cpp:63]   --->   Operation 484 'select' 'select_ln63_28' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_19 : Operation 485 [1/1] (2.09ns)   --->   "%icmp_ln68_9 = icmp_eq  i13 %select_ln63_28, i13 17" [equalizer.cpp:68]   --->   Operation 485 'icmp' 'icmp_ln68_9' <Predicate = (state_2 == 17)> <Delay = 2.09> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.09> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_19 : Operation 486 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %icmp_ln68_9, void %for.body.split.18, void %if.then10.17" [equalizer.cpp:68]   --->   Operation 486 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_19 : Operation 487 [1/1] (0.00ns)   --->   "%shl_ln69_16 = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_27, i2 0" [equalizer.cpp:69]   --->   Operation 487 'bitconcatenate' 'shl_ln69_16' <Predicate = (state_2 == 17 & icmp_ln68_9)> <Delay = 0.00>
ST_19 : Operation 488 [1/1] (0.00ns)   --->   "%sext_ln69_34 = sext i34 %shl_ln69_16" [equalizer.cpp:69]   --->   Operation 488 'sext' 'sext_ln69_34' <Predicate = (state_2 == 17 & icmp_ln68_9)> <Delay = 0.00>
ST_19 : Operation 489 [1/1] (3.52ns)   --->   "%add_ln69_17 = add i64 %sext_ln69_34, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 489 'add' 'add_ln69_17' <Predicate = (state_2 == 17 & icmp_ln68_9)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_19 : Operation 490 [1/1] (0.00ns)   --->   "%trunc_ln69_16 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_17, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 490 'partselect' 'trunc_ln69_16' <Predicate = (state_2 == 17 & icmp_ln68_9)> <Delay = 0.00>
ST_19 : Operation 491 [1/1] (0.00ns)   --->   "%sext_ln69_35 = sext i62 %trunc_ln69_16" [equalizer.cpp:69]   --->   Operation 491 'sext' 'sext_ln69_35' <Predicate = (state_2 == 17 & icmp_ln68_9)> <Delay = 0.00>
ST_19 : Operation 492 [1/1] (0.00ns)   --->   "%gmem_addr_18 = getelementptr i32 %gmem, i64 %sext_ln69_35" [equalizer.cpp:69]   --->   Operation 492 'getelementptr' 'gmem_addr_18' <Predicate = (state_2 == 17 & icmp_ln68_9)> <Delay = 0.00>
ST_19 : Operation 493 [1/1] (2.55ns)   --->   "%add_ln72_17 = add i32 %select_ln63_27, i32 1" [equalizer.cpp:72]   --->   Operation 493 'add' 'add_ln72_17' <Predicate = (state_2 == 17 & icmp_ln68_9)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 20 <SV = 25> <Delay = 7.30>
ST_20 : Operation 494 [1/1] (7.30ns)   --->   "%gmem_addr_read_10 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 494 'read' 'gmem_addr_read_10' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_20 : Operation 495 [1/1] (0.00ns)   --->   "%signal_shift_reg_9_load = load i32 %signal_shift_reg_9" [equalizer.cpp:85]   --->   Operation 495 'load' 'signal_shift_reg_9_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_20 : Operation 496 [1/1] (0.00ns)   --->   "%store_ln85 = store i32 %signal_shift_reg_8_load, i32 %signal_shift_reg_9" [equalizer.cpp:85]   --->   Operation 496 'store' 'store_ln85' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_20 : Operation 497 [2/2] (6.91ns)   --->   "%mul_ln86_22 = mul i32 %signal_shift_reg_8_load, i32 %gmem_addr_read_9" [equalizer.cpp:86]   --->   Operation 497 'mul' 'mul_ln86_22' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_20 : Operation 498 [1/2] (6.91ns)   --->   "%mul_ln86_23 = mul i32 %signal_shift_reg_7_load, i32 %gmem_addr_read_8" [equalizer.cpp:86]   --->   Operation 498 'mul' 'mul_ln86_23' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_20 : Operation 499 [1/1] (2.55ns)   --->   "%add_ln89_23 = add i32 %mul_ln86_24, i32 %mul_ln86_25" [equalizer.cpp:89]   --->   Operation 499 'add' 'add_ln89_23' <Predicate = (state_2 == 4096)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_20 : Operation 500 [1/5] (7.30ns)   --->   "%gmem_addr_13_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_13" [equalizer.cpp:69]   --->   Operation 500 'writeresp' 'gmem_addr_13_resp' <Predicate = (state_2 == 17 & icmp_ln68_4)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_20 : Operation 501 [2/5] (7.30ns)   --->   "%gmem_addr_14_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_14" [equalizer.cpp:69]   --->   Operation 501 'writeresp' 'gmem_addr_14_resp' <Predicate = (state_2 == 17 & icmp_ln68_5)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_20 : Operation 502 [3/5] (7.30ns)   --->   "%gmem_addr_15_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_15" [equalizer.cpp:69]   --->   Operation 502 'writeresp' 'gmem_addr_15_resp' <Predicate = (state_2 == 17 & icmp_ln68_6)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_20 : Operation 503 [5/5] (7.30ns)   --->   "%gmem_addr_16_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_16" [equalizer.cpp:69]   --->   Operation 503 'writeresp' 'gmem_addr_16_resp' <Predicate = (state_2 == 17 & icmp_ln68_7)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_20 : Operation 504 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_17, i32 %tmp_data_V_4_15, i4 15" [equalizer.cpp:69]   --->   Operation 504 'write' 'write_ln69' <Predicate = (state_2 == 17 & icmp_ln68_8)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_20 : Operation 505 [1/1] (7.30ns)   --->   "%gmem_addr_18_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_18, i32 1" [equalizer.cpp:69]   --->   Operation 505 'writereq' 'gmem_addr_18_req' <Predicate = (state_2 == 17 & icmp_ln68_9)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_20 : Operation 506 [1/1] (0.00ns)   --->   "%empty_36 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 506 'read' 'empty_36' <Predicate = (state_2 == 17 & icmp_ln68_9)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_20 : Operation 507 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val17 = extractvalue i44 %empty_36"   --->   Operation 507 'extractvalue' 'input_r_V_data_V_val17' <Predicate = (state_2 == 17 & icmp_ln68_9)> <Delay = 0.00>
ST_20 : Operation 508 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val17 = extractvalue i44 %empty_36"   --->   Operation 508 'extractvalue' 'input_r_V_last_V_val17' <Predicate = (state_2 == 17 & icmp_ln68_9)> <Delay = 0.00>
ST_20 : Operation 509 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.18" [equalizer.cpp:73]   --->   Operation 509 'br' 'br_ln73' <Predicate = (state_2 == 17 & icmp_ln68_9)> <Delay = 1.58>
ST_20 : Operation 510 [1/1] (0.00ns)   --->   "%tmp_data_V_4_17 = phi i32 %input_r_V_data_V_val17, void %if.then10.17, i32 %tmp_data_V_4_16, void %for.body.split.17"   --->   Operation 510 'phi' 'tmp_data_V_4_17' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_20 : Operation 511 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_29)   --->   "%i_4_17 = phi i32 %add_ln72_17, void %if.then10.17, i32 %select_ln63_27, void %for.body.split.17" [equalizer.cpp:72]   --->   Operation 511 'phi' 'i_4_17' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_20 : Operation 512 [1/1] (2.47ns)   --->   "%icmp_ln63_18 = icmp_eq  i32 %tmp_data_V_4_17, i32 43962" [equalizer.cpp:63]   --->   Operation 512 'icmp' 'icmp_ln63_18' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_20 : Operation 513 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_29 = select i1 %icmp_ln63_18, i32 0, i32 %i_4_17" [equalizer.cpp:63]   --->   Operation 513 'select' 'select_ln63_29' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_20 : Operation 514 [1/1] (0.69ns)   --->   "%select_ln63_30 = select i1 %icmp_ln63_18, i13 4096, i13 %select_ln63_28" [equalizer.cpp:63]   --->   Operation 514 'select' 'select_ln63_30' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_20 : Operation 515 [1/1] (2.09ns)   --->   "%icmp_ln68_10 = icmp_eq  i13 %select_ln63_30, i13 17" [equalizer.cpp:68]   --->   Operation 515 'icmp' 'icmp_ln68_10' <Predicate = (state_2 == 17)> <Delay = 2.09> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.09> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>

State 21 <SV = 26> <Delay = 7.30>
ST_21 : Operation 516 [1/1] (7.30ns)   --->   "%gmem_addr_read_11 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 516 'read' 'gmem_addr_read_11' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_21 : Operation 517 [1/1] (0.00ns)   --->   "%signal_shift_reg_10_load = load i32 %signal_shift_reg_10" [equalizer.cpp:85]   --->   Operation 517 'load' 'signal_shift_reg_10_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_21 : Operation 518 [1/1] (0.00ns)   --->   "%store_ln85 = store i32 %signal_shift_reg_9_load, i32 %signal_shift_reg_10" [equalizer.cpp:85]   --->   Operation 518 'store' 'store_ln85' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_21 : Operation 519 [2/2] (6.91ns)   --->   "%mul_ln86_21 = mul i32 %signal_shift_reg_9_load, i32 %gmem_addr_read_10" [equalizer.cpp:86]   --->   Operation 519 'mul' 'mul_ln86_21' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_21 : Operation 520 [1/2] (6.91ns)   --->   "%mul_ln86_22 = mul i32 %signal_shift_reg_8_load, i32 %gmem_addr_read_9" [equalizer.cpp:86]   --->   Operation 520 'mul' 'mul_ln86_22' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_21 : Operation 521 [1/5] (7.30ns)   --->   "%gmem_addr_14_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_14" [equalizer.cpp:69]   --->   Operation 521 'writeresp' 'gmem_addr_14_resp' <Predicate = (state_2 == 17 & icmp_ln68_5)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_21 : Operation 522 [2/5] (7.30ns)   --->   "%gmem_addr_15_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_15" [equalizer.cpp:69]   --->   Operation 522 'writeresp' 'gmem_addr_15_resp' <Predicate = (state_2 == 17 & icmp_ln68_6)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_21 : Operation 523 [4/5] (7.30ns)   --->   "%gmem_addr_16_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_16" [equalizer.cpp:69]   --->   Operation 523 'writeresp' 'gmem_addr_16_resp' <Predicate = (state_2 == 17 & icmp_ln68_7)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_21 : Operation 524 [5/5] (7.30ns)   --->   "%gmem_addr_17_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_17" [equalizer.cpp:69]   --->   Operation 524 'writeresp' 'gmem_addr_17_resp' <Predicate = (state_2 == 17 & icmp_ln68_8)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_21 : Operation 525 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_18, i32 %tmp_data_V_4_16, i4 15" [equalizer.cpp:69]   --->   Operation 525 'write' 'write_ln69' <Predicate = (state_2 == 17 & icmp_ln68_9)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_21 : Operation 526 [1/1] (0.00ns)   --->   "%tmp_last_V_4_17 = phi i1 %input_r_V_last_V_val17, void %if.then10.17, i1 %tmp_last_V_4_16, void %for.body.split.17"   --->   Operation 526 'phi' 'tmp_last_V_4_17' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_21 : Operation 527 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %icmp_ln68_10, void %for.body.split.19, void %if.then10.18" [equalizer.cpp:68]   --->   Operation 527 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_21 : Operation 528 [1/1] (0.00ns)   --->   "%shl_ln69_17 = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_29, i2 0" [equalizer.cpp:69]   --->   Operation 528 'bitconcatenate' 'shl_ln69_17' <Predicate = (state_2 == 17 & icmp_ln68_10)> <Delay = 0.00>
ST_21 : Operation 529 [1/1] (0.00ns)   --->   "%sext_ln69_36 = sext i34 %shl_ln69_17" [equalizer.cpp:69]   --->   Operation 529 'sext' 'sext_ln69_36' <Predicate = (state_2 == 17 & icmp_ln68_10)> <Delay = 0.00>
ST_21 : Operation 530 [1/1] (3.52ns)   --->   "%add_ln69_18 = add i64 %sext_ln69_36, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 530 'add' 'add_ln69_18' <Predicate = (state_2 == 17 & icmp_ln68_10)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_21 : Operation 531 [1/1] (0.00ns)   --->   "%trunc_ln69_17 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_18, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 531 'partselect' 'trunc_ln69_17' <Predicate = (state_2 == 17 & icmp_ln68_10)> <Delay = 0.00>
ST_21 : Operation 532 [1/1] (0.00ns)   --->   "%sext_ln69_37 = sext i62 %trunc_ln69_17" [equalizer.cpp:69]   --->   Operation 532 'sext' 'sext_ln69_37' <Predicate = (state_2 == 17 & icmp_ln68_10)> <Delay = 0.00>
ST_21 : Operation 533 [1/1] (0.00ns)   --->   "%gmem_addr_19 = getelementptr i32 %gmem, i64 %sext_ln69_37" [equalizer.cpp:69]   --->   Operation 533 'getelementptr' 'gmem_addr_19' <Predicate = (state_2 == 17 & icmp_ln68_10)> <Delay = 0.00>
ST_21 : Operation 534 [1/1] (0.00ns)   --->   "%empty_37 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 534 'read' 'empty_37' <Predicate = (state_2 == 17 & icmp_ln68_10)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_21 : Operation 535 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val18 = extractvalue i44 %empty_37"   --->   Operation 535 'extractvalue' 'input_r_V_data_V_val18' <Predicate = (state_2 == 17 & icmp_ln68_10)> <Delay = 0.00>
ST_21 : Operation 536 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val18 = extractvalue i44 %empty_37"   --->   Operation 536 'extractvalue' 'input_r_V_last_V_val18' <Predicate = (state_2 == 17 & icmp_ln68_10)> <Delay = 0.00>
ST_21 : Operation 537 [1/1] (2.55ns)   --->   "%add_ln72_18 = add i32 %select_ln63_29, i32 1" [equalizer.cpp:72]   --->   Operation 537 'add' 'add_ln72_18' <Predicate = (state_2 == 17 & icmp_ln68_10)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_21 : Operation 538 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.19" [equalizer.cpp:73]   --->   Operation 538 'br' 'br_ln73' <Predicate = (state_2 == 17 & icmp_ln68_10)> <Delay = 1.58>
ST_21 : Operation 539 [1/1] (0.00ns)   --->   "%tmp_data_V_4_18 = phi i32 %input_r_V_data_V_val18, void %if.then10.18, i32 %tmp_data_V_4_17, void %for.body.split.18"   --->   Operation 539 'phi' 'tmp_data_V_4_18' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_21 : Operation 540 [1/1] (2.47ns)   --->   "%icmp_ln63_19 = icmp_eq  i32 %tmp_data_V_4_18, i32 43962" [equalizer.cpp:63]   --->   Operation 540 'icmp' 'icmp_ln63_19' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>

State 22 <SV = 27> <Delay = 7.30>
ST_22 : Operation 541 [1/1] (7.30ns)   --->   "%gmem_addr_read_12 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 541 'read' 'gmem_addr_read_12' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_22 : Operation 542 [1/1] (0.00ns)   --->   "%signal_shift_reg_11_load = load i32 %signal_shift_reg_11" [equalizer.cpp:85]   --->   Operation 542 'load' 'signal_shift_reg_11_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_22 : Operation 543 [1/1] (0.00ns)   --->   "%store_ln85 = store i32 %signal_shift_reg_10_load, i32 %signal_shift_reg_11" [equalizer.cpp:85]   --->   Operation 543 'store' 'store_ln85' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_22 : Operation 544 [2/2] (6.91ns)   --->   "%mul_ln86_20 = mul i32 %signal_shift_reg_10_load, i32 %gmem_addr_read_11" [equalizer.cpp:86]   --->   Operation 544 'mul' 'mul_ln86_20' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_22 : Operation 545 [1/2] (6.91ns)   --->   "%mul_ln86_21 = mul i32 %signal_shift_reg_9_load, i32 %gmem_addr_read_10" [equalizer.cpp:86]   --->   Operation 545 'mul' 'mul_ln86_21' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_22 : Operation 546 [1/1] (2.55ns)   --->   "%add_ln89_22 = add i32 %mul_ln86_22, i32 %mul_ln86_23" [equalizer.cpp:89]   --->   Operation 546 'add' 'add_ln89_22' <Predicate = (state_2 == 4096)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_22 : Operation 547 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln89_24 = add i32 %add_ln89_23, i32 %add_ln89_22" [equalizer.cpp:89]   --->   Operation 547 'add' 'add_ln89_24' <Predicate = (state_2 == 4096)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_22 : Operation 548 [1/1] (4.37ns) (root node of TernaryAdder)   --->   "%add_ln89_29 = add i32 %add_ln89_28, i32 %add_ln89_24" [equalizer.cpp:89]   --->   Operation 548 'add' 'add_ln89_29' <Predicate = (state_2 == 4096)> <Delay = 4.37> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_22 : Operation 549 [1/5] (7.30ns)   --->   "%gmem_addr_15_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_15" [equalizer.cpp:69]   --->   Operation 549 'writeresp' 'gmem_addr_15_resp' <Predicate = (state_2 == 17 & icmp_ln68_6)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_22 : Operation 550 [3/5] (7.30ns)   --->   "%gmem_addr_16_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_16" [equalizer.cpp:69]   --->   Operation 550 'writeresp' 'gmem_addr_16_resp' <Predicate = (state_2 == 17 & icmp_ln68_7)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_22 : Operation 551 [4/5] (7.30ns)   --->   "%gmem_addr_17_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_17" [equalizer.cpp:69]   --->   Operation 551 'writeresp' 'gmem_addr_17_resp' <Predicate = (state_2 == 17 & icmp_ln68_8)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_22 : Operation 552 [5/5] (7.30ns)   --->   "%gmem_addr_18_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_18" [equalizer.cpp:69]   --->   Operation 552 'writeresp' 'gmem_addr_18_resp' <Predicate = (state_2 == 17 & icmp_ln68_9)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_22 : Operation 553 [1/1] (7.30ns)   --->   "%gmem_addr_19_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_19, i32 1" [equalizer.cpp:69]   --->   Operation 553 'writereq' 'gmem_addr_19_req' <Predicate = (state_2 == 17 & icmp_ln68_10)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_22 : Operation 554 [1/1] (0.00ns)   --->   "%tmp_last_V_4_18 = phi i1 %input_r_V_last_V_val18, void %if.then10.18, i1 %tmp_last_V_4_17, void %for.body.split.18"   --->   Operation 554 'phi' 'tmp_last_V_4_18' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_22 : Operation 555 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_31)   --->   "%i_4_18 = phi i32 %add_ln72_18, void %if.then10.18, i32 %select_ln63_29, void %for.body.split.18" [equalizer.cpp:72]   --->   Operation 555 'phi' 'i_4_18' <Predicate = (state_2 == 17 & !icmp_ln63_19)> <Delay = 0.00>
ST_22 : Operation 556 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_31 = select i1 %icmp_ln63_19, i32 0, i32 %i_4_18" [equalizer.cpp:63]   --->   Operation 556 'select' 'select_ln63_31' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_22 : Operation 557 [1/1] (0.69ns)   --->   "%select_ln63_32 = select i1 %icmp_ln63_19, i13 4096, i13 %select_ln63_30" [equalizer.cpp:63]   --->   Operation 557 'select' 'select_ln63_32' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_22 : Operation 558 [1/1] (2.09ns)   --->   "%icmp_ln68_11 = icmp_eq  i13 %select_ln63_32, i13 17" [equalizer.cpp:68]   --->   Operation 558 'icmp' 'icmp_ln68_11' <Predicate = (state_2 == 17)> <Delay = 2.09> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.09> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_22 : Operation 559 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %icmp_ln68_11, void %for.body.split.20, void %if.then10.19" [equalizer.cpp:68]   --->   Operation 559 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_22 : Operation 560 [1/1] (0.00ns)   --->   "%shl_ln69_18 = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_31, i2 0" [equalizer.cpp:69]   --->   Operation 560 'bitconcatenate' 'shl_ln69_18' <Predicate = (state_2 == 17 & icmp_ln68_11)> <Delay = 0.00>
ST_22 : Operation 561 [1/1] (0.00ns)   --->   "%sext_ln69_38 = sext i34 %shl_ln69_18" [equalizer.cpp:69]   --->   Operation 561 'sext' 'sext_ln69_38' <Predicate = (state_2 == 17 & icmp_ln68_11)> <Delay = 0.00>
ST_22 : Operation 562 [1/1] (3.52ns)   --->   "%add_ln69_19 = add i64 %sext_ln69_38, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 562 'add' 'add_ln69_19' <Predicate = (state_2 == 17 & icmp_ln68_11)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_22 : Operation 563 [1/1] (0.00ns)   --->   "%trunc_ln69_18 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_19, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 563 'partselect' 'trunc_ln69_18' <Predicate = (state_2 == 17 & icmp_ln68_11)> <Delay = 0.00>
ST_22 : Operation 564 [1/1] (0.00ns)   --->   "%sext_ln69_39 = sext i62 %trunc_ln69_18" [equalizer.cpp:69]   --->   Operation 564 'sext' 'sext_ln69_39' <Predicate = (state_2 == 17 & icmp_ln68_11)> <Delay = 0.00>
ST_22 : Operation 565 [1/1] (0.00ns)   --->   "%gmem_addr_20 = getelementptr i32 %gmem, i64 %sext_ln69_39" [equalizer.cpp:69]   --->   Operation 565 'getelementptr' 'gmem_addr_20' <Predicate = (state_2 == 17 & icmp_ln68_11)> <Delay = 0.00>
ST_22 : Operation 566 [1/1] (0.00ns)   --->   "%empty_38 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 566 'read' 'empty_38' <Predicate = (state_2 == 17 & icmp_ln68_11)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_22 : Operation 567 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val19 = extractvalue i44 %empty_38"   --->   Operation 567 'extractvalue' 'input_r_V_data_V_val19' <Predicate = (state_2 == 17 & icmp_ln68_11)> <Delay = 0.00>
ST_22 : Operation 568 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val19 = extractvalue i44 %empty_38"   --->   Operation 568 'extractvalue' 'input_r_V_last_V_val19' <Predicate = (state_2 == 17 & icmp_ln68_11)> <Delay = 0.00>
ST_22 : Operation 569 [1/1] (2.55ns)   --->   "%add_ln72_19 = add i32 %select_ln63_31, i32 1" [equalizer.cpp:72]   --->   Operation 569 'add' 'add_ln72_19' <Predicate = (state_2 == 17 & icmp_ln68_11)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_22 : Operation 570 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.20" [equalizer.cpp:73]   --->   Operation 570 'br' 'br_ln73' <Predicate = (state_2 == 17 & icmp_ln68_11)> <Delay = 1.58>

State 23 <SV = 28> <Delay = 7.30>
ST_23 : Operation 571 [1/1] (7.30ns)   --->   "%gmem_addr_read_13 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 571 'read' 'gmem_addr_read_13' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_23 : Operation 572 [1/1] (0.00ns)   --->   "%signal_shift_reg_12_load = load i32 %signal_shift_reg_12" [equalizer.cpp:85]   --->   Operation 572 'load' 'signal_shift_reg_12_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_23 : Operation 573 [1/1] (0.00ns)   --->   "%store_ln85 = store i32 %signal_shift_reg_11_load, i32 %signal_shift_reg_12" [equalizer.cpp:85]   --->   Operation 573 'store' 'store_ln85' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_23 : Operation 574 [2/2] (6.91ns)   --->   "%mul_ln86_19 = mul i32 %signal_shift_reg_11_load, i32 %gmem_addr_read_12" [equalizer.cpp:86]   --->   Operation 574 'mul' 'mul_ln86_19' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_23 : Operation 575 [1/2] (6.91ns)   --->   "%mul_ln86_20 = mul i32 %signal_shift_reg_10_load, i32 %gmem_addr_read_11" [equalizer.cpp:86]   --->   Operation 575 'mul' 'mul_ln86_20' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_23 : Operation 576 [2/5] (7.30ns)   --->   "%gmem_addr_16_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_16" [equalizer.cpp:69]   --->   Operation 576 'writeresp' 'gmem_addr_16_resp' <Predicate = (state_2 == 17 & icmp_ln68_7)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_23 : Operation 577 [3/5] (7.30ns)   --->   "%gmem_addr_17_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_17" [equalizer.cpp:69]   --->   Operation 577 'writeresp' 'gmem_addr_17_resp' <Predicate = (state_2 == 17 & icmp_ln68_8)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_23 : Operation 578 [4/5] (7.30ns)   --->   "%gmem_addr_18_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_18" [equalizer.cpp:69]   --->   Operation 578 'writeresp' 'gmem_addr_18_resp' <Predicate = (state_2 == 17 & icmp_ln68_9)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_23 : Operation 579 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_19, i32 %tmp_data_V_4_17, i4 15" [equalizer.cpp:69]   --->   Operation 579 'write' 'write_ln69' <Predicate = (state_2 == 17 & icmp_ln68_10)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_23 : Operation 580 [1/1] (7.30ns)   --->   "%gmem_addr_20_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_20, i32 1" [equalizer.cpp:69]   --->   Operation 580 'writereq' 'gmem_addr_20_req' <Predicate = (state_2 == 17 & icmp_ln68_11)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_23 : Operation 581 [1/1] (0.00ns)   --->   "%tmp_last_V_4_19 = phi i1 %input_r_V_last_V_val19, void %if.then10.19, i1 %tmp_last_V_4_18, void %for.body.split.19"   --->   Operation 581 'phi' 'tmp_last_V_4_19' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_23 : Operation 582 [1/1] (0.00ns)   --->   "%tmp_data_V_4_19 = phi i32 %input_r_V_data_V_val19, void %if.then10.19, i32 %tmp_data_V_4_18, void %for.body.split.19"   --->   Operation 582 'phi' 'tmp_data_V_4_19' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_23 : Operation 583 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_33)   --->   "%i_4_19 = phi i32 %add_ln72_19, void %if.then10.19, i32 %select_ln63_31, void %for.body.split.19" [equalizer.cpp:72]   --->   Operation 583 'phi' 'i_4_19' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_23 : Operation 584 [1/1] (2.47ns)   --->   "%icmp_ln63_20 = icmp_eq  i32 %tmp_data_V_4_19, i32 43962" [equalizer.cpp:63]   --->   Operation 584 'icmp' 'icmp_ln63_20' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_23 : Operation 585 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_33 = select i1 %icmp_ln63_20, i32 0, i32 %i_4_19" [equalizer.cpp:63]   --->   Operation 585 'select' 'select_ln63_33' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_23 : Operation 586 [1/1] (0.69ns)   --->   "%select_ln63_34 = select i1 %icmp_ln63_20, i13 4096, i13 %select_ln63_32" [equalizer.cpp:63]   --->   Operation 586 'select' 'select_ln63_34' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_23 : Operation 587 [1/1] (2.09ns)   --->   "%icmp_ln68_12 = icmp_eq  i13 %select_ln63_34, i13 17" [equalizer.cpp:68]   --->   Operation 587 'icmp' 'icmp_ln68_12' <Predicate = (state_2 == 17)> <Delay = 2.09> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.09> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_23 : Operation 588 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %icmp_ln68_12, void %for.body.split.21, void %if.then10.20" [equalizer.cpp:68]   --->   Operation 588 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_23 : Operation 589 [1/1] (0.00ns)   --->   "%shl_ln69_19 = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_33, i2 0" [equalizer.cpp:69]   --->   Operation 589 'bitconcatenate' 'shl_ln69_19' <Predicate = (state_2 == 17 & icmp_ln68_12)> <Delay = 0.00>
ST_23 : Operation 590 [1/1] (0.00ns)   --->   "%sext_ln69_40 = sext i34 %shl_ln69_19" [equalizer.cpp:69]   --->   Operation 590 'sext' 'sext_ln69_40' <Predicate = (state_2 == 17 & icmp_ln68_12)> <Delay = 0.00>
ST_23 : Operation 591 [1/1] (3.52ns)   --->   "%add_ln69_20 = add i64 %sext_ln69_40, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 591 'add' 'add_ln69_20' <Predicate = (state_2 == 17 & icmp_ln68_12)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_23 : Operation 592 [1/1] (0.00ns)   --->   "%trunc_ln69_19 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_20, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 592 'partselect' 'trunc_ln69_19' <Predicate = (state_2 == 17 & icmp_ln68_12)> <Delay = 0.00>
ST_23 : Operation 593 [1/1] (0.00ns)   --->   "%sext_ln69_41 = sext i62 %trunc_ln69_19" [equalizer.cpp:69]   --->   Operation 593 'sext' 'sext_ln69_41' <Predicate = (state_2 == 17 & icmp_ln68_12)> <Delay = 0.00>
ST_23 : Operation 594 [1/1] (0.00ns)   --->   "%gmem_addr_21 = getelementptr i32 %gmem, i64 %sext_ln69_41" [equalizer.cpp:69]   --->   Operation 594 'getelementptr' 'gmem_addr_21' <Predicate = (state_2 == 17 & icmp_ln68_12)> <Delay = 0.00>
ST_23 : Operation 595 [1/1] (2.55ns)   --->   "%add_ln72_20 = add i32 %select_ln63_33, i32 1" [equalizer.cpp:72]   --->   Operation 595 'add' 'add_ln72_20' <Predicate = (state_2 == 17 & icmp_ln68_12)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 24 <SV = 29> <Delay = 7.30>
ST_24 : Operation 596 [1/1] (7.30ns)   --->   "%gmem_addr_read_14 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 596 'read' 'gmem_addr_read_14' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_24 : Operation 597 [1/1] (0.00ns)   --->   "%signal_shift_reg_13_load = load i32 %signal_shift_reg_13" [equalizer.cpp:85]   --->   Operation 597 'load' 'signal_shift_reg_13_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_24 : Operation 598 [1/1] (0.00ns)   --->   "%store_ln85 = store i32 %signal_shift_reg_12_load, i32 %signal_shift_reg_13" [equalizer.cpp:85]   --->   Operation 598 'store' 'store_ln85' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_24 : Operation 599 [2/2] (6.91ns)   --->   "%mul_ln86_18 = mul i32 %signal_shift_reg_12_load, i32 %gmem_addr_read_13" [equalizer.cpp:86]   --->   Operation 599 'mul' 'mul_ln86_18' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_24 : Operation 600 [1/2] (6.91ns)   --->   "%mul_ln86_19 = mul i32 %signal_shift_reg_11_load, i32 %gmem_addr_read_12" [equalizer.cpp:86]   --->   Operation 600 'mul' 'mul_ln86_19' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_24 : Operation 601 [1/1] (2.55ns)   --->   "%add_ln89_19 = add i32 %mul_ln86_20, i32 %mul_ln86_21" [equalizer.cpp:89]   --->   Operation 601 'add' 'add_ln89_19' <Predicate = (state_2 == 4096)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_24 : Operation 602 [1/5] (7.30ns)   --->   "%gmem_addr_16_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_16" [equalizer.cpp:69]   --->   Operation 602 'writeresp' 'gmem_addr_16_resp' <Predicate = (state_2 == 17 & icmp_ln68_7)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_24 : Operation 603 [2/5] (7.30ns)   --->   "%gmem_addr_17_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_17" [equalizer.cpp:69]   --->   Operation 603 'writeresp' 'gmem_addr_17_resp' <Predicate = (state_2 == 17 & icmp_ln68_8)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_24 : Operation 604 [3/5] (7.30ns)   --->   "%gmem_addr_18_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_18" [equalizer.cpp:69]   --->   Operation 604 'writeresp' 'gmem_addr_18_resp' <Predicate = (state_2 == 17 & icmp_ln68_9)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_24 : Operation 605 [5/5] (7.30ns)   --->   "%gmem_addr_19_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_19" [equalizer.cpp:69]   --->   Operation 605 'writeresp' 'gmem_addr_19_resp' <Predicate = (state_2 == 17 & icmp_ln68_10)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_24 : Operation 606 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_20, i32 %tmp_data_V_4_18, i4 15" [equalizer.cpp:69]   --->   Operation 606 'write' 'write_ln69' <Predicate = (state_2 == 17 & icmp_ln68_11)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_24 : Operation 607 [1/1] (7.30ns)   --->   "%gmem_addr_21_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_21, i32 1" [equalizer.cpp:69]   --->   Operation 607 'writereq' 'gmem_addr_21_req' <Predicate = (state_2 == 17 & icmp_ln68_12)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_24 : Operation 608 [1/1] (0.00ns)   --->   "%empty_39 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 608 'read' 'empty_39' <Predicate = (state_2 == 17 & icmp_ln68_12)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_24 : Operation 609 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val20 = extractvalue i44 %empty_39"   --->   Operation 609 'extractvalue' 'input_r_V_data_V_val20' <Predicate = (state_2 == 17 & icmp_ln68_12)> <Delay = 0.00>
ST_24 : Operation 610 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val20 = extractvalue i44 %empty_39"   --->   Operation 610 'extractvalue' 'input_r_V_last_V_val20' <Predicate = (state_2 == 17 & icmp_ln68_12)> <Delay = 0.00>
ST_24 : Operation 611 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.21" [equalizer.cpp:73]   --->   Operation 611 'br' 'br_ln73' <Predicate = (state_2 == 17 & icmp_ln68_12)> <Delay = 1.58>
ST_24 : Operation 612 [1/1] (0.00ns)   --->   "%tmp_data_V_4_20 = phi i32 %input_r_V_data_V_val20, void %if.then10.20, i32 %tmp_data_V_4_19, void %for.body.split.20"   --->   Operation 612 'phi' 'tmp_data_V_4_20' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_24 : Operation 613 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_35)   --->   "%i_4_20 = phi i32 %add_ln72_20, void %if.then10.20, i32 %select_ln63_33, void %for.body.split.20" [equalizer.cpp:72]   --->   Operation 613 'phi' 'i_4_20' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_24 : Operation 614 [1/1] (2.47ns)   --->   "%icmp_ln63_21 = icmp_eq  i32 %tmp_data_V_4_20, i32 43962" [equalizer.cpp:63]   --->   Operation 614 'icmp' 'icmp_ln63_21' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_24 : Operation 615 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_35 = select i1 %icmp_ln63_21, i32 0, i32 %i_4_20" [equalizer.cpp:63]   --->   Operation 615 'select' 'select_ln63_35' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_24 : Operation 616 [1/1] (0.69ns)   --->   "%select_ln63_36 = select i1 %icmp_ln63_21, i13 4096, i13 %select_ln63_34" [equalizer.cpp:63]   --->   Operation 616 'select' 'select_ln63_36' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_24 : Operation 617 [1/1] (2.09ns)   --->   "%icmp_ln68_13 = icmp_eq  i13 %select_ln63_36, i13 17" [equalizer.cpp:68]   --->   Operation 617 'icmp' 'icmp_ln68_13' <Predicate = (state_2 == 17)> <Delay = 2.09> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.09> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>

State 25 <SV = 30> <Delay = 7.30>
ST_25 : Operation 618 [1/1] (7.30ns)   --->   "%gmem_addr_read_15 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 618 'read' 'gmem_addr_read_15' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_25 : Operation 619 [1/1] (0.00ns)   --->   "%signal_shift_reg_14_load = load i32 %signal_shift_reg_14" [equalizer.cpp:85]   --->   Operation 619 'load' 'signal_shift_reg_14_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_25 : Operation 620 [1/1] (0.00ns)   --->   "%store_ln85 = store i32 %signal_shift_reg_13_load, i32 %signal_shift_reg_14" [equalizer.cpp:85]   --->   Operation 620 'store' 'store_ln85' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_25 : Operation 621 [2/2] (6.91ns)   --->   "%mul_ln86_17 = mul i32 %signal_shift_reg_13_load, i32 %gmem_addr_read_14" [equalizer.cpp:86]   --->   Operation 621 'mul' 'mul_ln86_17' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_25 : Operation 622 [1/2] (6.91ns)   --->   "%mul_ln86_18 = mul i32 %signal_shift_reg_12_load, i32 %gmem_addr_read_13" [equalizer.cpp:86]   --->   Operation 622 'mul' 'mul_ln86_18' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_25 : Operation 623 [1/5] (7.30ns)   --->   "%gmem_addr_17_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_17" [equalizer.cpp:69]   --->   Operation 623 'writeresp' 'gmem_addr_17_resp' <Predicate = (state_2 == 17 & icmp_ln68_8)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_25 : Operation 624 [2/5] (7.30ns)   --->   "%gmem_addr_18_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_18" [equalizer.cpp:69]   --->   Operation 624 'writeresp' 'gmem_addr_18_resp' <Predicate = (state_2 == 17 & icmp_ln68_9)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_25 : Operation 625 [4/5] (7.30ns)   --->   "%gmem_addr_19_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_19" [equalizer.cpp:69]   --->   Operation 625 'writeresp' 'gmem_addr_19_resp' <Predicate = (state_2 == 17 & icmp_ln68_10)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_25 : Operation 626 [5/5] (7.30ns)   --->   "%gmem_addr_20_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_20" [equalizer.cpp:69]   --->   Operation 626 'writeresp' 'gmem_addr_20_resp' <Predicate = (state_2 == 17 & icmp_ln68_11)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_25 : Operation 627 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_21, i32 %tmp_data_V_4_19, i4 15" [equalizer.cpp:69]   --->   Operation 627 'write' 'write_ln69' <Predicate = (state_2 == 17 & icmp_ln68_12)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_25 : Operation 628 [1/1] (0.00ns)   --->   "%tmp_last_V_4_20 = phi i1 %input_r_V_last_V_val20, void %if.then10.20, i1 %tmp_last_V_4_19, void %for.body.split.20"   --->   Operation 628 'phi' 'tmp_last_V_4_20' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_25 : Operation 629 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %icmp_ln68_13, void %for.body.split.22, void %if.then10.21" [equalizer.cpp:68]   --->   Operation 629 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_25 : Operation 630 [1/1] (0.00ns)   --->   "%shl_ln69_20 = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_35, i2 0" [equalizer.cpp:69]   --->   Operation 630 'bitconcatenate' 'shl_ln69_20' <Predicate = (state_2 == 17 & icmp_ln68_13)> <Delay = 0.00>
ST_25 : Operation 631 [1/1] (0.00ns)   --->   "%sext_ln69_42 = sext i34 %shl_ln69_20" [equalizer.cpp:69]   --->   Operation 631 'sext' 'sext_ln69_42' <Predicate = (state_2 == 17 & icmp_ln68_13)> <Delay = 0.00>
ST_25 : Operation 632 [1/1] (3.52ns)   --->   "%add_ln69_21 = add i64 %sext_ln69_42, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 632 'add' 'add_ln69_21' <Predicate = (state_2 == 17 & icmp_ln68_13)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_25 : Operation 633 [1/1] (0.00ns)   --->   "%trunc_ln69_20 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_21, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 633 'partselect' 'trunc_ln69_20' <Predicate = (state_2 == 17 & icmp_ln68_13)> <Delay = 0.00>
ST_25 : Operation 634 [1/1] (0.00ns)   --->   "%sext_ln69_43 = sext i62 %trunc_ln69_20" [equalizer.cpp:69]   --->   Operation 634 'sext' 'sext_ln69_43' <Predicate = (state_2 == 17 & icmp_ln68_13)> <Delay = 0.00>
ST_25 : Operation 635 [1/1] (0.00ns)   --->   "%gmem_addr_22 = getelementptr i32 %gmem, i64 %sext_ln69_43" [equalizer.cpp:69]   --->   Operation 635 'getelementptr' 'gmem_addr_22' <Predicate = (state_2 == 17 & icmp_ln68_13)> <Delay = 0.00>
ST_25 : Operation 636 [1/1] (0.00ns)   --->   "%empty_40 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 636 'read' 'empty_40' <Predicate = (state_2 == 17 & icmp_ln68_13)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_25 : Operation 637 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val21 = extractvalue i44 %empty_40"   --->   Operation 637 'extractvalue' 'input_r_V_data_V_val21' <Predicate = (state_2 == 17 & icmp_ln68_13)> <Delay = 0.00>
ST_25 : Operation 638 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val21 = extractvalue i44 %empty_40"   --->   Operation 638 'extractvalue' 'input_r_V_last_V_val21' <Predicate = (state_2 == 17 & icmp_ln68_13)> <Delay = 0.00>
ST_25 : Operation 639 [1/1] (2.55ns)   --->   "%add_ln72_21 = add i32 %select_ln63_35, i32 1" [equalizer.cpp:72]   --->   Operation 639 'add' 'add_ln72_21' <Predicate = (state_2 == 17 & icmp_ln68_13)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_25 : Operation 640 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.22" [equalizer.cpp:73]   --->   Operation 640 'br' 'br_ln73' <Predicate = (state_2 == 17 & icmp_ln68_13)> <Delay = 1.58>
ST_25 : Operation 641 [1/1] (0.00ns)   --->   "%tmp_data_V_4_21 = phi i32 %input_r_V_data_V_val21, void %if.then10.21, i32 %tmp_data_V_4_20, void %for.body.split.21"   --->   Operation 641 'phi' 'tmp_data_V_4_21' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_25 : Operation 642 [1/1] (2.47ns)   --->   "%icmp_ln63_22 = icmp_eq  i32 %tmp_data_V_4_21, i32 43962" [equalizer.cpp:63]   --->   Operation 642 'icmp' 'icmp_ln63_22' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>

State 26 <SV = 31> <Delay = 7.30>
ST_26 : Operation 643 [1/1] (7.30ns)   --->   "%gmem_addr_read_16 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 643 'read' 'gmem_addr_read_16' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_26 : Operation 644 [1/1] (0.00ns)   --->   "%signal_shift_reg_15_load = load i32 %signal_shift_reg_15" [equalizer.cpp:85]   --->   Operation 644 'load' 'signal_shift_reg_15_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_26 : Operation 645 [1/1] (0.00ns)   --->   "%store_ln85 = store i32 %signal_shift_reg_14_load, i32 %signal_shift_reg_15" [equalizer.cpp:85]   --->   Operation 645 'store' 'store_ln85' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_26 : Operation 646 [2/2] (6.91ns)   --->   "%mul_ln86_16 = mul i32 %signal_shift_reg_14_load, i32 %gmem_addr_read_15" [equalizer.cpp:86]   --->   Operation 646 'mul' 'mul_ln86_16' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_26 : Operation 647 [1/2] (6.91ns)   --->   "%mul_ln86_17 = mul i32 %signal_shift_reg_13_load, i32 %gmem_addr_read_14" [equalizer.cpp:86]   --->   Operation 647 'mul' 'mul_ln86_17' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_26 : Operation 648 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln89_18 = add i32 %mul_ln86_18, i32 %mul_ln86_19" [equalizer.cpp:89]   --->   Operation 648 'add' 'add_ln89_18' <Predicate = (state_2 == 4096)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_26 : Operation 649 [1/1] (4.37ns) (root node of TernaryAdder)   --->   "%add_ln89_20 = add i32 %add_ln89_19, i32 %add_ln89_18" [equalizer.cpp:89]   --->   Operation 649 'add' 'add_ln89_20' <Predicate = (state_2 == 4096)> <Delay = 4.37> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_26 : Operation 650 [1/5] (7.30ns)   --->   "%gmem_addr_18_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_18" [equalizer.cpp:69]   --->   Operation 650 'writeresp' 'gmem_addr_18_resp' <Predicate = (state_2 == 17 & icmp_ln68_9)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_26 : Operation 651 [3/5] (7.30ns)   --->   "%gmem_addr_19_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_19" [equalizer.cpp:69]   --->   Operation 651 'writeresp' 'gmem_addr_19_resp' <Predicate = (state_2 == 17 & icmp_ln68_10)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_26 : Operation 652 [4/5] (7.30ns)   --->   "%gmem_addr_20_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_20" [equalizer.cpp:69]   --->   Operation 652 'writeresp' 'gmem_addr_20_resp' <Predicate = (state_2 == 17 & icmp_ln68_11)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_26 : Operation 653 [5/5] (7.30ns)   --->   "%gmem_addr_21_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_21" [equalizer.cpp:69]   --->   Operation 653 'writeresp' 'gmem_addr_21_resp' <Predicate = (state_2 == 17 & icmp_ln68_12)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_26 : Operation 654 [1/1] (7.30ns)   --->   "%gmem_addr_22_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_22, i32 1" [equalizer.cpp:69]   --->   Operation 654 'writereq' 'gmem_addr_22_req' <Predicate = (state_2 == 17 & icmp_ln68_13)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_26 : Operation 655 [1/1] (0.00ns)   --->   "%tmp_last_V_4_21 = phi i1 %input_r_V_last_V_val21, void %if.then10.21, i1 %tmp_last_V_4_20, void %for.body.split.21"   --->   Operation 655 'phi' 'tmp_last_V_4_21' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_26 : Operation 656 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_37)   --->   "%i_4_21 = phi i32 %add_ln72_21, void %if.then10.21, i32 %select_ln63_35, void %for.body.split.21" [equalizer.cpp:72]   --->   Operation 656 'phi' 'i_4_21' <Predicate = (state_2 == 17 & !icmp_ln63_22)> <Delay = 0.00>
ST_26 : Operation 657 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_37 = select i1 %icmp_ln63_22, i32 0, i32 %i_4_21" [equalizer.cpp:63]   --->   Operation 657 'select' 'select_ln63_37' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_26 : Operation 658 [1/1] (0.69ns)   --->   "%select_ln63_38 = select i1 %icmp_ln63_22, i13 4096, i13 %select_ln63_36" [equalizer.cpp:63]   --->   Operation 658 'select' 'select_ln63_38' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_26 : Operation 659 [1/1] (2.09ns)   --->   "%icmp_ln68_14 = icmp_eq  i13 %select_ln63_38, i13 17" [equalizer.cpp:68]   --->   Operation 659 'icmp' 'icmp_ln68_14' <Predicate = (state_2 == 17)> <Delay = 2.09> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.09> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_26 : Operation 660 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %icmp_ln68_14, void %for.body.split.23, void %if.then10.22" [equalizer.cpp:68]   --->   Operation 660 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_26 : Operation 661 [1/1] (0.00ns)   --->   "%shl_ln69_21 = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_37, i2 0" [equalizer.cpp:69]   --->   Operation 661 'bitconcatenate' 'shl_ln69_21' <Predicate = (state_2 == 17 & icmp_ln68_14)> <Delay = 0.00>
ST_26 : Operation 662 [1/1] (0.00ns)   --->   "%sext_ln69_44 = sext i34 %shl_ln69_21" [equalizer.cpp:69]   --->   Operation 662 'sext' 'sext_ln69_44' <Predicate = (state_2 == 17 & icmp_ln68_14)> <Delay = 0.00>
ST_26 : Operation 663 [1/1] (3.52ns)   --->   "%add_ln69_22 = add i64 %sext_ln69_44, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 663 'add' 'add_ln69_22' <Predicate = (state_2 == 17 & icmp_ln68_14)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_26 : Operation 664 [1/1] (0.00ns)   --->   "%trunc_ln69_21 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_22, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 664 'partselect' 'trunc_ln69_21' <Predicate = (state_2 == 17 & icmp_ln68_14)> <Delay = 0.00>
ST_26 : Operation 665 [1/1] (0.00ns)   --->   "%sext_ln69_45 = sext i62 %trunc_ln69_21" [equalizer.cpp:69]   --->   Operation 665 'sext' 'sext_ln69_45' <Predicate = (state_2 == 17 & icmp_ln68_14)> <Delay = 0.00>
ST_26 : Operation 666 [1/1] (0.00ns)   --->   "%gmem_addr_23 = getelementptr i32 %gmem, i64 %sext_ln69_45" [equalizer.cpp:69]   --->   Operation 666 'getelementptr' 'gmem_addr_23' <Predicate = (state_2 == 17 & icmp_ln68_14)> <Delay = 0.00>
ST_26 : Operation 667 [1/1] (0.00ns)   --->   "%empty_41 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 667 'read' 'empty_41' <Predicate = (state_2 == 17 & icmp_ln68_14)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_26 : Operation 668 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val22 = extractvalue i44 %empty_41"   --->   Operation 668 'extractvalue' 'input_r_V_data_V_val22' <Predicate = (state_2 == 17 & icmp_ln68_14)> <Delay = 0.00>
ST_26 : Operation 669 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val22 = extractvalue i44 %empty_41"   --->   Operation 669 'extractvalue' 'input_r_V_last_V_val22' <Predicate = (state_2 == 17 & icmp_ln68_14)> <Delay = 0.00>
ST_26 : Operation 670 [1/1] (2.55ns)   --->   "%add_ln72_22 = add i32 %select_ln63_37, i32 1" [equalizer.cpp:72]   --->   Operation 670 'add' 'add_ln72_22' <Predicate = (state_2 == 17 & icmp_ln68_14)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_26 : Operation 671 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.23" [equalizer.cpp:73]   --->   Operation 671 'br' 'br_ln73' <Predicate = (state_2 == 17 & icmp_ln68_14)> <Delay = 1.58>

State 27 <SV = 32> <Delay = 7.30>
ST_27 : Operation 672 [1/1] (7.30ns)   --->   "%gmem_addr_read_17 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 672 'read' 'gmem_addr_read_17' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_27 : Operation 673 [1/1] (0.00ns)   --->   "%signal_shift_reg_16_load = load i32 %signal_shift_reg_16" [equalizer.cpp:85]   --->   Operation 673 'load' 'signal_shift_reg_16_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_27 : Operation 674 [1/1] (0.00ns)   --->   "%store_ln85 = store i32 %signal_shift_reg_15_load, i32 %signal_shift_reg_16" [equalizer.cpp:85]   --->   Operation 674 'store' 'store_ln85' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_27 : Operation 675 [2/2] (6.91ns)   --->   "%mul_ln86_15 = mul i32 %signal_shift_reg_15_load, i32 %gmem_addr_read_16" [equalizer.cpp:86]   --->   Operation 675 'mul' 'mul_ln86_15' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_27 : Operation 676 [1/2] (6.91ns)   --->   "%mul_ln86_16 = mul i32 %signal_shift_reg_14_load, i32 %gmem_addr_read_15" [equalizer.cpp:86]   --->   Operation 676 'mul' 'mul_ln86_16' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_27 : Operation 677 [2/5] (7.30ns)   --->   "%gmem_addr_19_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_19" [equalizer.cpp:69]   --->   Operation 677 'writeresp' 'gmem_addr_19_resp' <Predicate = (state_2 == 17 & icmp_ln68_10)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_27 : Operation 678 [3/5] (7.30ns)   --->   "%gmem_addr_20_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_20" [equalizer.cpp:69]   --->   Operation 678 'writeresp' 'gmem_addr_20_resp' <Predicate = (state_2 == 17 & icmp_ln68_11)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_27 : Operation 679 [4/5] (7.30ns)   --->   "%gmem_addr_21_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_21" [equalizer.cpp:69]   --->   Operation 679 'writeresp' 'gmem_addr_21_resp' <Predicate = (state_2 == 17 & icmp_ln68_12)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_27 : Operation 680 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_22, i32 %tmp_data_V_4_20, i4 15" [equalizer.cpp:69]   --->   Operation 680 'write' 'write_ln69' <Predicate = (state_2 == 17 & icmp_ln68_13)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_27 : Operation 681 [1/1] (7.30ns)   --->   "%gmem_addr_23_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_23, i32 1" [equalizer.cpp:69]   --->   Operation 681 'writereq' 'gmem_addr_23_req' <Predicate = (state_2 == 17 & icmp_ln68_14)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_27 : Operation 682 [1/1] (0.00ns)   --->   "%tmp_last_V_4_22 = phi i1 %input_r_V_last_V_val22, void %if.then10.22, i1 %tmp_last_V_4_21, void %for.body.split.22"   --->   Operation 682 'phi' 'tmp_last_V_4_22' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_27 : Operation 683 [1/1] (0.00ns)   --->   "%tmp_data_V_4_22 = phi i32 %input_r_V_data_V_val22, void %if.then10.22, i32 %tmp_data_V_4_21, void %for.body.split.22"   --->   Operation 683 'phi' 'tmp_data_V_4_22' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_27 : Operation 684 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_39)   --->   "%i_4_22 = phi i32 %add_ln72_22, void %if.then10.22, i32 %select_ln63_37, void %for.body.split.22" [equalizer.cpp:72]   --->   Operation 684 'phi' 'i_4_22' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_27 : Operation 685 [1/1] (2.47ns)   --->   "%icmp_ln63_23 = icmp_eq  i32 %tmp_data_V_4_22, i32 43962" [equalizer.cpp:63]   --->   Operation 685 'icmp' 'icmp_ln63_23' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_27 : Operation 686 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_39 = select i1 %icmp_ln63_23, i32 0, i32 %i_4_22" [equalizer.cpp:63]   --->   Operation 686 'select' 'select_ln63_39' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_27 : Operation 687 [1/1] (0.69ns)   --->   "%select_ln63_40 = select i1 %icmp_ln63_23, i13 4096, i13 %select_ln63_38" [equalizer.cpp:63]   --->   Operation 687 'select' 'select_ln63_40' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_27 : Operation 688 [1/1] (2.09ns)   --->   "%icmp_ln68_15 = icmp_eq  i13 %select_ln63_40, i13 17" [equalizer.cpp:68]   --->   Operation 688 'icmp' 'icmp_ln68_15' <Predicate = (state_2 == 17)> <Delay = 2.09> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.09> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_27 : Operation 689 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %icmp_ln68_15, void %for.body.split.24, void %if.then10.23" [equalizer.cpp:68]   --->   Operation 689 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_27 : Operation 690 [1/1] (0.00ns)   --->   "%shl_ln69_22 = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_39, i2 0" [equalizer.cpp:69]   --->   Operation 690 'bitconcatenate' 'shl_ln69_22' <Predicate = (state_2 == 17 & icmp_ln68_15)> <Delay = 0.00>
ST_27 : Operation 691 [1/1] (0.00ns)   --->   "%sext_ln69_46 = sext i34 %shl_ln69_22" [equalizer.cpp:69]   --->   Operation 691 'sext' 'sext_ln69_46' <Predicate = (state_2 == 17 & icmp_ln68_15)> <Delay = 0.00>
ST_27 : Operation 692 [1/1] (3.52ns)   --->   "%add_ln69_23 = add i64 %sext_ln69_46, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 692 'add' 'add_ln69_23' <Predicate = (state_2 == 17 & icmp_ln68_15)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_27 : Operation 693 [1/1] (0.00ns)   --->   "%trunc_ln69_22 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_23, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 693 'partselect' 'trunc_ln69_22' <Predicate = (state_2 == 17 & icmp_ln68_15)> <Delay = 0.00>
ST_27 : Operation 694 [1/1] (0.00ns)   --->   "%sext_ln69_47 = sext i62 %trunc_ln69_22" [equalizer.cpp:69]   --->   Operation 694 'sext' 'sext_ln69_47' <Predicate = (state_2 == 17 & icmp_ln68_15)> <Delay = 0.00>
ST_27 : Operation 695 [1/1] (0.00ns)   --->   "%gmem_addr_24 = getelementptr i32 %gmem, i64 %sext_ln69_47" [equalizer.cpp:69]   --->   Operation 695 'getelementptr' 'gmem_addr_24' <Predicate = (state_2 == 17 & icmp_ln68_15)> <Delay = 0.00>
ST_27 : Operation 696 [1/1] (2.55ns)   --->   "%add_ln72_23 = add i32 %select_ln63_39, i32 1" [equalizer.cpp:72]   --->   Operation 696 'add' 'add_ln72_23' <Predicate = (state_2 == 17 & icmp_ln68_15)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 28 <SV = 33> <Delay = 7.30>
ST_28 : Operation 697 [1/1] (7.30ns)   --->   "%gmem_addr_read_18 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 697 'read' 'gmem_addr_read_18' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_28 : Operation 698 [1/1] (0.00ns)   --->   "%signal_shift_reg_17_load = load i32 %signal_shift_reg_17" [equalizer.cpp:85]   --->   Operation 698 'load' 'signal_shift_reg_17_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_28 : Operation 699 [1/1] (0.00ns)   --->   "%store_ln85 = store i32 %signal_shift_reg_16_load, i32 %signal_shift_reg_17" [equalizer.cpp:85]   --->   Operation 699 'store' 'store_ln85' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_28 : Operation 700 [2/2] (6.91ns)   --->   "%mul_ln86_14 = mul i32 %signal_shift_reg_16_load, i32 %gmem_addr_read_17" [equalizer.cpp:86]   --->   Operation 700 'mul' 'mul_ln86_14' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_28 : Operation 701 [1/2] (6.91ns)   --->   "%mul_ln86_15 = mul i32 %signal_shift_reg_15_load, i32 %gmem_addr_read_16" [equalizer.cpp:86]   --->   Operation 701 'mul' 'mul_ln86_15' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_28 : Operation 702 [1/1] (2.55ns)   --->   "%add_ln89_16 = add i32 %mul_ln86_16, i32 %mul_ln86_17" [equalizer.cpp:89]   --->   Operation 702 'add' 'add_ln89_16' <Predicate = (state_2 == 4096)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_28 : Operation 703 [1/5] (7.30ns)   --->   "%gmem_addr_19_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_19" [equalizer.cpp:69]   --->   Operation 703 'writeresp' 'gmem_addr_19_resp' <Predicate = (state_2 == 17 & icmp_ln68_10)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_28 : Operation 704 [2/5] (7.30ns)   --->   "%gmem_addr_20_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_20" [equalizer.cpp:69]   --->   Operation 704 'writeresp' 'gmem_addr_20_resp' <Predicate = (state_2 == 17 & icmp_ln68_11)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_28 : Operation 705 [3/5] (7.30ns)   --->   "%gmem_addr_21_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_21" [equalizer.cpp:69]   --->   Operation 705 'writeresp' 'gmem_addr_21_resp' <Predicate = (state_2 == 17 & icmp_ln68_12)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_28 : Operation 706 [5/5] (7.30ns)   --->   "%gmem_addr_22_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_22" [equalizer.cpp:69]   --->   Operation 706 'writeresp' 'gmem_addr_22_resp' <Predicate = (state_2 == 17 & icmp_ln68_13)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_28 : Operation 707 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_23, i32 %tmp_data_V_4_21, i4 15" [equalizer.cpp:69]   --->   Operation 707 'write' 'write_ln69' <Predicate = (state_2 == 17 & icmp_ln68_14)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_28 : Operation 708 [1/1] (7.30ns)   --->   "%gmem_addr_24_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_24, i32 1" [equalizer.cpp:69]   --->   Operation 708 'writereq' 'gmem_addr_24_req' <Predicate = (state_2 == 17 & icmp_ln68_15)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_28 : Operation 709 [1/1] (0.00ns)   --->   "%empty_42 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 709 'read' 'empty_42' <Predicate = (state_2 == 17 & icmp_ln68_15)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_28 : Operation 710 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val23 = extractvalue i44 %empty_42"   --->   Operation 710 'extractvalue' 'input_r_V_data_V_val23' <Predicate = (state_2 == 17 & icmp_ln68_15)> <Delay = 0.00>
ST_28 : Operation 711 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val23 = extractvalue i44 %empty_42"   --->   Operation 711 'extractvalue' 'input_r_V_last_V_val23' <Predicate = (state_2 == 17 & icmp_ln68_15)> <Delay = 0.00>
ST_28 : Operation 712 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.24" [equalizer.cpp:73]   --->   Operation 712 'br' 'br_ln73' <Predicate = (state_2 == 17 & icmp_ln68_15)> <Delay = 1.58>
ST_28 : Operation 713 [1/1] (0.00ns)   --->   "%tmp_data_V_4_23 = phi i32 %input_r_V_data_V_val23, void %if.then10.23, i32 %tmp_data_V_4_22, void %for.body.split.23"   --->   Operation 713 'phi' 'tmp_data_V_4_23' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_28 : Operation 714 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_41)   --->   "%i_4_23 = phi i32 %add_ln72_23, void %if.then10.23, i32 %select_ln63_39, void %for.body.split.23" [equalizer.cpp:72]   --->   Operation 714 'phi' 'i_4_23' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_28 : Operation 715 [1/1] (2.47ns)   --->   "%icmp_ln63_24 = icmp_eq  i32 %tmp_data_V_4_23, i32 43962" [equalizer.cpp:63]   --->   Operation 715 'icmp' 'icmp_ln63_24' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_28 : Operation 716 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_41 = select i1 %icmp_ln63_24, i32 0, i32 %i_4_23" [equalizer.cpp:63]   --->   Operation 716 'select' 'select_ln63_41' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_28 : Operation 717 [1/1] (0.69ns)   --->   "%select_ln63_42 = select i1 %icmp_ln63_24, i13 4096, i13 %select_ln63_40" [equalizer.cpp:63]   --->   Operation 717 'select' 'select_ln63_42' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_28 : Operation 718 [1/1] (2.09ns)   --->   "%icmp_ln68_16 = icmp_eq  i13 %select_ln63_42, i13 17" [equalizer.cpp:68]   --->   Operation 718 'icmp' 'icmp_ln68_16' <Predicate = (state_2 == 17)> <Delay = 2.09> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.09> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>

State 29 <SV = 34> <Delay = 7.30>
ST_29 : Operation 719 [1/1] (7.30ns)   --->   "%gmem_addr_read_19 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 719 'read' 'gmem_addr_read_19' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_29 : Operation 720 [1/1] (0.00ns)   --->   "%signal_shift_reg_18_load = load i32 %signal_shift_reg_18" [equalizer.cpp:85]   --->   Operation 720 'load' 'signal_shift_reg_18_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_29 : Operation 721 [1/1] (0.00ns)   --->   "%store_ln85 = store i32 %signal_shift_reg_17_load, i32 %signal_shift_reg_18" [equalizer.cpp:85]   --->   Operation 721 'store' 'store_ln85' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_29 : Operation 722 [2/2] (6.91ns)   --->   "%mul_ln86_13 = mul i32 %signal_shift_reg_17_load, i32 %gmem_addr_read_18" [equalizer.cpp:86]   --->   Operation 722 'mul' 'mul_ln86_13' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_29 : Operation 723 [1/2] (6.91ns)   --->   "%mul_ln86_14 = mul i32 %signal_shift_reg_16_load, i32 %gmem_addr_read_17" [equalizer.cpp:86]   --->   Operation 723 'mul' 'mul_ln86_14' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_29 : Operation 724 [1/5] (7.30ns)   --->   "%gmem_addr_20_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_20" [equalizer.cpp:69]   --->   Operation 724 'writeresp' 'gmem_addr_20_resp' <Predicate = (state_2 == 17 & icmp_ln68_11)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_29 : Operation 725 [2/5] (7.30ns)   --->   "%gmem_addr_21_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_21" [equalizer.cpp:69]   --->   Operation 725 'writeresp' 'gmem_addr_21_resp' <Predicate = (state_2 == 17 & icmp_ln68_12)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_29 : Operation 726 [4/5] (7.30ns)   --->   "%gmem_addr_22_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_22" [equalizer.cpp:69]   --->   Operation 726 'writeresp' 'gmem_addr_22_resp' <Predicate = (state_2 == 17 & icmp_ln68_13)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_29 : Operation 727 [5/5] (7.30ns)   --->   "%gmem_addr_23_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_23" [equalizer.cpp:69]   --->   Operation 727 'writeresp' 'gmem_addr_23_resp' <Predicate = (state_2 == 17 & icmp_ln68_14)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_29 : Operation 728 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_24, i32 %tmp_data_V_4_22, i4 15" [equalizer.cpp:69]   --->   Operation 728 'write' 'write_ln69' <Predicate = (state_2 == 17 & icmp_ln68_15)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_29 : Operation 729 [1/1] (0.00ns)   --->   "%tmp_last_V_4_23 = phi i1 %input_r_V_last_V_val23, void %if.then10.23, i1 %tmp_last_V_4_22, void %for.body.split.23"   --->   Operation 729 'phi' 'tmp_last_V_4_23' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_29 : Operation 730 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %icmp_ln68_16, void %for.body.split.25, void %if.then10.24" [equalizer.cpp:68]   --->   Operation 730 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_29 : Operation 731 [1/1] (0.00ns)   --->   "%shl_ln69_23 = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_41, i2 0" [equalizer.cpp:69]   --->   Operation 731 'bitconcatenate' 'shl_ln69_23' <Predicate = (state_2 == 17 & icmp_ln68_16)> <Delay = 0.00>
ST_29 : Operation 732 [1/1] (0.00ns)   --->   "%sext_ln69_48 = sext i34 %shl_ln69_23" [equalizer.cpp:69]   --->   Operation 732 'sext' 'sext_ln69_48' <Predicate = (state_2 == 17 & icmp_ln68_16)> <Delay = 0.00>
ST_29 : Operation 733 [1/1] (3.52ns)   --->   "%add_ln69_24 = add i64 %sext_ln69_48, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 733 'add' 'add_ln69_24' <Predicate = (state_2 == 17 & icmp_ln68_16)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_29 : Operation 734 [1/1] (0.00ns)   --->   "%trunc_ln69_23 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_24, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 734 'partselect' 'trunc_ln69_23' <Predicate = (state_2 == 17 & icmp_ln68_16)> <Delay = 0.00>
ST_29 : Operation 735 [1/1] (0.00ns)   --->   "%sext_ln69_49 = sext i62 %trunc_ln69_23" [equalizer.cpp:69]   --->   Operation 735 'sext' 'sext_ln69_49' <Predicate = (state_2 == 17 & icmp_ln68_16)> <Delay = 0.00>
ST_29 : Operation 736 [1/1] (0.00ns)   --->   "%gmem_addr_25 = getelementptr i32 %gmem, i64 %sext_ln69_49" [equalizer.cpp:69]   --->   Operation 736 'getelementptr' 'gmem_addr_25' <Predicate = (state_2 == 17 & icmp_ln68_16)> <Delay = 0.00>
ST_29 : Operation 737 [1/1] (0.00ns)   --->   "%empty_43 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 737 'read' 'empty_43' <Predicate = (state_2 == 17 & icmp_ln68_16)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_29 : Operation 738 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val24 = extractvalue i44 %empty_43"   --->   Operation 738 'extractvalue' 'input_r_V_data_V_val24' <Predicate = (state_2 == 17 & icmp_ln68_16)> <Delay = 0.00>
ST_29 : Operation 739 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val24 = extractvalue i44 %empty_43"   --->   Operation 739 'extractvalue' 'input_r_V_last_V_val24' <Predicate = (state_2 == 17 & icmp_ln68_16)> <Delay = 0.00>
ST_29 : Operation 740 [1/1] (2.55ns)   --->   "%add_ln72_24 = add i32 %select_ln63_41, i32 1" [equalizer.cpp:72]   --->   Operation 740 'add' 'add_ln72_24' <Predicate = (state_2 == 17 & icmp_ln68_16)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_29 : Operation 741 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.25" [equalizer.cpp:73]   --->   Operation 741 'br' 'br_ln73' <Predicate = (state_2 == 17 & icmp_ln68_16)> <Delay = 1.58>
ST_29 : Operation 742 [1/1] (0.00ns)   --->   "%tmp_data_V_4_24 = phi i32 %input_r_V_data_V_val24, void %if.then10.24, i32 %tmp_data_V_4_23, void %for.body.split.24"   --->   Operation 742 'phi' 'tmp_data_V_4_24' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_29 : Operation 743 [1/1] (2.47ns)   --->   "%icmp_ln63_25 = icmp_eq  i32 %tmp_data_V_4_24, i32 43962" [equalizer.cpp:63]   --->   Operation 743 'icmp' 'icmp_ln63_25' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>

State 30 <SV = 35> <Delay = 7.30>
ST_30 : Operation 744 [1/1] (7.30ns)   --->   "%gmem_addr_read_20 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 744 'read' 'gmem_addr_read_20' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_30 : Operation 745 [1/1] (0.00ns)   --->   "%signal_shift_reg_19_load = load i32 %signal_shift_reg_19" [equalizer.cpp:85]   --->   Operation 745 'load' 'signal_shift_reg_19_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_30 : Operation 746 [1/1] (0.00ns)   --->   "%store_ln85 = store i32 %signal_shift_reg_18_load, i32 %signal_shift_reg_19" [equalizer.cpp:85]   --->   Operation 746 'store' 'store_ln85' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_30 : Operation 747 [2/2] (6.91ns)   --->   "%mul_ln86_12 = mul i32 %signal_shift_reg_18_load, i32 %gmem_addr_read_19" [equalizer.cpp:86]   --->   Operation 747 'mul' 'mul_ln86_12' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_30 : Operation 748 [1/2] (6.91ns)   --->   "%mul_ln86_13 = mul i32 %signal_shift_reg_17_load, i32 %gmem_addr_read_18" [equalizer.cpp:86]   --->   Operation 748 'mul' 'mul_ln86_13' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_30 : Operation 749 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln89_15 = add i32 %mul_ln86_14, i32 %mul_ln86_15" [equalizer.cpp:89]   --->   Operation 749 'add' 'add_ln89_15' <Predicate = (state_2 == 4096)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_30 : Operation 750 [1/1] (4.37ns) (root node of TernaryAdder)   --->   "%add_ln89_17 = add i32 %add_ln89_16, i32 %add_ln89_15" [equalizer.cpp:89]   --->   Operation 750 'add' 'add_ln89_17' <Predicate = (state_2 == 4096)> <Delay = 4.37> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_30 : Operation 751 [1/5] (7.30ns)   --->   "%gmem_addr_21_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_21" [equalizer.cpp:69]   --->   Operation 751 'writeresp' 'gmem_addr_21_resp' <Predicate = (state_2 == 17 & icmp_ln68_12)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_30 : Operation 752 [3/5] (7.30ns)   --->   "%gmem_addr_22_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_22" [equalizer.cpp:69]   --->   Operation 752 'writeresp' 'gmem_addr_22_resp' <Predicate = (state_2 == 17 & icmp_ln68_13)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_30 : Operation 753 [4/5] (7.30ns)   --->   "%gmem_addr_23_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_23" [equalizer.cpp:69]   --->   Operation 753 'writeresp' 'gmem_addr_23_resp' <Predicate = (state_2 == 17 & icmp_ln68_14)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_30 : Operation 754 [5/5] (7.30ns)   --->   "%gmem_addr_24_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_24" [equalizer.cpp:69]   --->   Operation 754 'writeresp' 'gmem_addr_24_resp' <Predicate = (state_2 == 17 & icmp_ln68_15)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_30 : Operation 755 [1/1] (7.30ns)   --->   "%gmem_addr_25_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_25, i32 1" [equalizer.cpp:69]   --->   Operation 755 'writereq' 'gmem_addr_25_req' <Predicate = (state_2 == 17 & icmp_ln68_16)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_30 : Operation 756 [1/1] (0.00ns)   --->   "%tmp_last_V_4_24 = phi i1 %input_r_V_last_V_val24, void %if.then10.24, i1 %tmp_last_V_4_23, void %for.body.split.24"   --->   Operation 756 'phi' 'tmp_last_V_4_24' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_30 : Operation 757 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_43)   --->   "%i_4_24 = phi i32 %add_ln72_24, void %if.then10.24, i32 %select_ln63_41, void %for.body.split.24" [equalizer.cpp:72]   --->   Operation 757 'phi' 'i_4_24' <Predicate = (state_2 == 17 & !icmp_ln63_25)> <Delay = 0.00>
ST_30 : Operation 758 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_43 = select i1 %icmp_ln63_25, i32 0, i32 %i_4_24" [equalizer.cpp:63]   --->   Operation 758 'select' 'select_ln63_43' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_30 : Operation 759 [1/1] (0.69ns)   --->   "%select_ln63_44 = select i1 %icmp_ln63_25, i13 4096, i13 %select_ln63_42" [equalizer.cpp:63]   --->   Operation 759 'select' 'select_ln63_44' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_30 : Operation 760 [1/1] (2.09ns)   --->   "%icmp_ln68_17 = icmp_eq  i13 %select_ln63_44, i13 17" [equalizer.cpp:68]   --->   Operation 760 'icmp' 'icmp_ln68_17' <Predicate = (state_2 == 17)> <Delay = 2.09> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.09> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_30 : Operation 761 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %icmp_ln68_17, void %for.body.split.26, void %if.then10.25" [equalizer.cpp:68]   --->   Operation 761 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_30 : Operation 762 [1/1] (0.00ns)   --->   "%shl_ln69_24 = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_43, i2 0" [equalizer.cpp:69]   --->   Operation 762 'bitconcatenate' 'shl_ln69_24' <Predicate = (state_2 == 17 & icmp_ln68_17)> <Delay = 0.00>
ST_30 : Operation 763 [1/1] (0.00ns)   --->   "%sext_ln69_50 = sext i34 %shl_ln69_24" [equalizer.cpp:69]   --->   Operation 763 'sext' 'sext_ln69_50' <Predicate = (state_2 == 17 & icmp_ln68_17)> <Delay = 0.00>
ST_30 : Operation 764 [1/1] (3.52ns)   --->   "%add_ln69_25 = add i64 %sext_ln69_50, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 764 'add' 'add_ln69_25' <Predicate = (state_2 == 17 & icmp_ln68_17)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_30 : Operation 765 [1/1] (0.00ns)   --->   "%trunc_ln69_24 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_25, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 765 'partselect' 'trunc_ln69_24' <Predicate = (state_2 == 17 & icmp_ln68_17)> <Delay = 0.00>
ST_30 : Operation 766 [1/1] (0.00ns)   --->   "%sext_ln69_51 = sext i62 %trunc_ln69_24" [equalizer.cpp:69]   --->   Operation 766 'sext' 'sext_ln69_51' <Predicate = (state_2 == 17 & icmp_ln68_17)> <Delay = 0.00>
ST_30 : Operation 767 [1/1] (0.00ns)   --->   "%gmem_addr_26 = getelementptr i32 %gmem, i64 %sext_ln69_51" [equalizer.cpp:69]   --->   Operation 767 'getelementptr' 'gmem_addr_26' <Predicate = (state_2 == 17 & icmp_ln68_17)> <Delay = 0.00>
ST_30 : Operation 768 [1/1] (0.00ns)   --->   "%empty_44 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 768 'read' 'empty_44' <Predicate = (state_2 == 17 & icmp_ln68_17)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_30 : Operation 769 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val25 = extractvalue i44 %empty_44"   --->   Operation 769 'extractvalue' 'input_r_V_data_V_val25' <Predicate = (state_2 == 17 & icmp_ln68_17)> <Delay = 0.00>
ST_30 : Operation 770 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val25 = extractvalue i44 %empty_44"   --->   Operation 770 'extractvalue' 'input_r_V_last_V_val25' <Predicate = (state_2 == 17 & icmp_ln68_17)> <Delay = 0.00>
ST_30 : Operation 771 [1/1] (2.55ns)   --->   "%add_ln72_25 = add i32 %select_ln63_43, i32 1" [equalizer.cpp:72]   --->   Operation 771 'add' 'add_ln72_25' <Predicate = (state_2 == 17 & icmp_ln68_17)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_30 : Operation 772 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.26" [equalizer.cpp:73]   --->   Operation 772 'br' 'br_ln73' <Predicate = (state_2 == 17 & icmp_ln68_17)> <Delay = 1.58>

State 31 <SV = 36> <Delay = 7.30>
ST_31 : Operation 773 [1/1] (7.30ns)   --->   "%gmem_addr_read_21 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 773 'read' 'gmem_addr_read_21' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_31 : Operation 774 [1/1] (0.00ns)   --->   "%signal_shift_reg_20_load = load i32 %signal_shift_reg_20" [equalizer.cpp:85]   --->   Operation 774 'load' 'signal_shift_reg_20_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_31 : Operation 775 [1/1] (0.00ns)   --->   "%store_ln85 = store i32 %signal_shift_reg_19_load, i32 %signal_shift_reg_20" [equalizer.cpp:85]   --->   Operation 775 'store' 'store_ln85' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_31 : Operation 776 [2/2] (6.91ns)   --->   "%mul_ln86_11 = mul i32 %signal_shift_reg_19_load, i32 %gmem_addr_read_20" [equalizer.cpp:86]   --->   Operation 776 'mul' 'mul_ln86_11' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_31 : Operation 777 [1/2] (6.91ns)   --->   "%mul_ln86_12 = mul i32 %signal_shift_reg_18_load, i32 %gmem_addr_read_19" [equalizer.cpp:86]   --->   Operation 777 'mul' 'mul_ln86_12' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_31 : Operation 778 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln89_21 = add i32 %add_ln89_20, i32 %add_ln89_17" [equalizer.cpp:89]   --->   Operation 778 'add' 'add_ln89_21' <Predicate = (state_2 == 4096)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_31 : Operation 779 [1/1] (4.37ns) (root node of TernaryAdder)   --->   "%add_ln89_30 = add i32 %add_ln89_29, i32 %add_ln89_21" [equalizer.cpp:89]   --->   Operation 779 'add' 'add_ln89_30' <Predicate = (state_2 == 4096)> <Delay = 4.37> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_31 : Operation 780 [2/5] (7.30ns)   --->   "%gmem_addr_22_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_22" [equalizer.cpp:69]   --->   Operation 780 'writeresp' 'gmem_addr_22_resp' <Predicate = (state_2 == 17 & icmp_ln68_13)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_31 : Operation 781 [3/5] (7.30ns)   --->   "%gmem_addr_23_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_23" [equalizer.cpp:69]   --->   Operation 781 'writeresp' 'gmem_addr_23_resp' <Predicate = (state_2 == 17 & icmp_ln68_14)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_31 : Operation 782 [4/5] (7.30ns)   --->   "%gmem_addr_24_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_24" [equalizer.cpp:69]   --->   Operation 782 'writeresp' 'gmem_addr_24_resp' <Predicate = (state_2 == 17 & icmp_ln68_15)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_31 : Operation 783 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_25, i32 %tmp_data_V_4_23, i4 15" [equalizer.cpp:69]   --->   Operation 783 'write' 'write_ln69' <Predicate = (state_2 == 17 & icmp_ln68_16)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_31 : Operation 784 [1/1] (7.30ns)   --->   "%gmem_addr_26_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_26, i32 1" [equalizer.cpp:69]   --->   Operation 784 'writereq' 'gmem_addr_26_req' <Predicate = (state_2 == 17 & icmp_ln68_17)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_31 : Operation 785 [1/1] (0.00ns)   --->   "%tmp_last_V_4_25 = phi i1 %input_r_V_last_V_val25, void %if.then10.25, i1 %tmp_last_V_4_24, void %for.body.split.25"   --->   Operation 785 'phi' 'tmp_last_V_4_25' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_31 : Operation 786 [1/1] (0.00ns)   --->   "%tmp_data_V_4_25 = phi i32 %input_r_V_data_V_val25, void %if.then10.25, i32 %tmp_data_V_4_24, void %for.body.split.25"   --->   Operation 786 'phi' 'tmp_data_V_4_25' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_31 : Operation 787 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_45)   --->   "%i_4_25 = phi i32 %add_ln72_25, void %if.then10.25, i32 %select_ln63_43, void %for.body.split.25" [equalizer.cpp:72]   --->   Operation 787 'phi' 'i_4_25' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_31 : Operation 788 [1/1] (2.47ns)   --->   "%icmp_ln63_26 = icmp_eq  i32 %tmp_data_V_4_25, i32 43962" [equalizer.cpp:63]   --->   Operation 788 'icmp' 'icmp_ln63_26' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_31 : Operation 789 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_45 = select i1 %icmp_ln63_26, i32 0, i32 %i_4_25" [equalizer.cpp:63]   --->   Operation 789 'select' 'select_ln63_45' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_31 : Operation 790 [1/1] (0.69ns)   --->   "%select_ln63_46 = select i1 %icmp_ln63_26, i13 4096, i13 %select_ln63_44" [equalizer.cpp:63]   --->   Operation 790 'select' 'select_ln63_46' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_31 : Operation 791 [1/1] (2.09ns)   --->   "%icmp_ln68_18 = icmp_eq  i13 %select_ln63_46, i13 17" [equalizer.cpp:68]   --->   Operation 791 'icmp' 'icmp_ln68_18' <Predicate = (state_2 == 17)> <Delay = 2.09> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.09> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_31 : Operation 792 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %icmp_ln68_18, void %for.body.split.27, void %if.then10.26" [equalizer.cpp:68]   --->   Operation 792 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_31 : Operation 793 [1/1] (0.00ns)   --->   "%shl_ln69_25 = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_45, i2 0" [equalizer.cpp:69]   --->   Operation 793 'bitconcatenate' 'shl_ln69_25' <Predicate = (state_2 == 17 & icmp_ln68_18)> <Delay = 0.00>
ST_31 : Operation 794 [1/1] (0.00ns)   --->   "%sext_ln69_52 = sext i34 %shl_ln69_25" [equalizer.cpp:69]   --->   Operation 794 'sext' 'sext_ln69_52' <Predicate = (state_2 == 17 & icmp_ln68_18)> <Delay = 0.00>
ST_31 : Operation 795 [1/1] (3.52ns)   --->   "%add_ln69_26 = add i64 %sext_ln69_52, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 795 'add' 'add_ln69_26' <Predicate = (state_2 == 17 & icmp_ln68_18)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_31 : Operation 796 [1/1] (0.00ns)   --->   "%trunc_ln69_25 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_26, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 796 'partselect' 'trunc_ln69_25' <Predicate = (state_2 == 17 & icmp_ln68_18)> <Delay = 0.00>
ST_31 : Operation 797 [1/1] (0.00ns)   --->   "%sext_ln69_53 = sext i62 %trunc_ln69_25" [equalizer.cpp:69]   --->   Operation 797 'sext' 'sext_ln69_53' <Predicate = (state_2 == 17 & icmp_ln68_18)> <Delay = 0.00>
ST_31 : Operation 798 [1/1] (0.00ns)   --->   "%gmem_addr_27 = getelementptr i32 %gmem, i64 %sext_ln69_53" [equalizer.cpp:69]   --->   Operation 798 'getelementptr' 'gmem_addr_27' <Predicate = (state_2 == 17 & icmp_ln68_18)> <Delay = 0.00>
ST_31 : Operation 799 [1/1] (2.55ns)   --->   "%add_ln72_26 = add i32 %select_ln63_45, i32 1" [equalizer.cpp:72]   --->   Operation 799 'add' 'add_ln72_26' <Predicate = (state_2 == 17 & icmp_ln68_18)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 32 <SV = 37> <Delay = 7.30>
ST_32 : Operation 800 [1/1] (7.30ns)   --->   "%gmem_addr_read_22 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 800 'read' 'gmem_addr_read_22' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_32 : Operation 801 [1/1] (0.00ns)   --->   "%signal_shift_reg_21_load = load i32 %signal_shift_reg_21" [equalizer.cpp:85]   --->   Operation 801 'load' 'signal_shift_reg_21_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_32 : Operation 802 [1/1] (0.00ns)   --->   "%store_ln85 = store i32 %signal_shift_reg_20_load, i32 %signal_shift_reg_21" [equalizer.cpp:85]   --->   Operation 802 'store' 'store_ln85' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_32 : Operation 803 [2/2] (6.91ns)   --->   "%mul_ln86_10 = mul i32 %signal_shift_reg_20_load, i32 %gmem_addr_read_21" [equalizer.cpp:86]   --->   Operation 803 'mul' 'mul_ln86_10' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_32 : Operation 804 [1/2] (6.91ns)   --->   "%mul_ln86_11 = mul i32 %signal_shift_reg_19_load, i32 %gmem_addr_read_20" [equalizer.cpp:86]   --->   Operation 804 'mul' 'mul_ln86_11' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_32 : Operation 805 [1/1] (2.55ns)   --->   "%add_ln89_11 = add i32 %mul_ln86_12, i32 %mul_ln86_13" [equalizer.cpp:89]   --->   Operation 805 'add' 'add_ln89_11' <Predicate = (state_2 == 4096)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_32 : Operation 806 [1/5] (7.30ns)   --->   "%gmem_addr_22_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_22" [equalizer.cpp:69]   --->   Operation 806 'writeresp' 'gmem_addr_22_resp' <Predicate = (state_2 == 17 & icmp_ln68_13)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_32 : Operation 807 [2/5] (7.30ns)   --->   "%gmem_addr_23_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_23" [equalizer.cpp:69]   --->   Operation 807 'writeresp' 'gmem_addr_23_resp' <Predicate = (state_2 == 17 & icmp_ln68_14)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_32 : Operation 808 [3/5] (7.30ns)   --->   "%gmem_addr_24_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_24" [equalizer.cpp:69]   --->   Operation 808 'writeresp' 'gmem_addr_24_resp' <Predicate = (state_2 == 17 & icmp_ln68_15)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_32 : Operation 809 [5/5] (7.30ns)   --->   "%gmem_addr_25_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_25" [equalizer.cpp:69]   --->   Operation 809 'writeresp' 'gmem_addr_25_resp' <Predicate = (state_2 == 17 & icmp_ln68_16)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_32 : Operation 810 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_26, i32 %tmp_data_V_4_24, i4 15" [equalizer.cpp:69]   --->   Operation 810 'write' 'write_ln69' <Predicate = (state_2 == 17 & icmp_ln68_17)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_32 : Operation 811 [1/1] (7.30ns)   --->   "%gmem_addr_27_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_27, i32 1" [equalizer.cpp:69]   --->   Operation 811 'writereq' 'gmem_addr_27_req' <Predicate = (state_2 == 17 & icmp_ln68_18)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_32 : Operation 812 [1/1] (0.00ns)   --->   "%empty_45 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 812 'read' 'empty_45' <Predicate = (state_2 == 17 & icmp_ln68_18)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_32 : Operation 813 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val26 = extractvalue i44 %empty_45"   --->   Operation 813 'extractvalue' 'input_r_V_data_V_val26' <Predicate = (state_2 == 17 & icmp_ln68_18)> <Delay = 0.00>
ST_32 : Operation 814 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val26 = extractvalue i44 %empty_45"   --->   Operation 814 'extractvalue' 'input_r_V_last_V_val26' <Predicate = (state_2 == 17 & icmp_ln68_18)> <Delay = 0.00>
ST_32 : Operation 815 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.27" [equalizer.cpp:73]   --->   Operation 815 'br' 'br_ln73' <Predicate = (state_2 == 17 & icmp_ln68_18)> <Delay = 1.58>
ST_32 : Operation 816 [1/1] (0.00ns)   --->   "%tmp_data_V_4_26 = phi i32 %input_r_V_data_V_val26, void %if.then10.26, i32 %tmp_data_V_4_25, void %for.body.split.26"   --->   Operation 816 'phi' 'tmp_data_V_4_26' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_32 : Operation 817 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_47)   --->   "%i_4_26 = phi i32 %add_ln72_26, void %if.then10.26, i32 %select_ln63_45, void %for.body.split.26" [equalizer.cpp:72]   --->   Operation 817 'phi' 'i_4_26' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_32 : Operation 818 [1/1] (2.47ns)   --->   "%icmp_ln63_27 = icmp_eq  i32 %tmp_data_V_4_26, i32 43962" [equalizer.cpp:63]   --->   Operation 818 'icmp' 'icmp_ln63_27' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_32 : Operation 819 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_47 = select i1 %icmp_ln63_27, i32 0, i32 %i_4_26" [equalizer.cpp:63]   --->   Operation 819 'select' 'select_ln63_47' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_32 : Operation 820 [1/1] (0.69ns)   --->   "%select_ln63_48 = select i1 %icmp_ln63_27, i13 4096, i13 %select_ln63_46" [equalizer.cpp:63]   --->   Operation 820 'select' 'select_ln63_48' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_32 : Operation 821 [1/1] (2.09ns)   --->   "%icmp_ln68_19 = icmp_eq  i13 %select_ln63_48, i13 17" [equalizer.cpp:68]   --->   Operation 821 'icmp' 'icmp_ln68_19' <Predicate = (state_2 == 17)> <Delay = 2.09> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.09> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>

State 33 <SV = 38> <Delay = 7.30>
ST_33 : Operation 822 [1/1] (7.30ns)   --->   "%gmem_addr_read_23 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 822 'read' 'gmem_addr_read_23' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_33 : Operation 823 [1/1] (0.00ns)   --->   "%signal_shift_reg_22_load = load i32 %signal_shift_reg_22" [equalizer.cpp:85]   --->   Operation 823 'load' 'signal_shift_reg_22_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_33 : Operation 824 [1/1] (0.00ns)   --->   "%store_ln85 = store i32 %signal_shift_reg_21_load, i32 %signal_shift_reg_22" [equalizer.cpp:85]   --->   Operation 824 'store' 'store_ln85' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_33 : Operation 825 [2/2] (6.91ns)   --->   "%mul_ln86_9 = mul i32 %signal_shift_reg_21_load, i32 %gmem_addr_read_22" [equalizer.cpp:86]   --->   Operation 825 'mul' 'mul_ln86_9' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_33 : Operation 826 [1/2] (6.91ns)   --->   "%mul_ln86_10 = mul i32 %signal_shift_reg_20_load, i32 %gmem_addr_read_21" [equalizer.cpp:86]   --->   Operation 826 'mul' 'mul_ln86_10' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_33 : Operation 827 [1/5] (7.30ns)   --->   "%gmem_addr_23_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_23" [equalizer.cpp:69]   --->   Operation 827 'writeresp' 'gmem_addr_23_resp' <Predicate = (state_2 == 17 & icmp_ln68_14)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_33 : Operation 828 [2/5] (7.30ns)   --->   "%gmem_addr_24_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_24" [equalizer.cpp:69]   --->   Operation 828 'writeresp' 'gmem_addr_24_resp' <Predicate = (state_2 == 17 & icmp_ln68_15)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_33 : Operation 829 [4/5] (7.30ns)   --->   "%gmem_addr_25_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_25" [equalizer.cpp:69]   --->   Operation 829 'writeresp' 'gmem_addr_25_resp' <Predicate = (state_2 == 17 & icmp_ln68_16)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_33 : Operation 830 [5/5] (7.30ns)   --->   "%gmem_addr_26_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_26" [equalizer.cpp:69]   --->   Operation 830 'writeresp' 'gmem_addr_26_resp' <Predicate = (state_2 == 17 & icmp_ln68_17)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_33 : Operation 831 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_27, i32 %tmp_data_V_4_25, i4 15" [equalizer.cpp:69]   --->   Operation 831 'write' 'write_ln69' <Predicate = (state_2 == 17 & icmp_ln68_18)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_33 : Operation 832 [1/1] (0.00ns)   --->   "%tmp_last_V_4_26 = phi i1 %input_r_V_last_V_val26, void %if.then10.26, i1 %tmp_last_V_4_25, void %for.body.split.26"   --->   Operation 832 'phi' 'tmp_last_V_4_26' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_33 : Operation 833 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %icmp_ln68_19, void %for.body.split.28, void %if.then10.27" [equalizer.cpp:68]   --->   Operation 833 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_33 : Operation 834 [1/1] (0.00ns)   --->   "%shl_ln69_26 = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_47, i2 0" [equalizer.cpp:69]   --->   Operation 834 'bitconcatenate' 'shl_ln69_26' <Predicate = (state_2 == 17 & icmp_ln68_19)> <Delay = 0.00>
ST_33 : Operation 835 [1/1] (0.00ns)   --->   "%sext_ln69_54 = sext i34 %shl_ln69_26" [equalizer.cpp:69]   --->   Operation 835 'sext' 'sext_ln69_54' <Predicate = (state_2 == 17 & icmp_ln68_19)> <Delay = 0.00>
ST_33 : Operation 836 [1/1] (3.52ns)   --->   "%add_ln69_27 = add i64 %sext_ln69_54, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 836 'add' 'add_ln69_27' <Predicate = (state_2 == 17 & icmp_ln68_19)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_33 : Operation 837 [1/1] (0.00ns)   --->   "%trunc_ln69_26 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_27, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 837 'partselect' 'trunc_ln69_26' <Predicate = (state_2 == 17 & icmp_ln68_19)> <Delay = 0.00>
ST_33 : Operation 838 [1/1] (0.00ns)   --->   "%sext_ln69_55 = sext i62 %trunc_ln69_26" [equalizer.cpp:69]   --->   Operation 838 'sext' 'sext_ln69_55' <Predicate = (state_2 == 17 & icmp_ln68_19)> <Delay = 0.00>
ST_33 : Operation 839 [1/1] (0.00ns)   --->   "%gmem_addr_28 = getelementptr i32 %gmem, i64 %sext_ln69_55" [equalizer.cpp:69]   --->   Operation 839 'getelementptr' 'gmem_addr_28' <Predicate = (state_2 == 17 & icmp_ln68_19)> <Delay = 0.00>
ST_33 : Operation 840 [1/1] (0.00ns)   --->   "%empty_46 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 840 'read' 'empty_46' <Predicate = (state_2 == 17 & icmp_ln68_19)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_33 : Operation 841 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val27 = extractvalue i44 %empty_46"   --->   Operation 841 'extractvalue' 'input_r_V_data_V_val27' <Predicate = (state_2 == 17 & icmp_ln68_19)> <Delay = 0.00>
ST_33 : Operation 842 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val27 = extractvalue i44 %empty_46"   --->   Operation 842 'extractvalue' 'input_r_V_last_V_val27' <Predicate = (state_2 == 17 & icmp_ln68_19)> <Delay = 0.00>
ST_33 : Operation 843 [1/1] (2.55ns)   --->   "%add_ln72_27 = add i32 %select_ln63_47, i32 1" [equalizer.cpp:72]   --->   Operation 843 'add' 'add_ln72_27' <Predicate = (state_2 == 17 & icmp_ln68_19)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_33 : Operation 844 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.28" [equalizer.cpp:73]   --->   Operation 844 'br' 'br_ln73' <Predicate = (state_2 == 17 & icmp_ln68_19)> <Delay = 1.58>
ST_33 : Operation 845 [1/1] (0.00ns)   --->   "%tmp_data_V_4_27 = phi i32 %input_r_V_data_V_val27, void %if.then10.27, i32 %tmp_data_V_4_26, void %for.body.split.27"   --->   Operation 845 'phi' 'tmp_data_V_4_27' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_33 : Operation 846 [1/1] (2.47ns)   --->   "%icmp_ln63_28 = icmp_eq  i32 %tmp_data_V_4_27, i32 43962" [equalizer.cpp:63]   --->   Operation 846 'icmp' 'icmp_ln63_28' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>

State 34 <SV = 39> <Delay = 7.30>
ST_34 : Operation 847 [1/1] (7.30ns)   --->   "%gmem_addr_read_24 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 847 'read' 'gmem_addr_read_24' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_34 : Operation 848 [1/1] (0.00ns)   --->   "%signal_shift_reg_23_load = load i32 %signal_shift_reg_23" [equalizer.cpp:85]   --->   Operation 848 'load' 'signal_shift_reg_23_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_34 : Operation 849 [1/1] (0.00ns)   --->   "%store_ln85 = store i32 %signal_shift_reg_22_load, i32 %signal_shift_reg_23" [equalizer.cpp:85]   --->   Operation 849 'store' 'store_ln85' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_34 : Operation 850 [2/2] (6.91ns)   --->   "%mul_ln86_8 = mul i32 %signal_shift_reg_22_load, i32 %gmem_addr_read_23" [equalizer.cpp:86]   --->   Operation 850 'mul' 'mul_ln86_8' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_34 : Operation 851 [1/2] (6.91ns)   --->   "%mul_ln86_9 = mul i32 %signal_shift_reg_21_load, i32 %gmem_addr_read_22" [equalizer.cpp:86]   --->   Operation 851 'mul' 'mul_ln86_9' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_34 : Operation 852 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln89_10 = add i32 %mul_ln86_10, i32 %mul_ln86_11" [equalizer.cpp:89]   --->   Operation 852 'add' 'add_ln89_10' <Predicate = (state_2 == 4096)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_34 : Operation 853 [1/1] (4.37ns) (root node of TernaryAdder)   --->   "%add_ln89_12 = add i32 %add_ln89_11, i32 %add_ln89_10" [equalizer.cpp:89]   --->   Operation 853 'add' 'add_ln89_12' <Predicate = (state_2 == 4096)> <Delay = 4.37> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_34 : Operation 854 [1/5] (7.30ns)   --->   "%gmem_addr_24_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_24" [equalizer.cpp:69]   --->   Operation 854 'writeresp' 'gmem_addr_24_resp' <Predicate = (state_2 == 17 & icmp_ln68_15)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_34 : Operation 855 [3/5] (7.30ns)   --->   "%gmem_addr_25_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_25" [equalizer.cpp:69]   --->   Operation 855 'writeresp' 'gmem_addr_25_resp' <Predicate = (state_2 == 17 & icmp_ln68_16)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_34 : Operation 856 [4/5] (7.30ns)   --->   "%gmem_addr_26_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_26" [equalizer.cpp:69]   --->   Operation 856 'writeresp' 'gmem_addr_26_resp' <Predicate = (state_2 == 17 & icmp_ln68_17)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_34 : Operation 857 [5/5] (7.30ns)   --->   "%gmem_addr_27_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_27" [equalizer.cpp:69]   --->   Operation 857 'writeresp' 'gmem_addr_27_resp' <Predicate = (state_2 == 17 & icmp_ln68_18)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_34 : Operation 858 [1/1] (7.30ns)   --->   "%gmem_addr_28_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_28, i32 1" [equalizer.cpp:69]   --->   Operation 858 'writereq' 'gmem_addr_28_req' <Predicate = (state_2 == 17 & icmp_ln68_19)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_34 : Operation 859 [1/1] (0.00ns)   --->   "%tmp_last_V_4_27 = phi i1 %input_r_V_last_V_val27, void %if.then10.27, i1 %tmp_last_V_4_26, void %for.body.split.27"   --->   Operation 859 'phi' 'tmp_last_V_4_27' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_34 : Operation 860 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_49)   --->   "%i_4_27 = phi i32 %add_ln72_27, void %if.then10.27, i32 %select_ln63_47, void %for.body.split.27" [equalizer.cpp:72]   --->   Operation 860 'phi' 'i_4_27' <Predicate = (state_2 == 17 & !icmp_ln63_28)> <Delay = 0.00>
ST_34 : Operation 861 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_49 = select i1 %icmp_ln63_28, i32 0, i32 %i_4_27" [equalizer.cpp:63]   --->   Operation 861 'select' 'select_ln63_49' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_34 : Operation 862 [1/1] (0.69ns)   --->   "%select_ln63_50 = select i1 %icmp_ln63_28, i13 4096, i13 %select_ln63_48" [equalizer.cpp:63]   --->   Operation 862 'select' 'select_ln63_50' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_34 : Operation 863 [1/1] (2.09ns)   --->   "%icmp_ln68_20 = icmp_eq  i13 %select_ln63_50, i13 17" [equalizer.cpp:68]   --->   Operation 863 'icmp' 'icmp_ln68_20' <Predicate = (state_2 == 17)> <Delay = 2.09> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.09> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_34 : Operation 864 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %icmp_ln68_20, void %for.body.split.29, void %if.then10.28" [equalizer.cpp:68]   --->   Operation 864 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_34 : Operation 865 [1/1] (0.00ns)   --->   "%shl_ln69_27 = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_49, i2 0" [equalizer.cpp:69]   --->   Operation 865 'bitconcatenate' 'shl_ln69_27' <Predicate = (state_2 == 17 & icmp_ln68_20)> <Delay = 0.00>
ST_34 : Operation 866 [1/1] (0.00ns)   --->   "%sext_ln69_56 = sext i34 %shl_ln69_27" [equalizer.cpp:69]   --->   Operation 866 'sext' 'sext_ln69_56' <Predicate = (state_2 == 17 & icmp_ln68_20)> <Delay = 0.00>
ST_34 : Operation 867 [1/1] (3.52ns)   --->   "%add_ln69_28 = add i64 %sext_ln69_56, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 867 'add' 'add_ln69_28' <Predicate = (state_2 == 17 & icmp_ln68_20)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_34 : Operation 868 [1/1] (0.00ns)   --->   "%trunc_ln69_27 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_28, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 868 'partselect' 'trunc_ln69_27' <Predicate = (state_2 == 17 & icmp_ln68_20)> <Delay = 0.00>
ST_34 : Operation 869 [1/1] (0.00ns)   --->   "%sext_ln69_57 = sext i62 %trunc_ln69_27" [equalizer.cpp:69]   --->   Operation 869 'sext' 'sext_ln69_57' <Predicate = (state_2 == 17 & icmp_ln68_20)> <Delay = 0.00>
ST_34 : Operation 870 [1/1] (0.00ns)   --->   "%gmem_addr_29 = getelementptr i32 %gmem, i64 %sext_ln69_57" [equalizer.cpp:69]   --->   Operation 870 'getelementptr' 'gmem_addr_29' <Predicate = (state_2 == 17 & icmp_ln68_20)> <Delay = 0.00>
ST_34 : Operation 871 [1/1] (0.00ns)   --->   "%empty_47 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 871 'read' 'empty_47' <Predicate = (state_2 == 17 & icmp_ln68_20)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_34 : Operation 872 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val28 = extractvalue i44 %empty_47"   --->   Operation 872 'extractvalue' 'input_r_V_data_V_val28' <Predicate = (state_2 == 17 & icmp_ln68_20)> <Delay = 0.00>
ST_34 : Operation 873 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val28 = extractvalue i44 %empty_47"   --->   Operation 873 'extractvalue' 'input_r_V_last_V_val28' <Predicate = (state_2 == 17 & icmp_ln68_20)> <Delay = 0.00>
ST_34 : Operation 874 [1/1] (2.55ns)   --->   "%add_ln72_28 = add i32 %select_ln63_49, i32 1" [equalizer.cpp:72]   --->   Operation 874 'add' 'add_ln72_28' <Predicate = (state_2 == 17 & icmp_ln68_20)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_34 : Operation 875 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.29" [equalizer.cpp:73]   --->   Operation 875 'br' 'br_ln73' <Predicate = (state_2 == 17 & icmp_ln68_20)> <Delay = 1.58>

State 35 <SV = 40> <Delay = 7.30>
ST_35 : Operation 876 [1/1] (7.30ns)   --->   "%gmem_addr_read_25 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 876 'read' 'gmem_addr_read_25' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_35 : Operation 877 [1/1] (0.00ns)   --->   "%signal_shift_reg_24_load = load i32 %signal_shift_reg_24" [equalizer.cpp:85]   --->   Operation 877 'load' 'signal_shift_reg_24_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_35 : Operation 878 [1/1] (0.00ns)   --->   "%store_ln85 = store i32 %signal_shift_reg_23_load, i32 %signal_shift_reg_24" [equalizer.cpp:85]   --->   Operation 878 'store' 'store_ln85' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_35 : Operation 879 [2/2] (6.91ns)   --->   "%mul_ln86_7 = mul i32 %signal_shift_reg_23_load, i32 %gmem_addr_read_24" [equalizer.cpp:86]   --->   Operation 879 'mul' 'mul_ln86_7' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_35 : Operation 880 [1/2] (6.91ns)   --->   "%mul_ln86_8 = mul i32 %signal_shift_reg_22_load, i32 %gmem_addr_read_23" [equalizer.cpp:86]   --->   Operation 880 'mul' 'mul_ln86_8' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_35 : Operation 881 [2/5] (7.30ns)   --->   "%gmem_addr_25_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_25" [equalizer.cpp:69]   --->   Operation 881 'writeresp' 'gmem_addr_25_resp' <Predicate = (state_2 == 17 & icmp_ln68_16)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_35 : Operation 882 [3/5] (7.30ns)   --->   "%gmem_addr_26_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_26" [equalizer.cpp:69]   --->   Operation 882 'writeresp' 'gmem_addr_26_resp' <Predicate = (state_2 == 17 & icmp_ln68_17)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_35 : Operation 883 [4/5] (7.30ns)   --->   "%gmem_addr_27_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_27" [equalizer.cpp:69]   --->   Operation 883 'writeresp' 'gmem_addr_27_resp' <Predicate = (state_2 == 17 & icmp_ln68_18)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_35 : Operation 884 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_28, i32 %tmp_data_V_4_26, i4 15" [equalizer.cpp:69]   --->   Operation 884 'write' 'write_ln69' <Predicate = (state_2 == 17 & icmp_ln68_19)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_35 : Operation 885 [1/1] (7.30ns)   --->   "%gmem_addr_29_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_29, i32 1" [equalizer.cpp:69]   --->   Operation 885 'writereq' 'gmem_addr_29_req' <Predicate = (state_2 == 17 & icmp_ln68_20)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_35 : Operation 886 [1/1] (0.00ns)   --->   "%tmp_last_V_4_28 = phi i1 %input_r_V_last_V_val28, void %if.then10.28, i1 %tmp_last_V_4_27, void %for.body.split.28"   --->   Operation 886 'phi' 'tmp_last_V_4_28' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_35 : Operation 887 [1/1] (0.00ns)   --->   "%tmp_data_V_4_28 = phi i32 %input_r_V_data_V_val28, void %if.then10.28, i32 %tmp_data_V_4_27, void %for.body.split.28"   --->   Operation 887 'phi' 'tmp_data_V_4_28' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_35 : Operation 888 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_51)   --->   "%i_4_28 = phi i32 %add_ln72_28, void %if.then10.28, i32 %select_ln63_49, void %for.body.split.28" [equalizer.cpp:72]   --->   Operation 888 'phi' 'i_4_28' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_35 : Operation 889 [1/1] (2.47ns)   --->   "%icmp_ln63_29 = icmp_eq  i32 %tmp_data_V_4_28, i32 43962" [equalizer.cpp:63]   --->   Operation 889 'icmp' 'icmp_ln63_29' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_35 : Operation 890 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_51 = select i1 %icmp_ln63_29, i32 0, i32 %i_4_28" [equalizer.cpp:63]   --->   Operation 890 'select' 'select_ln63_51' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_35 : Operation 891 [1/1] (0.69ns)   --->   "%select_ln63_52 = select i1 %icmp_ln63_29, i13 4096, i13 %select_ln63_50" [equalizer.cpp:63]   --->   Operation 891 'select' 'select_ln63_52' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_35 : Operation 892 [1/1] (2.09ns)   --->   "%icmp_ln68_21 = icmp_eq  i13 %select_ln63_52, i13 17" [equalizer.cpp:68]   --->   Operation 892 'icmp' 'icmp_ln68_21' <Predicate = (state_2 == 17)> <Delay = 2.09> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.09> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_35 : Operation 893 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %icmp_ln68_21, void %for.body.split.30, void %if.then10.29" [equalizer.cpp:68]   --->   Operation 893 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_35 : Operation 894 [1/1] (0.00ns)   --->   "%shl_ln69_28 = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_51, i2 0" [equalizer.cpp:69]   --->   Operation 894 'bitconcatenate' 'shl_ln69_28' <Predicate = (state_2 == 17 & icmp_ln68_21)> <Delay = 0.00>
ST_35 : Operation 895 [1/1] (0.00ns)   --->   "%sext_ln69_58 = sext i34 %shl_ln69_28" [equalizer.cpp:69]   --->   Operation 895 'sext' 'sext_ln69_58' <Predicate = (state_2 == 17 & icmp_ln68_21)> <Delay = 0.00>
ST_35 : Operation 896 [1/1] (3.52ns)   --->   "%add_ln69_29 = add i64 %sext_ln69_58, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 896 'add' 'add_ln69_29' <Predicate = (state_2 == 17 & icmp_ln68_21)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_35 : Operation 897 [1/1] (0.00ns)   --->   "%trunc_ln69_28 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_29, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 897 'partselect' 'trunc_ln69_28' <Predicate = (state_2 == 17 & icmp_ln68_21)> <Delay = 0.00>
ST_35 : Operation 898 [1/1] (0.00ns)   --->   "%sext_ln69_59 = sext i62 %trunc_ln69_28" [equalizer.cpp:69]   --->   Operation 898 'sext' 'sext_ln69_59' <Predicate = (state_2 == 17 & icmp_ln68_21)> <Delay = 0.00>
ST_35 : Operation 899 [1/1] (0.00ns)   --->   "%gmem_addr_30 = getelementptr i32 %gmem, i64 %sext_ln69_59" [equalizer.cpp:69]   --->   Operation 899 'getelementptr' 'gmem_addr_30' <Predicate = (state_2 == 17 & icmp_ln68_21)> <Delay = 0.00>
ST_35 : Operation 900 [1/1] (2.55ns)   --->   "%add_ln72_29 = add i32 %select_ln63_51, i32 1" [equalizer.cpp:72]   --->   Operation 900 'add' 'add_ln72_29' <Predicate = (state_2 == 17 & icmp_ln68_21)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 36 <SV = 41> <Delay = 7.30>
ST_36 : Operation 901 [1/1] (7.30ns)   --->   "%gmem_addr_read_26 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 901 'read' 'gmem_addr_read_26' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_36 : Operation 902 [1/1] (0.00ns)   --->   "%signal_shift_reg_25_load = load i32 %signal_shift_reg_25" [equalizer.cpp:85]   --->   Operation 902 'load' 'signal_shift_reg_25_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_36 : Operation 903 [1/1] (0.00ns)   --->   "%store_ln85 = store i32 %signal_shift_reg_24_load, i32 %signal_shift_reg_25" [equalizer.cpp:85]   --->   Operation 903 'store' 'store_ln85' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_36 : Operation 904 [2/2] (6.91ns)   --->   "%mul_ln86_6 = mul i32 %signal_shift_reg_24_load, i32 %gmem_addr_read_25" [equalizer.cpp:86]   --->   Operation 904 'mul' 'mul_ln86_6' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_36 : Operation 905 [1/2] (6.91ns)   --->   "%mul_ln86_7 = mul i32 %signal_shift_reg_23_load, i32 %gmem_addr_read_24" [equalizer.cpp:86]   --->   Operation 905 'mul' 'mul_ln86_7' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_36 : Operation 906 [1/1] (2.55ns)   --->   "%add_ln89_8 = add i32 %mul_ln86_8, i32 %mul_ln86_9" [equalizer.cpp:89]   --->   Operation 906 'add' 'add_ln89_8' <Predicate = (state_2 == 4096)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_36 : Operation 907 [1/5] (7.30ns)   --->   "%gmem_addr_25_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_25" [equalizer.cpp:69]   --->   Operation 907 'writeresp' 'gmem_addr_25_resp' <Predicate = (state_2 == 17 & icmp_ln68_16)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_36 : Operation 908 [2/5] (7.30ns)   --->   "%gmem_addr_26_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_26" [equalizer.cpp:69]   --->   Operation 908 'writeresp' 'gmem_addr_26_resp' <Predicate = (state_2 == 17 & icmp_ln68_17)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_36 : Operation 909 [3/5] (7.30ns)   --->   "%gmem_addr_27_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_27" [equalizer.cpp:69]   --->   Operation 909 'writeresp' 'gmem_addr_27_resp' <Predicate = (state_2 == 17 & icmp_ln68_18)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_36 : Operation 910 [5/5] (7.30ns)   --->   "%gmem_addr_28_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_28" [equalizer.cpp:69]   --->   Operation 910 'writeresp' 'gmem_addr_28_resp' <Predicate = (state_2 == 17 & icmp_ln68_19)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_36 : Operation 911 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_29, i32 %tmp_data_V_4_27, i4 15" [equalizer.cpp:69]   --->   Operation 911 'write' 'write_ln69' <Predicate = (state_2 == 17 & icmp_ln68_20)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_36 : Operation 912 [1/1] (7.30ns)   --->   "%gmem_addr_30_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_30, i32 1" [equalizer.cpp:69]   --->   Operation 912 'writereq' 'gmem_addr_30_req' <Predicate = (state_2 == 17 & icmp_ln68_21)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_36 : Operation 913 [1/1] (0.00ns)   --->   "%empty_48 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 913 'read' 'empty_48' <Predicate = (state_2 == 17 & icmp_ln68_21)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_36 : Operation 914 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val29 = extractvalue i44 %empty_48"   --->   Operation 914 'extractvalue' 'input_r_V_data_V_val29' <Predicate = (state_2 == 17 & icmp_ln68_21)> <Delay = 0.00>
ST_36 : Operation 915 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val29 = extractvalue i44 %empty_48"   --->   Operation 915 'extractvalue' 'input_r_V_last_V_val29' <Predicate = (state_2 == 17 & icmp_ln68_21)> <Delay = 0.00>
ST_36 : Operation 916 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.30" [equalizer.cpp:73]   --->   Operation 916 'br' 'br_ln73' <Predicate = (state_2 == 17 & icmp_ln68_21)> <Delay = 1.58>
ST_36 : Operation 917 [1/1] (0.00ns)   --->   "%tmp_data_V_4_29 = phi i32 %input_r_V_data_V_val29, void %if.then10.29, i32 %tmp_data_V_4_28, void %for.body.split.29"   --->   Operation 917 'phi' 'tmp_data_V_4_29' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_36 : Operation 918 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_53)   --->   "%i_4_29 = phi i32 %add_ln72_29, void %if.then10.29, i32 %select_ln63_51, void %for.body.split.29" [equalizer.cpp:72]   --->   Operation 918 'phi' 'i_4_29' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_36 : Operation 919 [1/1] (2.47ns)   --->   "%icmp_ln63_30 = icmp_eq  i32 %tmp_data_V_4_29, i32 43962" [equalizer.cpp:63]   --->   Operation 919 'icmp' 'icmp_ln63_30' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_36 : Operation 920 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_53 = select i1 %icmp_ln63_30, i32 0, i32 %i_4_29" [equalizer.cpp:63]   --->   Operation 920 'select' 'select_ln63_53' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_36 : Operation 921 [1/1] (0.69ns)   --->   "%select_ln63_54 = select i1 %icmp_ln63_30, i13 4096, i13 %select_ln63_52" [equalizer.cpp:63]   --->   Operation 921 'select' 'select_ln63_54' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_36 : Operation 922 [1/1] (2.09ns)   --->   "%icmp_ln68_22 = icmp_eq  i13 %select_ln63_54, i13 17" [equalizer.cpp:68]   --->   Operation 922 'icmp' 'icmp_ln68_22' <Predicate = (state_2 == 17)> <Delay = 2.09> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.09> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>

State 37 <SV = 42> <Delay = 7.30>
ST_37 : Operation 923 [1/1] (7.30ns)   --->   "%gmem_addr_read_27 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 923 'read' 'gmem_addr_read_27' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_37 : Operation 924 [1/1] (0.00ns)   --->   "%signal_shift_reg_26_load = load i32 %signal_shift_reg_26" [equalizer.cpp:85]   --->   Operation 924 'load' 'signal_shift_reg_26_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_37 : Operation 925 [1/1] (0.00ns)   --->   "%store_ln85 = store i32 %signal_shift_reg_25_load, i32 %signal_shift_reg_26" [equalizer.cpp:85]   --->   Operation 925 'store' 'store_ln85' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_37 : Operation 926 [2/2] (6.91ns)   --->   "%mul_ln86_5 = mul i32 %signal_shift_reg_25_load, i32 %gmem_addr_read_26" [equalizer.cpp:86]   --->   Operation 926 'mul' 'mul_ln86_5' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_37 : Operation 927 [1/2] (6.91ns)   --->   "%mul_ln86_6 = mul i32 %signal_shift_reg_24_load, i32 %gmem_addr_read_25" [equalizer.cpp:86]   --->   Operation 927 'mul' 'mul_ln86_6' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_37 : Operation 928 [1/5] (7.30ns)   --->   "%gmem_addr_26_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_26" [equalizer.cpp:69]   --->   Operation 928 'writeresp' 'gmem_addr_26_resp' <Predicate = (state_2 == 17 & icmp_ln68_17)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_37 : Operation 929 [2/5] (7.30ns)   --->   "%gmem_addr_27_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_27" [equalizer.cpp:69]   --->   Operation 929 'writeresp' 'gmem_addr_27_resp' <Predicate = (state_2 == 17 & icmp_ln68_18)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_37 : Operation 930 [4/5] (7.30ns)   --->   "%gmem_addr_28_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_28" [equalizer.cpp:69]   --->   Operation 930 'writeresp' 'gmem_addr_28_resp' <Predicate = (state_2 == 17 & icmp_ln68_19)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_37 : Operation 931 [5/5] (7.30ns)   --->   "%gmem_addr_29_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_29" [equalizer.cpp:69]   --->   Operation 931 'writeresp' 'gmem_addr_29_resp' <Predicate = (state_2 == 17 & icmp_ln68_20)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_37 : Operation 932 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_30, i32 %tmp_data_V_4_28, i4 15" [equalizer.cpp:69]   --->   Operation 932 'write' 'write_ln69' <Predicate = (state_2 == 17 & icmp_ln68_21)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_37 : Operation 933 [1/1] (0.00ns)   --->   "%tmp_last_V_4_29 = phi i1 %input_r_V_last_V_val29, void %if.then10.29, i1 %tmp_last_V_4_28, void %for.body.split.29"   --->   Operation 933 'phi' 'tmp_last_V_4_29' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_37 : Operation 934 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %icmp_ln68_22, void %for.body.split.31, void %if.then10.30" [equalizer.cpp:68]   --->   Operation 934 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_37 : Operation 935 [1/1] (0.00ns)   --->   "%shl_ln69_29 = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_53, i2 0" [equalizer.cpp:69]   --->   Operation 935 'bitconcatenate' 'shl_ln69_29' <Predicate = (state_2 == 17 & icmp_ln68_22)> <Delay = 0.00>
ST_37 : Operation 936 [1/1] (0.00ns)   --->   "%sext_ln69_60 = sext i34 %shl_ln69_29" [equalizer.cpp:69]   --->   Operation 936 'sext' 'sext_ln69_60' <Predicate = (state_2 == 17 & icmp_ln68_22)> <Delay = 0.00>
ST_37 : Operation 937 [1/1] (3.52ns)   --->   "%add_ln69_30 = add i64 %sext_ln69_60, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 937 'add' 'add_ln69_30' <Predicate = (state_2 == 17 & icmp_ln68_22)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_37 : Operation 938 [1/1] (0.00ns)   --->   "%trunc_ln69_29 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_30, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 938 'partselect' 'trunc_ln69_29' <Predicate = (state_2 == 17 & icmp_ln68_22)> <Delay = 0.00>
ST_37 : Operation 939 [1/1] (0.00ns)   --->   "%sext_ln69_61 = sext i62 %trunc_ln69_29" [equalizer.cpp:69]   --->   Operation 939 'sext' 'sext_ln69_61' <Predicate = (state_2 == 17 & icmp_ln68_22)> <Delay = 0.00>
ST_37 : Operation 940 [1/1] (0.00ns)   --->   "%gmem_addr_31 = getelementptr i32 %gmem, i64 %sext_ln69_61" [equalizer.cpp:69]   --->   Operation 940 'getelementptr' 'gmem_addr_31' <Predicate = (state_2 == 17 & icmp_ln68_22)> <Delay = 0.00>
ST_37 : Operation 941 [1/1] (0.00ns)   --->   "%empty_49 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 941 'read' 'empty_49' <Predicate = (state_2 == 17 & icmp_ln68_22)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_37 : Operation 942 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val30 = extractvalue i44 %empty_49"   --->   Operation 942 'extractvalue' 'input_r_V_data_V_val30' <Predicate = (state_2 == 17 & icmp_ln68_22)> <Delay = 0.00>
ST_37 : Operation 943 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val30 = extractvalue i44 %empty_49"   --->   Operation 943 'extractvalue' 'input_r_V_last_V_val30' <Predicate = (state_2 == 17 & icmp_ln68_22)> <Delay = 0.00>
ST_37 : Operation 944 [1/1] (2.55ns)   --->   "%add_ln72_30 = add i32 %select_ln63_53, i32 1" [equalizer.cpp:72]   --->   Operation 944 'add' 'add_ln72_30' <Predicate = (state_2 == 17 & icmp_ln68_22)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_37 : Operation 945 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.31" [equalizer.cpp:73]   --->   Operation 945 'br' 'br_ln73' <Predicate = (state_2 == 17 & icmp_ln68_22)> <Delay = 1.58>
ST_37 : Operation 946 [1/1] (0.00ns)   --->   "%tmp_data_V_4_30 = phi i32 %input_r_V_data_V_val30, void %if.then10.30, i32 %tmp_data_V_4_29, void %for.body.split.30"   --->   Operation 946 'phi' 'tmp_data_V_4_30' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_37 : Operation 947 [1/1] (2.47ns)   --->   "%icmp_ln63_31 = icmp_eq  i32 %tmp_data_V_4_30, i32 43962" [equalizer.cpp:63]   --->   Operation 947 'icmp' 'icmp_ln63_31' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>

State 38 <SV = 43> <Delay = 7.30>
ST_38 : Operation 948 [1/1] (7.30ns)   --->   "%gmem_addr_read_28 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 948 'read' 'gmem_addr_read_28' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_38 : Operation 949 [1/1] (0.00ns)   --->   "%signal_shift_reg_27_load = load i32 %signal_shift_reg_27" [equalizer.cpp:85]   --->   Operation 949 'load' 'signal_shift_reg_27_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_38 : Operation 950 [1/1] (0.00ns)   --->   "%store_ln85 = store i32 %signal_shift_reg_26_load, i32 %signal_shift_reg_27" [equalizer.cpp:85]   --->   Operation 950 'store' 'store_ln85' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_38 : Operation 951 [2/2] (6.91ns)   --->   "%mul_ln86_4 = mul i32 %signal_shift_reg_26_load, i32 %gmem_addr_read_27" [equalizer.cpp:86]   --->   Operation 951 'mul' 'mul_ln86_4' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_38 : Operation 952 [1/2] (6.91ns)   --->   "%mul_ln86_5 = mul i32 %signal_shift_reg_25_load, i32 %gmem_addr_read_26" [equalizer.cpp:86]   --->   Operation 952 'mul' 'mul_ln86_5' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_38 : Operation 953 [1/1] (2.55ns)   --->   "%add_ln89_7 = add i32 %mul_ln86_6, i32 %mul_ln86_7" [equalizer.cpp:89]   --->   Operation 953 'add' 'add_ln89_7' <Predicate = (state_2 == 4096)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_38 : Operation 954 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln89_9 = add i32 %add_ln89_8, i32 %add_ln89_7" [equalizer.cpp:89]   --->   Operation 954 'add' 'add_ln89_9' <Predicate = (state_2 == 4096)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_38 : Operation 955 [1/1] (4.37ns) (root node of TernaryAdder)   --->   "%add_ln89_13 = add i32 %add_ln89_12, i32 %add_ln89_9" [equalizer.cpp:89]   --->   Operation 955 'add' 'add_ln89_13' <Predicate = (state_2 == 4096)> <Delay = 4.37> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_38 : Operation 956 [1/5] (7.30ns)   --->   "%gmem_addr_27_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_27" [equalizer.cpp:69]   --->   Operation 956 'writeresp' 'gmem_addr_27_resp' <Predicate = (state_2 == 17 & icmp_ln68_18)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_38 : Operation 957 [3/5] (7.30ns)   --->   "%gmem_addr_28_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_28" [equalizer.cpp:69]   --->   Operation 957 'writeresp' 'gmem_addr_28_resp' <Predicate = (state_2 == 17 & icmp_ln68_19)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_38 : Operation 958 [4/5] (7.30ns)   --->   "%gmem_addr_29_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_29" [equalizer.cpp:69]   --->   Operation 958 'writeresp' 'gmem_addr_29_resp' <Predicate = (state_2 == 17 & icmp_ln68_20)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_38 : Operation 959 [5/5] (7.30ns)   --->   "%gmem_addr_30_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_30" [equalizer.cpp:69]   --->   Operation 959 'writeresp' 'gmem_addr_30_resp' <Predicate = (state_2 == 17 & icmp_ln68_21)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_38 : Operation 960 [1/1] (7.30ns)   --->   "%gmem_addr_31_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_31, i32 1" [equalizer.cpp:69]   --->   Operation 960 'writereq' 'gmem_addr_31_req' <Predicate = (state_2 == 17 & icmp_ln68_22)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_38 : Operation 961 [1/1] (0.00ns)   --->   "%tmp_last_V_4_30 = phi i1 %input_r_V_last_V_val30, void %if.then10.30, i1 %tmp_last_V_4_29, void %for.body.split.30"   --->   Operation 961 'phi' 'tmp_last_V_4_30' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_38 : Operation 962 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_55)   --->   "%i_4_30 = phi i32 %add_ln72_30, void %if.then10.30, i32 %select_ln63_53, void %for.body.split.30" [equalizer.cpp:72]   --->   Operation 962 'phi' 'i_4_30' <Predicate = (state_2 == 17 & !icmp_ln63_31)> <Delay = 0.00>
ST_38 : Operation 963 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_55 = select i1 %icmp_ln63_31, i32 0, i32 %i_4_30" [equalizer.cpp:63]   --->   Operation 963 'select' 'select_ln63_55' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_38 : Operation 964 [1/1] (0.69ns)   --->   "%select_ln63_56 = select i1 %icmp_ln63_31, i13 4096, i13 %select_ln63_54" [equalizer.cpp:63]   --->   Operation 964 'select' 'select_ln63_56' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_38 : Operation 965 [1/1] (2.09ns)   --->   "%icmp_ln68_23 = icmp_eq  i13 %select_ln63_56, i13 17" [equalizer.cpp:68]   --->   Operation 965 'icmp' 'icmp_ln68_23' <Predicate = (state_2 == 17)> <Delay = 2.09> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.09> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_38 : Operation 966 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %icmp_ln68_23, void %for.body.split.32, void %if.then10.31" [equalizer.cpp:68]   --->   Operation 966 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_38 : Operation 967 [1/1] (0.00ns)   --->   "%shl_ln69_30 = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_55, i2 0" [equalizer.cpp:69]   --->   Operation 967 'bitconcatenate' 'shl_ln69_30' <Predicate = (state_2 == 17 & icmp_ln68_23)> <Delay = 0.00>
ST_38 : Operation 968 [1/1] (0.00ns)   --->   "%sext_ln69_62 = sext i34 %shl_ln69_30" [equalizer.cpp:69]   --->   Operation 968 'sext' 'sext_ln69_62' <Predicate = (state_2 == 17 & icmp_ln68_23)> <Delay = 0.00>
ST_38 : Operation 969 [1/1] (3.52ns)   --->   "%add_ln69_31 = add i64 %sext_ln69_62, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 969 'add' 'add_ln69_31' <Predicate = (state_2 == 17 & icmp_ln68_23)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_38 : Operation 970 [1/1] (0.00ns)   --->   "%trunc_ln69_30 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_31, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 970 'partselect' 'trunc_ln69_30' <Predicate = (state_2 == 17 & icmp_ln68_23)> <Delay = 0.00>
ST_38 : Operation 971 [1/1] (0.00ns)   --->   "%sext_ln69_63 = sext i62 %trunc_ln69_30" [equalizer.cpp:69]   --->   Operation 971 'sext' 'sext_ln69_63' <Predicate = (state_2 == 17 & icmp_ln68_23)> <Delay = 0.00>
ST_38 : Operation 972 [1/1] (0.00ns)   --->   "%gmem_addr_32 = getelementptr i32 %gmem, i64 %sext_ln69_63" [equalizer.cpp:69]   --->   Operation 972 'getelementptr' 'gmem_addr_32' <Predicate = (state_2 == 17 & icmp_ln68_23)> <Delay = 0.00>
ST_38 : Operation 973 [1/1] (0.00ns)   --->   "%empty_50 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 973 'read' 'empty_50' <Predicate = (state_2 == 17 & icmp_ln68_23)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_38 : Operation 974 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val31 = extractvalue i44 %empty_50"   --->   Operation 974 'extractvalue' 'input_r_V_data_V_val31' <Predicate = (state_2 == 17 & icmp_ln68_23)> <Delay = 0.00>
ST_38 : Operation 975 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val31 = extractvalue i44 %empty_50"   --->   Operation 975 'extractvalue' 'input_r_V_last_V_val31' <Predicate = (state_2 == 17 & icmp_ln68_23)> <Delay = 0.00>
ST_38 : Operation 976 [1/1] (2.55ns)   --->   "%add_ln72_31 = add i32 %select_ln63_55, i32 1" [equalizer.cpp:72]   --->   Operation 976 'add' 'add_ln72_31' <Predicate = (state_2 == 17 & icmp_ln68_23)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_38 : Operation 977 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.32" [equalizer.cpp:73]   --->   Operation 977 'br' 'br_ln73' <Predicate = (state_2 == 17 & icmp_ln68_23)> <Delay = 1.58>

State 39 <SV = 44> <Delay = 7.30>
ST_39 : Operation 978 [1/1] (7.30ns)   --->   "%gmem_addr_read_29 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 978 'read' 'gmem_addr_read_29' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_39 : Operation 979 [1/1] (0.00ns)   --->   "%signal_shift_reg_28_load = load i32 %signal_shift_reg_28" [equalizer.cpp:85]   --->   Operation 979 'load' 'signal_shift_reg_28_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_39 : Operation 980 [1/1] (0.00ns)   --->   "%store_ln85 = store i32 %signal_shift_reg_27_load, i32 %signal_shift_reg_28" [equalizer.cpp:85]   --->   Operation 980 'store' 'store_ln85' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_39 : Operation 981 [2/2] (6.91ns)   --->   "%mul_ln86_3 = mul i32 %signal_shift_reg_27_load, i32 %gmem_addr_read_28" [equalizer.cpp:86]   --->   Operation 981 'mul' 'mul_ln86_3' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_39 : Operation 982 [1/2] (6.91ns)   --->   "%mul_ln86_4 = mul i32 %signal_shift_reg_26_load, i32 %gmem_addr_read_27" [equalizer.cpp:86]   --->   Operation 982 'mul' 'mul_ln86_4' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_39 : Operation 983 [2/5] (7.30ns)   --->   "%gmem_addr_28_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_28" [equalizer.cpp:69]   --->   Operation 983 'writeresp' 'gmem_addr_28_resp' <Predicate = (state_2 == 17 & icmp_ln68_19)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_39 : Operation 984 [3/5] (7.30ns)   --->   "%gmem_addr_29_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_29" [equalizer.cpp:69]   --->   Operation 984 'writeresp' 'gmem_addr_29_resp' <Predicate = (state_2 == 17 & icmp_ln68_20)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_39 : Operation 985 [4/5] (7.30ns)   --->   "%gmem_addr_30_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_30" [equalizer.cpp:69]   --->   Operation 985 'writeresp' 'gmem_addr_30_resp' <Predicate = (state_2 == 17 & icmp_ln68_21)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_39 : Operation 986 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_31, i32 %tmp_data_V_4_29, i4 15" [equalizer.cpp:69]   --->   Operation 986 'write' 'write_ln69' <Predicate = (state_2 == 17 & icmp_ln68_22)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_39 : Operation 987 [1/1] (7.30ns)   --->   "%gmem_addr_32_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_32, i32 1" [equalizer.cpp:69]   --->   Operation 987 'writereq' 'gmem_addr_32_req' <Predicate = (state_2 == 17 & icmp_ln68_23)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_39 : Operation 988 [1/1] (0.00ns)   --->   "%tmp_last_V_4_31 = phi i1 %input_r_V_last_V_val31, void %if.then10.31, i1 %tmp_last_V_4_30, void %for.body.split.31"   --->   Operation 988 'phi' 'tmp_last_V_4_31' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_39 : Operation 989 [1/1] (0.00ns)   --->   "%tmp_data_V_4_31 = phi i32 %input_r_V_data_V_val31, void %if.then10.31, i32 %tmp_data_V_4_30, void %for.body.split.31"   --->   Operation 989 'phi' 'tmp_data_V_4_31' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_39 : Operation 990 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_57)   --->   "%i_4_31 = phi i32 %add_ln72_31, void %if.then10.31, i32 %select_ln63_55, void %for.body.split.31" [equalizer.cpp:72]   --->   Operation 990 'phi' 'i_4_31' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_39 : Operation 991 [1/1] (2.47ns)   --->   "%icmp_ln63_32 = icmp_eq  i32 %tmp_data_V_4_31, i32 43962" [equalizer.cpp:63]   --->   Operation 991 'icmp' 'icmp_ln63_32' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_39 : Operation 992 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_57 = select i1 %icmp_ln63_32, i32 0, i32 %i_4_31" [equalizer.cpp:63]   --->   Operation 992 'select' 'select_ln63_57' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_39 : Operation 993 [1/1] (0.69ns)   --->   "%select_ln63_58 = select i1 %icmp_ln63_32, i13 4096, i13 %select_ln63_56" [equalizer.cpp:63]   --->   Operation 993 'select' 'select_ln63_58' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_39 : Operation 994 [1/1] (0.00ns)   --->   "%zext_ln68 = zext i13 %select_ln63_58" [equalizer.cpp:68]   --->   Operation 994 'zext' 'zext_ln68' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_39 : Operation 995 [1/1] (2.09ns)   --->   "%icmp_ln68_24 = icmp_eq  i13 %select_ln63_58, i13 17" [equalizer.cpp:68]   --->   Operation 995 'icmp' 'icmp_ln68_24' <Predicate = (state_2 == 17)> <Delay = 2.09> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.09> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_39 : Operation 996 [1/1] (0.00ns)   --->   "%br_ln68 = br i1 %icmp_ln68_24, void %for.body.split.32.sw.epilog_crit_edge, void %if.then10.32" [equalizer.cpp:68]   --->   Operation 996 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_39 : Operation 997 [1/1] (1.70ns)   --->   "%br_ln68 = br void %sw.epilog" [equalizer.cpp:68]   --->   Operation 997 'br' 'br_ln68' <Predicate = (state_2 == 17 & !icmp_ln68_24)> <Delay = 1.70>
ST_39 : Operation 998 [1/1] (0.00ns)   --->   "%shl_ln69_31 = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_57, i2 0" [equalizer.cpp:69]   --->   Operation 998 'bitconcatenate' 'shl_ln69_31' <Predicate = (state_2 == 17 & icmp_ln68_24)> <Delay = 0.00>
ST_39 : Operation 999 [1/1] (0.00ns)   --->   "%sext_ln69_64 = sext i34 %shl_ln69_31" [equalizer.cpp:69]   --->   Operation 999 'sext' 'sext_ln69_64' <Predicate = (state_2 == 17 & icmp_ln68_24)> <Delay = 0.00>
ST_39 : Operation 1000 [1/1] (3.52ns)   --->   "%add_ln69_32 = add i64 %sext_ln69_64, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 1000 'add' 'add_ln69_32' <Predicate = (state_2 == 17 & icmp_ln68_24)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_39 : Operation 1001 [1/1] (0.00ns)   --->   "%trunc_ln69_31 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_32, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 1001 'partselect' 'trunc_ln69_31' <Predicate = (state_2 == 17 & icmp_ln68_24)> <Delay = 0.00>
ST_39 : Operation 1002 [1/1] (0.00ns)   --->   "%sext_ln69_65 = sext i62 %trunc_ln69_31" [equalizer.cpp:69]   --->   Operation 1002 'sext' 'sext_ln69_65' <Predicate = (state_2 == 17 & icmp_ln68_24)> <Delay = 0.00>
ST_39 : Operation 1003 [1/1] (0.00ns)   --->   "%gmem_addr_33 = getelementptr i32 %gmem, i64 %sext_ln69_65" [equalizer.cpp:69]   --->   Operation 1003 'getelementptr' 'gmem_addr_33' <Predicate = (state_2 == 17 & icmp_ln68_24)> <Delay = 0.00>
ST_39 : Operation 1004 [1/1] (0.00ns)   --->   "%empty_51 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 1004 'read' 'empty_51' <Predicate = (state_2 == 17 & icmp_ln68_24)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_39 : Operation 1005 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val32 = extractvalue i44 %empty_51"   --->   Operation 1005 'extractvalue' 'input_r_V_last_V_val32' <Predicate = (state_2 == 17 & icmp_ln68_24)> <Delay = 0.00>
ST_39 : Operation 1006 [1/1] (2.55ns)   --->   "%add_ln72_32 = add i32 %select_ln63_57, i32 1" [equalizer.cpp:72]   --->   Operation 1006 'add' 'add_ln72_32' <Predicate = (state_2 == 17 & icmp_ln68_24)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_39 : Operation 1007 [1/1] (1.70ns)   --->   "%br_ln73 = br void %sw.epilog" [equalizer.cpp:73]   --->   Operation 1007 'br' 'br_ln73' <Predicate = (state_2 == 17 & icmp_ln68_24)> <Delay = 1.70>
ST_39 : Operation 1008 [1/1] (0.00ns)   --->   "%i_load = load i32 %i" [equalizer.cpp:37]   --->   Operation 1008 'load' 'i_load' <Predicate = (state_2 == 0)> <Delay = 0.00>
ST_39 : Operation 1009 [1/1] (2.55ns)   --->   "%add_ln37 = add i32 %i_load, i32 4294967295" [equalizer.cpp:37]   --->   Operation 1009 'add' 'add_ln37' <Predicate = (state_2 == 0 & icmp_ln34)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_39 : Operation 1010 [1/1] (0.00ns) (grouped into LUT with out node add_ln105)   --->   "%i_1 = select i1 %icmp_ln34, i32 %add_ln37, i32 %i_load" [equalizer.cpp:34]   --->   Operation 1010 'select' 'i_1' <Predicate = (state_2 == 0)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_39 : Operation 1011 [1/1] (1.18ns)   --->   "%select_ln9 = select i1 %icmp_ln34, i32 17, i32 0" [equalizer.cpp:9]   --->   Operation 1011 'select' 'select_ln9' <Predicate = (state_2 == 0)> <Delay = 1.18> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 1.18> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_39 : Operation 1012 [1/1] (2.55ns) (out node of the LUT)   --->   "%add_ln105 = add i32 %i_1, i32 1" [equalizer.cpp:105]   --->   Operation 1012 'add' 'add_ln105' <Predicate = (state_2 == 0)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_39 : Operation 1013 [1/1] (2.06ns)   --->   "%store_ln108 = store i32 %add_ln105, i32 %i" [equalizer.cpp:108]   --->   Operation 1013 'store' 'store_ln108' <Predicate = (state_2 == 0 & !tmp_last_V)> <Delay = 2.06>
ST_39 : Operation 1014 [1/1] (1.70ns)   --->   "%br_ln108 = br void %if.end49" [equalizer.cpp:108]   --->   Operation 1014 'br' 'br_ln108' <Predicate = (state_2 == 0 & !tmp_last_V)> <Delay = 1.70>
ST_39 : Operation 1015 [1/1] (0.00ns)   --->   "%tmp_last_V_1 = phi i1 %tmp_last_V, void %while.body, i1 %input_r_V_last_V_val32, void %if.then10.32, i1 %tmp_last_V_4_31, void %for.body.split.32.sw.epilog_crit_edge"   --->   Operation 1015 'phi' 'tmp_last_V_1' <Predicate = (state_2 != 0 & state_2 != 4096)> <Delay = 0.00>
ST_39 : Operation 1016 [1/1] (0.00ns)   --->   "%br_ln108 = br i1 %tmp_last_V_1, void %sw.epilog.if.end49_crit_edge, void %while.end" [equalizer.cpp:108]   --->   Operation 1016 'br' 'br_ln108' <Predicate = (state_2 != 0 & state_2 != 4096)> <Delay = 0.00>

State 40 <SV = 45> <Delay = 7.30>
ST_40 : Operation 1017 [1/1] (7.30ns)   --->   "%gmem_addr_read_30 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 1017 'read' 'gmem_addr_read_30' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_40 : Operation 1018 [1/1] (0.00ns)   --->   "%signal_shift_reg_29_load = load i32 %signal_shift_reg_29" [equalizer.cpp:85]   --->   Operation 1018 'load' 'signal_shift_reg_29_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_40 : Operation 1019 [1/1] (0.00ns)   --->   "%store_ln85 = store i32 %signal_shift_reg_28_load, i32 %signal_shift_reg_29" [equalizer.cpp:85]   --->   Operation 1019 'store' 'store_ln85' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_40 : Operation 1020 [2/2] (6.91ns)   --->   "%mul_ln86_2 = mul i32 %signal_shift_reg_28_load, i32 %gmem_addr_read_29" [equalizer.cpp:86]   --->   Operation 1020 'mul' 'mul_ln86_2' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_40 : Operation 1021 [1/2] (6.91ns)   --->   "%mul_ln86_3 = mul i32 %signal_shift_reg_27_load, i32 %gmem_addr_read_28" [equalizer.cpp:86]   --->   Operation 1021 'mul' 'mul_ln86_3' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_40 : Operation 1022 [1/1] (2.55ns)   --->   "%add_ln89_4 = add i32 %mul_ln86_4, i32 %mul_ln86_5" [equalizer.cpp:89]   --->   Operation 1022 'add' 'add_ln89_4' <Predicate = (state_2 == 4096)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_40 : Operation 1023 [1/5] (7.30ns)   --->   "%gmem_addr_28_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_28" [equalizer.cpp:69]   --->   Operation 1023 'writeresp' 'gmem_addr_28_resp' <Predicate = (state_2 == 17 & icmp_ln68_19)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_40 : Operation 1024 [2/5] (7.30ns)   --->   "%gmem_addr_29_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_29" [equalizer.cpp:69]   --->   Operation 1024 'writeresp' 'gmem_addr_29_resp' <Predicate = (state_2 == 17 & icmp_ln68_20)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_40 : Operation 1025 [3/5] (7.30ns)   --->   "%gmem_addr_30_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_30" [equalizer.cpp:69]   --->   Operation 1025 'writeresp' 'gmem_addr_30_resp' <Predicate = (state_2 == 17 & icmp_ln68_21)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_40 : Operation 1026 [5/5] (7.30ns)   --->   "%gmem_addr_31_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_31" [equalizer.cpp:69]   --->   Operation 1026 'writeresp' 'gmem_addr_31_resp' <Predicate = (state_2 == 17 & icmp_ln68_22)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_40 : Operation 1027 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_32, i32 %tmp_data_V_4_30, i4 15" [equalizer.cpp:69]   --->   Operation 1027 'write' 'write_ln69' <Predicate = (state_2 == 17 & icmp_ln68_23)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_40 : Operation 1028 [1/1] (2.06ns)   --->   "%store_ln68 = store i32 %select_ln63_57, i32 %i" [equalizer.cpp:68]   --->   Operation 1028 'store' 'store_ln68' <Predicate = (state_2 == 17 & !icmp_ln68_24)> <Delay = 2.06>
ST_40 : Operation 1029 [1/1] (7.30ns)   --->   "%gmem_addr_33_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_33, i32 1" [equalizer.cpp:69]   --->   Operation 1029 'writereq' 'gmem_addr_33_req' <Predicate = (state_2 == 17 & icmp_ln68_24)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_40 : Operation 1030 [1/1] (2.06ns)   --->   "%store_ln73 = store i32 %add_ln72_32, i32 %i" [equalizer.cpp:73]   --->   Operation 1030 'store' 'store_ln73' <Predicate = (state_2 == 17 & icmp_ln68_24)> <Delay = 2.06>
ST_40 : Operation 1031 [1/1] (0.00ns)   --->   "%state_1 = phi i32 %state_2, void %while.body, i32 17, void %if.then10.32, i32 %zext_ln68, void %for.body.split.32.sw.epilog_crit_edge"   --->   Operation 1031 'phi' 'state_1' <Predicate = (state_2 != 0 & state_2 != 4096)> <Delay = 0.00>
ST_40 : Operation 1032 [1/1] (0.00ns)   --->   "%i_4 = load i32 %i" [equalizer.cpp:105]   --->   Operation 1032 'load' 'i_4' <Predicate = (state_2 != 0 & state_2 != 4096)> <Delay = 0.00>
ST_40 : Operation 1033 [1/1] (2.55ns)   --->   "%i_5 = add i32 %i_4, i32 1" [equalizer.cpp:105]   --->   Operation 1033 'add' 'i_5' <Predicate = (state_2 != 0 & state_2 != 4096)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_40 : Operation 1034 [1/1] (2.06ns)   --->   "%store_ln108 = store i32 %i_5, i32 %i" [equalizer.cpp:108]   --->   Operation 1034 'store' 'store_ln108' <Predicate = (state_2 != 0 & state_2 != 4096 & !tmp_last_V_1)> <Delay = 2.06>
ST_40 : Operation 1035 [1/1] (1.70ns)   --->   "%br_ln108 = br void %if.end49" [equalizer.cpp:108]   --->   Operation 1035 'br' 'br_ln108' <Predicate = (state_2 != 0 & state_2 != 4096 & !tmp_last_V_1)> <Delay = 1.70>
ST_40 : Operation 1036 [1/1] (0.00ns)   --->   "%state_4184 = phi i32 %select_ln9, void %sw.bb.if.end49_crit_edge, i32 4096, void %for.inc28.if.end49_crit_edge, i32 %state_1, void %sw.epilog.if.end49_crit_edge"   --->   Operation 1036 'phi' 'state_4184' <Predicate = (state_2 == 4096 & !tmp_last_V) | (state_2 != 0 & state_2 != 4096 & !tmp_last_V_1) | (state_2 == 0 & !tmp_last_V)> <Delay = 0.00>
ST_40 : Operation 1037 [1/1] (1.58ns)   --->   "%store_ln28 = store i32 %state_4184, i32 %state" [equalizer.cpp:28]   --->   Operation 1037 'store' 'store_ln28' <Predicate = (state_2 == 4096 & !tmp_last_V) | (state_2 != 0 & state_2 != 4096 & !tmp_last_V_1) | (state_2 == 0 & !tmp_last_V)> <Delay = 1.58>
ST_40 : Operation 1038 [1/1] (0.00ns)   --->   "%br_ln28 = br void %while.body" [equalizer.cpp:28]   --->   Operation 1038 'br' 'br_ln28' <Predicate = (state_2 == 4096 & !tmp_last_V) | (state_2 != 0 & state_2 != 4096 & !tmp_last_V_1) | (state_2 == 0 & !tmp_last_V)> <Delay = 0.00>

State 41 <SV = 46> <Delay = 7.30>
ST_41 : Operation 1039 [1/1] (7.30ns)   --->   "%gmem_addr_read_31 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 1039 'read' 'gmem_addr_read_31' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_41 : Operation 1040 [1/1] (0.00ns)   --->   "%signal_shift_reg_30_load = load i32 %signal_shift_reg_30" [equalizer.cpp:85]   --->   Operation 1040 'load' 'signal_shift_reg_30_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_41 : Operation 1041 [1/1] (0.00ns)   --->   "%store_ln85 = store i32 %signal_shift_reg_29_load, i32 %signal_shift_reg_30" [equalizer.cpp:85]   --->   Operation 1041 'store' 'store_ln85' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_41 : Operation 1042 [2/2] (6.91ns)   --->   "%mul_ln86_1 = mul i32 %signal_shift_reg_29_load, i32 %gmem_addr_read_30" [equalizer.cpp:86]   --->   Operation 1042 'mul' 'mul_ln86_1' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_41 : Operation 1043 [1/2] (6.91ns)   --->   "%mul_ln86_2 = mul i32 %signal_shift_reg_28_load, i32 %gmem_addr_read_29" [equalizer.cpp:86]   --->   Operation 1043 'mul' 'mul_ln86_2' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_41 : Operation 1044 [1/5] (7.30ns)   --->   "%gmem_addr_29_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_29" [equalizer.cpp:69]   --->   Operation 1044 'writeresp' 'gmem_addr_29_resp' <Predicate = (state_2 == 17 & icmp_ln68_20)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_41 : Operation 1045 [2/5] (7.30ns)   --->   "%gmem_addr_30_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_30" [equalizer.cpp:69]   --->   Operation 1045 'writeresp' 'gmem_addr_30_resp' <Predicate = (state_2 == 17 & icmp_ln68_21)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_41 : Operation 1046 [4/5] (7.30ns)   --->   "%gmem_addr_31_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_31" [equalizer.cpp:69]   --->   Operation 1046 'writeresp' 'gmem_addr_31_resp' <Predicate = (state_2 == 17 & icmp_ln68_22)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_41 : Operation 1047 [5/5] (7.30ns)   --->   "%gmem_addr_32_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_32" [equalizer.cpp:69]   --->   Operation 1047 'writeresp' 'gmem_addr_32_resp' <Predicate = (state_2 == 17 & icmp_ln68_23)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_41 : Operation 1048 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_33, i32 %tmp_data_V_4_31, i4 15" [equalizer.cpp:69]   --->   Operation 1048 'write' 'write_ln69' <Predicate = (state_2 == 17 & icmp_ln68_24)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 42 <SV = 47> <Delay = 7.30>
ST_42 : Operation 1049 [1/1] (0.00ns)   --->   "%signal_shift_reg_31_load = load i32 %signal_shift_reg_31" [equalizer.cpp:85]   --->   Operation 1049 'load' 'signal_shift_reg_31_load' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_42 : Operation 1050 [1/1] (7.30ns)   --->   "%gmem_addr_read_32 = read i32 @_ssdm_op_Read.m_axi.p1i32, i32 %gmem_addr" [equalizer.cpp:86]   --->   Operation 1050 'read' 'gmem_addr_read_32' <Predicate = (state_2 == 4096)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_42 : Operation 1051 [1/1] (0.00ns)   --->   "%store_ln85 = store i32 %signal_shift_reg_30_load, i32 %signal_shift_reg_31" [equalizer.cpp:85]   --->   Operation 1051 'store' 'store_ln85' <Predicate = (state_2 == 4096)> <Delay = 0.00>
ST_42 : Operation 1052 [2/2] (6.91ns)   --->   "%mul_ln86 = mul i32 %signal_shift_reg_30_load, i32 %gmem_addr_read_31" [equalizer.cpp:86]   --->   Operation 1052 'mul' 'mul_ln86' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_42 : Operation 1053 [1/2] (6.91ns)   --->   "%mul_ln86_1 = mul i32 %signal_shift_reg_29_load, i32 %gmem_addr_read_30" [equalizer.cpp:86]   --->   Operation 1053 'mul' 'mul_ln86_1' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_42 : Operation 1054 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln89_3 = add i32 %mul_ln86_2, i32 %mul_ln86_3" [equalizer.cpp:89]   --->   Operation 1054 'add' 'add_ln89_3' <Predicate = (state_2 == 4096)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_42 : Operation 1055 [1/1] (4.37ns) (root node of TernaryAdder)   --->   "%add_ln89_5 = add i32 %add_ln89_4, i32 %add_ln89_3" [equalizer.cpp:89]   --->   Operation 1055 'add' 'add_ln89_5' <Predicate = (state_2 == 4096)> <Delay = 4.37> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_42 : Operation 1056 [1/5] (7.30ns)   --->   "%gmem_addr_30_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_30" [equalizer.cpp:69]   --->   Operation 1056 'writeresp' 'gmem_addr_30_resp' <Predicate = (state_2 == 17 & icmp_ln68_21)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_42 : Operation 1057 [3/5] (7.30ns)   --->   "%gmem_addr_31_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_31" [equalizer.cpp:69]   --->   Operation 1057 'writeresp' 'gmem_addr_31_resp' <Predicate = (state_2 == 17 & icmp_ln68_22)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_42 : Operation 1058 [4/5] (7.30ns)   --->   "%gmem_addr_32_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_32" [equalizer.cpp:69]   --->   Operation 1058 'writeresp' 'gmem_addr_32_resp' <Predicate = (state_2 == 17 & icmp_ln68_23)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_42 : Operation 1059 [5/5] (7.30ns)   --->   "%gmem_addr_33_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_33" [equalizer.cpp:69]   --->   Operation 1059 'writeresp' 'gmem_addr_33_resp' <Predicate = (state_2 == 17 & icmp_ln68_24)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 43 <SV = 48> <Delay = 7.30>
ST_43 : Operation 1060 [2/2] (6.91ns)   --->   "%accumulate = mul i32 %signal_shift_reg_31_load, i32 %gmem_addr_read_32" [equalizer.cpp:86]   --->   Operation 1060 'mul' 'accumulate' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_43 : Operation 1061 [1/2] (6.91ns)   --->   "%mul_ln86 = mul i32 %signal_shift_reg_30_load, i32 %gmem_addr_read_31" [equalizer.cpp:86]   --->   Operation 1061 'mul' 'mul_ln86' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_43 : Operation 1062 [2/5] (7.30ns)   --->   "%gmem_addr_31_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_31" [equalizer.cpp:69]   --->   Operation 1062 'writeresp' 'gmem_addr_31_resp' <Predicate = (state_2 == 17 & icmp_ln68_22)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_43 : Operation 1063 [3/5] (7.30ns)   --->   "%gmem_addr_32_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_32" [equalizer.cpp:69]   --->   Operation 1063 'writeresp' 'gmem_addr_32_resp' <Predicate = (state_2 == 17 & icmp_ln68_23)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_43 : Operation 1064 [4/5] (7.30ns)   --->   "%gmem_addr_33_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_33" [equalizer.cpp:69]   --->   Operation 1064 'writeresp' 'gmem_addr_33_resp' <Predicate = (state_2 == 17 & icmp_ln68_24)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 44 <SV = 49> <Delay = 7.30>
ST_44 : Operation 1065 [1/2] (6.91ns)   --->   "%accumulate = mul i32 %signal_shift_reg_31_load, i32 %gmem_addr_read_32" [equalizer.cpp:86]   --->   Operation 1065 'mul' 'accumulate' <Predicate = (state_2 == 4096)> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_44 : Operation 1066 [1/1] (2.55ns)   --->   "%add_ln89_1 = add i32 %mul_ln86, i32 %mul_ln86_1" [equalizer.cpp:89]   --->   Operation 1066 'add' 'add_ln89_1' <Predicate = (state_2 == 4096)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_44 : Operation 1067 [1/5] (7.30ns)   --->   "%gmem_addr_31_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_31" [equalizer.cpp:69]   --->   Operation 1067 'writeresp' 'gmem_addr_31_resp' <Predicate = (state_2 == 17 & icmp_ln68_22)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_44 : Operation 1068 [2/5] (7.30ns)   --->   "%gmem_addr_32_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_32" [equalizer.cpp:69]   --->   Operation 1068 'writeresp' 'gmem_addr_32_resp' <Predicate = (state_2 == 17 & icmp_ln68_23)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_44 : Operation 1069 [3/5] (7.30ns)   --->   "%gmem_addr_33_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_33" [equalizer.cpp:69]   --->   Operation 1069 'writeresp' 'gmem_addr_33_resp' <Predicate = (state_2 == 17 & icmp_ln68_24)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 45 <SV = 50> <Delay = 7.30>
ST_45 : Operation 1070 [1/1] (2.55ns)   --->   "%add_ln89 = add i32 %accumulate, i32 %mul_ln89" [equalizer.cpp:89]   --->   Operation 1070 'add' 'add_ln89' <Predicate = (state_2 == 4096)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_45 : Operation 1071 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln89_2 = add i32 %add_ln89_1, i32 %add_ln89" [equalizer.cpp:89]   --->   Operation 1071 'add' 'add_ln89_2' <Predicate = (state_2 == 4096)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_45 : Operation 1072 [1/1] (4.37ns) (root node of TernaryAdder)   --->   "%add_ln89_6 = add i32 %add_ln89_5, i32 %add_ln89_2" [equalizer.cpp:89]   --->   Operation 1072 'add' 'add_ln89_6' <Predicate = (state_2 == 4096)> <Delay = 4.37> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_45 : Operation 1073 [1/5] (7.30ns)   --->   "%gmem_addr_32_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_32" [equalizer.cpp:69]   --->   Operation 1073 'writeresp' 'gmem_addr_32_resp' <Predicate = (state_2 == 17 & icmp_ln68_23)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_45 : Operation 1074 [2/5] (7.30ns)   --->   "%gmem_addr_33_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_33" [equalizer.cpp:69]   --->   Operation 1074 'writeresp' 'gmem_addr_33_resp' <Predicate = (state_2 == 17 & icmp_ln68_24)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 46 <SV = 51> <Delay = 7.30>
ST_46 : Operation 1075 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln89_14 = add i32 %add_ln89_13, i32 %add_ln89_6" [equalizer.cpp:89]   --->   Operation 1075 'add' 'add_ln89_14' <Predicate = (state_2 == 4096)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_46 : Operation 1076 [1/1] (4.37ns) (root node of TernaryAdder)   --->   "%accumulate_2 = add i32 %add_ln89_30, i32 %add_ln89_14" [equalizer.cpp:89]   --->   Operation 1076 'add' 'accumulate_2' <Predicate = (state_2 == 4096)> <Delay = 4.37> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_46 : Operation 1077 [2/2] (0.00ns)   --->   "%write_ln304 = write void @_ssdm_op_Write.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %output_r_V_data_V, i4 %output_r_V_keep_V, i4 %output_r_V_strb_V, i1 %output_r_V_user_V, i1 %output_r_V_last_V, i1 %output_r_V_id_V, i1 %output_r_V_dest_V, i32 %accumulate_2, i4 %tmp_keep_V, i4 %tmp_strb_V, i1 %tmp_user_V, i1 %tmp_last_V, i1 %tmp_id_V, i1 %tmp_dest_V"   --->   Operation 1077 'write' 'write_ln304' <Predicate = (state_2 == 4096)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_46 : Operation 1078 [1/5] (7.30ns)   --->   "%gmem_addr_33_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_33" [equalizer.cpp:69]   --->   Operation 1078 'writeresp' 'gmem_addr_33_resp' <Predicate = (state_2 == 17 & icmp_ln68_24)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 47 <SV = 52> <Delay = 0.00>
ST_47 : Operation 1079 [1/2] (0.00ns)   --->   "%write_ln304 = write void @_ssdm_op_Write.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %output_r_V_data_V, i4 %output_r_V_keep_V, i4 %output_r_V_strb_V, i1 %output_r_V_user_V, i1 %output_r_V_last_V, i1 %output_r_V_id_V, i1 %output_r_V_dest_V, i32 %accumulate_2, i4 %tmp_keep_V, i4 %tmp_strb_V, i1 %tmp_user_V, i1 %tmp_last_V, i1 %tmp_id_V, i1 %tmp_dest_V"   --->   Operation 1079 'write' 'write_ln304' <Predicate = (state_2 == 4096)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >

State 48 <SV = 2> <Delay = 4.06>
ST_48 : Operation 1080 [1/1] (0.00ns)   --->   "%shl_ln = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63, i2 0" [equalizer.cpp:69]   --->   Operation 1080 'bitconcatenate' 'shl_ln' <Predicate = (state_2 == 17 & !icmp_ln63)> <Delay = 0.00>
ST_48 : Operation 1081 [1/1] (0.00ns)   --->   "%sext_ln69 = sext i34 %shl_ln" [equalizer.cpp:69]   --->   Operation 1081 'sext' 'sext_ln69' <Predicate = (state_2 == 17 & !icmp_ln63)> <Delay = 0.00>
ST_48 : Operation 1082 [1/1] (3.52ns)   --->   "%add_ln69 = add i64 %sext_ln69, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 1082 'add' 'add_ln69' <Predicate = (state_2 == 17 & !icmp_ln63)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_48 : Operation 1083 [1/1] (0.00ns)   --->   "%trunc_ln1 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 1083 'partselect' 'trunc_ln1' <Predicate = (state_2 == 17 & !icmp_ln63)> <Delay = 0.00>
ST_48 : Operation 1084 [1/1] (0.00ns)   --->   "%sext_ln69_1 = sext i62 %trunc_ln1" [equalizer.cpp:69]   --->   Operation 1084 'sext' 'sext_ln69_1' <Predicate = (state_2 == 17 & !icmp_ln63)> <Delay = 0.00>
ST_48 : Operation 1085 [1/1] (0.00ns)   --->   "%gmem_addr_1 = getelementptr i32 %gmem, i64 %sext_ln69_1" [equalizer.cpp:69]   --->   Operation 1085 'getelementptr' 'gmem_addr_1' <Predicate = (state_2 == 17 & !icmp_ln63)> <Delay = 0.00>
ST_48 : Operation 1086 [1/1] (0.00ns)   --->   "%empty_19 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 1086 'read' 'empty_19' <Predicate = (state_2 == 17 & !icmp_ln63)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_48 : Operation 1087 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val = extractvalue i44 %empty_19"   --->   Operation 1087 'extractvalue' 'input_r_V_data_V_val' <Predicate = (state_2 == 17 & !icmp_ln63)> <Delay = 0.00>
ST_48 : Operation 1088 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val = extractvalue i44 %empty_19"   --->   Operation 1088 'extractvalue' 'input_r_V_last_V_val' <Predicate = (state_2 == 17 & !icmp_ln63)> <Delay = 0.00>
ST_48 : Operation 1089 [1/1] (2.55ns)   --->   "%add_ln72 = add i32 %select_ln63, i32 1" [equalizer.cpp:72]   --->   Operation 1089 'add' 'add_ln72' <Predicate = (state_2 == 17 & !icmp_ln63)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_48 : Operation 1090 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.1" [equalizer.cpp:73]   --->   Operation 1090 'br' 'br_ln73' <Predicate = (state_2 == 17 & !icmp_ln63)> <Delay = 1.58>
ST_48 : Operation 1091 [1/1] (0.00ns)   --->   "%tmp_data_V_4_0 = phi i32 %input_r_V_data_V_val, void %if.then10.0, i32 %tmp_data_V, void %for.body.split.0"   --->   Operation 1091 'phi' 'tmp_data_V_4_0' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_48 : Operation 1092 [1/1] (2.47ns)   --->   "%icmp_ln63_1 = icmp_eq  i32 %tmp_data_V_4_0, i32 43962" [equalizer.cpp:63]   --->   Operation 1092 'icmp' 'icmp_ln63_1' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>

State 49 <SV = 3> <Delay = 7.30>
ST_49 : Operation 1093 [1/1] (7.30ns)   --->   "%gmem_addr_1_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_1, i32 1" [equalizer.cpp:69]   --->   Operation 1093 'writereq' 'gmem_addr_1_req' <Predicate = (state_2 == 17 & !icmp_ln63)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_49 : Operation 1094 [1/1] (0.00ns)   --->   "%tmp_last_V_4_0 = phi i1 %input_r_V_last_V_val, void %if.then10.0, i1 %tmp_last_V, void %for.body.split.0"   --->   Operation 1094 'phi' 'tmp_last_V_4_0' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_49 : Operation 1095 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_1)   --->   "%i_4_0 = phi i32 %add_ln72, void %if.then10.0, i32 %select_ln63, void %for.body.split.0" [equalizer.cpp:72]   --->   Operation 1095 'phi' 'i_4_0' <Predicate = (state_2 == 17 & !icmp_ln63_1)> <Delay = 0.00>
ST_49 : Operation 1096 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_1 = select i1 %icmp_ln63_1, i32 0, i32 %i_4_0" [equalizer.cpp:63]   --->   Operation 1096 'select' 'select_ln63_1' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_49 : Operation 1097 [1/1] (0.97ns)   --->   "%or_ln63 = or i1 %icmp_ln63_1, i1 %icmp_ln63" [equalizer.cpp:63]   --->   Operation 1097 'or' 'or_ln63' <Predicate = (state_2 == 17)> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_49 : Operation 1098 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %or_ln63, void %if.then10.1, void %for.body.split.2" [equalizer.cpp:68]   --->   Operation 1098 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_49 : Operation 1099 [1/1] (0.00ns)   --->   "%shl_ln69_1 = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_1, i2 0" [equalizer.cpp:69]   --->   Operation 1099 'bitconcatenate' 'shl_ln69_1' <Predicate = (state_2 == 17 & !or_ln63)> <Delay = 0.00>
ST_49 : Operation 1100 [1/1] (0.00ns)   --->   "%sext_ln69_2 = sext i34 %shl_ln69_1" [equalizer.cpp:69]   --->   Operation 1100 'sext' 'sext_ln69_2' <Predicate = (state_2 == 17 & !or_ln63)> <Delay = 0.00>
ST_49 : Operation 1101 [1/1] (3.52ns)   --->   "%add_ln69_1 = add i64 %sext_ln69_2, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 1101 'add' 'add_ln69_1' <Predicate = (state_2 == 17 & !or_ln63)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_49 : Operation 1102 [1/1] (0.00ns)   --->   "%trunc_ln69_1 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_1, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 1102 'partselect' 'trunc_ln69_1' <Predicate = (state_2 == 17 & !or_ln63)> <Delay = 0.00>
ST_49 : Operation 1103 [1/1] (0.00ns)   --->   "%sext_ln69_3 = sext i62 %trunc_ln69_1" [equalizer.cpp:69]   --->   Operation 1103 'sext' 'sext_ln69_3' <Predicate = (state_2 == 17 & !or_ln63)> <Delay = 0.00>
ST_49 : Operation 1104 [1/1] (0.00ns)   --->   "%gmem_addr_2 = getelementptr i32 %gmem, i64 %sext_ln69_3" [equalizer.cpp:69]   --->   Operation 1104 'getelementptr' 'gmem_addr_2' <Predicate = (state_2 == 17 & !or_ln63)> <Delay = 0.00>
ST_49 : Operation 1105 [1/1] (0.00ns)   --->   "%empty_20 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 1105 'read' 'empty_20' <Predicate = (state_2 == 17 & !or_ln63)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_49 : Operation 1106 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val1 = extractvalue i44 %empty_20"   --->   Operation 1106 'extractvalue' 'input_r_V_data_V_val1' <Predicate = (state_2 == 17 & !or_ln63)> <Delay = 0.00>
ST_49 : Operation 1107 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val1 = extractvalue i44 %empty_20"   --->   Operation 1107 'extractvalue' 'input_r_V_last_V_val1' <Predicate = (state_2 == 17 & !or_ln63)> <Delay = 0.00>
ST_49 : Operation 1108 [1/1] (2.55ns)   --->   "%add_ln72_1 = add i32 %select_ln63_1, i32 1" [equalizer.cpp:72]   --->   Operation 1108 'add' 'add_ln72_1' <Predicate = (state_2 == 17 & !or_ln63)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_49 : Operation 1109 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.2" [equalizer.cpp:73]   --->   Operation 1109 'br' 'br_ln73' <Predicate = (state_2 == 17 & !or_ln63)> <Delay = 1.58>

State 50 <SV = 4> <Delay = 7.30>
ST_50 : Operation 1110 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_1, i32 %tmp_data_V, i4 15" [equalizer.cpp:69]   --->   Operation 1110 'write' 'write_ln69' <Predicate = (state_2 == 17 & !icmp_ln63)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_50 : Operation 1111 [1/1] (7.30ns)   --->   "%gmem_addr_2_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_2, i32 1" [equalizer.cpp:69]   --->   Operation 1111 'writereq' 'gmem_addr_2_req' <Predicate = (state_2 == 17 & !or_ln63)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_50 : Operation 1112 [1/1] (0.00ns)   --->   "%tmp_last_V_4_1 = phi i1 %input_r_V_last_V_val1, void %if.then10.1, i1 %tmp_last_V_4_0, void %for.body.split.1"   --->   Operation 1112 'phi' 'tmp_last_V_4_1' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_50 : Operation 1113 [1/1] (0.00ns)   --->   "%tmp_data_V_4_1 = phi i32 %input_r_V_data_V_val1, void %if.then10.1, i32 %tmp_data_V_4_0, void %for.body.split.1"   --->   Operation 1113 'phi' 'tmp_data_V_4_1' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_50 : Operation 1114 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_2)   --->   "%i_4_1 = phi i32 %add_ln72_1, void %if.then10.1, i32 %select_ln63_1, void %for.body.split.1" [equalizer.cpp:72]   --->   Operation 1114 'phi' 'i_4_1' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_50 : Operation 1115 [1/1] (2.47ns)   --->   "%icmp_ln63_2 = icmp_eq  i32 %tmp_data_V_4_1, i32 43962" [equalizer.cpp:63]   --->   Operation 1115 'icmp' 'icmp_ln63_2' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_50 : Operation 1116 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_2 = select i1 %icmp_ln63_2, i32 0, i32 %i_4_1" [equalizer.cpp:63]   --->   Operation 1116 'select' 'select_ln63_2' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_50 : Operation 1117 [1/1] (0.97ns)   --->   "%or_ln63_1 = or i1 %icmp_ln63_2, i1 %or_ln63" [equalizer.cpp:63]   --->   Operation 1117 'or' 'or_ln63_1' <Predicate = (state_2 == 17)> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_50 : Operation 1118 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %or_ln63_1, void %if.then10.2, void %for.body.split.3" [equalizer.cpp:68]   --->   Operation 1118 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_50 : Operation 1119 [1/1] (0.00ns)   --->   "%shl_ln69_2 = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_2, i2 0" [equalizer.cpp:69]   --->   Operation 1119 'bitconcatenate' 'shl_ln69_2' <Predicate = (state_2 == 17 & !or_ln63_1)> <Delay = 0.00>
ST_50 : Operation 1120 [1/1] (0.00ns)   --->   "%sext_ln69_4 = sext i34 %shl_ln69_2" [equalizer.cpp:69]   --->   Operation 1120 'sext' 'sext_ln69_4' <Predicate = (state_2 == 17 & !or_ln63_1)> <Delay = 0.00>
ST_50 : Operation 1121 [1/1] (3.52ns)   --->   "%add_ln69_2 = add i64 %sext_ln69_4, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 1121 'add' 'add_ln69_2' <Predicate = (state_2 == 17 & !or_ln63_1)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_50 : Operation 1122 [1/1] (0.00ns)   --->   "%trunc_ln69_2 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_2, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 1122 'partselect' 'trunc_ln69_2' <Predicate = (state_2 == 17 & !or_ln63_1)> <Delay = 0.00>
ST_50 : Operation 1123 [1/1] (0.00ns)   --->   "%sext_ln69_5 = sext i62 %trunc_ln69_2" [equalizer.cpp:69]   --->   Operation 1123 'sext' 'sext_ln69_5' <Predicate = (state_2 == 17 & !or_ln63_1)> <Delay = 0.00>
ST_50 : Operation 1124 [1/1] (0.00ns)   --->   "%gmem_addr_3 = getelementptr i32 %gmem, i64 %sext_ln69_5" [equalizer.cpp:69]   --->   Operation 1124 'getelementptr' 'gmem_addr_3' <Predicate = (state_2 == 17 & !or_ln63_1)> <Delay = 0.00>
ST_50 : Operation 1125 [1/1] (2.55ns)   --->   "%add_ln72_2 = add i32 %select_ln63_2, i32 1" [equalizer.cpp:72]   --->   Operation 1125 'add' 'add_ln72_2' <Predicate = (state_2 == 17 & !or_ln63_1)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 51 <SV = 5> <Delay = 7.30>
ST_51 : Operation 1126 [5/5] (7.30ns)   --->   "%gmem_addr_1_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_1" [equalizer.cpp:69]   --->   Operation 1126 'writeresp' 'gmem_addr_1_resp' <Predicate = (state_2 == 17 & !icmp_ln63)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_51 : Operation 1127 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_2, i32 %tmp_data_V_4_0, i4 15" [equalizer.cpp:69]   --->   Operation 1127 'write' 'write_ln69' <Predicate = (state_2 == 17 & !or_ln63)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_51 : Operation 1128 [1/1] (7.30ns)   --->   "%gmem_addr_3_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_3, i32 1" [equalizer.cpp:69]   --->   Operation 1128 'writereq' 'gmem_addr_3_req' <Predicate = (state_2 == 17 & !or_ln63_1)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_51 : Operation 1129 [1/1] (0.00ns)   --->   "%empty_21 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 1129 'read' 'empty_21' <Predicate = (state_2 == 17 & !or_ln63_1)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_51 : Operation 1130 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val2 = extractvalue i44 %empty_21"   --->   Operation 1130 'extractvalue' 'input_r_V_data_V_val2' <Predicate = (state_2 == 17 & !or_ln63_1)> <Delay = 0.00>
ST_51 : Operation 1131 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val2 = extractvalue i44 %empty_21"   --->   Operation 1131 'extractvalue' 'input_r_V_last_V_val2' <Predicate = (state_2 == 17 & !or_ln63_1)> <Delay = 0.00>
ST_51 : Operation 1132 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.3" [equalizer.cpp:73]   --->   Operation 1132 'br' 'br_ln73' <Predicate = (state_2 == 17 & !or_ln63_1)> <Delay = 1.58>
ST_51 : Operation 1133 [1/1] (0.00ns)   --->   "%tmp_data_V_4_2 = phi i32 %input_r_V_data_V_val2, void %if.then10.2, i32 %tmp_data_V_4_1, void %for.body.split.2"   --->   Operation 1133 'phi' 'tmp_data_V_4_2' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_51 : Operation 1134 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_3)   --->   "%i_4_2 = phi i32 %add_ln72_2, void %if.then10.2, i32 %select_ln63_2, void %for.body.split.2" [equalizer.cpp:72]   --->   Operation 1134 'phi' 'i_4_2' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_51 : Operation 1135 [1/1] (2.47ns)   --->   "%icmp_ln63_3 = icmp_eq  i32 %tmp_data_V_4_2, i32 43962" [equalizer.cpp:63]   --->   Operation 1135 'icmp' 'icmp_ln63_3' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_51 : Operation 1136 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_3 = select i1 %icmp_ln63_3, i32 0, i32 %i_4_2" [equalizer.cpp:63]   --->   Operation 1136 'select' 'select_ln63_3' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_51 : Operation 1137 [1/1] (0.97ns)   --->   "%or_ln63_2 = or i1 %icmp_ln63_3, i1 %or_ln63_1" [equalizer.cpp:63]   --->   Operation 1137 'or' 'or_ln63_2' <Predicate = (state_2 == 17)> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>

State 52 <SV = 6> <Delay = 7.30>
ST_52 : Operation 1138 [4/5] (7.30ns)   --->   "%gmem_addr_1_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_1" [equalizer.cpp:69]   --->   Operation 1138 'writeresp' 'gmem_addr_1_resp' <Predicate = (state_2 == 17 & !icmp_ln63)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_52 : Operation 1139 [5/5] (7.30ns)   --->   "%gmem_addr_2_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_2" [equalizer.cpp:69]   --->   Operation 1139 'writeresp' 'gmem_addr_2_resp' <Predicate = (state_2 == 17 & !or_ln63)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_52 : Operation 1140 [1/1] (7.30ns)   --->   "%write_ln69 = write void @_ssdm_op_Write.m_axi.i32P1A, i32 %gmem_addr_3, i32 %tmp_data_V_4_1, i4 15" [equalizer.cpp:69]   --->   Operation 1140 'write' 'write_ln69' <Predicate = (state_2 == 17 & !or_ln63_1)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_52 : Operation 1141 [1/1] (0.00ns)   --->   "%tmp_last_V_4_2 = phi i1 %input_r_V_last_V_val2, void %if.then10.2, i1 %tmp_last_V_4_1, void %for.body.split.2"   --->   Operation 1141 'phi' 'tmp_last_V_4_2' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_52 : Operation 1142 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %or_ln63_2, void %if.then10.3, void %for.body.split.4" [equalizer.cpp:68]   --->   Operation 1142 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_52 : Operation 1143 [1/1] (0.00ns)   --->   "%shl_ln69_3 = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_3, i2 0" [equalizer.cpp:69]   --->   Operation 1143 'bitconcatenate' 'shl_ln69_3' <Predicate = (state_2 == 17 & !or_ln63_2)> <Delay = 0.00>
ST_52 : Operation 1144 [1/1] (0.00ns)   --->   "%sext_ln69_6 = sext i34 %shl_ln69_3" [equalizer.cpp:69]   --->   Operation 1144 'sext' 'sext_ln69_6' <Predicate = (state_2 == 17 & !or_ln63_2)> <Delay = 0.00>
ST_52 : Operation 1145 [1/1] (3.52ns)   --->   "%add_ln69_3 = add i64 %sext_ln69_6, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 1145 'add' 'add_ln69_3' <Predicate = (state_2 == 17 & !or_ln63_2)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_52 : Operation 1146 [1/1] (0.00ns)   --->   "%trunc_ln69_3 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_3, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 1146 'partselect' 'trunc_ln69_3' <Predicate = (state_2 == 17 & !or_ln63_2)> <Delay = 0.00>
ST_52 : Operation 1147 [1/1] (0.00ns)   --->   "%sext_ln69_7 = sext i62 %trunc_ln69_3" [equalizer.cpp:69]   --->   Operation 1147 'sext' 'sext_ln69_7' <Predicate = (state_2 == 17 & !or_ln63_2)> <Delay = 0.00>
ST_52 : Operation 1148 [1/1] (0.00ns)   --->   "%gmem_addr_4 = getelementptr i32 %gmem, i64 %sext_ln69_7" [equalizer.cpp:69]   --->   Operation 1148 'getelementptr' 'gmem_addr_4' <Predicate = (state_2 == 17 & !or_ln63_2)> <Delay = 0.00>
ST_52 : Operation 1149 [1/1] (0.00ns)   --->   "%empty_22 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 1149 'read' 'empty_22' <Predicate = (state_2 == 17 & !or_ln63_2)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_52 : Operation 1150 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val3 = extractvalue i44 %empty_22"   --->   Operation 1150 'extractvalue' 'input_r_V_data_V_val3' <Predicate = (state_2 == 17 & !or_ln63_2)> <Delay = 0.00>
ST_52 : Operation 1151 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val3 = extractvalue i44 %empty_22"   --->   Operation 1151 'extractvalue' 'input_r_V_last_V_val3' <Predicate = (state_2 == 17 & !or_ln63_2)> <Delay = 0.00>
ST_52 : Operation 1152 [1/1] (2.55ns)   --->   "%add_ln72_3 = add i32 %select_ln63_3, i32 1" [equalizer.cpp:72]   --->   Operation 1152 'add' 'add_ln72_3' <Predicate = (state_2 == 17 & !or_ln63_2)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_52 : Operation 1153 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.4" [equalizer.cpp:73]   --->   Operation 1153 'br' 'br_ln73' <Predicate = (state_2 == 17 & !or_ln63_2)> <Delay = 1.58>
ST_52 : Operation 1154 [1/1] (0.00ns)   --->   "%tmp_data_V_4_3 = phi i32 %input_r_V_data_V_val3, void %if.then10.3, i32 %tmp_data_V_4_2, void %for.body.split.3"   --->   Operation 1154 'phi' 'tmp_data_V_4_3' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_52 : Operation 1155 [1/1] (2.47ns)   --->   "%icmp_ln63_4 = icmp_eq  i32 %tmp_data_V_4_3, i32 43962" [equalizer.cpp:63]   --->   Operation 1155 'icmp' 'icmp_ln63_4' <Predicate = (state_2 == 17)> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>

State 53 <SV = 7> <Delay = 7.30>
ST_53 : Operation 1156 [3/5] (7.30ns)   --->   "%gmem_addr_1_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_1" [equalizer.cpp:69]   --->   Operation 1156 'writeresp' 'gmem_addr_1_resp' <Predicate = (state_2 == 17 & !icmp_ln63)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_53 : Operation 1157 [4/5] (7.30ns)   --->   "%gmem_addr_2_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_2" [equalizer.cpp:69]   --->   Operation 1157 'writeresp' 'gmem_addr_2_resp' <Predicate = (state_2 == 17 & !or_ln63)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_53 : Operation 1158 [5/5] (7.30ns)   --->   "%gmem_addr_3_resp = writeresp i1 @_ssdm_op_WriteResp.m_axi.i32P1A, i32 %gmem_addr_3" [equalizer.cpp:69]   --->   Operation 1158 'writeresp' 'gmem_addr_3_resp' <Predicate = (state_2 == 17 & !or_ln63_1)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_53 : Operation 1159 [1/1] (7.30ns)   --->   "%gmem_addr_4_req = writereq i1 @_ssdm_op_WriteReq.m_axi.i32P1A, i32 %gmem_addr_4, i32 1" [equalizer.cpp:69]   --->   Operation 1159 'writereq' 'gmem_addr_4_req' <Predicate = (state_2 == 17 & !or_ln63_2)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 113 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_53 : Operation 1160 [1/1] (0.00ns)   --->   "%tmp_last_V_4_3 = phi i1 %input_r_V_last_V_val3, void %if.then10.3, i1 %tmp_last_V_4_2, void %for.body.split.3"   --->   Operation 1160 'phi' 'tmp_last_V_4_3' <Predicate = (state_2 == 17)> <Delay = 0.00>
ST_53 : Operation 1161 [1/1] (0.00ns) (grouped into LUT with out node select_ln63_4)   --->   "%i_4_3 = phi i32 %add_ln72_3, void %if.then10.3, i32 %select_ln63_3, void %for.body.split.3" [equalizer.cpp:72]   --->   Operation 1161 'phi' 'i_4_3' <Predicate = (state_2 == 17 & !icmp_ln63_4)> <Delay = 0.00>
ST_53 : Operation 1162 [1/1] (0.69ns) (out node of the LUT)   --->   "%select_ln63_4 = select i1 %icmp_ln63_4, i32 0, i32 %i_4_3" [equalizer.cpp:63]   --->   Operation 1162 'select' 'select_ln63_4' <Predicate = (state_2 == 17)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_53 : Operation 1163 [1/1] (0.97ns)   --->   "%or_ln63_3 = or i1 %icmp_ln63_4, i1 %or_ln63_2" [equalizer.cpp:63]   --->   Operation 1163 'or' 'or_ln63_3' <Predicate = (state_2 == 17)> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_53 : Operation 1164 [1/1] (1.58ns)   --->   "%br_ln68 = br i1 %or_ln63_3, void %if.then10.4, void %for.body.split.5" [equalizer.cpp:68]   --->   Operation 1164 'br' 'br_ln68' <Predicate = (state_2 == 17)> <Delay = 1.58>
ST_53 : Operation 1165 [1/1] (0.00ns)   --->   "%shl_ln69_4 = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i32.i2, i32 %select_ln63_4, i2 0" [equalizer.cpp:69]   --->   Operation 1165 'bitconcatenate' 'shl_ln69_4' <Predicate = (state_2 == 17 & !or_ln63_3)> <Delay = 0.00>
ST_53 : Operation 1166 [1/1] (0.00ns)   --->   "%sext_ln69_8 = sext i34 %shl_ln69_4" [equalizer.cpp:69]   --->   Operation 1166 'sext' 'sext_ln69_8' <Predicate = (state_2 == 17 & !or_ln63_3)> <Delay = 0.00>
ST_53 : Operation 1167 [1/1] (3.52ns)   --->   "%add_ln69_4 = add i64 %sext_ln69_8, i64 %coefs_read" [equalizer.cpp:69]   --->   Operation 1167 'add' 'add_ln69_4' <Predicate = (state_2 == 17 & !or_ln63_3)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_53 : Operation 1168 [1/1] (0.00ns)   --->   "%trunc_ln69_4 = partselect i62 @_ssdm_op_PartSelect.i62.i64.i32.i32, i64 %add_ln69_4, i32 2, i32 63" [equalizer.cpp:69]   --->   Operation 1168 'partselect' 'trunc_ln69_4' <Predicate = (state_2 == 17 & !or_ln63_3)> <Delay = 0.00>
ST_53 : Operation 1169 [1/1] (0.00ns)   --->   "%sext_ln69_9 = sext i62 %trunc_ln69_4" [equalizer.cpp:69]   --->   Operation 1169 'sext' 'sext_ln69_9' <Predicate = (state_2 == 17 & !or_ln63_3)> <Delay = 0.00>
ST_53 : Operation 1170 [1/1] (0.00ns)   --->   "%gmem_addr_5 = getelementptr i32 %gmem, i64 %sext_ln69_9" [equalizer.cpp:69]   --->   Operation 1170 'getelementptr' 'gmem_addr_5' <Predicate = (state_2 == 17 & !or_ln63_3)> <Delay = 0.00>
ST_53 : Operation 1171 [1/1] (0.00ns)   --->   "%empty_23 = read i44 @_ssdm_op_Read.axis.volatile.i32P0A.i4P0A.i4P0A.i1P0A.i1P0A.i1P0A.i1P0A, i32 %input_r_V_data_V, i4 %input_r_V_keep_V, i4 %input_r_V_strb_V, i1 %input_r_V_user_V, i1 %input_r_V_last_V, i1 %input_r_V_id_V, i1 %input_r_V_dest_V"   --->   Operation 1171 'read' 'empty_23' <Predicate = (state_2 == 17 & !or_ln63_3)> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_53 : Operation 1172 [1/1] (0.00ns)   --->   "%input_r_V_data_V_val4 = extractvalue i44 %empty_23"   --->   Operation 1172 'extractvalue' 'input_r_V_data_V_val4' <Predicate = (state_2 == 17 & !or_ln63_3)> <Delay = 0.00>
ST_53 : Operation 1173 [1/1] (0.00ns)   --->   "%input_r_V_last_V_val4 = extractvalue i44 %empty_23"   --->   Operation 1173 'extractvalue' 'input_r_V_last_V_val4' <Predicate = (state_2 == 17 & !or_ln63_3)> <Delay = 0.00>
ST_53 : Operation 1174 [1/1] (2.55ns)   --->   "%add_ln72_4 = add i32 %select_ln63_4, i32 1" [equalizer.cpp:72]   --->   Operation 1174 'add' 'add_ln72_4' <Predicate = (state_2 == 17 & !or_ln63_3)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_53 : Operation 1175 [1/1] (1.58ns)   --->   "%br_ln73 = br void %for.body.split.5" [equalizer.cpp:73]   --->   Operation 1175 'br' 'br_ln73' <Predicate = (state_2 == 17 & !or_ln63_3)> <Delay = 1.58>

State 54 <SV = 53> <Delay = 0.00>
ST_54 : Operation 1176 [1/1] (0.00ns)   --->   "%ret_ln115 = ret" [equalizer.cpp:115]   --->   Operation 1176 'ret' 'ret_ln115' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 2.7ns.

 <State 1>: 2.07ns
The critical path consists of the following:
	'alloca' operation ('i') [50]  (0 ns)
	'store' operation ('store_ln28', equalizer.cpp:28) of constant 0 on local variable 'i' [77]  (2.07 ns)

 <State 2>: 4.06ns
The critical path consists of the following:
	axis read operation ('empty') on port 'input_r_V_data_V' [84]  (0 ns)
	'icmp' operation ('icmp_ln63', equalizer.cpp:63) [264]  (2.47 ns)
	multiplexor before 'phi' operation ('tmp.last.V') with incoming values : ('tmp.last.V') ('input_r_V_last_V_val') [283]  (1.59 ns)

 <State 3>: 7.3ns
The critical path consists of the following:
	bus request operation ('empty_18', equalizer.cpp:86) on port 'gmem' (equalizer.cpp:86) [95]  (7.3 ns)

 <State 4>: 7.3ns
The critical path consists of the following:
	bus request operation ('empty_18', equalizer.cpp:86) on port 'gmem' (equalizer.cpp:86) [95]  (7.3 ns)

 <State 5>: 7.3ns
The critical path consists of the following:
	bus request operation ('empty_18', equalizer.cpp:86) on port 'gmem' (equalizer.cpp:86) [95]  (7.3 ns)

 <State 6>: 7.3ns
The critical path consists of the following:
	bus request operation ('empty_18', equalizer.cpp:86) on port 'gmem' (equalizer.cpp:86) [95]  (7.3 ns)

 <State 7>: 7.3ns
The critical path consists of the following:
	bus request operation ('empty_18', equalizer.cpp:86) on port 'gmem' (equalizer.cpp:86) [95]  (7.3 ns)

 <State 8>: 7.3ns
The critical path consists of the following:
	bus request operation ('empty_18', equalizer.cpp:86) on port 'gmem' (equalizer.cpp:86) [95]  (7.3 ns)

 <State 9>: 7.3ns
The critical path consists of the following:
	bus request operation ('empty_18', equalizer.cpp:86) on port 'gmem' (equalizer.cpp:86) [95]  (7.3 ns)

 <State 10>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read', equalizer.cpp:86) on port 'gmem' (equalizer.cpp:86) [96]  (7.3 ns)

 <State 11>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_1', equalizer.cpp:86) on port 'gmem' (equalizer.cpp:86) [97]  (7.3 ns)

 <State 12>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_2', equalizer.cpp:86) on port 'gmem' (equalizer.cpp:86) [98]  (7.3 ns)

 <State 13>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_3', equalizer.cpp:86) on port 'gmem' (equalizer.cpp:86) [99]  (7.3 ns)

 <State 14>: 7.3ns
The critical path consists of the following:
	bus read operation ('gmem_addr_read_4', equalizer.cpp:86) on port 'gmem' (equalizer.cpp:86) [100]  (7.3 ns)

 <State 15>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_addr_14_req', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [581]  (7.3 ns)

 <State 16>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_addr_15_req', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [605]  (7.3 ns)

 <State 17>: 7.3ns
The critical path consists of the following:
	bus write operation ('write_ln69', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [606]  (7.3 ns)

 <State 18>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_addr_16_req', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [629]  (7.3 ns)

 <State 19>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_addr_17_req', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [653]  (7.3 ns)

 <State 20>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_addr_18_req', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [677]  (7.3 ns)

 <State 21>: 7.3ns
The critical path consists of the following:
	bus write operation ('write_ln69', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [678]  (7.3 ns)

 <State 22>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_addr_19_req', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [701]  (7.3 ns)

 <State 23>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_addr_20_req', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [725]  (7.3 ns)

 <State 24>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_addr_21_req', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [749]  (7.3 ns)

 <State 25>: 7.3ns
The critical path consists of the following:
	bus write operation ('write_ln69', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [750]  (7.3 ns)

 <State 26>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_addr_22_req', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [773]  (7.3 ns)

 <State 27>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_addr_23_req', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [797]  (7.3 ns)

 <State 28>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_addr_24_req', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [821]  (7.3 ns)

 <State 29>: 7.3ns
The critical path consists of the following:
	bus write operation ('write_ln69', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [822]  (7.3 ns)

 <State 30>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_addr_25_req', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [845]  (7.3 ns)

 <State 31>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_addr_26_req', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [869]  (7.3 ns)

 <State 32>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_addr_27_req', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [893]  (7.3 ns)

 <State 33>: 7.3ns
The critical path consists of the following:
	bus write operation ('write_ln69', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [894]  (7.3 ns)

 <State 34>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_addr_28_req', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [917]  (7.3 ns)

 <State 35>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_addr_29_req', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [941]  (7.3 ns)

 <State 36>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_addr_30_req', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [965]  (7.3 ns)

 <State 37>: 7.3ns
The critical path consists of the following:
	bus write operation ('write_ln69', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [966]  (7.3 ns)

 <State 38>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_addr_31_req', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [989]  (7.3 ns)

 <State 39>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_addr_32_req', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [1013]  (7.3 ns)

 <State 40>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_addr_33_req', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [1041]  (7.3 ns)

 <State 41>: 7.3ns
The critical path consists of the following:
	bus write operation ('write_ln69', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [1042]  (7.3 ns)

 <State 42>: 7.3ns
The critical path consists of the following:
	bus response operation ('gmem_addr_30_resp', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [967]  (7.3 ns)

 <State 43>: 7.3ns
The critical path consists of the following:
	bus response operation ('gmem_addr_33_resp', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [1043]  (7.3 ns)

 <State 44>: 7.3ns
The critical path consists of the following:
	bus response operation ('gmem_addr_31_resp', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [991]  (7.3 ns)

 <State 45>: 7.3ns
The critical path consists of the following:
	bus response operation ('gmem_addr_32_resp', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [1015]  (7.3 ns)

 <State 46>: 7.3ns
The critical path consists of the following:
	bus response operation ('gmem_addr_33_resp', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [1043]  (7.3 ns)

 <State 47>: 0ns
The critical path consists of the following:

 <State 48>: 4.06ns
The critical path consists of the following:
	axis read operation ('empty_19') on port 'input_r_V_data_V' [277]  (0 ns)
	multiplexor before 'phi' operation ('tmp.data.V') with incoming values : ('tmp.data.V') ('input_r_V_data_V_val') [284]  (1.59 ns)
	'phi' operation ('tmp.data.V') with incoming values : ('tmp.data.V') ('input_r_V_data_V_val') [284]  (0 ns)
	'icmp' operation ('icmp_ln63_1', equalizer.cpp:63) [286]  (2.47 ns)

 <State 49>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_addr_1_req', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [274]  (7.3 ns)

 <State 50>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_addr_2_req', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [297]  (7.3 ns)

 <State 51>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_addr_3_req', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [320]  (7.3 ns)

 <State 52>: 7.3ns
The critical path consists of the following:
	bus write operation ('write_ln69', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [321]  (7.3 ns)

 <State 53>: 7.3ns
The critical path consists of the following:
	bus request operation ('gmem_addr_4_req', equalizer.cpp:69) on port 'gmem' (equalizer.cpp:69) [343]  (7.3 ns)

 <State 54>: 0ns
The critical path consists of the following:


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
	State 38
	State 39
	State 40
	State 41
	State 42
	State 43
	State 44
	State 45
	State 46
	State 47
	State 48
	State 49
	State 50
	State 51
	State 52
	State 53
	State 54


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
